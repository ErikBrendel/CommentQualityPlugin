# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1328020251;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1335774711;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1356735495;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1357119239;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1368482696;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1385412762;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1496837955;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Class<?> beanClass);1497341594;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_@param beanClass the bean class (might be an AOP proxy class)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Class);protected Class<?> getClassToExpose(Class<?> beanClass) {_		return JmxUtils.getClassToExpose(beanClass)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,param,bean,class,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,class;protected,class,get,class,to,expose,class,bean,class,return,jmx,utils,get,class,to,expose,bean,class
AbstractMBeanInfoAssembler -> @Override 	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1356735495;Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);@Override_	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;override,public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> @Override 	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1368482696;Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);@Override_	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;override,public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> @Override 	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1385412762;Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);@Override_	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;override,public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> @Override 	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1496837955;Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);@Override_	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;override,public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> @Override 	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1497341594;Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);@Override_	public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;override,public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1328020251;Create an instance of the <code>ModelMBeanInfoSupport</code> class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,code,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1335774711;Create an instance of the <code>ModelMBeanInfoSupport</code> class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,code,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1357119239;Create an instance of the {@code ModelMBeanInfoSupport} class supplied with all_JMX implementations and populates the metadata through calls to the subclass._@param managedBean the bean that will be exposed (might be an AOP proxy)_@param beanKey the key associated with the managed bean_@return the populated ModelMBeanInfo instance_@throws JMException in case of errors_@see #getDescription(Object, String)_@see #getAttributeInfo(Object, String)_@see #getConstructorInfo(Object, String)_@see #getOperationInfo(Object, String)_@see #getNotificationInfo(Object, String)_@see #populateMBeanDescriptor(javax.management.Descriptor, Object, String);public ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		checkManagedBean(managedBean)__		ModelMBeanInfo info = new ModelMBeanInfoSupport(_				getClassName(managedBean, beanKey), getDescription(managedBean, beanKey),_				getAttributeInfo(managedBean, beanKey), getConstructorInfo(managedBean, beanKey),_				getOperationInfo(managedBean, beanKey), getNotificationInfo(managedBean, beanKey))__		Descriptor desc = info.getMBeanDescriptor()__		populateMBeanDescriptor(desc, managedBean, beanKey)__		info.setMBeanDescriptor(desc)__		return info__	};create,an,instance,of,the,code,model,mbean,info,support,class,supplied,with,all,jmx,implementations,and,populates,the,metadata,through,calls,to,the,subclass,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,managed,bean,return,the,populated,model,mbean,info,instance,throws,jmexception,in,case,of,errors,see,get,description,object,string,see,get,attribute,info,object,string,see,get,constructor,info,object,string,see,get,operation,info,object,string,see,get,notification,info,object,string,see,populate,mbean,descriptor,javax,management,descriptor,object,string;public,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,check,managed,bean,managed,bean,model,mbean,info,info,new,model,mbean,info,support,get,class,name,managed,bean,bean,key,get,description,managed,bean,bean,key,get,attribute,info,managed,bean,bean,key,get,constructor,info,managed,bean,bean,key,get,operation,info,managed,bean,bean,key,get,notification,info,managed,bean,bean,key,descriptor,desc,info,get,mbean,descriptor,populate,mbean,descriptor,desc,managed,bean,bean,key,info,set,mbean,descriptor,desc,return,info
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1328020251;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1335774711;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1356735495;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1357119239;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1368482696;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1385412762;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1496837955;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) 			throws JMException_;1497341594;Get the attribute metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all the attributes that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors;protected abstract ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,attribute,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,the,attributes,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1328020251;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1335774711;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1356735495;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1357119239;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1368482696;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1385412762;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1496837955;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) 			throws JMException_;1497341594;Get the operation metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all operations that should_be exposed in the management interface for the managed resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@throws JMException in case of errors;protected abstract ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey)_			throws JMException_;get,the,operation,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,operations,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,throws,jmexception,in,case,of,errors;protected,abstract,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1328020251;Called after the <code>ModelMBeanInfo</code> instance has been constructed but_before it is passed to the <code>MBeanExporter</code>._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the <code>Descriptor</code> for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,code,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,code,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,code,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1335774711;Called after the <code>ModelMBeanInfo</code> instance has been constructed but_before it is passed to the <code>MBeanExporter</code>._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the <code>Descriptor</code> for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,code,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,code,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,code,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1356735495;Called after the {@code ModelMBeanInfo} instance has been constructed but_before it is passed to the {@code MBeanExporter}._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1357119239;Called after the {@code ModelMBeanInfo} instance has been constructed but_before it is passed to the {@code MBeanExporter}._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1368482696;Called after the {@code ModelMBeanInfo} instance has been constructed but_before it is passed to the {@code MBeanExporter}._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1385412762;Called after the {@code ModelMBeanInfo} instance has been constructed but_before it is passed to the {@code MBeanExporter}._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1496837955;Called after the {@code ModelMBeanInfo} instance has been constructed but_before it is passed to the {@code MBeanExporter}._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) 			throws JMException;1497341594;Called after the {@code ModelMBeanInfo} instance has been constructed but_before it is passed to the {@code MBeanExporter}._<p>Subclasses can implement this method to add additional descriptors to the_MBean metadata. Default implementation is empty._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey)_			throws JMException {_	};called,after,the,code,model,mbean,info,instance,has,been,constructed,but,before,it,is,passed,to,the,code,mbean,exporter,p,subclasses,can,implement,this,method,to,add,additional,descriptors,to,the,mbean,metadata,default,implementation,is,empty,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,throws,jmexception
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1328020251;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1335774711;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1356735495;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1357119239;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1368482696;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1385412762;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1496837955;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getClassToExpose(Object managedBean);1497341594;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see JmxUtils#getClassToExpose(Object);protected Class<?> getClassToExpose(Object managedBean) {_		return JmxUtils.getClassToExpose(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,jmx,utils,get,class,to,expose,object;protected,class,get,class,to,expose,object,managed,bean,return,jmx,utils,get,class,to,expose,managed,bean
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1328020251;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of <code>ModelMBeanConstructorInfo</code>._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,code,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1335774711;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of <code>ModelMBeanConstructorInfo</code>._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,code,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1356735495;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1357119239;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1368482696;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1385412762;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1496837955;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey) 			throws JMException;1497341594;Get the constructor metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all constructors that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanConstructorInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the constructor metadata_@throws JMException in case of errors;protected ModelMBeanConstructorInfo[] getConstructorInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanConstructorInfo[0]__	};get,the,constructor,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,constructors,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,constructor,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,constructor,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,constructor,info,get,constructor,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,constructor,info,0
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1328020251;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1335774711;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1356735495;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1357119239;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1368482696;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1385412762;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1496837955;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected String getDescription(Object managedBean, String beanKey) throws JMException;1497341594;Get the description of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@throws JMException in case of errors;protected String getDescription(Object managedBean, String beanKey) throws JMException {_		String targetClassName = getTargetClass(managedBean).getName()__		if (AopUtils.isAopProxy(managedBean)) {_			return "Proxy for " + targetClassName__		}_		return targetClassName__	};get,the,description,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,throws,jmexception,in,case,of,errors;protected,string,get,description,object,managed,bean,string,bean,key,throws,jmexception,string,target,class,name,get,target,class,managed,bean,get,name,if,aop,utils,is,aop,proxy,managed,bean,return,proxy,for,target,class,name,return,target,class,name
AbstractMBeanInfoAssembler -> protected Class getTargetClass(Object managedBean);1328020251;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.framework.AopProxyUtils#getTargetClass;protected Class getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,framework,aop,proxy,utils,get,target,class;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected Class getTargetClass(Object managedBean);1335774711;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected Class getTargetClass(Object managedBean);1356735495;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected Class getTargetClass(Object managedBean);1357119239;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected Class getTargetClass(Object managedBean);1368482696;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1328020251;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of <code>ModelMBeanNotificationInfo</code>._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,code,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1335774711;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of <code>ModelMBeanNotificationInfo</code>._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,code,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1356735495;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1357119239;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1368482696;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1385412762;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1496837955;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey) 			throws JMException;1497341594;Get the notification metadata for the MBean resource. Subclasses should implement_this method to return the appropriate metadata for all notifications that should_be exposed in the management interface for the managed resource._<p>Default implementation returns an empty array of {@code ModelMBeanNotificationInfo}._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the notification metadata_@throws JMException in case of errors;protected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey)_			throws JMException {_		return new ModelMBeanNotificationInfo[0]__	};get,the,notification,metadata,for,the,mbean,resource,subclasses,should,implement,this,method,to,return,the,appropriate,metadata,for,all,notifications,that,should,be,exposed,in,the,management,interface,for,the,managed,resource,p,default,implementation,returns,an,empty,array,of,code,model,mbean,notification,info,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,notification,metadata,throws,jmexception,in,case,of,errors;protected,model,mbean,notification,info,get,notification,info,object,managed,bean,string,bean,key,throws,jmexception,return,new,model,mbean,notification,info,0
AbstractMBeanInfoAssembler -> protected Class<?> getTargetClass(Object managedBean);1385412762;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class<?> getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getTargetClass(Object managedBean);1496837955;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class<?> getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected Class<?> getTargetClass(Object managedBean);1497341594;Return the actual bean class of the given bean instance._This is the class exposed to description-style JMX properties._<p>Default implementation returns the target class for an AOP proxy,_and the plain bean class else._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.aop.support.AopUtils#getTargetClass(Object);protected Class<?> getTargetClass(Object managedBean) {_		return AopUtils.getTargetClass(managedBean)__	};return,the,actual,bean,class,of,the,given,bean,instance,this,is,the,class,exposed,to,description,style,jmx,properties,p,default,implementation,returns,the,target,class,for,an,aop,proxy,and,the,plain,bean,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,aop,support,aop,utils,get,target,class,object;protected,class,get,target,class,object,managed,bean,return,aop,utils,get,target,class,managed,bean
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1328020251;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1335774711;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1356735495;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1357119239;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1368482696;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1385412762;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1496837955;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected void checkManagedBean(Object managedBean) throws IllegalArgumentException;1497341594;Check the given bean instance, throwing an IllegalArgumentException_if it is not eligible for exposure with this assembler._<p>Default implementation is empty, accepting every bean instance._@param managedBean the bean that will be exposed (might be an AOP proxy)_@throws IllegalArgumentException the bean is not valid for exposure;protected void checkManagedBean(Object managedBean) throws IllegalArgumentException {_	};check,the,given,bean,instance,throwing,an,illegal,argument,exception,if,it,is,not,eligible,for,exposure,with,this,assembler,p,default,implementation,is,empty,accepting,every,bean,instance,param,managed,bean,the,bean,that,will,be,exposed,might,be,an,aop,proxy,throws,illegal,argument,exception,the,bean,is,not,valid,for,exposure;protected,void,check,managed,bean,object,managed,bean,throws,illegal,argument,exception
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1328020251;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1335774711;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1356735495;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1357119239;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1368482696;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1385412762;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1496837955;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
AbstractMBeanInfoAssembler -> protected String getClassName(Object managedBean, String beanKey) throws JMException;1497341594;Get the class name of the MBean resource._<p>Default implementation returns a simple description for the MBean_based on the class name._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the MBean description_@throws JMException in case of errors;protected String getClassName(Object managedBean, String beanKey) throws JMException {_		return getTargetClass(managedBean).getName()__	};get,the,class,name,of,the,mbean,resource,p,default,implementation,returns,a,simple,description,for,the,mbean,based,on,the,class,name,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,mbean,description,throws,jmexception,in,case,of,errors;protected,string,get,class,name,object,managed,bean,string,bean,key,throws,jmexception,return,get,target,class,managed,bean,get,name
