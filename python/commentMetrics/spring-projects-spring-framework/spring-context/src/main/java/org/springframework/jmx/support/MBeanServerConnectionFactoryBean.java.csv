commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the service URL of the remote {@code MBeanServer}.  */ ;/**  * Set the service URL of the remote {@code MBeanServer}.  */ public void setServiceUrl(String url) throws MalformedURLException {     this.serviceUrl = new JMXServiceURL(url). }
true;public;1;3;/**  * Set the environment properties used to construct the {@code JMXConnector}  * as {@code java.util.Properties} (String key/value pairs).  */ ;/**  * Set the environment properties used to construct the {@code JMXConnector}  * as {@code java.util.Properties} (String key/value pairs).  */ public void setEnvironment(Properties environment) {     CollectionUtils.mergePropertiesIntoMap(environment, this.environment). }
true;public;1;5;/**  * Set the environment properties used to construct the {@code JMXConnector}  * as a {@code Map} of String keys and arbitrary Object values.  */ ;/**  * Set the environment properties used to construct the {@code JMXConnector}  * as a {@code Map} of String keys and arbitrary Object values.  */ public void setEnvironmentMap(@Nullable Map<String, ?> environment) {     if (environment != null) {         this.environment.putAll(environment).     } }
true;public;1;3;/**  * Set whether to connect to the server on startup. Default is "true".  * <p>Can be turned off to allow for late start of the JMX server.  * In this case, the JMX connector will be fetched on first access.  */ ;/**  * Set whether to connect to the server on startup. Default is "true".  * <p>Can be turned off to allow for late start of the JMX server.  * In this case, the JMX connector will be fetched on first access.  */ public void setConnectOnStartup(boolean connectOnStartup) {     this.connectOnStartup = connectOnStartup. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
true;public;0;13;/**  * Creates a {@code JMXConnector} for the given settings  * and exposes the associated {@code MBeanServerConnection}.  */ ;/**  * Creates a {@code JMXConnector} for the given settings  * and exposes the associated {@code MBeanServerConnection}.  */ @Override public void afterPropertiesSet() throws IOException {     if (this.serviceUrl == null) {         throw new IllegalArgumentException("Property 'serviceUrl' is required").     }     if (this.connectOnStartup) {         connect().     } else {         createLazyConnection().     } }
true;private;0;5;/**  * Connects to the remote {@code MBeanServer} using the configured service URL and  * environment properties.  */ ;/**  * Connects to the remote {@code MBeanServer} using the configured service URL and  * environment properties.  */ private void connect() throws IOException {     Assert.state(this.serviceUrl != null, "No JMXServiceURL set").     this.connector = JMXConnectorFactory.connect(this.serviceUrl, this.environment).     this.connection = this.connector.getMBeanServerConnection(). }
true;private;0;9;/**  * Creates lazy proxies for the {@code JMXConnector} and {@code MBeanServerConnection}.  */ ;/**  * Creates lazy proxies for the {@code JMXConnector} and {@code MBeanServerConnection}.  */ private void createLazyConnection() {     this.connectorTargetSource = new JMXConnectorLazyInitTargetSource().     TargetSource connectionTargetSource = new MBeanServerConnectionLazyInitTargetSource().     this.connector = (JMXConnector) new ProxyFactory(JMXConnector.class, this.connectorTargetSource).getProxy(this.beanClassLoader).     this.connection = (MBeanServerConnection) new ProxyFactory(MBeanServerConnection.class, connectionTargetSource).getProxy(this.beanClassLoader). }
false;public;0;5;;@Override @Nullable public MBeanServerConnection getObject() {     return this.connection. }
false;public;0;4;;@Override public Class<? extends MBeanServerConnection> getObjectType() {     return (this.connection != null ? this.connection.getClass() : MBeanServerConnection.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;public;0;7;/**  * Closes the underlying {@code JMXConnector}.  */ ;/**  * Closes the underlying {@code JMXConnector}.  */ @Override public void destroy() throws IOException {     if (this.connector != null && (this.connectorTargetSource == null || this.connectorTargetSource.isInitialized())) {         this.connector.close().     } }
false;protected;0;5;;@Override protected Object createObject() throws Exception {     Assert.state(serviceUrl != null, "No JMXServiceURL set").     return JMXConnectorFactory.connect(serviceUrl, environment). }
false;public;0;4;;@Override public Class<?> getTargetClass() {     return JMXConnector.class. }
false;protected;0;5;;@Override protected Object createObject() throws Exception {     Assert.state(connector != null, "JMXConnector not initialized").     return connector.getMBeanServerConnection(). }
false;public;0;4;;@Override public Class<?> getTargetClass() {     return MBeanServerConnection.class. }
