commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event.getSource() == this.source) {         onApplicationEventInternal(event).     } }
false;public;1;4;;@Override public boolean supportsEventType(ResolvableType eventType) {     return (this.delegate == null || this.delegate.supportsEventType(eventType)). }
false;public;1;4;;@Override public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {     return supportsEventType(ResolvableType.forType(eventType)). }
false;public;1;4;;@Override public boolean supportsSourceType(@Nullable Class<?> sourceType) {     return (sourceType != null && sourceType.isInstance(this.source)). }
false;public;0;4;;@Override public int getOrder() {     return (this.delegate != null ? this.delegate.getOrder() : Ordered.LOWEST_PRECEDENCE). }
true;protected;1;7;/**  * Actually process the event, after having filtered according to the  * desired event source already.  * <p>The default implementation invokes the specified delegate, if any.  * @param event the event to process (matching the specified source)  */ ;/**  * Actually process the event, after having filtered according to the  * desired event source already.  * <p>The default implementation invokes the specified delegate, if any.  * @param event the event to process (matching the specified source)  */ protected void onApplicationEventInternal(ApplicationEvent event) {     if (this.delegate == null) {         throw new IllegalStateException("Must specify a delegate object or override the onApplicationEventInternal method").     }     this.delegate.onApplicationEvent(event). }
