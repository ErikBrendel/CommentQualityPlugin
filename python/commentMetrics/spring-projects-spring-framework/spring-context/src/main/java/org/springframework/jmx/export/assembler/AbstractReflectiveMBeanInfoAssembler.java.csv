# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1495868221;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1496837955;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1500448076;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1519295386;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1520529117;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1533725446;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected Integer getDefaultCurrencyTimeLimit();1533727514;Return default value for the JMX field "currencyTimeLimit", if any.;@Nullable_	protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;nullable,protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit);1500448076;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,nullable,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit);1519295386;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,nullable,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit);1520529117;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,nullable,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit);1533725446;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,nullable,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit);1533727514;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(@Nullable Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,nullable,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1328020251;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor <code>Method</code>_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return <code>true</code> if the accessor should be included in the management interface,_otherwise <code>false<code>;protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,code,true,code,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false,code;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1351648401;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor <code>Method</code>_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return <code>true</code> if the accessor should be included in the management interface,_otherwise <code>false<code>;protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,code,true,code,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false,code;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1356735495;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1362408075;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1375969963;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1385412762;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1405696918;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1432125256;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1467730834;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1495868221;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1496837955;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1500448076;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1519295386;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1520529117;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1533725446;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeReadAttribute(Method method, String beanKey)_;1533727514;Allows subclasses to vote on the inclusion of a particular attribute accessor._@param method the accessor {@code Method}_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the accessor should be included in the management interface,_otherwise {@code false};protected abstract boolean includeReadAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,accessor,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,accessor,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,read,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1500448076;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,nullable,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1519295386;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,nullable,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1520529117;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,nullable,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1533725446;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,nullable,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer);1533727514;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(@Nullable ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,nullable,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1328020251;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_<code>getFoo()</code> translates to an attribute called <code>Foo</code>._With strict casing disabled, <code>getFoo()</code> would translate to just_<code>foo</code>.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,code,translates,to,an,attribute,called,code,foo,code,with,strict,casing,disabled,code,get,foo,code,would,translate,to,just,code,foo,code;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1351648401;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_<code>getFoo()</code> translates to an attribute called <code>Foo</code>._With strict casing disabled, <code>getFoo()</code> would translate to just_<code>foo</code>.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,code,translates,to,an,attribute,called,code,foo,code,with,strict,casing,disabled,code,get,foo,code,would,translate,to,just,code,foo,code;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1356735495;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1362408075;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1375969963;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1385412762;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1405696918;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1432125256;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1467730834;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1495868221;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1496837955;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1500448076;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1519295386;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1520529117;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1533725446;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> public void setUseStrictCasing(boolean useStrictCasing);1533727514;Set whether to use strict casing for attributes. Enabled by default._<p>When using strict casing, a JavaBean property with a getter such as_{@code getFoo()} translates to an attribute called {@code Foo}._With strict casing disabled, {@code getFoo()} would translate to just_{@code foo}.;public void setUseStrictCasing(boolean useStrictCasing) {_		this.useStrictCasing = useStrictCasing__	};set,whether,to,use,strict,casing,for,attributes,enabled,by,default,p,when,using,strict,casing,a,java,bean,property,with,a,getter,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo;public,void,set,use,strict,casing,boolean,use,strict,casing,this,use,strict,casing,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected ParameterNameDiscoverer getParameterNameDiscoverer();1362408075;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected ParameterNameDiscoverer getParameterNameDiscoverer();1375969963;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected ParameterNameDiscoverer getParameterNameDiscoverer();1385412762;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected ParameterNameDiscoverer getParameterNameDiscoverer();1405696918;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected ParameterNameDiscoverer getParameterNameDiscoverer();1432125256;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected ParameterNameDiscoverer getParameterNameDiscoverer();1467730834;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1328020251;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding <code>Method</code>._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,code,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1351648401;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding <code>Method</code>._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,code,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1356735495;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1362408075;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1375969963;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1385412762;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1405696918;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1432125256;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1467730834;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1495868221;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1496837955;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1500448076;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1519295386;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1520529117;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1533725446;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey);1533727514;Get the description for a particular attribute._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param propertyDescriptor the PropertyDescriptor for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the attribute;protected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey) {_		return propertyDescriptor.getDisplayName()__	};get,the,description,for,a,particular,attribute,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,property,descriptor,the,property,descriptor,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,attribute;protected,string,get,attribute,description,property,descriptor,property,descriptor,string,bean,key,return,property,descriptor,get,display,name
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1328020251;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1351648401;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1356735495;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1362408075;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1375969963;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1385412762;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1405696918;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1432125256;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> protected Integer getDefaultCurrencyTimeLimit();1467730834;Return default value for the JMX field "currencyTimeLimit", if any.;protected Integer getDefaultCurrencyTimeLimit() {_		return this.defaultCurrencyTimeLimit__	};return,default,value,for,the,jmx,field,currency,time,limit,if,any;protected,integer,get,default,currency,time,limit,return,this,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1328020251;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of <code>-1</code> in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value <code>>= 0</code> there:_a metadata "currencyTimeLimit" value of <code>-1</code> indicates_to use the default_ a value of <code>0</code> indicates to "always cache"_and will be translated to <code>Integer.MAX_VALUE</code>_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,code,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,code,there,a,metadata,currency,time,limit,value,of,code,1,code,indicates,to,use,the,default,a,value,of,code,0,code,indicates,to,always,cache,and,will,be,translated,to,code,integer,code,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1351648401;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of <code>-1</code> in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value <code>>= 0</code> there:_a metadata "currencyTimeLimit" value of <code>-1</code> indicates_to use the default_ a value of <code>0</code> indicates to "always cache"_and will be translated to <code>Integer.MAX_VALUE</code>_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,code,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,code,there,a,metadata,currency,time,limit,value,of,code,1,code,indicates,to,use,the,default,a,value,of,code,0,code,indicates,to,always,cache,and,will,be,translated,to,code,integer,code,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1356735495;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1362408075;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1375969963;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1385412762;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1405696918;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1432125256;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1467730834;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1495868221;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit);1496837955;Set the default for the JMX field "currencyTimeLimit"._The default will usually indicate to never cache attribute values._<p>Default is none, not explicitly setting that field, as recommended by the_JMX 1.2 specification. This should result in "never cache" behavior, always_reading attribute values freshly (which corresponds to a "currencyTimeLimit"_of {@code -1} in JMX 1.2)._<p>However, some JMX implementations (that do not follow the JMX 1.2 spec_in that respect) might require an explicit value to be set here to get_"never cache" behavior: for example, JBoss 3.2.x._<p>Note that the "currencyTimeLimit" value can also be specified on a_managed attribute or operation. The default value will apply if not_overridden with a "currencyTimeLimit" value {@code >= 0} there:_a metadata "currencyTimeLimit" value of {@code -1} indicates_to use the default_ a value of {@code 0} indicates to "always cache"_and will be translated to {@code Integer.MAX_VALUE}_ a positive_value indicates the number of cache seconds._@see org.springframework.jmx.export.metadata.AbstractJmxAttribute#setCurrencyTimeLimit_@see #applyCurrencyTimeLimit(javax.management.Descriptor, int);public void setDefaultCurrencyTimeLimit(Integer defaultCurrencyTimeLimit) {_		this.defaultCurrencyTimeLimit = defaultCurrencyTimeLimit__	};set,the,default,for,the,jmx,field,currency,time,limit,the,default,will,usually,indicate,to,never,cache,attribute,values,p,default,is,none,not,explicitly,setting,that,field,as,recommended,by,the,jmx,1,2,specification,this,should,result,in,never,cache,behavior,always,reading,attribute,values,freshly,which,corresponds,to,a,currency,time,limit,of,code,1,in,jmx,1,2,p,however,some,jmx,implementations,that,do,not,follow,the,jmx,1,2,spec,in,that,respect,might,require,an,explicit,value,to,be,set,here,to,get,never,cache,behavior,for,example,jboss,3,2,x,p,note,that,the,currency,time,limit,value,can,also,be,specified,on,a,managed,attribute,or,operation,the,default,value,will,apply,if,not,overridden,with,a,currency,time,limit,value,code,0,there,a,metadata,currency,time,limit,value,of,code,1,indicates,to,use,the,default,a,value,of,code,0,indicates,to,always,cache,and,will,be,translated,to,code,integer,a,positive,value,indicates,the,number,of,cache,seconds,see,org,springframework,jmx,export,metadata,abstract,jmx,attribute,set,currency,time,limit,see,apply,currency,time,limit,javax,management,descriptor,int;public,void,set,default,currency,time,limit,integer,default,currency,time,limit,this,default,currency,time,limit,default,currency,time,limit
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1362408075;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>The default is {@link LocalVariableTableParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,the,default,is,link,local,variable,table,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1375969963;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1385412762;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1405696918;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1432125256;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1467730834;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1495868221;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer);1496837955;Set the ParameterNameDiscoverer to use for resolving method parameter_names if needed (e.g. for parameter names of MBean operation methods)._<p>Default is a {@link DefaultParameterNameDiscoverer}.;public void setParameterNameDiscoverer(ParameterNameDiscoverer parameterNameDiscoverer) {_		this.parameterNameDiscoverer = parameterNameDiscoverer__	};set,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,e,g,for,parameter,names,of,mbean,operation,methods,p,default,is,a,link,default,parameter,name,discoverer;public,void,set,parameter,name,discoverer,parameter,name,discoverer,parameter,name,discoverer,this,parameter,name,discoverer,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1328020251;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator <code>Method</code>._@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return <code>true</code> if the mutator should be included in the management interface,_otherwise <code>false<code>;protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,code,true,code,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false,code;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1351648401;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator <code>Method</code>._@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return <code>true</code> if the mutator should be included in the management interface,_otherwise <code>false<code>;protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,code,true,code,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false,code;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1356735495;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1362408075;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1375969963;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1385412762;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1405696918;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1432125256;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1467730834;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1495868221;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1496837955;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1500448076;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1519295386;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1520529117;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1533725446;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;1533727514;Allows subclasses to vote on the inclusion of a particular attribute mutator._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return {@code true} if the mutator should be included in the management interface,_otherwise {@code false};protected abstract boolean includeWriteAttribute(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,attribute,mutator,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,code,true,if,the,mutator,should,be,included,in,the,management,interface,otherwise,code,false;protected,abstract,boolean,include,write,attribute,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1328020251;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to <code>true</code> for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to <code>true</code>:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,code,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,code,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1351648401;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to <code>true</code> for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to <code>true</code>:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,code,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,code,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1356735495;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1362408075;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1375969963;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1385412762;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1405696918;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1432125256;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1467730834;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1495868221;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1496837955;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1500448076;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1519295386;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1520529117;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1533725446;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> public void setExposeClassDescriptor(boolean exposeClassDescriptor);1533727514;Set whether to expose the JMX descriptor field "class" for managed operations._Default is "false", letting the JMX implementation determine the actual class_through reflection._<p>Set this property to {@code true} for JMX implementations that_require the "class" field to be specified, for example WebLogic's._In that case, Spring will expose the target class name there, in case of_a plain bean instance or a CGLIB proxy. When encountering a JDK dynamic_proxy, the <b>first</b> interface implemented by the proxy will be specified._<p><b>WARNING:</b> Review your proxy definitions when exposing a JDK dynamic_proxy through JMX, in particular with this property turned to {@code true}:_the specified interface list should start with your management interface in_this case, with all other interfaces following. In general, consider exposing_your target bean directly or a CGLIB proxy for it instead._@see #getClassForDescriptor(Object);public void setExposeClassDescriptor(boolean exposeClassDescriptor) {_		this.exposeClassDescriptor = exposeClassDescriptor__	};set,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations,default,is,false,letting,the,jmx,implementation,determine,the,actual,class,through,reflection,p,set,this,property,to,code,true,for,jmx,implementations,that,require,the,class,field,to,be,specified,for,example,web,logic,s,in,that,case,spring,will,expose,the,target,class,name,there,in,case,of,a,plain,bean,instance,or,a,cglib,proxy,when,encountering,a,jdk,dynamic,proxy,the,b,first,b,interface,implemented,by,the,proxy,will,be,specified,p,b,warning,b,review,your,proxy,definitions,when,exposing,a,jdk,dynamic,proxy,through,jmx,in,particular,with,this,property,turned,to,code,true,the,specified,interface,list,should,start,with,your,management,interface,in,this,case,with,all,other,interfaces,following,in,general,consider,exposing,your,target,bean,directly,or,a,cglib,proxy,for,it,instead,see,get,class,for,descriptor,object;public,void,set,expose,class,descriptor,boolean,expose,class,descriptor,this,expose,class,descriptor,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1328020251;Allows subclasses to add extra fields to the <code>Descriptor</code> for a_particular attribute._<p>The default implementation sets the <code>currencyTimeLimit</code> field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,code,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1351648401;Allows subclasses to add extra fields to the <code>Descriptor</code> for a_particular attribute._<p>The default implementation sets the <code>currencyTimeLimit</code> field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,code,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1356735495;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1362408075;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1375969963;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1385412762;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1405696918;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1432125256;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1467730834;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey);1495868221;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,method,getter,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1328020251;Allows subclasses to add extra fields to the <code>Descriptor</code> for an MBean._<p>The default implementation sets the <code>currencyTimeLimit</code> field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the <code>Descriptor</code> for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,code,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,code,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1351648401;Allows subclasses to add extra fields to the <code>Descriptor</code> for an MBean._<p>The default implementation sets the <code>currencyTimeLimit</code> field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the <code>Descriptor</code> for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,code,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,code,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1356735495;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1362408075;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1375969963;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1385412762;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1405696918;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1432125256;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1467730834;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1495868221;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1496837955;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1500448076;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1519295386;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1520529117;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1533725446;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey);1533727514;Allows subclasses to add extra fields to the {@code Descriptor} for an MBean._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param descriptor the {@code Descriptor} for the MBean resource._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);@Override_	protected void populateMBeanDescriptor(Descriptor descriptor, Object managedBean, String beanKey) {_		applyDefaultCurrencyTimeLimit(descriptor)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,an,mbean,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,descriptor,the,code,descriptor,for,the,mbean,resource,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;override,protected,void,populate,mbean,descriptor,descriptor,descriptor,object,managed,bean,string,bean,key,apply,default,currency,time,limit,descriptor
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1328020251;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1351648401;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1356735495;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1362408075;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1375969963;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1385412762;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1405696918;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (method.getDeclaringClass().equals(Object.class)) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,method,get,declaring,class,equals,object,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1432125256;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<ModelMBeanOperationInfo>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,model,mbean,operation,info,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1467730834;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1495868221;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1496837955;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1500448076;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[infos.size()])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1519295386;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null) {_				if ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey))) {_					_					_					info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__					Descriptor desc = info.getDescriptor()__					if (method.equals(pd.getReadMethod())) {_						desc.setField(FIELD_ROLE, ROLE_GETTER)__					}_					else {_						desc.setField(FIELD_ROLE, ROLE_SETTER)__					}_					desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__					if (isExposeClassDescriptor()) {_						desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__					}_					info.setDescriptor(desc)__				}_			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[0])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,if,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,0
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1520529117;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the managment interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null && ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey)))) {_				_				_				info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				if (method.equals(pd.getReadMethod())) {_					desc.setField(FIELD_ROLE, ROLE_GETTER)__				}_				else {_					desc.setField(FIELD_ROLE, ROLE_SETTER)__				}_				desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				info.setDescriptor(desc)__			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[0])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,managment,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,0
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1533725446;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is inclued in the management interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null && ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey)))) {_				_				_				info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				if (method.equals(pd.getReadMethod())) {_					desc.setField(FIELD_ROLE, ROLE_GETTER)__				}_				else {_					desc.setField(FIELD_ROLE, ROLE_SETTER)__				}_				desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				info.setDescriptor(desc)__			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[0])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,inclued,in,the,management,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,0
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey);1533727514;Iterate through all methods on the MBean class and gives subclasses the chance_to vote on their inclusion. If a particular method corresponds to the accessor_or mutator of an attribute that is included in the management interface, then_the corresponding operation is exposed with the &quot_role&quot_ descriptor_field set to the appropriate value._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the operation metadata_@see #populateOperationDescriptor;@Override_	protected ModelMBeanOperationInfo[] getOperationInfo(Object managedBean, String beanKey) {_		Method[] methods = getClassToExpose(managedBean).getMethods()__		List<ModelMBeanOperationInfo> infos = new ArrayList<>()___		for (Method method : methods) {_			if (method.isSynthetic()) {_				continue__			}_			if (Object.class == method.getDeclaringClass()) {_				continue__			}__			ModelMBeanOperationInfo info = null__			PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method)__			if (pd != null && ((method.equals(pd.getReadMethod()) && includeReadAttribute(method, beanKey)) ||_						(method.equals(pd.getWriteMethod()) && includeWriteAttribute(method, beanKey)))) {_				_				_				info = createModelMBeanOperationInfo(method, pd.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				if (method.equals(pd.getReadMethod())) {_					desc.setField(FIELD_ROLE, ROLE_GETTER)__				}_				else {_					desc.setField(FIELD_ROLE, ROLE_SETTER)__				}_				desc.setField(FIELD_VISIBILITY, ATTRIBUTE_OPERATION_VISIBILITY)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				info.setDescriptor(desc)__			}__			_			if (info == null && includeOperation(method, beanKey)) {_				info = createModelMBeanOperationInfo(method, method.getName(), beanKey)__				Descriptor desc = info.getDescriptor()__				desc.setField(FIELD_ROLE, ROLE_OPERATION)__				if (isExposeClassDescriptor()) {_					desc.setField(FIELD_CLASS, getClassForDescriptor(managedBean).getName())__				}_				populateOperationDescriptor(desc, method, beanKey)__				info.setDescriptor(desc)__			}__			if (info != null) {_				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanOperationInfo[0])__	};iterate,through,all,methods,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,their,inclusion,if,a,particular,method,corresponds,to,the,accessor,or,mutator,of,an,attribute,that,is,included,in,the,management,interface,then,the,corresponding,operation,is,exposed,with,the,quot,role,quot,descriptor,field,set,to,the,appropriate,value,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,operation,metadata,see,populate,operation,descriptor;override,protected,model,mbean,operation,info,get,operation,info,object,managed,bean,string,bean,key,method,methods,get,class,to,expose,managed,bean,get,methods,list,model,mbean,operation,info,infos,new,array,list,for,method,method,methods,if,method,is,synthetic,continue,if,object,class,method,get,declaring,class,continue,model,mbean,operation,info,info,null,property,descriptor,pd,bean,utils,find,property,for,method,method,if,pd,null,method,equals,pd,get,read,method,include,read,attribute,method,bean,key,method,equals,pd,get,write,method,include,write,attribute,method,bean,key,info,create,model,mbean,operation,info,method,pd,get,name,bean,key,descriptor,desc,info,get,descriptor,if,method,equals,pd,get,read,method,desc,set,field,else,desc,set,field,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,info,set,descriptor,desc,if,info,null,include,operation,method,bean,key,info,create,model,mbean,operation,info,method,method,get,name,bean,key,descriptor,desc,info,get,descriptor,desc,set,field,if,is,expose,class,descriptor,desc,set,field,get,class,for,descriptor,managed,bean,get,name,populate,operation,descriptor,desc,method,bean,key,info,set,descriptor,desc,if,info,null,infos,add,info,return,infos,to,array,new,model,mbean,operation,info,0
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1385412762;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1405696918;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1432125256;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1467730834;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1495868221;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1496837955;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1500448076;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1519295386;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1520529117;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1533725446;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class<?> getClassForDescriptor(Object managedBean);1533727514;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class<?> getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1328020251;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1351648401;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1356735495;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1362408075;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1375969963;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1385412762;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1405696918;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1432125256;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<ModelMBeanAttributeInfo>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,model,mbean,attribute,info,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1467730834;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1495868221;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1496837955;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1500448076;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[infos.size()])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,infos,size
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1519295386;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[0])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,0
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1520529117;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[0])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,0
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1533725446;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[0])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,0
AbstractReflectiveMBeanInfoAssembler -> @Override 	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException;1533727514;Iterate through all properties on the MBean class and gives subclasses_the chance to vote on the inclusion of both the accessor and mutator._If a particular accessor or mutator is voted for inclusion, the appropriate_metadata is assembled and passed to the subclass for descriptor population._@param managedBean the bean instance (might be an AOP proxy)_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the attribute metadata_@throws JMException in case of errors_@see #populateAttributeDescriptor;@Override_	protected ModelMBeanAttributeInfo[] getAttributeInfo(Object managedBean, String beanKey) throws JMException {_		PropertyDescriptor[] props = BeanUtils.getPropertyDescriptors(getClassToExpose(managedBean))__		List<ModelMBeanAttributeInfo> infos = new ArrayList<>()___		for (PropertyDescriptor prop : props) {_			Method getter = prop.getReadMethod()__			if (getter != null && getter.getDeclaringClass() == Object.class) {_				continue__			}_			if (getter != null && !includeReadAttribute(getter, beanKey)) {_				getter = null__			}__			Method setter = prop.getWriteMethod()__			if (setter != null && !includeWriteAttribute(setter, beanKey)) {_				setter = null__			}__			if (getter != null || setter != null) {_				_				String attrName = JmxUtils.getAttributeName(prop, isUseStrictCasing())__				String description = getAttributeDescription(prop, beanKey)__				ModelMBeanAttributeInfo info = new ModelMBeanAttributeInfo(attrName, description, getter, setter)___				Descriptor desc = info.getDescriptor()__				if (getter != null) {_					desc.setField(FIELD_GET_METHOD, getter.getName())__				}_				if (setter != null) {_					desc.setField(FIELD_SET_METHOD, setter.getName())__				}__				populateAttributeDescriptor(desc, getter, setter, beanKey)__				info.setDescriptor(desc)__				infos.add(info)__			}_		}__		return infos.toArray(new ModelMBeanAttributeInfo[0])__	};iterate,through,all,properties,on,the,mbean,class,and,gives,subclasses,the,chance,to,vote,on,the,inclusion,of,both,the,accessor,and,mutator,if,a,particular,accessor,or,mutator,is,voted,for,inclusion,the,appropriate,metadata,is,assembled,and,passed,to,the,subclass,for,descriptor,population,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,attribute,metadata,throws,jmexception,in,case,of,errors,see,populate,attribute,descriptor;override,protected,model,mbean,attribute,info,get,attribute,info,object,managed,bean,string,bean,key,throws,jmexception,property,descriptor,props,bean,utils,get,property,descriptors,get,class,to,expose,managed,bean,list,model,mbean,attribute,info,infos,new,array,list,for,property,descriptor,prop,props,method,getter,prop,get,read,method,if,getter,null,getter,get,declaring,class,object,class,continue,if,getter,null,include,read,attribute,getter,bean,key,getter,null,method,setter,prop,get,write,method,if,setter,null,include,write,attribute,setter,bean,key,setter,null,if,getter,null,setter,null,string,attr,name,jmx,utils,get,attribute,name,prop,is,use,strict,casing,string,description,get,attribute,description,prop,bean,key,model,mbean,attribute,info,info,new,model,mbean,attribute,info,attr,name,description,getter,setter,descriptor,desc,info,get,descriptor,if,getter,null,desc,set,field,getter,get,name,if,setter,null,desc,set,field,setter,get,name,populate,attribute,descriptor,desc,getter,setter,bean,key,info,set,descriptor,desc,infos,add,info,return,infos,to,array,new,model,mbean,attribute,info,0
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1328020251;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding <code>Method</code>._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,code,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1351648401;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding <code>Method</code>._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,code,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1356735495;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1362408075;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1375969963;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1385412762;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1405696918;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1432125256;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1467730834;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1495868221;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1496837955;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1500448076;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1519295386;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1520529117;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1533725446;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected String getOperationDescription(Method method, String beanKey);1533727514;Get the description for a particular operation._<p>The default implementation returns a description for the operation_that is the name of corresponding {@code Method}._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the description for the operation;protected String getOperationDescription(Method method, String beanKey) {_		return method.getName()__	};get,the,description,for,a,particular,operation,p,the,default,implementation,returns,a,description,for,the,operation,that,is,the,name,of,corresponding,code,method,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,description,for,the,operation;protected,string,get,operation,description,method,method,string,bean,key,return,method,get,name
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor( 			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey);1496837955;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(_			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey) {__		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,nullable,method,getter,nullable,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor( 			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey);1500448076;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(_			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey) {__		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,nullable,method,getter,nullable,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor( 			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey);1519295386;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(_			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey) {__		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,nullable,method,getter,nullable,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor( 			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey);1520529117;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(_			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey) {__		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,nullable,method,getter,nullable,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor( 			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey);1533725446;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(_			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey) {__		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,nullable,method,getter,nullable,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateAttributeDescriptor( 			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey);1533727514;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular attribute._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the attribute descriptor_@param getter the accessor method for the attribute_@param setter the mutator method for the attribute_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateAttributeDescriptor(_			Descriptor desc, @Nullable Method getter, @Nullable Method setter, String beanKey) {__		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,attribute,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,attribute,descriptor,param,getter,the,accessor,method,for,the,attribute,param,setter,the,mutator,method,for,the,attribute,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,attribute,descriptor,descriptor,desc,nullable,method,getter,nullable,method,setter,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1495868221;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1496837955;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1500448076;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1519295386;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1520529117;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1533725446;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> @Nullable 	protected ParameterNameDiscoverer getParameterNameDiscoverer();1533727514;Return the ParameterNameDiscoverer to use for resolving method parameter_names if needed (may be {@code null} in order to skip parameter detection).;@Nullable_	protected ParameterNameDiscoverer getParameterNameDiscoverer() {_		return this.parameterNameDiscoverer__	};return,the,parameter,name,discoverer,to,use,for,resolving,method,parameter,names,if,needed,may,be,code,null,in,order,to,skip,parameter,detection;nullable,protected,parameter,name,discoverer,get,parameter,name,discoverer,return,this,parameter,name,discoverer
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1328020251;Set the <code>currencyTimeLimit</code> field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1351648401;Set the <code>currencyTimeLimit</code> field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1356735495;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1362408075;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1375969963;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1385412762;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1405696918;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1432125256;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1467730834;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1495868221;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1496837955;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1500448076;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1519295386;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1520529117;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1533725446;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected final void applyDefaultCurrencyTimeLimit(Descriptor desc);1533727514;Set the {@code currencyTimeLimit} field to the specified_"defaultCurrencyTimeLimit", if any (by default none)._@param desc the JMX attribute or operation descriptor_@see #setDefaultCurrencyTimeLimit(Integer);protected final void applyDefaultCurrencyTimeLimit(Descriptor desc) {_		if (getDefaultCurrencyTimeLimit() != null) {_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, getDefaultCurrencyTimeLimit().toString())__		}_	};set,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,jmx,attribute,or,operation,descriptor,see,set,default,currency,time,limit,integer;protected,final,void,apply,default,currency,time,limit,descriptor,desc,if,get,default,currency,time,limit,null,desc,set,field,get,default,currency,time,limit,to,string
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1328020251;Allows subclasses to add extra fields to the <code>Descriptor</code> for a_particular operation._<p>The default implementation sets the <code>currencyTimeLimit</code> field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,code,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1351648401;Allows subclasses to add extra fields to the <code>Descriptor</code> for a_particular operation._<p>The default implementation sets the <code>currencyTimeLimit</code> field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,code,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,code,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1356735495;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1362408075;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1375969963;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1385412762;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1405696918;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1432125256;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1467730834;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1495868221;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1496837955;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1500448076;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1519295386;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1520529117;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1533725446;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey);1533727514;Allows subclasses to add extra fields to the {@code Descriptor} for a_particular operation._<p>The default implementation sets the {@code currencyTimeLimit} field to_the specified "defaultCurrencyTimeLimit", if any (by default none)._@param desc the operation descriptor_@param method the method corresponding to the operation_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey) {_		applyDefaultCurrencyTimeLimit(desc)__	};allows,subclasses,to,add,extra,fields,to,the,code,descriptor,for,a,particular,operation,p,the,default,implementation,sets,the,code,currency,time,limit,field,to,the,specified,default,currency,time,limit,if,any,by,default,none,param,desc,the,operation,descriptor,param,method,the,method,corresponding,to,the,operation,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,populate,operation,descriptor,descriptor,desc,method,method,string,bean,key,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1328020251;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value <code>>0</code> as-is (as number of cache seconds),_turns a value of <code>0</code> into <code>Integer.MAX_VALUE</code> ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value <code><0</code>. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,code,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,code,into,code,integer,code,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,code,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1351648401;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value <code>>0</code> as-is (as number of cache seconds),_turns a value of <code>0</code> into <code>Integer.MAX_VALUE</code> ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value <code><0</code>. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,code,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,code,into,code,integer,code,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,code,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1356735495;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1362408075;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1375969963;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1385412762;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1405696918;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1432125256;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1467730834;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1495868221;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1496837955;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1500448076;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1519295386;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1520529117;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1533725446;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit);1533727514;Apply the given JMX "currencyTimeLimit" value to the given descriptor._<p>The default implementation sets a value {@code >0} as-is (as number of cache seconds),_turns a value of {@code 0} into {@code Integer.MAX_VALUE} ("always cache")_and sets the "defaultCurrencyTimeLimit" (if any, indicating "never cache") in case of_a value {@code <0}. This follows the recommendation in the JMX 1.2 specification._@param desc the JMX attribute or operation descriptor_@param currencyTimeLimit the "currencyTimeLimit" value to apply_@see #setDefaultCurrencyTimeLimit(Integer)_@see #applyDefaultCurrencyTimeLimit(javax.management.Descriptor);protected void applyCurrencyTimeLimit(Descriptor desc, int currencyTimeLimit) {_		if (currencyTimeLimit > 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(currencyTimeLimit))__		}_		else if (currencyTimeLimit == 0) {_			_			desc.setField(FIELD_CURRENCY_TIME_LIMIT, Integer.toString(Integer.MAX_VALUE))__		}_		else {_			_			applyDefaultCurrencyTimeLimit(desc)__		}_	};apply,the,given,jmx,currency,time,limit,value,to,the,given,descriptor,p,the,default,implementation,sets,a,value,code,0,as,is,as,number,of,cache,seconds,turns,a,value,of,code,0,into,code,integer,always,cache,and,sets,the,default,currency,time,limit,if,any,indicating,never,cache,in,case,of,a,value,code,0,this,follows,the,recommendation,in,the,jmx,1,2,specification,param,desc,the,jmx,attribute,or,operation,descriptor,param,currency,time,limit,the,currency,time,limit,value,to,apply,see,set,default,currency,time,limit,integer,see,apply,default,currency,time,limit,javax,management,descriptor;protected,void,apply,currency,time,limit,descriptor,desc,int,currency,time,limit,if,currency,time,limit,0,desc,set,field,integer,to,string,currency,time,limit,else,if,currency,time,limit,0,desc,set,field,integer,to,string,integer,else,apply,default,currency,time,limit,desc
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1328020251;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1351648401;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1356735495;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1362408075;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1375969963;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1385412762;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1405696918;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1432125256;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1467730834;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1495868221;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1496837955;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1500448076;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1519295386;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1520529117;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1533725446;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected abstract boolean includeOperation(Method method, String beanKey)_;1533727514;Allows subclasses to vote on the inclusion of a particular operation._@param method the operation method_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return whether the operation should be included in the management interface;protected abstract boolean includeOperation(Method method, String beanKey)_;allows,subclasses,to,vote,on,the,inclusion,of,a,particular,operation,param,method,the,operation,method,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,whether,the,operation,should,be,included,in,the,management,interface;protected,abstract,boolean,include,operation,method,method,string,bean,key
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1328020251;Create parameter info for the given method._<p>The default implementation returns an empty arry of <code>MBeanParameterInfo</code>._@param method the <code>Method</code> to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the <code>MBeanParameterInfo</code> array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		return new MBeanParameterInfo[0]__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,arry,of,code,mbean,parameter,info,code,param,method,the,code,method,code,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,code,mbean,parameter,info,code,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,return,new,mbean,parameter,info,0
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1351648401;Create parameter info for the given method._<p>The default implementation returns an empty arry of <code>MBeanParameterInfo</code>._@param method the <code>Method</code> to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the <code>MBeanParameterInfo</code> array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		return new MBeanParameterInfo[0]__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,arry,of,code,mbean,parameter,info,code,param,method,the,code,method,code,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,code,mbean,parameter,info,code,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,return,new,mbean,parameter,info,0
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1356735495;Create parameter info for the given method._<p>The default implementation returns an empty arry of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		return new MBeanParameterInfo[0]__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,arry,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,return,new,mbean,parameter,info,0
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1362408075;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for(int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1375969963;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for(int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1385412762;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for(int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1405696918;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1432125256;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1467730834;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1495868221;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1496837955;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1500448076;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1519295386;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1520529117;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1533725446;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey);1533727514;Create parameter info for the given method._<p>The default implementation returns an empty array of {@code MBeanParameterInfo}._@param method the {@code Method} to get the parameter information for_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code MBeanParameterInfo} array;protected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey) {_		ParameterNameDiscoverer paramNameDiscoverer = getParameterNameDiscoverer()__		String[] paramNames = (paramNameDiscoverer != null ? paramNameDiscoverer.getParameterNames(method) : null)__		if (paramNames == null) {_			return new MBeanParameterInfo[0]__		}__		MBeanParameterInfo[] info = new MBeanParameterInfo[paramNames.length]__		Class<?>[] typeParameters = method.getParameterTypes()__		for (int i = 0_ i < info.length_ i++) {_			info[i] = new MBeanParameterInfo(paramNames[i], typeParameters[i].getName(), paramNames[i])__		}__		return info__	};create,parameter,info,for,the,given,method,p,the,default,implementation,returns,an,empty,array,of,code,mbean,parameter,info,param,method,the,code,method,to,get,the,parameter,information,for,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,mbean,parameter,info,array;protected,mbean,parameter,info,get,operation,parameters,method,method,string,bean,key,parameter,name,discoverer,param,name,discoverer,get,parameter,name,discoverer,string,param,names,param,name,discoverer,null,param,name,discoverer,get,parameter,names,method,null,if,param,names,null,return,new,mbean,parameter,info,0,mbean,parameter,info,info,new,mbean,parameter,info,param,names,length,class,type,parameters,method,get,parameter,types,for,int,i,0,i,info,length,i,info,i,new,mbean,parameter,info,param,names,i,type,parameters,i,get,name,param,names,i,return,info
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1328020251;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1351648401;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1356735495;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1362408075;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1375969963;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1385412762;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1405696918;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1432125256;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1467730834;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1495868221;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1496837955;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1500448076;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1519295386;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1520529117;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1533725446;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected boolean isExposeClassDescriptor();1533727514;Return whether to expose the JMX descriptor field "class" for managed operations.;protected boolean isExposeClassDescriptor() {_		return this.exposeClassDescriptor__	};return,whether,to,expose,the,jmx,descriptor,field,class,for,managed,operations;protected,boolean,is,expose,class,descriptor,return,this,expose,class,descriptor
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1328020251;Creates an instance of <code>ModelMBeanOperationInfo</code> for the_given method. Populates the parameter info for the operation._@param method the <code>Method</code> to create a <code>ModelMBeanOperationInfo</code> for_@param name the name for the operation info_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the <code>ModelMBeanOperationInfo</code>;protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(name,_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,code,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,code,to,create,a,code,model,mbean,operation,info,code,for,param,name,the,name,for,the,operation,info,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,code,model,mbean,operation,info,code;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1351648401;Creates an instance of <code>ModelMBeanOperationInfo</code> for the_given method. Populates the parameter info for the operation._@param method the <code>Method</code> to create a <code>ModelMBeanOperationInfo</code> for_@param name the name for the operation info_@param beanKey the key associated with the MBean in the beans map_of the <code>MBeanExporter</code>_@return the <code>ModelMBeanOperationInfo</code>;protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(name,_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,code,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,code,to,create,a,code,model,mbean,operation,info,code,for,param,name,the,name,for,the,operation,info,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,code,return,the,code,model,mbean,operation,info,code;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1356735495;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the name for the operation info_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(name,_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,name,for,the,operation,info,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1362408075;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1375969963;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1385412762;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1405696918;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1432125256;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1467730834;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1495868221;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1496837955;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1500448076;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1519295386;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1520529117;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1533725446;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey);1533727514;Creates an instance of {@code ModelMBeanOperationInfo} for the_given method. Populates the parameter info for the operation._@param method the {@code Method} to create a {@code ModelMBeanOperationInfo} for_@param name the logical name for the operation (method name or property name)__not used by the default implementation but possibly by subclasses_@param beanKey the key associated with the MBean in the beans map_of the {@code MBeanExporter}_@return the {@code ModelMBeanOperationInfo};protected ModelMBeanOperationInfo createModelMBeanOperationInfo(Method method, String name, String beanKey) {_		MBeanParameterInfo[] params = getOperationParameters(method, beanKey)__		if (params.length == 0) {_			return new ModelMBeanOperationInfo(getOperationDescription(method, beanKey), method)__		}_		else {_			return new ModelMBeanOperationInfo(method.getName(),_				getOperationDescription(method, beanKey),_				getOperationParameters(method, beanKey),_				method.getReturnType().getName(),_				MBeanOperationInfo.UNKNOWN)__		}_	};creates,an,instance,of,code,model,mbean,operation,info,for,the,given,method,populates,the,parameter,info,for,the,operation,param,method,the,code,method,to,create,a,code,model,mbean,operation,info,for,param,name,the,logical,name,for,the,operation,method,name,or,property,name,not,used,by,the,default,implementation,but,possibly,by,subclasses,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,of,the,code,mbean,exporter,return,the,code,model,mbean,operation,info;protected,model,mbean,operation,info,create,model,mbean,operation,info,method,method,string,name,string,bean,key,mbean,parameter,info,params,get,operation,parameters,method,bean,key,if,params,length,0,return,new,model,mbean,operation,info,get,operation,description,method,bean,key,method,else,return,new,model,mbean,operation,info,method,get,name,get,operation,description,method,bean,key,get,operation,parameters,method,bean,key,method,get,return,type,get,name,mbean,operation,info,unknown
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1328020251;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1351648401;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1356735495;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1362408075;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1375969963;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1385412762;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1405696918;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1432125256;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1467730834;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1495868221;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1496837955;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1500448076;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1519295386;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1520529117;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1533725446;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected boolean isUseStrictCasing();1533727514;Return whether strict casing for attributes is enabled.;protected boolean isUseStrictCasing() {_		return this.useStrictCasing__	};return,whether,strict,casing,for,attributes,is,enabled;protected,boolean,is,use,strict,casing,return,this,use,strict,casing
AbstractReflectiveMBeanInfoAssembler -> protected Class getClassForDescriptor(Object managedBean);1328020251;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class getClassForDescriptor(Object managedBean);1351648401;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class getClassForDescriptor(Object managedBean);1356735495;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class getClassForDescriptor(Object managedBean);1362408075;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
AbstractReflectiveMBeanInfoAssembler -> protected Class getClassForDescriptor(Object managedBean);1375969963;Return the class to be used for the JMX descriptor field "class"._Only applied when the "exposeClassDescriptor" property is "true"._<p>The default implementation returns the first implemented interface_for a JDK proxy, and the target class else._@param managedBean the bean instance (might be an AOP proxy)_@return the class to expose in the descriptor field "class"_@see #setExposeClassDescriptor_@see #getClassToExpose(Class)_@see org.springframework.aop.framework.AopProxyUtils#proxiedUserInterfaces(Object);protected Class getClassForDescriptor(Object managedBean) {_		if (AopUtils.isJdkDynamicProxy(managedBean)) {_			return AopProxyUtils.proxiedUserInterfaces(managedBean)[0]__		}_		return getClassToExpose(managedBean)__	};return,the,class,to,be,used,for,the,jmx,descriptor,field,class,only,applied,when,the,expose,class,descriptor,property,is,true,p,the,default,implementation,returns,the,first,implemented,interface,for,a,jdk,proxy,and,the,target,class,else,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,class,to,expose,in,the,descriptor,field,class,see,set,expose,class,descriptor,see,get,class,to,expose,class,see,org,springframework,aop,framework,aop,proxy,utils,proxied,user,interfaces,object;protected,class,get,class,for,descriptor,object,managed,bean,if,aop,utils,is,jdk,dynamic,proxy,managed,bean,return,aop,proxy,utils,proxied,user,interfaces,managed,bean,0,return,get,class,to,expose,managed,bean
