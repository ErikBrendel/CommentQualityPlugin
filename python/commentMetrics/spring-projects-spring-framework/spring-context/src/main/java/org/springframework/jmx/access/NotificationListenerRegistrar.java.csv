commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@code MBeanServerConnection} used to connect to the  * MBean which all invocations are routed to.  */ ;/**  * Set the {@code MBeanServerConnection} used to connect to the  * MBean which all invocations are routed to.  */ public void setServer(MBeanServerConnection server) {     this.server = server. }
true;public;1;3;/**  * Specify the environment for the JMX connector.  * @see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map)  */ ;/**  * Specify the environment for the JMX connector.  * @see javax.management.remote.JMXConnectorFactory#connect(javax.management.remote.JMXServiceURL, java.util.Map)  */ public void setEnvironment(@Nullable Map<String, ?> environment) {     this.environment = environment. }
true;public;0;4;/**  * Allow Map access to the environment to be set for the connector,  * with the option to add or override specific entries.  * <p>Useful for specifying entries directly, for example via  * "environment[myKey]". This is particularly useful for  * adding or overriding entries in child bean definitions.  */ ;/**  * Allow Map access to the environment to be set for the connector,  * with the option to add or override specific entries.  * <p>Useful for specifying entries directly, for example via  * "environment[myKey]". This is particularly useful for  * adding or overriding entries in child bean definitions.  */ @Nullable public Map<String, ?> getEnvironment() {     return this.environment. }
true;public;1;3;/**  * Set the service URL of the remote {@code MBeanServer}.  */ ;/**  * Set the service URL of the remote {@code MBeanServer}.  */ public void setServiceUrl(String url) throws MalformedURLException {     this.serviceUrl = new JMXServiceURL(url). }
true;public;1;3;/**  * Set the agent id of the {@code MBeanServer} to locate.  * <p>Default is none. If specified, this will result in an  * attempt being made to locate the attendant MBeanServer, unless  * the {@link #setServiceUrl "serviceUrl"} property has been set.  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  * <p>Specifying the empty String indicates the platform MBeanServer.  */ ;/**  * Set the agent id of the {@code MBeanServer} to locate.  * <p>Default is none. If specified, this will result in an  * attempt being made to locate the attendant MBeanServer, unless  * the {@link #setServiceUrl "serviceUrl"} property has been set.  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  * <p>Specifying the empty String indicates the platform MBeanServer.  */ public void setAgentId(String agentId) {     this.agentId = agentId. }
false;public;0;10;;@Override public void afterPropertiesSet() {     if (getNotificationListener() == null) {         throw new IllegalArgumentException("Property 'notificationListener' is required").     }     if (CollectionUtils.isEmpty(this.mappedObjectNames)) {         throw new IllegalArgumentException("Property 'mappedObjectName' is required").     }     prepare(). }
true;public;0;24;/**  * Registers the specified {@code NotificationListener}.  * <p>Ensures that an {@code MBeanServerConnection} is configured and attempts  * to detect a local connection if one is not supplied.  */ ;/**  * Registers the specified {@code NotificationListener}.  * <p>Ensures that an {@code MBeanServerConnection} is configured and attempts  * to detect a local connection if one is not supplied.  */ public void prepare() {     if (this.server == null) {         this.server = this.connector.connect(this.serviceUrl, this.environment, this.agentId).     }     try {         this.actualObjectNames = getResolvedObjectNames().         if (this.actualObjectNames != null) {             if (logger.isDebugEnabled()) {                 logger.debug("Registering NotificationListener for MBeans " + Arrays.asList(this.actualObjectNames)).             }             for (ObjectName actualObjectName : this.actualObjectNames) {                 this.server.addNotificationListener(actualObjectName, getNotificationListener(), getNotificationFilter(), getHandback()).             }         }     } catch (IOException ex) {         throw new MBeanServerNotFoundException("Could not connect to remote MBeanServer at URL [" + this.serviceUrl + "]", ex).     } catch (Exception ex) {         throw new JmxException("Unable to register NotificationListener", ex).     } }
true;public;0;21;/**  * Unregisters the specified {@code NotificationListener}.  */ ;/**  * Unregisters the specified {@code NotificationListener}.  */ @Override public void destroy() {     try {         if (this.server != null && this.actualObjectNames != null) {             for (ObjectName actualObjectName : this.actualObjectNames) {                 try {                     this.server.removeNotificationListener(actualObjectName, getNotificationListener(), getNotificationFilter(), getHandback()).                 } catch (Exception ex) {                     if (logger.isDebugEnabled()) {                         logger.debug("Unable to unregister NotificationListener", ex).                     }                 }             }         }     } finally {         this.connector.close().     } }
