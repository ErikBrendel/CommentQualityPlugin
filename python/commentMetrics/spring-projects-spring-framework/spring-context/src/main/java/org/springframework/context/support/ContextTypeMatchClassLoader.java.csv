commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Class<?> loadClass(String name) throws ClassNotFoundException {     return new ContextOverridingClassLoader(getParent()).loadClass(name). }
false;public;1;4;;@Override public boolean isClassReloadable(Class<?> clazz) {     return (clazz.getClassLoader() instanceof ContextOverridingClassLoader). }
false;protected;1;15;;@Override protected boolean isEligibleForOverriding(String className) {     if (isExcluded(className) || ContextTypeMatchClassLoader.this.isExcluded(className)) {         return false.     }     ReflectionUtils.makeAccessible(findLoadedClassMethod).     ClassLoader parent = getParent().     while (parent != null) {         if (ReflectionUtils.invokeMethod(findLoadedClassMethod, parent, className) != null) {             return false.         }         parent = parent.getParent().     }     return true. }
false;protected;1;14;;@Override protected Class<?> loadClassForOverriding(String name) throws ClassNotFoundException {     byte[] bytes = bytesCache.get(name).     if (bytes == null) {         bytes = loadBytesForClass(name).         if (bytes != null) {             bytesCache.put(name, bytes).         } else {             return null.         }     }     return defineClass(name, bytes, 0, bytes.length). }
