commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void setParentThemeSource(@Nullable ThemeSource parent) {     this.parentThemeSource = parent.     // Usually there shouldn't be any at the time of this call.     synchronized (this.themeCache) {         for (Theme theme : this.themeCache.values()) {             initParent(theme).         }     } }
false;public;0;5;;@Override @Nullable public ThemeSource getParentThemeSource() {     return this.parentThemeSource. }
true;public;1;3;/**  * Set the prefix that gets applied to the ResourceBundle basenames,  * i.e. the theme names.  * E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme".  * <p>Note that ResourceBundle names are effectively classpath locations: As a  * consequence, the JDK's standard ResourceBundle treats dots as package separators.  * This means that "test.theme" is effectively equivalent to "test/theme",  * just like it is for programmatic {@code java.util.ResourceBundle} usage.  * @see java.util.ResourceBundle#getBundle(String)  */ ;/**  * Set the prefix that gets applied to the ResourceBundle basenames,  * i.e. the theme names.  * E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme".  * <p>Note that ResourceBundle names are effectively classpath locations: As a  * consequence, the JDK's standard ResourceBundle treats dots as package separators.  * This means that "test.theme" is effectively equivalent to "test/theme",  * just like it is for programmatic {@code java.util.ResourceBundle} usage.  * @see java.util.ResourceBundle#getBundle(String)  */ public void setBasenamePrefix(@Nullable String basenamePrefix) {     this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : ""). }
true;public;1;3;/**  * Set the default charset to use for parsing resource bundle files.  * <p>{@link ResourceBundleMessageSource}'s default is the  * {@code java.util.ResourceBundle} default encoding: ISO-8859-1.  * @since 4.2  * @see ResourceBundleMessageSource#setDefaultEncoding  */ ;/**  * Set the default charset to use for parsing resource bundle files.  * <p>{@link ResourceBundleMessageSource}'s default is the  * {@code java.util.ResourceBundle} default encoding: ISO-8859-1.  * @since 4.2  * @see ResourceBundleMessageSource#setDefaultEncoding  */ public void setDefaultEncoding(@Nullable String defaultEncoding) {     this.defaultEncoding = defaultEncoding. }
true;public;1;3;/**  * Set whether to fall back to the system Locale if no files for a  * specific Locale have been found.  * <p>{@link ResourceBundleMessageSource}'s default is "true".  * @since 4.2  * @see ResourceBundleMessageSource#setFallbackToSystemLocale  */ ;/**  * Set whether to fall back to the system Locale if no files for a  * specific Locale have been found.  * <p>{@link ResourceBundleMessageSource}'s default is "true".  * @since 4.2  * @see ResourceBundleMessageSource#setFallbackToSystemLocale  */ public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {     this.fallbackToSystemLocale = fallbackToSystemLocale. }
false;public;1;4;;@Override public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {     this.beanClassLoader = beanClassLoader. }
true;public;1;21;/**  * This implementation returns a SimpleTheme instance, holding a  * ResourceBundle-based MessageSource whose basename corresponds to  * the given theme name (prefixed by the configured "basenamePrefix").  * <p>SimpleTheme instances are cached per theme name. Use a reloadable  * MessageSource if themes should reflect changes to the underlying files.  * @see #setBasenamePrefix  * @see #createMessageSource  */ ;/**  * This implementation returns a SimpleTheme instance, holding a  * ResourceBundle-based MessageSource whose basename corresponds to  * the given theme name (prefixed by the configured "basenamePrefix").  * <p>SimpleTheme instances are cached per theme name. Use a reloadable  * MessageSource if themes should reflect changes to the underlying files.  * @see #setBasenamePrefix  * @see #createMessageSource  */ @Override @Nullable public Theme getTheme(String themeName) {     Theme theme = this.themeCache.get(themeName).     if (theme == null) {         synchronized (this.themeCache) {             theme = this.themeCache.get(themeName).             if (theme == null) {                 String basename = this.basenamePrefix + themeName.                 MessageSource messageSource = createMessageSource(basename).                 theme = new SimpleTheme(themeName, messageSource).                 initParent(theme).                 this.themeCache.put(themeName, theme).                 if (logger.isDebugEnabled()) {                     logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]").                 }             }         }     }     return theme. }
true;protected;1;14;/**  * Create a MessageSource for the given basename,  * to be used as MessageSource for the corresponding theme.  * <p>Default implementation creates a ResourceBundleMessageSource.  * for the given basename. A subclass could create a specifically  * configured ReloadableResourceBundleMessageSource, for example.  * @param basename the basename to create a MessageSource for  * @return the MessageSource  * @see org.springframework.context.support.ResourceBundleMessageSource  * @see org.springframework.context.support.ReloadableResourceBundleMessageSource  */ ;/**  * Create a MessageSource for the given basename,  * to be used as MessageSource for the corresponding theme.  * <p>Default implementation creates a ResourceBundleMessageSource.  * for the given basename. A subclass could create a specifically  * configured ReloadableResourceBundleMessageSource, for example.  * @param basename the basename to create a MessageSource for  * @return the MessageSource  * @see org.springframework.context.support.ResourceBundleMessageSource  * @see org.springframework.context.support.ReloadableResourceBundleMessageSource  */ protected MessageSource createMessageSource(String basename) {     ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource().     messageSource.setBasename(basename).     if (this.defaultEncoding != null) {         messageSource.setDefaultEncoding(this.defaultEncoding).     }     if (this.fallbackToSystemLocale != null) {         messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale).     }     if (this.beanClassLoader != null) {         messageSource.setBeanClassLoader(this.beanClassLoader).     }     return messageSource. }
true;protected;1;11;/**  * Initialize the MessageSource of the given theme with the  * one from the corresponding parent of this ThemeSource.  * @param theme the Theme to (re-)initialize  */ ;/**  * Initialize the MessageSource of the given theme with the  * one from the corresponding parent of this ThemeSource.  * @param theme the Theme to (re-)initialize  */ protected void initParent(Theme theme) {     if (theme.getMessageSource() instanceof HierarchicalMessageSource) {         HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource().         if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {             Theme parentTheme = getParentThemeSource().getTheme(theme.getName()).             if (parentTheme != null) {                 messageSource.setParentMessageSource(parentTheme.getMessageSource()).             }         }     } }
