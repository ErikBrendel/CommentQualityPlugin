# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceBundleThemeSource -> public Theme getTheme(String themeName);1328020251;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		synchronized (this.themeCache) {_			Theme theme = this.themeCache.get(themeName)__			if (theme == null) {_				String basename = this.basenamePrefix + themeName__				MessageSource messageSource = createMessageSource(basename)__				theme = new SimpleTheme(themeName, messageSource)__				initParent(theme)__				this.themeCache.put(themeName, theme)__				if (logger.isDebugEnabled()) {_					logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__				}_			}_			return theme__		}_	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,synchronized,this,theme,cache,theme,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> public Theme getTheme(String themeName);1357119239;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		synchronized (this.themeCache) {_			Theme theme = this.themeCache.get(themeName)__			if (theme == null) {_				String basename = this.basenamePrefix + themeName__				MessageSource messageSource = createMessageSource(basename)__				theme = new SimpleTheme(themeName, messageSource)__				initParent(theme)__				this.themeCache.put(themeName, theme)__				if (logger.isDebugEnabled()) {_					logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__				}_			}_			return theme__		}_	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,synchronized,this,theme,cache,theme,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> protected void initParent(Theme theme);1328020251;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1356735495;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1357119239;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1368482696;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1436792375;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1467730834;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1496242568;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1496837955;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1498780456;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1502974979;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> protected void initParent(Theme theme);1530174524;Initialize the MessageSource of the given theme with the_one from the corresponding parent of this ThemeSource._@param theme the Theme to (re-)initialize;protected void initParent(Theme theme) {_		if (theme.getMessageSource() instanceof HierarchicalMessageSource) {_			HierarchicalMessageSource messageSource = (HierarchicalMessageSource) theme.getMessageSource()__			if (getParentThemeSource() != null && messageSource.getParentMessageSource() == null) {_				Theme parentTheme = getParentThemeSource().getTheme(theme.getName())__				if (parentTheme != null) {_					messageSource.setParentMessageSource(parentTheme.getMessageSource())__				}_			}_		}_	};initialize,the,message,source,of,the,given,theme,with,the,one,from,the,corresponding,parent,of,this,theme,source,param,theme,the,theme,to,re,initialize;protected,void,init,parent,theme,theme,if,theme,get,message,source,instanceof,hierarchical,message,source,hierarchical,message,source,message,source,hierarchical,message,source,theme,get,message,source,if,get,parent,theme,source,null,message,source,get,parent,message,source,null,theme,parent,theme,get,parent,theme,source,get,theme,theme,get,name,if,parent,theme,null,message,source,set,parent,message,source,parent,theme,get,message,source
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1436792375;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1467730834;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1496242568;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1496837955;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1498780456;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1502974979;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setFallbackToSystemLocale(boolean fallbackToSystemLocale);1530174524;Set whether to fall back to the system Locale if no files for a_specific Locale have been found._<p>{@link ResourceBundleMessageSource}'s default is "true"._@since 4.2_@see ResourceBundleMessageSource#setFallbackToSystemLocale;public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {_		this.fallbackToSystemLocale = fallbackToSystemLocale__	};set,whether,to,fall,back,to,the,system,locale,if,no,files,for,a,specific,locale,have,been,found,p,link,resource,bundle,message,source,s,default,is,true,since,4,2,see,resource,bundle,message,source,set,fallback,to,system,locale;public,void,set,fallback,to,system,locale,boolean,fallback,to,system,locale,this,fallback,to,system,locale,fallback,to,system,locale
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1328020251;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic <code>java.util.ResourceBundle</code> usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,code,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1356735495;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1357119239;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1368482696;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1436792375;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1467730834;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(String basenamePrefix);1496242568;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1356735495;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		synchronized (this.themeCache) {_			Theme theme = this.themeCache.get(themeName)__			if (theme == null) {_				String basename = this.basenamePrefix + themeName__				MessageSource messageSource = createMessageSource(basename)__				theme = new SimpleTheme(themeName, messageSource)__				initParent(theme)__				this.themeCache.put(themeName, theme)__				if (logger.isDebugEnabled()) {_					logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__				}_			}_			return theme__		}_	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,synchronized,this,theme,cache,theme,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1368482696;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		synchronized (this.themeCache) {_			Theme theme = this.themeCache.get(themeName)__			if (theme == null) {_				String basename = this.basenamePrefix + themeName__				MessageSource messageSource = createMessageSource(basename)__				theme = new SimpleTheme(themeName, messageSource)__				initParent(theme)__				this.themeCache.put(themeName, theme)__				if (logger.isDebugEnabled()) {_					logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__				}_			}_			return theme__		}_	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,synchronized,this,theme,cache,theme,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1436792375;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1467730834;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1496242568;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		if (themeName == null) {_			return null__		}_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,if,theme,name,null,return,null,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1496837955;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	public Theme getTheme(String themeName);1498780456;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	public Theme getTheme(String themeName) {_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,public,theme,get,theme,string,theme,name,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1328020251;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1356735495;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1357119239;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1368482696;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1436792375;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1467730834;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1496242568;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1496837955;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1498780456;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1502974979;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> protected MessageSource createMessageSource(String basename);1530174524;Create a MessageSource for the given basename,_to be used as MessageSource for the corresponding theme._<p>Default implementation creates a ResourceBundleMessageSource._for the given basename. A subclass could create a specifically_configured ReloadableResourceBundleMessageSource, for example._@param basename the basename to create a MessageSource for_@return the MessageSource_@see org.springframework.context.support.ResourceBundleMessageSource_@see org.springframework.context.support.ReloadableResourceBundleMessageSource;protected MessageSource createMessageSource(String basename) {_		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource()__		messageSource.setBasename(basename)__		if (this.defaultEncoding != null) {_			messageSource.setDefaultEncoding(this.defaultEncoding)__		}_		if (this.fallbackToSystemLocale != null) {_			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale)__		}_		if (this.beanClassLoader != null) {_			messageSource.setBeanClassLoader(this.beanClassLoader)__		}_		return messageSource__	};create,a,message,source,for,the,given,basename,to,be,used,as,message,source,for,the,corresponding,theme,p,default,implementation,creates,a,resource,bundle,message,source,for,the,given,basename,a,subclass,could,create,a,specifically,configured,reloadable,resource,bundle,message,source,for,example,param,basename,the,basename,to,create,a,message,source,for,return,the,message,source,see,org,springframework,context,support,resource,bundle,message,source,see,org,springframework,context,support,reloadable,resource,bundle,message,source;protected,message,source,create,message,source,string,basename,resource,bundle,message,source,message,source,new,resource,bundle,message,source,message,source,set,basename,basename,if,this,default,encoding,null,message,source,set,default,encoding,this,default,encoding,if,this,fallback,to,system,locale,null,message,source,set,fallback,to,system,locale,this,fallback,to,system,locale,if,this,bean,class,loader,null,message,source,set,bean,class,loader,this,bean,class,loader,return,message,source
ResourceBundleThemeSource -> @Override 	@Nullable 	public Theme getTheme(String themeName);1502974979;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	@Nullable_	public Theme getTheme(String themeName) {_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,nullable,public,theme,get,theme,string,theme,name,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> @Override 	@Nullable 	public Theme getTheme(String themeName);1530174524;This implementation returns a SimpleTheme instance, holding a_ResourceBundle-based MessageSource whose basename corresponds to_the given theme name (prefixed by the configured "basenamePrefix")._<p>SimpleTheme instances are cached per theme name. Use a reloadable_MessageSource if themes should reflect changes to the underlying files._@see #setBasenamePrefix_@see #createMessageSource;@Override_	@Nullable_	public Theme getTheme(String themeName) {_		Theme theme = this.themeCache.get(themeName)__		if (theme == null) {_			synchronized (this.themeCache) {_				theme = this.themeCache.get(themeName)__				if (theme == null) {_					String basename = this.basenamePrefix + themeName__					MessageSource messageSource = createMessageSource(basename)__					theme = new SimpleTheme(themeName, messageSource)__					initParent(theme)__					this.themeCache.put(themeName, theme)__					if (logger.isDebugEnabled()) {_						logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]")__					}_				}_			}_		}_		return theme__	};this,implementation,returns,a,simple,theme,instance,holding,a,resource,bundle,based,message,source,whose,basename,corresponds,to,the,given,theme,name,prefixed,by,the,configured,basename,prefix,p,simple,theme,instances,are,cached,per,theme,name,use,a,reloadable,message,source,if,themes,should,reflect,changes,to,the,underlying,files,see,set,basename,prefix,see,create,message,source;override,nullable,public,theme,get,theme,string,theme,name,theme,theme,this,theme,cache,get,theme,name,if,theme,null,synchronized,this,theme,cache,theme,this,theme,cache,get,theme,name,if,theme,null,string,basename,this,basename,prefix,theme,name,message,source,message,source,create,message,source,basename,theme,new,simple,theme,theme,name,message,source,init,parent,theme,this,theme,cache,put,theme,name,theme,if,logger,is,debug,enabled,logger,debug,theme,created,name,theme,name,basename,basename,return,theme
ResourceBundleThemeSource -> public void setBasenamePrefix(@Nullable String basenamePrefix);1496837955;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(@Nullable String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,nullable,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(@Nullable String basenamePrefix);1498780456;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(@Nullable String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,nullable,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(@Nullable String basenamePrefix);1502974979;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(@Nullable String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,nullable,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setBasenamePrefix(@Nullable String basenamePrefix);1530174524;Set the prefix that gets applied to the ResourceBundle basenames,_i.e. the theme names._E.g.: basenamePrefix="test.", themeName="theme" -> basename="test.theme"._<p>Note that ResourceBundle names are effectively classpath locations: As a_consequence, the JDK's standard ResourceBundle treats dots as package separators._This means that "test.theme" is effectively equivalent to "test/theme",_just like it is for programmatic {@code java.util.ResourceBundle} usage._@see java.util.ResourceBundle#getBundle(String);public void setBasenamePrefix(@Nullable String basenamePrefix) {_		this.basenamePrefix = (basenamePrefix != null ? basenamePrefix : "")__	};set,the,prefix,that,gets,applied,to,the,resource,bundle,basenames,i,e,the,theme,names,e,g,basename,prefix,test,theme,name,theme,basename,test,theme,p,note,that,resource,bundle,names,are,effectively,classpath,locations,as,a,consequence,the,jdk,s,standard,resource,bundle,treats,dots,as,package,separators,this,means,that,test,theme,is,effectively,equivalent,to,test,theme,just,like,it,is,for,programmatic,code,java,util,resource,bundle,usage,see,java,util,resource,bundle,get,bundle,string;public,void,set,basename,prefix,nullable,string,basename,prefix,this,basename,prefix,basename,prefix,null,basename,prefix
ResourceBundleThemeSource -> public void setDefaultEncoding(String defaultEncoding);1436792375;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleThemeSource -> public void setDefaultEncoding(String defaultEncoding);1467730834;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleThemeSource -> public void setDefaultEncoding(String defaultEncoding);1496242568;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleThemeSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1496837955;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleThemeSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1498780456;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleThemeSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1502974979;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
ResourceBundleThemeSource -> public void setDefaultEncoding(@Nullable String defaultEncoding);1530174524;Set the default charset to use for parsing resource bundle files._<p>{@link ResourceBundleMessageSource}'s default is the_{@code java.util.ResourceBundle} default encoding: ISO-8859-1._@since 4.2_@see ResourceBundleMessageSource#setDefaultEncoding;public void setDefaultEncoding(@Nullable String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,charset,to,use,for,parsing,resource,bundle,files,p,link,resource,bundle,message,source,s,default,is,the,code,java,util,resource,bundle,default,encoding,iso,8859,1,since,4,2,see,resource,bundle,message,source,set,default,encoding;public,void,set,default,encoding,nullable,string,default,encoding,this,default,encoding,default,encoding
