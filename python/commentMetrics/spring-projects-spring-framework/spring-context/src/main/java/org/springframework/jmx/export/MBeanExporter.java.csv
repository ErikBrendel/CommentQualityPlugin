# id;timestamp;commentText;codeText;commentWords;codeWords
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1328020251;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1356735495;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1357119239;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1368482696;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1385412762;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1402388547;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1403790940;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1404769827;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1404773971;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1405000116;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1413819738;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1414702639;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1419347032;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1423471263;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1461047077;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1467730834;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1467808333;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Exception ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,exception,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1482159779;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1495868221;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1496242568;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1496259743;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1496837955;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1497250713;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1497341397;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1498780456;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1502974979;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1503007895;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1517867511;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1519295386;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1519514499;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1530174524;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1532091916;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1542613849;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey) 			throws MBeanExportException;1544613374;Creates an MBean that is configured with the appropriate management_interface for the supplied managed resource._@param managedResource the resource that is to be exported as an MBean_@param beanKey the key associated with the managed bean_@see #createModelMBean()_@see #getMBeanInfo(Object, String);protected ModelMBean createAndConfigureMBean(Object managedResource, String beanKey)_			throws MBeanExportException {_		try {_			ModelMBean mbean = createModelMBean()__			mbean.setModelMBeanInfo(getMBeanInfo(managedResource, beanKey))__			mbean.setManagedResource(managedResource, MR_TYPE_OBJECT_REFERENCE)__			return mbean__		}_		catch (Throwable ex) {_			throw new MBeanExportException("Could not create ModelMBean for managed resource [" +_					managedResource + "] with key '" + beanKey + "'", ex)__		}_	};creates,an,mbean,that,is,configured,with,the,appropriate,management,interface,for,the,supplied,managed,resource,param,managed,resource,the,resource,that,is,to,be,exported,as,an,mbean,param,bean,key,the,key,associated,with,the,managed,bean,see,create,model,mbean,see,get,mbean,info,object,string;protected,model,mbean,create,and,configure,mbean,object,managed,resource,string,bean,key,throws,mbean,export,exception,try,model,mbean,mbean,create,model,mbean,mbean,set,model,mbean,info,get,mbean,info,managed,resource,bean,key,mbean,set,managed,resource,managed,resource,return,mbean,catch,throwable,ex,throw,new,mbean,export,exception,could,not,create,model,mbean,for,managed,resource,managed,resource,with,key,bean,key,ex
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException;1496837955;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_			else {_				return null__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,nullable,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,else,return,null,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException;1497250713;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_			else {_				return null__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,nullable,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,else,return,null,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException;1497341397;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_			else {_				return null__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,nullable,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,else,return,null,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException;1498780456;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_			else {_				return null__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,nullable,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,else,return,null,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException;1502974979;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(@Nullable Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_			else {_				return null__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,nullable,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,else,return,null,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1328020251;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is <code>true</code>, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,code,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1356735495;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1357119239;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1368482696;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1385412762;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1402388547;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1403790940;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1404769827;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1404773971;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1405000116;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1413819738;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1414702639;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1419347032;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1423471263;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1461047077;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1467730834;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1467808333;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1482159779;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1495868221;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1496242568;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1496259743;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1496837955;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1497250713;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1497341397;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1498780456;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1502974979;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1503007895;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1517867511;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1519295386;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1519514499;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1530174524;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1532091916;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1542613849;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader);1544613374;Indicates whether or not the managed resource should be exposed on the_{@link Thread#getContextClassLoader() thread context ClassLoader} before_allowing any invocations on the MBean to occur._<p>The default value is {@code true}, exposing a {@link SpringModelMBean}_which performs thread context ClassLoader management. Switch this flag off to_expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}.;public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {_		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader__	};indicates,whether,or,not,the,managed,resource,should,be,exposed,on,the,link,thread,get,context,class,loader,thread,context,class,loader,before,allowing,any,invocations,on,the,mbean,to,occur,p,the,default,value,is,code,true,exposing,a,link,spring,model,mbean,which,performs,thread,context,class,loader,management,switch,this,flag,off,to,expose,a,standard,jmx,link,javax,management,modelmbean,required,model,mbean;public,void,set,expose,managed,resource,class,loader,boolean,expose,managed,resource,class,loader,this,expose,managed,resource,class,loader,expose,managed,resource,class,loader
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1328020251;Gets the <code>ModelMBeanInfo</code> for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,code,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1356735495;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1357119239;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1368482696;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1385412762;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1402388547;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1403790940;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1404769827;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1404773971;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1405000116;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1413819738;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1414702639;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1419347032;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1423471263;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1461047077;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1467730834;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1467808333;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1482159779;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1495868221;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1496242568;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1496259743;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1496837955;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1497250713;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1497341397;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1498780456;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1502974979;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1503007895;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1517867511;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1519295386;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1519514499;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1530174524;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isWarnEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.warn("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,warn,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,warn,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1532091916;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isInfoEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.info("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,info,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,info,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1542613849;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isInfoEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.info("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,info,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,info,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException;1544613374;Gets the {@code ModelMBeanInfo} for the bean with the supplied key_and of the supplied type.;private ModelMBeanInfo getMBeanInfo(Object managedBean, String beanKey) throws JMException {_		ModelMBeanInfo info = this.assembler.getMBeanInfo(managedBean, beanKey)__		if (logger.isInfoEnabled() && ObjectUtils.isEmpty(info.getAttributes()) &&_				ObjectUtils.isEmpty(info.getOperations())) {_			logger.info("Bean with key '" + beanKey +_					"' has been registered as an MBean but has no exposed attributes or operations")__		}_		return info__	};gets,the,code,model,mbean,info,for,the,bean,with,the,supplied,key,and,of,the,supplied,type;private,model,mbean,info,get,mbean,info,object,managed,bean,string,bean,key,throws,jmexception,model,mbean,info,info,this,assembler,get,mbean,info,managed,bean,bean,key,if,logger,is,info,enabled,object,utils,is,empty,info,get,attributes,object,utils,is,empty,info,get,operations,logger,info,bean,with,key,bean,key,has,been,registered,as,an,mbean,but,has,no,exposed,attributes,or,operations,return,info
MBeanExporter -> protected boolean isMBean(Class beanClass);1328020251;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class beanClass);1356735495;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class beanClass);1357119239;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class beanClass);1368482696;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1495868221;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					if (bean != null) {_						ObjectName objectName = registerBeanInstance(bean, beanKey)__						replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__						return objectName__					}_				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_		return null__	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,if,bean,null,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex,return,null
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1496242568;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					if (bean != null) {_						ObjectName objectName = registerBeanInstance(bean, beanKey)__						replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__						return objectName__					}_				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_		return null__	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,if,bean,null,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex,return,null
MBeanExporter -> @Nullable 	protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1496259743;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;@Nullable_	protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					if (bean != null) {_						ObjectName objectName = registerBeanInstance(bean, beanKey)__						replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__						return objectName__					}_				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_		return null__	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;nullable,protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,if,bean,null,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex,return,null
MBeanExporter -> public void setBeanFactory(BeanFactory beanFactory);1328020251;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_<code>ListableBeanFactory</code> is required)._@see #setBeans_@see #setAutodetect;public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,code,is,required,see,set,beans,see,set,autodetect;public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> public void setBeanFactory(BeanFactory beanFactory);1357119239;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> public void register();1404769827;Kick off bean registration automatically when deployed in an {@code ApplicationContext}._@see #registerBeans();public void register() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;public,void,register,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> public void register();1404773971;Kick off bean registration automatically when deployed in an {@code ApplicationContext}._@see #registerBeans();public void register() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;public,void,register,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean[] notificationListeners);1328020251;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean[] notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean[] notificationListeners);1356735495;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean[] notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean[] notificationListeners);1357119239;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean[] notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean[] notificationListeners);1368482696;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean[] notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean[] notificationListeners);1385412762;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean[] notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean[] notificationListeners);1402388547;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean[] notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1328020251;Invoked when using an <code>AutodetectCapableMBeanInfoAssembler</code>._Gives the assembler the opportunity to add additional beans from the_<code>BeanFactory</code> to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			public boolean include(Class beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,code,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,code,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1356735495;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1357119239;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			public boolean include(Class beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1368482696;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1385412762;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1402388547;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1403790940;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1404769827;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1404773971;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1405000116;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1413819738;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1414702639;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1419347032;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1423471263;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1461047077;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1467730834;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1467808333;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1482159779;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1495868221;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1496242568;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1496259743;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1496837955;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1497250713;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return assembler.includeBean(beanClass, beanName)__			}_		})__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,assembler,include,bean,bean,class,bean,name
MBeanExporter -> private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler);1497341397;Invoked when using an {@code AutodetectCapableMBeanInfoAssembler}._Gives the assembler the opportunity to add additional beans from the_{@code BeanFactory} to the list of beans to be exposed via JMX._<p>This implementation prevents a bean from being added to the list_automatically if it has already been added manually, and it prevents_certain internal classes from being registered automatically.;private void autodetectBeans(final AutodetectCapableMBeanInfoAssembler assembler) {_		autodetect((beanClass, beanName) -> assembler.includeBean(beanClass, beanName))__	};invoked,when,using,an,code,autodetect,capable,mbean,info,assembler,gives,the,assembler,the,opportunity,to,add,additional,beans,from,the,code,bean,factory,to,the,list,of,beans,to,be,exposed,via,jmx,p,this,implementation,prevents,a,bean,from,being,added,to,the,list,automatically,if,it,has,already,been,added,manually,and,it,prevents,certain,internal,classes,from,being,registered,automatically;private,void,autodetect,beans,final,autodetect,capable,mbean,info,assembler,assembler,autodetect,bean,class,bean,name,assembler,include,bean,bean,class,bean,name
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1328020251;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the <code>MBeanServer</code>. Specifically, if the_supplied <code>mapValue</code> is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the <code>MBeanServer</code> so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the <code>MBeanServer</code> without any intervention. For_all other beans or bean names, the resource itself is registered with_the <code>MBeanServer</code> directly._@param mapValue the value configured for this bean in the beans map__may be either the <code>String</code> name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the <code>ObjectName</code> under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,code,specifically,if,the,supplied,code,map,value,code,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,code,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,code,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,code,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,code,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,code,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1356735495;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1357119239;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1368482696;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1385412762;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1402388547;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1403790940;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1404769827;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1404773971;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1405000116;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1413819738;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1414702639;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1419347032;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1423471263;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1461047077;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1467730834;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1467808333;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Exception ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,exception,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1482159779;Registers an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered,_or {@code null} if the actual resource was {@code null} as well_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					if (bean != null) {_						ObjectName objectName = registerBeanInstance(bean, beanKey)__						replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__						return objectName__					}_				}_			}_			else if (mapValue != null) {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_		return null__	};registers,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,or,code,null,if,the,actual,resource,was,code,null,as,well,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,if,bean,null,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,map,value,null,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex,return,null
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1503007895;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1517867511;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1519295386;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1519514499;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1530174524;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1532091916;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1542613849;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException;1544613374;Register an individual bean with the {@link #setServer MBeanServer}._<p>This method is responsible for deciding <strong>how</strong> a bean_should be exposed to the {@code MBeanServer}. Specifically, if the_supplied {@code mapValue} is the name of a bean that is configured_for lazy initialization, then a proxy to the resource is registered with_the {@code MBeanServer} so that the lazy load behavior is_honored. If the bean is already an MBean then it will be registered_directly with the {@code MBeanServer} without any intervention. For_all other beans or bean names, the resource itself is registered with_the {@code MBeanServer} directly._@param mapValue the value configured for this bean in the beans map__may be either the {@code String} name of a bean, or the bean itself_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the resource was registered_@throws MBeanExportException if the export failed_@see #setBeans_@see #registerBeanInstance_@see #registerLazyInit;protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException {_		try {_			if (mapValue instanceof String) {_				_				if (this.beanFactory == null) {_					throw new MBeanExportException("Cannot resolve bean names if not running in a BeanFactory")__				}_				String beanName = (String) mapValue__				if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) {_					ObjectName objectName = registerLazyInit(beanName, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_				else {_					Object bean = this.beanFactory.getBean(beanName)__					ObjectName objectName = registerBeanInstance(bean, beanKey)__					replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__					return objectName__				}_			}_			else {_				_				if (this.beanFactory != null) {_					Map<String, ?> beansOfSameType =_							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)__					for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) {_						if (entry.getValue() == mapValue) {_							String beanName = entry.getKey()__							ObjectName objectName = registerBeanInstance(mapValue, beanKey)__							replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)__							return objectName__						}_					}_				}_				return registerBeanInstance(mapValue, beanKey)__			}_		}_		catch (Throwable ex) {_			throw new UnableToRegisterMBeanException(_					"Unable to register MBean [" + mapValue + "] with key '" + beanKey + "'", ex)__		}_	};register,an,individual,bean,with,the,link,set,server,mbean,server,p,this,method,is,responsible,for,deciding,strong,how,strong,a,bean,should,be,exposed,to,the,code,mbean,server,specifically,if,the,supplied,code,map,value,is,the,name,of,a,bean,that,is,configured,for,lazy,initialization,then,a,proxy,to,the,resource,is,registered,with,the,code,mbean,server,so,that,the,lazy,load,behavior,is,honored,if,the,bean,is,already,an,mbean,then,it,will,be,registered,directly,with,the,code,mbean,server,without,any,intervention,for,all,other,beans,or,bean,names,the,resource,itself,is,registered,with,the,code,mbean,server,directly,param,map,value,the,value,configured,for,this,bean,in,the,beans,map,may,be,either,the,code,string,name,of,a,bean,or,the,bean,itself,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,resource,was,registered,throws,mbean,export,exception,if,the,export,failed,see,set,beans,see,register,bean,instance,see,register,lazy,init;protected,object,name,register,bean,name,or,instance,object,map,value,string,bean,key,throws,mbean,export,exception,try,if,map,value,instanceof,string,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,resolve,bean,names,if,not,running,in,a,bean,factory,string,bean,name,string,map,value,if,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,name,object,name,register,lazy,init,bean,name,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,object,bean,this,bean,factory,get,bean,bean,name,object,name,object,name,register,bean,instance,bean,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,else,if,this,bean,factory,null,map,string,beans,of,same,type,this,bean,factory,get,beans,of,type,map,value,get,class,false,this,allow,eager,init,for,map,entry,string,entry,beans,of,same,type,entry,set,if,entry,get,value,map,value,string,bean,name,entry,get,key,object,name,object,name,register,bean,instance,map,value,bean,key,replace,notification,listener,bean,name,keys,if,necessary,bean,name,object,name,return,object,name,return,register,bean,instance,map,value,bean,key,catch,throwable,ex,throw,new,unable,to,register,mbean,exception,unable,to,register,mbean,map,value,with,key,bean,key,ex
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1328020251;Replaces any bean names used as keys in the <code>NotificationListener</code>_mappings with their corresponding <code>ObjectName</code> values._@param beanName the name of the bean to be registered_@param objectName the <code>ObjectName</code> under which the bean will be registered_with the <code>MBeanServer</code>;private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,code,mappings,with,their,corresponding,code,object,name,code,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,code,under,which,the,bean,will,be,registered,with,the,code,mbean,server,code;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1356735495;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1357119239;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1368482696;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1385412762;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1402388547;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1403790940;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1404769827;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1404773971;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1405000116;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1413819738;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1414702639;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1419347032;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1423471263;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1461047077;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1467730834;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1467808333;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1482159779;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1495868221;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1496242568;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1496259743;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1503007895;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1517867511;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1519295386;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1519514499;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1530174524;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1532091916;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1542613849;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName);1544613374;Replace any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, ObjectName objectName) {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replace,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,object,name,object,name,if,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1328020251;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the <code>AUTODETECT_</code> constants or is <code>null</code>_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,code,constants,or,is,code,null,code,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1356735495;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1357119239;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1368482696;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1385412762;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1402388547;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1403790940;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1404769827;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1404773971;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1405000116;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1413819738;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1414702639;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1419347032;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1423471263;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1461047077;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1467730834;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1467808333;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1482159779;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1495868221;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1496242568;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1496259743;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (constantName == null || !constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,null,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1496837955;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1497250713;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1497341397;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1498780456;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1502974979;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1503007895;Set the autodetection mode to use by name._@exception IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,exception,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1517867511;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1519295386;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1519514499;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1530174524;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1532091916;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1542613849;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void setAutodetectModeName(String constantName);1544613374;Set the autodetection mode to use by name._@throws IllegalArgumentException if the supplied value is not resolvable_to one of the {@code AUTODETECT_} constants or is {@code null}_@see #setAutodetectMode(int)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectModeName(String constantName) {_		if (!constantName.startsWith(CONSTANT_PREFIX_AUTODETECT)) {_			throw new IllegalArgumentException("Only autodetect constants allowed")__		}_		this.autodetectMode = (Integer) constants.asNumber(constantName)__	};set,the,autodetection,mode,to,use,by,name,throws,illegal,argument,exception,if,the,supplied,value,is,not,resolvable,to,one,of,the,code,constants,or,is,code,null,see,set,autodetect,mode,int,see,see,see,see;public,void,set,autodetect,mode,name,string,constant,name,if,constant,name,starts,with,throw,new,illegal,argument,exception,only,autodetect,constants,allowed,this,autodetect,mode,integer,constants,as,number,constant,name
MBeanExporter -> public void afterPropertiesSet();1328020251;Start bean registration automatically when deployed in an_<code>ApplicationContext</code>._@see #registerBeans();public void afterPropertiesSet() {_		_		_		if (this.server == null) {_			this.server = JmxUtils.locateMBeanServer()__		}_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};start,bean,registration,automatically,when,deployed,in,an,code,application,context,code,see,register,beans;public,void,after,properties,set,if,this,server,null,this,server,jmx,utils,locate,mbean,server,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> public void afterPropertiesSet();1357119239;Start bean registration automatically when deployed in an_{@code ApplicationContext}._@see #registerBeans();public void afterPropertiesSet() {_		_		_		if (this.server == null) {_			this.server = JmxUtils.locateMBeanServer()__		}_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};start,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;public,void,after,properties,set,if,this,server,null,this,server,jmx,utils,locate,mbean,server,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> protected void registerBeans();1328020251;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the <code>MBeanServer</code> via a_<code>ModelMBean</code>. The actual implemetation of the_<code>ModelMBean</code> interface used depends on the implementation of_the <code>ModelMBeanProvider</code> interface that is configured. By_default the <code>RequiredModelMBean</code> class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_<code>MBeanInfoAssembler</code> implementation being used. The_<code>ObjectName</code> given to each bean is dependent on the_implementation of the <code>ObjectNamingStrategy</code> interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				this.logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,code,via,a,code,model,mbean,code,the,actual,implemetation,of,the,code,model,mbean,code,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,code,interface,that,is,configured,by,default,the,code,required,model,mbean,code,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,code,implementation,being,used,the,code,object,name,code,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,code,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,this,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1356735495;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				this.logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,this,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1357119239;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				this.logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,this,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1368482696;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				this.logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,this,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1385412762;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				this.logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,this,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1402388547;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				this.logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,this,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1403790940;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		logger.info("Registering beans for JMX exposure")___		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.info("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,logger,info,registering,beans,for,jmx,exposure,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,info,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1404769827;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1404773971;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1405000116;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1413819738;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1414702639;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1419347032;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1423471263;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1461047077;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<String, Object>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,string,object,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1467730834;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1467808333;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1482159779;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1495868221;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1496242568;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1496259743;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1496837955;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			for (Map.Entry<String, Object> entry : this.beans.entrySet()) {_				registerBeanNameOrInstance(entry.getValue(), entry.getKey())__			}_		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,for,map,entry,string,object,entry,this,beans,entry,set,register,bean,name,or,instance,entry,get,value,entry,get,key
MBeanExporter -> protected void registerBeans();1497250713;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) ->_					registerBeanNameOrInstance(instance, beanName))__		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1497341397;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetectMBeans()__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetectBeans((AutodetectCapableMBeanInfoAssembler) this.assembler)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) ->_					registerBeanNameOrInstance(instance, beanName))__		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,mbeans,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,beans,autodetect,capable,mbean,info,assembler,this,assembler,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1498780456;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1502974979;Registers the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};registers,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1503007895;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1517867511;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1519295386;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1519514499;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1530174524;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1532091916;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implemetation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implemetation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1542613849;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implementation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implementation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> protected void registerBeans();1544613374;Register the defined beans with the {@link MBeanServer}._<p>Each bean is exposed to the {@code MBeanServer} via a_{@code ModelMBean}. The actual implementation of the_{@code ModelMBean} interface used depends on the implementation of_the {@code ModelMBeanProvider} interface that is configured. By_default the {@code RequiredModelMBean} class that is supplied with_all JMX implementations is used._<p>The management interface produced for each bean is dependent on the_{@code MBeanInfoAssembler} implementation being used. The_{@code ObjectName} given to each bean is dependent on the_implementation of the {@code ObjectNamingStrategy} interface being used.;protected void registerBeans() {_		_		if (this.beans == null) {_			this.beans = new HashMap<>()__			_			if (this.autodetectMode == null) {_				this.autodetectMode = AUTODETECT_ALL__			}_		}__		_		int mode = (this.autodetectMode != null ? this.autodetectMode : AUTODETECT_NONE)__		if (mode != AUTODETECT_NONE) {_			if (this.beanFactory == null) {_				throw new MBeanExportException("Cannot autodetect MBeans if not running in a BeanFactory")__			}_			if (mode == AUTODETECT_MBEAN || mode == AUTODETECT_ALL) {_				_				logger.debug("Autodetecting user-defined JMX MBeans")__				autodetect(this.beans, (beanClass, beanName) -> isMBean(beanClass))__			}_			_			if ((mode == AUTODETECT_ASSEMBLER || mode == AUTODETECT_ALL) &&_					this.assembler instanceof AutodetectCapableMBeanInfoAssembler) {_				autodetect(this.beans, ((AutodetectCapableMBeanInfoAssembler) this.assembler)::includeBean)__			}_		}__		if (!this.beans.isEmpty()) {_			this.beans.forEach((beanName, instance) -> registerBeanNameOrInstance(instance, beanName))__		}_	};register,the,defined,beans,with,the,link,mbean,server,p,each,bean,is,exposed,to,the,code,mbean,server,via,a,code,model,mbean,the,actual,implementation,of,the,code,model,mbean,interface,used,depends,on,the,implementation,of,the,code,model,mbean,provider,interface,that,is,configured,by,default,the,code,required,model,mbean,class,that,is,supplied,with,all,jmx,implementations,is,used,p,the,management,interface,produced,for,each,bean,is,dependent,on,the,code,mbean,info,assembler,implementation,being,used,the,code,object,name,given,to,each,bean,is,dependent,on,the,implementation,of,the,code,object,naming,strategy,interface,being,used;protected,void,register,beans,if,this,beans,null,this,beans,new,hash,map,if,this,autodetect,mode,null,this,autodetect,mode,int,mode,this,autodetect,mode,null,this,autodetect,mode,if,mode,if,this,bean,factory,null,throw,new,mbean,export,exception,cannot,autodetect,mbeans,if,not,running,in,a,bean,factory,if,mode,mode,logger,debug,autodetecting,user,defined,jmx,mbeans,autodetect,this,beans,bean,class,bean,name,is,mbean,bean,class,if,mode,mode,this,assembler,instanceof,autodetect,capable,mbean,info,assembler,autodetect,this,beans,autodetect,capable,mbean,info,assembler,this,assembler,include,bean,if,this,beans,is,empty,this,beans,for,each,bean,name,instance,register,bean,name,or,instance,instance,bean,name
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1328020251;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1356735495;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1357119239;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1368482696;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1385412762;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1402388547;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1403790940;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1404769827;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1404773971;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1405000116;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1413819738;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1414702639;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1419347032;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1423471263;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1461047077;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1467730834;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1467808333;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Exception ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1482159779;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1495868221;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1496242568;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1496259743;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1496837955;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1497250713;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1497341397;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1498780456;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1502974979;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1503007895;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1517867511;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1519295386;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1519514499;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1530174524;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1532091916;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1542613849;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> private void registerNotificationListeners() throws MBeanExportException;1544613374;Register the configured {@link NotificationListener NotificationListeners}_with the {@link MBeanServer}.;private void registerNotificationListeners() throws MBeanExportException {_		if (this.notificationListeners != null) {_			Assert.state(this.server != null, "No MBeanServer available")__			for (NotificationListenerBean bean : this.notificationListeners) {_				try {_					ObjectName[] mappedObjectNames = bean.getResolvedObjectNames()__					if (mappedObjectNames == null) {_						_						mappedObjectNames = getRegisteredObjectNames()__					}_					if (this.registeredNotificationListeners.put(bean, mappedObjectNames) == null) {_						for (ObjectName mappedObjectName : mappedObjectNames) {_							this.server.addNotificationListener(mappedObjectName, bean.getNotificationListener(),_									bean.getNotificationFilter(), bean.getHandback())__						}_					}_				}_				catch (Throwable ex) {_					throw new MBeanExportException("Unable to register NotificationListener", ex)__				}_			}_		}_	};register,the,configured,link,notification,listener,notification,listeners,with,the,link,mbean,server;private,void,register,notification,listeners,throws,mbean,export,exception,if,this,notification,listeners,null,assert,state,this,server,null,no,mbean,server,available,for,notification,listener,bean,bean,this,notification,listeners,try,object,name,mapped,object,names,bean,get,resolved,object,names,if,mapped,object,names,null,mapped,object,names,get,registered,object,names,if,this,registered,notification,listeners,put,bean,mapped,object,names,null,for,object,name,mapped,object,name,mapped,object,names,this,server,add,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,throw,new,mbean,export,exception,unable,to,register,notification,listener,ex
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1328020251;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1356735495;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1357119239;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1368482696;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1385412762;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1402388547;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1403790940;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1404769827;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1404773971;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1405000116;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1413819738;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1414702639;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1419347032;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1423471263;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1461047077;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1467730834;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1467808333;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1482159779;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1495868221;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1496242568;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1496259743;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1496837955;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1497250713;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1497341397;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1498780456;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1502974979;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1503007895;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1517867511;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1519295386;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1519514499;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1530174524;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1532091916;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1542613849;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName);1544613374;Return whether the specified bean definition should be considered as lazy-init._@param beanFactory the bean factory that is supposed to contain the bean definition_@param beanName the name of the bean to check_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#getBeanDefinition_@see org.springframework.beans.factory.config.BeanDefinition#isLazyInit;protected boolean isBeanDefinitionLazyInit(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit())__	};return,whether,the,specified,bean,definition,should,be,considered,as,lazy,init,param,bean,factory,the,bean,factory,that,is,supposed,to,contain,the,bean,definition,param,bean,name,the,name,of,the,bean,to,check,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,get,bean,definition,see,org,springframework,beans,factory,config,bean,definition,is,lazy,init;protected,boolean,is,bean,definition,lazy,init,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,lazy,init
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1328020251;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1356735495;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1357119239;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1368482696;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1385412762;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1402388547;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1403790940;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1404769827;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1404773971;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1405000116;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1413819738;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1414702639;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1419347032;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1423471263;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1461047077;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1467730834;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1467808333;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1482159779;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1495868221;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1496242568;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1496259743;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1496837955;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1497250713;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1497341397;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1498780456;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1502974979;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1503007895;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1517867511;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1519295386;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1519514499;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1530174524;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1532091916;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1542613849;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> private void notifyListenersOfUnregistration(ObjectName objectName);1544613374;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_unregistration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfUnregistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanUnregistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,unregistration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,unregistered,object,name
MBeanExporter -> public void setAutoStartup(boolean autoStartup);1402388547;Set whether to automatically export MBeans after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,export,mbeans,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
MBeanExporter -> public void setAutoStartup(boolean autoStartup);1403790940;Set whether to automatically export MBeans after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup_through the {@link #start()} method.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,export,mbeans,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup,through,the,link,start,method;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1403790940;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1404769827;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1404773971;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1405000116;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1413819738;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1414702639;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1419347032;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1423471263;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1461047077;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1467730834;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1467808333;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1482159779;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1495868221;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1496242568;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1496259743;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		if (excludedBeans != null) {_			this.excludedBeans.addAll(Arrays.asList(excludedBeans))__		}_	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,if,excluded,beans,null,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1496837955;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1497250713;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1497341397;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1498780456;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1502974979;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1503007895;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1517867511;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1519295386;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		this.excludedBeans.addAll(Arrays.asList(excludedBeans))__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,this,excluded,beans,add,all,arrays,as,list,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1519514499;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		Collections.addAll(this.excludedBeans, excludedBeans)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,collections,add,all,this,excluded,beans,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1530174524;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		Collections.addAll(this.excludedBeans, excludedBeans)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,collections,add,all,this,excluded,beans,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1532091916;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		Collections.addAll(this.excludedBeans, excludedBeans)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,collections,add,all,this,excluded,beans,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1542613849;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		Collections.addAll(this.excludedBeans, excludedBeans)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,collections,add,all,this,excluded,beans,excluded,beans
MBeanExporter -> public void setExcludedBeans(String... excludedBeans);1544613374;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String... excludedBeans) {_		this.excludedBeans.clear()__		Collections.addAll(this.excludedBeans, excludedBeans)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,clear,collections,add,all,this,excluded,beans,excluded,beans
MBeanExporter -> @Override 	public void afterPropertiesSet();1356735495;Start bean registration automatically when deployed in an_{@code ApplicationContext}._@see #registerBeans();@Override_	public void afterPropertiesSet() {_		_		_		if (this.server == null) {_			this.server = JmxUtils.locateMBeanServer()__		}_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};start,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;override,public,void,after,properties,set,if,this,server,null,this,server,jmx,utils,locate,mbean,server,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterPropertiesSet();1368482696;Start bean registration automatically when deployed in an_{@code ApplicationContext}._@see #registerBeans();@Override_	public void afterPropertiesSet() {_		_		_		if (this.server == null) {_			this.server = JmxUtils.locateMBeanServer()__		}_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};start,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;override,public,void,after,properties,set,if,this,server,null,this,server,jmx,utils,locate,mbean,server,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterPropertiesSet();1385412762;Start bean registration automatically when deployed in an_{@code ApplicationContext}._@see #registerBeans();@Override_	public void afterPropertiesSet() {_		_		_		if (this.server == null) {_			this.server = JmxUtils.locateMBeanServer()__		}_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};start,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;override,public,void,after,properties,set,if,this,server,null,this,server,jmx,utils,locate,mbean,server,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1405000116;Kick off bean registration automatically when deployed in an {@code ApplicationContext}._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,when,deployed,in,an,code,application,context,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1413819738;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1414702639;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1419347032;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1423471263;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1461047077;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1467730834;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1467808333;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1482159779;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1495868221;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1496242568;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1496259743;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1496837955;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1497250713;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1497341397;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1498780456;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1502974979;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1503007895;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1517867511;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1519295386;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1519514499;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1530174524;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.info("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,info,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1532091916;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.debug("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,debug,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1542613849;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.debug("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,debug,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> @Override 	public void afterSingletonsInstantiated();1544613374;Kick off bean registration automatically after the regular singleton instantiation phase._@see #registerBeans();@Override_	public void afterSingletonsInstantiated() {_		try {_			logger.debug("Registering beans for JMX exposure on startup")__			registerBeans()__			registerNotificationListeners()__		}_		catch (RuntimeException ex) {_			_			unregisterNotificationListeners()__			unregisterBeans()__			throw ex__		}_	};kick,off,bean,registration,automatically,after,the,regular,singleton,instantiation,phase,see,register,beans;override,public,void,after,singletons,instantiated,try,logger,debug,registering,beans,for,jmx,exposure,on,startup,register,beans,register,notification,listeners,catch,runtime,exception,ex,unregister,notification,listeners,unregister,beans,throw,ex
MBeanExporter -> private void autodetectMBeans();1328020251;Attempts to detect any beans defined in the <code>ApplicationContext</code> that are_valid MBeans and registers them automatically with the <code>MBeanServer</code>.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			public boolean include(Class beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,code,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server,code;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1356735495;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1357119239;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			public boolean include(Class beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1368482696;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1385412762;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1402388547;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1403790940;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1404769827;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1404773971;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1405000116;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1413819738;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1414702639;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1419347032;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1423471263;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1461047077;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1467730834;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1467808333;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1482159779;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1495868221;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1496242568;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1496259743;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1496837955;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1497250713;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect(new AutodetectCallback() {_			@Override_			public boolean include(Class<?> beanClass, String beanName) {_				return isMBean(beanClass)__			}_		})__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,new,autodetect,callback,override,public,boolean,include,class,bean,class,string,bean,name,return,is,mbean,bean,class
MBeanExporter -> private void autodetectMBeans();1497341397;Attempts to detect any beans defined in the {@code ApplicationContext} that are_valid MBeans and registers them automatically with the {@code MBeanServer}.;private void autodetectMBeans() {_		autodetect((beanClass, beanName) -> isMBean(beanClass))__	};attempts,to,detect,any,beans,defined,in,the,code,application,context,that,are,valid,mbeans,and,registers,them,automatically,with,the,code,mbean,server;private,void,autodetect,mbeans,autodetect,bean,class,bean,name,is,mbean,bean,class
MBeanExporter -> @Nullable 	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException;1496837955;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};@Nullable_	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException {_		if (bean == null) {_			return null__		}__		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;nullable,private,object,name,register,bean,instance,nullable,object,bean,string,bean,key,throws,jmexception,if,bean,null,return,null,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> @Nullable 	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException;1497250713;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};@Nullable_	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException {_		if (bean == null) {_			return null__		}__		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;nullable,private,object,name,register,bean,instance,nullable,object,bean,string,bean,key,throws,jmexception,if,bean,null,return,null,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> @Nullable 	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException;1497341397;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};@Nullable_	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException {_		if (bean == null) {_			return null__		}__		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;nullable,private,object,name,register,bean,instance,nullable,object,bean,string,bean,key,throws,jmexception,if,bean,null,return,null,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> @Nullable 	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException;1498780456;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};@Nullable_	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException {_		if (bean == null) {_			return null__		}__		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;nullable,private,object,name,register,bean,instance,nullable,object,bean,string,bean,key,throws,jmexception,if,bean,null,return,null,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> @Nullable 	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException;1502974979;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};@Nullable_	private ObjectName registerBeanInstance(@Nullable Object bean, String beanKey) throws JMException {_		if (bean == null) {_			return null__		}__		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;nullable,private,object,name,register,bean,instance,nullable,object,bean,string,bean,key,throws,jmexception,if,bean,null,return,null,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1328020251;Registers an existing MBean or an MBean adapter for a plain bean_with the <code>MBeanServer</code>._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the <code>ObjectName</code> under which the bean was registered_with the <code>MBeanServer</code>;private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,code,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,code,under,which,the,bean,was,registered,with,the,code,mbean,server,code;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1356735495;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1357119239;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1368482696;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1385412762;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1402388547;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1403790940;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1404769827;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1404773971;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1405000116;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1413819738;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1414702639;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1419347032;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1423471263;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1461047077;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1467730834;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1467808333;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1482159779;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1495868221;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1496242568;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1496259743;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}_		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}_		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1503007895;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1517867511;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1519295386;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1519514499;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1530174524;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,info,enabled,logger,info,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,info,enabled,logger,info,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1532091916;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,debug,enabled,logger,debug,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1542613849;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,debug,enabled,logger,debug,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException;1544613374;Registers an existing MBean or an MBean adapter for a plain bean_with the {@code MBeanServer}._@param bean the bean to register, either an MBean or a plain bean_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerBeanInstance(Object bean, String beanKey) throws JMException {_		ObjectName objectName = getObjectName(bean, beanKey)__		Object mbeanToExpose = null__		if (isMBean(bean.getClass())) {_			mbeanToExpose = bean__		}_		else {_			DynamicMBean adaptedBean = adaptMBeanIfPossible(bean)__			if (adaptedBean != null) {_				mbeanToExpose = adaptedBean__			}_		}__		if (mbeanToExpose != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			doRegister(mbeanToExpose, objectName)__		}_		else {_			if (logger.isDebugEnabled()) {_				logger.debug("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(bean, beanKey)__			doRegister(mbean, objectName)__			injectNotificationPublisherIfNecessary(bean, mbean, objectName)__		}__		return objectName__	};registers,an,existing,mbean,or,an,mbean,adapter,for,a,plain,bean,with,the,code,mbean,server,param,bean,the,bean,to,register,either,an,mbean,or,a,plain,bean,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,bean,instance,object,bean,string,bean,key,throws,jmexception,object,name,object,name,get,object,name,bean,bean,key,object,mbean,to,expose,null,if,is,mbean,bean,get,class,mbean,to,expose,bean,else,dynamic,mbean,adapted,bean,adapt,mbean,if,possible,bean,if,adapted,bean,null,mbean,to,expose,adapted,bean,if,mbean,to,expose,null,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,mbean,object,name,do,register,mbean,to,expose,object,name,else,if,logger,is,debug,enabled,logger,debug,located,managed,bean,bean,key,registering,with,jmx,server,as,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,bean,bean,key,do,register,mbean,object,name,inject,notification,publisher,if,necessary,bean,mbean,object,name,return,object,name
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1328020251;Set the implementation of the <code>MBeanInfoAssembler</code> interface to use_for this exporter. Default is a <code>SimpleReflectiveMBeanInfoAssembler</code>._<p>The passed-in assembler can optionally implement the_<code>AutodetectCapableMBeanInfoAssembler</code> interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,code,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,code,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,code,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1356735495;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1357119239;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1368482696;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1385412762;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1402388547;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1403790940;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1404769827;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1404773971;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1405000116;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1413819738;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1414702639;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1419347032;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1423471263;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1461047077;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1467730834;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1467808333;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1482159779;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1495868221;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1496242568;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1496259743;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1496837955;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1497250713;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1497341397;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1498780456;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1502974979;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1503007895;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1517867511;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1519295386;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1519514499;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1530174524;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1532091916;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1542613849;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> public void setAssembler(MBeanInfoAssembler assembler);1544613374;Set the implementation of the {@code MBeanInfoAssembler} interface to use_for this exporter. Default is a {@code SimpleReflectiveMBeanInfoAssembler}._<p>The passed-in assembler can optionally implement the_{@code AutodetectCapableMBeanInfoAssembler} interface, which enables it_to participate in the exporter's MBean autodetection process._@see org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler_@see org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler_@see #setAutodetect;public void setAssembler(MBeanInfoAssembler assembler) {_		this.assembler = assembler__	};set,the,implementation,of,the,code,mbean,info,assembler,interface,to,use,for,this,exporter,default,is,a,code,simple,reflective,mbean,info,assembler,p,the,passed,in,assembler,can,optionally,implement,the,code,autodetect,capable,mbean,info,assembler,interface,which,enables,it,to,participate,in,the,exporter,s,mbean,autodetection,process,see,org,springframework,jmx,export,assembler,simple,reflective,mbean,info,assembler,see,org,springframework,jmx,export,assembler,autodetect,capable,mbean,info,assembler,see,org,springframework,jmx,export,assembler,metadata,mbean,info,assembler,see,set,autodetect;public,void,set,assembler,mbean,info,assembler,assembler,this,assembler,assembler
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1328020251;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1356735495;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1357119239;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1368482696;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1385412762;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1402388547;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1403790940;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1404769827;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1404773971;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1405000116;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1413819738;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1414702639;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1419347032;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1423471263;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1461047077;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1467730834;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1467808333;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1482159779;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1495868221;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1496242568;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1496259743;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1496837955;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1497250713;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1497341397;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1498780456;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1502974979;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1503007895;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1517867511;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1519295386;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1519514499;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1530174524;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1532091916;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1542613849;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName);1544613374;Return whether the specified bean definition should be considered as abstract.;private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {_		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&_				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract())__	};return,whether,the,specified,bean,definition,should,be,considered,as,abstract;private,boolean,is,bean,definition,abstract,listable,bean,factory,bean,factory,string,bean,name,return,bean,factory,instanceof,configurable,listable,bean,factory,bean,factory,contains,bean,definition,bean,name,configurable,listable,bean,factory,bean,factory,get,bean,definition,bean,name,is,abstract
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1385412762;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1402388547;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1403790940;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1404769827;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1404773971;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1405000116;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1413819738;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1414702639;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1419347032;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1423471263;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1461047077;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1467730834;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1467808333;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1482159779;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1495868221;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1496242568;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1496259743;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1496837955;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1497250713;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1497341397;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1498780456;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1502974979;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1503007895;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1517867511;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1519295386;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1519514499;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1530174524;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1532091916;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1542613849;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class<?> beanClass, String beanName)_;1544613374;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class<?> beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1328020251;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the <code>AUTODETECT_</code> constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1356735495;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1357119239;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1368482696;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1385412762;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1402388547;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1403790940;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1404769827;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1404773971;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1405000116;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1413819738;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1414702639;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1419347032;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1423471263;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1461047077;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1467730834;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1467808333;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1482159779;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1495868221;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1496242568;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1496259743;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1496837955;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1497250713;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1497341397;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1498780456;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1502974979;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1503007895;Set the autodetection mode to use._@exception IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,exception,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1517867511;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1519295386;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1519514499;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1530174524;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1532091916;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1542613849;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> public void setAutodetectMode(int autodetectMode);1544613374;Set the autodetection mode to use._@throws IllegalArgumentException if the supplied value is not_one of the {@code AUTODETECT_} constants_@see #setAutodetectModeName(String)_@see #AUTODETECT_ALL_@see #AUTODETECT_ASSEMBLER_@see #AUTODETECT_MBEAN_@see #AUTODETECT_NONE;public void setAutodetectMode(int autodetectMode) {_		if (!constants.getValues(CONSTANT_PREFIX_AUTODETECT).contains(autodetectMode)) {_			throw new IllegalArgumentException("Only values of autodetect constants allowed")__		}_		this.autodetectMode = autodetectMode__	};set,the,autodetection,mode,to,use,throws,illegal,argument,exception,if,the,supplied,value,is,not,one,of,the,code,constants,see,set,autodetect,mode,name,string,see,see,see,see;public,void,set,autodetect,mode,int,autodetect,mode,if,constants,get,values,contains,autodetect,mode,throw,new,illegal,argument,exception,only,values,of,autodetect,constants,allowed,this,autodetect,mode,autodetect,mode
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1328020251;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1356735495;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1357119239;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1368482696;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1385412762;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1402388547;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1403790940;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1404769827;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1404773971;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1405000116;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1413819738;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1414702639;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1419347032;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1423471263;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1461047077;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1467730834;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1467808333;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1482159779;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1495868221;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1496242568;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1496259743;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1496837955;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1497250713;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1497341397;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1498780456;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1502974979;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1503007895;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1517867511;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1519295386;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1519514499;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1530174524;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1532091916;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1542613849;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> private void notifyListenersOfRegistration(ObjectName objectName);1544613374;Notifies all registered {@link MBeanExporterListener MBeanExporterListeners} of the_registration of the MBean identified by the supplied {@link ObjectName}.;private void notifyListenersOfRegistration(ObjectName objectName) {_		if (this.listeners != null) {_			for (MBeanExporterListener listener : this.listeners) {_				listener.mbeanRegistered(objectName)__			}_		}_	};notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,of,the,mbean,identified,by,the,supplied,link,object,name;private,void,notify,listeners,of,registration,object,name,object,name,if,this,listeners,null,for,mbean,exporter,listener,listener,this,listeners,listener,mbean,registered,object,name
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1496259743;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1496837955;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1497250713;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1497341397;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1498780456;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1502974979;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1503007895;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1517867511;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1519295386;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1519514499;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1530174524;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1532091916;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1542613849;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException;1544613374;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, @Nullable String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,nullable,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1328020251;Retrieve the <code>ObjectName</code> for a bean._<p>If the bean implements the <code>SelfNaming</code> interface, then the_<code>ObjectName</code> will be retrieved using <code>SelfNaming.getObjectName()</code>._Otherwise, the configured <code>ObjectNamingStrategy</code> is used._@param bean the name of the bean in the <code>BeanFactory</code>_@param beanKey the key associated with the bean in the beans map_@return the <code>ObjectName</code> for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved <code>ObjectName</code> is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,code,for,a,bean,p,if,the,bean,implements,the,code,self,naming,code,interface,then,the,code,object,name,code,will,be,retrieved,using,code,self,naming,get,object,name,code,otherwise,the,configured,code,object,naming,strategy,code,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,code,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,code,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,code,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1356735495;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1357119239;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1368482696;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1385412762;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1402388547;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1403790940;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1404769827;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1404773971;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1405000116;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1413819738;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1414702639;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1419347032;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1423471263;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1461047077;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1467730834;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1467808333;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1482159779;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1495868221;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException;1496242568;Retrieve the {@code ObjectName} for a bean._<p>If the bean implements the {@code SelfNaming} interface, then the_{@code ObjectName} will be retrieved using {@code SelfNaming.getObjectName()}._Otherwise, the configured {@code ObjectNamingStrategy} is used._@param bean the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with the bean in the beans map_@return the {@code ObjectName} for the supplied bean_@throws javax.management.MalformedObjectNameException_if the retrieved {@code ObjectName} is malformed;protected ObjectName getObjectName(Object bean, String beanKey) throws MalformedObjectNameException {_		if (bean instanceof SelfNaming) {_			return ((SelfNaming) bean).getObjectName()__		}_		else {_			return this.namingStrategy.getObjectName(bean, beanKey)__		}_	};retrieve,the,code,object,name,for,a,bean,p,if,the,bean,implements,the,code,self,naming,interface,then,the,code,object,name,will,be,retrieved,using,code,self,naming,get,object,name,otherwise,the,configured,code,object,naming,strategy,is,used,param,bean,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,the,bean,in,the,beans,map,return,the,code,object,name,for,the,supplied,bean,throws,javax,management,malformed,object,name,exception,if,the,retrieved,code,object,name,is,malformed;protected,object,name,get,object,name,object,bean,string,bean,key,throws,malformed,object,name,exception,if,bean,instanceof,self,naming,return,self,naming,bean,get,object,name,else,return,this,naming,strategy,get,object,name,bean,bean,key
MBeanExporter -> private boolean isExcluded(String beanName);1328020251;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1356735495;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1357119239;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1368482696;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1385412762;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1402388547;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1403790940;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1404769827;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1404773971;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1405000116;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1413819738;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1414702639;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1419347032;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans != null &&_				(this.excludedBeans.contains(beanName) ||_						(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_								this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length())))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,null,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1423471263;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1461047077;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1467730834;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1467808333;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1482159779;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1495868221;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1496242568;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1496259743;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1496837955;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1497250713;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1497341397;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1498780456;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1502974979;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1503007895;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1517867511;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1519295386;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1519514499;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1530174524;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1532091916;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1542613849;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> private boolean isExcluded(String beanName);1544613374;Indicates whether or not a particular bean name is present in the excluded beans list.;private boolean isExcluded(String beanName) {_		return (this.excludedBeans.contains(beanName) ||_					(beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX) &&_							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))))__	};indicates,whether,or,not,a,particular,bean,name,is,present,in,the,excluded,beans,list;private,boolean,is,excluded,string,bean,name,return,this,excluded,beans,contains,bean,name,bean,name,starts,with,bean,factory,this,excluded,beans,contains,bean,name,substring,bean,factory,length
MBeanExporter -> public void setBeans(Map<String, Object> beans);1328020251;Supply a <code>Map</code> of beans to be registered with the JMX_<code>MBeanServer</code>._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX <code>ObjectName</code> will be created straight_from the given key. This can be customized through specifying a_custom <code>NamingStrategy</code>._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,code,of,beans,to,be,registered,with,the,jmx,code,mbean,server,code,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,code,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,code,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1356735495;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1357119239;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1368482696;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1385412762;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1402388547;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1403790940;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1404769827;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1404773971;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1405000116;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1413819738;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1414702639;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1419347032;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1423471263;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1461047077;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1467730834;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1467808333;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1482159779;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1495868221;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1496242568;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1496259743;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1496837955;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1497250713;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1497341397;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1498780456;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1502974979;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1503007895;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1517867511;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1519295386;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1519514499;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1530174524;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans a Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,a,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1532091916;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans a Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,a,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1542613849;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans a Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,a,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> public void setBeans(Map<String, Object> beans);1544613374;Supply a {@code Map} of beans to be registered with the JMX_{@code MBeanServer}._<p>The String keys are the basis for the creation of JMX object names._By default, a JMX {@code ObjectName} will be created straight_from the given key. This can be customized through specifying a_custom {@code NamingStrategy}._<p>Both bean instances and bean names are allowed as values._Bean instances are typically linked in through bean references._Bean names will be resolved as beans in the current factory, respecting_lazy-init markers (that is, not triggering initialization of such beans)._@param beans a Map with JMX names as keys and bean instances or bean names_as values_@see #setNamingStrategy_@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see javax.management.ObjectName#ObjectName(String);public void setBeans(Map<String, Object> beans) {_		this.beans = beans__	};supply,a,code,map,of,beans,to,be,registered,with,the,jmx,code,mbean,server,p,the,string,keys,are,the,basis,for,the,creation,of,jmx,object,names,by,default,a,jmx,code,object,name,will,be,created,straight,from,the,given,key,this,can,be,customized,through,specifying,a,custom,code,naming,strategy,p,both,bean,instances,and,bean,names,are,allowed,as,values,bean,instances,are,typically,linked,in,through,bean,references,bean,names,will,be,resolved,as,beans,in,the,current,factory,respecting,lazy,init,markers,that,is,not,triggering,initialization,of,such,beans,param,beans,a,map,with,jmx,names,as,keys,and,bean,instances,or,bean,names,as,values,see,set,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,javax,management,object,name,object,name,string;public,void,set,beans,map,string,object,beans,this,beans,beans
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1328020251;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the <code>ObjectName</code> of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,code,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1356735495;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1357119239;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1368482696;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1385412762;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1402388547;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1403790940;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1404769827;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1404773971;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1405000116;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1413819738;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1414702639;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1419347032;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1423471263;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1461047077;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1467730834;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1467808333;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1482159779;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1495868221;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1496242568;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1496259743;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1496837955;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1497250713;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1497341397;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1498780456;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1502974979;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1503007895;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1517867511;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1519295386;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1519514499;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1530174524;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1532091916;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1542613849;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> @Override 	protected void onRegister(ObjectName objectName);1544613374;Called when an MBean is registered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the registration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanRegistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the registered MBean;@Override_	protected void onRegister(ObjectName objectName) {_		notifyListenersOfRegistration(objectName)__	};called,when,an,mbean,is,registered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,registration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,registered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,registered,mbean;override,protected,void,on,register,object,name,object,name,notify,listeners,of,registration,object,name
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1328020251;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the <code>Map</code> is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk (<code>*</code>) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,code,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1356735495;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1357119239;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1368482696;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1385412762;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1402388547;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1403790940;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1404769827;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1404773971;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1405000116;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1413819738;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1414702639;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1419347032;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1423471263;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1461047077;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<NotificationListenerBean>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,notification,listener,bean,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1467730834;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1467808333;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1482159779;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1495868221;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1496242568;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1496259743;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1496837955;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		for (Map.Entry<?, ? extends NotificationListener> entry : listeners.entrySet()) {_			_			NotificationListenerBean bean = new NotificationListenerBean(entry.getValue())__			_			Object key = entry.getKey()__			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(entry.getKey())__			}_			notificationListeners.add(bean)__		}__		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,for,map,entry,extends,notification,listener,entry,listeners,entry,set,notification,listener,bean,bean,new,notification,listener,bean,entry,get,value,object,key,entry,get,key,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,entry,get,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1497250713;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1497341397;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1498780456;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1502974979;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1503007895;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1517867511;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners =_				notificationListeners.toArray(new NotificationListenerBean[notificationListeners.size()])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,notification,listeners,size
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1519295386;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners = notificationListeners.toArray(new NotificationListenerBean[0])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,0
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1519514499;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners = notificationListeners.toArray(new NotificationListenerBean[0])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,0
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1530174524;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners = notificationListeners.toArray(new NotificationListenerBean[0])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,0
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1532091916;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners = notificationListeners.toArray(new NotificationListenerBean[0])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,0
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1542613849;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners = notificationListeners.toArray(new NotificationListenerBean[0])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,0
MBeanExporter -> public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners);1544613374;Set the {@link NotificationListener NotificationListeners} to register_with the {@link javax.management.MBeanServer}._<P>The key of each entry in the {@code Map} is a {@link String}_representation of the {@link javax.management.ObjectName} or the bean_name of the MBean the listener should be registered for. Specifying an_asterisk ({@code *}) for a key will cause the listener to be_associated with all MBeans registered by this class at startup time._<p>The value of each entry is the_{@link javax.management.NotificationListener} to register. For more_advanced options such as registering_{@link javax.management.NotificationFilter NotificationFilters} and_handback objects see {@link #setNotificationListeners(NotificationListenerBean[])}.;public void setNotificationListenerMappings(Map<?, ? extends NotificationListener> listeners) {_		Assert.notNull(listeners, "'listeners' must not be null")__		List<NotificationListenerBean> notificationListeners =_				new ArrayList<>(listeners.size())___		listeners.forEach((key, listener) -> {_			_			NotificationListenerBean bean = new NotificationListenerBean(listener)__			_			if (key != null && !WILDCARD.equals(key)) {_				_				bean.setMappedObjectName(key)__			}_			notificationListeners.add(bean)__		})___		this.notificationListeners = notificationListeners.toArray(new NotificationListenerBean[0])__	};set,the,link,notification,listener,notification,listeners,to,register,with,the,link,javax,management,mbean,server,p,the,key,of,each,entry,in,the,code,map,is,a,link,string,representation,of,the,link,javax,management,object,name,or,the,bean,name,of,the,mbean,the,listener,should,be,registered,for,specifying,an,asterisk,code,for,a,key,will,cause,the,listener,to,be,associated,with,all,mbeans,registered,by,this,class,at,startup,time,p,the,value,of,each,entry,is,the,link,javax,management,notification,listener,to,register,for,more,advanced,options,such,as,registering,link,javax,management,notification,filter,notification,filters,and,handback,objects,see,link,set,notification,listeners,notification,listener,bean;public,void,set,notification,listener,mappings,map,extends,notification,listener,listeners,assert,not,null,listeners,listeners,must,not,be,null,list,notification,listener,bean,notification,listeners,new,array,list,listeners,size,listeners,for,each,key,listener,notification,listener,bean,bean,new,notification,listener,bean,listener,if,key,null,wildcard,equals,key,bean,set,mapped,object,name,key,notification,listeners,add,bean,this,notification,listeners,notification,listeners,to,array,new,notification,listener,bean,0
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1328020251;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the <code>ObjectName</code> of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,code,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1356735495;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1357119239;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1368482696;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1385412762;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1402388547;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1403790940;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1404769827;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1404773971;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1405000116;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1413819738;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1414702639;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1419347032;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1423471263;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1461047077;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1467730834;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1467808333;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1482159779;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1495868221;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1496242568;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1496259743;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1496837955;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1497250713;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1497341397;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1498780456;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1502974979;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1503007895;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1517867511;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1519295386;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1519514499;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1530174524;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1532091916;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1542613849;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> @Override 	protected void onUnregister(ObjectName objectName);1544613374;Called when an MBean is unregistered. Notifies all registered_{@link MBeanExporterListener MBeanExporterListeners} of the unregistration event._<p>Please note that if an {@link MBeanExporterListener} throws a (runtime)_exception when notified, this will essentially interrupt the notification process_and any remaining listeners that have yet to be notified will not (obviously)_receive the {@link MBeanExporterListener#mbeanUnregistered(javax.management.ObjectName)}_callback._@param objectName the {@code ObjectName} of the unregistered MBean;@Override_	protected void onUnregister(ObjectName objectName) {_		notifyListenersOfUnregistration(objectName)__	};called,when,an,mbean,is,unregistered,notifies,all,registered,link,mbean,exporter,listener,mbean,exporter,listeners,of,the,unregistration,event,p,please,note,that,if,an,link,mbean,exporter,listener,throws,a,runtime,exception,when,notified,this,will,essentially,interrupt,the,notification,process,and,any,remaining,listeners,that,have,yet,to,be,notified,will,not,obviously,receive,the,link,mbean,exporter,listener,mbean,unregistered,javax,management,object,name,callback,param,object,name,the,code,object,name,of,the,unregistered,mbean;override,protected,void,on,unregister,object,name,object,name,notify,listeners,of,unregistration,object,name
MBeanExporter -> private void autodetect(AutodetectCallback callback);1328020251;Performs the actual autodetection process, delegating to an_<code>AutodetectCallback</code> instance to vote on the inclusion of a_given bean._@param callback the <code>AutodetectCallback</code> to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,code,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,code,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1356735495;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1357119239;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1368482696;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1385412762;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1402388547;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1403790940;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1404769827;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1404773971;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1405000116;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1413819738;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1414702639;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!this.beans.containsValue(beanName) && (beanInstance == null ||_								!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1419347032;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1423471263;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1461047077;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,string,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1467730834;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1467808333;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1482159779;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1495868221;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1496242568;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1496259743;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1496837955;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1497250713;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(AutodetectCallback callback);1497341397;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(AutodetectCallback callback) {_		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}_		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(this.beans.values(), beanInstance))) {_							_							this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,autodetect,callback,callback,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,this,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,this,beans,values,bean,instance,this,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> public void setAutodetect(boolean autodetect);1328020251;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an <code>AutodetectCapableMBeanInfoAssembler</code>_if available._<p>This feature is turned off by default. Explicitly specify_<code>true</code> here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,code,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,code,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1356735495;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1357119239;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1368482696;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1385412762;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1402388547;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1403790940;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1404769827;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1404773971;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1405000116;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1413819738;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1414702639;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1419347032;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1423471263;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1461047077;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1467730834;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1467808333;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1482159779;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1495868221;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1496242568;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1496259743;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1496837955;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1497250713;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1497341397;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1498780456;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1502974979;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1503007895;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1517867511;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1519295386;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1519514499;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1530174524;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1532091916;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1542613849;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> public void setAutodetect(boolean autodetect);1544613374;Set whether to autodetect MBeans in the bean factory that this exporter_runs in. Will also ask an {@code AutodetectCapableMBeanInfoAssembler}_if available._<p>This feature is turned off by default. Explicitly specify_{@code true} here to enable autodetection._@see #setAssembler_@see AutodetectCapableMBeanInfoAssembler_@see #isMBean;public void setAutodetect(boolean autodetect) {_		this.autodetectMode = (autodetect ? AUTODETECT_ALL : AUTODETECT_NONE)__	};set,whether,to,autodetect,mbeans,in,the,bean,factory,that,this,exporter,runs,in,will,also,ask,an,code,autodetect,capable,mbean,info,assembler,if,available,p,this,feature,is,turned,off,by,default,explicitly,specify,code,true,here,to,enable,autodetection,see,set,assembler,see,autodetect,capable,mbean,info,assembler,see,is,mbean;public,void,set,autodetect,boolean,autodetect,this,autodetect,mode,autodetect
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1385412762;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1402388547;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1403790940;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1404769827;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1404773971;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1405000116;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1413819738;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1414702639;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1419347032;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1423471263;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1461047077;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1467730834;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1467808333;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1482159779;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1495868221;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1496242568;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(Class<?> beanClass);1496259743;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1328020251;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1356735495;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1357119239;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1368482696;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1385412762;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1402388547;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1403790940;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1404769827;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1404773971;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1405000116;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1413819738;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1414702639;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1419347032;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1423471263;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1461047077;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1467730834;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1467808333;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1482159779;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1495868221;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1496242568;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1496259743;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1496837955;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1497250713;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1497341397;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1498780456;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1502974979;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1503007895;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1517867511;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1519295386;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1519514499;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1530174524;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1532091916;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1542613849;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> public void setAllowEagerInit(boolean allowEagerInit);1544613374;Specify whether to allow eager initialization of candidate beans_when autodetecting MBeans in the Spring application context._<p>Default is "false", respecting lazy-init flags on bean definitions._Switch this to "true" in order to search lazy-init beans as well,_including FactoryBean-produced objects that haven't been initialized yet.;public void setAllowEagerInit(boolean allowEagerInit) {_		this.allowEagerInit = allowEagerInit__	};specify,whether,to,allow,eager,initialization,of,candidate,beans,when,autodetecting,mbeans,in,the,spring,application,context,p,default,is,false,respecting,lazy,init,flags,on,bean,definitions,switch,this,to,true,in,order,to,search,lazy,init,beans,as,well,including,factory,bean,produced,objects,that,haven,t,been,initialized,yet;public,void,set,allow,eager,init,boolean,allow,eager,init,this,allow,eager,init,allow,eager,init
MBeanExporter -> @Override 	public void destroy();1356735495;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1368482696;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1385412762;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1404769827;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1404773971;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1405000116;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1413819738;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1414702639;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1419347032;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1423471263;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1461047077;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1467730834;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1467808333;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1482159779;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1495868221;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1496242568;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1496259743;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1496837955;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1497250713;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1497341397;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1498780456;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1502974979;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1503007895;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1517867511;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1519295386;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1519514499;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1530174524;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1532091916;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.debug("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,debug,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1542613849;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.debug("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,debug,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> @Override 	public void destroy();1544613374;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;@Override_	public void destroy() {_		logger.debug("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;override,public,void,destroy,logger,debug,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1328020251;Registers beans that are configured for lazy initialization with the_<code>MBeanServer<code> indirectly through a proxy._@param beanName the name of the bean in the <code>BeanFactory</code>_@param beanKey the key associated with this bean in the beans map_@return the <code>ObjectName</code> under which the bean was registered_with the <code>MBeanServer</code>;private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,code,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,code,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,code,under,which,the,bean,was,registered,with,the,code,mbean,server,code;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1356735495;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1357119239;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1368482696;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1385412762;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1402388547;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1403790940;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1404769827;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1404773971;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1405000116;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1413819738;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1414702639;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1419347032;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1423471263;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1461047077;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1467730834;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1467808333;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1482159779;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1495868221;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1496242568;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1496259743;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1496837955;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1497250713;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1497341397;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1498780456;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1502974979;Registers beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};registers,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1503007895;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1517867511;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1519295386;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1519514499;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1530174524;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1532091916;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1542613849;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException;1544613374;Register beans that are configured for lazy initialization with the_{@code MBeanServer} indirectly through a proxy._@param beanName the name of the bean in the {@code BeanFactory}_@param beanKey the key associated with this bean in the beans map_@return the {@code ObjectName} under which the bean was registered_with the {@code MBeanServer};private ObjectName registerLazyInit(String beanName, String beanKey) throws JMException {_		Assert.state(this.beanFactory != null, "No BeanFactory set")___		ProxyFactory proxyFactory = new ProxyFactory()__		proxyFactory.setProxyTargetClass(true)__		proxyFactory.setFrozen(true)___		if (isMBean(this.beanFactory.getType(beanName))) {_			_			LazyInitTargetSource targetSource = new LazyInitTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			doRegister(proxy, objectName)__			return objectName__		}__		else {_			_			NotificationPublisherAwareLazyTargetSource targetSource = new NotificationPublisherAwareLazyTargetSource()__			targetSource.setTargetBeanName(beanName)__			targetSource.setBeanFactory(this.beanFactory)__			proxyFactory.setTargetSource(targetSource)___			Object proxy = proxyFactory.getProxy(this.beanClassLoader)__			ObjectName objectName = getObjectName(proxy, beanKey)__			if (logger.isDebugEnabled()) {_				logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" +_						objectName + "]")__			}_			ModelMBean mbean = createAndConfigureMBean(proxy, beanKey)__			targetSource.setModelMBean(mbean)__			targetSource.setObjectName(objectName)__			doRegister(mbean, objectName)__			return objectName__		}_	};register,beans,that,are,configured,for,lazy,initialization,with,the,code,mbean,server,indirectly,through,a,proxy,param,bean,name,the,name,of,the,bean,in,the,code,bean,factory,param,bean,key,the,key,associated,with,this,bean,in,the,beans,map,return,the,code,object,name,under,which,the,bean,was,registered,with,the,code,mbean,server;private,object,name,register,lazy,init,string,bean,name,string,bean,key,throws,jmexception,assert,state,this,bean,factory,null,no,bean,factory,set,proxy,factory,proxy,factory,new,proxy,factory,proxy,factory,set,proxy,target,class,true,proxy,factory,set,frozen,true,if,is,mbean,this,bean,factory,get,type,bean,name,lazy,init,target,source,target,source,new,lazy,init,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,mbean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,do,register,proxy,object,name,return,object,name,else,notification,publisher,aware,lazy,target,source,target,source,new,notification,publisher,aware,lazy,target,source,target,source,set,target,bean,name,bean,name,target,source,set,bean,factory,this,bean,factory,proxy,factory,set,target,source,target,source,object,proxy,proxy,factory,get,proxy,this,bean,class,loader,object,name,object,name,get,object,name,proxy,bean,key,if,logger,is,debug,enabled,logger,debug,located,simple,bean,bean,key,registering,with,jmx,server,as,lazy,init,mbean,object,name,model,mbean,mbean,create,and,configure,mbean,proxy,bean,key,target,source,set,model,mbean,mbean,target,source,set,object,name,object,name,do,register,mbean,object,name,return,object,name
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1403790940;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1404769827;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1404773971;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1405000116;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1413819738;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1414702639;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1419347032;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1423471263;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1461047077;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1467730834;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1467808333;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1482159779;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1495868221;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1496242568;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1496259743;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1496837955;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1497250713;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1497341397;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1498780456;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1502974979;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1503007895;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1517867511;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1519295386;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1519514499;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1530174524;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1532091916;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1542613849;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> public void setNotificationListeners(NotificationListenerBean... notificationListeners);1544613374;Set the {@link NotificationListenerBean NotificationListenerBeans}_containing the_{@link javax.management.NotificationListener NotificationListeners}_that will be registered with the {@link MBeanServer}._@see #setNotificationListenerMappings(java.util.Map)_@see NotificationListenerBean;public void setNotificationListeners(NotificationListenerBean... notificationListeners) {_		this.notificationListeners = notificationListeners__	};set,the,link,notification,listener,bean,notification,listener,beans,containing,the,link,javax,management,notification,listener,notification,listeners,that,will,be,registered,with,the,link,mbean,server,see,set,notification,listener,mappings,java,util,map,see,notification,listener,bean;public,void,set,notification,listeners,notification,listener,bean,notification,listeners,this,notification,listeners,notification,listeners
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1498780456;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1502974979;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)__						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,lazy,init,this,bean,factory,get,bean,bean,name,null,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1503007895;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1517867511;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1519295386;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,bean,names,add,all,arrays,as,list,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,bean,names,add,all,arrays,as,list,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1519514499;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames())__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames())__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,collections,add,all,bean,names,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,collections,add,all,bean,names,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1530174524;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames())__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames())__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isInfoEnabled()) {_								logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,collections,add,all,bean,names,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,collections,add,all,bean,names,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,info,enabled,logger,info,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1532091916;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames())__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames())__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,collections,add,all,bean,names,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,collections,add,all,bean,names,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,trace,enabled,logger,trace,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1542613849;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames())__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames())__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,collections,add,all,bean,names,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,collections,add,all,bean,names,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,trace,enabled,logger,trace,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> private void autodetect(Map<String, Object> beans, AutodetectCallback callback);1544613374;Performs the actual autodetection process, delegating to an_{@code AutodetectCallback} instance to vote on the inclusion of a_given bean._@param callback the {@code AutodetectCallback} to use when deciding_whether to include a bean or not;private void autodetect(Map<String, Object> beans, AutodetectCallback callback) {_		Assert.state(this.beanFactory != null, "No BeanFactory set")__		Set<String> beanNames = new LinkedHashSet<>(this.beanFactory.getBeanDefinitionCount())__		Collections.addAll(beanNames, this.beanFactory.getBeanDefinitionNames())__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			Collections.addAll(beanNames, ((ConfigurableBeanFactory) this.beanFactory).getSingletonNames())__		}__		for (String beanName : beanNames) {_			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {_				try {_					Class<?> beanClass = this.beanFactory.getType(beanName)__					if (beanClass != null && callback.include(beanClass, beanName)) {_						boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)__						Object beanInstance = null__						if (!lazyInit) {_							beanInstance = this.beanFactory.getBean(beanName)__							if (!beanClass.isInstance(beanInstance)) {_								continue__							}_						}_						if (!ScopedProxyUtils.isScopedTarget(beanName) && !beans.containsValue(beanName) &&_								(beanInstance == null ||_										!CollectionUtils.containsInstance(beans.values(), beanInstance))) {_							_							beans.put(beanName, (beanInstance != null ? beanInstance : beanName))__							if (logger.isDebugEnabled()) {_								logger.debug("Bean with name '" + beanName + "' has been autodetected for JMX exposure")__							}_						}_						else {_							if (logger.isTraceEnabled()) {_								logger.trace("Bean with name '" + beanName + "' is already registered for JMX exposure")__							}_						}_					}_				}_				catch (CannotLoadBeanClassException ex) {_					if (this.allowEagerInit) {_						throw ex__					}_					_				}_			}_		}_	};performs,the,actual,autodetection,process,delegating,to,an,code,autodetect,callback,instance,to,vote,on,the,inclusion,of,a,given,bean,param,callback,the,code,autodetect,callback,to,use,when,deciding,whether,to,include,a,bean,or,not;private,void,autodetect,map,string,object,beans,autodetect,callback,callback,assert,state,this,bean,factory,null,no,bean,factory,set,set,string,bean,names,new,linked,hash,set,this,bean,factory,get,bean,definition,count,collections,add,all,bean,names,this,bean,factory,get,bean,definition,names,if,this,bean,factory,instanceof,configurable,bean,factory,collections,add,all,bean,names,configurable,bean,factory,this,bean,factory,get,singleton,names,for,string,bean,name,bean,names,if,is,excluded,bean,name,is,bean,definition,abstract,this,bean,factory,bean,name,try,class,bean,class,this,bean,factory,get,type,bean,name,if,bean,class,null,callback,include,bean,class,bean,name,boolean,lazy,init,is,bean,definition,lazy,init,this,bean,factory,bean,name,object,bean,instance,null,if,lazy,init,bean,instance,this,bean,factory,get,bean,bean,name,if,bean,class,is,instance,bean,instance,continue,if,scoped,proxy,utils,is,scoped,target,bean,name,beans,contains,value,bean,name,bean,instance,null,collection,utils,contains,instance,beans,values,bean,instance,beans,put,bean,name,bean,instance,null,bean,instance,bean,name,if,logger,is,debug,enabled,logger,debug,bean,with,name,bean,name,has,been,autodetected,for,jmx,exposure,else,if,logger,is,trace,enabled,logger,trace,bean,with,name,bean,name,is,already,registered,for,jmx,exposure,catch,cannot,load,bean,class,exception,ex,if,this,allow,eager,init,throw,ex
MBeanExporter -> public void addExcludedBean(String excludedBean);1423471263;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1461047077;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1467730834;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1467808333;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1482159779;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1495868221;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1496242568;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1496259743;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1496837955;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1497250713;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1497341397;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1498780456;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1502974979;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1503007895;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1517867511;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1519295386;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1519514499;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1530174524;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1532091916;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1542613849;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> public void addExcludedBean(String excludedBean);1544613374;Add the name of bean that should be excluded from autodetection.;public void addExcludedBean(String excludedBean) {_		Assert.notNull(excludedBean, "ExcludedBean must not be null")__		this.excludedBeans.add(excludedBean)__	};add,the,name,of,bean,that,should,be,excluded,from,autodetection;public,void,add,excluded,bean,string,excluded,bean,assert,not,null,excluded,bean,excluded,bean,must,not,be,null,this,excluded,beans,add,excluded,bean
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1328020251;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or <code>null</code> if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,code,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1356735495;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1357119239;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1368482696;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1385412762;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<Object> ifc = (Class<Object>) JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = (Class<Object>) JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,object,ifc,class,object,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,class,object,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1402388547;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<Object> ifc = (Class<Object>) JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = (Class<Object>) JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,object,ifc,class,object,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,class,object,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1403790940;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<Object> ifc = (Class<Object>) JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = (Class<Object>) JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,object,ifc,class,object,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,class,object,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1404769827;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<Object> ifc = (Class<Object>) JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!(ifc.isInstance(bean))) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ifc, true)__			}_			else {_				ifc = (Class<Object>) JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!(ifc.isInstance(bean))) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ifc)__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,object,ifc,class,object,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,true,else,ifc,class,object,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1404773971;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1405000116;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1413819738;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1414702639;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1419347032;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1423471263;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1461047077;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1467730834;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1467808333;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1482159779;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1356735495;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1368482696;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1385412762;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1402388547;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1403790940;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1404769827;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1404773971;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1405000116;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1413819738;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1414702639;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1419347032;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1423471263;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1461047077;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1467730834;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1467808333;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1482159779;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1495868221;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496242568;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496259743;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496837955;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1497250713;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1497341397;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1498780456;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1502974979;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1503007895;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1517867511;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1519295386;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1519514499;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,info,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1532091916;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.debug("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,debug,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1542613849;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.debug("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,debug,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1544613374;This callback is only required for resolution of bean names in the_{@link #setBeans(java.util.Map) "beans"} {@link Map} and for_autodetection of MBeans (in the latter case, a_{@code ListableBeanFactory} is required)._@see #setBeans_@see #setAutodetect;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (beanFactory instanceof ListableBeanFactory) {_			this.beanFactory = (ListableBeanFactory) beanFactory__		}_		else {_			logger.debug("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.")__		}_	};this,callback,is,only,required,for,resolution,of,bean,names,in,the,link,set,beans,java,util,map,beans,link,map,and,for,autodetection,of,mbeans,in,the,latter,case,a,code,listable,bean,factory,is,required,see,set,beans,see,set,autodetect;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,listable,bean,factory,this,bean,factory,listable,bean,factory,bean,factory,else,logger,debug,mbean,exporter,not,running,in,a,listable,bean,factory,autodetection,of,mbeans,not,available
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1496837955;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1497250713;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1497341397;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1498780456;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1502974979;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1503007895;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1517867511;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1519295386;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1519514499;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1530174524;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1532091916;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1542613849;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> protected boolean isMBean(@Nullable Class<?> beanClass);1544613374;Determine whether the given bean class qualifies as an MBean as-is._<p>The default implementation delegates to {@link JmxUtils#isMBean},_which checks for {@link javax.management.DynamicMBean} classes as well_as classes with corresponding "*MBean" interface (Standard MBeans)_or corresponding "*MXBean" interface (Java 6 MXBeans)._@param beanClass the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.support.JmxUtils#isMBean(Class);protected boolean isMBean(@Nullable Class<?> beanClass) {_		return JmxUtils.isMBean(beanClass)__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,the,default,implementation,delegates,to,link,jmx,utils,is,mbean,which,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,bean,class,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,support,jmx,utils,is,mbean,class;protected,boolean,is,mbean,nullable,class,bean,class,return,jmx,utils,is,mbean,bean,class
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1403790940;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1404769827;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1404773971;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1405000116;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1413819738;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1414702639;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1419347032;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1423471263;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1461047077;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1467730834;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1467808333;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1482159779;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1495868221;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1496242568;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1496259743;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1496837955;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1497250713;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1497341397;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1498780456;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1502974979;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1503007895;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1517867511;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1519295386;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1519514499;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1530174524;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1532091916;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1542613849;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener... listeners);1544613374;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener... listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1328020251;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed <code>Class</code>._<p>The default value is <code>true</code>._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,code,p,the,default,value,is,code,true,code,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1356735495;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1357119239;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1368482696;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1385412762;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1402388547;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1403790940;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1404769827;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1404773971;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1405000116;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1413819738;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1414702639;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1419347032;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1423471263;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1461047077;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1467730834;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1467808333;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1482159779;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1495868221;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1496242568;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1496259743;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1496837955;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1497250713;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1497341397;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1498780456;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1502974979;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1503007895;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1517867511;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1519295386;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1519514499;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1530174524;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1532091916;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1542613849;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames);1544613374;Indicates whether Spring should ensure that {@link ObjectName ObjectNames}_generated by the configured {@link ObjectNamingStrategy} for_runtime-registered MBeans ({@link #registerManagedResource}) should get_modified: to ensure uniqueness for every instance of a managed {@code Class}._<p>The default value is {@code true}._@see #registerManagedResource_@see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object);public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {_		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames__	};indicates,whether,spring,should,ensure,that,link,object,name,object,names,generated,by,the,configured,link,object,naming,strategy,for,runtime,registered,mbeans,link,register,managed,resource,should,get,modified,to,ensure,uniqueness,for,every,instance,of,a,managed,code,class,p,the,default,value,is,code,true,see,register,managed,resource,see,jmx,utils,append,identity,to,object,name,javax,management,object,name,object;public,void,set,ensure,unique,runtime,object,names,boolean,ensure,unique,runtime,object,names,this,ensure,unique,runtime,object,names,ensure,unique,runtime,object,names
MBeanExporter -> private void unregisterNotificationListeners();1328020251;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1356735495;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1357119239;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1368482696;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1385412762;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1402388547;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1403790940;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1404769827;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1404773971;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1405000116;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1413819738;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1414702639;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1419347032;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1423471263;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1461047077;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1467730834;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1467808333;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Exception ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1482159779;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1495868221;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1496242568;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1496259743;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1496837955;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		for (Map.Entry<NotificationListenerBean, ObjectName[]> entry : this.registeredNotificationListeners.entrySet()) {_			NotificationListenerBean bean = entry.getKey()__			ObjectName[] mappedObjectNames = entry.getValue()__			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,for,map,entry,notification,listener,bean,object,name,entry,this,registered,notification,listeners,entry,set,notification,listener,bean,bean,entry,get,key,object,name,mapped,object,names,entry,get,value,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1497250713;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		})__		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1497341397;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_			for (ObjectName mappedObjectName : mappedObjectNames) {_				try {_					this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_							bean.getNotificationFilter(), bean.getHandback())__				}_				catch (Throwable ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unable to unregister NotificationListener", ex)__					}_				}_			}_		})__		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1498780456;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1502974979;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1503007895;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1517867511;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1519295386;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1519514499;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1530174524;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1532091916;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1542613849;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void unregisterNotificationListeners();1544613374;Unregister the configured {@link NotificationListener NotificationListeners}_from the {@link MBeanServer}.;private void unregisterNotificationListeners() {_		if (this.server != null) {_			this.registeredNotificationListeners.forEach((bean, mappedObjectNames) -> {_				for (ObjectName mappedObjectName : mappedObjectNames) {_					try {_						this.server.removeNotificationListener(mappedObjectName, bean.getNotificationListener(),_								bean.getNotificationFilter(), bean.getHandback())__					}_					catch (Throwable ex) {_						if (logger.isDebugEnabled()) {_							logger.debug("Unable to unregister NotificationListener", ex)__						}_					}_				}_			})__		}_		this.registeredNotificationListeners.clear()__	};unregister,the,configured,link,notification,listener,notification,listeners,from,the,link,mbean,server;private,void,unregister,notification,listeners,if,this,server,null,this,registered,notification,listeners,for,each,bean,mapped,object,names,for,object,name,mapped,object,name,mapped,object,names,try,this,server,remove,notification,listener,mapped,object,name,bean,get,notification,listener,bean,get,notification,filter,bean,get,handback,catch,throwable,ex,if,logger,is,debug,enabled,logger,debug,unable,to,unregister,notification,listener,ex,this,registered,notification,listeners,clear
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName);1496837955;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName) {_		if (objectName != null && this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,nullable,object,name,object,name,if,object,name,null,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName);1497250713;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName) {_		if (objectName != null && this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,nullable,object,name,object,name,if,object,name,null,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName);1497341397;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName) {_		if (objectName != null && this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,nullable,object,name,object,name,if,object,name,null,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName);1498780456;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName) {_		if (objectName != null && this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,nullable,object,name,object,name,if,object,name,null,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName);1502974979;Replaces any bean names used as keys in the {@code NotificationListener}_mappings with their corresponding {@code ObjectName} values._@param beanName the name of the bean to be registered_@param objectName the {@code ObjectName} under which the bean will be registered_with the {@code MBeanServer};private void replaceNotificationListenerBeanNameKeysIfNecessary(String beanName, @Nullable ObjectName objectName) {_		if (objectName != null && this.notificationListeners != null) {_			for (NotificationListenerBean notificationListener : this.notificationListeners) {_				notificationListener.replaceObjectName(beanName, objectName)__			}_		}_	};replaces,any,bean,names,used,as,keys,in,the,code,notification,listener,mappings,with,their,corresponding,code,object,name,values,param,bean,name,the,name,of,the,bean,to,be,registered,param,object,name,the,code,object,name,under,which,the,bean,will,be,registered,with,the,code,mbean,server;private,void,replace,notification,listener,bean,name,keys,if,necessary,string,bean,name,nullable,object,name,object,name,if,object,name,null,this,notification,listeners,null,for,notification,listener,bean,notification,listener,this,notification,listeners,notification,listener,replace,object,name,bean,name,object,name
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1495868221;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1496242568;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1496259743;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1496837955;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1497250713;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1497341397;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1498780456;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1502974979;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1503007895;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1517867511;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1519295386;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1519514499;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1530174524;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1532091916;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1542613849;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> @SuppressWarnings("unchecked") 	@Nullable 	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException;1544613374;Build an adapted MBean for the given bean instance, if possible._<p>The default implementation builds a JMX 1.2 StandardMBean_for the target's MBean/MXBean interface in case of an AOP proxy,_delegating the interface's management operations to the proxy._@param bean the original bean instance_@return the adapted MBean, or {@code null} if not possible;@SuppressWarnings("unchecked")_	@Nullable_	protected DynamicMBean adaptMBeanIfPossible(Object bean) throws JMException {_		Class<?> targetClass = AopUtils.getTargetClass(bean)__		if (targetClass != bean.getClass()) {_			Class<?> ifc = JmxUtils.getMXBeanInterface(targetClass)__			if (ifc != null) {_				if (!ifc.isInstance(bean)) {_					throw new NotCompliantMBeanException("Managed bean [" + bean +_							"] has a target class with an MXBean interface but does not expose it in the proxy")__				}_				return new StandardMBean(bean, ((Class<Object>) ifc), true)__			}_			else {_				ifc = JmxUtils.getMBeanInterface(targetClass)__				if (ifc != null) {_					if (!ifc.isInstance(bean)) {_						throw new NotCompliantMBeanException("Managed bean [" + bean +_								"] has a target class with an MBean interface but does not expose it in the proxy")__					}_					return new StandardMBean(bean, ((Class<Object>) ifc))__				}_			}_		}_		return null__	};build,an,adapted,mbean,for,the,given,bean,instance,if,possible,p,the,default,implementation,builds,a,jmx,1,2,standard,mbean,for,the,target,s,mbean,mxbean,interface,in,case,of,an,aop,proxy,delegating,the,interface,s,management,operations,to,the,proxy,param,bean,the,original,bean,instance,return,the,adapted,mbean,or,code,null,if,not,possible;suppress,warnings,unchecked,nullable,protected,dynamic,mbean,adapt,mbean,if,possible,object,bean,throws,jmexception,class,target,class,aop,utils,get,target,class,bean,if,target,class,bean,get,class,class,ifc,jmx,utils,get,mxbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mxbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,true,else,ifc,jmx,utils,get,mbean,interface,target,class,if,ifc,null,if,ifc,is,instance,bean,throw,new,not,compliant,mbean,exception,managed,bean,bean,has,a,target,class,with,an,mbean,interface,but,does,not,expose,it,in,the,proxy,return,new,standard,mbean,bean,class,object,ifc,return,null
MBeanExporter -> AutodetectCallback -> boolean include(Class beanClass, String beanName)_;1328020251;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class beanClass, String beanName)_;1356735495;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class beanClass, String beanName)_;1357119239;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> AutodetectCallback -> boolean include(Class beanClass, String beanName)_;1368482696;Called during the autodetection process to decide whether_or not a bean should be included._@param beanClass the class of the bean_@param beanName the name of the bean;boolean include(Class beanClass, String beanName)_;called,during,the,autodetection,process,to,decide,whether,or,not,a,bean,should,be,included,param,bean,class,the,class,of,the,bean,param,bean,name,the,name,of,the,bean;boolean,include,class,bean,class,string,bean,name
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1328020251;Create an instance of a class that implements <code>ModelMBean</code>._<p>This method is called to obtain a <code>ModelMBean</code> instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of <code>ModelMBean</code>_@return a new instance of a class that implements <code>ModelMBean</code>_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,code,p,this,method,is,called,to,obtain,a,code,model,mbean,code,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,code,return,a,new,instance,of,a,class,that,implements,code,model,mbean,code,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1356735495;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1357119239;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1368482696;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1385412762;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1402388547;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1403790940;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1404769827;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1404773971;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1405000116;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1413819738;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1414702639;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1419347032;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1423471263;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1461047077;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1467730834;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1467808333;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1482159779;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1495868221;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1496242568;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1496259743;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1496837955;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1497250713;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1497341397;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1498780456;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1502974979;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1503007895;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1517867511;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1519295386;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1519514499;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1530174524;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1532091916;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1542613849;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> protected ModelMBean createModelMBean() throws MBeanException;1544613374;Create an instance of a class that implements {@code ModelMBean}._<p>This method is called to obtain a {@code ModelMBean} instance to_use when registering a bean. This method is called once per bean during the_registration phase and must return a new instance of {@code ModelMBean}_@return a new instance of a class that implements {@code ModelMBean}_@throws javax.management.MBeanException if creation of the ModelMBean failed;protected ModelMBean createModelMBean() throws MBeanException {_		return (this.exposeManagedResourceClassLoader ? new SpringModelMBean() : new RequiredModelMBean())__	};create,an,instance,of,a,class,that,implements,code,model,mbean,p,this,method,is,called,to,obtain,a,code,model,mbean,instance,to,use,when,registering,a,bean,this,method,is,called,once,per,bean,during,the,registration,phase,and,must,return,a,new,instance,of,code,model,mbean,return,a,new,instance,of,a,class,that,implements,code,model,mbean,throws,javax,management,mbean,exception,if,creation,of,the,model,mbean,failed;protected,model,mbean,create,model,mbean,throws,mbean,exception,return,this,expose,managed,resource,class,loader,new,spring,model,mbean,new,required,model,mbean
MBeanExporter -> public void setExcludedBeans(String[] excludedBeans);1328020251;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String[] excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String[] excludedBeans);1356735495;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String[] excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String[] excludedBeans);1357119239;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String[] excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String[] excludedBeans);1368482696;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String[] excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String[] excludedBeans);1385412762;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String[] excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> public void setExcludedBeans(String[] excludedBeans);1402388547;Set the list of names for beans that should be excluded from autodetection.;public void setExcludedBeans(String[] excludedBeans) {_		this.excludedBeans = (excludedBeans != null ? new HashSet<String>(Arrays.asList(excludedBeans)) : null)__	};set,the,list,of,names,for,beans,that,should,be,excluded,from,autodetection;public,void,set,excluded,beans,string,excluded,beans,this,excluded,beans,excluded,beans,null,new,hash,set,string,arrays,as,list,excluded,beans,null
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1328020251;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1356735495;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1357119239;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1368482696;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1385412762;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1402388547;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1403790940;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1404769827;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1404773971;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1405000116;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1413819738;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1414702639;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1419347032;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1423471263;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1461047077;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1467730834;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1467808333;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1482159779;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1495868221;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1496242568;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1496259743;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1496837955;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1497250713;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1497341397;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1498780456;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1502974979;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1503007895;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1517867511;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1519295386;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1519514499;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1530174524;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1532091916;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> private void injectNotificationPublisherIfNecessary( 			Object managedResource, ModelMBean modelMBean, ObjectName objectName);1542613849;If the supplied managed resource implements the {@link NotificationPublisherAware} an instance of_{@link org.springframework.jmx.export.notification.NotificationPublisher} is injected.;private void injectNotificationPublisherIfNecessary(_			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {__		if (managedResource instanceof NotificationPublisherAware) {_			((NotificationPublisherAware) managedResource).setNotificationPublisher(_					new ModelMBeanNotificationPublisher(modelMBean, objectName, managedResource))__		}_	};if,the,supplied,managed,resource,implements,the,link,notification,publisher,aware,an,instance,of,link,org,springframework,jmx,export,notification,notification,publisher,is,injected;private,void,inject,notification,publisher,if,necessary,object,managed,resource,model,mbean,model,mbean,object,name,object,name,if,managed,resource,instanceof,notification,publisher,aware,notification,publisher,aware,managed,resource,set,notification,publisher,new,model,mbean,notification,publisher,model,mbean,object,name,managed,resource
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1328020251;Set the implementation of the <code>ObjectNamingStrategy</code> interface_to use for this exporter. Default is a <code>KeyNamingStrategy</code>._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,code,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,code,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1356735495;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1357119239;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1368482696;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1385412762;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1402388547;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1403790940;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1404769827;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1404773971;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1405000116;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1413819738;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1414702639;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1419347032;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1423471263;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1461047077;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1467730834;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1467808333;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1482159779;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1495868221;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1496242568;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1496259743;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1496837955;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1497250713;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1497341397;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1498780456;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1502974979;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1503007895;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1517867511;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1519295386;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1519514499;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1530174524;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1532091916;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1542613849;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setNamingStrategy(ObjectNamingStrategy namingStrategy);1544613374;Set the implementation of the {@code ObjectNamingStrategy} interface_to use for this exporter. Default is a {@code KeyNamingStrategy}._@see org.springframework.jmx.export.naming.KeyNamingStrategy_@see org.springframework.jmx.export.naming.MetadataNamingStrategy;public void setNamingStrategy(ObjectNamingStrategy namingStrategy) {_		this.namingStrategy = namingStrategy__	};set,the,implementation,of,the,code,object,naming,strategy,interface,to,use,for,this,exporter,default,is,a,code,key,naming,strategy,see,org,springframework,jmx,export,naming,key,naming,strategy,see,org,springframework,jmx,export,naming,metadata,naming,strategy;public,void,set,naming,strategy,object,naming,strategy,naming,strategy,this,naming,strategy,naming,strategy
MBeanExporter -> public void setListeners(MBeanExporterListener[] listeners);1328020251;Set the <code>MBeanExporterListener</code>s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener[] listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,code,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener[] listeners);1356735495;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener[] listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener[] listeners);1357119239;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener[] listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener[] listeners);1368482696;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener[] listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener[] listeners);1385412762;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener[] listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void setListeners(MBeanExporterListener[] listeners);1402388547;Set the {@code MBeanExporterListener}s that should be notified_of MBean registration and unregistration events._@see MBeanExporterListener;public void setListeners(MBeanExporterListener[] listeners) {_		this.listeners = listeners__	};set,the,code,mbean,exporter,listener,s,that,should,be,notified,of,mbean,registration,and,unregistration,events,see,mbean,exporter,listener;public,void,set,listeners,mbean,exporter,listener,listeners,this,listeners,listeners
MBeanExporter -> public void destroy();1328020251;Unregisters all beans that this exported has exposed via JMX_when the enclosing <code>ApplicationContext</code> is destroyed.;public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,code,is,destroyed;public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> public void destroy();1357119239;Unregisters all beans that this exported has exposed via JMX_when the enclosing {@code ApplicationContext} is destroyed.;public void destroy() {_		logger.info("Unregistering JMX-exposed beans on shutdown")__		unregisterNotificationListeners()__		unregisterBeans()__	};unregisters,all,beans,that,this,exported,has,exposed,via,jmx,when,the,enclosing,code,application,context,is,destroyed;public,void,destroy,logger,info,unregistering,jmx,exposed,beans,on,shutdown,unregister,notification,listeners,unregister,beans
MBeanExporter -> public void setPhase(int phase);1402388547;Specify the phase in which the MBeans should be exported to the_JMX domain. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is {@code Integer.MAX_VALUE} meaning that MBeans are exported_as late as possible and removed from the domain as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,mbeans,should,be,exported,to,the,jmx,domain,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,mbeans,are,exported,as,late,as,possible,and,removed,from,the,domain,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
MBeanExporter -> public void setPhase(int phase);1403790940;Specify the phase in which the MBeans should be exported to the_JMX domain. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is {@code Integer.MAX_VALUE} meaning that MBeans are exported_as late as possible and removed from the domain as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,mbeans,should,be,exported,to,the,jmx,domain,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,mbeans,are,exported,as,late,as,possible,and,removed,from,the,domain,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
