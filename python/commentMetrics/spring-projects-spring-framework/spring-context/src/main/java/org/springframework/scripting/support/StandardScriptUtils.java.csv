# id;timestamp;commentText;codeText;commentWords;codeWords
StandardScriptUtils -> public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName);1443040655;Retrieve a {@link ScriptEngine} from the given {@link ScriptEngineManager}_by name, delegating to {@link ScriptEngineManager#getEngineByName} but_throwing a descriptive exception if not found or if initialization failed._@param scriptEngineManager the ScriptEngineManager to use_@param engineName the name of the engine_@return a corresponding ScriptEngine (never {@code null})_@throws IllegalArgumentException if no matching engine has been found_@throws IllegalStateException if no matching engine has been found or if;public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName) {_		ScriptEngine engine = scriptEngineManager.getEngineByName(engineName)__		if (engine == null) {_			Set<String> engineNames = new LinkedHashSet<String>()__			for (ScriptEngineFactory engineFactory : scriptEngineManager.getEngineFactories()) {_				List<String> factoryNames = engineFactory.getNames()__				if (factoryNames.contains(engineName)) {_					_					_					_					try {_						engine = engineFactory.getScriptEngine()__						engine.setBindings(scriptEngineManager.getBindings(), ScriptContext.GLOBAL_SCOPE)__					}_					catch (Throwable ex) {_						throw new IllegalStateException("Script engine with name '" + engineName +_								"' failed to initialize", ex)__					}_				}_				engineNames.addAll(factoryNames)__			}_			throw new IllegalArgumentException("Script engine with name '" + engineName +_					"' not found_ registered engine names: " + engineNames)__		}_		return engine__	};retrieve,a,link,script,engine,from,the,given,link,script,engine,manager,by,name,delegating,to,link,script,engine,manager,get,engine,by,name,but,throwing,a,descriptive,exception,if,not,found,or,if,initialization,failed,param,script,engine,manager,the,script,engine,manager,to,use,param,engine,name,the,name,of,the,engine,return,a,corresponding,script,engine,never,code,null,throws,illegal,argument,exception,if,no,matching,engine,has,been,found,throws,illegal,state,exception,if,no,matching,engine,has,been,found,or,if;public,static,script,engine,retrieve,engine,by,name,script,engine,manager,script,engine,manager,string,engine,name,script,engine,engine,script,engine,manager,get,engine,by,name,engine,name,if,engine,null,set,string,engine,names,new,linked,hash,set,string,for,script,engine,factory,engine,factory,script,engine,manager,get,engine,factories,list,string,factory,names,engine,factory,get,names,if,factory,names,contains,engine,name,try,engine,engine,factory,get,script,engine,engine,set,bindings,script,engine,manager,get,bindings,script,context,catch,throwable,ex,throw,new,illegal,state,exception,script,engine,with,name,engine,name,failed,to,initialize,ex,engine,names,add,all,factory,names,throw,new,illegal,argument,exception,script,engine,with,name,engine,name,not,found,registered,engine,names,engine,names,return,engine
StandardScriptUtils -> public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName);1443047594;Retrieve a {@link ScriptEngine} from the given {@link ScriptEngineManager}_by name, delegating to {@link ScriptEngineManager#getEngineByName} but_throwing a descriptive exception if not found or if initialization failed._@param scriptEngineManager the ScriptEngineManager to use_@param engineName the name of the engine_@return a corresponding ScriptEngine (never {@code null})_@throws IllegalArgumentException if no matching engine has been found_@throws IllegalStateException if the desired engine failed to initialize;public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName) {_		ScriptEngine engine = scriptEngineManager.getEngineByName(engineName)__		if (engine == null) {_			Set<String> engineNames = new LinkedHashSet<String>()__			for (ScriptEngineFactory engineFactory : scriptEngineManager.getEngineFactories()) {_				List<String> factoryNames = engineFactory.getNames()__				if (factoryNames.contains(engineName)) {_					_					_					_					try {_						engine = engineFactory.getScriptEngine()__						engine.setBindings(scriptEngineManager.getBindings(), ScriptContext.GLOBAL_SCOPE)__					}_					catch (Throwable ex) {_						throw new IllegalStateException("Script engine with name '" + engineName +_								"' failed to initialize", ex)__					}_				}_				engineNames.addAll(factoryNames)__			}_			throw new IllegalArgumentException("Script engine with name '" + engineName +_					"' not found_ registered engine names: " + engineNames)__		}_		return engine__	};retrieve,a,link,script,engine,from,the,given,link,script,engine,manager,by,name,delegating,to,link,script,engine,manager,get,engine,by,name,but,throwing,a,descriptive,exception,if,not,found,or,if,initialization,failed,param,script,engine,manager,the,script,engine,manager,to,use,param,engine,name,the,name,of,the,engine,return,a,corresponding,script,engine,never,code,null,throws,illegal,argument,exception,if,no,matching,engine,has,been,found,throws,illegal,state,exception,if,the,desired,engine,failed,to,initialize;public,static,script,engine,retrieve,engine,by,name,script,engine,manager,script,engine,manager,string,engine,name,script,engine,engine,script,engine,manager,get,engine,by,name,engine,name,if,engine,null,set,string,engine,names,new,linked,hash,set,string,for,script,engine,factory,engine,factory,script,engine,manager,get,engine,factories,list,string,factory,names,engine,factory,get,names,if,factory,names,contains,engine,name,try,engine,engine,factory,get,script,engine,engine,set,bindings,script,engine,manager,get,bindings,script,context,catch,throwable,ex,throw,new,illegal,state,exception,script,engine,with,name,engine,name,failed,to,initialize,ex,engine,names,add,all,factory,names,throw,new,illegal,argument,exception,script,engine,with,name,engine,name,not,found,registered,engine,names,engine,names,return,engine
StandardScriptUtils -> public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName);1467730834;Retrieve a {@link ScriptEngine} from the given {@link ScriptEngineManager}_by name, delegating to {@link ScriptEngineManager#getEngineByName} but_throwing a descriptive exception if not found or if initialization failed._@param scriptEngineManager the ScriptEngineManager to use_@param engineName the name of the engine_@return a corresponding ScriptEngine (never {@code null})_@throws IllegalArgumentException if no matching engine has been found_@throws IllegalStateException if the desired engine failed to initialize;public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName) {_		ScriptEngine engine = scriptEngineManager.getEngineByName(engineName)__		if (engine == null) {_			Set<String> engineNames = new LinkedHashSet<>()__			for (ScriptEngineFactory engineFactory : scriptEngineManager.getEngineFactories()) {_				List<String> factoryNames = engineFactory.getNames()__				if (factoryNames.contains(engineName)) {_					_					_					_					try {_						engine = engineFactory.getScriptEngine()__						engine.setBindings(scriptEngineManager.getBindings(), ScriptContext.GLOBAL_SCOPE)__					}_					catch (Throwable ex) {_						throw new IllegalStateException("Script engine with name '" + engineName +_								"' failed to initialize", ex)__					}_				}_				engineNames.addAll(factoryNames)__			}_			throw new IllegalArgumentException("Script engine with name '" + engineName +_					"' not found_ registered engine names: " + engineNames)__		}_		return engine__	};retrieve,a,link,script,engine,from,the,given,link,script,engine,manager,by,name,delegating,to,link,script,engine,manager,get,engine,by,name,but,throwing,a,descriptive,exception,if,not,found,or,if,initialization,failed,param,script,engine,manager,the,script,engine,manager,to,use,param,engine,name,the,name,of,the,engine,return,a,corresponding,script,engine,never,code,null,throws,illegal,argument,exception,if,no,matching,engine,has,been,found,throws,illegal,state,exception,if,the,desired,engine,failed,to,initialize;public,static,script,engine,retrieve,engine,by,name,script,engine,manager,script,engine,manager,string,engine,name,script,engine,engine,script,engine,manager,get,engine,by,name,engine,name,if,engine,null,set,string,engine,names,new,linked,hash,set,for,script,engine,factory,engine,factory,script,engine,manager,get,engine,factories,list,string,factory,names,engine,factory,get,names,if,factory,names,contains,engine,name,try,engine,engine,factory,get,script,engine,engine,set,bindings,script,engine,manager,get,bindings,script,context,catch,throwable,ex,throw,new,illegal,state,exception,script,engine,with,name,engine,name,failed,to,initialize,ex,engine,names,add,all,factory,names,throw,new,illegal,argument,exception,script,engine,with,name,engine,name,not,found,registered,engine,names,engine,names,return,engine
