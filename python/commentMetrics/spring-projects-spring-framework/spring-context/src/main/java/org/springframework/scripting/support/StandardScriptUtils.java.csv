commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;26;/**  * Retrieve a {@link ScriptEngine} from the given {@link ScriptEngineManager}  * by name, delegating to {@link ScriptEngineManager#getEngineByName} but  * throwing a descriptive exception if not found or if initialization failed.  * @param scriptEngineManager the ScriptEngineManager to use  * @param engineName the name of the engine  * @return a corresponding ScriptEngine (never {@code null})  * @throws IllegalArgumentException if no matching engine has been found  * @throws IllegalStateException if the desired engine failed to initialize  */ ;/**  * Retrieve a {@link ScriptEngine} from the given {@link ScriptEngineManager}  * by name, delegating to {@link ScriptEngineManager#getEngineByName} but  * throwing a descriptive exception if not found or if initialization failed.  * @param scriptEngineManager the ScriptEngineManager to use  * @param engineName the name of the engine  * @return a corresponding ScriptEngine (never {@code null})  * @throws IllegalArgumentException if no matching engine has been found  * @throws IllegalStateException if the desired engine failed to initialize  */ public static ScriptEngine retrieveEngineByName(ScriptEngineManager scriptEngineManager, String engineName) {     ScriptEngine engine = scriptEngineManager.getEngineByName(engineName).     if (engine == null) {         Set<String> engineNames = new LinkedHashSet<>().         for (ScriptEngineFactory engineFactory : scriptEngineManager.getEngineFactories()) {             List<String> factoryNames = engineFactory.getNames().             if (factoryNames.contains(engineName)) {                 // If it happens to initialize fine now, alright, but we really expect an exception.                 try {                     engine = engineFactory.getScriptEngine().                     engine.setBindings(scriptEngineManager.getBindings(), ScriptContext.GLOBAL_SCOPE).                 } catch (Throwable ex) {                     throw new IllegalStateException("Script engine with name '" + engineName + "' failed to initialize", ex).                 }             }             engineNames.addAll(factoryNames).         }         throw new IllegalArgumentException("Script engine with name '" + engineName + "' not found. registered engine names: " + engineNames).     }     return engine. }
false;static;1;3;;static Bindings getBindings(Map<String, Object> bindings) {     return (bindings instanceof Bindings ? (Bindings) bindings : new SimpleBindings(bindings)). }
