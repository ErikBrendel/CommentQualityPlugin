commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return JndiObjectFactoryBean.class. }
false;protected;1;5;;@Override protected boolean isEligibleAttribute(String attributeName) {     return (super.isEligibleAttribute(attributeName) && !DEFAULT_VALUE.equals(attributeName) && !DEFAULT_REF.equals(attributeName)). }
false;protected;3;17;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     super.doParse(element, parserContext, builder).     String defaultValue = element.getAttribute(DEFAULT_VALUE).     String defaultRef = element.getAttribute(DEFAULT_REF).     if (StringUtils.hasLength(defaultValue)) {         if (StringUtils.hasLength(defaultRef)) {             parserContext.getReaderContext().error("<jndi-lookup> element is only allowed to contain either " + "'default-value' attribute OR 'default-ref' attribute, not both", element).         }         builder.addPropertyValue(DEFAULT_OBJECT, defaultValue).     } else if (StringUtils.hasLength(defaultRef)) {         builder.addPropertyValue(DEFAULT_OBJECT, new RuntimeBeanReference(defaultRef)).     } }
