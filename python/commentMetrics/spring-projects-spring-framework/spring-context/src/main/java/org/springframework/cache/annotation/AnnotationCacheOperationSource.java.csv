commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override @Nullable protected Collection<CacheOperation> findCacheOperations(Class<?> clazz) {     return determineCacheOperations(parser -> parser.parseCacheAnnotations(clazz)). }
false;protected;1;5;;@Override @Nullable protected Collection<CacheOperation> findCacheOperations(Method method) {     return determineCacheOperations(parser -> parser.parseCacheAnnotations(method)). }
true;protected;1;19;/**  * Determine the cache operation(s) for the given {@link CacheOperationProvider}.  * <p>This implementation delegates to configured  * {@link CacheAnnotationParser CacheAnnotationParsers}  * for parsing known annotations into Spring's metadata attribute class.  * <p>Can be overridden to support custom annotations that carry caching metadata.  * @param provider the cache operation provider to use  * @return the configured caching operations, or {@code null} if none found  */ ;/**  * Determine the cache operation(s) for the given {@link CacheOperationProvider}.  * <p>This implementation delegates to configured  * {@link CacheAnnotationParser CacheAnnotationParsers}  * for parsing known annotations into Spring's metadata attribute class.  * <p>Can be overridden to support custom annotations that carry caching metadata.  * @param provider the cache operation provider to use  * @return the configured caching operations, or {@code null} if none found  */ @Nullable protected Collection<CacheOperation> determineCacheOperations(CacheOperationProvider provider) {     Collection<CacheOperation> ops = null.     for (CacheAnnotationParser annotationParser : this.annotationParsers) {         Collection<CacheOperation> annOps = provider.getCacheOperations(annotationParser).         if (annOps != null) {             if (ops == null) {                 ops = annOps.             } else {                 Collection<CacheOperation> combined = new ArrayList<>(ops.size() + annOps.size()).                 combined.addAll(ops).                 combined.addAll(annOps).                 ops = combined.             }         }     }     return ops. }
true;protected;0;4;/**  * By default, only public methods can be made cacheable.  */ ;/**  * By default, only public methods can be made cacheable.  */ @Override protected boolean allowPublicMethodsOnly() {     return this.publicMethodsOnly. }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof AnnotationCacheOperationSource)) {         return false.     }     AnnotationCacheOperationSource otherCos = (AnnotationCacheOperationSource) other.     return (this.annotationParsers.equals(otherCos.annotationParsers) && this.publicMethodsOnly == otherCos.publicMethodsOnly). }
false;public;0;4;;@Override public int hashCode() {     return this.annotationParsers.hashCode(). }
true;;1;2;/**  * Return the {@link CacheOperation} instance(s) provided by the specified parser.  * @param parser the parser to use  * @return the cache operations, or {@code null} if none found  */ ;/**  * Return the {@link CacheOperation} instance(s) provided by the specified parser.  * @param parser the parser to use  * @return the cache operations, or {@code null} if none found  */ @Nullable Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser).
