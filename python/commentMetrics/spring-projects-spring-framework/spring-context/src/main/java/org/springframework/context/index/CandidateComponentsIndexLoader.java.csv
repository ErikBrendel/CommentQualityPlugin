# id;timestamp;commentText;codeText;commentWords;codeWords
CandidateComponentsIndexLoader -> public static CandidateComponentsIndex loadIndex(ClassLoader classLoader);1472736647;Load and instantiate the {@link CandidateComponentsIndex} from_{@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no_index is available, return {@code null}._@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@return the index to use or {@code null} if no index was found_@throws IllegalArgumentException if any module index cannot_be loaded or if an error occurs while creating {@link CandidateComponentsIndex};public static CandidateComponentsIndex loadIndex(ClassLoader classLoader) {_		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader()__		}_		return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex)__	};load,and,instantiate,the,link,candidate,components,index,from,value,using,the,given,class,loader,if,no,index,is,available,return,code,null,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,return,the,index,to,use,or,code,null,if,no,index,was,found,throws,illegal,argument,exception,if,any,module,index,cannot,be,loaded,or,if,an,error,occurs,while,creating,link,candidate,components,index;public,static,candidate,components,index,load,index,class,loader,class,loader,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,candidate,components,index,loader,class,get,class,loader,return,cache,compute,if,absent,class,loader,to,use,candidate,components,index,loader,do,load,index
CandidateComponentsIndexLoader -> public static CandidateComponentsIndex loadIndex(ClassLoader classLoader);1482842304;Load and instantiate the {@link CandidateComponentsIndex} from_{@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no_index is available, return {@code null}._@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@return the index to use or {@code null} if no index was found_@throws IllegalArgumentException if any module index cannot_be loaded or if an error occurs while creating {@link CandidateComponentsIndex};public static CandidateComponentsIndex loadIndex(ClassLoader classLoader) {_		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader()__		}_		return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex)__	};load,and,instantiate,the,link,candidate,components,index,from,value,using,the,given,class,loader,if,no,index,is,available,return,code,null,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,return,the,index,to,use,or,code,null,if,no,index,was,found,throws,illegal,argument,exception,if,any,module,index,cannot,be,loaded,or,if,an,error,occurs,while,creating,link,candidate,components,index;public,static,candidate,components,index,load,index,class,loader,class,loader,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,candidate,components,index,loader,class,get,class,loader,return,cache,compute,if,absent,class,loader,to,use,candidate,components,index,loader,do,load,index
CandidateComponentsIndexLoader -> public static CandidateComponentsIndex loadIndex(ClassLoader classLoader);1484653615;Load and instantiate the {@link CandidateComponentsIndex} from_{@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no_index is available, return {@code null}._@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@return the index to use or {@code null} if no index was found_@throws IllegalArgumentException if any module index cannot_be loaded or if an error occurs while creating {@link CandidateComponentsIndex};public static CandidateComponentsIndex loadIndex(ClassLoader classLoader) {_		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader()__		}_		return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex)__	};load,and,instantiate,the,link,candidate,components,index,from,value,using,the,given,class,loader,if,no,index,is,available,return,code,null,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,return,the,index,to,use,or,code,null,if,no,index,was,found,throws,illegal,argument,exception,if,any,module,index,cannot,be,loaded,or,if,an,error,occurs,while,creating,link,candidate,components,index;public,static,candidate,components,index,load,index,class,loader,class,loader,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,candidate,components,index,loader,class,get,class,loader,return,cache,compute,if,absent,class,loader,to,use,candidate,components,index,loader,do,load,index
CandidateComponentsIndexLoader -> @Nullable 	public static CandidateComponentsIndex loadIndex(@Nullable ClassLoader classLoader);1495868221;Load and instantiate the {@link CandidateComponentsIndex} from_{@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no_index is available, return {@code null}._@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@return the index to use or {@code null} if no index was found_@throws IllegalArgumentException if any module index cannot_be loaded or if an error occurs while creating {@link CandidateComponentsIndex};@Nullable_	public static CandidateComponentsIndex loadIndex(@Nullable ClassLoader classLoader) {_		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader()__		}_		return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex)__	};load,and,instantiate,the,link,candidate,components,index,from,value,using,the,given,class,loader,if,no,index,is,available,return,code,null,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,return,the,index,to,use,or,code,null,if,no,index,was,found,throws,illegal,argument,exception,if,any,module,index,cannot,be,loaded,or,if,an,error,occurs,while,creating,link,candidate,components,index;nullable,public,static,candidate,components,index,load,index,nullable,class,loader,class,loader,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,candidate,components,index,loader,class,get,class,loader,return,cache,compute,if,absent,class,loader,to,use,candidate,components,index,loader,do,load,index
CandidateComponentsIndexLoader -> @Nullable 	public static CandidateComponentsIndex loadIndex(@Nullable ClassLoader classLoader);1530174524;Load and instantiate the {@link CandidateComponentsIndex} from_{@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no_index is available, return {@code null}._@param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)_@return the index to use or {@code null} if no index was found_@throws IllegalArgumentException if any module index cannot_be loaded or if an error occurs while creating {@link CandidateComponentsIndex};@Nullable_	public static CandidateComponentsIndex loadIndex(@Nullable ClassLoader classLoader) {_		ClassLoader classLoaderToUse = classLoader__		if (classLoaderToUse == null) {_			classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader()__		}_		return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex)__	};load,and,instantiate,the,link,candidate,components,index,from,value,using,the,given,class,loader,if,no,index,is,available,return,code,null,param,class,loader,the,class,loader,to,use,for,loading,can,be,code,null,to,use,the,default,return,the,index,to,use,or,code,null,if,no,index,was,found,throws,illegal,argument,exception,if,any,module,index,cannot,be,loaded,or,if,an,error,occurs,while,creating,link,candidate,components,index;nullable,public,static,candidate,components,index,load,index,nullable,class,loader,class,loader,class,loader,class,loader,to,use,class,loader,if,class,loader,to,use,null,class,loader,to,use,candidate,components,index,loader,class,get,class,loader,return,cache,compute,if,absent,class,loader,to,use,candidate,components,index,loader,do,load,index
