commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;8;/**  * Load and instantiate the {@link CandidateComponentsIndex} from  * {@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no  * index is available, return {@code null}.  * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)  * @return the index to use or {@code null} if no index was found  * @throws IllegalArgumentException if any module index cannot  * be loaded or if an error occurs while creating {@link CandidateComponentsIndex}  */ ;/**  * Load and instantiate the {@link CandidateComponentsIndex} from  * {@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no  * index is available, return {@code null}.  * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)  * @return the index to use or {@code null} if no index was found  * @throws IllegalArgumentException if any module index cannot  * be loaded or if an error occurs while creating {@link CandidateComponentsIndex}  */ @Nullable public static CandidateComponentsIndex loadIndex(@Nullable ClassLoader classLoader) {     ClassLoader classLoaderToUse = classLoader.     if (classLoaderToUse == null) {         classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader().     }     return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex). }
false;private,static;1;28;;@Nullable private static CandidateComponentsIndex doLoadIndex(ClassLoader classLoader) {     if (shouldIgnoreIndex) {         return null.     }     try {         Enumeration<URL> urls = classLoader.getResources(COMPONENTS_RESOURCE_LOCATION).         if (!urls.hasMoreElements()) {             return null.         }         List<Properties> result = new ArrayList<>().         while (urls.hasMoreElements()) {             URL url = urls.nextElement().             Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url)).             result.add(properties).         }         if (logger.isDebugEnabled()) {             logger.debug("Loaded " + result.size() + "] index(es)").         }         int totalCount = result.stream().mapToInt(Properties::size).sum().         return (totalCount > 0 ? new CandidateComponentsIndex(result) : null).     } catch (IOException ex) {         throw new IllegalStateException("Unable to load indexes from location [" + COMPONENTS_RESOURCE_LOCATION + "]", ex).     } }
