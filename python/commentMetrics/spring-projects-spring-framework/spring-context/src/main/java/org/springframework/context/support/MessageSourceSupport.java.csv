# id;timestamp;commentText;codeText;commentWords;codeWords
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1328020251;Set whether to always apply the MessageFormat rules, parsing even_messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1346337018;Set whether to always apply the MessageFormat rules, parsing even_messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1356735495;Set whether to always apply the MessageFormat rules, parsing even_messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1467730834;Set whether to always apply the MessageFormat rules, parsing even_messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1484252281;Set whether to always apply the {@code MessageFormat} rules,_parsing even messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,code,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1495868221;Set whether to always apply the {@code MessageFormat} rules,_parsing even messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,code,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1496837955;Set whether to always apply the {@code MessageFormat} rules,_parsing even messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,code,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat);1530174524;Set whether to always apply the {@code MessageFormat} rules,_parsing even messages without arguments._<p>Default is "false": Messages without arguments are by default_returned as-is, without parsing them through MessageFormat._Set this to "true" to enforce MessageFormat for all messages,_expecting all message texts to be written with MessageFormat escaping._<p>For example, MessageFormat expects a single quote to be escaped_as "''". If your message texts are all written with such escaping,_even when not defining argument placeholders, you need to set this_flag to "true". Else, only message texts with actual arguments_are supposed to be written with MessageFormat escaping._@see java.text.MessageFormat;public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {_		this.alwaysUseMessageFormat = alwaysUseMessageFormat__	};set,whether,to,always,apply,the,code,message,format,rules,parsing,even,messages,without,arguments,p,default,is,false,messages,without,arguments,are,by,default,returned,as,is,without,parsing,them,through,message,format,set,this,to,true,to,enforce,message,format,for,all,messages,expecting,all,message,texts,to,be,written,with,message,format,escaping,p,for,example,message,format,expects,a,single,quote,to,be,escaped,as,if,your,message,texts,are,all,written,with,such,escaping,even,when,not,defining,argument,placeholders,you,need,to,set,this,flag,to,true,else,only,message,texts,with,actual,arguments,are,supposed,to,be,written,with,message,format,escaping,see,java,text,message,format;public,void,set,always,use,message,format,boolean,always,use,message,format,this,always,use,message,format,always,use,message,format
MessageSourceSupport -> protected String formatMessage(String msg, Object[] args, Locale locale);1328020251;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or <code>null</code> if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, Object[] args, Locale locale) {_		if (msg == null || (!this.alwaysUseMessageFormat && ObjectUtils.isEmpty(args))) {_			return msg__		}_		MessageFormat messageFormat__		synchronized (this.cachedMessageFormats) {_			messageFormat = this.cachedMessageFormats.get(msg)__			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (this.alwaysUseMessageFormat) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				this.cachedMessageFormats.put(msg, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,code,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,object,args,locale,locale,if,msg,null,this,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,synchronized,this,cached,message,formats,message,format,this,cached,message,formats,get,msg,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,this,always,use,message,format,throw,ex,message,format,this,cached,message,formats,put,msg,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String formatMessage(String msg, Object[] args, Locale locale);1346337018;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or <code>null</code> if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, Object[] args, Locale locale) {_		if (msg == null || (!this.alwaysUseMessageFormat && ObjectUtils.isEmpty(args))) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<Locale, MessageFormat>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (this.alwaysUseMessageFormat) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,code,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,object,args,locale,locale,if,msg,null,this,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,locale,message,format,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,this,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String formatMessage(String msg, Object[] args, Locale locale);1356735495;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, Object[] args, Locale locale) {_		if (msg == null || (!this.alwaysUseMessageFormat && ObjectUtils.isEmpty(args))) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<Locale, MessageFormat>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (this.alwaysUseMessageFormat) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,object,args,locale,locale,if,msg,null,this,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,locale,message,format,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,this,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String formatMessage(String msg, Object[] args, Locale locale);1467730834;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, Object[] args, Locale locale) {_		if (msg == null || (!this.alwaysUseMessageFormat && ObjectUtils.isEmpty(args))) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (this.alwaysUseMessageFormat) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,object,args,locale,locale,if,msg,null,this,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,this,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String formatMessage(String msg, Object[] args, Locale locale);1484252281;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, Object[] args, Locale locale) {_		if (msg == null || (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args))) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (isAlwaysUseMessageFormat()) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,object,args,locale,locale,if,msg,null,is,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,is,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String formatMessage(String msg, Object[] args, Locale locale);1495868221;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, Object[] args, Locale locale) {_		if (msg == null || (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args))) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (isAlwaysUseMessageFormat()) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,object,args,locale,locale,if,msg,null,is,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,is,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale);1495868221;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to {@code formatMessage},_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,nullable,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale);1496837955;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to {@code formatMessage},_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,nullable,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale);1530174524;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to {@code formatMessage},_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,nullable,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale);1328020251;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to <code>formatMessage</code>,_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or <code>null</code> if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,code,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,code,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale);1346337018;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to <code>formatMessage</code>,_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or <code>null</code> if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,code,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,code,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale);1356735495;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to {@code formatMessage},_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale);1467730834;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to {@code formatMessage},_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale);1484252281;Render the given default message String. The default message is_passed in as specified by the caller and can be rendered into_a fully formatted default message shown to the user._<p>The default implementation passes the String to {@code formatMessage},_resolving any argument placeholders found in them. Subclasses may override_this method to plug in custom processing of default messages._@param defaultMessage the passed-in default message String_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none._@param locale the Locale used for formatting_@return the rendered default message (with resolved arguments)_@see #formatMessage(String, Object[], java.util.Locale);protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale) {_		return formatMessage(defaultMessage, args, locale)__	};render,the,given,default,message,string,the,default,message,is,passed,in,as,specified,by,the,caller,and,can,be,rendered,into,a,fully,formatted,default,message,shown,to,the,user,p,the,default,implementation,passes,the,string,to,code,format,message,resolving,any,argument,placeholders,found,in,them,subclasses,may,override,this,method,to,plug,in,custom,processing,of,default,messages,param,default,message,the,passed,in,default,message,string,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,rendered,default,message,with,resolved,arguments,see,format,message,string,object,java,util,locale;protected,string,render,default,message,string,default,message,object,args,locale,locale,return,format,message,default,message,args,locale
MessageSourceSupport -> protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1496837955;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		return (args != null ? args : new Object[0])__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,nullable,object,args,locale,locale,return,args,null,args,new,object,0
MessageSourceSupport -> protected Object[] resolveArguments(@Nullable Object[] args, Locale locale);1530174524;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {_		return (args != null ? args : new Object[0])__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,nullable,object,args,locale,locale,return,args,null,args,new,object,0
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1328020251;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat((msg != null ? msg : ""), locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,null,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1346337018;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat((msg != null ? msg : ""), locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,null,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1356735495;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat((msg != null ? msg : ""), locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,null,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1467730834;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat((msg != null ? msg : ""), locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,null,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1484252281;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat((msg != null ? msg : ""), locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,null,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1495868221;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat((msg != null ? msg : ""), locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,null,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1496837955;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat(msg, locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,locale
MessageSourceSupport -> protected MessageFormat createMessageFormat(String msg, Locale locale);1530174524;Create a MessageFormat for the given message and Locale._@param msg the message to create a MessageFormat for_@param locale the Locale to create a MessageFormat for_@return the MessageFormat instance;protected MessageFormat createMessageFormat(String msg, Locale locale) {_		return new MessageFormat(msg, locale)__	};create,a,message,format,for,the,given,message,and,locale,param,msg,the,message,to,create,a,message,format,for,param,locale,the,locale,to,create,a,message,format,for,return,the,message,format,instance;protected,message,format,create,message,format,string,msg,locale,locale,return,new,message,format,msg,locale
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1328020251;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1346337018;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1356735495;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1467730834;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1484252281;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1495868221;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1496837955;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected boolean isAlwaysUseMessageFormat();1530174524;Return whether to always apply the MessageFormat rules, parsing even_messages without arguments.;protected boolean isAlwaysUseMessageFormat() {_		return this.alwaysUseMessageFormat__	};return,whether,to,always,apply,the,message,format,rules,parsing,even,messages,without,arguments;protected,boolean,is,always,use,message,format,return,this,always,use,message,format
MessageSourceSupport -> protected Object[] resolveArguments(Object[] args, Locale locale);1328020251;Template method for resolving argument objects._<p>The default implementation simply returns the given argument_array as-is. Can be overridden in subclasses in order to resolve_special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(Object[] args, Locale locale) {_		return args__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,object,args,locale,locale,return,args
MessageSourceSupport -> protected Object[] resolveArguments(Object[] args, Locale locale);1346337018;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(Object[] args, Locale locale) {_		return args__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,object,args,locale,locale,return,args
MessageSourceSupport -> protected Object[] resolveArguments(Object[] args, Locale locale);1356735495;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(Object[] args, Locale locale) {_		return args__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,object,args,locale,locale,return,args
MessageSourceSupport -> protected Object[] resolveArguments(Object[] args, Locale locale);1467730834;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(Object[] args, Locale locale) {_		return args__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,object,args,locale,locale,return,args
MessageSourceSupport -> protected Object[] resolveArguments(Object[] args, Locale locale);1484252281;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(Object[] args, Locale locale) {_		return args__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,object,args,locale,locale,return,args
MessageSourceSupport -> protected Object[] resolveArguments(Object[] args, Locale locale);1495868221;Template method for resolving argument objects._<p>The default implementation simply returns the given argument array as-is._Can be overridden in subclasses in order to resolve special argument types._@param args the original argument array_@param locale the Locale to resolve against_@return the resolved argument array;protected Object[] resolveArguments(Object[] args, Locale locale) {_		return args__	};template,method,for,resolving,argument,objects,p,the,default,implementation,simply,returns,the,given,argument,array,as,is,can,be,overridden,in,subclasses,in,order,to,resolve,special,argument,types,param,args,the,original,argument,array,param,locale,the,locale,to,resolve,against,return,the,resolved,argument,array;protected,object,resolve,arguments,object,args,locale,locale,return,args
MessageSourceSupport -> protected String formatMessage(String msg, @Nullable Object[] args, Locale locale);1496837955;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, @Nullable Object[] args, Locale locale) {_		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (isAlwaysUseMessageFormat()) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,nullable,object,args,locale,locale,if,is,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,is,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
MessageSourceSupport -> protected String formatMessage(String msg, @Nullable Object[] args, Locale locale);1530174524;Format the given message String, using cached MessageFormats._By default invoked for passed-in default messages, to resolve_any argument placeholders found in them._@param msg the message to format_@param args array of arguments that will be filled in for params within_the message, or {@code null} if none_@param locale the Locale used for formatting_@return the formatted message (with resolved arguments);protected String formatMessage(String msg, @Nullable Object[] args, Locale locale) {_		if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {_			return msg__		}_		MessageFormat messageFormat = null__		synchronized (this.messageFormatsPerMessage) {_			Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg)__			if (messageFormatsPerLocale != null) {_				messageFormat = messageFormatsPerLocale.get(locale)__			}_			else {_				messageFormatsPerLocale = new HashMap<>()__				this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale)__			}_			if (messageFormat == null) {_				try {_					messageFormat = createMessageFormat(msg, locale)__				}_				catch (IllegalArgumentException ex) {_					_					_					if (isAlwaysUseMessageFormat()) {_						throw ex__					}_					_					messageFormat = INVALID_MESSAGE_FORMAT__				}_				messageFormatsPerLocale.put(locale, messageFormat)__			}_		}_		if (messageFormat == INVALID_MESSAGE_FORMAT) {_			return msg__		}_		synchronized (messageFormat) {_			return messageFormat.format(resolveArguments(args, locale))__		}_	};format,the,given,message,string,using,cached,message,formats,by,default,invoked,for,passed,in,default,messages,to,resolve,any,argument,placeholders,found,in,them,param,msg,the,message,to,format,param,args,array,of,arguments,that,will,be,filled,in,for,params,within,the,message,or,code,null,if,none,param,locale,the,locale,used,for,formatting,return,the,formatted,message,with,resolved,arguments;protected,string,format,message,string,msg,nullable,object,args,locale,locale,if,is,always,use,message,format,object,utils,is,empty,args,return,msg,message,format,message,format,null,synchronized,this,message,formats,per,message,map,locale,message,format,message,formats,per,locale,this,message,formats,per,message,get,msg,if,message,formats,per,locale,null,message,format,message,formats,per,locale,get,locale,else,message,formats,per,locale,new,hash,map,this,message,formats,per,message,put,msg,message,formats,per,locale,if,message,format,null,try,message,format,create,message,format,msg,locale,catch,illegal,argument,exception,ex,if,is,always,use,message,format,throw,ex,message,format,message,formats,per,locale,put,locale,message,format,if,message,format,return,msg,synchronized,message,format,return,message,format,format,resolve,arguments,args,locale
