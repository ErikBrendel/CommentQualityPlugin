commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to always apply the {@code MessageFormat} rules,  * parsing even messages without arguments.  * <p>Default is "false": Messages without arguments are by default  * returned as-is, without parsing them through MessageFormat.  * Set this to "true" to enforce MessageFormat for all messages,  * expecting all message texts to be written with MessageFormat escaping.  * <p>For example, MessageFormat expects a single quote to be escaped  * as "''". If your message texts are all written with such escaping,  * even when not defining argument placeholders, you need to set this  * flag to "true". Else, only message texts with actual arguments  * are supposed to be written with MessageFormat escaping.  * @see java.text.MessageFormat  */ ;/**  * Set whether to always apply the {@code MessageFormat} rules,  * parsing even messages without arguments.  * <p>Default is "false": Messages without arguments are by default  * returned as-is, without parsing them through MessageFormat.  * Set this to "true" to enforce MessageFormat for all messages,  * expecting all message texts to be written with MessageFormat escaping.  * <p>For example, MessageFormat expects a single quote to be escaped  * as "''". If your message texts are all written with such escaping,  * even when not defining argument placeholders, you need to set this  * flag to "true". Else, only message texts with actual arguments  * are supposed to be written with MessageFormat escaping.  * @see java.text.MessageFormat  */ public void setAlwaysUseMessageFormat(boolean alwaysUseMessageFormat) {     this.alwaysUseMessageFormat = alwaysUseMessageFormat. }
true;protected;0;3;/**  * Return whether to always apply the MessageFormat rules, parsing even  * messages without arguments.  */ ;/**  * Return whether to always apply the MessageFormat rules, parsing even  * messages without arguments.  */ protected boolean isAlwaysUseMessageFormat() {     return this.alwaysUseMessageFormat. }
true;protected;3;3;/**  * Render the given default message String. The default message is  * passed in as specified by the caller and can be rendered into  * a fully formatted default message shown to the user.  * <p>The default implementation passes the String to {@code formatMessage},  * resolving any argument placeholders found in them. Subclasses may override  * this method to plug in custom processing of default messages.  * @param defaultMessage the passed-in default message String  * @param args array of arguments that will be filled in for params within  * the message, or {@code null} if none.  * @param locale the Locale used for formatting  * @return the rendered default message (with resolved arguments)  * @see #formatMessage(String, Object[], java.util.Locale)  */ ;/**  * Render the given default message String. The default message is  * passed in as specified by the caller and can be rendered into  * a fully formatted default message shown to the user.  * <p>The default implementation passes the String to {@code formatMessage},  * resolving any argument placeholders found in them. Subclasses may override  * this method to plug in custom processing of default messages.  * @param defaultMessage the passed-in default message String  * @param args array of arguments that will be filled in for params within  * the message, or {@code null} if none.  * @param locale the Locale used for formatting  * @return the rendered default message (with resolved arguments)  * @see #formatMessage(String, Object[], java.util.Locale)  */ protected String renderDefaultMessage(String defaultMessage, @Nullable Object[] args, Locale locale) {     return formatMessage(defaultMessage, args, locale). }
true;protected;3;37;/**  * Format the given message String, using cached MessageFormats.  * By default invoked for passed-in default messages, to resolve  * any argument placeholders found in them.  * @param msg the message to format  * @param args array of arguments that will be filled in for params within  * the message, or {@code null} if none  * @param locale the Locale used for formatting  * @return the formatted message (with resolved arguments)  */ ;/**  * Format the given message String, using cached MessageFormats.  * By default invoked for passed-in default messages, to resolve  * any argument placeholders found in them.  * @param msg the message to format  * @param args array of arguments that will be filled in for params within  * the message, or {@code null} if none  * @param locale the Locale used for formatting  * @return the formatted message (with resolved arguments)  */ protected String formatMessage(String msg, @Nullable Object[] args, Locale locale) {     if (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args)) {         return msg.     }     MessageFormat messageFormat = null.     synchronized (this.messageFormatsPerMessage) {         Map<Locale, MessageFormat> messageFormatsPerLocale = this.messageFormatsPerMessage.get(msg).         if (messageFormatsPerLocale != null) {             messageFormat = messageFormatsPerLocale.get(locale).         } else {             messageFormatsPerLocale = new HashMap<>().             this.messageFormatsPerMessage.put(msg, messageFormatsPerLocale).         }         if (messageFormat == null) {             try {                 messageFormat = createMessageFormat(msg, locale).             } catch (IllegalArgumentException ex) {                 // rather using a message structure with no arguments involved...                 if (isAlwaysUseMessageFormat()) {                     throw ex.                 }                 // Silently proceed with raw message if format not enforced...                 messageFormat = INVALID_MESSAGE_FORMAT.             }             messageFormatsPerLocale.put(locale, messageFormat).         }     }     if (messageFormat == INVALID_MESSAGE_FORMAT) {         return msg.     }     synchronized (messageFormat) {         return messageFormat.format(resolveArguments(args, locale)).     } }
true;protected;2;3;/**  * Create a MessageFormat for the given message and Locale.  * @param msg the message to create a MessageFormat for  * @param locale the Locale to create a MessageFormat for  * @return the MessageFormat instance  */ ;/**  * Create a MessageFormat for the given message and Locale.  * @param msg the message to create a MessageFormat for  * @param locale the Locale to create a MessageFormat for  * @return the MessageFormat instance  */ protected MessageFormat createMessageFormat(String msg, Locale locale) {     return new MessageFormat(msg, locale). }
true;protected;2;3;/**  * Template method for resolving argument objects.  * <p>The default implementation simply returns the given argument array as-is.  * Can be overridden in subclasses in order to resolve special argument types.  * @param args the original argument array  * @param locale the Locale to resolve against  * @return the resolved argument array  */ ;/**  * Template method for resolving argument objects.  * <p>The default implementation simply returns the given argument array as-is.  * Can be overridden in subclasses in order to resolve special argument types.  * @param args the original argument array  * @param locale the Locale to resolve against  * @return the resolved argument array  */ protected Object[] resolveArguments(@Nullable Object[] args, Locale locale) {     return (args != null ? args : new Object[0]). }
