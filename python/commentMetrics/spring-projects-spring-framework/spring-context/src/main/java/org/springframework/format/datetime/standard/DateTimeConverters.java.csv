commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;24;/**  * Install the converters into the converter registry.  * @param registry the converter registry  */ ;/**  * Install the converters into the converter registry.  * @param registry the converter registry  */ public static void registerConverters(ConverterRegistry registry) {     DateFormatterRegistrar.addDateConverters(registry).     registry.addConverter(new LocalDateTimeToLocalDateConverter()).     registry.addConverter(new LocalDateTimeToLocalTimeConverter()).     registry.addConverter(new ZonedDateTimeToLocalDateConverter()).     registry.addConverter(new ZonedDateTimeToLocalTimeConverter()).     registry.addConverter(new ZonedDateTimeToLocalDateTimeConverter()).     registry.addConverter(new ZonedDateTimeToOffsetDateTimeConverter()).     registry.addConverter(new ZonedDateTimeToInstantConverter()).     registry.addConverter(new OffsetDateTimeToLocalDateConverter()).     registry.addConverter(new OffsetDateTimeToLocalTimeConverter()).     registry.addConverter(new OffsetDateTimeToLocalDateTimeConverter()).     registry.addConverter(new OffsetDateTimeToZonedDateTimeConverter()).     registry.addConverter(new OffsetDateTimeToInstantConverter()).     registry.addConverter(new CalendarToZonedDateTimeConverter()).     registry.addConverter(new CalendarToOffsetDateTimeConverter()).     registry.addConverter(new CalendarToLocalDateConverter()).     registry.addConverter(new CalendarToLocalTimeConverter()).     registry.addConverter(new CalendarToLocalDateTimeConverter()).     registry.addConverter(new CalendarToInstantConverter()).     registry.addConverter(new LongToInstantConverter()).     registry.addConverter(new InstantToLongConverter()). }
false;private,static;1;9;;private static ZonedDateTime calendarToZonedDateTime(Calendar source) {     if (source instanceof GregorianCalendar) {         return ((GregorianCalendar) source).toZonedDateTime().     } else {         return ZonedDateTime.ofInstant(Instant.ofEpochMilli(source.getTimeInMillis()), source.getTimeZone().toZoneId()).     } }
false;public;1;4;;@Override public LocalDate convert(LocalDateTime source) {     return source.toLocalDate(). }
false;public;1;4;;@Override public LocalTime convert(LocalDateTime source) {     return source.toLocalTime(). }
false;public;1;4;;@Override public LocalDate convert(ZonedDateTime source) {     return source.toLocalDate(). }
false;public;1;4;;@Override public LocalTime convert(ZonedDateTime source) {     return source.toLocalTime(). }
false;public;1;4;;@Override public LocalDateTime convert(ZonedDateTime source) {     return source.toLocalDateTime(). }
false;public;1;4;;@Override public OffsetDateTime convert(ZonedDateTime source) {     return source.toOffsetDateTime(). }
false;public;1;4;;@Override public Instant convert(ZonedDateTime source) {     return source.toInstant(). }
false;public;1;4;;@Override public LocalDate convert(OffsetDateTime source) {     return source.toLocalDate(). }
false;public;1;4;;@Override public LocalTime convert(OffsetDateTime source) {     return source.toLocalTime(). }
false;public;1;4;;@Override public LocalDateTime convert(OffsetDateTime source) {     return source.toLocalDateTime(). }
false;public;1;4;;@Override public ZonedDateTime convert(OffsetDateTime source) {     return source.toZonedDateTime(). }
false;public;1;4;;@Override public Instant convert(OffsetDateTime source) {     return source.toInstant(). }
false;public;1;4;;@Override public ZonedDateTime convert(Calendar source) {     return calendarToZonedDateTime(source). }
false;public;1;4;;@Override public OffsetDateTime convert(Calendar source) {     return calendarToZonedDateTime(source).toOffsetDateTime(). }
false;public;1;4;;@Override public LocalDate convert(Calendar source) {     return calendarToZonedDateTime(source).toLocalDate(). }
false;public;1;4;;@Override public LocalTime convert(Calendar source) {     return calendarToZonedDateTime(source).toLocalTime(). }
false;public;1;4;;@Override public LocalDateTime convert(Calendar source) {     return calendarToZonedDateTime(source).toLocalDateTime(). }
false;public;1;4;;@Override public Instant convert(Calendar source) {     return calendarToZonedDateTime(source).toInstant(). }
false;public;1;4;;@Override public Instant convert(Long source) {     return Instant.ofEpochMilli(source). }
false;public;1;4;;@Override public Long convert(Instant source) {     return source.toEpochMilli(). }
