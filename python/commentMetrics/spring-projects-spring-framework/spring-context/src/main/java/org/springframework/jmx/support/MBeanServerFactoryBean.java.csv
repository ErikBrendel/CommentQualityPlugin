commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether or not the {@code MBeanServerFactoryBean} should attempt  * to locate a running {@code MBeanServer} before creating one.  * <p>Default is {@code false}.  */ ;/**  * Set whether or not the {@code MBeanServerFactoryBean} should attempt  * to locate a running {@code MBeanServer} before creating one.  * <p>Default is {@code false}.  */ public void setLocateExistingServerIfPossible(boolean locateExistingServerIfPossible) {     this.locateExistingServerIfPossible = locateExistingServerIfPossible. }
true;public;1;3;/**  * Set the agent id of the {@code MBeanServer} to locate.  * <p>Default is none. If specified, this will result in an  * automatic attempt being made to locate the attendant MBeanServer,  * and (importantly) if said MBeanServer cannot be located no  * attempt will be made to create a new MBeanServer (and an  * MBeanServerNotFoundException will be thrown at resolution time).  * <p>Specifying the empty String indicates the platform MBeanServer.  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  */ ;/**  * Set the agent id of the {@code MBeanServer} to locate.  * <p>Default is none. If specified, this will result in an  * automatic attempt being made to locate the attendant MBeanServer,  * and (importantly) if said MBeanServer cannot be located no  * attempt will be made to create a new MBeanServer (and an  * MBeanServerNotFoundException will be thrown at resolution time).  * <p>Specifying the empty String indicates the platform MBeanServer.  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  */ public void setAgentId(String agentId) {     this.agentId = agentId. }
true;public;1;3;/**  * Set the default domain to be used by the {@code MBeanServer},  * to be passed to {@code MBeanServerFactory.createMBeanServer()}  * or {@code MBeanServerFactory.findMBeanServer()}.  * <p>Default is none.  * @see javax.management.MBeanServerFactory#createMBeanServer(String)  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  */ ;/**  * Set the default domain to be used by the {@code MBeanServer},  * to be passed to {@code MBeanServerFactory.createMBeanServer()}  * or {@code MBeanServerFactory.findMBeanServer()}.  * <p>Default is none.  * @see javax.management.MBeanServerFactory#createMBeanServer(String)  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  */ public void setDefaultDomain(String defaultDomain) {     this.defaultDomain = defaultDomain. }
true;public;1;3;/**  * Set whether to register the {@code MBeanServer} with the  * {@code MBeanServerFactory}, making it available through  * {@code MBeanServerFactory.findMBeanServer()}.  * @see javax.management.MBeanServerFactory#createMBeanServer  * @see javax.management.MBeanServerFactory#findMBeanServer  */ ;/**  * Set whether to register the {@code MBeanServer} with the  * {@code MBeanServerFactory}, making it available through  * {@code MBeanServerFactory.findMBeanServer()}.  * @see javax.management.MBeanServerFactory#createMBeanServer  * @see javax.management.MBeanServerFactory#findMBeanServer  */ public void setRegisterWithFactory(boolean registerWithFactory) {     this.registerWithFactory = registerWithFactory. }
true;public;0;23;/**  * Creates the {@code MBeanServer} instance.  */ ;/**  * Creates the {@code MBeanServer} instance.  */ @Override public void afterPropertiesSet() throws MBeanServerNotFoundException {     // Try to locate existing MBeanServer, if desired.     if (this.locateExistingServerIfPossible || this.agentId != null) {         try {             this.server = locateMBeanServer(this.agentId).         } catch (MBeanServerNotFoundException ex) {             // specific MBeanServer. so let's bail if we can't find it.             if (this.agentId != null) {                 throw ex.             }             logger.debug("No existing MBeanServer found - creating new one").         }     }     // Create a new MBeanServer and register it, if desired.     if (this.server == null) {         this.server = createMBeanServer(this.defaultDomain, this.registerWithFactory).         this.newlyRegistered = this.registerWithFactory.     } }
true;protected;1;3;/**  * Attempt to locate an existing {@code MBeanServer}.  * Called if {@code locateExistingServerIfPossible} is set to {@code true}.  * <p>The default implementation attempts to find an {@code MBeanServer} using  * a standard lookup. Subclasses may override to add additional location logic.  * @param agentId the agent identifier of the MBeanServer to retrieve.  * If this parameter is {@code null}, all registered MBeanServers are  * considered.  * @return the {@code MBeanServer} if found  * @throws org.springframework.jmx.MBeanServerNotFoundException  * if no {@code MBeanServer} could be found  * @see #setLocateExistingServerIfPossible  * @see JmxUtils#locateMBeanServer(String)  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  */ ;/**  * Attempt to locate an existing {@code MBeanServer}.  * Called if {@code locateExistingServerIfPossible} is set to {@code true}.  * <p>The default implementation attempts to find an {@code MBeanServer} using  * a standard lookup. Subclasses may override to add additional location logic.  * @param agentId the agent identifier of the MBeanServer to retrieve.  * If this parameter is {@code null}, all registered MBeanServers are  * considered.  * @return the {@code MBeanServer} if found  * @throws org.springframework.jmx.MBeanServerNotFoundException  * if no {@code MBeanServer} could be found  * @see #setLocateExistingServerIfPossible  * @see JmxUtils#locateMBeanServer(String)  * @see javax.management.MBeanServerFactory#findMBeanServer(String)  */ protected MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {     return JmxUtils.locateMBeanServer(agentId). }
true;protected;2;8;/**  * Create a new {@code MBeanServer} instance and register it with the  * {@code MBeanServerFactory}, if desired.  * @param defaultDomain the default domain, or {@code null} if none  * @param registerWithFactory whether to register the {@code MBeanServer}  * with the {@code MBeanServerFactory}  * @see javax.management.MBeanServerFactory#createMBeanServer  * @see javax.management.MBeanServerFactory#newMBeanServer  */ ;/**  * Create a new {@code MBeanServer} instance and register it with the  * {@code MBeanServerFactory}, if desired.  * @param defaultDomain the default domain, or {@code null} if none  * @param registerWithFactory whether to register the {@code MBeanServer}  * with the {@code MBeanServerFactory}  * @see javax.management.MBeanServerFactory#createMBeanServer  * @see javax.management.MBeanServerFactory#newMBeanServer  */ protected MBeanServer createMBeanServer(@Nullable String defaultDomain, boolean registerWithFactory) {     if (registerWithFactory) {         return MBeanServerFactory.createMBeanServer(defaultDomain).     } else {         return MBeanServerFactory.newMBeanServer(defaultDomain).     } }
false;public;0;5;;@Override @Nullable public MBeanServer getObject() {     return this.server. }
false;public;0;4;;@Override public Class<? extends MBeanServer> getObjectType() {     return (this.server != null ? this.server.getClass() : MBeanServer.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;public;0;6;/**  * Unregisters the {@code MBeanServer} instance, if necessary.  */ ;/**  * Unregisters the {@code MBeanServer} instance, if necessary.  */ @Override public void destroy() {     if (this.newlyRegistered) {         MBeanServerFactory.releaseMBeanServer(this.server).     } }
