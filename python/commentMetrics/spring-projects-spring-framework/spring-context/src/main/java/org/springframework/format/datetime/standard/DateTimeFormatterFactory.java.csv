# id;timestamp;commentText;codeText;commentWords;codeWords
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1366718359;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1398858661;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1401910463;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1456240346;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1467677340;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1485810955;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1495868221;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1496837955;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1498780456;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatterFactory();1537186939;Create a new {@code DateTimeFormatterFactory} instance.;public DateTimeFormatterFactory() {_	};create,a,new,code,date,time,formatter,factory,instance;public,date,time,formatter,factory
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1366718359;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1398858661;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1401910463;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1456240346;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1467677340;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1485810955;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1495868221;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1496837955;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1498780456;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter();1537186939;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_{@link FormatStyle#MEDIUM medium date time format} will be used._@return a new date time formatter_@see #createDateTimeFormatter(DateTimeFormatter);public DateTimeFormatter createDateTimeFormatter() {_		return createDateTimeFormatter(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,link,format,style,medium,medium,date,time,format,will,be,used,return,a,new,date,time,formatter,see,create,date,time,formatter,date,time,formatter;public,date,time,formatter,create,date,time,formatter,return,create,date,time,formatter,date,time,formatter,of,localized,date,time,format,style,medium
DateTimeFormatterFactory -> public void setPattern(String pattern);1366718359;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1398858661;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1401910463;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1456240346;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1467677340;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1485810955;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1495868221;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1496837955;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1498780456;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setPattern(String pattern);1537186939;Set the pattern to use to format date values._@param pattern the format pattern;public void setPattern(String pattern) {_		this.pattern = pattern__	};set,the,pattern,to,use,to,format,date,values,param,pattern,the,format,pattern;public,void,set,pattern,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setIso(ISO iso);1366718359;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1398858661;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1401910463;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1456240346;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1467677340;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1485810955;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1495868221;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1496837955;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1498780456;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public void setIso(ISO iso);1537186939;Set the ISO format used to format date values._@param iso the ISO format;public void setIso(ISO iso) {_		this.iso = iso__	};set,the,iso,format,used,to,format,date,values,param,iso,the,iso,format;public,void,set,iso,iso,iso,this,iso,iso
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1366718359;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1398858661;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1401910463;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1456240346;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1467677340;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1485810955;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1495868221;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1496837955;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1498780456;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public DateTimeFormatterFactory(String pattern);1537186939;Create a new {@code DateTimeFormatterFactory} instance._@param pattern the pattern to use to format date values;public DateTimeFormatterFactory(String pattern) {_		this.pattern = pattern__	};create,a,new,code,date,time,formatter,factory,instance,param,pattern,the,pattern,to,use,to,format,date,values;public,date,time,formatter,factory,string,pattern,this,pattern,pattern
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1366718359;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1398858661;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1401910463;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1456240346;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1467677340;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1485810955;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1495868221;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1496837955;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1498780456;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setTimeZone(TimeZone timeZone);1537186939;Set the {@code TimeZone} to normalize the date values into, if any._@param timeZone the time zone;public void setTimeZone(TimeZone timeZone) {_		this.timeZone = timeZone__	};set,the,code,time,zone,to,normalize,the,date,values,into,if,any,param,time,zone,the,time,zone;public,void,set,time,zone,time,zone,time,zone,this,time,zone,time,zone
DateTimeFormatterFactory -> public void setStylePattern(String style);1366718359;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2)__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1398858661;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2)__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1401910463;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2)__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1456240346;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2)__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1467677340;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2)__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1485810955;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2, "Style pattern must consist of two characters")__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,style,pattern,must,consist,of,two,characters,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1495868221;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style != null && style.length() == 2, "Style pattern must consist of two characters")__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,null,style,length,2,style,pattern,must,consist,of,two,characters,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1496837955;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style.length() == 2, "Style pattern must consist of two characters")__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,length,2,style,pattern,must,consist,of,two,characters,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1498780456;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style.length() == 2, "Style pattern must consist of two characters")__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,length,2,style,pattern,must,consist,of,two,characters,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setStylePattern(String style);1537186939;Set the two characters to use to format date values, in Joda-Time style._<p>The first character is used for the date style_ the second is for_the time style. Supported characters are:_<ul>_<li>'S' = Small</li>_<li>'M' = Medium</li>_<li>'L' = Long</li>_<li>'F' = Full</li>_<li>'-' = Omitted</li>_</ul>_<p>This method mimics the styles supported by Joda-Time. Note that_JSR-310 natively favors {@link java.time.format.FormatStyle} as used for_{@link #setDateStyle}, {@link #setTimeStyle} and {@link #setDateTimeStyle}._@param style two characters from the set {"S", "M", "L", "F", "-"};public void setStylePattern(String style) {_		Assert.isTrue(style.length() == 2, "Style pattern must consist of two characters")__		this.dateStyle = convertStyleCharacter(style.charAt(0))__		this.timeStyle = convertStyleCharacter(style.charAt(1))__	};set,the,two,characters,to,use,to,format,date,values,in,joda,time,style,p,the,first,character,is,used,for,the,date,style,the,second,is,for,the,time,style,supported,characters,are,ul,li,s,small,li,li,m,medium,li,li,l,long,li,li,f,full,li,li,omitted,li,ul,p,this,method,mimics,the,styles,supported,by,joda,time,note,that,jsr,310,natively,favors,link,java,time,format,format,style,as,used,for,link,set,date,style,link,set,time,style,and,link,set,date,time,style,param,style,two,characters,from,the,set,s,m,l,f;public,void,set,style,pattern,string,style,assert,is,true,style,length,2,style,pattern,must,consist,of,two,characters,this,date,style,convert,style,character,style,char,at,0,this,time,style,convert,style,character,style,char,at,1
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1366718359;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1398858661;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1401910463;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1456240346;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1467677340;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1485810955;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1495868221;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1496837955;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1498780456;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public void setTimeStyle(FormatStyle timeStyle);1537186939;Set the style to use for time types.;public void setTimeStyle(FormatStyle timeStyle) {_		this.timeStyle = timeStyle__	};set,the,style,to,use,for,time,types;public,void,set,time,style,format,style,time,style,this,time,style,time,style
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1366718359;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use when no specific_factory properties have been set (can be {@code null})._@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			dateTimeFormatter = DateTimeFormatter.ofPattern(this.pattern)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				case NONE:_					_					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,can,be,code,null,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,date,time,formatter,date,time,formatter,of,pattern,this,pattern,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,case,none,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1398858661;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use when no specific_factory properties have been set (can be {@code null})._@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			dateTimeFormatter = DateTimeFormatter.ofPattern(this.pattern)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				case NONE:_					_					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,can,be,code,null,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,date,time,formatter,date,time,formatter,of,pattern,this,pattern,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,case,none,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1401910463;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use when no specific_factory properties have been set (can be {@code null})._@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			dateTimeFormatter = DateTimeFormatter.ofPattern(this.pattern)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				case NONE:_					_					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,can,be,code,null,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,date,time,formatter,date,time,formatter,of,pattern,this,pattern,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,case,none,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1456240346;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use when no specific_factory properties have been set (can be {@code null})._@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			_			_			_			String patternToUse = this.pattern.replace("yy", "uu")__			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				case NONE:_					_					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,can,be,code,null,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,string,pattern,to,use,this,pattern,replace,yy,uu,date,time,formatter,date,time,formatter,of,pattern,pattern,to,use,with,resolver,style,resolver,style,strict,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,case,none,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1467677340;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use when no specific_factory properties have been set (can be {@code null})._@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			_			_			_			String patternToUse = this.pattern.replace("yy", "uu")__			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				case NONE:_					_					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,can,be,code,null,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,string,pattern,to,use,this,pattern,replace,yy,uu,date,time,formatter,date,time,formatter,of,pattern,pattern,to,use,with,resolver,style,resolver,style,strict,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,case,none,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1485810955;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use when no specific_factory properties have been set (can be {@code null})._@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			_			_			_			String patternToUse = this.pattern.replace("yy", "uu")__			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				case NONE:_					_					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,can,be,code,null,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,string,pattern,to,use,this,pattern,replace,yy,uu,date,time,formatter,date,time,formatter,of,pattern,pattern,to,use,with,resolver,style,resolver,style,strict,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,case,none,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1496837955;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use_when no specific factory properties have been set_@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			_			_			_			String patternToUse = this.pattern.replace("yy", "uu")__			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,string,pattern,to,use,this,pattern,replace,yy,uu,date,time,formatter,date,time,formatter,of,pattern,pattern,to,use,with,resolver,style,resolver,style,strict,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1498780456;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use_when no specific factory properties have been set_@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			_			_			_			String patternToUse = this.pattern.replace("yy", "uu")__			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,string,pattern,to,use,this,pattern,replace,yy,uu,date,time,formatter,date,time,formatter,of,pattern,pattern,to,use,with,resolver,style,resolver,style,strict,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter);1537186939;Create a new {@code DateTimeFormatter} using this factory._<p>If no specific pattern or style has been defined,_the supplied {@code fallbackFormatter} will be used._@param fallbackFormatter the fall-back formatter to use_when no specific factory properties have been set_@return a new date time formatter;public DateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter) {_		DateTimeFormatter dateTimeFormatter = null__		if (StringUtils.hasLength(this.pattern)) {_			_			_			_			String patternToUse = StringUtils.replace(this.pattern, "yy", "uu")__			dateTimeFormatter = DateTimeFormatter.ofPattern(patternToUse).withResolverStyle(ResolverStyle.STRICT)__		}_		else if (this.iso != null && this.iso != ISO.NONE) {_			switch (this.iso) {_				case DATE:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE__					break__				case TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_TIME__					break__				case DATE_TIME:_					dateTimeFormatter = DateTimeFormatter.ISO_DATE_TIME__					break__				default:_					throw new IllegalStateException("Unsupported ISO format: " + this.iso)__			}_		}_		else if (this.dateStyle != null && this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDateTime(this.dateStyle, this.timeStyle)__		}_		else if (this.dateStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedDate(this.dateStyle)__		}_		else if (this.timeStyle != null) {_			dateTimeFormatter = DateTimeFormatter.ofLocalizedTime(this.timeStyle)__		}__		if (dateTimeFormatter != null && this.timeZone != null) {_			dateTimeFormatter = dateTimeFormatter.withZone(this.timeZone.toZoneId())__		}_		return (dateTimeFormatter != null ? dateTimeFormatter : fallbackFormatter)__	};create,a,new,code,date,time,formatter,using,this,factory,p,if,no,specific,pattern,or,style,has,been,defined,the,supplied,code,fallback,formatter,will,be,used,param,fallback,formatter,the,fall,back,formatter,to,use,when,no,specific,factory,properties,have,been,set,return,a,new,date,time,formatter;public,date,time,formatter,create,date,time,formatter,date,time,formatter,fallback,formatter,date,time,formatter,date,time,formatter,null,if,string,utils,has,length,this,pattern,string,pattern,to,use,string,utils,replace,this,pattern,yy,uu,date,time,formatter,date,time,formatter,of,pattern,pattern,to,use,with,resolver,style,resolver,style,strict,else,if,this,iso,null,this,iso,iso,none,switch,this,iso,case,date,date,time,formatter,date,time,formatter,break,case,time,date,time,formatter,date,time,formatter,break,case,date,time,formatter,date,time,formatter,break,default,throw,new,illegal,state,exception,unsupported,iso,format,this,iso,else,if,this,date,style,null,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,date,time,this,date,style,this,time,style,else,if,this,date,style,null,date,time,formatter,date,time,formatter,of,localized,date,this,date,style,else,if,this,time,style,null,date,time,formatter,date,time,formatter,of,localized,time,this,time,style,if,date,time,formatter,null,this,time,zone,null,date,time,formatter,date,time,formatter,with,zone,this,time,zone,to,zone,id,return,date,time,formatter,null,date,time,formatter,fallback,formatter
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1366718359;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1398858661;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1401910463;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1456240346;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1467677340;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1485810955;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1495868221;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1496837955;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1498780456;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateStyle(FormatStyle dateStyle);1537186939;Set the style to use for date types.;public void setDateStyle(FormatStyle dateStyle) {_		this.dateStyle = dateStyle__	};set,the,style,to,use,for,date,types;public,void,set,date,style,format,style,date,style,this,date,style,date,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1366718359;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1398858661;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1401910463;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1456240346;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1467677340;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1485810955;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1495868221;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1496837955;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1498780456;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
DateTimeFormatterFactory -> public void setDateTimeStyle(FormatStyle dateTimeStyle);1537186939;Set the style to use for date and time types.;public void setDateTimeStyle(FormatStyle dateTimeStyle) {_		this.dateStyle = dateTimeStyle__		this.timeStyle = dateTimeStyle__	};set,the,style,to,use,for,date,and,time,types;public,void,set,date,time,style,format,style,date,time,style,this,date,style,date,time,style,this,time,style,date,time,style
