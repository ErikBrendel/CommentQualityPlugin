commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Add the supplied attribute under the supplied name.  * @param attributeName the name of the model attribute (never {@code null})  * @param attributeValue the model attribute value (can be {@code null})  */ ;/**  * Add the supplied attribute under the supplied name.  * @param attributeName the name of the model attribute (never {@code null})  * @param attributeValue the model attribute value (can be {@code null})  */ Model addAttribute(String attributeName, @Nullable Object attributeValue).
true;;1;1;/**  * Add the supplied attribute to this {@code Map} using a  * {@link org.springframework.core.Conventions#getVariableName generated name}.  * <p><i>Note: Empty {@link java.util.Collection Collections} are not added to  * the model when using this method because we cannot correctly determine  * the true convention name. View code should check for {@code null} rather  * than for empty collections as is already done by JSTL tags.</i>  * @param attributeValue the model attribute value (never {@code null})  */ ;/**  * Add the supplied attribute to this {@code Map} using a  * {@link org.springframework.core.Conventions#getVariableName generated name}.  * <p><i>Note: Empty {@link java.util.Collection Collections} are not added to  * the model when using this method because we cannot correctly determine  * the true convention name. View code should check for {@code null} rather  * than for empty collections as is already done by JSTL tags.</i>  * @param attributeValue the model attribute value (never {@code null})  */ Model addAttribute(Object attributeValue).
true;;1;1;/**  * Copy all attributes in the supplied {@code Collection} into this  * {@code Map}, using attribute name generation for each element.  * @see #addAttribute(Object)  */ ;/**  * Copy all attributes in the supplied {@code Collection} into this  * {@code Map}, using attribute name generation for each element.  * @see #addAttribute(Object)  */ Model addAllAttributes(Collection<?> attributeValues).
true;;1;1;/**  * Copy all attributes in the supplied {@code Map} into this {@code Map}.  * @see #addAttribute(String, Object)  */ ;/**  * Copy all attributes in the supplied {@code Map} into this {@code Map}.  * @see #addAttribute(String, Object)  */ Model addAllAttributes(Map<String, ?> attributes).
true;;1;1;/**  * Copy all attributes in the supplied {@code Map} into this {@code Map},  * with existing objects of the same name taking precedence (i.e. not getting  * replaced).  */ ;/**  * Copy all attributes in the supplied {@code Map} into this {@code Map},  * with existing objects of the same name taking precedence (i.e. not getting  * replaced).  */ Model mergeAttributes(Map<String, ?> attributes).
true;;1;1;/**  * Does this model contain an attribute of the given name?  * @param attributeName the name of the model attribute (never {@code null})  * @return whether this model contains a corresponding attribute  */ ;/**  * Does this model contain an attribute of the given name?  * @param attributeName the name of the model attribute (never {@code null})  * @return whether this model contains a corresponding attribute  */ boolean containsAttribute(String attributeName).
true;;1;2;/**  * Return the attribute value for the given name, if any.  * @param attributeName the name of the model attribute (never {@code null})  * @return the corresponding attribute value, or {@code null} if none  * @since 5.2  */ ;/**  * Return the attribute value for the given name, if any.  * @param attributeName the name of the model attribute (never {@code null})  * @return the corresponding attribute value, or {@code null} if none  * @since 5.2  */ @Nullable Object getAttribute(String attributeName).
true;;0;1;/**  * Return the current set of model attributes as a Map.  */ ;/**  * Return the current set of model attributes as a Map.  */ Map<String, Object> asMap().
