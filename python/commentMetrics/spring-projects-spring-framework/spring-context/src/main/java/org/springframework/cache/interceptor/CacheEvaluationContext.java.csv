commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Add the specified variable name as unavailable for that context.  * Any expression trying to access this variable should lead to an exception.  * <p>This permits the validation of expressions that could potentially a  * variable even when such variable isn't available yet. Any expression  * trying to use that variable should therefore fail to evaluate.  */ ;/**  * Add the specified variable name as unavailable for that context.  * Any expression trying to access this variable should lead to an exception.  * <p>This permits the validation of expressions that could potentially a  * variable even when such variable isn't available yet. Any expression  * trying to use that variable should therefore fail to evaluate.  */ public void addUnavailableVariable(String name) {     this.unavailableVariables.add(name). }
true;public;1;8;/**  * Load the param information only when needed.  */ ;/**  * Load the param information only when needed.  */ @Override @Nullable public Object lookupVariable(String name) {     if (this.unavailableVariables.contains(name)) {         throw new VariableNotAvailableException(name).     }     return super.lookupVariable(name). }
