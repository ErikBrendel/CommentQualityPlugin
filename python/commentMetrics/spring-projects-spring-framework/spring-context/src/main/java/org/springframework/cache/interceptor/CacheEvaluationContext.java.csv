# id;timestamp;commentText;codeText;commentWords;codeWords
CacheEvaluationContext -> public void addUnavailableVariable(String name);1404735499;Add the specified variable name as unavailable for that context. Any expression trying_to access this variable should lead to an exception._<p>This permits the validation of expressions that could potentially a variable even_when such variable isn't available yet. Any expression trying to use that variable should_therefore fail to evaluate.;public void addUnavailableVariable(String name) {_		this.unavailableVariables.add(name)__	};add,the,specified,variable,name,as,unavailable,for,that,context,any,expression,trying,to,access,this,variable,should,lead,to,an,exception,p,this,permits,the,validation,of,expressions,that,could,potentially,a,variable,even,when,such,variable,isn,t,available,yet,any,expression,trying,to,use,that,variable,should,therefore,fail,to,evaluate;public,void,add,unavailable,variable,string,name,this,unavailable,variables,add,name
CacheEvaluationContext -> public void addUnavailableVariable(String name);1422279854;Add the specified variable name as unavailable for that context. Any expression trying_to access this variable should lead to an exception._<p>This permits the validation of expressions that could potentially a variable even_when such variable isn't available yet. Any expression trying to use that variable should_therefore fail to evaluate.;public void addUnavailableVariable(String name) {_		this.unavailableVariables.add(name)__	};add,the,specified,variable,name,as,unavailable,for,that,context,any,expression,trying,to,access,this,variable,should,lead,to,an,exception,p,this,permits,the,validation,of,expressions,that,could,potentially,a,variable,even,when,such,variable,isn,t,available,yet,any,expression,trying,to,use,that,variable,should,therefore,fail,to,evaluate;public,void,add,unavailable,variable,string,name,this,unavailable,variables,add,name
CacheEvaluationContext -> public void addUnavailableVariable(String name);1423555982;Add the specified variable name as unavailable for that context. Any expression trying_to access this variable should lead to an exception._<p>This permits the validation of expressions that could potentially a variable even_when such variable isn't available yet. Any expression trying to use that variable should_therefore fail to evaluate.;public void addUnavailableVariable(String name) {_		this.unavailableVariables.add(name)__	};add,the,specified,variable,name,as,unavailable,for,that,context,any,expression,trying,to,access,this,variable,should,lead,to,an,exception,p,this,permits,the,validation,of,expressions,that,could,potentially,a,variable,even,when,such,variable,isn,t,available,yet,any,expression,trying,to,use,that,variable,should,therefore,fail,to,evaluate;public,void,add,unavailable,variable,string,name,this,unavailable,variables,add,name
CacheEvaluationContext -> public void addUnavailableVariable(String name);1467730834;Add the specified variable name as unavailable for that context. Any expression trying_to access this variable should lead to an exception._<p>This permits the validation of expressions that could potentially a variable even_when such variable isn't available yet. Any expression trying to use that variable should_therefore fail to evaluate.;public void addUnavailableVariable(String name) {_		this.unavailableVariables.add(name)__	};add,the,specified,variable,name,as,unavailable,for,that,context,any,expression,trying,to,access,this,variable,should,lead,to,an,exception,p,this,permits,the,validation,of,expressions,that,could,potentially,a,variable,even,when,such,variable,isn,t,available,yet,any,expression,trying,to,use,that,variable,should,therefore,fail,to,evaluate;public,void,add,unavailable,variable,string,name,this,unavailable,variables,add,name
CacheEvaluationContext -> public void addUnavailableVariable(String name);1470770678;Add the specified variable name as unavailable for that context._Any expression trying to access this variable should lead to an exception._<p>This permits the validation of expressions that could potentially a_variable even when such variable isn't available yet. Any expression_trying to use that variable should therefore fail to evaluate.;public void addUnavailableVariable(String name) {_		this.unavailableVariables.add(name)__	};add,the,specified,variable,name,as,unavailable,for,that,context,any,expression,trying,to,access,this,variable,should,lead,to,an,exception,p,this,permits,the,validation,of,expressions,that,could,potentially,a,variable,even,when,such,variable,isn,t,available,yet,any,expression,trying,to,use,that,variable,should,therefore,fail,to,evaluate;public,void,add,unavailable,variable,string,name,this,unavailable,variables,add,name
CacheEvaluationContext -> public void addUnavailableVariable(String name);1502974979;Add the specified variable name as unavailable for that context._Any expression trying to access this variable should lead to an exception._<p>This permits the validation of expressions that could potentially a_variable even when such variable isn't available yet. Any expression_trying to use that variable should therefore fail to evaluate.;public void addUnavailableVariable(String name) {_		this.unavailableVariables.add(name)__	};add,the,specified,variable,name,as,unavailable,for,that,context,any,expression,trying,to,access,this,variable,should,lead,to,an,exception,p,this,permits,the,validation,of,expressions,that,could,potentially,a,variable,even,when,such,variable,isn,t,available,yet,any,expression,trying,to,use,that,variable,should,therefore,fail,to,evaluate;public,void,add,unavailable,variable,string,name,this,unavailable,variables,add,name
CacheEvaluationContext -> @Override 	public Object lookupVariable(String name);1404735499;Load the param information only when needed.;@Override_	public Object lookupVariable(String name) {_		if (this.unavailableVariables.contains(name)) {_			throw new VariableNotAvailableException(name)__		}_		Object variable = super.lookupVariable(name)__		if (variable != null) {_			return variable__		}_		if (!this.paramLoaded) {_			loadArgsAsVariables()__			this.paramLoaded = true__			variable = super.lookupVariable(name)__		}_		return variable__	};load,the,param,information,only,when,needed;override,public,object,lookup,variable,string,name,if,this,unavailable,variables,contains,name,throw,new,variable,not,available,exception,name,object,variable,super,lookup,variable,name,if,variable,null,return,variable,if,this,param,loaded,load,args,as,variables,this,param,loaded,true,variable,super,lookup,variable,name,return,variable
CacheEvaluationContext -> @Override 	public Object lookupVariable(String name);1422279854;Load the param information only when needed.;@Override_	public Object lookupVariable(String name) {_		if (this.unavailableVariables.contains(name)) {_			throw new VariableNotAvailableException(name)__		}_		Object variable = super.lookupVariable(name)__		if (variable != null) {_			return variable__		}_		if (!this.paramLoaded) {_			loadArgsAsVariables()__			this.paramLoaded = true__			variable = super.lookupVariable(name)__		}_		return variable__	};load,the,param,information,only,when,needed;override,public,object,lookup,variable,string,name,if,this,unavailable,variables,contains,name,throw,new,variable,not,available,exception,name,object,variable,super,lookup,variable,name,if,variable,null,return,variable,if,this,param,loaded,load,args,as,variables,this,param,loaded,true,variable,super,lookup,variable,name,return,variable
CacheEvaluationContext -> @Override 	public Object lookupVariable(String name);1423555982;Load the param information only when needed.;@Override_	public Object lookupVariable(String name) {_		if (this.unavailableVariables.contains(name)) {_			throw new VariableNotAvailableException(name)__		}_		return super.lookupVariable(name)__	};load,the,param,information,only,when,needed;override,public,object,lookup,variable,string,name,if,this,unavailable,variables,contains,name,throw,new,variable,not,available,exception,name,return,super,lookup,variable,name
CacheEvaluationContext -> @Override 	public Object lookupVariable(String name);1467730834;Load the param information only when needed.;@Override_	public Object lookupVariable(String name) {_		if (this.unavailableVariables.contains(name)) {_			throw new VariableNotAvailableException(name)__		}_		return super.lookupVariable(name)__	};load,the,param,information,only,when,needed;override,public,object,lookup,variable,string,name,if,this,unavailable,variables,contains,name,throw,new,variable,not,available,exception,name,return,super,lookup,variable,name
CacheEvaluationContext -> @Override 	public Object lookupVariable(String name);1470770678;Load the param information only when needed.;@Override_	public Object lookupVariable(String name) {_		if (this.unavailableVariables.contains(name)) {_			throw new VariableNotAvailableException(name)__		}_		return super.lookupVariable(name)__	};load,the,param,information,only,when,needed;override,public,object,lookup,variable,string,name,if,this,unavailable,variables,contains,name,throw,new,variable,not,available,exception,name,return,super,lookup,variable,name
