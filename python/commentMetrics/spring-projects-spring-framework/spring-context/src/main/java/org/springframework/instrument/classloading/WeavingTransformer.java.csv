commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Add a class file transformer to be applied by this weaver.  * @param transformer the class file transformer to register  */ ;/**  * Add a class file transformer to be applied by this weaver.  * @param transformer the class file transformer to register  */ public void addTransformer(ClassFileTransformer transformer) {     Assert.notNull(transformer, "Transformer must not be null").     this.transformers.add(transformer). }
true;public;2;4;/**  * Apply transformation on a given class byte definition.  * The method will always return a non-null byte array (if no transformation has taken place  * the array content will be identical to the original one).  * @param className the full qualified name of the class in dot format (i.e. some.package.SomeClass)  * @param bytes class byte definition  * @return (possibly transformed) class byte definition  */ ;/**  * Apply transformation on a given class byte definition.  * The method will always return a non-null byte array (if no transformation has taken place  * the array content will be identical to the original one).  * @param className the full qualified name of the class in dot format (i.e. some.package.SomeClass)  * @param bytes class byte definition  * @return (possibly transformed) class byte definition  */ public byte[] transformIfNecessary(String className, byte[] bytes) {     String internalName = StringUtils.replace(className, ".", "/").     return transformIfNecessary(className, internalName, bytes, null). }
true;public;4;15;/**  * Apply transformation on a given class byte definition.  * The method will always return a non-null byte array (if no transformation has taken place  * the array content will be identical to the original one).  * @param className the full qualified name of the class in dot format (i.e. some.package.SomeClass)  * @param internalName class name internal name in / format (i.e. some/package/SomeClass)  * @param bytes class byte definition  * @param pd protection domain to be used (can be null)  * @return (possibly transformed) class byte definition  */ ;/**  * Apply transformation on a given class byte definition.  * The method will always return a non-null byte array (if no transformation has taken place  * the array content will be identical to the original one).  * @param className the full qualified name of the class in dot format (i.e. some.package.SomeClass)  * @param internalName class name internal name in / format (i.e. some/package/SomeClass)  * @param bytes class byte definition  * @param pd protection domain to be used (can be null)  * @return (possibly transformed) class byte definition  */ public byte[] transformIfNecessary(String className, String internalName, byte[] bytes, @Nullable ProtectionDomain pd) {     byte[] result = bytes.     for (ClassFileTransformer cft : this.transformers) {         try {             byte[] transformed = cft.transform(this.classLoader, internalName, null, pd, result).             if (transformed != null) {                 result = transformed.             }         } catch (IllegalClassFormatException ex) {             throw new IllegalStateException("Class file transformation failed", ex).         }     }     return result. }
