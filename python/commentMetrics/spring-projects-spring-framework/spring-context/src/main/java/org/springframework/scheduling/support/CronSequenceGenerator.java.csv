# id;timestamp;commentText;codeText;commentWords;codeWords
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1461427554;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1467730834;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1468523488;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1471340574;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1471388018;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1484929688;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1486720577;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> public static boolean isValidExpression(String expression);1496837955;Determine whether the specified expression represents a valid cron pattern._<p>Specifically, this method verifies that the expression contains six_fields separated by single spaces._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(String expression) {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		return areValidCronFields(fields)__	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,p,specifically,this,method,verifies,that,the,expression,contains,six,fields,separated,by,single,spaces,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,string,expression,string,fields,string,utils,tokenize,to,string,array,expression,return,are,valid,cron,fields,fields
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1328020251;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (fields.length != 6) {_			throw new IllegalArgumentException(String.format(""_					+ "cron expression must consist of 6 fields (found %d in %s)", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,fields,length,6,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1337698097;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (fields.length != 6) {_			throw new IllegalArgumentException(String.format(""_					+ "cron expression must consist of 6 fields (found %d in %s)", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,fields,length,6,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1356735495;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (fields.length != 6) {_			throw new IllegalArgumentException(String.format(""_					+ "cron expression must consist of 6 fields (found %d in %s)", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,fields,length,6,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1362408075;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (fields.length != 6) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,fields,length,6,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1427899524;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (fields.length != 6) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,fields,length,6,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1461426540;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!validateCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,validate,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1461427554;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1467730834;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1468523488;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1471340574;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1471388018;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1484929688;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1486720577;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1496837955;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		setNumberHits(this.seconds, fields[0], 0, 60)__		setNumberHits(this.minutes, fields[1], 0, 60)__		setNumberHits(this.hours, fields[2], 0, 24)__		setDaysOfMonth(this.daysOfMonth, fields[3])__		setMonths(this.months, fields[4])__		setDays(this.daysOfWeek, replaceOrdinals(fields[5], "SUN,MON,TUE,WED,THU,FRI,SAT"), 8)__		if (this.daysOfWeek.get(7)) {_			_			this.daysOfWeek.set(0)__			this.daysOfWeek.clear(7)__		}_	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,set,number,hits,this,seconds,fields,0,0,60,set,number,hits,this,minutes,fields,1,0,60,set,number,hits,this,hours,fields,2,0,24,set,days,of,month,this,days,of,month,fields,3,set,months,this,months,fields,4,set,days,this,days,of,week,replace,ordinals,fields,5,sun,mon,tue,wed,thu,fri,sat,8,if,this,days,of,week,get,7,this,days,of,week,set,0,this,days,of,week,clear,7
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1498780472;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		doParse(fields)__	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,do,parse,fields
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1522273692;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		doParse(fields)__	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,do,parse,fields
CronSequenceGenerator -> private void parse(String expression) throws IllegalArgumentException;1530174524;Parse the given pattern expression.;private void parse(String expression) throws IllegalArgumentException {_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			throw new IllegalArgumentException(String.format(_					"Cron expression must consist of 6 fields (found %d in \"%s\")", fields.length, expression))__		}_		doParse(fields)__	};parse,the,given,pattern,expression;private,void,parse,string,expression,throws,illegal,argument,exception,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,throw,new,illegal,argument,exception,string,format,cron,expression,must,consist,of,6,fields,found,d,in,s,fields,length,expression,do,parse,fields
CronSequenceGenerator -> String getExpression();1427899524;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1461426540;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1461427554;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1467730834;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1468523488;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1471340574;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1471388018;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1484929688;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1486720577;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1496837955;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1498780472;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1522273692;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> String getExpression();1530174524;Return the cron pattern that this sequence generator has been built for.;String getExpression() {_		return this.expression__	};return,the,cron,pattern,that,this,sequence,generator,has,been,built,for;string,get,expression,return,this,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1328020251;Construct a {@link CronSequenceGenerator} from the pattern provided._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1337698097;Construct a {@link CronSequenceGenerator} from the pattern provided._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1356735495;Construct a {@link CronSequenceGenerator} from the pattern provided._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1362408075;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1427899524;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1461426540;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1461427554;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1467730834;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1468523488;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1471340574;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1471388018;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1484929688;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1486720577;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1496837955;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1498780472;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1522273692;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> public CronSequenceGenerator(String expression, TimeZone timeZone);1530174524;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the specified {@link TimeZone}._@param expression a space-separated list of time fields_@param timeZone the TimeZone to use for generated trigger times_@throws IllegalArgumentException if the pattern cannot be parsed;public CronSequenceGenerator(String expression, TimeZone timeZone) {_		this.expression = expression__		this.timeZone = timeZone__		parse(expression)__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,specified,link,time,zone,param,expression,a,space,separated,list,of,time,fields,param,time,zone,the,time,zone,to,use,for,generated,trigger,times,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed;public,cron,sequence,generator,string,expression,time,zone,time,zone,this,expression,expression,this,time,zone,time,zone,parse,expression
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1328020251;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1337698097;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1356735495;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1362408075;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1427899524;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1461426540;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1461427554;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1467730834;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1468523488;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1471340574;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1471388018;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1484929688;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1486720577;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1496837955;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Arrays.asList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,arrays,as,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1498780472;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Collections.singletonList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,collections,singleton,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1522273692;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Collections.singletonList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,collections,singleton,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders);1530174524;Search the bits provided for the next set bit after the value provided,_and reset the calendar._@param bits a {@link BitSet} representing the allowed values of the field_@param value the current value of the field_@param calendar the calendar to increment as we move through the bits_@param field the field to increment in the calendar (@see_{@link Calendar} for the static constants defining valid fields)_@param lowerOrders the Calendar field ids that should be reset (i.e. the_ones of lower significance than the field of interest)_@return the value of the calendar field that is next in the sequence;private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {_		int nextValue = bits.nextSetBit(value)__		_		if (nextValue == -1) {_			calendar.add(nextField, 1)__			reset(calendar, Collections.singletonList(field))__			nextValue = bits.nextSetBit(0)__		}_		if (nextValue != value) {_			calendar.set(field, nextValue)__			reset(calendar, lowerOrders)__		}_		return nextValue__	};search,the,bits,provided,for,the,next,set,bit,after,the,value,provided,and,reset,the,calendar,param,bits,a,link,bit,set,representing,the,allowed,values,of,the,field,param,value,the,current,value,of,the,field,param,calendar,the,calendar,to,increment,as,we,move,through,the,bits,param,field,the,field,to,increment,in,the,calendar,see,link,calendar,for,the,static,constants,defining,valid,fields,param,lower,orders,the,calendar,field,ids,that,should,be,reset,i,e,the,ones,of,lower,significance,than,the,field,of,interest,return,the,value,of,the,calendar,field,that,is,next,in,the,sequence;private,int,find,next,bit,set,bits,int,value,calendar,calendar,int,field,int,next,field,list,integer,lower,orders,int,next,value,bits,next,set,bit,value,if,next,value,1,calendar,add,next,field,1,reset,calendar,collections,singleton,list,field,next,value,bits,next,set,bit,0,if,next,value,value,calendar,set,field,next,value,reset,calendar,lower,orders,return,next,value
CronSequenceGenerator -> public static boolean isValidExpression(@Nullable String expression);1498780472;Determine whether the specified expression represents a valid cron pattern._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(@Nullable String expression) {_		if (expression == null) {_			return false__		}_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			return false__		}_		try {_			new CronSequenceGenerator(expression, fields)__			return true__		}_		catch (IllegalArgumentException ex) {_			return false__		}_	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,nullable,string,expression,if,expression,null,return,false,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,return,false,try,new,cron,sequence,generator,expression,fields,return,true,catch,illegal,argument,exception,ex,return,false
CronSequenceGenerator -> public static boolean isValidExpression(@Nullable String expression);1522273692;Determine whether the specified expression represents a valid cron pattern._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(@Nullable String expression) {_		if (expression == null) {_			return false__		}_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			return false__		}_		try {_			new CronSequenceGenerator(expression, fields)__			return true__		}_		catch (IllegalArgumentException ex) {_			return false__		}_	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,nullable,string,expression,if,expression,null,return,false,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,return,false,try,new,cron,sequence,generator,expression,fields,return,true,catch,illegal,argument,exception,ex,return,false
CronSequenceGenerator -> public static boolean isValidExpression(@Nullable String expression);1530174524;Determine whether the specified expression represents a valid cron pattern._@param expression the expression to evaluate_@return {@code true} if the given expression is a valid cron expression_@since 4.3;public static boolean isValidExpression(@Nullable String expression) {_		if (expression == null) {_			return false__		}_		String[] fields = StringUtils.tokenizeToStringArray(expression, " ")__		if (!areValidCronFields(fields)) {_			return false__		}_		try {_			new CronSequenceGenerator(expression, fields)__			return true__		}_		catch (IllegalArgumentException ex) {_			return false__		}_	};determine,whether,the,specified,expression,represents,a,valid,cron,pattern,param,expression,the,expression,to,evaluate,return,code,true,if,the,given,expression,is,a,valid,cron,expression,since,4,3;public,static,boolean,is,valid,expression,nullable,string,expression,if,expression,null,return,false,string,fields,string,utils,tokenize,to,string,array,expression,if,are,valid,cron,fields,fields,return,false,try,new,cron,sequence,generator,expression,fields,return,true,catch,illegal,argument,exception,ex,return,false
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1362408075;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1427899524;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1461426540;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1461427554;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1467730834;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1468523488;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1471340574;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1471388018;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1484929688;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1486720577;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1496837955;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1498780472;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1522273692;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> public CronSequenceGenerator(String expression);1530174524;Construct a {@link CronSequenceGenerator} from the pattern provided,_using the default {@link TimeZone}._@param expression a space-separated list of time fields_@throws IllegalArgumentException if the pattern cannot be parsed_@see java.util.TimeZone#getDefault();public CronSequenceGenerator(String expression) {_		this(expression, TimeZone.getDefault())__	};construct,a,link,cron,sequence,generator,from,the,pattern,provided,using,the,default,link,time,zone,param,expression,a,space,separated,list,of,time,fields,throws,illegal,argument,exception,if,the,pattern,cannot,be,parsed,see,java,util,time,zone,get,default;public,cron,sequence,generator,string,expression,this,expression,time,zone,get,default
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1328020251;Replace the values in the commaSeparatedList (case insensitive) with_their index in the list._@return a new string with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1337698097;Replace the values in the commaSeparatedList (case insensitive) with_their index in the list._@return a new string with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1356735495;Replace the values in the commaSeparatedList (case insensitive) with_their index in the list._@return a new string with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1362408075;Replace the values in the commaSeparatedList (case insensitive) with_their index in the list._@return a new string with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1427899524;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1461426540;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1461427554;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1467730834;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1468523488;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1471340574;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1471388018;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1484929688;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1486720577;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1496837955;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1498780472;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1522273692;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> private String replaceOrdinals(String value, String commaSeparatedList);1530174524;Replace the values in the comma-separated list (case insensitive)_with their index in the list._@return a new String with the values from the list replaced;private String replaceOrdinals(String value, String commaSeparatedList) {_		String[] list = StringUtils.commaDelimitedListToStringArray(commaSeparatedList)__		for (int i = 0_ i < list.length_ i++) {_			String item = list[i].toUpperCase()__			value = StringUtils.replace(value.toUpperCase(), item, "" + i)__		}_		return value__	};replace,the,values,in,the,comma,separated,list,case,insensitive,with,their,index,in,the,list,return,a,new,string,with,the,values,from,the,list,replaced;private,string,replace,ordinals,string,value,string,comma,separated,list,string,list,string,utils,comma,delimited,list,to,string,array,comma,separated,list,for,int,i,0,i,list,length,i,string,item,list,i,to,upper,case,value,string,utils,replace,value,to,upper,case,item,i,return,value
CronSequenceGenerator -> public Date next(Date date);1328020251;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.add(Calendar.SECOND, 1)__		calendar.set(Calendar.MILLISECOND, 0)___		doNext(calendar, calendar.get(Calendar.YEAR))___		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,add,calendar,second,1,calendar,set,calendar,millisecond,0,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1337698097;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.add(Calendar.SECOND, 1)__		calendar.set(Calendar.MILLISECOND, 0)___		doNext(calendar, calendar.get(Calendar.YEAR))___		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,add,calendar,second,1,calendar,set,calendar,millisecond,0,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1356735495;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.add(Calendar.SECOND, 1)__		calendar.set(Calendar.MILLISECOND, 0)___		doNext(calendar, calendar.get(Calendar.YEAR))___		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,add,calendar,second,1,calendar,set,calendar,millisecond,0,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1362408075;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1427899524;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1461426540;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1461427554;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1467730834;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1468523488;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1471340574;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1471388018;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1484929688;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1486720577;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1496837955;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1498780472;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1522273692;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> public Date next(Date date);1530174524;Get the next {@link Date} in the sequence matching the Cron pattern and_after the value provided. The return value will have a whole number of_seconds, and will be after the input value._@param date a seed value_@return the next value matching the pattern;public Date next(Date date) {_		__		Calendar calendar = new GregorianCalendar()__		calendar.setTimeZone(this.timeZone)__		calendar.setTime(date)___		_		calendar.set(Calendar.MILLISECOND, 0)__		long originalTimestamp = calendar.getTimeInMillis()__		doNext(calendar, calendar.get(Calendar.YEAR))___		if (calendar.getTimeInMillis() == originalTimestamp) {_			_			calendar.add(Calendar.SECOND, 1)__			doNext(calendar, calendar.get(Calendar.YEAR))__		}__		return calendar.getTime()__	};get,the,next,link,date,in,the,sequence,matching,the,cron,pattern,and,after,the,value,provided,the,return,value,will,have,a,whole,number,of,seconds,and,will,be,after,the,input,value,param,date,a,seed,value,return,the,next,value,matching,the,pattern;public,date,next,date,date,calendar,calendar,new,gregorian,calendar,calendar,set,time,zone,this,time,zone,calendar,set,time,date,calendar,set,calendar,millisecond,0,long,original,timestamp,calendar,get,time,in,millis,do,next,calendar,calendar,get,calendar,year,if,calendar,get,time,in,millis,original,timestamp,calendar,add,calendar,second,1,do,next,calendar,calendar,get,calendar,year,return,calendar,get,time
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1328020251;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1337698097;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1356735495;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1362408075;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1427899524;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1461426540;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1461427554;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1467730834;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1468523488;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1471340574;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1471388018;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1484929688;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1486720577;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1496837955;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1498780472;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1522273692;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
CronSequenceGenerator -> private void reset(Calendar calendar, List<Integer> fields);1530174524;Reset the calendar setting all the fields provided to zero.;private void reset(Calendar calendar, List<Integer> fields) {_		for (int field : fields) {_			calendar.set(field, field == Calendar.DAY_OF_MONTH ? 1 : 0)__		}_	};reset,the,calendar,setting,all,the,fields,provided,to,zero;private,void,reset,calendar,calendar,list,integer,fields,for,int,field,fields,calendar,set,field,field,calendar,1,0
