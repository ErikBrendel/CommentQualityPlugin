commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setPoolSize(String poolSize) {     this.poolSize = poolSize. }
false;public;1;3;;public void setQueueCapacity(int queueCapacity) {     this.queueCapacity = queueCapacity. }
false;public;1;3;;public void setRejectedExecutionHandler(RejectedExecutionHandler rejectedExecutionHandler) {     this.rejectedExecutionHandler = rejectedExecutionHandler. }
false;public;1;3;;public void setKeepAliveSeconds(int keepAliveSeconds) {     this.keepAliveSeconds = keepAliveSeconds. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;19;;@Override public void afterPropertiesSet() {     ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor().     determinePoolSizeRange(executor).     if (this.queueCapacity != null) {         executor.setQueueCapacity(this.queueCapacity).     }     if (this.keepAliveSeconds != null) {         executor.setKeepAliveSeconds(this.keepAliveSeconds).     }     if (this.rejectedExecutionHandler != null) {         executor.setRejectedExecutionHandler(this.rejectedExecutionHandler).     }     if (this.beanName != null) {         executor.setThreadNamePrefix(this.beanName + "-").     }     executor.afterPropertiesSet().     this.target = executor. }
false;private;1;42;;private void determinePoolSizeRange(ThreadPoolTaskExecutor executor) {     if (StringUtils.hasText(this.poolSize)) {         try {             int corePoolSize.             int maxPoolSize.             int separatorIndex = this.poolSize.indexOf('-').             if (separatorIndex != -1) {                 corePoolSize = Integer.valueOf(this.poolSize.substring(0, separatorIndex)).                 maxPoolSize = Integer.valueOf(this.poolSize.substring(separatorIndex + 1, this.poolSize.length())).                 if (corePoolSize > maxPoolSize) {                     throw new IllegalArgumentException("Lower bound of pool-size range must not exceed the upper bound").                 }                 if (this.queueCapacity == null) {                     // No queue-capacity provided, so unbounded                     if (corePoolSize == 0) {                         // Actually set 'corePoolSize' to the upper bound of the range                         // but allow core threads to timeout...                         executor.setAllowCoreThreadTimeOut(true).                         corePoolSize = maxPoolSize.                     } else {                         // Non-zero lower bound implies a core-max size range...                         throw new IllegalArgumentException("A non-zero lower bound for the size range requires a queue-capacity value").                     }                 }             } else {                 Integer value = Integer.valueOf(this.poolSize).                 corePoolSize = value.                 maxPoolSize = value.             }             executor.setCorePoolSize(corePoolSize).             executor.setMaxPoolSize(maxPoolSize).         } catch (NumberFormatException ex) {             throw new IllegalArgumentException("Invalid pool-size value [" + this.poolSize + "]: only single " + "maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported", ex).         }     } }
false;public;0;5;;@Override @Nullable public TaskExecutor getObject() {     return this.target. }
false;public;0;4;;@Override public Class<? extends TaskExecutor> getObjectType() {     return (this.target != null ? this.target.getClass() : ThreadPoolTaskExecutor.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;6;;@Override public void destroy() {     if (this.target != null) {         this.target.destroy().     } }
