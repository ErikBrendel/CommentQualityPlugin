commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the name of the language meant for evaluating the scripts (e.g. "Groovy").  * <p>This is effectively an alias for {@link #setEngineName "engineName"},  * potentially (but not yet) providing common abbreviations for certain languages  * beyond what the JSR-223 script engine factory exposes.  * @see #setEngineName  */ ;/**  * Set the name of the language meant for evaluating the scripts (e.g. "Groovy").  * <p>This is effectively an alias for {@link #setEngineName "engineName"},  * potentially (but not yet) providing common abbreviations for certain languages  * beyond what the JSR-223 script engine factory exposes.  * @see #setEngineName  */ public void setLanguage(String language) {     this.engineName = language. }
true;public;1;3;/**  * Set the name of the script engine for evaluating the scripts (e.g. "Groovy"),  * as exposed by the JSR-223 script engine factory.  * @since 4.2.2  * @see #setLanguage  */ ;/**  * Set the name of the script engine for evaluating the scripts (e.g. "Groovy"),  * as exposed by the JSR-223 script engine factory.  * @since 4.2.2  * @see #setLanguage  */ public void setEngineName(String engineName) {     this.engineName = engineName. }
true;public;1;8;/**  * Set the globally scoped bindings on the underlying script engine manager,  * shared by all scripts, as an alternative to script argument bindings.  * @since 4.2.2  * @see #evaluate(ScriptSource, Map)  * @see javax.script.ScriptEngineManager#setBindings(Bindings)  * @see javax.script.SimpleBindings  */ ;/**  * Set the globally scoped bindings on the underlying script engine manager,  * shared by all scripts, as an alternative to script argument bindings.  * @since 4.2.2  * @see #evaluate(ScriptSource, Map)  * @see javax.script.ScriptEngineManager#setBindings(Bindings)  * @see javax.script.SimpleBindings  */ public void setGlobalBindings(Map<String, Object> globalBindings) {     Bindings bindings = StandardScriptUtils.getBindings(globalBindings).     this.globalBindings = bindings.     ScriptEngineManager scriptEngineManager = this.scriptEngineManager.     if (scriptEngineManager != null) {         scriptEngineManager.setBindings(bindings).     } }
false;public;1;12;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     ScriptEngineManager scriptEngineManager = this.scriptEngineManager.     if (scriptEngineManager == null) {         scriptEngineManager = new ScriptEngineManager(classLoader).         this.scriptEngineManager = scriptEngineManager.         Bindings bindings = this.globalBindings.         if (bindings != null) {             scriptEngineManager.setBindings(bindings).         }     } }
false;public;1;5;;@Override @Nullable public Object evaluate(ScriptSource script) {     return evaluate(script, null). }
false;public;2;20;;@Override @Nullable public Object evaluate(ScriptSource script, @Nullable Map<String, Object> argumentBindings) {     ScriptEngine engine = getScriptEngine(script).     try {         if (CollectionUtils.isEmpty(argumentBindings)) {             return engine.eval(script.getScriptAsString()).         } else {             Bindings bindings = StandardScriptUtils.getBindings(argumentBindings).             return engine.eval(script.getScriptAsString(), bindings).         }     } catch (IOException ex) {         throw new ScriptCompilationException(script, "Cannot access script for ScriptEngine", ex).     } catch (ScriptException ex) {         throw new ScriptCompilationException(script, new StandardScriptEvalException(ex)).     } }
true;protected;1;28;/**  * Obtain the JSR-223 ScriptEngine to use for the given script.  * @param script the script to evaluate  * @return the ScriptEngine (never {@code null})  */ ;/**  * Obtain the JSR-223 ScriptEngine to use for the given script.  * @param script the script to evaluate  * @return the ScriptEngine (never {@code null})  */ protected ScriptEngine getScriptEngine(ScriptSource script) {     ScriptEngineManager scriptEngineManager = this.scriptEngineManager.     if (scriptEngineManager == null) {         scriptEngineManager = new ScriptEngineManager().         this.scriptEngineManager = scriptEngineManager.     }     if (StringUtils.hasText(this.engineName)) {         return StandardScriptUtils.retrieveEngineByName(scriptEngineManager, this.engineName).     } else if (script instanceof ResourceScriptSource) {         Resource resource = ((ResourceScriptSource) script).getResource().         String extension = StringUtils.getFilenameExtension(resource.getFilename()).         if (extension == null) {             throw new IllegalStateException("No script language defined, and no file extension defined for resource: " + resource).         }         ScriptEngine engine = scriptEngineManager.getEngineByExtension(extension).         if (engine == null) {             throw new IllegalStateException("No matching engine found for file extension '" + extension + "'").         }         return engine.     } else {         throw new IllegalStateException("No script language defined, and no resource associated with script: " + script).     } }
