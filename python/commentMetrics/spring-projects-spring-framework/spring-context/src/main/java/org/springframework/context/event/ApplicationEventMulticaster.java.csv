commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Add a listener to be notified of all events.  * @param listener the listener to add  */ ;/**  * Add a listener to be notified of all events.  * @param listener the listener to add  */ void addApplicationListener(ApplicationListener<?> listener).
true;;1;1;/**  * Add a listener bean to be notified of all events.  * @param listenerBeanName the name of the listener bean to add  */ ;/**  * Add a listener bean to be notified of all events.  * @param listenerBeanName the name of the listener bean to add  */ void addApplicationListenerBean(String listenerBeanName).
true;;1;1;/**  * Remove a listener from the notification list.  * @param listener the listener to remove  */ ;/**  * Remove a listener from the notification list.  * @param listener the listener to remove  */ void removeApplicationListener(ApplicationListener<?> listener).
true;;1;1;/**  * Remove a listener bean from the notification list.  * @param listenerBeanName the name of the listener bean to add  */ ;/**  * Remove a listener bean from the notification list.  * @param listenerBeanName the name of the listener bean to add  */ void removeApplicationListenerBean(String listenerBeanName).
true;;0;1;/**  * Remove all listeners registered with this multicaster.  * <p>After a remove call, the multicaster will perform no action  * on event notification until new listeners are being registered.  */ ;/**  * Remove all listeners registered with this multicaster.  * <p>After a remove call, the multicaster will perform no action  * on event notification until new listeners are being registered.  */ void removeAllListeners().
true;;1;1;/**  * Multicast the given application event to appropriate listeners.  * <p>Consider using {@link #multicastEvent(ApplicationEvent, ResolvableType)}  * if possible as it provides a better support for generics-based events.  * @param event the event to multicast  */ ;/**  * Multicast the given application event to appropriate listeners.  * <p>Consider using {@link #multicastEvent(ApplicationEvent, ResolvableType)}  * if possible as it provides a better support for generics-based events.  * @param event the event to multicast  */ void multicastEvent(ApplicationEvent event).
true;;2;1;/**  * Multicast the given application event to appropriate listeners.  * <p>If the {@code eventType} is {@code null}, a default type is built  * based on the {@code event} instance.  * @param event the event to multicast  * @param eventType the type of event (can be null)  * @since 4.2  */ ;/**  * Multicast the given application event to appropriate listeners.  * <p>If the {@code eventType} is {@code null}, a default type is built  * based on the {@code event} instance.  * @param event the event to multicast  * @param eventType the type of event (can be null)  * @since 4.2  */ void multicastEvent(ApplicationEvent event, @Nullable ResolvableType eventType).
