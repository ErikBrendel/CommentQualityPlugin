commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;16;;@Override @SuppressWarnings("deprecation") protected Class<?> getBeanClass(Element element) {     // its current set of PropertySources.     if (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) {         return PropertySourcesPlaceholderConfigurer.class.     }     // This is deprecated. to be removed along with PropertyPlaceholderConfigurer itself.     return org.springframework.beans.factory.config.PropertyPlaceholderConfigurer.class. }
false;protected;3;23;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     super.doParse(element, parserContext, builder).     builder.addPropertyValue("ignoreUnresolvablePlaceholders", Boolean.valueOf(element.getAttribute("ignore-unresolvable"))).     String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE).     if (StringUtils.hasLength(systemPropertiesModeName) && !systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {         builder.addPropertyValue("systemPropertiesModeName", "SYSTEM_PROPERTIES_MODE_" + systemPropertiesModeName).     }     if (element.hasAttribute("value-separator")) {         builder.addPropertyValue("valueSeparator", element.getAttribute("value-separator")).     }     if (element.hasAttribute("trim-values")) {         builder.addPropertyValue("trimValues", element.getAttribute("trim-values")).     }     if (element.hasAttribute("null-value")) {         builder.addPropertyValue("nullValue", element.getAttribute("null-value")).     } }
