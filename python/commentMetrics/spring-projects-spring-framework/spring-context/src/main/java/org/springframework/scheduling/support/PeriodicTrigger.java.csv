# id;timestamp;commentText;codeText;commentWords;codeWords
PeriodicTrigger -> public PeriodicTrigger(long period);1328020251;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1356735495;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1357119239;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1362408075;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1368482696;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1496837955;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1510675759;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1530174524;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period);1530190293;Create a trigger with the given period in milliseconds.;public PeriodicTrigger(long period) {_		this(period, null)__	};create,a,trigger,with,the,given,period,in,milliseconds;public,periodic,trigger,long,period,this,period,null
PeriodicTrigger -> public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit);1496837955;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,nullable,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit);1510675759;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,nullable,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit);1530174524;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,nullable,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit);1530190293;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, @Nullable TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,nullable,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public TimeUnit getTimeUnit();1510675759;Return this trigger's time unit (milliseconds by default)._@since 5.0.2;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,this,trigger,s,time,unit,milliseconds,by,default,since,5,0,2;public,time,unit,get,time,unit,return,this,time,unit
PeriodicTrigger -> public TimeUnit getTimeUnit();1530174524;Return this trigger's time unit (milliseconds by default)._@since 5.0.2;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,this,trigger,s,time,unit,milliseconds,by,default,since,5,0,2;public,time,unit,get,time,unit,return,this,time,unit
PeriodicTrigger -> public TimeUnit getTimeUnit();1530190293;Return this trigger's time unit (milliseconds by default)._@since 5.0.2;public TimeUnit getTimeUnit() {_		return this.timeUnit__	};return,this,trigger,s,time,unit,milliseconds,by,default,since,5,0,2;public,time,unit,get,time,unit,return,this,time,unit
PeriodicTrigger -> public Date nextExecutionTime(TriggerContext triggerContext);1328020251;Returns the time after which a task should run again.;public Date nextExecutionTime(TriggerContext triggerContext) {_		if (triggerContext.lastScheduledExecutionTime() == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		else if (this.fixedRate) {_			return new Date(triggerContext.lastScheduledExecutionTime().getTime() + this.period)__		}_		return new Date(triggerContext.lastCompletionTime().getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;public,date,next,execution,time,trigger,context,trigger,context,if,trigger,context,last,scheduled,execution,time,null,return,new,date,system,current,time,millis,this,initial,delay,else,if,this,fixed,rate,return,new,date,trigger,context,last,scheduled,execution,time,get,time,this,period,return,new,date,trigger,context,last,completion,time,get,time,this,period
PeriodicTrigger -> public Date nextExecutionTime(TriggerContext triggerContext);1357119239;Returns the time after which a task should run again.;public Date nextExecutionTime(TriggerContext triggerContext) {_		if (triggerContext.lastScheduledExecutionTime() == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		else if (this.fixedRate) {_			return new Date(triggerContext.lastScheduledExecutionTime().getTime() + this.period)__		}_		return new Date(triggerContext.lastCompletionTime().getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;public,date,next,execution,time,trigger,context,trigger,context,if,trigger,context,last,scheduled,execution,time,null,return,new,date,system,current,time,millis,this,initial,delay,else,if,this,fixed,rate,return,new,date,trigger,context,last,scheduled,execution,time,get,time,this,period,return,new,date,trigger,context,last,completion,time,get,time,this,period
PeriodicTrigger -> public Date nextExecutionTime(TriggerContext triggerContext);1362408075;Returns the time after which a task should run again.;public Date nextExecutionTime(TriggerContext triggerContext) {_		if (triggerContext.lastScheduledExecutionTime() == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		else if (this.fixedRate) {_			return new Date(triggerContext.lastScheduledExecutionTime().getTime() + this.period)__		}_		return new Date(triggerContext.lastCompletionTime().getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;public,date,next,execution,time,trigger,context,trigger,context,if,trigger,context,last,scheduled,execution,time,null,return,new,date,system,current,time,millis,this,initial,delay,else,if,this,fixed,rate,return,new,date,trigger,context,last,scheduled,execution,time,get,time,this,period,return,new,date,trigger,context,last,completion,time,get,time,this,period
PeriodicTrigger -> public long getInitialDelay();1510675759;Return the initial delay, or 0 if none._@since 5.0.2;public long getInitialDelay() {_		return this.initialDelay__	};return,the,initial,delay,or,0,if,none,since,5,0,2;public,long,get,initial,delay,return,this,initial,delay
PeriodicTrigger -> public long getInitialDelay();1530174524;Return the initial delay, or 0 if none._@since 5.0.2;public long getInitialDelay() {_		return this.initialDelay__	};return,the,initial,delay,or,0,if,none,since,5,0,2;public,long,get,initial,delay,return,this,initial,delay
PeriodicTrigger -> public long getInitialDelay();1530190293;Return the initial delay, or 0 if none._@since 5.0.2;public long getInitialDelay() {_		return this.initialDelay__	};return,the,initial,delay,or,0,if,none,since,5,0,2;public,long,get,initial,delay,return,this,initial,delay
PeriodicTrigger -> @Override 	public Date nextExecutionTime(TriggerContext triggerContext);1356735495;Returns the time after which a task should run again.;@Override_	public Date nextExecutionTime(TriggerContext triggerContext) {_		if (triggerContext.lastScheduledExecutionTime() == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		else if (this.fixedRate) {_			return new Date(triggerContext.lastScheduledExecutionTime().getTime() + this.period)__		}_		return new Date(triggerContext.lastCompletionTime().getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;override,public,date,next,execution,time,trigger,context,trigger,context,if,trigger,context,last,scheduled,execution,time,null,return,new,date,system,current,time,millis,this,initial,delay,else,if,this,fixed,rate,return,new,date,trigger,context,last,scheduled,execution,time,get,time,this,period,return,new,date,trigger,context,last,completion,time,get,time,this,period
PeriodicTrigger -> @Override 	public Date nextExecutionTime(TriggerContext triggerContext);1368482696;Returns the time after which a task should run again.;@Override_	public Date nextExecutionTime(TriggerContext triggerContext) {_		if (triggerContext.lastScheduledExecutionTime() == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		else if (this.fixedRate) {_			return new Date(triggerContext.lastScheduledExecutionTime().getTime() + this.period)__		}_		return new Date(triggerContext.lastCompletionTime().getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;override,public,date,next,execution,time,trigger,context,trigger,context,if,trigger,context,last,scheduled,execution,time,null,return,new,date,system,current,time,millis,this,initial,delay,else,if,this,fixed,rate,return,new,date,trigger,context,last,scheduled,execution,time,get,time,this,period,return,new,date,trigger,context,last,completion,time,get,time,this,period
PeriodicTrigger -> @Override 	public Date nextExecutionTime(TriggerContext triggerContext);1496837955;Returns the time after which a task should run again.;@Override_	public Date nextExecutionTime(TriggerContext triggerContext) {_		Date lastExecution = triggerContext.lastScheduledExecutionTime()__		Date lastCompletion = triggerContext.lastCompletionTime()__		if (lastExecution == null || lastCompletion == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		if (this.fixedRate) {_			return new Date(lastExecution.getTime() + this.period)__		}_		return new Date(lastCompletion.getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;override,public,date,next,execution,time,trigger,context,trigger,context,date,last,execution,trigger,context,last,scheduled,execution,time,date,last,completion,trigger,context,last,completion,time,if,last,execution,null,last,completion,null,return,new,date,system,current,time,millis,this,initial,delay,if,this,fixed,rate,return,new,date,last,execution,get,time,this,period,return,new,date,last,completion,get,time,this,period
PeriodicTrigger -> @Override 	public Date nextExecutionTime(TriggerContext triggerContext);1510675759;Returns the time after which a task should run again.;@Override_	public Date nextExecutionTime(TriggerContext triggerContext) {_		Date lastExecution = triggerContext.lastScheduledExecutionTime()__		Date lastCompletion = triggerContext.lastCompletionTime()__		if (lastExecution == null || lastCompletion == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		if (this.fixedRate) {_			return new Date(lastExecution.getTime() + this.period)__		}_		return new Date(lastCompletion.getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;override,public,date,next,execution,time,trigger,context,trigger,context,date,last,execution,trigger,context,last,scheduled,execution,time,date,last,completion,trigger,context,last,completion,time,if,last,execution,null,last,completion,null,return,new,date,system,current,time,millis,this,initial,delay,if,this,fixed,rate,return,new,date,last,execution,get,time,this,period,return,new,date,last,completion,get,time,this,period
PeriodicTrigger -> @Override 	public Date nextExecutionTime(TriggerContext triggerContext);1530174524;Returns the time after which a task should run again.;@Override_	public Date nextExecutionTime(TriggerContext triggerContext) {_		Date lastExecution = triggerContext.lastScheduledExecutionTime()__		Date lastCompletion = triggerContext.lastCompletionTime()__		if (lastExecution == null || lastCompletion == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		if (this.fixedRate) {_			return new Date(lastExecution.getTime() + this.period)__		}_		return new Date(lastCompletion.getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;override,public,date,next,execution,time,trigger,context,trigger,context,date,last,execution,trigger,context,last,scheduled,execution,time,date,last,completion,trigger,context,last,completion,time,if,last,execution,null,last,completion,null,return,new,date,system,current,time,millis,this,initial,delay,if,this,fixed,rate,return,new,date,last,execution,get,time,this,period,return,new,date,last,completion,get,time,this,period
PeriodicTrigger -> @Override 	public Date nextExecutionTime(TriggerContext triggerContext);1530190293;Returns the time after which a task should run again.;@Override_	public Date nextExecutionTime(TriggerContext triggerContext) {_		Date lastExecution = triggerContext.lastScheduledExecutionTime()__		Date lastCompletion = triggerContext.lastCompletionTime()__		if (lastExecution == null || lastCompletion == null) {_			return new Date(System.currentTimeMillis() + this.initialDelay)__		}_		if (this.fixedRate) {_			return new Date(lastExecution.getTime() + this.period)__		}_		return new Date(lastCompletion.getTime() + this.period)__	};returns,the,time,after,which,a,task,should,run,again;override,public,date,next,execution,time,trigger,context,trigger,context,date,last,execution,trigger,context,last,scheduled,execution,time,date,last,completion,trigger,context,last,completion,time,if,last,execution,null,last,completion,null,return,new,date,system,current,time,millis,this,initial,delay,if,this,fixed,rate,return,new,date,last,execution,get,time,this,period,return,new,date,last,completion,get,time,this,period
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1328020251;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1356735495;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1357119239;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1362408075;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1368482696;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1496837955;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1510675759;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1530174524;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public void setInitialDelay(long initialDelay);1530190293;Specify the delay for the initial execution. It will be evaluated in_terms of this trigger's {@link TimeUnit}. If no time unit was explicitly_provided upon instantiation, the default is milliseconds.;public void setInitialDelay(long initialDelay) {_		this.initialDelay = this.timeUnit.toMillis(initialDelay)__	};specify,the,delay,for,the,initial,execution,it,will,be,evaluated,in,terms,of,this,trigger,s,link,time,unit,if,no,time,unit,was,explicitly,provided,upon,instantiation,the,default,is,milliseconds;public,void,set,initial,delay,long,initial,delay,this,initial,delay,this,time,unit,to,millis,initial,delay
PeriodicTrigger -> public long getPeriod();1510675759;Return this trigger's period._@since 5.0.2;public long getPeriod() {_		return this.period__	};return,this,trigger,s,period,since,5,0,2;public,long,get,period,return,this,period
PeriodicTrigger -> public long getPeriod();1530174524;Return this trigger's period._@since 5.0.2;public long getPeriod() {_		return this.period__	};return,this,trigger,s,period,since,5,0,2;public,long,get,period,return,this,period
PeriodicTrigger -> public long getPeriod();1530190293;Return this trigger's period._@since 5.0.2;public long getPeriod() {_		return this.period__	};return,this,trigger,s,period,since,5,0,2;public,long,get,period,return,this,period
PeriodicTrigger -> public boolean isFixedRate();1510675759;Return whether this trigger uses fixed rate ({@code true}) or_fixed delay ({@code false}) behavior._@since 5.0.2;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,this,trigger,uses,fixed,rate,code,true,or,fixed,delay,code,false,behavior,since,5,0,2;public,boolean,is,fixed,rate,return,this,fixed,rate
PeriodicTrigger -> public boolean isFixedRate();1530174524;Return whether this trigger uses fixed rate ({@code true}) or_fixed delay ({@code false}) behavior._@since 5.0.2;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,this,trigger,uses,fixed,rate,code,true,or,fixed,delay,code,false,behavior,since,5,0,2;public,boolean,is,fixed,rate,return,this,fixed,rate
PeriodicTrigger -> public boolean isFixedRate();1530190293;Return whether this trigger uses fixed rate ({@code true}) or_fixed delay ({@code false}) behavior._@since 5.0.2;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,this,trigger,uses,fixed,rate,code,true,or,fixed,delay,code,false,behavior,since,5,0,2;public,boolean,is,fixed,rate,return,this,fixed,rate
PeriodicTrigger -> public PeriodicTrigger(long period, TimeUnit timeUnit);1328020251;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null) ? timeUnit : TimeUnit.MILLISECONDS__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, TimeUnit timeUnit);1356735495;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null) ? timeUnit : TimeUnit.MILLISECONDS__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, TimeUnit timeUnit);1357119239;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null) ? timeUnit : TimeUnit.MILLISECONDS__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, TimeUnit timeUnit);1362408075;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public PeriodicTrigger(long period, TimeUnit timeUnit);1368482696;Create a trigger with the given period and time unit. The time unit will_apply not only to the period but also to any 'initialDelay' value, if_configured on this Trigger later via {@link #setInitialDelay(long)}.;public PeriodicTrigger(long period, TimeUnit timeUnit) {_		Assert.isTrue(period >= 0, "period must not be negative")__		this.timeUnit = (timeUnit != null ? timeUnit : TimeUnit.MILLISECONDS)__		this.period = this.timeUnit.toMillis(period)__	};create,a,trigger,with,the,given,period,and,time,unit,the,time,unit,will,apply,not,only,to,the,period,but,also,to,any,initial,delay,value,if,configured,on,this,trigger,later,via,link,set,initial,delay,long;public,periodic,trigger,long,period,time,unit,time,unit,assert,is,true,period,0,period,must,not,be,negative,this,time,unit,time,unit,null,time,unit,time,unit,milliseconds,this,period,this,time,unit,to,millis,period
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1328020251;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1356735495;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1357119239;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1362408075;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1368482696;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1496837955;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1510675759;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1530174524;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
PeriodicTrigger -> public void setFixedRate(boolean fixedRate);1530190293;Specify whether the periodic interval should be measured between the_scheduled start times rather than between actual completion times._The latter, "fixed delay" behavior, is the default.;public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};specify,whether,the,periodic,interval,should,be,measured,between,the,scheduled,start,times,rather,than,between,actual,completion,times,the,latter,fixed,delay,behavior,is,the,default;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
