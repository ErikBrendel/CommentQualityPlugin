commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return this trigger's period.  * @since 5.0.2  */ ;/**  * Return this trigger's period.  * @since 5.0.2  */ public long getPeriod() {     return this.period. }
true;public;0;3;/**  * Return this trigger's time unit (milliseconds by default).  * @since 5.0.2  */ ;/**  * Return this trigger's time unit (milliseconds by default).  * @since 5.0.2  */ public TimeUnit getTimeUnit() {     return this.timeUnit. }
true;public;1;3;/**  * Specify the delay for the initial execution. It will be evaluated in  * terms of this trigger's {@link TimeUnit}. If no time unit was explicitly  * provided upon instantiation, the default is milliseconds.  */ ;/**  * Specify the delay for the initial execution. It will be evaluated in  * terms of this trigger's {@link TimeUnit}. If no time unit was explicitly  * provided upon instantiation, the default is milliseconds.  */ public void setInitialDelay(long initialDelay) {     this.initialDelay = this.timeUnit.toMillis(initialDelay). }
true;public;0;3;/**  * Return the initial delay, or 0 if none.  * @since 5.0.2  */ ;/**  * Return the initial delay, or 0 if none.  * @since 5.0.2  */ public long getInitialDelay() {     return this.initialDelay. }
true;public;1;3;/**  * Specify whether the periodic interval should be measured between the  * scheduled start times rather than between actual completion times.  * The latter, "fixed delay" behavior, is the default.  */ ;/**  * Specify whether the periodic interval should be measured between the  * scheduled start times rather than between actual completion times.  * The latter, "fixed delay" behavior, is the default.  */ public void setFixedRate(boolean fixedRate) {     this.fixedRate = fixedRate. }
true;public;0;3;/**  * Return whether this trigger uses fixed rate ({@code true}) or  * fixed delay ({@code false}) behavior.  * @since 5.0.2  */ ;/**  * Return whether this trigger uses fixed rate ({@code true}) or  * fixed delay ({@code false}) behavior.  * @since 5.0.2  */ public boolean isFixedRate() {     return this.fixedRate. }
true;public;1;12;/**  * Returns the time after which a task should run again.  */ ;/**  * Returns the time after which a task should run again.  */ @Override public Date nextExecutionTime(TriggerContext triggerContext) {     Date lastExecution = triggerContext.lastScheduledExecutionTime().     Date lastCompletion = triggerContext.lastCompletionTime().     if (lastExecution == null || lastCompletion == null) {         return new Date(System.currentTimeMillis() + this.initialDelay).     }     if (this.fixedRate) {         return new Date(lastExecution.getTime() + this.period).     }     return new Date(lastCompletion.getTime() + this.period). }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof PeriodicTrigger)) {         return false.     }     PeriodicTrigger otherTrigger = (PeriodicTrigger) other.     return (this.fixedRate == otherTrigger.fixedRate && this.initialDelay == otherTrigger.initialDelay && this.period == otherTrigger.period). }
false;public;0;4;;@Override public int hashCode() {     return (this.fixedRate ? 17 : 29) + (int) (37 * this.period) + (int) (41 * this.initialDelay). }
