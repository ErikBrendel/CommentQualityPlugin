# id;timestamp;commentText;codeText;commentWords;codeWords
JndiTemplate -> public void setEnvironment(Properties environment);1328020251;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(Properties environment);1356735495;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(Properties environment);1357119239;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(Properties environment);1368482696;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(Properties environment);1385412762;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(Properties environment);1467730834;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(Properties environment);1495868221;Set the environment for the JNDI InitialContext.;public void setEnvironment(Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,properties,environment,this,environment,environment
JndiTemplate -> public void releaseContext(@Nullable Context ctx);1495868221;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(@Nullable Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,nullable,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(@Nullable Context ctx);1496837955;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(@Nullable Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,nullable,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(@Nullable Context ctx);1498780456;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(@Nullable Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,nullable,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(@Nullable Context ctx);1530174524;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(@Nullable Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,nullable,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void setEnvironment(@Nullable Properties environment);1496837955;Set the environment for the JNDI InitialContext.;public void setEnvironment(@Nullable Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,nullable,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(@Nullable Properties environment);1498780456;Set the environment for the JNDI InitialContext.;public void setEnvironment(@Nullable Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,nullable,properties,environment,this,environment,environment
JndiTemplate -> public void setEnvironment(@Nullable Properties environment);1530174524;Set the environment for the JNDI InitialContext.;public void setEnvironment(@Nullable Properties environment) {_		this.environment = environment__	};set,the,environment,for,the,jndi,initial,context;public,void,set,environment,nullable,properties,environment,this,environment,environment
JndiTemplate -> public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1328020251;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or <code>null</code>_@throws NamingException thrown by the callback implementation_@see #createInitialContext;public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,code,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1356735495;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1357119239;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1368482696;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1385412762;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1467730834;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public Context getContext() throws NamingException;1328020251;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never <code>null</code>)_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,code,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1356735495;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1357119239;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1368482696;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1385412762;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1467730834;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1495868221;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1496837955;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1498780456;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> public Context getContext() throws NamingException;1530174524;Obtain a JNDI context corresponding to this template's configuration._Called by {@link #execute}_ may also be called directly._<p>The default implementation delegates to {@link #createInitialContext()}._@return the JNDI context (never {@code null})_@throws NamingException if context retrieval failed_@see #releaseContext;public Context getContext() throws NamingException {_		return createInitialContext()__	};obtain,a,jndi,context,corresponding,to,this,template,s,configuration,called,by,link,execute,may,also,be,called,directly,p,the,default,implementation,delegates,to,link,create,initial,context,return,the,jndi,context,never,code,null,throws,naming,exception,if,context,retrieval,failed,see,release,context;public,context,get,context,throws,naming,exception,return,create,initial,context
JndiTemplate -> protected Context createInitialContext() throws NamingException;1328020251;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1356735495;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1357119239;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1368482696;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1385412762;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable<?, ?> icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable<Object, Object>(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,object,object,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1467730834;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable<?, ?> icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable<>(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1495868221;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable<?, ?> icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable<>(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1496837955;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable<?, ?> icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable<>(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1498780456;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable<?, ?> icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable<>(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> protected Context createInitialContext() throws NamingException;1530174524;Create a new JNDI initial context. Invoked by {@link #getContext}._<p>The default implementation use this template's environment settings._Can be subclassed for custom contexts, e.g. for testing._@return the initial Context instance_@throws NamingException in case of initialization errors;protected Context createInitialContext() throws NamingException {_		Hashtable<?, ?> icEnv = null__		Properties env = getEnvironment()__		if (env != null) {_			icEnv = new Hashtable<>(env.size())__			CollectionUtils.mergePropertiesIntoMap(env, icEnv)__		}_		return new InitialContext(icEnv)__	};create,a,new,jndi,initial,context,invoked,by,link,get,context,p,the,default,implementation,use,this,template,s,environment,settings,can,be,subclassed,for,custom,contexts,e,g,for,testing,return,the,initial,context,instance,throws,naming,exception,in,case,of,initialization,errors;protected,context,create,initial,context,throws,naming,exception,hashtable,ic,env,null,properties,env,get,environment,if,env,null,ic,env,new,hashtable,env,size,collection,utils,merge,properties,into,map,env,ic,env,return,new,initial,context,ic,env
JndiTemplate -> @Nullable 	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1495868221;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;@Nullable_	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;nullable,public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> @Nullable 	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1496837955;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;@Nullable_	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;nullable,public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> @Nullable 	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1498780456;Execute the given JNDI context callback implementation._@param contextCallback JndiCallback implementation_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;@Nullable_	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,jndi,callback,implementation,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;nullable,public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> @Nullable 	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException;1530174524;Execute the given JNDI context callback implementation._@param contextCallback the JndiCallback implementation to use_@return a result object returned by the callback, or {@code null}_@throws NamingException thrown by the callback implementation_@see #createInitialContext;@Nullable_	public <T> T execute(JndiCallback<T> contextCallback) throws NamingException {_		Context ctx = getContext()__		try {_			return contextCallback.doInContext(ctx)__		}_		finally {_			releaseContext(ctx)__		}_	};execute,the,given,jndi,context,callback,implementation,param,context,callback,the,jndi,callback,implementation,to,use,return,a,result,object,returned,by,the,callback,or,code,null,throws,naming,exception,thrown,by,the,callback,implementation,see,create,initial,context;nullable,public,t,t,execute,jndi,callback,t,context,callback,throws,naming,exception,context,ctx,get,context,try,return,context,callback,do,in,context,ctx,finally,release,context,ctx
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1328020251;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1356735495;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1357119239;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1368482696;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1385412762;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1467730834;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1495868221;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.bind(name, object)__				return null__			}_		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1496837955;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.bind(name, object)__			return null__		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,ctx,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1498780456;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.bind(name, object)__			return null__		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,ctx,ctx,bind,name,object,return,null
JndiTemplate -> public void bind(final String name, final Object object) throws NamingException;1530174524;Bind the given object to the current JNDI context, using the given name._@param name the JNDI name of the object_@param object the object to bind_@throws NamingException thrown by JNDI, mostly name already bound;public void bind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Binding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.bind(name, object)__			return null__		})__	};bind,the,given,object,to,the,current,jndi,context,using,the,given,name,param,name,the,jndi,name,of,the,object,param,object,the,object,to,bind,throws,naming,exception,thrown,by,jndi,mostly,name,already,bound;public,void,bind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,binding,jndi,object,with,name,name,execute,ctx,ctx,bind,name,object,return,null
JndiTemplate -> public Properties getEnvironment();1328020251;Return the environment for the JNDI InitialContext, if any.;public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;public,properties,get,environment,return,this,environment
JndiTemplate -> public Properties getEnvironment();1356735495;Return the environment for the JNDI InitialContext, if any.;public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;public,properties,get,environment,return,this,environment
JndiTemplate -> public Properties getEnvironment();1357119239;Return the environment for the JNDI InitialContext, if any.;public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;public,properties,get,environment,return,this,environment
JndiTemplate -> public Properties getEnvironment();1368482696;Return the environment for the JNDI InitialContext, if any.;public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;public,properties,get,environment,return,this,environment
JndiTemplate -> public Properties getEnvironment();1385412762;Return the environment for the JNDI InitialContext, if any.;public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;public,properties,get,environment,return,this,environment
JndiTemplate -> public Properties getEnvironment();1467730834;Return the environment for the JNDI InitialContext, if any.;public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;public,properties,get,environment,return,this,environment
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException;1495868221;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,nullable,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException;1496837955;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(name, requiredType, jndiObject.getClass())__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,nullable,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,get,class,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException;1498780456;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(name, requiredType, jndiObject.getClass())__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,nullable,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,get,class,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException;1530174524;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, @Nullable Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(name, requiredType, jndiObject.getClass())__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,nullable,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,get,class,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, Class<T> requiredType) throws NamingException;1328020251;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or <code>null</code> for any match. For example,_if the value is <code>Object.class</code>, this method will succeed whatever_the class of the returned instance._@return object found (cannot be <code>null</code>_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,code,for,any,match,for,example,if,the,value,is,code,object,class,code,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,code,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, Class<T> requiredType) throws NamingException;1356735495;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, Class<T> requiredType) throws NamingException;1357119239;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, Class<T> requiredType) throws NamingException;1368482696;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, Class<T> requiredType) throws NamingException;1385412762;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> @SuppressWarnings("unchecked") 	public <T> T lookup(String name, Class<T> requiredType) throws NamingException;1467730834;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@param requiredType type the JNDI object must match. Can be an interface or_superclass of the actual class, or {@code null} for any match. For example,_if the value is {@code Object.class}, this method will succeed whatever_the class of the returned instance._@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;@SuppressWarnings("unchecked")_	public <T> T lookup(String name, Class<T> requiredType) throws NamingException {_		Object jndiObject = lookup(name)__		if (requiredType != null && !requiredType.isInstance(jndiObject)) {_			throw new TypeMismatchNamingException(_					name, requiredType, (jndiObject != null ? jndiObject.getClass() : null))__		}_		return (T) jndiObject__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,param,required,type,type,the,jndi,object,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;suppress,warnings,unchecked,public,t,t,lookup,string,name,class,t,required,type,throws,naming,exception,object,jndi,object,lookup,name,if,required,type,null,required,type,is,instance,jndi,object,throw,new,type,mismatch,naming,exception,name,required,type,jndi,object,null,jndi,object,get,class,null,return,t,jndi,object
JndiTemplate -> public void releaseContext(Context ctx);1328020251;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be <code>null</code>)_@see #getContext;public void releaseContext(Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,code,see,get,context;public,void,release,context,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(Context ctx);1356735495;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(Context ctx);1357119239;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(Context ctx);1368482696;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(Context ctx);1385412762;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void releaseContext(Context ctx);1467730834;Release a JNDI context as obtained from {@link #getContext()}._@param ctx the JNDI context to release (may be {@code null})_@see #getContext;public void releaseContext(Context ctx) {_		if (ctx != null) {_			try {_				ctx.close()__			}_			catch (NamingException ex) {_				logger.debug("Could not close JNDI InitialContext", ex)__			}_		}_	};release,a,jndi,context,as,obtained,from,link,get,context,param,ctx,the,jndi,context,to,release,may,be,code,null,see,get,context;public,void,release,context,context,ctx,if,ctx,null,try,ctx,close,catch,naming,exception,ex,logger,debug,could,not,close,jndi,initial,context,ex
JndiTemplate -> public void unbind(final String name) throws NamingException;1328020251;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1356735495;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1357119239;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1368482696;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1385412762;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1467730834;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1495868221;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.unbind(name)__				return null__			}_		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1496837955;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.unbind(name)__			return null__		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,ctx,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1498780456;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.unbind(name)__			return null__		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,ctx,ctx,unbind,name,return,null
JndiTemplate -> public void unbind(final String name) throws NamingException;1530174524;Remove the binding for the given name from the current JNDI context._@param name the JNDI name of the object_@throws NamingException thrown by JNDI, mostly name not found;public void unbind(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.unbind(name)__			return null__		})__	};remove,the,binding,for,the,given,name,from,the,current,jndi,context,param,name,the,jndi,name,of,the,object,throws,naming,exception,thrown,by,jndi,mostly,name,not,found;public,void,unbind,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,unbinding,jndi,object,with,name,name,execute,ctx,ctx,unbind,name,return,null
JndiTemplate -> @Nullable 	public Properties getEnvironment();1495868221;Return the environment for the JNDI InitialContext, if any.;@Nullable_	public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;nullable,public,properties,get,environment,return,this,environment
JndiTemplate -> @Nullable 	public Properties getEnvironment();1496837955;Return the environment for the JNDI InitialContext, if any.;@Nullable_	public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;nullable,public,properties,get,environment,return,this,environment
JndiTemplate -> @Nullable 	public Properties getEnvironment();1498780456;Return the environment for the JNDI InitialContext, if any.;@Nullable_	public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;nullable,public,properties,get,environment,return,this,environment
JndiTemplate -> @Nullable 	public Properties getEnvironment();1530174524;Return the environment for the JNDI InitialContext, if any.;@Nullable_	public Properties getEnvironment() {_		return this.environment__	};return,the,environment,for,the,jndi,initial,context,if,any;nullable,public,properties,get,environment,return,this,environment
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1328020251;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1356735495;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1357119239;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1368482696;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1385412762;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1467730834;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1495868221;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				ctx.rebind(name, object)__				return null__			}_		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1496837955;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.rebind(name, object)__			return null__		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,ctx,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1498780456;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.rebind(name, object)__			return null__		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,ctx,ctx,rebind,name,object,return,null
JndiTemplate -> public void rebind(final String name, final Object object) throws NamingException;1530174524;Rebind the given object to the current JNDI context, using the given name._Overwrites any existing binding._@param name the JNDI name of the object_@param object the object to rebind_@throws NamingException thrown by JNDI;public void rebind(final String name, final Object object) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Rebinding JNDI object with name [" + name + "]")__		}_		execute(ctx -> {_			ctx.rebind(name, object)__			return null__		})__	};rebind,the,given,object,to,the,current,jndi,context,using,the,given,name,overwrites,any,existing,binding,param,name,the,jndi,name,of,the,object,param,object,the,object,to,rebind,throws,naming,exception,thrown,by,jndi;public,void,rebind,final,string,name,final,object,object,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,rebinding,jndi,object,with,name,name,execute,ctx,ctx,rebind,name,object,return,null
JndiTemplate -> public JndiTemplate(Properties environment);1328020251;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(Properties environment);1356735495;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(Properties environment);1357119239;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(Properties environment);1368482696;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(Properties environment);1385412762;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(Properties environment);1467730834;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(Properties environment);1495868221;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(@Nullable Properties environment);1496837955;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(@Nullable Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,nullable,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(@Nullable Properties environment);1498780456;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(@Nullable Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,nullable,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate(@Nullable Properties environment);1530174524;Create a new JndiTemplate instance, using the given environment.;public JndiTemplate(@Nullable Properties environment) {_		this.environment = environment__	};create,a,new,jndi,template,instance,using,the,given,environment;public,jndi,template,nullable,properties,environment,this,environment,environment
JndiTemplate -> public JndiTemplate();1328020251;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1356735495;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1357119239;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1368482696;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1385412762;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1467730834;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1495868221;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1496837955;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1498780456;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public JndiTemplate();1530174524;Create a new JndiTemplate instance.;public JndiTemplate() {_	};create,a,new,jndi,template,instance;public,jndi,template
JndiTemplate -> public Object lookup(final String name) throws NamingException;1328020251;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be <code>null</code>_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,code,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1356735495;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1357119239;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1368482696;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1385412762;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1467730834;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1495868221;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		return execute(new JndiCallback<Object>() {_			@Override_			public Object doInContext(Context ctx) throws NamingException {_				Object located = ctx.lookup(name)__				if (located == null) {_					throw new NameNotFoundException(_							"JNDI object with [" + name + "] not found: JNDI implementation returned null")__				}_				return located__			}_		})__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,return,execute,new,jndi,callback,object,override,public,object,do,in,context,context,ctx,throws,naming,exception,object,located,ctx,lookup,name,if,located,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,located
JndiTemplate -> public Object lookup(final String name) throws NamingException;1496837955;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		Object result = execute(ctx -> ctx.lookup(name))__		if (result == null) {_			throw new NameNotFoundException(_					"JNDI object with [" + name + "] not found: JNDI implementation returned null")__		}_		return result__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,object,result,execute,ctx,ctx,lookup,name,if,result,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,result
JndiTemplate -> public Object lookup(final String name) throws NamingException;1498780456;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		Object result = execute(ctx -> ctx.lookup(name))__		if (result == null) {_			throw new NameNotFoundException(_					"JNDI object with [" + name + "] not found: JNDI implementation returned null")__		}_		return result__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,object,result,execute,ctx,ctx,lookup,name,if,result,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,result
JndiTemplate -> public Object lookup(final String name) throws NamingException;1530174524;Look up the object with the given name in the current JNDI context._@param name the JNDI name of the object_@return object found (cannot be {@code null}_ if a not so well-behaved_JNDI implementations returns null, a NamingException gets thrown)_@throws NamingException if there is no object with the given_name bound to JNDI;public Object lookup(final String name) throws NamingException {_		if (logger.isDebugEnabled()) {_			logger.debug("Looking up JNDI object with name [" + name + "]")__		}_		Object result = execute(ctx -> ctx.lookup(name))__		if (result == null) {_			throw new NameNotFoundException(_					"JNDI object with [" + name + "] not found: JNDI implementation returned null")__		}_		return result__	};look,up,the,object,with,the,given,name,in,the,current,jndi,context,param,name,the,jndi,name,of,the,object,return,object,found,cannot,be,code,null,if,a,not,so,well,behaved,jndi,implementations,returns,null,a,naming,exception,gets,thrown,throws,naming,exception,if,there,is,no,object,with,the,given,name,bound,to,jndi;public,object,lookup,final,string,name,throws,naming,exception,if,logger,is,debug,enabled,logger,debug,looking,up,jndi,object,with,name,name,object,result,execute,ctx,ctx,lookup,name,if,result,null,throw,new,name,not,found,exception,jndi,object,with,name,not,found,jndi,implementation,returned,null,return,result
