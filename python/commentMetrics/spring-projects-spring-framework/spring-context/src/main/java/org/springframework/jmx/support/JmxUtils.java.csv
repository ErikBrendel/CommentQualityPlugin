# id;timestamp;commentText;codeText;commentWords;codeWords
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1328020251;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value <code>identity</code> and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,code,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1356735495;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1385412762;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1419855992;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1467726769;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1495868221;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1496837955;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1518167526;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1518167818;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1518294946;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource) 			throws MalformedObjectNameException;1532091916;Append an additional key/value pair to an existing {@link ObjectName} with the key being_the static value {@code identity} and the value being the identity hash code of the_managed resource being exposed on the supplied {@link ObjectName}. This can be used to_provide a unique {@link ObjectName} for each distinct instance of a particular bean or_class. Useful when generating {@link ObjectName ObjectNames} at runtime for a set of_managed resources based on the template value supplied by a_{@link org.springframework.jmx.export.naming.ObjectNamingStrategy}._@param objectName the original JMX ObjectName_@param managedResource the MBean instance_@return an ObjectName with the MBean identity added_@throws MalformedObjectNameException in case of an invalid object name specification_@see org.springframework.util.ObjectUtils#getIdentityHexString(Object);public static ObjectName appendIdentityToObjectName(ObjectName objectName, Object managedResource)_			throws MalformedObjectNameException {__		Hashtable<String, String> keyProperties = objectName.getKeyPropertyList()__		keyProperties.put(IDENTITY_OBJECT_NAME_KEY, ObjectUtils.getIdentityHexString(managedResource))__		return ObjectNameManager.getInstance(objectName.getDomain(), keyProperties)__	};append,an,additional,key,value,pair,to,an,existing,link,object,name,with,the,key,being,the,static,value,code,identity,and,the,value,being,the,identity,hash,code,of,the,managed,resource,being,exposed,on,the,supplied,link,object,name,this,can,be,used,to,provide,a,unique,link,object,name,for,each,distinct,instance,of,a,particular,bean,or,class,useful,when,generating,link,object,name,object,names,at,runtime,for,a,set,of,managed,resources,based,on,the,template,value,supplied,by,a,link,org,springframework,jmx,export,naming,object,naming,strategy,param,object,name,the,original,jmx,object,name,param,managed,resource,the,mbean,instance,return,an,object,name,with,the,mbean,identity,added,throws,malformed,object,name,exception,in,case,of,an,invalid,object,name,specification,see,org,springframework,util,object,utils,get,identity,hex,string,object;public,static,object,name,append,identity,to,object,name,object,name,object,name,object,managed,resource,throws,malformed,object,name,exception,hashtable,string,string,key,properties,object,name,get,key,property,list,key,properties,put,object,utils,get,identity,hex,string,managed,resource,return,object,name,manager,get,instance,object,name,get,domain,key,properties
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader) 			throws ClassNotFoundException;1385412762;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader) 			throws ClassNotFoundException;1419855992;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader) 			throws ClassNotFoundException;1467726769;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader) 			throws ClassNotFoundException;1495868221;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1328020251;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as <code>getFoo()</code> translates to an attribute called_<code>Foo</code>. With strict casing disabled, <code>getFoo()</code>_would translate to just <code>foo</code>._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,code,translates,to,an,attribute,called,code,foo,code,with,strict,casing,disabled,code,get,foo,code,would,translate,to,just,code,foo,code,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1356735495;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1385412762;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1419855992;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1467726769;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1495868221;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1496837955;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1518167526;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1518167818;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1518294946;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing);1532091916;Return the JMX attribute name to use for the given JavaBeans property._<p>When using strict casing, a JavaBean property with a getter method_such as {@code getFoo()} translates to an attribute called_{@code Foo}. With strict casing disabled, {@code getFoo()}_would translate to just {@code foo}._@param property the JavaBeans property descriptor_@param useStrictCasing whether to use strict casing_@return the JMX attribute name to use;public static String getAttributeName(PropertyDescriptor property, boolean useStrictCasing) {_		if (useStrictCasing) {_			return StringUtils.capitalize(property.getName())__		}_		else {_			return property.getName()__		}_	};return,the,jmx,attribute,name,to,use,for,the,given,java,beans,property,p,when,using,strict,casing,a,java,bean,property,with,a,getter,method,such,as,code,get,foo,translates,to,an,attribute,called,code,foo,with,strict,casing,disabled,code,get,foo,would,translate,to,just,code,foo,param,property,the,java,beans,property,descriptor,param,use,strict,casing,whether,to,use,strict,casing,return,the,jmx,attribute,name,to,use;public,static,string,get,attribute,name,property,descriptor,property,boolean,use,strict,casing,if,use,strict,casing,return,string,utils,capitalize,property,get,name,else,return,property,get,name
JmxUtils -> public static Class<?> getMXBeanInterface(Class<?> clazz);1328020251;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;public static Class<?> getMXBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			boolean isMxBean = iface.getName().endsWith(MXBEAN_SUFFIX)__			if (mxBeanAnnotationAvailable) {_				Boolean checkResult = MXBeanChecker.evaluateMXBeanAnnotation(iface)__				if (checkResult != null) {_					isMxBean = checkResult__				}_			}_			if (isMxBean) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;public,static,class,get,mxbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,boolean,is,mx,bean,iface,get,name,ends,with,if,mx,bean,annotation,available,boolean,check,result,mxbean,checker,evaluate,mxbean,annotation,iface,if,check,result,null,is,mx,bean,check,result,if,is,mx,bean,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMXBeanInterface(Class<?> clazz);1356735495;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;public static Class<?> getMXBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			boolean isMxBean = iface.getName().endsWith(MXBEAN_SUFFIX)__			if (mxBeanAnnotationAvailable) {_				Boolean checkResult = MXBeanChecker.evaluateMXBeanAnnotation(iface)__				if (checkResult != null) {_					isMxBean = checkResult__				}_			}_			if (isMxBean) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;public,static,class,get,mxbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,boolean,is,mx,bean,iface,get,name,ends,with,if,mx,bean,annotation,available,boolean,check,result,mxbean,checker,evaluate,mxbean,annotation,iface,if,check,result,null,is,mx,bean,check,result,if,is,mx,bean,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMXBeanInterface(Class<?> clazz);1385412762;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;public static Class<?> getMXBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			boolean isMxBean = iface.getName().endsWith(MXBEAN_SUFFIX)__			if (mxBeanAnnotationAvailable) {_				Boolean checkResult = MXBeanChecker.evaluateMXBeanAnnotation(iface)__				if (checkResult != null) {_					isMxBean = checkResult__				}_			}_			if (isMxBean) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;public,static,class,get,mxbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,boolean,is,mx,bean,iface,get,name,ends,with,if,mx,bean,annotation,available,boolean,check,result,mxbean,checker,evaluate,mxbean,annotation,iface,if,check,result,null,is,mx,bean,check,result,if,is,mx,bean,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMXBeanInterface(Class<?> clazz);1419855992;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;public static Class<?> getMXBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;public,static,class,get,mxbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMXBeanInterface(Class<?> clazz);1467726769;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;public static Class<?> getMXBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;public,static,class,get,mxbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1328020251;Attempt to find a locally running <code>MBeanServer</code>. Fails if no_<code>MBeanServer</code> can be found. Logs a warning if more than one_<code>MBeanServer</code> found, returning the first one from the list._@return the <code>MBeanServer</code> if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no <code>MBeanServer</code> could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,code,fails,if,no,code,mbean,server,code,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,code,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,code,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,code,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1356735495;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1385412762;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1419855992;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1467726769;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1495868221;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1496837955;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1518167526;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1518167818;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1518294946;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws MBeanServerNotFoundException if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException;1532091916;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@return the {@code MBeanServer} if found_@throws MBeanServerNotFoundException if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer;public static MBeanServer locateMBeanServer() throws MBeanServerNotFoundException {_		return locateMBeanServer(null)__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,return,the,code,mbean,server,if,found,throws,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server;public,static,mbean,server,locate,mbean,server,throws,mbean,server,not,found,exception,return,locate,mbean,server,null
JmxUtils -> public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException;1328020251;Convert an array of <code>MBeanParameterInfo</code> into an array of_<code>Class</code> instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException {_		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,code,into,an,array,of,code,class,code,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException;1356735495;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException {_		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader) 			throws ClassNotFoundException;1328020251;Convert an array of <code>MBeanParameterInfo</code> into an array of_<code>Class</code> instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader)_			throws ClassNotFoundException {__		Class[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,code,into,an,array,of,code,class,code,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader) 			throws ClassNotFoundException;1356735495;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo, ClassLoader classLoader)_			throws ClassNotFoundException {__		Class[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1328020251;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1356735495;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1385412762;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1419855992;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1467726769;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1495868221;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1496837955;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1518167526;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1518167818;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1518294946;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> public static Class<?> getClassToExpose(Object managedBean);1532091916;Return the class or interface to expose for the given bean._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param managedBean the bean instance (might be an AOP proxy)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Object);public static Class<?> getClassToExpose(Object managedBean) {_		return ClassUtils.getUserClass(managedBean)__	};return,the,class,or,interface,to,expose,for,the,given,bean,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,managed,bean,the,bean,instance,might,be,an,aop,proxy,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,object;public,static,class,get,class,to,expose,object,managed,bean,return,class,utils,get,user,class,managed,bean
JmxUtils -> @Nullable 	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz);1496837955;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;@Nullable_	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;nullable,public,static,class,get,mbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz);1518167526;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;@Nullable_	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;nullable,public,static,class,get,mbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz);1518167818;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;@Nullable_	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;nullable,public,static,class,get,mbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz);1518294946;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;@Nullable_	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;nullable,public,static,class,get,mbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz);1532091916;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;@Nullable_	public static Class<?> getMBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;nullable,public,static,class,get,mbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException;1495868221;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,nullable,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException;1496837955;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,nullable,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException;1518167526;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && !servers.isEmpty()) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,nullable,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,is,empty,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException;1518167818;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && !servers.isEmpty()) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,nullable,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,is,empty,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException;1518294946;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws MBeanServerNotFoundException if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (!CollectionUtils.isEmpty(servers)) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,nullable,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,collection,utils,is,empty,servers,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException;1532091916;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws MBeanServerNotFoundException if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(@Nullable String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (!CollectionUtils.isEmpty(servers)) {_				_				if (servers.size() > 1 && logger.isInfoEnabled()) {_					logger.info("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,nullable,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,collection,utils,is,empty,servers,if,servers,size,1,logger,is,info,enabled,logger,info,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo) 			throws ClassNotFoundException;1496837955;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo)_			throws ClassNotFoundException {__		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo) 			throws ClassNotFoundException;1518167526;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo)_			throws ClassNotFoundException {__		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo) 			throws ClassNotFoundException;1518167818;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo)_			throws ClassNotFoundException {__		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo) 			throws ClassNotFoundException;1518294946;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo)_			throws ClassNotFoundException {__		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo) 			throws ClassNotFoundException;1532091916;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(@Nullable MBeanParameterInfo[] paramInfo)_			throws ClassNotFoundException {__		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> @Nullable 	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz);1496837955;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;@Nullable_	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;nullable,public,static,class,get,mxbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz);1518167526;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;@Nullable_	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;nullable,public,static,class,get,mxbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz);1518167818;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;@Nullable_	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;nullable,public,static,class,get,mxbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz);1518294946;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;@Nullable_	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;nullable,public,static,class,get,mxbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> @Nullable 	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz);1532091916;Return the Java 6 MXBean interface exists for the given class, if any_(that is, an interface whose name ends with "MXBean" and/or_carries an appropriate MXBean annotation)._@param clazz the class to check_@return whether there is an MXBean interface for the given class;@Nullable_	public static Class<?> getMXBeanInterface(@Nullable Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (JMX.isMXBeanInterface(iface)) {_				return iface__			}_		}_		return getMXBeanInterface(clazz.getSuperclass())__	};return,the,java,6,mxbean,interface,exists,for,the,given,class,if,any,that,is,an,interface,whose,name,ends,with,mxbean,and,or,carries,an,appropriate,mxbean,annotation,param,clazz,the,class,to,check,return,whether,there,is,an,mxbean,interface,for,the,given,class;nullable,public,static,class,get,mxbean,interface,nullable,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,jmx,is,mxbean,interface,iface,return,iface,return,get,mxbean,interface,clazz,get,superclass
JmxUtils -> public static boolean isMBean(Class<?> clazz);1328020251;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(Class<?> clazz);1356735495;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(Class<?> clazz);1385412762;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(Class<?> clazz);1419855992;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(Class<?> clazz);1467726769;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(Class<?> clazz);1495868221;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes( 			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader) 			throws ClassNotFoundException;1496837955;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(_			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,nullable,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes( 			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader) 			throws ClassNotFoundException;1518167526;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(_			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,nullable,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes( 			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader) 			throws ClassNotFoundException;1518167818;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(_			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,nullable,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes( 			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader) 			throws ClassNotFoundException;1518294946;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(_			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,nullable,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> @Nullable 	public static Class<?>[] parameterInfoToTypes( 			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader) 			throws ClassNotFoundException;1532091916;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@param classLoader the ClassLoader to use for loading parameter types_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;@Nullable_	public static Class<?>[] parameterInfoToTypes(_			@Nullable MBeanParameterInfo[] paramInfo, @Nullable ClassLoader classLoader)_			throws ClassNotFoundException {__		Class<?>[] types = null__		if (paramInfo != null && paramInfo.length > 0) {_			types = new Class<?>[paramInfo.length]__			for (int x = 0_ x < paramInfo.length_ x++) {_				types[x] = ClassUtils.forName(paramInfo[x].getType(), classLoader)__			}_		}_		return types__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,param,class,loader,the,class,loader,to,use,for,loading,parameter,types,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;nullable,public,static,class,parameter,info,to,types,nullable,mbean,parameter,info,param,info,nullable,class,loader,class,loader,throws,class,not,found,exception,class,types,null,if,param,info,null,param,info,length,0,types,new,class,param,info,length,for,int,x,0,x,param,info,length,x,types,x,class,utils,for,name,param,info,x,get,type,class,loader,return,types
JmxUtils -> public static boolean isMXBeanSupportAvailable();1328020251;Check whether MXBean support is available, i.e. whether we're running_on Java 6 or above._@return <code>true</code> if available_ <code>false</code> otherwise;public static boolean isMXBeanSupportAvailable() {_		return mxBeanAnnotationAvailable__	};check,whether,mxbean,support,is,available,i,e,whether,we,re,running,on,java,6,or,above,return,code,true,code,if,available,code,false,code,otherwise;public,static,boolean,is,mxbean,support,available,return,mx,bean,annotation,available
JmxUtils -> public static boolean isMXBeanSupportAvailable();1356735495;Check whether MXBean support is available, i.e. whether we're running_on Java 6 or above._@return {@code true} if available_ {@code false} otherwise;public static boolean isMXBeanSupportAvailable() {_		return mxBeanAnnotationAvailable__	};check,whether,mxbean,support,is,available,i,e,whether,we,re,running,on,java,6,or,above,return,code,true,if,available,code,false,otherwise;public,static,boolean,is,mxbean,support,available,return,mx,bean,annotation,available
JmxUtils -> public static boolean isMXBeanSupportAvailable();1385412762;Check whether MXBean support is available, i.e. whether we're running_on Java 6 or above._@return {@code true} if available_ {@code false} otherwise;public static boolean isMXBeanSupportAvailable() {_		return mxBeanAnnotationAvailable__	};check,whether,mxbean,support,is,available,i,e,whether,we,re,running,on,java,6,or,above,return,code,true,if,available,code,false,otherwise;public,static,boolean,is,mxbean,support,available,return,mx,bean,annotation,available
JmxUtils -> public static boolean isMBean(@Nullable Class<?> clazz);1496837955;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(@Nullable Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,nullable,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(@Nullable Class<?> clazz);1518167526;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(@Nullable Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,nullable,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(@Nullable Class<?> clazz);1518167818;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(@Nullable Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,nullable,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(@Nullable Class<?> clazz);1518294946;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(@Nullable Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,nullable,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static boolean isMBean(@Nullable Class<?> clazz);1532091916;Determine whether the given bean class qualifies as an MBean as-is._<p>This implementation checks for {@link javax.management.DynamicMBean}_classes as well as classes with corresponding "*MBean" interface_(Standard MBeans) or corresponding "*MXBean" interface (Java 6 MXBeans)._@param clazz the bean class to analyze_@return whether the class qualifies as an MBean_@see org.springframework.jmx.export.MBeanExporter#isMBean(Class);public static boolean isMBean(@Nullable Class<?> clazz) {_		return (clazz != null &&_				(DynamicMBean.class.isAssignableFrom(clazz) ||_						(getMBeanInterface(clazz) != null || getMXBeanInterface(clazz) != null)))__	};determine,whether,the,given,bean,class,qualifies,as,an,mbean,as,is,p,this,implementation,checks,for,link,javax,management,dynamic,mbean,classes,as,well,as,classes,with,corresponding,mbean,interface,standard,mbeans,or,corresponding,mxbean,interface,java,6,mxbeans,param,clazz,the,bean,class,to,analyze,return,whether,the,class,qualifies,as,an,mbean,see,org,springframework,jmx,export,mbean,exporter,is,mbean,class;public,static,boolean,is,mbean,nullable,class,clazz,return,clazz,null,dynamic,mbean,class,is,assignable,from,clazz,get,mbean,interface,clazz,null,get,mxbean,interface,clazz,null
JmxUtils -> public static Class<?> getMBeanInterface(Class<?> clazz);1328020251;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;public static Class<?> getMBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;public,static,class,get,mbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMBeanInterface(Class<?> clazz);1356735495;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;public static Class<?> getMBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;public,static,class,get,mbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMBeanInterface(Class<?> clazz);1385412762;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;public static Class<?> getMBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;public,static,class,get,mbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMBeanInterface(Class<?> clazz);1419855992;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;public static Class<?> getMBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;public,static,class,get,mbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getMBeanInterface(Class<?> clazz);1467726769;Return the Standard MBean interface for the given class, if any_(that is, an interface whose name matches the class name of the_given class but with suffix "MBean")._@param clazz the class to check_@return the Standard MBean interface for the given class;public static Class<?> getMBeanInterface(Class<?> clazz) {_		if (clazz == null || clazz.getSuperclass() == null) {_			return null__		}_		String mbeanInterfaceName = clazz.getName() + MBEAN_SUFFIX__		Class<?>[] implementedInterfaces = clazz.getInterfaces()__		for (Class<?> iface : implementedInterfaces) {_			if (iface.getName().equals(mbeanInterfaceName)) {_				return iface__			}_		}_		return getMBeanInterface(clazz.getSuperclass())__	};return,the,standard,mbean,interface,for,the,given,class,if,any,that,is,an,interface,whose,name,matches,the,class,name,of,the,given,class,but,with,suffix,mbean,param,clazz,the,class,to,check,return,the,standard,mbean,interface,for,the,given,class;public,static,class,get,mbean,interface,class,clazz,if,clazz,null,clazz,get,superclass,null,return,null,string,mbean,interface,name,clazz,get,name,class,implemented,interfaces,clazz,get,interfaces,for,class,iface,implemented,interfaces,if,iface,get,name,equals,mbean,interface,name,return,iface,return,get,mbean,interface,clazz,get,superclass
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1328020251;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1356735495;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1385412762;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1419855992;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1467726769;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1495868221;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1496837955;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1518167526;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1518167818;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1518294946;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?> getClassToExpose(Class<?> clazz);1532091916;Return the class or interface to expose for the given bean class._This is the class that will be searched for attributes and operations_(for example, checked for annotations)._<p>This implementation returns the superclass for a CGLIB proxy and_the class of the given bean else (for a JDK proxy or a plain bean class)._@param clazz the bean class (might be an AOP proxy class)_@return the bean class to expose_@see org.springframework.util.ClassUtils#getUserClass(Class);public static Class<?> getClassToExpose(Class<?> clazz) {_		return ClassUtils.getUserClass(clazz)__	};return,the,class,or,interface,to,expose,for,the,given,bean,class,this,is,the,class,that,will,be,searched,for,attributes,and,operations,for,example,checked,for,annotations,p,this,implementation,returns,the,superclass,for,a,cglib,proxy,and,the,class,of,the,given,bean,else,for,a,jdk,proxy,or,a,plain,bean,class,param,clazz,the,bean,class,might,be,an,aop,proxy,class,return,the,bean,class,to,expose,see,org,springframework,util,class,utils,get,user,class,class;public,static,class,get,class,to,expose,class,clazz,return,class,utils,get,user,class,clazz
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException;1385412762;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException {_		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException;1419855992;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException {_		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException;1467726769;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException {_		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException;1495868221;Convert an array of {@code MBeanParameterInfo} into an array of_{@code Class} instances corresponding to the parameters._@param paramInfo the JMX parameter info_@return the parameter types as classes_@throws ClassNotFoundException if a parameter type could not be resolved;public static Class<?>[] parameterInfoToTypes(MBeanParameterInfo[] paramInfo) throws ClassNotFoundException {_		return parameterInfoToTypes(paramInfo, ClassUtils.getDefaultClassLoader())__	};convert,an,array,of,code,mbean,parameter,info,into,an,array,of,code,class,instances,corresponding,to,the,parameters,param,param,info,the,jmx,parameter,info,return,the,parameter,types,as,classes,throws,class,not,found,exception,if,a,parameter,type,could,not,be,resolved;public,static,class,parameter,info,to,types,mbean,parameter,info,param,info,throws,class,not,found,exception,return,parameter,info,to,types,param,info,class,utils,get,default,class,loader
JmxUtils -> public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException;1328020251;Attempt to find a locally running <code>MBeanServer</code>. Fails if no_<code>MBeanServer</code> can be found. Logs a warning if more than one_<code>MBeanServer</code> found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is <code>null</code>, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the <code>MBeanServer</code> if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no <code>MBeanServer</code> could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,code,fails,if,no,code,mbean,server,code,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,code,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,code,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,code,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,code,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException;1356735495;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException;1385412762;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException;1419855992;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException;1467726769;Attempt to find a locally running {@code MBeanServer}. Fails if no_{@code MBeanServer} can be found. Logs a warning if more than one_{@code MBeanServer} found, returning the first one from the list._@param agentId the agent identifier of the MBeanServer to retrieve._If this parameter is {@code null}, all registered MBeanServers are considered._If the empty String is given, the platform MBeanServer will be returned._@return the {@code MBeanServer} if found_@throws org.springframework.jmx.MBeanServerNotFoundException_if no {@code MBeanServer} could be found_@see javax.management.MBeanServerFactory#findMBeanServer(String);public static MBeanServer locateMBeanServer(String agentId) throws MBeanServerNotFoundException {_		MBeanServer server = null___		_		if (!"".equals(agentId)) {_			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId)__			if (servers != null && servers.size() > 0) {_				_				if (servers.size() > 1 && logger.isWarnEnabled()) {_					logger.warn("Found more than one MBeanServer instance" +_							(agentId != null ? " with agent id [" + agentId + "]" : "") +_							". Returning first from list.")__				}_				server = servers.get(0)__			}_		}__		if (server == null && !StringUtils.hasLength(agentId)) {_			_			try {_				server = ManagementFactory.getPlatformMBeanServer()__			}_			catch (SecurityException ex) {_				throw new MBeanServerNotFoundException("No specific MBeanServer found, " +_						"and not allowed to obtain the Java platform MBeanServer", ex)__			}_		}__		if (server == null) {_			throw new MBeanServerNotFoundException(_					"Unable to locate an MBeanServer instance" +_					(agentId != null ? " with agent id [" + agentId + "]" : ""))__		}__		if (logger.isDebugEnabled()) {_			logger.debug("Found MBeanServer: " + server)__		}_		return server__	};attempt,to,find,a,locally,running,code,mbean,server,fails,if,no,code,mbean,server,can,be,found,logs,a,warning,if,more,than,one,code,mbean,server,found,returning,the,first,one,from,the,list,param,agent,id,the,agent,identifier,of,the,mbean,server,to,retrieve,if,this,parameter,is,code,null,all,registered,mbean,servers,are,considered,if,the,empty,string,is,given,the,platform,mbean,server,will,be,returned,return,the,code,mbean,server,if,found,throws,org,springframework,jmx,mbean,server,not,found,exception,if,no,code,mbean,server,could,be,found,see,javax,management,mbean,server,factory,find,mbean,server,string;public,static,mbean,server,locate,mbean,server,string,agent,id,throws,mbean,server,not,found,exception,mbean,server,server,null,if,equals,agent,id,list,mbean,server,servers,mbean,server,factory,find,mbean,server,agent,id,if,servers,null,servers,size,0,if,servers,size,1,logger,is,warn,enabled,logger,warn,found,more,than,one,mbean,server,instance,agent,id,null,with,agent,id,agent,id,returning,first,from,list,server,servers,get,0,if,server,null,string,utils,has,length,agent,id,try,server,management,factory,get,platform,mbean,server,catch,security,exception,ex,throw,new,mbean,server,not,found,exception,no,specific,mbean,server,found,and,not,allowed,to,obtain,the,java,platform,mbean,server,ex,if,server,null,throw,new,mbean,server,not,found,exception,unable,to,locate,an,mbean,server,instance,agent,id,null,with,agent,id,agent,id,if,logger,is,debug,enabled,logger,debug,found,mbean,server,server,return,server
JmxUtils -> public static String[] getMethodSignature(Method method);1328020251;Create a <code>String[]</code> representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,code,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1356735495;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1385412762;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1419855992;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1467726769;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1495868221;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1496837955;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1518167526;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1518167818;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1518294946;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
JmxUtils -> public static String[] getMethodSignature(Method method);1532091916;Create a {@code String[]} representing the argument signature of a_method. Each element in the array is the fully qualified class name_of the corresponding argument in the methods signature._@param method the method to build an argument signature for_@return the signature as array of argument types;public static String[] getMethodSignature(Method method) {_		Class<?>[] types = method.getParameterTypes()__		String[] signature = new String[types.length]__		for (int x = 0_ x < types.length_ x++) {_			signature[x] = types[x].getName()__		}_		return signature__	};create,a,code,string,representing,the,argument,signature,of,a,method,each,element,in,the,array,is,the,fully,qualified,class,name,of,the,corresponding,argument,in,the,methods,signature,param,method,the,method,to,build,an,argument,signature,for,return,the,signature,as,array,of,argument,types;public,static,string,get,method,signature,method,method,class,types,method,get,parameter,types,string,signature,new,string,types,length,for,int,x,0,x,types,length,x,signature,x,types,x,get,name,return,signature
