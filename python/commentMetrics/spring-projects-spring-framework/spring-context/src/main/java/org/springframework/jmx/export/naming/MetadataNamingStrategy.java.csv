commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the implementation of the {@code JmxAttributeSource} interface to use  * when reading the source-level metadata.  */ ;/**  * Set the implementation of the {@code JmxAttributeSource} interface to use  * when reading the source-level metadata.  */ public void setAttributeSource(JmxAttributeSource attributeSource) {     Assert.notNull(attributeSource, "JmxAttributeSource must not be null").     this.attributeSource = attributeSource. }
true;public;1;3;/**  * Specify the default domain to be used for generating ObjectNames  * when no source-level metadata has been specified.  * <p>The default is to use the domain specified in the bean name  * (if the bean name follows the JMX ObjectName syntax). else,  * the package name of the managed bean class.  */ ;/**  * Specify the default domain to be used for generating ObjectNames  * when no source-level metadata has been specified.  * <p>The default is to use the domain specified in the bean name  * (if the bean name follows the JMX ObjectName syntax). else,  * the package name of the managed bean class.  */ public void setDefaultDomain(String defaultDomain) {     this.defaultDomain = defaultDomain. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (this.attributeSource == null) {         throw new IllegalArgumentException("Property 'attributeSource' is required").     } }
true;public;2;27;/**  * Reads the {@code ObjectName} from the source-level metadata associated  * with the managed resource's {@code Class}.  */ ;/**  * Reads the {@code ObjectName} from the source-level metadata associated  * with the managed resource's {@code Class}.  */ @Override public ObjectName getObjectName(Object managedBean, @Nullable String beanKey) throws MalformedObjectNameException {     Assert.state(this.attributeSource != null, "No JmxAttributeSource set").     Class<?> managedClass = AopUtils.getTargetClass(managedBean).     ManagedResource mr = this.attributeSource.getManagedResource(managedClass).     // Check that an object name has been specified.     if (mr != null && StringUtils.hasText(mr.getObjectName())) {         return ObjectNameManager.getInstance(mr.getObjectName()).     } else {         Assert.state(beanKey != null, "No ManagedResource attribute and no bean key specified").         try {             return ObjectNameManager.getInstance(beanKey).         } catch (MalformedObjectNameException ex) {             String domain = this.defaultDomain.             if (domain == null) {                 domain = ClassUtils.getPackageName(managedClass).             }             Hashtable<String, String> properties = new Hashtable<>().             properties.put("type", ClassUtils.getShortName(managedClass)).             properties.put("name", beanKey).             return ObjectNameManager.getInstance(domain, properties).         }     } }
