commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean shouldGenerateId() {     return true. }
false;protected;1;4;;@Override protected String getBeanClassName(Element element) {     return "org.springframework.scheduling.config.ContextLifecycleScheduledTaskRegistrar". }
false;protected;3;78;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     // lazy scheduled tasks are a contradiction in terms -> force to false     builder.setLazyInit(false).     ManagedList<RuntimeBeanReference> cronTaskList = new ManagedList<>().     ManagedList<RuntimeBeanReference> fixedDelayTaskList = new ManagedList<>().     ManagedList<RuntimeBeanReference> fixedRateTaskList = new ManagedList<>().     ManagedList<RuntimeBeanReference> triggerTaskList = new ManagedList<>().     NodeList childNodes = element.getChildNodes().     for (int i = 0. i < childNodes.getLength(). i++) {         Node child = childNodes.item(i).         if (!isScheduledElement(child, parserContext)) {             continue.         }         Element taskElement = (Element) child.         String ref = taskElement.getAttribute("ref").         String method = taskElement.getAttribute("method").         // Check that 'ref' and 'method' are specified         if (!StringUtils.hasText(ref) || !StringUtils.hasText(method)) {             parserContext.getReaderContext().error("Both 'ref' and 'method' are required", taskElement).             // Continue with the possible next task element             continue.         }         String cronAttribute = taskElement.getAttribute("cron").         String fixedDelayAttribute = taskElement.getAttribute("fixed-delay").         String fixedRateAttribute = taskElement.getAttribute("fixed-rate").         String triggerAttribute = taskElement.getAttribute("trigger").         String initialDelayAttribute = taskElement.getAttribute("initial-delay").         boolean hasCronAttribute = StringUtils.hasText(cronAttribute).         boolean hasFixedDelayAttribute = StringUtils.hasText(fixedDelayAttribute).         boolean hasFixedRateAttribute = StringUtils.hasText(fixedRateAttribute).         boolean hasTriggerAttribute = StringUtils.hasText(triggerAttribute).         boolean hasInitialDelayAttribute = StringUtils.hasText(initialDelayAttribute).         if (!(hasCronAttribute || hasFixedDelayAttribute || hasFixedRateAttribute || hasTriggerAttribute)) {             parserContext.getReaderContext().error("one of the 'cron', 'fixed-delay', 'fixed-rate', or 'trigger' attributes is required", taskElement).             // with the possible next task element             continue.         }         if (hasInitialDelayAttribute && (hasCronAttribute || hasTriggerAttribute)) {             parserContext.getReaderContext().error("the 'initial-delay' attribute may not be used with cron and trigger tasks", taskElement).             // with the possible next task element             continue.         }         String runnableName = runnableReference(ref, method, taskElement, parserContext).getBeanName().         if (hasFixedDelayAttribute) {             fixedDelayTaskList.add(intervalTaskReference(runnableName, initialDelayAttribute, fixedDelayAttribute, taskElement, parserContext)).         }         if (hasFixedRateAttribute) {             fixedRateTaskList.add(intervalTaskReference(runnableName, initialDelayAttribute, fixedRateAttribute, taskElement, parserContext)).         }         if (hasCronAttribute) {             cronTaskList.add(cronTaskReference(runnableName, cronAttribute, taskElement, parserContext)).         }         if (hasTriggerAttribute) {             String triggerName = new RuntimeBeanReference(triggerAttribute).getBeanName().             triggerTaskList.add(triggerTaskReference(runnableName, triggerName, taskElement, parserContext)).         }     }     String schedulerRef = element.getAttribute("scheduler").     if (StringUtils.hasText(schedulerRef)) {         builder.addPropertyReference("taskScheduler", schedulerRef).     }     builder.addPropertyValue("cronTasksList", cronTaskList).     builder.addPropertyValue("fixedDelayTasksList", fixedDelayTaskList).     builder.addPropertyValue("fixedRateTasksList", fixedRateTaskList).     builder.addPropertyValue("triggerTasksList", triggerTaskList). }
false;private;2;4;;private boolean isScheduledElement(Node node, ParserContext parserContext) {     return node.getNodeType() == Node.ELEMENT_NODE && ELEMENT_SCHEDULED.equals(parserContext.getDelegate().getLocalName(node)). }
false;private;4;7;;private RuntimeBeanReference runnableReference(String ref, String method, Element taskElement, ParserContext parserContext) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition("org.springframework.scheduling.support.ScheduledMethodRunnable").     builder.addConstructorArgReference(ref).     builder.addConstructorArgValue(method).     return beanReference(taskElement, parserContext, builder). }
false;private;5;9;;private RuntimeBeanReference intervalTaskReference(String runnableBeanName, String initialDelay, String interval, Element taskElement, ParserContext parserContext) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition("org.springframework.scheduling.config.IntervalTask").     builder.addConstructorArgReference(runnableBeanName).     builder.addConstructorArgValue(interval).     builder.addConstructorArgValue(StringUtils.hasLength(initialDelay) ? initialDelay : ZERO_INITIAL_DELAY).     return beanReference(taskElement, parserContext, builder). }
false;private;4;8;;private RuntimeBeanReference cronTaskReference(String runnableBeanName, String cronExpression, Element taskElement, ParserContext parserContext) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition("org.springframework.scheduling.config.CronTask").     builder.addConstructorArgReference(runnableBeanName).     builder.addConstructorArgValue(cronExpression).     return beanReference(taskElement, parserContext, builder). }
false;private;4;8;;private RuntimeBeanReference triggerTaskReference(String runnableBeanName, String triggerBeanName, Element taskElement, ParserContext parserContext) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition("org.springframework.scheduling.config.TriggerTask").     builder.addConstructorArgReference(runnableBeanName).     builder.addConstructorArgReference(triggerBeanName).     return beanReference(taskElement, parserContext, builder). }
false;private;3;8;;private RuntimeBeanReference beanReference(Element taskElement, ParserContext parserContext, BeanDefinitionBuilder builder) {     // Extract the source of the current task     builder.getRawBeanDefinition().setSource(parserContext.extractSource(taskElement)).     String generatedName = parserContext.getReaderContext().generateBeanName(builder.getRawBeanDefinition()).     parserContext.registerBeanComponent(new BeanComponentDefinition(builder.getBeanDefinition(), generatedName)).     return new RuntimeBeanReference(generatedName). }
