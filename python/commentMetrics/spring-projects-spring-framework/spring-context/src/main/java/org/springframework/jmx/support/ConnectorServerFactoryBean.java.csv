commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the service URL for the {@code JMXConnectorServer}.  */ ;/**  * Set the service URL for the {@code JMXConnectorServer}.  */ public void setServiceUrl(String serviceUrl) {     this.serviceUrl = serviceUrl. }
true;public;1;3;/**  * Set the environment properties used to construct the {@code JMXConnectorServer}  * as {@code java.util.Properties} (String key/value pairs).  */ ;/**  * Set the environment properties used to construct the {@code JMXConnectorServer}  * as {@code java.util.Properties} (String key/value pairs).  */ public void setEnvironment(@Nullable Properties environment) {     CollectionUtils.mergePropertiesIntoMap(environment, this.environment). }
true;public;1;5;/**  * Set the environment properties used to construct the {@code JMXConnector}  * as a {@code Map} of String keys and arbitrary Object values.  */ ;/**  * Set the environment properties used to construct the {@code JMXConnector}  * as a {@code Map} of String keys and arbitrary Object values.  */ public void setEnvironmentMap(@Nullable Map<String, ?> environment) {     if (environment != null) {         this.environment.putAll(environment).     } }
true;public;1;3;/**  * Set an MBeanServerForwarder to be applied to the {@code JMXConnectorServer}.  */ ;/**  * Set an MBeanServerForwarder to be applied to the {@code JMXConnectorServer}.  */ public void setForwarder(MBeanServerForwarder forwarder) {     this.forwarder = forwarder. }
true;public;1;3;/**  * Set the {@code ObjectName} used to register the {@code JMXConnectorServer}  * itself with the {@code MBeanServer}, as {@code ObjectName} instance  * or as {@code String}.  * @throws MalformedObjectNameException if the {@code ObjectName} is malformed  */ ;/**  * Set the {@code ObjectName} used to register the {@code JMXConnectorServer}  * itself with the {@code MBeanServer}, as {@code ObjectName} instance  * or as {@code String}.  * @throws MalformedObjectNameException if the {@code ObjectName} is malformed  */ public void setObjectName(Object objectName) throws MalformedObjectNameException {     this.objectName = ObjectNameManager.getInstance(objectName). }
true;public;1;3;/**  * Set whether the {@code JMXConnectorServer} should be started in a separate thread.  */ ;/**  * Set whether the {@code JMXConnectorServer} should be started in a separate thread.  */ public void setThreaded(boolean threaded) {     this.threaded = threaded. }
true;public;1;3;/**  * Set whether any threads started for the {@code JMXConnectorServer} should be  * started as daemon threads.  */ ;/**  * Set whether any threads started for the {@code JMXConnectorServer} should be  * started as daemon threads.  */ public void setDaemon(boolean daemon) {     this.daemon = daemon. }
false;public;0;9;;@Override public void run() {     try {         serverToStart.start().     } catch (IOException ex) {         throw new JmxException("Could not start JMX connector server after delay", ex).     } }
true;public;0;58;/**  * Start the connector server. If the {@code threaded} flag is set to {@code true},  * the {@code JMXConnectorServer} will be started in a separate thread.  * If the {@code daemon} flag is set to {@code true}, that thread will be  * started as a daemon thread.  * @throws JMException if a problem occurred when registering the connector server  * with the {@code MBeanServer}  * @throws IOException if there is a problem starting the connector server  */ ;/**  * Start the connector server. If the {@code threaded} flag is set to {@code true},  * the {@code JMXConnectorServer} will be started in a separate thread.  * If the {@code daemon} flag is set to {@code true}, that thread will be  * started as a daemon thread.  * @throws JMException if a problem occurred when registering the connector server  * with the {@code MBeanServer}  * @throws IOException if there is a problem starting the connector server  */ @Override public void afterPropertiesSet() throws JMException, IOException {     if (this.server == null) {         this.server = JmxUtils.locateMBeanServer().     }     // Create the JMX service URL.     JMXServiceURL url = new JMXServiceURL(this.serviceUrl).     // Create the connector server now.     this.connectorServer = JMXConnectorServerFactory.newJMXConnectorServer(url, this.environment, this.server).     // Set the given MBeanServerForwarder, if any.     if (this.forwarder != null) {         this.connectorServer.setMBeanServerForwarder(this.forwarder).     }     // Do we want to register the connector with the MBean server?     if (this.objectName != null) {         doRegister(this.connectorServer, this.objectName).     }     try {         if (this.threaded) {             // Start the connector server asynchronously (in a separate thread).             final JMXConnectorServer serverToStart = this.connectorServer.             Thread connectorThread = new Thread() {                  @Override                 public void run() {                     try {                         serverToStart.start().                     } catch (IOException ex) {                         throw new JmxException("Could not start JMX connector server after delay", ex).                     }                 }             }.             connectorThread.setName("JMX Connector Thread [" + this.serviceUrl + "]").             connectorThread.setDaemon(this.daemon).             connectorThread.start().         } else {             // Start the connector server in the same thread.             this.connectorServer.start().         }         if (logger.isInfoEnabled()) {             logger.info("JMX connector server started: " + this.connectorServer).         }     } catch (IOException ex) {         // Unregister the connector server if startup failed.         unregisterBeans().         throw ex.     } }
false;public;0;5;;@Override @Nullable public JMXConnectorServer getObject() {     return this.connectorServer. }
false;public;0;4;;@Override public Class<? extends JMXConnectorServer> getObjectType() {     return (this.connectorServer != null ? this.connectorServer.getClass() : JMXConnectorServer.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;public;0;14;/**  * Stop the {@code JMXConnectorServer} managed by an instance of this class.  * Automatically called on {@code ApplicationContext} shutdown.  * @throws IOException if there is an error stopping the connector server  */ ;/**  * Stop the {@code JMXConnectorServer} managed by an instance of this class.  * Automatically called on {@code ApplicationContext} shutdown.  * @throws IOException if there is an error stopping the connector server  */ @Override public void destroy() throws IOException {     try {         if (this.connectorServer != null) {             if (logger.isInfoEnabled()) {                 logger.info("Stopping JMX connector server: " + this.connectorServer).             }             this.connectorServer.stop().         }     } finally {         unregisterBeans().     } }
