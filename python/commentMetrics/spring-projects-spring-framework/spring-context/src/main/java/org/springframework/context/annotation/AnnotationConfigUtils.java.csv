commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Register all relevant annotation post processors in the given registry.  * @param registry the registry to operate on  */ ;/**  * Register all relevant annotation post processors in the given registry.  * @param registry the registry to operate on  */ public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {     registerAnnotationConfigProcessors(registry, null). }
true;public,static;2;63;/**  * Register all relevant annotation post processors in the given registry.  * @param registry the registry to operate on  * @param source the configuration source element (already extracted)  * that this registration was triggered from. May be {@code null}.  * @return a Set of BeanDefinitionHolders, containing all bean definitions  * that have actually been registered by this call  */ ;/**  * Register all relevant annotation post processors in the given registry.  * @param registry the registry to operate on  * @param source the configuration source element (already extracted)  * that this registration was triggered from. May be {@code null}.  * @return a Set of BeanDefinitionHolders, containing all bean definitions  * that have actually been registered by this call  */ public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(BeanDefinitionRegistry registry, @Nullable Object source) {     DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry).     if (beanFactory != null) {         if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {             beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE).         }         if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {             beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver()).         }     }     Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(8).     if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {         RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class).         def.setSource(source).         beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)).     }     if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {         RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class).         def.setSource(source).         beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)).     }     // Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.     if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {         RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class).         def.setSource(source).         beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)).     }     // Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.     if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {         RootBeanDefinition def = new RootBeanDefinition().         try {             def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, AnnotationConfigUtils.class.getClassLoader())).         } catch (ClassNotFoundException ex) {             throw new IllegalStateException("Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex).         }         def.setSource(source).         beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)).     }     if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {         RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class).         def.setSource(source).         beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME)).     }     if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {         RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class).         def.setSource(source).         beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME)).     }     return beanDefs. }
false;private,static;3;7;;private static BeanDefinitionHolder registerPostProcessor(BeanDefinitionRegistry registry, RootBeanDefinition definition, String beanName) {     definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     registry.registerBeanDefinition(beanName, definition).     return new BeanDefinitionHolder(definition, beanName). }
false;private,static;1;12;;@Nullable private static DefaultListableBeanFactory unwrapDefaultListableBeanFactory(BeanDefinitionRegistry registry) {     if (registry instanceof DefaultListableBeanFactory) {         return (DefaultListableBeanFactory) registry.     } else if (registry instanceof GenericApplicationContext) {         return ((GenericApplicationContext) registry).getDefaultListableBeanFactory().     } else {         return null.     } }
false;public,static;1;3;;public static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd) {     processCommonDefinitionAnnotations(abd, abd.getMetadata()). }
false;static;2;29;;static void processCommonDefinitionAnnotations(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata) {     AnnotationAttributes lazy = attributesFor(metadata, Lazy.class).     if (lazy != null) {         abd.setLazyInit(lazy.getBoolean("value")).     } else if (abd.getMetadata() != metadata) {         lazy = attributesFor(abd.getMetadata(), Lazy.class).         if (lazy != null) {             abd.setLazyInit(lazy.getBoolean("value")).         }     }     if (metadata.isAnnotated(Primary.class.getName())) {         abd.setPrimary(true).     }     AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn.class).     if (dependsOn != null) {         abd.setDependsOn(dependsOn.getStringArray("value")).     }     AnnotationAttributes role = attributesFor(metadata, Role.class).     if (role != null) {         abd.setRole(role.getNumber("value").intValue()).     }     AnnotationAttributes description = attributesFor(metadata, Description.class).     if (description != null) {         abd.setDescription(description.getString("value")).     } }
false;static;3;10;;static BeanDefinitionHolder applyScopedProxyMode(ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry) {     ScopedProxyMode scopedProxyMode = metadata.getScopedProxyMode().     if (scopedProxyMode.equals(ScopedProxyMode.NO)) {         return definition.     }     boolean proxyTargetClass = scopedProxyMode.equals(ScopedProxyMode.TARGET_CLASS).     return ScopedProxyCreator.createScopedProxy(definition, registry, proxyTargetClass). }
false;static;2;4;;@Nullable static AnnotationAttributes attributesFor(AnnotatedTypeMetadata metadata, Class<?> annotationClass) {     return attributesFor(metadata, annotationClass.getName()). }
false;static;2;4;;@Nullable static AnnotationAttributes attributesFor(AnnotatedTypeMetadata metadata, String annotationClassName) {     return AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(annotationClassName, false)). }
false;static;3;5;;static Set<AnnotationAttributes> attributesForRepeatable(AnnotationMetadata metadata, Class<?> containerClass, Class<?> annotationClass) {     return attributesForRepeatable(metadata, containerClass.getName(), annotationClass.getName()). }
false;static;3;20;;@SuppressWarnings("unchecked") static Set<AnnotationAttributes> attributesForRepeatable(AnnotationMetadata metadata, String containerClassName, String annotationClassName) {     Set<AnnotationAttributes> result = new LinkedHashSet<>().     // Direct annotation present?     addAttributesIfNotNull(result, metadata.getAnnotationAttributes(annotationClassName, false)).     // Container annotation present?     Map<String, Object> container = metadata.getAnnotationAttributes(containerClassName, false).     if (container != null && container.containsKey("value")) {         for (Map<String, Object> containedAttributes : (Map<String, Object>[]) container.get("value")) {             addAttributesIfNotNull(result, containedAttributes).         }     }     // Return merged result     return Collections.unmodifiableSet(result). }
false;private,static;2;7;;private static void addAttributesIfNotNull(Set<AnnotationAttributes> result, @Nullable Map<String, Object> attributes) {     if (attributes != null) {         result.add(AnnotationAttributes.fromMap(attributes)).     } }
