# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1328020251;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be <code>null</code>._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,code,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1329142650;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be <code>null</code>._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,code,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1329144854;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be <code>null</code>._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,code,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1329393628;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be <code>null</code>._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,code,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1356735495;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1377269365;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1377641679;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1382465750;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1382738575;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1396865240;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1397718966;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				ClassLoader cl = AnnotationConfigUtils.class.getClassLoader()__				def.setBeanClass(cl.loadClass(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,class,loader,cl,annotation,config,utils,class,get,class,loader,def,set,bean,class,cl,load,class,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1398638841;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1401908653;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(DefaultDependencyComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,default,dependency,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1403775847;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(DefaultDependencyComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,default,dependency,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1406577501;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(DefaultDependencyComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,default,dependency,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1409784073;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1417457791;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1423555982;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1423556073;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<BeanDefinitionHolder>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,bean,definition,holder,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, Object source);1467730834;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1328020251;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1329142650;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1329144854;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1329393628;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1356735495;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1377269365;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1377641679;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1382465750;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1382738575;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1396865240;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1397718966;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1398638841;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1401908653;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1403775847;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1406577501;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1409784073;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1417457791;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1423555982;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1423556073;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1467730834;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1495868221;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1496263893;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1496837955;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1521050030;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1530174524;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1530188116;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1530198749;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1532509782;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1533765377;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry);1536863076;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on;public static void registerAnnotationConfigProcessors(BeanDefinitionRegistry registry) {_		registerAnnotationConfigProcessors(registry, null)__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on;public,static,void,register,annotation,config,processors,bean,definition,registry,registry,register,annotation,config,processors,registry,null
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1495868221;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1496263893;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1496837955;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1521050030;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1530174524;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(RequiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,required,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1530188116;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1530198749;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1532509782;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(4)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}_		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,4,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1533765377;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(8)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,8,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
AnnotationConfigUtils -> public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors( 			BeanDefinitionRegistry registry, @Nullable Object source);1536863076;Register all relevant annotation post processors in the given registry._@param registry the registry to operate on_@param source the configuration source element (already extracted)_that this registration was triggered from. May be {@code null}._@return a Set of BeanDefinitionHolders, containing all bean definitions_that have actually been registered by this call;public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(_			BeanDefinitionRegistry registry, @Nullable Object source) {__		DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry)__		if (beanFactory != null) {_			if (!(beanFactory.getDependencyComparator() instanceof AnnotationAwareOrderComparator)) {_				beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE)__			}_			if (!(beanFactory.getAutowireCandidateResolver() instanceof ContextAnnotationAutowireCandidateResolver)) {_				beanFactory.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver())__			}_		}__		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(8)___		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jsr250Present && !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(CommonAnnotationBeanPostProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		_		if (jpaPresent && !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition()__			try {_				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,_						AnnotationConfigUtils.class.getClassLoader()))__			}_			catch (ClassNotFoundException ex) {_				throw new IllegalStateException(_						"Cannot load optional framework class: " + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex)__			}_			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(EventListenerMethodProcessor.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME))__		}__		if (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) {_			RootBeanDefinition def = new RootBeanDefinition(DefaultEventListenerFactory.class)__			def.setSource(source)__			beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME))__		}__		return beanDefs__	};register,all,relevant,annotation,post,processors,in,the,given,registry,param,registry,the,registry,to,operate,on,param,source,the,configuration,source,element,already,extracted,that,this,registration,was,triggered,from,may,be,code,null,return,a,set,of,bean,definition,holders,containing,all,bean,definitions,that,have,actually,been,registered,by,this,call;public,static,set,bean,definition,holder,register,annotation,config,processors,bean,definition,registry,registry,nullable,object,source,default,listable,bean,factory,bean,factory,unwrap,default,listable,bean,factory,registry,if,bean,factory,null,if,bean,factory,get,dependency,comparator,instanceof,annotation,aware,order,comparator,bean,factory,set,dependency,comparator,annotation,aware,order,comparator,instance,if,bean,factory,get,autowire,candidate,resolver,instanceof,context,annotation,autowire,candidate,resolver,bean,factory,set,autowire,candidate,resolver,new,context,annotation,autowire,candidate,resolver,set,bean,definition,holder,bean,defs,new,linked,hash,set,8,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,configuration,class,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,autowired,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jsr250present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,common,annotation,bean,post,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,jpa,present,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,try,def,set,bean,class,class,utils,for,name,annotation,config,utils,class,get,class,loader,catch,class,not,found,exception,ex,throw,new,illegal,state,exception,cannot,load,optional,framework,class,ex,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,event,listener,method,processor,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,if,registry,contains,bean,definition,root,bean,definition,def,new,root,bean,definition,default,event,listener,factory,class,def,set,source,source,bean,defs,add,register,post,processor,registry,def,return,bean,defs
