# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationBeanNameGenerator -> @Nullable 	protected String buildDefaultBeanName(BeanDefinition definition);1495868221;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.InnerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});@Nullable_	protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;nullable,protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> @Nullable 	protected String buildDefaultBeanName(BeanDefinition definition);1496263893;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.InnerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});@Nullable_	protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;nullable,protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1328020251;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never <code>null</code>);protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null,code;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1329142650;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never <code>null</code>);protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null,code;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1347282850;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never <code>null</code>);protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null,code;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1347311780;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never <code>null</code>);protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null,code;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1356735495;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1357119239;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1368482696;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1372363092;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1377269365;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1387280364;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.innerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1417457791;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.InnerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String shortClassName = ClassUtils.getShortName(definition.getBeanClassName())__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,short,class,name,class,utils,get,short,name,definition,get,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition);1496837955;Derive a default bean name from the given bean definition._<p>The default implementation simply builds a decapitalized version_of the short class name: e.g. "mypackage.MyJdbcDao" -> "myJdbcDao"._<p>Note that inner classes will thus have names of the form_"outerClassName.InnerClassName", which because of the period in the_name may be an issue if you are autowiring by name._@param definition the bean definition to build a bean name for_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition) {_		String beanClassName = definition.getBeanClassName()__		Assert.state(beanClassName != null, "No bean class name set")__		String shortClassName = ClassUtils.getShortName(beanClassName)__		return Introspector.decapitalize(shortClassName)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,simply,builds,a,decapitalized,version,of,the,short,class,name,e,g,mypackage,my,jdbc,dao,my,jdbc,dao,p,note,that,inner,classes,will,thus,have,names,of,the,form,outer,class,name,inner,class,name,which,because,of,the,period,in,the,name,may,be,an,issue,if,you,are,autowiring,by,name,param,definition,the,bean,definition,to,build,a,bean,name,for,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,string,bean,class,name,definition,get,bean,class,name,assert,state,bean,class,name,null,no,bean,class,name,set,string,short,class,name,class,utils,get,short,name,bean,class,name,return,introspector,decapitalize,short,class,name
AnnotationBeanNameGenerator -> @Nullable 	protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1495868221;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});@Nullable_	protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;nullable,protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> @Nullable 	protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1496263893;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});@Nullable_	protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;nullable,protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1347282850;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)},_appending a counter suffix if necessary to make the bean name unique in the given registry._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never <code>null</code>);protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		String generatedName = buildDefaultBeanName(definition)__		_		String id = generatedName__		int counter = 0__		while (registry.containsBeanDefinition(id)) {_			counter++__			id = generatedName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return id__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,appending,a,counter,suffix,if,necessary,to,make,the,bean,name,unique,in,the,given,registry,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null,code;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,string,generated,name,build,default,bean,name,definition,string,id,generated,name,int,counter,0,while,registry,contains,bean,definition,id,counter,id,generated,name,bean,factory,utils,counter,return,id
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1347311780;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never <code>null</code>);protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null,code;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1356735495;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1357119239;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1368482696;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1372363092;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1377269365;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1387280364;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1417457791;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry);1496837955;Derive a default bean name from the given bean definition._<p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}._@param definition the bean definition to build a bean name for_@param registry the registry that the given bean definition is being registered with_@return the default bean name (never {@code null});protected String buildDefaultBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {_		return buildDefaultBeanName(definition)__	};derive,a,default,bean,name,from,the,given,bean,definition,p,the,default,implementation,delegates,to,link,build,default,bean,name,bean,definition,param,definition,the,bean,definition,to,build,a,bean,name,for,param,registry,the,registry,that,the,given,bean,definition,is,being,registered,with,return,the,default,bean,name,never,code,null;protected,string,build,default,bean,name,bean,definition,definition,bean,definition,registry,registry,return,build,default,bean,name,definition
AnnotationBeanNameGenerator -> @Nullable 	protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1495868221;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;@Nullable_	protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				Object value = attributes.get("value")__				if (value instanceof String) {_					String strVal = (String) value__					if (StringUtils.hasLength(strVal)) {_						if (beanName != null && !strVal.equals(beanName)) {_							throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_									"component names: '" + beanName + "' versus '" + strVal + "'")__						}_						beanName = strVal__					}_				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;nullable,protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,annotation,config,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,object,value,attributes,get,value,if,value,instanceof,string,string,str,val,string,value,if,string,utils,has,length,str,val,if,bean,name,null,str,val,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,str,val,bean,name,str,val,return,bean,name
AnnotationBeanNameGenerator -> @Nullable 	protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1496263893;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;@Nullable_	protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				Object value = attributes.get("value")__				if (value instanceof String) {_					String strVal = (String) value__					if (StringUtils.hasLength(strVal)) {_						if (beanName != null && !strVal.equals(beanName)) {_							throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_									"component names: '" + beanName + "' versus '" + strVal + "'")__						}_						beanName = strVal__					}_				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;nullable,protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,annotation,config,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,object,value,attributes,get,value,if,value,instanceof,string,string,str,val,string,value,if,string,utils,has,length,str,val,if,bean,name,null,str,val,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,str,val,bean,name,str,val,return,bean,name
AnnotationBeanNameGenerator -> @Nullable 	protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1496837955;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;@Nullable_	protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type)__			if (attributes != null && isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				Object value = attributes.get("value")__				if (value instanceof String) {_					String strVal = (String) value__					if (StringUtils.hasLength(strVal)) {_						if (beanName != null && !strVal.equals(beanName)) {_							throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_									"component names: '" + beanName + "' versus '" + strVal + "'")__						}_						beanName = strVal__					}_				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;nullable,protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,annotation,config,utils,attributes,for,amd,type,if,attributes,null,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,object,value,attributes,get,value,if,value,instanceof,string,string,str,val,string,value,if,string,utils,has,length,str,val,if,bean,name,null,str,val,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,str,val,bean,name,str,val,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1328020251;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or <code>null</code> if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			Map<String, Object> attributes = amd.getAnnotationAttributes(type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,code,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,map,string,object,attributes,amd,get,annotation,attributes,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1329142650;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or <code>null</code> if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,code,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1347282850;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or <code>null</code> if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,code,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1347311780;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or <code>null</code> if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,code,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1356735495;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1357119239;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1368482696;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1372363092;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,metadata,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1377269365;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				String value = (String) attributes.get("value")__				if (StringUtils.hasLength(value)) {_					if (beanName != null && !value.equals(beanName)) {_						throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_								"component names: '" + beanName + "' versus '" + value + "'")__					}_					beanName = value__				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,annotation,config,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,string,value,string,attributes,get,value,if,string,utils,has,length,value,if,bean,name,null,value,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,value,bean,name,value,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1387280364;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				Object value = attributes.get("value")__				if (value instanceof String) {_					String strVal = (String) value__					if (StringUtils.hasLength(strVal)) {_						if (beanName != null && !strVal.equals(beanName)) {_							throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_									"component names: '" + beanName + "' versus '" + strVal + "'")__						}_						beanName = strVal__					}_				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,annotation,config,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,object,value,attributes,get,value,if,value,instanceof,string,string,str,val,string,value,if,string,utils,has,length,str,val,if,bean,name,null,str,val,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,str,val,bean,name,str,val,return,bean,name
AnnotationBeanNameGenerator -> protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef);1417457791;Derive a bean name from one of the annotations on the class._@param annotatedDef the annotation-aware bean definition_@return the bean name, or {@code null} if none is found;protected String determineBeanNameFromAnnotation(AnnotatedBeanDefinition annotatedDef) {_		AnnotationMetadata amd = annotatedDef.getMetadata()__		Set<String> types = amd.getAnnotationTypes()__		String beanName = null__		for (String type : types) {_			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type)__			if (isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) {_				Object value = attributes.get("value")__				if (value instanceof String) {_					String strVal = (String) value__					if (StringUtils.hasLength(strVal)) {_						if (beanName != null && !strVal.equals(beanName)) {_							throw new IllegalStateException("Stereotype annotations suggest inconsistent " +_									"component names: '" + beanName + "' versus '" + strVal + "'")__						}_						beanName = strVal__					}_				}_			}_		}_		return beanName__	};derive,a,bean,name,from,one,of,the,annotations,on,the,class,param,annotated,def,the,annotation,aware,bean,definition,return,the,bean,name,or,code,null,if,none,is,found;protected,string,determine,bean,name,from,annotation,annotated,bean,definition,annotated,def,annotation,metadata,amd,annotated,def,get,metadata,set,string,types,amd,get,annotation,types,string,bean,name,null,for,string,type,types,annotation,attributes,attributes,annotation,config,utils,attributes,for,amd,type,if,is,stereotype,with,name,value,type,amd,get,meta,annotation,types,type,attributes,object,value,attributes,get,value,if,value,instanceof,string,string,str,val,string,value,if,string,utils,has,length,str,val,if,bean,name,null,str,val,equals,bean,name,throw,new,illegal,state,exception,stereotype,annotations,suggest,inconsistent,component,names,bean,name,versus,str,val,bean,name,str,val,return,bean,name
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1328020251;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation <code>value()</code>._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,code,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1329142650;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation <code>value()</code>._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,code,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1347282850;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation <code>value()</code>._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,code,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1347311780;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation <code>value()</code>._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,code,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1356735495;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1357119239;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1368482696;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")__		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1372363092;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")___		return (isStereotype && attributes != null &&_				attributes.containsKey("value") &&_				attributes.get("value") instanceof String)__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value,attributes,get,value,instanceof,string
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1377269365;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")___		return (isStereotype && attributes != null &&_				attributes.containsKey("value") &&_				attributes.get("value") instanceof String)__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value,attributes,get,value,instanceof,string
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1387280364;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")___		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1417457791;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")___		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1495868221;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")___		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
AnnotationBeanNameGenerator -> protected boolean isStereotypeWithNameValue(String annotationType, 			Set<String> metaAnnotationTypes, Map<String, Object> attributes);1496263893;Check whether the given annotation is a stereotype that is allowed_to suggest a component name through its annotation {@code value()}._@param annotationType the name of the annotation class to check_@param metaAnnotationTypes the names of meta-annotations on the given annotation_@param attributes the map of attributes for the given annotation_@return whether the annotation qualifies as a stereotype with component name;protected boolean isStereotypeWithNameValue(String annotationType,_			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {__		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||_				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||_				annotationType.equals("javax.annotation.ManagedBean") ||_				annotationType.equals("javax.inject.Named")___		return (isStereotype && attributes != null && attributes.containsKey("value"))__	};check,whether,the,given,annotation,is,a,stereotype,that,is,allowed,to,suggest,a,component,name,through,its,annotation,code,value,param,annotation,type,the,name,of,the,annotation,class,to,check,param,meta,annotation,types,the,names,of,meta,annotations,on,the,given,annotation,param,attributes,the,map,of,attributes,for,the,given,annotation,return,whether,the,annotation,qualifies,as,a,stereotype,with,component,name;protected,boolean,is,stereotype,with,name,value,string,annotation,type,set,string,meta,annotation,types,map,string,object,attributes,boolean,is,stereotype,annotation,type,equals,meta,annotation,types,null,meta,annotation,types,contains,annotation,type,equals,javax,annotation,managed,bean,annotation,type,equals,javax,inject,named,return,is,stereotype,attributes,null,attributes,contains,key,value
