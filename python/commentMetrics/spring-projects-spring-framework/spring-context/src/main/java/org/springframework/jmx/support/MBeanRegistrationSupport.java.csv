commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the {@code MBeanServer} instance with which all beans should  * be registered. The {@code MBeanExporter} will attempt to locate an  * existing {@code MBeanServer} if none is supplied.  */ ;/**  * Specify the {@code MBeanServer} instance with which all beans should  * be registered. The {@code MBeanExporter} will attempt to locate an  * existing {@code MBeanServer} if none is supplied.  */ public void setServer(@Nullable MBeanServer server) {     this.server = server. }
true;public,final;0;4;/**  * Return the {@code MBeanServer} that the beans will be registered with.  */ ;/**  * Return the {@code MBeanServer} that the beans will be registered with.  */ @Nullable public final MBeanServer getServer() {     return this.server. }
true;public;1;4;/**  * The policy to use when attempting to register an MBean  * under an {@link javax.management.ObjectName} that already exists.  * @param registrationPolicy the policy to use  * @since 3.2  */ ;/**  * The policy to use when attempting to register an MBean  * under an {@link javax.management.ObjectName} that already exists.  * @param registrationPolicy the policy to use  * @since 3.2  */ public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {     Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null").     this.registrationPolicy = registrationPolicy. }
true;protected;2;45;/**  * Actually register the MBean with the server. The behavior when encountering  * an existing MBean can be configured using {@link #setRegistrationPolicy}.  * @param mbean the MBean instance  * @param objectName the suggested ObjectName for the MBean  * @throws JMException if the registration failed  */ ;/**  * Actually register the MBean with the server. The behavior when encountering  * an existing MBean can be configured using {@link #setRegistrationPolicy}.  * @param mbean the MBean instance  * @param objectName the suggested ObjectName for the MBean  * @throws JMException if the registration failed  */ protected void doRegister(Object mbean, ObjectName objectName) throws JMException {     Assert.state(this.server != null, "No MBeanServer set").     ObjectName actualObjectName.     synchronized (this.registeredBeans) {         ObjectInstance registeredBean = null.         try {             registeredBean = this.server.registerMBean(mbean, objectName).         } catch (InstanceAlreadyExistsException ex) {             if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {                 if (logger.isDebugEnabled()) {                     logger.debug("Ignoring existing MBean at [" + objectName + "]").                 }             } else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {                 try {                     if (logger.isDebugEnabled()) {                         logger.debug("Replacing existing MBean at [" + objectName + "]").                     }                     this.server.unregisterMBean(objectName).                     registeredBean = this.server.registerMBean(mbean, objectName).                 } catch (InstanceNotFoundException ex2) {                     if (logger.isInfoEnabled()) {                         logger.info("Unable to replace existing MBean at [" + objectName + "]", ex2).                     }                     throw ex.                 }             } else {                 throw ex.             }         }         // Track registration and notify listeners.         actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null).         if (actualObjectName == null) {             actualObjectName = objectName.         }         this.registeredBeans.add(actualObjectName).     }     onRegister(actualObjectName, mbean). }
true;protected;0;12;/**  * Unregisters all beans that have been registered by an instance of this class.  */ ;/**  * Unregisters all beans that have been registered by an instance of this class.  */ protected void unregisterBeans() {     Set<ObjectName> snapshot.     synchronized (this.registeredBeans) {         snapshot = new LinkedHashSet<>(this.registeredBeans).     }     if (!snapshot.isEmpty()) {         logger.debug("Unregistering JMX-exposed beans").         for (ObjectName objectName : snapshot) {             doUnregister(objectName).         }     } }
true;protected;1;31;/**  * Actually unregister the specified MBean from the server.  * @param objectName the suggested ObjectName for the MBean  */ ;/**  * Actually unregister the specified MBean from the server.  * @param objectName the suggested ObjectName for the MBean  */ protected void doUnregister(ObjectName objectName) {     Assert.state(this.server != null, "No MBeanServer set").     boolean actuallyUnregistered = false.     synchronized (this.registeredBeans) {         if (this.registeredBeans.remove(objectName)) {             try {                 // MBean might already have been unregistered by an external process                 if (this.server.isRegistered(objectName)) {                     this.server.unregisterMBean(objectName).                     actuallyUnregistered = true.                 } else {                     if (logger.isInfoEnabled()) {                         logger.info("Could not unregister MBean [" + objectName + "] as said MBean " + "is not registered (perhaps already unregistered by an external process)").                     }                 }             } catch (JMException ex) {                 if (logger.isInfoEnabled()) {                     logger.info("Could not unregister MBean [" + objectName + "]", ex).                 }             }         }     }     if (actuallyUnregistered) {         onUnregister(objectName).     } }
true;protected,final;0;5;/**  * Return the {@link ObjectName ObjectNames} of all registered beans.  */ ;/**  * Return the {@link ObjectName ObjectNames} of all registered beans.  */ protected final ObjectName[] getRegisteredObjectNames() {     synchronized (this.registeredBeans) {         return this.registeredBeans.toArray(new ObjectName[0]).     } }
true;protected;2;3;/**  * Called when an MBean is registered under the given {@link ObjectName}. Allows  * subclasses to perform additional processing when an MBean is registered.  * <p>The default implementation delegates to {@link #onRegister(ObjectName)}.  * @param objectName the actual {@link ObjectName} that the MBean was registered with  * @param mbean the registered MBean instance  */ ;/**  * Called when an MBean is registered under the given {@link ObjectName}. Allows  * subclasses to perform additional processing when an MBean is registered.  * <p>The default implementation delegates to {@link #onRegister(ObjectName)}.  * @param objectName the actual {@link ObjectName} that the MBean was registered with  * @param mbean the registered MBean instance  */ protected void onRegister(ObjectName objectName, Object mbean) {     onRegister(objectName). }
true;protected;1;2;/**  * Called when an MBean is registered under the given {@link ObjectName}. Allows  * subclasses to perform additional processing when an MBean is registered.  * <p>The default implementation is empty. Can be overridden in subclasses.  * @param objectName the actual {@link ObjectName} that the MBean was registered with  */ ;/**  * Called when an MBean is registered under the given {@link ObjectName}. Allows  * subclasses to perform additional processing when an MBean is registered.  * <p>The default implementation is empty. Can be overridden in subclasses.  * @param objectName the actual {@link ObjectName} that the MBean was registered with  */ protected void onRegister(ObjectName objectName) { }
true;protected;1;2;/**  * Called when an MBean is unregistered under the given {@link ObjectName}. Allows  * subclasses to perform additional processing when an MBean is unregistered.  * <p>The default implementation is empty. Can be overridden in subclasses.  * @param objectName the {@link ObjectName} that the MBean was registered with  */ ;/**  * Called when an MBean is unregistered under the given {@link ObjectName}. Allows  * subclasses to perform additional processing when an MBean is unregistered.  * <p>The default implementation is empty. Can be overridden in subclasses.  * @param objectName the {@link ObjectName} that the MBean was registered with  */ protected void onUnregister(ObjectName objectName) { }
