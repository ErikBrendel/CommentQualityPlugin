# id;timestamp;commentText;codeText;commentWords;codeWords
MBeanRegistrationSupport -> protected void unregisterBeans();1328020251;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		for (ObjectName objectName : this.registeredBeans) {_			doUnregister(objectName)__		}_		this.registeredBeans.clear()__	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,for,object,name,object,name,this,registered,beans,do,unregister,object,name,this,registered,beans,clear
MBeanRegistrationSupport -> protected void unregisterBeans();1351167990;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		for (ObjectName objectName : this.registeredBeans) {_			doUnregister(objectName)__		}_		this.registeredBeans.clear()__	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,for,object,name,object,name,this,registered,beans,do,unregister,object,name,this,registered,beans,clear
MBeanRegistrationSupport -> protected void unregisterBeans();1356735495;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		for (ObjectName objectName : this.registeredBeans) {_			doUnregister(objectName)__		}_		this.registeredBeans.clear()__	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,for,object,name,object,name,this,registered,beans,do,unregister,object,name,this,registered,beans,clear
MBeanRegistrationSupport -> protected void unregisterBeans();1362408075;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		for (ObjectName objectName : new LinkedHashSet<ObjectName>(this.registeredBeans)) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,for,object,name,object,name,new,linked,hash,set,object,name,this,registered,beans,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1386775886;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<ObjectName>(this.registeredBeans)__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,object,name,this,registered,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1403790940;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<ObjectName>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,object,name,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1467726769;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<ObjectName>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,object,name,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1467730834;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1497341594;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1498780456;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1500448076;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1519295386;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.info("Unregistering JMX-exposed beans")__		}_		for (ObjectName objectName : snapshot) {_			doUnregister(objectName)__		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,this,registered,beans,if,snapshot,is,empty,logger,info,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> protected void unregisterBeans();1532091916;Unregisters all beans that have been registered by an instance of this class.;protected void unregisterBeans() {_		Set<ObjectName> snapshot__		synchronized (this.registeredBeans) {_			snapshot = new LinkedHashSet<>(this.registeredBeans)__		}_		if (!snapshot.isEmpty()) {_			logger.debug("Unregistering JMX-exposed beans")__			for (ObjectName objectName : snapshot) {_				doUnregister(objectName)__			}_		}_	};unregisters,all,beans,that,have,been,registered,by,an,instance,of,this,class;protected,void,unregister,beans,set,object,name,snapshot,synchronized,this,registered,beans,snapshot,new,linked,hash,set,this,registered,beans,if,snapshot,is,empty,logger,debug,unregistering,jmx,exposed,beans,for,object,name,object,name,snapshot,do,unregister,object,name
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehavior(int registrationBehavior);1351167990;Specify what action should be taken when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._<p>Default is REGISTRATION_FAIL_ON_EXISTING._@see #setRegistrationBehaviorName(String)_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehavior(int registrationBehavior) {_		setRegistrationPolicy(RegistrationPolicy.valueOf(registrationBehavior))__	};specify,what,action,should,be,taken,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,p,default,is,see,set,registration,behavior,name,string,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,int,registration,behavior,set,registration,policy,registration,policy,value,of,registration,behavior
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehavior(int registrationBehavior);1356735495;Specify what action should be taken when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._<p>Default is REGISTRATION_FAIL_ON_EXISTING._@see #setRegistrationBehaviorName(String)_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehavior(int registrationBehavior) {_		setRegistrationPolicy(RegistrationPolicy.valueOf(registrationBehavior))__	};specify,what,action,should,be,taken,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,p,default,is,see,set,registration,behavior,name,string,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,int,registration,behavior,set,registration,policy,registration,policy,value,of,registration,behavior
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehavior(int registrationBehavior);1362408075;Specify what action should be taken when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._<p>Default is REGISTRATION_FAIL_ON_EXISTING._@see #setRegistrationBehaviorName(String)_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehavior(int registrationBehavior) {_		setRegistrationPolicy(RegistrationPolicy.valueOf(registrationBehavior))__	};specify,what,action,should,be,taken,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,p,default,is,see,set,registration,behavior,name,string,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,int,registration,behavior,set,registration,policy,registration,policy,value,of,registration,behavior
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehavior(int registrationBehavior);1386775886;Specify what action should be taken when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._<p>Default is REGISTRATION_FAIL_ON_EXISTING._@see #setRegistrationBehaviorName(String)_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehavior(int registrationBehavior) {_		setRegistrationPolicy(RegistrationPolicy.valueOf(registrationBehavior))__	};specify,what,action,should,be,taken,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,p,default,is,see,set,registration,behavior,name,string,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,int,registration,behavior,set,registration,policy,registration,policy,value,of,registration,behavior
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehavior(int registrationBehavior);1403790940;Specify what action should be taken when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._<p>Default is REGISTRATION_FAIL_ON_EXISTING._@see #setRegistrationBehaviorName(String)_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehavior(int registrationBehavior) {_		setRegistrationPolicy(RegistrationPolicy.valueOf(registrationBehavior))__	};specify,what,action,should,be,taken,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,p,default,is,see,set,registration,behavior,name,string,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,int,registration,behavior,set,registration,policy,registration,policy,value,of,registration,behavior
MBeanRegistrationSupport -> public void setServer(@Nullable MBeanServer server);1500448076;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(@Nullable MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,nullable,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(@Nullable MBeanServer server);1519295386;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(@Nullable MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,nullable,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(@Nullable MBeanServer server);1532091916;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(@Nullable MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,nullable,mbean,server,server,this,server,server
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1328020251;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1351167990;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1356735495;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1362408075;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1386775886;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1403790940;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1467726769;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1467730834;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1497341594;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1498780456;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1500448076;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[this.registeredBeans.size()])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,this,registered,beans,size
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1519295386;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[0])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,0
MBeanRegistrationSupport -> protected final ObjectName[] getRegisteredObjectNames();1532091916;Return the {@link ObjectName ObjectNames} of all registered beans.;protected final ObjectName[] getRegisteredObjectNames() {_		synchronized (this.registeredBeans) {_			return this.registeredBeans.toArray(new ObjectName[0])__		}_	};return,the,link,object,name,object,names,of,all,registered,beans;protected,final,object,name,get,registered,object,names,synchronized,this,registered,beans,return,this,registered,beans,to,array,new,object,name,0
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1328020251;Specify the <code>MBeanServer</code> instance with which all beans should_be registered. The <code>MBeanExporter</code> will attempt to locate an_existing <code>MBeanServer</code> if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,code,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,code,will,attempt,to,locate,an,existing,code,mbean,server,code,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1351167990;Specify the <code>MBeanServer</code> instance with which all beans should_be registered. The <code>MBeanExporter</code> will attempt to locate an_existing <code>MBeanServer</code> if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,code,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,code,will,attempt,to,locate,an,existing,code,mbean,server,code,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1356735495;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1362408075;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1386775886;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1403790940;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1467726769;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1467730834;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1497341594;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> public void setServer(MBeanServer server);1498780456;Specify the {@code MBeanServer} instance with which all beans should_be registered. The {@code MBeanExporter} will attempt to locate an_existing {@code MBeanServer} if none is supplied.;public void setServer(MBeanServer server) {_		this.server = server__	};specify,the,code,mbean,server,instance,with,which,all,beans,should,be,registered,the,code,mbean,exporter,will,attempt,to,locate,an,existing,code,mbean,server,if,none,is,supplied;public,void,set,server,mbean,server,server,this,server,server
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1328020251;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using the {@link #setRegistrationBehavior(int)}_and {@link #setRegistrationBehaviorName(String)} methods._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectInstance registeredBean = null__		try {_			registeredBean = this.server.registerMBean(mbean, objectName)__		}_		catch (InstanceAlreadyExistsException ex) {_			if (this.registrationBehavior == REGISTRATION_IGNORE_EXISTING) {_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring existing MBean at [" + objectName + "]")__				}_			}_			else if (this.registrationBehavior == REGISTRATION_REPLACE_EXISTING) {_				try {_					if (logger.isDebugEnabled()) {_						logger.debug("Replacing existing MBean at [" + objectName + "]")__					}_					this.server.unregisterMBean(objectName)__					registeredBean = this.server.registerMBean(mbean, objectName)__				}_				catch (InstanceNotFoundException ex2) {_					logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__					throw ex__				}_			}_			else {_				throw ex__			}_		}__		_		ObjectName actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__		if (actualObjectName == null) {_			actualObjectName = objectName__		}_		this.registeredBeans.add(actualObjectName)__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,the,link,set,registration,behavior,int,and,link,set,registration,behavior,name,string,methods,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,behavior,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,behavior,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,object,name,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1351167990;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using the {@link #setRegistrationBehavior(int)}_and {@link #setRegistrationBehaviorName(String)} methods._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectInstance registeredBean = null__		try {_			registeredBean = this.server.registerMBean(mbean, objectName)__		}_		catch (InstanceAlreadyExistsException ex) {_			if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring existing MBean at [" + objectName + "]")__				}_			}_			else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_				try {_					if (logger.isDebugEnabled()) {_						logger.debug("Replacing existing MBean at [" + objectName + "]")__					}_					this.server.unregisterMBean(objectName)__					registeredBean = this.server.registerMBean(mbean, objectName)__				}_				catch (InstanceNotFoundException ex2) {_					logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__					throw ex__				}_			}_			else {_				throw ex__			}_		}__		_		ObjectName actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__		if (actualObjectName == null) {_			actualObjectName = objectName__		}_		this.registeredBeans.add(actualObjectName)__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,the,link,set,registration,behavior,int,and,link,set,registration,behavior,name,string,methods,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,object,name,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1356735495;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using the {@link #setRegistrationBehavior(int)}_and {@link #setRegistrationBehaviorName(String)} methods._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectInstance registeredBean = null__		try {_			registeredBean = this.server.registerMBean(mbean, objectName)__		}_		catch (InstanceAlreadyExistsException ex) {_			if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring existing MBean at [" + objectName + "]")__				}_			}_			else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_				try {_					if (logger.isDebugEnabled()) {_						logger.debug("Replacing existing MBean at [" + objectName + "]")__					}_					this.server.unregisterMBean(objectName)__					registeredBean = this.server.registerMBean(mbean, objectName)__				}_				catch (InstanceNotFoundException ex2) {_					logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__					throw ex__				}_			}_			else {_				throw ex__			}_		}__		_		ObjectName actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__		if (actualObjectName == null) {_			actualObjectName = objectName__		}_		this.registeredBeans.add(actualObjectName)__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,the,link,set,registration,behavior,int,and,link,set,registration,behavior,name,string,methods,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,object,name,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1362408075;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using the {@link #setRegistrationBehavior(int)}_and {@link #setRegistrationBehaviorName(String)} methods._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectInstance registeredBean = null__		try {_			registeredBean = this.server.registerMBean(mbean, objectName)__		}_		catch (InstanceAlreadyExistsException ex) {_			if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_				if (logger.isDebugEnabled()) {_					logger.debug("Ignoring existing MBean at [" + objectName + "]")__				}_			}_			else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_				try {_					if (logger.isDebugEnabled()) {_						logger.debug("Replacing existing MBean at [" + objectName + "]")__					}_					this.server.unregisterMBean(objectName)__					registeredBean = this.server.registerMBean(mbean, objectName)__				}_				catch (InstanceNotFoundException ex2) {_					logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__					throw ex__				}_			}_			else {_				throw ex__			}_		}__		_		ObjectName actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__		if (actualObjectName == null) {_			actualObjectName = objectName__		}_		this.registeredBeans.add(actualObjectName)__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,the,link,set,registration,behavior,int,and,link,set,registration,behavior,name,string,methods,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,object,name,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1386775886;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using the {@link #setRegistrationBehavior(int)}_and {@link #setRegistrationBehaviorName(String)} methods._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,the,link,set,registration,behavior,int,and,link,set,registration,behavior,name,string,methods,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1403790940;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using the {@link #setRegistrationBehavior(int)}_and {@link #setRegistrationBehaviorName(String)} methods._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,the,link,set,registration,behavior,int,and,link,set,registration,behavior,name,string,methods,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1467726769;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1467730834;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1497341594;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1498780456;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		Assert.state(this.server != null, "No MBeanServer set")__		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,assert,state,this,server,null,no,mbean,server,set,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1500448076;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		Assert.state(this.server != null, "No MBeanServer set")__		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,assert,state,this,server,null,no,mbean,server,set,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1519295386;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		Assert.state(this.server != null, "No MBeanServer set")__		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2)__						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,assert,state,this,server,null,no,mbean,server,set,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,logger,error,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void doRegister(Object mbean, ObjectName objectName) throws JMException;1532091916;Actually register the MBean with the server. The behavior when encountering_an existing MBean can be configured using {@link #setRegistrationPolicy}._@param mbean the MBean instance_@param objectName the suggested ObjectName for the MBean_@throws JMException if the registration failed;protected void doRegister(Object mbean, ObjectName objectName) throws JMException {_		Assert.state(this.server != null, "No MBeanServer set")__		ObjectName actualObjectName___		synchronized (this.registeredBeans) {_			ObjectInstance registeredBean = null__			try {_				registeredBean = this.server.registerMBean(mbean, objectName)__			}_			catch (InstanceAlreadyExistsException ex) {_				if (this.registrationPolicy == RegistrationPolicy.IGNORE_EXISTING) {_					if (logger.isDebugEnabled()) {_						logger.debug("Ignoring existing MBean at [" + objectName + "]")__					}_				}_				else if (this.registrationPolicy == RegistrationPolicy.REPLACE_EXISTING) {_					try {_						if (logger.isDebugEnabled()) {_							logger.debug("Replacing existing MBean at [" + objectName + "]")__						}_						this.server.unregisterMBean(objectName)__						registeredBean = this.server.registerMBean(mbean, objectName)__					}_					catch (InstanceNotFoundException ex2) {_						if (logger.isInfoEnabled()) {_							logger.info("Unable to replace existing MBean at [" + objectName + "]", ex2)__						}_						throw ex__					}_				}_				else {_					throw ex__				}_			}__			_			actualObjectName = (registeredBean != null ? registeredBean.getObjectName() : null)__			if (actualObjectName == null) {_				actualObjectName = objectName__			}_			this.registeredBeans.add(actualObjectName)__		}__		onRegister(actualObjectName, mbean)__	};actually,register,the,mbean,with,the,server,the,behavior,when,encountering,an,existing,mbean,can,be,configured,using,link,set,registration,policy,param,mbean,the,mbean,instance,param,object,name,the,suggested,object,name,for,the,mbean,throws,jmexception,if,the,registration,failed;protected,void,do,register,object,mbean,object,name,object,name,throws,jmexception,assert,state,this,server,null,no,mbean,server,set,object,name,actual,object,name,synchronized,this,registered,beans,object,instance,registered,bean,null,try,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,already,exists,exception,ex,if,this,registration,policy,registration,policy,if,logger,is,debug,enabled,logger,debug,ignoring,existing,mbean,at,object,name,else,if,this,registration,policy,registration,policy,try,if,logger,is,debug,enabled,logger,debug,replacing,existing,mbean,at,object,name,this,server,unregister,mbean,object,name,registered,bean,this,server,register,mbean,mbean,object,name,catch,instance,not,found,exception,ex2,if,logger,is,info,enabled,logger,info,unable,to,replace,existing,mbean,at,object,name,ex2,throw,ex,else,throw,ex,actual,object,name,registered,bean,null,registered,bean,get,object,name,null,if,actual,object,name,null,actual,object,name,object,name,this,registered,beans,add,actual,object,name,on,register,actual,object,name,mbean
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1328020251;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1351167990;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1356735495;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1362408075;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1386775886;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1403790940;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1467726769;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1467730834;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1497341594;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1498780456;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1500448076;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1519295386;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName, Object mbean);1532091916;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation delegates to {@link #onRegister(ObjectName)}._@param objectName the actual {@link ObjectName} that the MBean was registered with_@param mbean the registered MBean instance;protected void onRegister(ObjectName objectName, Object mbean) {_		onRegister(objectName)__	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,delegates,to,link,on,register,object,name,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with,param,mbean,the,registered,mbean,instance;protected,void,on,register,object,name,object,name,object,mbean,on,register,object,name
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehaviorName(String registrationBehavior);1351167990;Set the registration behavior by the name of the corresponding constant,_e.g. "REGISTRATION_IGNORE_EXISTING"._@see #setRegistrationBehavior_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehaviorName(String registrationBehavior) {_		setRegistrationBehavior(constants.asNumber(registrationBehavior).intValue())__	};set,the,registration,behavior,by,the,name,of,the,corresponding,constant,e,g,see,set,registration,behavior,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,name,string,registration,behavior,set,registration,behavior,constants,as,number,registration,behavior,int,value
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehaviorName(String registrationBehavior);1356735495;Set the registration behavior by the name of the corresponding constant,_e.g. "REGISTRATION_IGNORE_EXISTING"._@see #setRegistrationBehavior_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehaviorName(String registrationBehavior) {_		setRegistrationBehavior(constants.asNumber(registrationBehavior).intValue())__	};set,the,registration,behavior,by,the,name,of,the,corresponding,constant,e,g,see,set,registration,behavior,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,name,string,registration,behavior,set,registration,behavior,constants,as,number,registration,behavior,int,value
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehaviorName(String registrationBehavior);1362408075;Set the registration behavior by the name of the corresponding constant,_e.g. "REGISTRATION_IGNORE_EXISTING"._@see #setRegistrationBehavior_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehaviorName(String registrationBehavior) {_		setRegistrationBehavior(constants.asNumber(registrationBehavior).intValue())__	};set,the,registration,behavior,by,the,name,of,the,corresponding,constant,e,g,see,set,registration,behavior,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,name,string,registration,behavior,set,registration,behavior,constants,as,number,registration,behavior,int,value
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehaviorName(String registrationBehavior);1386775886;Set the registration behavior by the name of the corresponding constant,_e.g. "REGISTRATION_IGNORE_EXISTING"._@see #setRegistrationBehavior_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehaviorName(String registrationBehavior) {_		setRegistrationBehavior(constants.asNumber(registrationBehavior).intValue())__	};set,the,registration,behavior,by,the,name,of,the,corresponding,constant,e,g,see,set,registration,behavior,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,name,string,registration,behavior,set,registration,behavior,constants,as,number,registration,behavior,int,value
MBeanRegistrationSupport -> @Deprecated 	public void setRegistrationBehaviorName(String registrationBehavior);1403790940;Set the registration behavior by the name of the corresponding constant,_e.g. "REGISTRATION_IGNORE_EXISTING"._@see #setRegistrationBehavior_@see #REGISTRATION_FAIL_ON_EXISTING_@see #REGISTRATION_IGNORE_EXISTING_@see #REGISTRATION_REPLACE_EXISTING_@deprecated since Spring 3.2, in favor of {@link #setRegistrationPolicy(RegistrationPolicy)};@Deprecated_	public void setRegistrationBehaviorName(String registrationBehavior) {_		setRegistrationBehavior(constants.asNumber(registrationBehavior).intValue())__	};set,the,registration,behavior,by,the,name,of,the,corresponding,constant,e,g,see,set,registration,behavior,see,see,see,deprecated,since,spring,3,2,in,favor,of,link,set,registration,policy,registration,policy;deprecated,public,void,set,registration,behavior,name,string,registration,behavior,set,registration,behavior,constants,as,number,registration,behavior,int,value
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1328020251;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1351167990;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1356735495;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1362408075;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1386775886;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1403790940;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1467726769;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1467730834;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1497341594;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1498780456;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1500448076;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1519295386;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> protected void onUnregister(ObjectName objectName);1532091916;Called when an MBean is unregistered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is unregistered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the {@link ObjectName} that the MBean was registered with;protected void onUnregister(ObjectName objectName) {_	};called,when,an,mbean,is,unregistered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,unregistered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,link,object,name,that,the,mbean,was,registered,with;protected,void,on,unregister,object,name,object,name
MBeanRegistrationSupport -> public final MBeanServer getServer();1328020251;Return the <code>MBeanServer</code> that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,code,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1351167990;Return the <code>MBeanServer</code> that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,code,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1356735495;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1362408075;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1386775886;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1403790940;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1467726769;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1467730834;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> public final MBeanServer getServer();1497341594;Return the {@code MBeanServer} that the beans will be registered with.;public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1328020251;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		try {_			_			if (this.server.isRegistered(objectName)) {_				this.server.unregisterMBean(objectName)__				onUnregister(objectName)__			}_			else {_				if (logger.isWarnEnabled()) {_					logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_							"is not registered (perhaps already unregistered by an external process)")__				}_			}_		}_		catch (JMException ex) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not unregister MBean [" + objectName + "]", ex)__			}_		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,on,unregister,object,name,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1351167990;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		try {_			_			if (this.server.isRegistered(objectName)) {_				this.server.unregisterMBean(objectName)__				onUnregister(objectName)__			}_			else {_				if (logger.isWarnEnabled()) {_					logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_							"is not registered (perhaps already unregistered by an external process)")__				}_			}_		}_		catch (JMException ex) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not unregister MBean [" + objectName + "]", ex)__			}_		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,on,unregister,object,name,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1356735495;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		try {_			_			if (this.server.isRegistered(objectName)) {_				this.server.unregisterMBean(objectName)__				onUnregister(objectName)__			}_			else {_				if (logger.isWarnEnabled()) {_					logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_							"is not registered (perhaps already unregistered by an external process)")__				}_			}_		}_		catch (JMException ex) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not unregister MBean [" + objectName + "]", ex)__			}_		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,on,unregister,object,name,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1362408075;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		try {_			_			if (this.server.isRegistered(objectName)) {_				this.server.unregisterMBean(objectName)__				onUnregister(objectName)__			}_			else {_				if (logger.isWarnEnabled()) {_					logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_							"is not registered (perhaps already unregistered by an external process)")__				}_			}_		}_		catch (JMException ex) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not unregister MBean [" + objectName + "]", ex)__			}_		}_		this.registeredBeans.remove(objectName)__	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,on,unregister,object,name,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,this,registered,beans,remove,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1386775886;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1403790940;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1467726769;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1467730834;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1497341594;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1498780456;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		Assert.state(this.server != null, "No MBeanServer set")__		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,assert,state,this,server,null,no,mbean,server,set,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1500448076;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		Assert.state(this.server != null, "No MBeanServer set")__		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,assert,state,this,server,null,no,mbean,server,set,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1519295386;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		Assert.state(this.server != null, "No MBeanServer set")__		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isWarnEnabled()) {_							logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isErrorEnabled()) {_						logger.error("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,assert,state,this,server,null,no,mbean,server,set,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,warn,enabled,logger,warn,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,error,enabled,logger,error,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> protected void doUnregister(ObjectName objectName);1532091916;Actually unregister the specified MBean from the server._@param objectName the suggested ObjectName for the MBean;protected void doUnregister(ObjectName objectName) {_		Assert.state(this.server != null, "No MBeanServer set")__		boolean actuallyUnregistered = false___		synchronized (this.registeredBeans) {_			if (this.registeredBeans.remove(objectName)) {_				try {_					_					if (this.server.isRegistered(objectName)) {_						this.server.unregisterMBean(objectName)__						actuallyUnregistered = true__					}_					else {_						if (logger.isInfoEnabled()) {_							logger.info("Could not unregister MBean [" + objectName + "] as said MBean " +_									"is not registered (perhaps already unregistered by an external process)")__						}_					}_				}_				catch (JMException ex) {_					if (logger.isInfoEnabled()) {_						logger.info("Could not unregister MBean [" + objectName + "]", ex)__					}_				}_			}_		}__		if (actuallyUnregistered) {_			onUnregister(objectName)__		}_	};actually,unregister,the,specified,mbean,from,the,server,param,object,name,the,suggested,object,name,for,the,mbean;protected,void,do,unregister,object,name,object,name,assert,state,this,server,null,no,mbean,server,set,boolean,actually,unregistered,false,synchronized,this,registered,beans,if,this,registered,beans,remove,object,name,try,if,this,server,is,registered,object,name,this,server,unregister,mbean,object,name,actually,unregistered,true,else,if,logger,is,info,enabled,logger,info,could,not,unregister,mbean,object,name,as,said,mbean,is,not,registered,perhaps,already,unregistered,by,an,external,process,catch,jmexception,ex,if,logger,is,info,enabled,logger,info,could,not,unregister,mbean,object,name,ex,if,actually,unregistered,on,unregister,object,name
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1351167990;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1356735495;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1362408075;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1386775886;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1403790940;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1467726769;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1467730834;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1497341594;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1498780456;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1500448076;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1519295386;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> public void setRegistrationPolicy(RegistrationPolicy registrationPolicy);1532091916;The policy to use when attempting to register an MBean_under an {@link javax.management.ObjectName} that already exists._@param registrationPolicy the policy to use_@since 3.2;public void setRegistrationPolicy(RegistrationPolicy registrationPolicy) {_		Assert.notNull(registrationPolicy, "RegistrationPolicy must not be null")__		this.registrationPolicy = registrationPolicy__	};the,policy,to,use,when,attempting,to,register,an,mbean,under,an,link,javax,management,object,name,that,already,exists,param,registration,policy,the,policy,to,use,since,3,2;public,void,set,registration,policy,registration,policy,registration,policy,assert,not,null,registration,policy,registration,policy,must,not,be,null,this,registration,policy,registration,policy
MBeanRegistrationSupport -> @Nullable 	public final MBeanServer getServer();1498780456;Return the {@code MBeanServer} that the beans will be registered with.;@Nullable_	public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;nullable,public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> @Nullable 	public final MBeanServer getServer();1500448076;Return the {@code MBeanServer} that the beans will be registered with.;@Nullable_	public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;nullable,public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> @Nullable 	public final MBeanServer getServer();1519295386;Return the {@code MBeanServer} that the beans will be registered with.;@Nullable_	public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;nullable,public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> @Nullable 	public final MBeanServer getServer();1532091916;Return the {@code MBeanServer} that the beans will be registered with.;@Nullable_	public final MBeanServer getServer() {_		return this.server__	};return,the,code,mbean,server,that,the,beans,will,be,registered,with;nullable,public,final,mbean,server,get,server,return,this,server
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1328020251;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1351167990;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1356735495;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1362408075;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1386775886;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1403790940;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1467726769;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1467730834;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1497341594;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1498780456;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1500448076;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1519295386;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
MBeanRegistrationSupport -> protected void onRegister(ObjectName objectName);1532091916;Called when an MBean is registered under the given {@link ObjectName}. Allows_subclasses to perform additional processing when an MBean is registered._<p>The default implementation is empty. Can be overridden in subclasses._@param objectName the actual {@link ObjectName} that the MBean was registered with;protected void onRegister(ObjectName objectName) {_	};called,when,an,mbean,is,registered,under,the,given,link,object,name,allows,subclasses,to,perform,additional,processing,when,an,mbean,is,registered,p,the,default,implementation,is,empty,can,be,overridden,in,subclasses,param,object,name,the,actual,link,object,name,that,the,mbean,was,registered,with;protected,void,on,register,object,name,object,name
