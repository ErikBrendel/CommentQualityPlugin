commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;7;;@Override protected String getBeanClassName(Element element) {     if (element.hasAttribute(WEAVER_CLASS_ATTRIBUTE)) {         return element.getAttribute(WEAVER_CLASS_ATTRIBUTE).     }     return DEFAULT_LOAD_TIME_WEAVER_CLASS_NAME. }
false;protected;3;4;;@Override protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {     return ConfigurableApplicationContext.LOAD_TIME_WEAVER_BEAN_NAME. }
false;protected;3;16;;@Override protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {     builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     if (isAspectJWeavingEnabled(element.getAttribute(ASPECTJ_WEAVING_ATTRIBUTE), parserContext)) {         if (!parserContext.getRegistry().containsBeanDefinition(ASPECTJ_WEAVING_ENABLER_BEAN_NAME)) {             RootBeanDefinition def = new RootBeanDefinition(ASPECTJ_WEAVING_ENABLER_CLASS_NAME).             parserContext.registerBeanComponent(new BeanComponentDefinition(def, ASPECTJ_WEAVING_ENABLER_BEAN_NAME)).         }         if (isBeanConfigurerAspectEnabled(parserContext.getReaderContext().getBeanClassLoader())) {             new SpringConfiguredBeanDefinitionParser().parse(element, parserContext).         }     } }
false;protected;2;13;;protected boolean isAspectJWeavingEnabled(String value, ParserContext parserContext) {     if ("on".equals(value)) {         return true.     } else if ("off".equals(value)) {         return false.     } else {         // Determine default...         ClassLoader cl = parserContext.getReaderContext().getBeanClassLoader().         return (cl != null && cl.getResource(AspectJWeavingEnabler.ASPECTJ_AOP_XML_RESOURCE) != null).     } }
false;protected;1;4;;protected boolean isBeanConfigurerAspectEnabled(@Nullable ClassLoader beanClassLoader) {     return ClassUtils.isPresent(SpringConfiguredBeanDefinitionParser.BEAN_CONFIGURER_ASPECT_CLASS_NAME, beanClassLoader). }
