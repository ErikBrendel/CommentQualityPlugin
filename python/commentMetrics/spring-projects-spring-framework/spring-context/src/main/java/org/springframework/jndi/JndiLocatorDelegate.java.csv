commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Object lookup(String jndiName) throws NamingException {     return super.lookup(jndiName). }
false;public;2;4;;@Override public <T> T lookup(String jndiName, @Nullable Class<T> requiredType) throws NamingException {     return super.lookup(jndiName, requiredType). }
true;public,static;0;5;/**  * Configure a {@code JndiLocatorDelegate} with its "resourceRef" property set to  * {@code true}, meaning that all names will be prefixed with "java:comp/env/".  * @see #setResourceRef  */ ;/**  * Configure a {@code JndiLocatorDelegate} with its "resourceRef" property set to  * {@code true}, meaning that all names will be prefixed with "java:comp/env/".  * @see #setResourceRef  */ public static JndiLocatorDelegate createDefaultResourceRefLocator() {     JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate().     jndiLocator.setResourceRef(true).     return jndiLocator. }
true;public,static;0;12;/**  * Check whether a default JNDI environment, as in a Java EE environment,  * is available on this JVM.  * @return {@code true} if a default InitialContext can be used,  * {@code false} if not  */ ;/**  * Check whether a default JNDI environment, as in a Java EE environment,  * is available on this JVM.  * @return {@code true} if a default InitialContext can be used,  * {@code false} if not  */ public static boolean isDefaultJndiEnvironmentAvailable() {     if (shouldIgnoreDefaultJndiEnvironment) {         return false.     }     try {         new InitialContext().getEnvironment().         return true.     } catch (Throwable ex) {         return false.     } }
