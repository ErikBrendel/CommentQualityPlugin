commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the BeanDefinitionRegistry that this scanner operates on.  */ ;/**  * Return the BeanDefinitionRegistry that this scanner operates on.  */ public final BeanDefinitionRegistry getRegistry() {     return this.registry. }
true;public;1;3;/**  * Set the Environment to use when evaluating whether  * {@link Conditional @Conditional}-annotated component classes should be registered.  * <p>The default is a {@link StandardEnvironment}.  * @see #registerBean(Class, String, Class...)  */ ;/**  * Set the Environment to use when evaluating whether  * {@link Conditional @Conditional}-annotated component classes should be registered.  * <p>The default is a {@link StandardEnvironment}.  * @see #registerBean(Class, String, Class...)  */ public void setEnvironment(Environment environment) {     this.conditionEvaluator = new ConditionEvaluator(this.registry, environment, null). }
true;public;1;3;/**  * Set the BeanNameGenerator to use for detected bean classes.  * <p>The default is a {@link AnnotationBeanNameGenerator}.  */ ;/**  * Set the BeanNameGenerator to use for detected bean classes.  * <p>The default is a {@link AnnotationBeanNameGenerator}.  */ public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {     this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new AnnotationBeanNameGenerator()). }
true;public;1;4;/**  * Set the ScopeMetadataResolver to use for detected bean classes.  * <p>The default is an {@link AnnotationScopeMetadataResolver}.  */ ;/**  * Set the ScopeMetadataResolver to use for detected bean classes.  * <p>The default is an {@link AnnotationScopeMetadataResolver}.  */ public void setScopeMetadataResolver(@Nullable ScopeMetadataResolver scopeMetadataResolver) {     this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver()). }
true;public;1;5;/**  * Register one or more annotated classes to be processed.  * <p>Calls to {@code register} are idempotent. adding the same  * annotated class more than once has no additional effect.  * @param annotatedClasses one or more annotated classes,  * e.g. {@link Configuration @Configuration} classes  */ ;/**  * Register one or more annotated classes to be processed.  * <p>Calls to {@code register} are idempotent. adding the same  * annotated class more than once has no additional effect.  * @param annotatedClasses one or more annotated classes,  * e.g. {@link Configuration @Configuration} classes  */ public void register(Class<?>... annotatedClasses) {     for (Class<?> annotatedClass : annotatedClasses) {         registerBean(annotatedClass).     } }
true;public;1;3;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  */ ;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  */ public void registerBean(Class<?> annotatedClass) {     doRegisterBean(annotatedClass, null, null, null). }
true;public;2;3;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations, using the given supplier for obtaining a new  * instance (possibly declared as a lambda expression or method reference).  * @param annotatedClass the class of the bean  * @param instanceSupplier a callback for creating an instance of the bean  * (may be {@code null})  * @since 5.0  */ ;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations, using the given supplier for obtaining a new  * instance (possibly declared as a lambda expression or method reference).  * @param annotatedClass the class of the bean  * @param instanceSupplier a callback for creating an instance of the bean  * (may be {@code null})  * @since 5.0  */ public <T> void registerBean(Class<T> annotatedClass, @Nullable Supplier<T> instanceSupplier) {     doRegisterBean(annotatedClass, instanceSupplier, null, null). }
true;public;3;3;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations, using the given supplier for obtaining a new  * instance (possibly declared as a lambda expression or method reference).  * @param annotatedClass the class of the bean  * @param name an explicit name for the bean  * @param instanceSupplier a callback for creating an instance of the bean  * (may be {@code null})  * @since 5.0  */ ;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations, using the given supplier for obtaining a new  * instance (possibly declared as a lambda expression or method reference).  * @param annotatedClass the class of the bean  * @param name an explicit name for the bean  * @param instanceSupplier a callback for creating an instance of the bean  * (may be {@code null})  * @since 5.0  */ public <T> void registerBean(Class<T> annotatedClass, String name, @Nullable Supplier<T> instanceSupplier) {     doRegisterBean(annotatedClass, instanceSupplier, name, null). }
true;public;2;4;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  * @param qualifiers specific qualifier annotations to consider,  * in addition to qualifiers at the bean class level  */ ;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  * @param qualifiers specific qualifier annotations to consider,  * in addition to qualifiers at the bean class level  */ @SuppressWarnings("unchecked") public void registerBean(Class<?> annotatedClass, Class<? extends Annotation>... qualifiers) {     doRegisterBean(annotatedClass, null, null, qualifiers). }
true;public;3;4;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  * @param name an explicit name for the bean  * @param qualifiers specific qualifier annotations to consider,  * in addition to qualifiers at the bean class level  */ ;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  * @param name an explicit name for the bean  * @param qualifiers specific qualifier annotations to consider,  * in addition to qualifiers at the bean class level  */ @SuppressWarnings("unchecked") public void registerBean(Class<?> annotatedClass, String name, Class<? extends Annotation>... qualifiers) {     doRegisterBean(annotatedClass, null, name, qualifiers). }
true;;5;35;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  * @param instanceSupplier a callback for creating an instance of the bean  * (may be {@code null})  * @param name an explicit name for the bean  * @param qualifiers specific qualifier annotations to consider, if any,  * in addition to qualifiers at the bean class level  * @param definitionCustomizers one or more callbacks for customizing the  * factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag  * @since 5.0  */ ;/**  * Register a bean from the given bean class, deriving its metadata from  * class-declared annotations.  * @param annotatedClass the class of the bean  * @param instanceSupplier a callback for creating an instance of the bean  * (may be {@code null})  * @param name an explicit name for the bean  * @param qualifiers specific qualifier annotations to consider, if any,  * in addition to qualifiers at the bean class level  * @param definitionCustomizers one or more callbacks for customizing the  * factory's {@link BeanDefinition}, e.g. setting a lazy-init or primary flag  * @since 5.0  */ <T> void doRegisterBean(Class<T> annotatedClass, @Nullable Supplier<T> instanceSupplier, @Nullable String name, @Nullable Class<? extends Annotation>[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers) {     AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass).     if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) {         return.     }     abd.setInstanceSupplier(instanceSupplier).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(abd).     abd.setScope(scopeMetadata.getScopeName()).     String beanName = (name != null ? name : this.beanNameGenerator.generateBeanName(abd, this.registry)).     AnnotationConfigUtils.processCommonDefinitionAnnotations(abd).     if (qualifiers != null) {         for (Class<? extends Annotation> qualifier : qualifiers) {             if (Primary.class == qualifier) {                 abd.setPrimary(true).             } else if (Lazy.class == qualifier) {                 abd.setLazyInit(true).             } else {                 abd.addQualifier(new AutowireCandidateQualifier(qualifier)).             }         }     }     for (BeanDefinitionCustomizer customizer : definitionCustomizers) {         customizer.customize(abd).     }     BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(abd, beanName).     definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry).     BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry). }
true;private,static;1;7;/**  * Get the Environment from the given registry if possible, otherwise return a new  * StandardEnvironment.  */ ;/**  * Get the Environment from the given registry if possible, otherwise return a new  * StandardEnvironment.  */ private static Environment getOrCreateEnvironment(BeanDefinitionRegistry registry) {     Assert.notNull(registry, "BeanDefinitionRegistry must not be null").     if (registry instanceof EnvironmentCapable) {         return ((EnvironmentCapable) registry).getEnvironment().     }     return new StandardEnvironment(). }
