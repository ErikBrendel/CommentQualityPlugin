# id;timestamp;commentText;codeText;commentWords;codeWords
PropertySourcesPlaceholderConfigurer -> public void setEnvironment(Environment environment);1328020251;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> public void setEnvironment(Environment environment);1335774711;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> public void setEnvironment(Environment environment);1357119239;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> public void setEnvironment(Environment environment);1368067257;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1368067257;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1368482696;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1375285844;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1443123402;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1455905979;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1496242568;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1496837955;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1497341594;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1498780456;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1502974979;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1516617801;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1530174524;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,get,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1532630930;Returns the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not yet been applied")__		return this.appliedPropertySources__	};returns,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,yet,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1532640050;Return the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not yet been applied")__		return this.appliedPropertySources__	};return,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,yet,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> public PropertySources getAppliedPropertySources() throws IllegalStateException;1536251809;Return the property sources that were actually applied during_{@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}._@return the property sources that were applied_@throws IllegalStateException if the property sources have not yet been applied_@since 4.0;public PropertySources getAppliedPropertySources() throws IllegalStateException {_		Assert.state(this.appliedPropertySources != null, "PropertySources have not yet been applied")__		return this.appliedPropertySources__	};return,the,property,sources,that,were,actually,applied,during,link,post,process,bean,factory,configurable,listable,bean,factory,post,processing,return,the,property,sources,that,were,applied,throws,illegal,state,exception,if,the,property,sources,have,not,yet,been,applied,since,4,0;public,property,sources,get,applied,property,sources,throws,illegal,state,exception,assert,state,this,applied,property,sources,null,property,sources,have,not,yet,been,applied,return,this,applied,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1356735495;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1368482696;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1375285844;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1443123402;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1455905979;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1496242568;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1496837955;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1497341594;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1498780456;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1502974979;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1516617801;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1530174524;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1532630930;{@inheritDoc}_<p>{@code PropertySources} from this environment will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};inherit,doc,p,code,property,sources,from,this,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1532640050;{@code PropertySources} from the given {@link Environment}_will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};code,property,sources,from,the,given,link,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void setEnvironment(Environment environment);1536251809;{@code PropertySources} from the given {@link Environment}_will be searched when replacing ${...} placeholders._@see #setPropertySources_@see #postProcessBeanFactory;@Override_	public void setEnvironment(Environment environment) {_		this.environment = environment__	};code,property,sources,from,the,given,link,environment,will,be,searched,when,replacing,placeholders,see,set,property,sources,see,post,process,bean,factory;override,public,void,set,environment,environment,environment,this,environment,environment
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1328020251;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain Environment#getPropertySources environment property sources}, if an_{@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		this.processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,this,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,this,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1335774711;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources environment property sources}, if an_{@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		this.processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,this,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,this,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1356735495;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources environment property sources}, if an_{@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		this.processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,this,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,this,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1357119239;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources environment property sources}, if an_{@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		this.processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,this,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,this,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1368067257;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources environment property sources}, if an_{@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		this.processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,this,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,this,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1368482696;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources environment property sources}, if an_{@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, this.mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		this.processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,this,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,this,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1375285844;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_					new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1443123402;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1455905979;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1496242568;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1496837955;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1497341594;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1498780456;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1502974979;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						@Nullable_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,nullable,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1516617801;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						@Nullable_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,nullable,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1530174524;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						@Nullable_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,nullable,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1532630930;{@inheritDoc}_<p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						@Nullable_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};inherit,doc,p,processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,nullable,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1532640050;Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						@Nullable_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,nullable,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException;1536251809;Processing occurs by replacing ${...} placeholders in bean definitions by resolving each_against this configurer's set of {@link PropertySources}, which includes:_<ul>_<li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources_environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}_<li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}_{@linkplain #setLocations have} {@linkplain #setProperties been}_{@linkplain #setPropertiesArray specified}_<li>any property sources set by calling {@link #setPropertySources}_</ul>_<p>If {@link #setPropertySources} is called, <strong>environment and local properties will be_ignored</strong>. This method is designed to give the user fine-grained control over property_sources, and once set, the configurer makes no assumptions about adding additional sources.;@Override_	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {_		if (this.propertySources == null) {_			this.propertySources = new MutablePropertySources()__			if (this.environment != null) {_				this.propertySources.addLast(_					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {_						@Override_						@Nullable_						public String getProperty(String key) {_							return this.source.getProperty(key)__						}_					}_				)__			}_			try {_				PropertySource<?> localPropertySource =_						new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties())__				if (this.localOverride) {_					this.propertySources.addFirst(localPropertySource)__				}_				else {_					this.propertySources.addLast(localPropertySource)__				}_			}_			catch (IOException ex) {_				throw new BeanInitializationException("Could not load properties", ex)__			}_		}__		processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources))__		this.appliedPropertySources = this.propertySources__	};processing,occurs,by,replacing,placeholders,in,bean,definitions,by,resolving,each,against,this,configurer,s,set,of,link,property,sources,which,includes,ul,li,all,linkplain,org,springframework,core,env,configurable,environment,get,property,sources,environment,property,sources,if,an,code,environment,linkplain,set,environment,is,present,li,linkplain,merge,properties,merged,local,properties,if,linkplain,set,location,any,linkplain,set,locations,have,linkplain,set,properties,been,linkplain,set,properties,array,specified,li,any,property,sources,set,by,calling,link,set,property,sources,ul,p,if,link,set,property,sources,is,called,strong,environment,and,local,properties,will,be,ignored,strong,this,method,is,designed,to,give,the,user,fine,grained,control,over,property,sources,and,once,set,the,configurer,makes,no,assumptions,about,adding,additional,sources;override,public,void,post,process,bean,factory,configurable,listable,bean,factory,bean,factory,throws,beans,exception,if,this,property,sources,null,this,property,sources,new,mutable,property,sources,if,this,environment,null,this,property,sources,add,last,new,property,source,environment,this,environment,override,nullable,public,string,get,property,string,key,return,this,source,get,property,key,try,property,source,local,property,source,new,properties,property,source,merge,properties,if,this,local,override,this,property,sources,add,first,local,property,source,else,this,property,sources,add,last,local,property,source,catch,ioexception,ex,throw,new,bean,initialization,exception,could,not,load,properties,ex,process,properties,bean,factory,new,property,sources,property,resolver,this,property,sources,this,applied,property,sources,this,property,sources
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1328020251;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1335774711;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1356735495;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			@Override_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,override,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1357119239;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1368067257;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1368482696;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			@Override_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,override,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1375285844;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			@Override_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,override,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1443123402;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			@Override_			public String resolveStringValue(String strVal) {_				String resolved = ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal)__				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,override,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1455905979;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			@Override_			public String resolveStringValue(String strVal) {_				String resolved = (ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal))__				if (trimValues) {_					resolved = resolved.trim()__				}_				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,override,public,string,resolve,string,value,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1496242568;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = new StringValueResolver() {_			@Override_			@Nullable_			public String resolveStringValue(@Nullable String strVal) {_				String resolved = (ignoreUnresolvablePlaceholders ?_						propertyResolver.resolvePlaceholders(strVal) :_						propertyResolver.resolveRequiredPlaceholders(strVal))__				if (trimValues) {_					resolved = resolved.trim()__				}_				return (resolved.equals(nullValue) ? null : resolved)__			}_		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,new,string,value,resolver,override,nullable,public,string,resolve,string,value,nullable,string,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1496837955;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1497341594;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1498780456;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1502974979;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1516617801;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,trim,values,resolved,resolved,trim,return,resolved,equals,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1530174524;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (this.ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (this.trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(this.nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,this,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,this,trim,values,resolved,resolved,trim,return,resolved,equals,this,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1532630930;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (this.ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (this.trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(this.nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,this,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,this,trim,values,resolved,resolved,trim,return,resolved,equals,this,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1532640050;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (this.ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (this.trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(this.nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,this,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,this,trim,values,resolved,resolved,trim,return,resolved,equals,this,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, 			final ConfigurablePropertyResolver propertyResolver) throws BeansException;1536251809;Visit each bean definition in the given bean factory and attempt to replace ${...} property_placeholders with values from the given properties.;protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,_			final ConfigurablePropertyResolver propertyResolver) throws BeansException {__		propertyResolver.setPlaceholderPrefix(this.placeholderPrefix)__		propertyResolver.setPlaceholderSuffix(this.placeholderSuffix)__		propertyResolver.setValueSeparator(this.valueSeparator)___		StringValueResolver valueResolver = strVal -> {_			String resolved = (this.ignoreUnresolvablePlaceholders ?_					propertyResolver.resolvePlaceholders(strVal) :_					propertyResolver.resolveRequiredPlaceholders(strVal))__			if (this.trimValues) {_				resolved = resolved.trim()__			}_			return (resolved.equals(this.nullValue) ? null : resolved)__		}___		doProcessProperties(beanFactoryToProcess, valueResolver)__	};visit,each,bean,definition,in,the,given,bean,factory,and,attempt,to,replace,property,placeholders,with,values,from,the,given,properties;protected,void,process,properties,configurable,listable,bean,factory,bean,factory,to,process,final,configurable,property,resolver,property,resolver,throws,beans,exception,property,resolver,set,placeholder,prefix,this,placeholder,prefix,property,resolver,set,placeholder,suffix,this,placeholder,suffix,property,resolver,set,value,separator,this,value,separator,string,value,resolver,value,resolver,str,val,string,resolved,this,ignore,unresolvable,placeholders,property,resolver,resolve,placeholders,str,val,property,resolver,resolve,required,placeholders,str,val,if,this,trim,values,resolved,resolved,trim,return,resolved,equals,this,null,value,null,resolved,do,process,properties,bean,factory,to,process,value,resolver
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1328020251;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1335774711;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1356735495;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1357119239;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1368067257;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1368482696;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1375285844;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1443123402;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1455905979;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1496242568;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1496837955;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1497341594;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1498780456;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1502974979;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1516617801;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1530174524;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1532630930;Customize the set of {@link PropertySources} to be used by this configurer._Setting this property indicates that environment property sources and local_properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1532640050;Customize the set of {@link PropertySources} to be used by this configurer._<p>Setting this property indicates that environment property sources and_local properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,p,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> public void setPropertySources(PropertySources propertySources);1536251809;Customize the set of {@link PropertySources} to be used by this configurer._<p>Setting this property indicates that environment property sources and_local properties should be ignored._@see #postProcessBeanFactory;public void setPropertySources(PropertySources propertySources) {_		this.propertySources = new MutablePropertySources(propertySources)__	};customize,the,set,of,link,property,sources,to,be,used,by,this,configurer,p,setting,this,property,indicates,that,environment,property,sources,and,local,properties,should,be,ignored,see,post,process,bean,factory;public,void,set,property,sources,property,sources,property,sources,this,property,sources,new,mutable,property,sources,property,sources
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1328020251;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1335774711;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1356735495;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1357119239;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1368067257;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1368482696;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1375285844;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1443123402;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1455905979;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1496242568;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1496837955;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1497341594;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1498780456;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1502974979;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1516617801;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException in this implementation;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception,in,this,implementation;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1530174524;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException in this implementation;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception,in,this,implementation;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1532630930;Implemented for compatibility with {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException in this implementation;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception,in,this,implementation;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1532640050;Implemented for compatibility with_{@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of_{@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException in this implementation;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception,in,this,implementation;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
PropertySourcesPlaceholderConfigurer -> @Override 	@Deprecated 	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props);1536251809;Implemented for compatibility with_{@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}._@deprecated in favor of_{@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}_@throws UnsupportedOperationException in this implementation;@Override_	@Deprecated_	protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) {_		throw new UnsupportedOperationException(_				"Call processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver) instead")__	};implemented,for,compatibility,with,link,org,springframework,beans,factory,config,placeholder,configurer,support,deprecated,in,favor,of,link,process,properties,configurable,listable,bean,factory,configurable,property,resolver,throws,unsupported,operation,exception,in,this,implementation;override,deprecated,protected,void,process,properties,configurable,listable,bean,factory,bean,factory,properties,props,throw,new,unsupported,operation,exception,call,process,properties,configurable,listable,bean,factory,configurable,property,resolver,instead
