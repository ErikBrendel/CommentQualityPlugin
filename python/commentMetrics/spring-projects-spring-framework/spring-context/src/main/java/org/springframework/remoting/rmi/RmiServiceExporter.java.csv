# id;timestamp;commentText;codeText;commentWords;codeWords
RmiServiceExporter -> public void setRegistry(Registry registry);1328020251;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1356735495;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1357119239;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1362408075;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1368482696;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1468613531;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1495868221;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1532091916;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setRegistry(Registry registry);1532274931;Specify the RMI registry to register the exported service with._Typically used in combination with RmiRegistryFactoryBean._<p>Alternatively, you can specify all registry properties locally._This exporter will then try to locate the specified registry,_automatically creating a new local one if appropriate._<p>Default is a local registry at the default port (1099),_created on the fly if necessary._@see RmiRegistryFactoryBean_@see #setRegistryHost_@see #setRegistryPort_@see #setRegistryClientSocketFactory_@see #setRegistryServerSocketFactory;public void setRegistry(Registry registry) {_		this.registry = registry__	};specify,the,rmi,registry,to,register,the,exported,service,with,typically,used,in,combination,with,rmi,registry,factory,bean,p,alternatively,you,can,specify,all,registry,properties,locally,this,exporter,will,then,try,to,locate,the,specified,registry,automatically,creating,a,new,local,one,if,appropriate,p,default,is,a,local,registry,at,the,default,port,1099,created,on,the,fly,if,necessary,see,rmi,registry,factory,bean,see,set,registry,host,see,set,registry,port,see,set,registry,client,socket,factory,see,set,registry,server,socket,factory;public,void,set,registry,registry,registry,this,registry,registry
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1328020251;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1356735495;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1357119239;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1362408075;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1368482696;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1468613531;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1495868221;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1532091916;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void setReplaceExistingBinding(boolean replaceExistingBinding);1532274931;Set whether to replace an existing binding in the RMI registry,_that is, whether to simply override an existing binding with the_specified service in case of a naming conflict in the registry._<p>Default is "true", assuming that an existing binding for this_exporter's service name is an accidental leftover from a previous_execution. Switch this to "false" to make the exporter fail in such_a scenario, indicating that there was already an RMI object bound.;public void setReplaceExistingBinding(boolean replaceExistingBinding) {_		this.replaceExistingBinding = replaceExistingBinding__	};set,whether,to,replace,an,existing,binding,in,the,rmi,registry,that,is,whether,to,simply,override,an,existing,binding,with,the,specified,service,in,case,of,a,naming,conflict,in,the,registry,p,default,is,true,assuming,that,an,existing,binding,for,this,exporter,s,service,name,is,an,accidental,leftover,from,a,previous,execution,switch,this,to,false,to,make,the,exporter,fail,in,such,a,scenario,indicating,that,there,was,already,an,rmi,object,bound;public,void,set,replace,existing,binding,boolean,replace,existing,binding,this,replace,existing,binding,replace,existing,binding
RmiServiceExporter -> public void destroy() throws RemoteException;1328020251;Unbind the RMI service from the registry on bean factory shutdown.;public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> public void destroy() throws RemoteException;1357119239;Unbind the RMI service from the registry on bean factory shutdown.;public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> public void destroy() throws RemoteException;1362408075;Unbind the RMI service from the registry on bean factory shutdown.;public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1328020251;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement <code>java.rmi.server.RMIServerSocketFactory</code> already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,code,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1356735495;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1357119239;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1362408075;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1368482696;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1468613531;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1495868221;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1532091916;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory);1532274931;Set a custom RMI server socket factory to use for the RMI registry._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setRegistryClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#createRegistry(int, RMIClientSocketFactory, RMIServerSocketFactory);public void setRegistryServerSocketFactory(RMIServerSocketFactory registryServerSocketFactory) {_		this.registryServerSocketFactory = registryServerSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,the,rmi,registry,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,registry,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,create,registry,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,registry,server,socket,factory,rmiserver,socket,factory,registry,server,socket,factory,this,registry,server,socket,factory,registry,server,socket,factory
RmiServiceExporter -> public void prepare() throws RemoteException;1328020251;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1356735495;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1357119239;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1362408075;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1368482696;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1468613531;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1495868221;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isInfoEnabled()) {_			logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,info,enabled,logger,info,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1532091916;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isDebugEnabled()) {_			logger.debug("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,debug,enabled,logger,debug,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void prepare() throws RemoteException;1532274931;Initialize this service exporter, registering the service as RMI object._<p>Creates an RMI registry on the specified port if none exists._@throws RemoteException if service registration failed;public void prepare() throws RemoteException {_		checkService()___		if (this.serviceName == null) {_			throw new IllegalArgumentException("Property 'serviceName' is required")__		}__		_		if (this.clientSocketFactory instanceof RMIServerSocketFactory) {_			this.serverSocketFactory = (RMIServerSocketFactory) this.clientSocketFactory__		}_		if ((this.clientSocketFactory != null && this.serverSocketFactory == null) ||_				(this.clientSocketFactory == null && this.serverSocketFactory != null)) {_			throw new IllegalArgumentException(_					"Both RMIClientSocketFactory and RMIServerSocketFactory or none required")__		}__		_		if (this.registryClientSocketFactory instanceof RMIServerSocketFactory) {_			this.registryServerSocketFactory = (RMIServerSocketFactory) this.registryClientSocketFactory__		}_		if (this.registryClientSocketFactory == null && this.registryServerSocketFactory != null) {_			throw new IllegalArgumentException(_					"RMIServerSocketFactory without RMIClientSocketFactory for registry not supported")__		}__		this.createdRegistry = false___		_		if (this.registry == null) {_			this.registry = getRegistry(this.registryHost, this.registryPort,_				this.registryClientSocketFactory, this.registryServerSocketFactory)__			this.createdRegistry = true__		}__		_		this.exportedObject = getObjectToExport()___		if (logger.isDebugEnabled()) {_			logger.debug("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry)__		}__		_		if (this.clientSocketFactory != null) {_			UnicastRemoteObject.exportObject(_					this.exportedObject, this.servicePort, this.clientSocketFactory, this.serverSocketFactory)__		}_		else {_			UnicastRemoteObject.exportObject(this.exportedObject, this.servicePort)__		}__		_		try {_			if (this.replaceExistingBinding) {_				this.registry.rebind(this.serviceName, this.exportedObject)__			}_			else {_				this.registry.bind(this.serviceName, this.exportedObject)__			}_		}_		catch (AlreadyBoundException ex) {_			_			unexportObjectSilently()__			throw new IllegalStateException(_					"Already an RMI object bound for name '"  + this.serviceName + "': " + ex.toString())__		}_		catch (RemoteException ex) {_			_			unexportObjectSilently()__			throw ex__		}_	};initialize,this,service,exporter,registering,the,service,as,rmi,object,p,creates,an,rmi,registry,on,the,specified,port,if,none,exists,throws,remote,exception,if,service,registration,failed;public,void,prepare,throws,remote,exception,check,service,if,this,service,name,null,throw,new,illegal,argument,exception,property,service,name,is,required,if,this,client,socket,factory,instanceof,rmiserver,socket,factory,this,server,socket,factory,rmiserver,socket,factory,this,client,socket,factory,if,this,client,socket,factory,null,this,server,socket,factory,null,this,client,socket,factory,null,this,server,socket,factory,null,throw,new,illegal,argument,exception,both,rmiclient,socket,factory,and,rmiserver,socket,factory,or,none,required,if,this,registry,client,socket,factory,instanceof,rmiserver,socket,factory,this,registry,server,socket,factory,rmiserver,socket,factory,this,registry,client,socket,factory,if,this,registry,client,socket,factory,null,this,registry,server,socket,factory,null,throw,new,illegal,argument,exception,rmiserver,socket,factory,without,rmiclient,socket,factory,for,registry,not,supported,this,created,registry,false,if,this,registry,null,this,registry,get,registry,this,registry,host,this,registry,port,this,registry,client,socket,factory,this,registry,server,socket,factory,this,created,registry,true,this,exported,object,get,object,to,export,if,logger,is,debug,enabled,logger,debug,binding,service,this,service,name,to,rmi,registry,this,registry,if,this,client,socket,factory,null,unicast,remote,object,export,object,this,exported,object,this,service,port,this,client,socket,factory,this,server,socket,factory,else,unicast,remote,object,export,object,this,exported,object,this,service,port,try,if,this,replace,existing,binding,this,registry,rebind,this,service,name,this,exported,object,else,this,registry,bind,this,service,name,this,exported,object,catch,already,bound,exception,ex,unexport,object,silently,throw,new,illegal,state,exception,already,an,rmi,object,bound,for,name,this,service,name,ex,to,string,catch,remote,exception,ex,unexport,object,silently,throw,ex
RmiServiceExporter -> public void setServiceName(String serviceName);1328020251;Set the name of the exported RMI service,_i.e. <code>rmi://host:port/NAME</code>;public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name,code;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1356735495;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1357119239;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1362408075;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1368482696;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1468613531;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1495868221;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1532091916;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setServiceName(String serviceName);1532274931;Set the name of the exported RMI service,_i.e. {@code rmi://host:port/NAME};public void setServiceName(String serviceName) {_		this.serviceName = serviceName__	};set,the,name,of,the,exported,rmi,service,i,e,code,rmi,host,port,name;public,void,set,service,name,string,service,name,this,service,name,service,name
RmiServiceExporter -> public void setRegistryPort(int registryPort);1328020251;Set the port of the registry for the exported RMI service,_i.e. <code>rmi://host:PORT/name</code>_<p>Default is <code>Registry.REGISTRY_PORT</code> (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,code,p,default,is,code,registry,code,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1356735495;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1357119239;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1362408075;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1368482696;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1468613531;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1495868221;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1532091916;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> public void setRegistryPort(int registryPort);1532274931;Set the port of the registry for the exported RMI service,_i.e. {@code rmi://host:PORT/name}_<p>Default is {@code Registry.REGISTRY_PORT} (1099)._@see java.rmi.registry.Registry#REGISTRY_PORT;public void setRegistryPort(int registryPort) {_		this.registryPort = registryPort__	};set,the,port,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,code,registry,1099,see,java,rmi,registry,registry;public,void,set,registry,port,int,registry,port,this,registry,port,registry,port
RmiServiceExporter -> @Override 	public void destroy() throws RemoteException;1356735495;Unbind the RMI service from the registry on bean factory shutdown.;@Override_	public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;override,public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> @Override 	public void destroy() throws RemoteException;1368482696;Unbind the RMI service from the registry on bean factory shutdown.;@Override_	public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;override,public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> @Override 	public void destroy() throws RemoteException;1468613531;Unbind the RMI service from the registry on bean factory shutdown.;@Override_	public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;override,public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> @Override 	public void destroy() throws RemoteException;1495868221;Unbind the RMI service from the registry on bean factory shutdown.;@Override_	public void destroy() throws RemoteException {_		if (logger.isInfoEnabled()) {_			logger.info("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI service '" + this.serviceName + "' is not bound to registry"_						+ (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;override,public,void,destroy,throws,remote,exception,if,logger,is,info,enabled,logger,info,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> @Override 	public void destroy() throws RemoteException;1532091916;Unbind the RMI service from the registry on bean factory shutdown.;@Override_	public void destroy() throws RemoteException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isInfoEnabled()) {_				logger.info("RMI service '" + this.serviceName + "' is not bound to registry" +_						(this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;override,public,void,destroy,throws,remote,exception,if,logger,is,debug,enabled,logger,debug,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,info,enabled,logger,info,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> @Override 	public void destroy() throws RemoteException;1532274931;Unbind the RMI service from the registry on bean factory shutdown.;@Override_	public void destroy() throws RemoteException {_		if (logger.isDebugEnabled()) {_			logger.debug("Unbinding RMI service '" + this.serviceName +_					"' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""))__		}_		try {_			this.registry.unbind(this.serviceName)__		}_		catch (NotBoundException ex) {_			if (logger.isInfoEnabled()) {_				logger.info("RMI service '" + this.serviceName + "' is not bound to registry" +_						(this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex)__			}_		}_		finally {_			unexportObjectSilently()__		}_	};unbind,the,rmi,service,from,the,registry,on,bean,factory,shutdown;override,public,void,destroy,throws,remote,exception,if,logger,is,debug,enabled,logger,debug,unbinding,rmi,service,this,service,name,from,registry,this,created,registry,at,port,this,registry,port,try,this,registry,unbind,this,service,name,catch,not,bound,exception,ex,if,logger,is,info,enabled,logger,info,rmi,service,this,service,name,is,not,bound,to,registry,this,created,registry,at,port,this,registry,port,anymore,ex,finally,unexport,object,silently
RmiServiceExporter -> public void setRegistryHost(String registryHost);1328020251;Set the host of the registry for the exported RMI service,_i.e. <code>rmi://HOST:port/name</code>_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,code,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1356735495;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1357119239;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1362408075;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1368482696;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1468613531;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1495868221;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1532091916;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> public void setRegistryHost(String registryHost);1532274931;Set the host of the registry for the exported RMI service,_i.e. {@code rmi://HOST:port/name}_<p>Default is localhost.;public void setRegistryHost(String registryHost) {_		this.registryHost = registryHost__	};set,the,host,of,the,registry,for,the,exported,rmi,service,i,e,code,rmi,host,port,name,p,default,is,localhost;public,void,set,registry,host,string,registry,host,this,registry,host,registry,host
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1328020251;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls <code>Registry.list()</code>._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,code,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1356735495;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1357119239;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1362408075;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1368482696;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1468613531;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1495868221;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1532091916;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> protected void testRegistry(Registry registry) throws RemoteException;1532274931;Test the given RMI registry, calling some operation on it to_check whether it is still active._<p>Default implementation calls {@code Registry.list()}._@param registry the RMI registry to test_@throws RemoteException if thrown by registry methods_@see java.rmi.registry.Registry#list();protected void testRegistry(Registry registry) throws RemoteException {_		registry.list()__	};test,the,given,rmi,registry,calling,some,operation,on,it,to,check,whether,it,is,still,active,p,default,implementation,calls,code,registry,list,param,registry,the,rmi,registry,to,test,throws,remote,exception,if,thrown,by,registry,methods,see,java,rmi,registry,registry,list;protected,void,test,registry,registry,registry,throws,remote,exception,registry,list
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1328020251;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements <code>java.rmi.server.RMIServerSocketFactory</code>,_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,code,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1356735495;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1357119239;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1362408075;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1368482696;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1468613531;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1495868221;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1532091916;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory);1532274931;Set a custom RMI client socket factory to use for the RMI registry._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setRegistryServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see LocateRegistry#getRegistry(String, int, RMIClientSocketFactory);public void setRegistryClientSocketFactory(RMIClientSocketFactory registryClientSocketFactory) {_		this.registryClientSocketFactory = registryClientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,the,rmi,registry,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,registry,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,locate,registry,get,registry,string,int,rmiclient,socket,factory;public,void,set,registry,client,socket,factory,rmiclient,socket,factory,registry,client,socket,factory,this,registry,client,socket,factory,registry,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1328020251;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements <code>java.rmi.server.RMIServerSocketFactory</code>,_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,code,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1356735495;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1357119239;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1362408075;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1368482696;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1468613531;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1495868221;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1532091916;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory);1532274931;Set a custom RMI client socket factory to use for exporting the service._<p>If the given object also implements {@code java.rmi.server.RMIServerSocketFactory},_it will automatically be registered as server socket factory too._@see #setServerSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setClientSocketFactory(RMIClientSocketFactory clientSocketFactory) {_		this.clientSocketFactory = clientSocketFactory__	};set,a,custom,rmi,client,socket,factory,to,use,for,exporting,the,service,p,if,the,given,object,also,implements,code,java,rmi,server,rmiserver,socket,factory,it,will,automatically,be,registered,as,server,socket,factory,too,see,set,server,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,client,socket,factory,rmiclient,socket,factory,client,socket,factory,this,client,socket,factory,client,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1328020251;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement <code>java.rmi.server.RMIServerSocketFactory</code> already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,code,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1356735495;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1357119239;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1362408075;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1368482696;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1468613531;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1495868221;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1532091916;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory);1532274931;Set a custom RMI server socket factory to use for exporting the service._<p>Only needs to be specified when the client socket factory does not_implement {@code java.rmi.server.RMIServerSocketFactory} already._@see #setClientSocketFactory_@see java.rmi.server.RMIClientSocketFactory_@see java.rmi.server.RMIServerSocketFactory_@see UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory);public void setServerSocketFactory(RMIServerSocketFactory serverSocketFactory) {_		this.serverSocketFactory = serverSocketFactory__	};set,a,custom,rmi,server,socket,factory,to,use,for,exporting,the,service,p,only,needs,to,be,specified,when,the,client,socket,factory,does,not,implement,code,java,rmi,server,rmiserver,socket,factory,already,see,set,client,socket,factory,see,java,rmi,server,rmiclient,socket,factory,see,java,rmi,server,rmiserver,socket,factory,see,unicast,remote,object,export,object,remote,int,rmiclient,socket,factory,rmiserver,socket,factory;public,void,set,server,socket,factory,rmiserver,socket,factory,server,socket,factory,this,server,socket,factory,server,socket,factory
RmiServiceExporter -> public void setServicePort(int servicePort);1328020251;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1356735495;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1357119239;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1362408075;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1368482696;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1468613531;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1495868221;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1532091916;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> public void setServicePort(int servicePort);1532274931;Set the port that the exported RMI service will use._<p>Default is 0 (anonymous port).;public void setServicePort(int servicePort) {_		this.servicePort = servicePort__	};set,the,port,that,the,exported,rmi,service,will,use,p,default,is,0,anonymous,port;public,void,set,service,port,int,service,port,this,service,port,service,port
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1495868221;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,nullable,rmiclient,socket,factory,client,socket,factory,nullable,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1532091916;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,nullable,rmiclient,socket,factory,client,socket,factory,nullable,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,debug,enabled,logger,debug,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1532274931;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,nullable,rmiclient,socket,factory,client,socket,factory,nullable,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,debug,enabled,logger,debug,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> private void unexportObjectSilently();1328020251;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1356735495;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1357119239;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1362408075;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1368482696;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1468613531;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1495868221;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,warn,enabled,logger,warn,rmi,object,for,service,this,service,name,isn,t,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1532091916;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isInfoEnabled()) {_				logger.info("RMI object for service '" + this.serviceName + "' is not exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,info,enabled,logger,info,rmi,object,for,service,this,service,name,is,not,exported,anymore,ex
RmiServiceExporter -> private void unexportObjectSilently();1532274931;Unexport the registered RMI object, logging any exception that arises.;private void unexportObjectSilently() {_		try {_			UnicastRemoteObject.unexportObject(this.exportedObject, true)__		}_		catch (NoSuchObjectException ex) {_			if (logger.isInfoEnabled()) {_				logger.info("RMI object for service '" + this.serviceName + "' is not exported anymore", ex)__			}_		}_	};unexport,the,registered,rmi,object,logging,any,exception,that,arises;private,void,unexport,object,silently,try,unicast,remote,object,unexport,object,this,exported,object,true,catch,no,such,object,exception,ex,if,logger,is,info,enabled,logger,info,rmi,object,for,service,this,service,name,is,not,exported,anymore,ex
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1328020251;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1356735495;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1357119239;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1362408075;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1368482696;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1468613531;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1495868221;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1532091916;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry);1532274931;Set whether to always create the registry in-process,_not attempting to locate an existing registry at the specified port._<p>Default is "false". Switch this flag to "true" in order to avoid_the overhead of locating an existing registry when you always_intend to create a new registry in any case.;public void setAlwaysCreateRegistry(boolean alwaysCreateRegistry) {_		this.alwaysCreateRegistry = alwaysCreateRegistry__	};set,whether,to,always,create,the,registry,in,process,not,attempting,to,locate,an,existing,registry,at,the,specified,port,p,default,is,false,switch,this,flag,to,true,in,order,to,avoid,the,overhead,of,locating,an,existing,registry,when,you,always,intend,to,create,a,new,registry,in,any,case;public,void,set,always,create,registry,boolean,always,create,registry,this,always,create,registry,always,create,registry
RmiServiceExporter -> protected Registry getRegistry(int registryPort, 			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1495868221;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort,_			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,nullable,rmiclient,socket,factory,client,socket,factory,nullable,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort, 			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1532091916;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort,_			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.debug("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.trace("RMI registry access threw exception", ex)__					logger.debug("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,nullable,rmiclient,socket,factory,client,socket,factory,nullable,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,debug,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,debug,enabled,logger,debug,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,trace,rmi,registry,access,threw,exception,ex,logger,debug,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort, 			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1532274931;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort,_			@Nullable RMIClientSocketFactory clientSocketFactory, @Nullable RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.debug("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.trace("RMI registry access threw exception", ex)__					logger.debug("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,nullable,rmiclient,socket,factory,client,socket,factory,nullable,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,debug,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,debug,enabled,logger,debug,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,trace,rmi,registry,access,threw,exception,ex,logger,debug,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1328020251;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1356735495;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1357119239;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1362408075;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1368482696;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry(String registryHost, int registryPort, 			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1468613531;Locate or create the RMI registry for this exporter._@param registryHost the registry host to use (if this is specified,_no implicit creation of a RMI registry will happen)_@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(String registryHost, int registryPort,_			RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (registryHost != null) {_			_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]")__			}_			Registry reg = LocateRegistry.getRegistry(registryHost, registryPort, clientSocketFactory)__			testRegistry(reg)__			return reg__		}__		else {_			return getRegistry(registryPort, clientSocketFactory, serverSocketFactory)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,host,the,registry,host,to,use,if,this,is,specified,no,implicit,creation,of,a,rmi,registry,will,happen,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,string,registry,host,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,registry,host,null,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,of,host,registry,host,registry,reg,locate,registry,get,registry,registry,host,registry,port,client,socket,factory,test,registry,reg,return,reg,else,return,get,registry,registry,port,client,socket,factory,server,socket,factory
RmiServiceExporter -> protected Registry getRegistry( 			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1328020251;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(_			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry( 			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1356735495;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(_			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry( 			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1357119239;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(_			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry( 			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1362408075;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(_			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry( 			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1368482696;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(_			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry( 			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory) 			throws RemoteException;1468613531;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@param clientSocketFactory the RMI client socket factory for the registry (if any)_@param serverSocketFactory the RMI server socket factory for the registry (if any)_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(_			int registryPort, RMIClientSocketFactory clientSocketFactory, RMIServerSocketFactory serverSocketFactory)_			throws RemoteException {__		if (clientSocketFactory != null) {_			if (this.alwaysCreateRegistry) {_				logger.info("Creating new RMI registry")__				return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__			}_			if (logger.isInfoEnabled()) {_				logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory")__			}_			synchronized (LocateRegistry.class) {_				try {_					_					Registry reg = LocateRegistry.getRegistry(null, registryPort, clientSocketFactory)__					testRegistry(reg)__					return reg__				}_				catch (RemoteException ex) {_					logger.debug("RMI registry access threw exception", ex)__					logger.info("Could not detect RMI registry - creating new one")__					_					return LocateRegistry.createRegistry(registryPort, clientSocketFactory, serverSocketFactory)__				}_			}_		}__		else {_			return getRegistry(registryPort)__		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,param,client,socket,factory,the,rmi,client,socket,factory,for,the,registry,if,any,param,server,socket,factory,the,rmi,server,socket,factory,for,the,registry,if,any,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,rmiclient,socket,factory,client,socket,factory,rmiserver,socket,factory,server,socket,factory,throws,remote,exception,if,client,socket,factory,null,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,using,custom,socket,factory,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,null,registry,port,client,socket,factory,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port,client,socket,factory,server,socket,factory,else,return,get,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1328020251;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1356735495;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1357119239;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1362408075;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1368482696;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1468613531;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1495868221;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.info("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isInfoEnabled()) {_			logger.info("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.debug("RMI registry access threw exception", ex)__				logger.info("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,info,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,info,enabled,logger,info,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,debug,rmi,registry,access,threw,exception,ex,logger,info,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1532091916;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.debug("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.trace("RMI registry access threw exception", ex)__				logger.debug("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,debug,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,debug,enabled,logger,debug,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,trace,rmi,registry,access,threw,exception,ex,logger,debug,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
RmiServiceExporter -> protected Registry getRegistry(int registryPort) throws RemoteException;1532274931;Locate or create the RMI registry for this exporter._@param registryPort the registry port to use_@return the RMI registry_@throws RemoteException if the registry couldn't be located or created;protected Registry getRegistry(int registryPort) throws RemoteException {_		if (this.alwaysCreateRegistry) {_			logger.debug("Creating new RMI registry")__			return LocateRegistry.createRegistry(registryPort)__		}_		if (logger.isDebugEnabled()) {_			logger.debug("Looking for RMI registry at port '" + registryPort + "'")__		}_		synchronized (LocateRegistry.class) {_			try {_				_				Registry reg = LocateRegistry.getRegistry(registryPort)__				testRegistry(reg)__				return reg__			}_			catch (RemoteException ex) {_				logger.trace("RMI registry access threw exception", ex)__				logger.debug("Could not detect RMI registry - creating new one")__				_				return LocateRegistry.createRegistry(registryPort)__			}_		}_	};locate,or,create,the,rmi,registry,for,this,exporter,param,registry,port,the,registry,port,to,use,return,the,rmi,registry,throws,remote,exception,if,the,registry,couldn,t,be,located,or,created;protected,registry,get,registry,int,registry,port,throws,remote,exception,if,this,always,create,registry,logger,debug,creating,new,rmi,registry,return,locate,registry,create,registry,registry,port,if,logger,is,debug,enabled,logger,debug,looking,for,rmi,registry,at,port,registry,port,synchronized,locate,registry,class,try,registry,reg,locate,registry,get,registry,registry,port,test,registry,reg,return,reg,catch,remote,exception,ex,logger,trace,rmi,registry,access,threw,exception,ex,logger,debug,could,not,detect,rmi,registry,creating,new,one,return,locate,registry,create,registry,registry,port
