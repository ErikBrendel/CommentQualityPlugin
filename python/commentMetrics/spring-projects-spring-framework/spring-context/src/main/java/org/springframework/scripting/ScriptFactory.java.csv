commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return a locator that points to the source of the script.  * Interpreted by the post-processor that actually creates the script.  * <p>Typical supported locators are Spring resource locations  * (such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")  * and inline scripts ("inline:myScriptText...").  * @return the script source locator  * @see org.springframework.scripting.support.ScriptFactoryPostProcessor#convertToScriptSource  * @see org.springframework.core.io.ResourceLoader  */ ;/**  * Return a locator that points to the source of the script.  * Interpreted by the post-processor that actually creates the script.  * <p>Typical supported locators are Spring resource locations  * (such as "file:C:/myScript.bsh" or "classpath:myPackage/myScript.bsh")  * and inline scripts ("inline:myScriptText...").  * @return the script source locator  * @see org.springframework.scripting.support.ScriptFactoryPostProcessor#convertToScriptSource  * @see org.springframework.core.io.ResourceLoader  */ String getScriptSourceLocator().
true;;0;2;/**  * Return the business interfaces that the script is supposed to implement.  * <p>Can return {@code null} if the script itself determines  * its Java interfaces (such as in the case of Groovy).  * @return the interfaces for the script  */ ;/**  * Return the business interfaces that the script is supposed to implement.  * <p>Can return {@code null} if the script itself determines  * its Java interfaces (such as in the case of Groovy).  * @return the interfaces for the script  */ @Nullable Class<?>[] getScriptInterfaces().
true;;0;1;/**  * Return whether the script requires a config interface to be  * generated for it. This is typically the case for scripts that  * do not determine Java signatures themselves, with no appropriate  * config interface specified in {@code getScriptInterfaces()}.  * @return whether the script requires a generated config interface  * @see #getScriptInterfaces()  */ ;/**  * Return whether the script requires a config interface to be  * generated for it. This is typically the case for scripts that  * do not determine Java signatures themselves, with no appropriate  * config interface specified in {@code getScriptInterfaces()}.  * @return whether the script requires a generated config interface  * @see #getScriptInterfaces()  */ boolean requiresConfigInterface().
true;;2;3;/**  * Factory method for creating the scripted Java object.  * <p>Implementations are encouraged to cache script metadata such as  * a generated script class. Note that this method may be invoked  * concurrently and must be implemented in a thread-safe fashion.  * @param scriptSource the actual ScriptSource to retrieve  * the script source text from (never {@code null})  * @param actualInterfaces the actual interfaces to expose,  * including script interfaces as well as a generated config interface  * (if applicable. may be {@code null})  * @return the scripted Java object  * @throws IOException if script retrieval failed  * @throws ScriptCompilationException if script compilation failed  */ ;/**  * Factory method for creating the scripted Java object.  * <p>Implementations are encouraged to cache script metadata such as  * a generated script class. Note that this method may be invoked  * concurrently and must be implemented in a thread-safe fashion.  * @param scriptSource the actual ScriptSource to retrieve  * the script source text from (never {@code null})  * @param actualInterfaces the actual interfaces to expose,  * including script interfaces as well as a generated config interface  * (if applicable. may be {@code null})  * @return the scripted Java object  * @throws IOException if script retrieval failed  * @throws ScriptCompilationException if script compilation failed  */ @Nullable Object getScriptedObject(ScriptSource scriptSource, @Nullable Class<?>... actualInterfaces) throws IOException, ScriptCompilationException.
true;;1;3;/**  * Determine the type of the scripted Java object.  * <p>Implementations are encouraged to cache script metadata such as  * a generated script class. Note that this method may be invoked  * concurrently and must be implemented in a thread-safe fashion.  * @param scriptSource the actual ScriptSource to retrieve  * the script source text from (never {@code null})  * @return the type of the scripted Java object, or {@code null}  * if none could be determined  * @throws IOException if script retrieval failed  * @throws ScriptCompilationException if script compilation failed  * @since 2.0.3  */ ;/**  * Determine the type of the scripted Java object.  * <p>Implementations are encouraged to cache script metadata such as  * a generated script class. Note that this method may be invoked  * concurrently and must be implemented in a thread-safe fashion.  * @param scriptSource the actual ScriptSource to retrieve  * the script source text from (never {@code null})  * @return the type of the scripted Java object, or {@code null}  * if none could be determined  * @throws IOException if script retrieval failed  * @throws ScriptCompilationException if script compilation failed  * @since 2.0.3  */ @Nullable Class<?> getScriptedObjectType(ScriptSource scriptSource) throws IOException, ScriptCompilationException.
true;;1;1;/**  * Determine whether a refresh is required (e.g. through  * ScriptSource's {@code isModified()} method).  * @param scriptSource the actual ScriptSource to retrieve  * the script source text from (never {@code null})  * @return whether a fresh {@link #getScriptedObject} call is required  * @since 2.5.2  * @see ScriptSource#isModified()  */ ;/**  * Determine whether a refresh is required (e.g. through  * ScriptSource's {@code isModified()} method).  * @param scriptSource the actual ScriptSource to retrieve  * the script source text from (never {@code null})  * @return whether a fresh {@link #getScriptedObject} call is required  * @since 2.5.2  * @see ScriptSource#isModified()  */ boolean requiresScriptedObjectRefresh(ScriptSource scriptSource).
