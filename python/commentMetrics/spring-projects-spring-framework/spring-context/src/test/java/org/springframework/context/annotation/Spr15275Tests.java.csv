commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testWithFactoryBean() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithFactoryBean.class).     assertEquals("x", context.getBean(Bar.class).foo.toString()).     assertSame(context.getBean(FooInterface.class), context.getBean(Bar.class).foo). }
false;public;0;6;;@Test public void testWithAbstractFactoryBean() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithAbstractFactoryBean.class).     assertEquals("x", context.getBean(Bar.class).foo.toString()).     assertSame(context.getBean(FooInterface.class), context.getBean(Bar.class).foo). }
false;public;0;6;;@Test public void testWithAbstractFactoryBeanForInterface() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithAbstractFactoryBeanForInterface.class).     assertEquals("x", context.getBean(Bar.class).foo.toString()).     assertSame(context.getBean(FooInterface.class), context.getBean(Bar.class).foo). }
false;public;0;6;;@Test public void testWithAbstractFactoryBeanAsReturnType() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithAbstractFactoryBeanAsReturnType.class).     assertEquals("x", context.getBean(Bar.class).foo.toString()).     assertSame(context.getBean(FooInterface.class), context.getBean(Bar.class).foo). }
false;public;0;6;;@Test public void testWithFinalFactoryBean() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithFinalFactoryBean.class).     assertEquals("x", context.getBean(Bar.class).foo.toString()).     assertSame(context.getBean(FooInterface.class), context.getBean(Bar.class).foo). }
false;public;0;7;;@Test public void testWithFinalFactoryBeanAsReturnType() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithFinalFactoryBeanAsReturnType.class).     assertEquals("x", context.getBean(Bar.class).foo.toString()).     // not same due to fallback to raw FinalFactoryBean instance with repeated getObject() invocations     assertNotSame(context.getBean(FooInterface.class), context.getBean(Bar.class).foo). }
false;public;0;4;;@Override public Foo getObject() {     return new Foo("x"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Foo.class. }
false;public;0;13;;@Bean public FactoryBean<Foo> foo() {     return new FactoryBean<Foo>() {          @Override         public Foo getObject() {             return new Foo("x").         }          @Override         public Class<?> getObjectType() {             return Foo.class.         }     }. }
false;public;0;5;;@Bean public Bar bar() throws Exception {     assertTrue(foo().isSingleton()).     return new Bar(foo().getObject()). }
false;public;0;4;;@Override public Foo createInstance() {     return new Foo("x"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Foo.class. }
false;public;0;13;;@Bean public FactoryBean<Foo> foo() {     return new AbstractFactoryBean<Foo>() {          @Override         public Foo createInstance() {             return new Foo("x").         }          @Override         public Class<?> getObjectType() {             return Foo.class.         }     }. }
false;public;0;5;;@Bean public Bar bar() throws Exception {     assertTrue(foo().isSingleton()).     return new Bar(foo().getObject()). }
false;public;0;4;;@Override public FooInterface createInstance() {     return new Foo("x"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return FooInterface.class. }
false;public;0;13;;@Bean public FactoryBean<FooInterface> foo() {     return new AbstractFactoryBean<FooInterface>() {          @Override         public FooInterface createInstance() {             return new Foo("x").         }          @Override         public Class<?> getObjectType() {             return FooInterface.class.         }     }. }
false;public;0;5;;@Bean public Bar bar() throws Exception {     assertTrue(foo().isSingleton()).     return new Bar(foo().getObject()). }
false;public;0;4;;@Override public FooInterface createInstance() {     return new Foo("x"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Foo.class. }
false;public;0;13;;@Bean public AbstractFactoryBean<FooInterface> foo() {     return new AbstractFactoryBean<FooInterface>() {          @Override         public FooInterface createInstance() {             return new Foo("x").         }          @Override         public Class<?> getObjectType() {             return Foo.class.         }     }. }
false;public;0;5;;@Bean public Bar bar() throws Exception {     assertTrue(foo().isSingleton()).     return new Bar(foo().getObject()). }
false;public;0;4;;@Bean public FactoryBean<FooInterface> foo() {     return new FinalFactoryBean(). }
false;public;0;5;;@Bean public Bar bar() throws Exception {     assertTrue(foo().isSingleton()).     return new Bar(foo().getObject()). }
false;public;0;4;;@Bean public FinalFactoryBean foo() {     return new FinalFactoryBean(). }
false;public;0;5;;@Bean public Bar bar() throws Exception {     assertTrue(foo().isSingleton()).     return new Bar(foo().getObject()). }
false;public;0;4;;@Override public Foo getObject() {     return new Foo("x"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return FooInterface.class. }
false;public;0;4;;@Override public String toString() {     return this.value. }
