commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void beanMethodDetectedOnSuperClass() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Config.class).     ctx.getBean("testBean", TestBean.class). }
false;public;0;10;;@Test public void beanMethodOverriding() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(OverridingConfig.class).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")).     assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString()).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")). }
false;public;0;10;;@Test public void beanMethodOverridingOnASM() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(OverridingConfig.class.getName())).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")).     assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString()).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")). }
false;public;0;10;;@Test public void beanMethodOverridingWithNarrowedReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(NarrowedOverridingConfig.class).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")).     assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString()).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")). }
false;public;0;10;;@Test public void beanMethodOverridingWithNarrowedReturnTypeOnASM() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(NarrowedOverridingConfig.class.getName())).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")).     assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString()).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean")). }
false;public;0;8;;@Test public void beanMethodOverloadingWithoutInheritance() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithOverloading.class).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertThat(ctx.getBean(String.class), equalTo("regular")). }
false;public;0;9;;@Test public void beanMethodOverloadingWithoutInheritanceAndExtraDependency() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithOverloading.class).     ctx.getDefaultListableBeanFactory().registerSingleton("anInt", 5).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertThat(ctx.getBean(String.class), equalTo("overloaded5")). }
false;public;0;10;;@Test public void beanMethodOverloadingWithAdditionalMetadata() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithOverloadingAndAdditionalMetadata.class).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("aString")).     assertThat(ctx.getBean(String.class), equalTo("regular")).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("aString")). }
false;public;0;11;;@Test public void beanMethodOverloadingWithAdditionalMetadataButOtherMethodExecuted() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithOverloadingAndAdditionalMetadata.class).     ctx.getDefaultListableBeanFactory().registerSingleton("anInt", 5).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("aString")).     assertThat(ctx.getBean(String.class), equalTo("overloaded5")).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("aString")). }
false;public;0;10;;@Test public void beanMethodOverloadingWithInheritance() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(SubConfig.class).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("aString")).     assertThat(ctx.getBean(String.class), equalTo("overloaded5")).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("aString")). }
true;public;0;10;// SPR-11025 ;// SPR-11025 @Test public void beanMethodOverloadingWithInheritanceAndList() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(SubConfigWithList.class).     ctx.setAllowBeanDefinitionOverriding(false).     ctx.refresh().     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("aString")).     assertThat(ctx.getBean(String.class), equalTo("overloaded5")).     assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("aString")). }
true;public;0;5;/**  * When inheritance is not involved, it is still possible to override a bean method from  * the container's point of view. This is not strictly 'overloading' of a method per se,  * so it's referred to here as 'shadowing' to distinguish the difference.  */ ;/**  * When inheritance is not involved, it is still possible to override a bean method from  * the container's point of view. This is not strictly 'overloading' of a method per se,  * so it's referred to here as 'shadowing' to distinguish the difference.  */ @Test public void beanMethodShadowing() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ShadowConfig.class).     assertThat(ctx.getBean(String.class), equalTo("shadow")). }
false;public;0;9;;@Test public void beanMethodThroughAopProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config.class).     ctx.register(AnnotationAwareAspectJAutoProxyCreator.class).     ctx.register(TestAdvisor.class).     ctx.refresh().     ctx.getBean("testBean", TestBean.class). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(). }
false;public;0;4;;@Override public String toString() {     return "overridden". }
false;public;0;10;;@Bean @Lazy @Override public TestBean testBean() {     return new TestBean() {          @Override         public String toString() {             return "overridden".         }     }. }
false;public;0;4;;@Override public String toString() {     return "overridden". }
false;public;0;10;;@Bean @Lazy @Override public ExtendedTestBean testBean() {     return new ExtendedTestBean() {          @Override         public String toString() {             return "overridden".         }     }. }
false;;0;4;;@Bean String aString() {     return "regular". }
false;;1;4;;@Bean String aString(Integer dependency) {     return "overloaded" + dependency. }
false;;0;4;;@Bean @Lazy String aString() {     return "regular". }
false;;1;4;;@Bean @Lazy String aString(Integer dependency) {     return "overloaded" + dependency. }
false;;0;4;;@Bean String aString() {     return "super". }
false;;0;4;;@Bean Integer anInt() {     return 5. }
false;;1;4;;@Bean @Lazy String aString(Integer dependency) {     return "overloaded" + dependency. }
false;;0;4;;@Bean Integer anInt() {     return 5. }
false;;1;4;;@Bean @Lazy String aString(List<Integer> dependency) {     return "overloaded" + dependency.get(0). }
false;;0;4;;@Bean String aString() {     return "shadow". }
