commented;modifiers;parameterAmount;loc;comment;code
false;public;0;59;;@Test public void asyncMethods() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncMethodBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     AsyncMethodBean asyncTest = context.getBean("asyncTest", AsyncMethodBean.class).     asyncTest.doNothing(5).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()).     ListenableFuture<String> listenableFuture = asyncTest.returnSomethingListenable(20).     assertEquals("20", listenableFuture.get()).     CompletableFuture<String> completableFuture = asyncTest.returnSomethingCompletable(20).     assertEquals("20", completableFuture.get()).     try {         asyncTest.returnSomething(0).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     }     try {         asyncTest.returnSomething(-1).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IOException).     }     try {         asyncTest.returnSomethingListenable(0).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     }     try {         asyncTest.returnSomethingListenable(-1).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IOException).     }     try {         asyncTest.returnSomethingCompletable(0).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     } }
false;public;0;15;;@Test public void asyncMethodsThroughInterface() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(SimpleAsyncMethodBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     SimpleInterface asyncTest = context.getBean("asyncTest", SimpleInterface.class).     asyncTest.doNothing(5).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;20;;@Test public void asyncMethodsWithQualifier() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncMethodWithQualifierBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.registerBeanDefinition("e0", new RootBeanDefinition(ThreadPoolTaskExecutor.class)).     context.registerBeanDefinition("e1", new RootBeanDefinition(ThreadPoolTaskExecutor.class)).     context.registerBeanDefinition("e2", new RootBeanDefinition(ThreadPoolTaskExecutor.class)).     context.refresh().     AsyncMethodWithQualifierBean asyncTest = context.getBean("asyncTest", AsyncMethodWithQualifierBean.class).     asyncTest.doNothing(5).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()).     Future<String> future2 = asyncTest.returnSomething2(30).     assertEquals("30", future2.get()). }
false;public;0;20;;@Test public void asyncMethodsWithQualifierThroughInterface() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(SimpleAsyncMethodWithQualifierBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.registerBeanDefinition("e0", new RootBeanDefinition(ThreadPoolTaskExecutor.class)).     context.registerBeanDefinition("e1", new RootBeanDefinition(ThreadPoolTaskExecutor.class)).     context.registerBeanDefinition("e2", new RootBeanDefinition(ThreadPoolTaskExecutor.class)).     context.refresh().     SimpleInterface asyncTest = context.getBean("asyncTest", SimpleInterface.class).     asyncTest.doNothing(5).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()).     Future<String> future2 = asyncTest.returnSomething2(30).     assertEquals("30", future2.get()). }
false;public;0;42;;@Test public void asyncClass() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncClassBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     AsyncClassBean asyncTest = context.getBean("asyncTest", AsyncClassBean.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()).     ListenableFuture<String> listenableFuture = asyncTest.returnSomethingListenable(20).     assertEquals("20", listenableFuture.get()).     CompletableFuture<String> completableFuture = asyncTest.returnSomethingCompletable(20).     assertEquals("20", completableFuture.get()).     try {         asyncTest.returnSomething(0).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     }     try {         asyncTest.returnSomethingListenable(0).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     }     try {         asyncTest.returnSomethingCompletable(0).get().         fail("Should have thrown ExecutionException").     } catch (ExecutionException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     } }
false;public;0;13;;@Test public void asyncClassWithPostProcessor() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncClassBean.class)).     context.registerBeanDefinition("asyncProcessor", new RootBeanDefinition(AsyncAnnotationBeanPostProcessor.class)).     context.refresh().     AsyncClassBean asyncTest = context.getBean("asyncTest", AsyncClassBean.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;14;;@Test public void asyncClassWithInterface() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncClassBeanWithInterface.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     RegularInterface asyncTest = context.getBean("asyncTest", RegularInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;13;;@Test public void asyncClassWithInterfaceAndPostProcessor() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncClassBeanWithInterface.class)).     context.registerBeanDefinition("asyncProcessor", new RootBeanDefinition(AsyncAnnotationBeanPostProcessor.class)).     context.refresh().     RegularInterface asyncTest = context.getBean("asyncTest", RegularInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;14;;@Test public void asyncInterface() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncInterfaceBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;13;;@Test public void asyncInterfaceWithPostProcessor() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncInterfaceBean.class)).     context.registerBeanDefinition("asyncProcessor", new RootBeanDefinition(AsyncAnnotationBeanPostProcessor.class)).     context.refresh().     AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;14;;@Test public void dynamicAsyncInterface() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(DynamicAsyncInterfaceBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;13;;@Test public void dynamicAsyncInterfaceWithPostProcessor() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(DynamicAsyncInterfaceBean.class)).     context.registerBeanDefinition("asyncProcessor", new RootBeanDefinition(AsyncAnnotationBeanPostProcessor.class)).     context.refresh().     AsyncInterface asyncTest = context.getBean("asyncTest", AsyncInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;15;;@Test public void asyncMethodsInInterface() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncMethodsInterfaceBean.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     context.refresh().     AsyncMethodsInterface asyncTest = context.getBean("asyncTest", AsyncMethodsInterface.class).     asyncTest.doNothing(5).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;14;;@Test public void asyncMethodsInInterfaceWithPostProcessor() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncMethodsInterfaceBean.class)).     context.registerBeanDefinition("asyncProcessor", new RootBeanDefinition(AsyncAnnotationBeanPostProcessor.class)).     context.refresh().     AsyncMethodsInterface asyncTest = context.getBean("asyncTest", AsyncMethodsInterface.class).     asyncTest.doNothing(5).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;13;;@Test public void dynamicAsyncMethodsInInterfaceWithPostProcessor() throws Exception {     originalThreadName = Thread.currentThread().getName().     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(DynamicAsyncMethodsInterfaceBean.class)).     context.registerBeanDefinition("asyncProcessor", new RootBeanDefinition(AsyncAnnotationBeanPostProcessor.class)).     context.refresh().     AsyncMethodsInterface asyncTest = context.getBean("asyncTest", AsyncMethodsInterface.class).     asyncTest.doSomething(10).     Future<String> future = asyncTest.returnSomething(20).     assertEquals("20", future.get()). }
false;public;0;18;;@Test public void asyncMethodListener() throws Exception {     // Arrange     originalThreadName = Thread.currentThread().getName().     listenerCalled = 0.     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncMethodListener.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     // Act     context.refresh().     // Assert     Awaitility.await().atMost(1, TimeUnit.SECONDS).pollInterval(10, TimeUnit.MILLISECONDS).until(() -> listenerCalled == 1).     context.close(). }
false;public;0;20;;@Test public void asyncClassListener() throws Exception {     // Arrange     originalThreadName = Thread.currentThread().getName().     listenerCalled = 0.     listenerConstructed = 0.     GenericApplicationContext context = new GenericApplicationContext().     context.registerBeanDefinition("asyncTest", new RootBeanDefinition(AsyncClassListener.class)).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     // Act     context.refresh().     context.close().     // Assert     Awaitility.await().atMost(1, TimeUnit.SECONDS).pollInterval(10, TimeUnit.MILLISECONDS).until(() -> listenerCalled == 2).     assertEquals(1, listenerConstructed). }
false;public;0;22;;@Test public void asyncPrototypeClassListener() throws Exception {     // Arrange     originalThreadName = Thread.currentThread().getName().     listenerCalled = 0.     listenerConstructed = 0.     GenericApplicationContext context = new GenericApplicationContext().     RootBeanDefinition listenerDef = new RootBeanDefinition(AsyncClassListener.class).     listenerDef.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     context.registerBeanDefinition("asyncTest", listenerDef).     context.registerBeanDefinition("autoProxyCreator", new RootBeanDefinition(DefaultAdvisorAutoProxyCreator.class)).     context.registerBeanDefinition("asyncAdvisor", new RootBeanDefinition(AsyncAnnotationAdvisor.class)).     // Act     context.refresh().     context.close().     // Assert     Awaitility.await().atMost(1, TimeUnit.SECONDS).pollInterval(10, TimeUnit.MILLISECONDS).until(() -> listenerCalled == 2).     assertEquals(2, listenerConstructed). }
false;;1;1;;void doNothing(int i).
false;;1;1;;void doSomething(int i).
false;;1;1;;Future<String> returnSomething(int i).
false;;1;1;;Future<String> returnSomething2(int i).
false;public;1;3;;public void doNothing(int i) {     assertTrue(Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;4;;@Async public void doSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;11;;@Async public Future<String> returnSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (i == 0) {         throw new IllegalArgumentException().     } else if (i < 0) {         return AsyncResult.forExecutionException(new IOException()).     }     return AsyncResult.forValue(Integer.toString(i)). }
false;public;1;11;;@Async public ListenableFuture<String> returnSomethingListenable(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (i == 0) {         throw new IllegalArgumentException().     } else if (i < 0) {         return AsyncResult.forExecutionException(new IOException()).     }     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;8;;@Async public CompletableFuture<String> returnSomethingCompletable(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (i == 0) {         throw new IllegalArgumentException().     }     return CompletableFuture.completedFuture(Integer.toString(i)). }
false;public;1;4;;@Override public Future<String> returnSomething2(int i) {     throw new UnsupportedOperationException(). }
false;public;1;3;;public void doNothing(int i) {     assertTrue(Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;5;;@Async("e1") public void doSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     assertTrue(Thread.currentThread().getName().startsWith("e1-")). }
false;public;1;6;;@MyAsync public Future<String> returnSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     assertTrue(Thread.currentThread().getName().startsWith("e2-")).     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;5;;public Future<String> returnSomething2(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     assertTrue(Thread.currentThread().getName().startsWith("e0-")).     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;3;;public void doSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;7;;public Future<String> returnSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (i == 0) {         throw new IllegalArgumentException().     }     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;7;;public ListenableFuture<String> returnSomethingListenable(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (i == 0) {         throw new IllegalArgumentException().     }     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;8;;@Async public CompletableFuture<String> returnSomethingCompletable(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (i == 0) {         throw new IllegalArgumentException().     }     return CompletableFuture.completedFuture(Integer.toString(i)). }
false;public;0;3;;@Override public void destroy() { }
false;;1;1;;void doSomething(int i).
false;;1;1;;Future<String> returnSomething(int i).
false;public;1;3;;public void doSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;4;;public Future<String> returnSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     return new AsyncResult<>(Integer.toString(i)). }
false;;1;1;;void doSomething(int i).
false;;1;1;;Future<String> returnSomething(int i).
false;public;1;4;;@Override public void doSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;5;;@Override public Future<String> returnSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;8;;@Override public Object invoke(MethodInvocation invocation) throws Throwable {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (Future.class.equals(invocation.getMethod().getReturnType())) {         return new AsyncResult<>(invocation.getArguments()[0].toString()).     }     return null. }
false;public;0;4;;@Override public AsyncInterface getObject() {     return this.proxy. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return this.proxy.getClass(). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;;1;1;;void doNothing(int i).
false;;1;2;;@Async void doSomething(int i).
false;;1;2;;@Async Future<String> returnSomething(int i).
false;public;1;4;;@Override public void doNothing(int i) {     assertTrue(Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;4;;@Override public void doSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;5;;@Override public Future<String> returnSomething(int i) {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     return new AsyncResult<>(Integer.toString(i)). }
false;public;1;8;;@Override public Object invoke(MethodInvocation invocation) throws Throwable {     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)).     if (Future.class.equals(invocation.getMethod().getReturnType())) {         return new AsyncResult<>(invocation.getArguments()[0].toString()).     }     return null. }
false;public;0;4;;@Override public AsyncMethodsInterface getObject() {     return this.proxy. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return this.proxy.getClass(). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;1;6;;@Override @Async public void onApplicationEvent(ApplicationEvent event) {     listenerCalled++.     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
false;public;1;5;;@Override public void onApplicationEvent(ApplicationEvent event) {     listenerCalled++.     assertTrue(!Thread.currentThread().getName().equals(originalThreadName)). }
