commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected SimpleRemoteSlsbInvokerInterceptor createInterceptor() {     return new SimpleRemoteStatelessSessionProxyFactoryBean(). }
false;protected;2;7;;@Override protected Object configuredProxy(SimpleRemoteSlsbInvokerInterceptor si, Class<?> ifc) throws NamingException {     SimpleRemoteStatelessSessionProxyFactoryBean fb = (SimpleRemoteStatelessSessionProxyFactoryBean) si.     fb.setBusinessInterface(ifc).     fb.afterPropertiesSet().     return fb.getObject(). }
false;public;1;6;;@Override public Object lookup(String name) {     // parameterize     assertTrue(name.equals("java:comp/env/" + jndiName)).     return home. }
false;public;0;34;;@Test public void testInvokesMethod() throws Exception {     final int value = 11.     final String jndiName = "foo".     MyEjb myEjb = mock(MyEjb.class).     given(myEjb.getValue()).willReturn(value).     final MyHome home = mock(MyHome.class).     given(home.create()).willReturn(myEjb).     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) {             // parameterize             assertTrue(name.equals("java:comp/env/" + jndiName)).             return home.         }     }.     SimpleRemoteStatelessSessionProxyFactoryBean fb = new SimpleRemoteStatelessSessionProxyFactoryBean().     fb.setJndiName(jndiName).     fb.setResourceRef(true).     fb.setBusinessInterface(MyBusinessMethods.class).     fb.setJndiTemplate(jt).     // Need lifecycle methods     fb.afterPropertiesSet().     MyBusinessMethods mbm = (MyBusinessMethods) fb.getObject().     assertTrue(Proxy.isProxyClass(mbm.getClass())).     assertEquals("Returns expected value", value, mbm.getValue()).     verify(myEjb).remove(). }
false;public;1;6;;@Override public Object lookup(String name) {     // parameterize     assertTrue(name.equals("java:comp/env/" + jndiName)).     return myEjb. }
false;public;0;30;;@Test public void testInvokesMethodOnEjb3StyleBean() throws Exception {     final int value = 11.     final String jndiName = "foo".     final MyEjb myEjb = mock(MyEjb.class).     given(myEjb.getValue()).willReturn(value).     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) {             // parameterize             assertTrue(name.equals("java:comp/env/" + jndiName)).             return myEjb.         }     }.     SimpleRemoteStatelessSessionProxyFactoryBean fb = new SimpleRemoteStatelessSessionProxyFactoryBean().     fb.setJndiName(jndiName).     fb.setResourceRef(true).     fb.setBusinessInterface(MyBusinessMethods.class).     fb.setJndiTemplate(jt).     // Need lifecycle methods     fb.afterPropertiesSet().     MyBusinessMethods mbm = (MyBusinessMethods) fb.getObject().     assertTrue(Proxy.isProxyClass(mbm.getClass())).     assertEquals("Returns expected value", value, mbm.getValue()). }
false;public;1;6;;@Override public Object lookup(String name) {     // parameterize     assertTrue(name.equals("java:comp/env/" + jndiName)).     return home. }
false;public;0;43;;@Override @Test public void testRemoteException() throws Exception {     final RemoteException rex = new RemoteException().     final String jndiName = "foo".     MyEjb myEjb = mock(MyEjb.class).     given(myEjb.getValue()).willThrow(rex).     // TODO might want to control this behaviour...     // Do we really want to call remove after a remote exception?     final MyHome home = mock(MyHome.class).     given(home.create()).willReturn(myEjb).     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) {             // parameterize             assertTrue(name.equals("java:comp/env/" + jndiName)).             return home.         }     }.     SimpleRemoteStatelessSessionProxyFactoryBean fb = new SimpleRemoteStatelessSessionProxyFactoryBean().     fb.setJndiName(jndiName).     fb.setResourceRef(true).     fb.setBusinessInterface(MyBusinessMethods.class).     fb.setJndiTemplate(jt).     // Need lifecycle methods     fb.afterPropertiesSet().     MyBusinessMethods mbm = (MyBusinessMethods) fb.getObject().     assertTrue(Proxy.isProxyClass(mbm.getClass())).     try {         mbm.getValue().         fail("Should've thrown remote exception").     } catch (RemoteException ex) {         assertSame("Threw expected RemoteException", rex, ex).     }     verify(myEjb).remove(). }
false;public;1;6;;@Override public Object lookup(String name) {     // parameterize     assertTrue(name.equals(jndiName)).     return home. }
false;public;0;38;;@Test public void testCreateException() throws Exception {     final String jndiName = "foo".     final CreateException cex = new CreateException().     final MyHome home = mock(MyHome.class).     given(home.create()).willThrow(cex).     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) {             // parameterize             assertTrue(name.equals(jndiName)).             return home.         }     }.     SimpleRemoteStatelessSessionProxyFactoryBean fb = new SimpleRemoteStatelessSessionProxyFactoryBean().     fb.setJndiName(jndiName).     // rely on default setting of resourceRef=false, no auto addition of java:/comp/env prefix     fb.setBusinessInterface(MyBusinessMethods.class).     assertEquals(fb.getBusinessInterface(), MyBusinessMethods.class).     fb.setJndiTemplate(jt).     // Need lifecycle methods     fb.afterPropertiesSet().     MyBusinessMethods mbm = (MyBusinessMethods) fb.getObject().     assertTrue(Proxy.isProxyClass(mbm.getClass())).     try {         mbm.getValue().         fail("Should have failed to create EJB").     } catch (RemoteException ex) {     // expected     } }
false;public;1;6;;@Override public Object lookup(String name) {     // parameterize     assertTrue(name.equals(jndiName)).     return home. }
false;public;0;38;;@Test public void testCreateExceptionWithLocalBusinessInterface() throws Exception {     final String jndiName = "foo".     final CreateException cex = new CreateException().     final MyHome home = mock(MyHome.class).     given(home.create()).willThrow(cex).     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) {             // parameterize             assertTrue(name.equals(jndiName)).             return home.         }     }.     SimpleRemoteStatelessSessionProxyFactoryBean fb = new SimpleRemoteStatelessSessionProxyFactoryBean().     fb.setJndiName(jndiName).     // rely on default setting of resourceRef=false, no auto addition of java:/comp/env prefix     fb.setBusinessInterface(MyLocalBusinessMethods.class).     assertEquals(fb.getBusinessInterface(), MyLocalBusinessMethods.class).     fb.setJndiTemplate(jt).     // Need lifecycle methods     fb.afterPropertiesSet().     MyLocalBusinessMethods mbm = (MyLocalBusinessMethods) fb.getObject().     assertTrue(Proxy.isProxyClass(mbm.getClass())).     try {         mbm.getValue().         fail("Should have failed to create EJB").     } catch (RemoteAccessException ex) {         assertTrue(ex.getCause() == cex).     } }
false;public;1;6;;@Override public Object lookup(String name) throws NamingException {     // parameterize     assertTrue(name.equals(jndiName)).     return home. }
false;public;0;38;;@Test public void testNoBusinessInterfaceSpecified() throws Exception {     // Will do JNDI lookup to get home but won't call create     // Could actually try to figure out interface from create?     final String jndiName = "foo".     final MyHome home = mock(MyHome.class).     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) throws NamingException {             // parameterize             assertTrue(name.equals(jndiName)).             return home.         }     }.     SimpleRemoteStatelessSessionProxyFactoryBean fb = new SimpleRemoteStatelessSessionProxyFactoryBean().     fb.setJndiName(jndiName).     // rely on default setting of resourceRef=false, no auto addition of java:/comp/env prefix     // Don't set business interface     fb.setJndiTemplate(jt).     // Check it's a singleton     assertTrue(fb.isSingleton()).     try {         fb.afterPropertiesSet().         fail("Should have failed to create EJB").     } catch (IllegalArgumentException ex) {         // TODO more appropriate exception?         assertTrue(ex.getMessage().indexOf("businessInterface") != 1).     }     // Expect no methods on home     verifyZeroInteractions(home). }
false;;0;1;;MyBusinessMethods create() throws CreateException, RemoteException.
false;;0;1;;int getValue() throws RemoteException.
false;;0;1;;int getValue().
