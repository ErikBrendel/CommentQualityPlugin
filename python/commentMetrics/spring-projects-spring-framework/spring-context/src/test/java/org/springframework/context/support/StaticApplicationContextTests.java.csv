# id;timestamp;commentText;codeText;commentWords;codeWords
StaticApplicationContextTests -> @Override 	public void testCount();1356735495;Overridden;@Override_	public void testCount() {_		assertCount(15)__	};overridden;override,public,void,test,count,assert,count,15
StaticApplicationContextTests -> @Override 	public void testCount();1357119417;Overridden;@Override_	public void testCount() {_		assertCount(15)__	};overridden;override,public,void,test,count,assert,count,15
StaticApplicationContextTests -> @Override 	public void testCount();1362408075;Overridden;@Override_	public void testCount() {_		assertCount(15)__	};overridden;override,public,void,test,count,assert,count,15
StaticApplicationContextTests -> @Override 	public void testCount();1413848647;Overridden;@Override_	public void testCount() {_		assertCount(15)__	};overridden;override,public,void,test,count,assert,count,15
StaticApplicationContextTests -> @Override 	protected ConfigurableApplicationContext createContext() throws Exception;1356735495;Run for each test;@Override_	protected ConfigurableApplicationContext createContext() throws Exception {_		StaticApplicationContext parent = new StaticApplicationContext()__		Map<String, String> m = new HashMap<String, String>()__		m.put("name", "Roderick")__		parent.registerPrototype("rod", TestBean.class, new MutablePropertyValues(m))__		m.put("name", "Albert")__		parent.registerPrototype("father", TestBean.class, new MutablePropertyValues(m))__		parent.refresh()__		parent.addListener(parentListener) ___		parent.getStaticMessageSource().addMessage("code1", Locale.getDefault(), "message1")___		this.sac = new StaticApplicationContext(parent)__		sac.registerSingleton("beanThatListens", BeanThatListens.class, new MutablePropertyValues())__		sac.registerSingleton("aca", ACATester.class, new MutablePropertyValues())__		sac.registerPrototype("aca-prototype", ACATester.class, new MutablePropertyValues())__		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(sac.getDefaultListableBeanFactory())__		reader.loadBeanDefinitions(new ClassPathResource("testBeans.properties", getClass()))__		sac.refresh()__		sac.addListener(listener)___		sac.getStaticMessageSource().addMessage("code2", Locale.getDefault(), "message2")___		return sac__	};run,for,each,test;override,protected,configurable,application,context,create,context,throws,exception,static,application,context,parent,new,static,application,context,map,string,string,m,new,hash,map,string,string,m,put,name,roderick,parent,register,prototype,rod,test,bean,class,new,mutable,property,values,m,m,put,name,albert,parent,register,prototype,father,test,bean,class,new,mutable,property,values,m,parent,refresh,parent,add,listener,parent,listener,parent,get,static,message,source,add,message,code1,locale,get,default,message1,this,sac,new,static,application,context,parent,sac,register,singleton,bean,that,listens,bean,that,listens,class,new,mutable,property,values,sac,register,singleton,aca,acatester,class,new,mutable,property,values,sac,register,prototype,aca,prototype,acatester,class,new,mutable,property,values,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,sac,get,default,listable,bean,factory,reader,load,bean,definitions,new,class,path,resource,test,beans,properties,get,class,sac,refresh,sac,add,listener,listener,sac,get,static,message,source,add,message,code2,locale,get,default,message2,return,sac
StaticApplicationContextTests -> @Override 	protected ConfigurableApplicationContext createContext() throws Exception;1357119417;Run for each test;@Override_	protected ConfigurableApplicationContext createContext() throws Exception {_		StaticApplicationContext parent = new StaticApplicationContext()__		Map<String, String> m = new HashMap<String, String>()__		m.put("name", "Roderick")__		parent.registerPrototype("rod", TestBean.class, new MutablePropertyValues(m))__		m.put("name", "Albert")__		parent.registerPrototype("father", TestBean.class, new MutablePropertyValues(m))__		parent.refresh()__		parent.addApplicationListener(parentListener) ___		parent.getStaticMessageSource().addMessage("code1", Locale.getDefault(), "message1")___		this.sac = new StaticApplicationContext(parent)__		sac.registerSingleton("beanThatListens", BeanThatListens.class, new MutablePropertyValues())__		sac.registerSingleton("aca", ACATester.class, new MutablePropertyValues())__		sac.registerPrototype("aca-prototype", ACATester.class, new MutablePropertyValues())__		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(sac.getDefaultListableBeanFactory())__		reader.loadBeanDefinitions(new ClassPathResource("testBeans.properties", getClass()))__		sac.refresh()__		sac.addApplicationListener(listener)___		sac.getStaticMessageSource().addMessage("code2", Locale.getDefault(), "message2")___		return sac__	};run,for,each,test;override,protected,configurable,application,context,create,context,throws,exception,static,application,context,parent,new,static,application,context,map,string,string,m,new,hash,map,string,string,m,put,name,roderick,parent,register,prototype,rod,test,bean,class,new,mutable,property,values,m,m,put,name,albert,parent,register,prototype,father,test,bean,class,new,mutable,property,values,m,parent,refresh,parent,add,application,listener,parent,listener,parent,get,static,message,source,add,message,code1,locale,get,default,message1,this,sac,new,static,application,context,parent,sac,register,singleton,bean,that,listens,bean,that,listens,class,new,mutable,property,values,sac,register,singleton,aca,acatester,class,new,mutable,property,values,sac,register,prototype,aca,prototype,acatester,class,new,mutable,property,values,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,sac,get,default,listable,bean,factory,reader,load,bean,definitions,new,class,path,resource,test,beans,properties,get,class,sac,refresh,sac,add,application,listener,listener,sac,get,static,message,source,add,message,code2,locale,get,default,message2,return,sac
StaticApplicationContextTests -> @Override 	protected ConfigurableApplicationContext createContext() throws Exception;1362408075;Run for each test;@Override_	protected ConfigurableApplicationContext createContext() throws Exception {_		StaticApplicationContext parent = new StaticApplicationContext()__		Map<String, String> m = new HashMap<String, String>()__		m.put("name", "Roderick")__		parent.registerPrototype("rod", TestBean.class, new MutablePropertyValues(m))__		m.put("name", "Albert")__		parent.registerPrototype("father", TestBean.class, new MutablePropertyValues(m))__		parent.refresh()__		parent.addApplicationListener(parentListener) ___		parent.getStaticMessageSource().addMessage("code1", Locale.getDefault(), "message1")___		this.sac = new StaticApplicationContext(parent)__		sac.registerSingleton("beanThatListens", BeanThatListens.class, new MutablePropertyValues())__		sac.registerSingleton("aca", ACATester.class, new MutablePropertyValues())__		sac.registerPrototype("aca-prototype", ACATester.class, new MutablePropertyValues())__		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(sac.getDefaultListableBeanFactory())__		reader.loadBeanDefinitions(new ClassPathResource("testBeans.properties", getClass()))__		sac.refresh()__		sac.addApplicationListener(listener)___		sac.getStaticMessageSource().addMessage("code2", Locale.getDefault(), "message2")___		return sac__	};run,for,each,test;override,protected,configurable,application,context,create,context,throws,exception,static,application,context,parent,new,static,application,context,map,string,string,m,new,hash,map,string,string,m,put,name,roderick,parent,register,prototype,rod,test,bean,class,new,mutable,property,values,m,m,put,name,albert,parent,register,prototype,father,test,bean,class,new,mutable,property,values,m,parent,refresh,parent,add,application,listener,parent,listener,parent,get,static,message,source,add,message,code1,locale,get,default,message1,this,sac,new,static,application,context,parent,sac,register,singleton,bean,that,listens,bean,that,listens,class,new,mutable,property,values,sac,register,singleton,aca,acatester,class,new,mutable,property,values,sac,register,prototype,aca,prototype,acatester,class,new,mutable,property,values,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,sac,get,default,listable,bean,factory,reader,load,bean,definitions,new,class,path,resource,test,beans,properties,get,class,sac,refresh,sac,add,application,listener,listener,sac,get,static,message,source,add,message,code2,locale,get,default,message2,return,sac
StaticApplicationContextTests -> @Override 	protected ConfigurableApplicationContext createContext() throws Exception;1413848647;Run for each test;@Override_	protected ConfigurableApplicationContext createContext() throws Exception {_		StaticApplicationContext parent = new StaticApplicationContext()__		Map<String, String> m = new HashMap<String, String>()__		m.put("name", "Roderick")__		parent.registerPrototype("rod", TestBean.class, new MutablePropertyValues(m))__		m.put("name", "Albert")__		parent.registerPrototype("father", TestBean.class, new MutablePropertyValues(m))__		parent.refresh()__		parent.addApplicationListener(parentListener) ___		parent.getStaticMessageSource().addMessage("code1", Locale.getDefault(), "message1")___		this.sac = new StaticApplicationContext(parent)__		sac.registerSingleton("beanThatListens", BeanThatListens.class, new MutablePropertyValues())__		sac.registerSingleton("aca", ACATester.class, new MutablePropertyValues())__		sac.registerPrototype("aca-prototype", ACATester.class, new MutablePropertyValues())__		PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(sac.getDefaultListableBeanFactory())__		reader.loadBeanDefinitions(new ClassPathResource("testBeans.properties", getClass()))__		sac.refresh()__		sac.addApplicationListener(listener)___		sac.getStaticMessageSource().addMessage("code2", Locale.getDefault(), "message2")___		return sac__	};run,for,each,test;override,protected,configurable,application,context,create,context,throws,exception,static,application,context,parent,new,static,application,context,map,string,string,m,new,hash,map,string,string,m,put,name,roderick,parent,register,prototype,rod,test,bean,class,new,mutable,property,values,m,m,put,name,albert,parent,register,prototype,father,test,bean,class,new,mutable,property,values,m,parent,refresh,parent,add,application,listener,parent,listener,parent,get,static,message,source,add,message,code1,locale,get,default,message1,this,sac,new,static,application,context,parent,sac,register,singleton,bean,that,listens,bean,that,listens,class,new,mutable,property,values,sac,register,singleton,aca,acatester,class,new,mutable,property,values,sac,register,prototype,aca,prototype,acatester,class,new,mutable,property,values,properties,bean,definition,reader,reader,new,properties,bean,definition,reader,sac,get,default,listable,bean,factory,reader,load,bean,definitions,new,class,path,resource,test,beans,properties,get,class,sac,refresh,sac,add,application,listener,listener,sac,get,static,message,source,add,message,code2,locale,get,default,message2,return,sac
