commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.ctx != null) {         this.ctx.close().     } }
false;public;0;5;;@Test public void testLazyNaming() throws Exception {     load(LazyNamingConfiguration.class).     validateAnnotationTestBean(). }
false;private;1;3;;private void load(Class<?>... config) {     this.ctx = new AnnotationConfigApplicationContext(config). }
false;public;0;5;;@Test public void testOnlyTargetClassIsExposed() throws Exception {     load(ProxyConfiguration.class).     validateAnnotationTestBean(). }
false;public;0;8;;@Test @SuppressWarnings("resource") public void testPackagePrivateExtensionCantBeExposed() {     this.thrown.expect(InvalidMetadataException.class).     this.thrown.expectMessage(PackagePrivateTestBean.class.getName()).     this.thrown.expectMessage("must be public").     new AnnotationConfigApplicationContext(PackagePrivateConfiguration.class). }
false;public;0;8;;@Test @SuppressWarnings("resource") public void testPackagePrivateImplementationCantBeExposed() {     this.thrown.expect(InvalidMetadataException.class).     this.thrown.expectMessage(PackagePrivateAnnotationTestBean.class.getName()).     this.thrown.expectMessage("must be public").     new AnnotationConfigApplicationContext(PackagePrivateInterfaceImplementationConfiguration.class). }
false;public;0;5;;@Test public void testPackagePrivateClassExtensionCanBeExposed() throws Exception {     load(PackagePrivateExtensionConfiguration.class).     validateAnnotationTestBean(). }
false;public;0;11;;@Test public void testPlaceholderBased() throws Exception {     MockEnvironment env = new MockEnvironment().     env.setProperty("serverName", "server").     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.setEnvironment(env).     context.register(PlaceholderBasedConfiguration.class).     context.refresh().     this.ctx = context.     validateAnnotationTestBean(). }
false;public;0;16;;@Test public void testLazyAssembling() throws Exception {     System.setProperty("domain", "bean").     load(LazyAssemblingConfiguration.class).     try {         MBeanServer server = (MBeanServer) this.ctx.getBean("server").         validateMBeanAttribute(server, "bean:name=testBean4", "TEST").         validateMBeanAttribute(server, "bean:name=testBean5", "FACTORY").         validateMBeanAttribute(server, "spring:mbean=true", "Rob Harrop").         validateMBeanAttribute(server, "spring:mbean=another", "Juergen Hoeller").     } finally {         System.clearProperty("domain").     } }
false;public;0;6;;@Test public void testComponentScan() throws Exception {     load(ComponentScanConfiguration.class).     MBeanServer server = (MBeanServer) this.ctx.getBean("server").     validateMBeanAttribute(server, "bean:name=testBean4", null). }
false;private;0;4;;private void validateAnnotationTestBean() throws Exception {     MBeanServer server = (MBeanServer) this.ctx.getBean("server").     validateMBeanAttribute(server, "bean:name=testBean4", "TEST"). }
false;private;3;6;;private void validateMBeanAttribute(MBeanServer server, String objectName, String expected) throws Exception {     ObjectName oname = ObjectNameManager.getInstance(objectName).     assertNotNull(server.getObjectInstance(oname)).     String name = (String) server.getAttribute(oname, "Name").     assertEquals("Invalid name returned", expected, name). }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;8;;@Bean @Lazy public AnnotationTestBean testBean() {     AnnotationTestBean bean = new AnnotationTestBean().     bean.setName("TEST").     bean.setAge(100).     return bean. }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;9;;@Bean @Lazy @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS) public AnnotationTestBean testBean() {     AnnotationTestBean bean = new AnnotationTestBean().     bean.setName("TEST").     bean.setAge(100).     return bean. }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;8;;@Bean @Lazy public AnnotationTestBean testBean() {     AnnotationTestBean bean = new AnnotationTestBean().     bean.setName("TEST").     bean.setAge(100).     return bean. }
false;public;0;4;;@Bean public PropertyPlaceholderConfigurer ppc() {     return new PropertyPlaceholderConfigurer(). }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;8;;@Bean("bean:name=testBean4") @Lazy public AnnotationTestBean testBean4() {     AnnotationTestBean bean = new AnnotationTestBean().     bean.setName("TEST").     bean.setAge(100).     return bean. }
false;public;0;4;;@Bean("bean:name=testBean5") public AnnotationTestBeanFactory testBean5() throws Exception {     return new AnnotationTestBeanFactory(). }
false;public;0;5;;@Bean(name = "spring:mbean=true") @Lazy public TestDynamicMBean dynamic() {     return new TestDynamicMBean(). }
false;public;0;7;;@Bean(name = "spring:mbean=another") @Lazy public MBeanExporterTests.Person person() {     MBeanExporterTests.Person person = new MBeanExporterTests.Person().     person.setName("Juergen Hoeller").     return person. }
false;public;0;5;;@Bean @Lazy public Object notLoadable() throws Exception {     return Class.forName("does.not.exist").newInstance(). }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;4;;@Bean public PackagePrivateTestBean testBean() {     return new PackagePrivateTestBean(). }
false;public;0;4;;@ManagedAttribute public String getName() {     return this.name. }
false;public;1;4;;@ManagedAttribute public void setName(String name) {     this.name = name. }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;6;;@Bean public PackagePrivateTestBeanExtension testBean() {     PackagePrivateTestBeanExtension bean = new PackagePrivateTestBeanExtension().     bean.setName("TEST").     return bean. }
false;public;0;4;;@Bean public MBeanServerFactoryBean server() throws Exception {     return new MBeanServerFactoryBean(). }
false;public;0;4;;@Bean public PackagePrivateAnnotationTestBean testBean() {     return new PackagePrivateAnnotationTestBean(). }
false;public;0;4;;@Override public void foo() { }
false;public;0;4;;@Override public String getBar() {     return this.bar. }
false;public;1;4;;@Override public void setBar(String bar) {     this.bar = bar. }
false;public;0;4;;@Override public int getCacheEntries() {     return 0. }
