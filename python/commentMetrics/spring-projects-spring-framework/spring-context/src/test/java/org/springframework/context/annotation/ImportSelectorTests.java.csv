commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void cleanup() {     ImportSelectorTests.importFrom.clear().     SampleImportSelector.cleanup().     TestImportGroup.cleanup(). }
false;public;0;13;;@Test public void importSelectors() {     DefaultListableBeanFactory beanFactory = spy(new DefaultListableBeanFactory()).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(beanFactory).     context.register(Config.class).     context.refresh().     context.getBean(Config.class).     InOrder ordered = inOrder(beanFactory).     ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any()). }
false;public;0;8;;@Test public void invokeAwareMethodsInImportSelector() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AwareConfig.class).     assertThat(SampleImportSelector.beanFactory, is(context.getBeanFactory())).     assertThat(SampleImportSelector.classLoader, is(context.getBeanFactory().getBeanClassLoader())).     assertThat(SampleImportSelector.resourceLoader, is(notNullValue())).     assertThat(SampleImportSelector.environment, is(context.getEnvironment())). }
false;public;0;9;;@Test public void correctMetaDataOnIndirectImports() {     new AnnotationConfigApplicationContext(IndirectConfig.class).     Matcher<String> isFromIndirect = equalTo(IndirectImport.class.getName()).     assertThat(importFrom.get(ImportSelector1.class), isFromIndirect).     assertThat(importFrom.get(ImportSelector2.class), isFromIndirect).     assertThat(importFrom.get(DeferredImportSelector1.class), isFromIndirect).     assertThat(importFrom.get(DeferredImportSelector2.class), isFromIndirect). }
false;public;0;15;;@Test public void importSelectorsWithGroup() {     DefaultListableBeanFactory beanFactory = spy(new DefaultListableBeanFactory()).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(beanFactory).     context.register(GroupedConfig.class).     context.refresh().     InOrder ordered = inOrder(beanFactory).     ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any()).     assertThat(TestImportGroup.instancesCount.get(), equalTo(1)).     assertThat(TestImportGroup.imports.size(), equalTo(1)).     assertThat(TestImportGroup.imports.values().iterator().next().size(), equalTo(2)). }
false;public;0;16;;@Test public void importSelectorsSeparateWithGroup() {     DefaultListableBeanFactory beanFactory = spy(new DefaultListableBeanFactory()).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(beanFactory).     context.register(GroupedConfig1.class).     context.register(GroupedConfig2.class).     context.refresh().     InOrder ordered = inOrder(beanFactory).     ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any()).     assertThat(TestImportGroup.instancesCount.get(), equalTo(1)).     assertThat(TestImportGroup.imports.size(), equalTo(2)).     Iterator<AnnotationMetadata> iterator = TestImportGroup.imports.keySet().iterator().     assertThat(iterator.next().getClassName(), equalTo(GroupedConfig2.class.getName())).     assertThat(iterator.next().getClassName(), equalTo(GroupedConfig1.class.getName())). }
false;public;0;20;;@Test public void importSelectorsWithNestedGroup() {     DefaultListableBeanFactory beanFactory = spy(new DefaultListableBeanFactory()).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(beanFactory).     context.register(ParentConfiguration1.class).     context.refresh().     InOrder ordered = inOrder(beanFactory).     ordered.verify(beanFactory).registerBeanDefinition(eq("a"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("e"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("c"), any()).     assertThat(TestImportGroup.instancesCount.get(), equalTo(2)).     assertThat(TestImportGroup.imports.size(), equalTo(2)).     assertThat(TestImportGroup.allImports(), hasEntry(is(ParentConfiguration1.class.getName()), IsIterableContainingInOrder.contains(DeferredImportSelector1.class.getName(), ChildConfiguration1.class.getName()))).     assertThat(TestImportGroup.allImports(), hasEntry(is(ChildConfiguration1.class.getName()), IsIterableContainingInOrder.contains(DeferredImportedSelector3.class.getName()))). }
false;public;0;19;;@Test public void importSelectorsWithNestedGroupSameDeferredImport() {     DefaultListableBeanFactory beanFactory = spy(new DefaultListableBeanFactory()).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(beanFactory).     context.register(ParentConfiguration2.class).     context.refresh().     InOrder ordered = inOrder(beanFactory).     ordered.verify(beanFactory).registerBeanDefinition(eq("b"), any()).     ordered.verify(beanFactory).registerBeanDefinition(eq("d"), any()).     assertThat(TestImportGroup.instancesCount.get(), equalTo(2)).     assertThat(TestImportGroup.allImports().size(), equalTo(2)).     assertThat(TestImportGroup.allImports(), hasEntry(is(ParentConfiguration2.class.getName()), IsIterableContainingInOrder.contains(DeferredImportSelector2.class.getName(), ChildConfiguration2.class.getName()))).     assertThat(TestImportGroup.allImports(), hasEntry(is(ChildConfiguration2.class.getName()), IsIterableContainingInOrder.contains(DeferredImportSelector2.class.getName()))). }
false;public;0;8;;@Test public void invokeAwareMethodsInImportGroup() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(GroupedConfig1.class).     assertThat(TestImportGroup.beanFactory, is(context.getBeanFactory())).     assertThat(TestImportGroup.classLoader, is(context.getBeanFactory().getBeanClassLoader())).     assertThat(TestImportGroup.resourceLoader, is(notNullValue())).     assertThat(TestImportGroup.environment, is(context.getEnvironment())). }
false;static;0;6;;static void cleanup() {     SampleImportSelector.classLoader = null.     SampleImportSelector.beanFactory = null.     SampleImportSelector.resourceLoader = null.     SampleImportSelector.environment = null. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     SampleImportSelector.classLoader = classLoader. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     SampleImportSelector.beanFactory = beanFactory. }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     SampleImportSelector.resourceLoader = resourceLoader. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     SampleImportSelector.environment = environment. }
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     return new String[] {}. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { ImportedSelector1.class.getName() }. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { ImportedSelector2.class.getName() }. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { DeferredImportedSelector1.class.getName() }. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { DeferredImportedSelector2.class.getName() }. }
false;public;0;4;;@Bean public String a() {     return "a". }
false;public;0;4;;@Bean public String b() {     return "b". }
false;public;0;4;;@Bean public String c() {     return "c". }
false;public;0;4;;@Bean public String d() {     return "d". }
false;public;0;4;;@Bean public String e() {     return "e". }
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     return new String[] { IndirectImport.class.getName() }. }
false;public;0;5;;@Nullable @Override public Class<? extends Group> getImportGroup() {     return TestImportGroup.class. }
false;public;0;5;;@Nullable @Override public Class<? extends Group> getImportGroup() {     return TestImportGroup.class. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { DeferredImportSelector1.class.getName(), ChildConfiguration1.class.getName() }. }
false;public;0;5;;@Nullable @Override public Class<? extends DeferredImportSelector.Group> getImportGroup() {     return TestImportGroup.class. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { DeferredImportSelector2.class.getName(), ChildConfiguration2.class.getName() }. }
false;public;0;5;;@Nullable @Override public Class<? extends DeferredImportSelector.Group> getImportGroup() {     return TestImportGroup.class. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { DeferredImportedSelector3.class.getName() }. }
false;public;0;5;;@Nullable @Override public Class<? extends DeferredImportSelector.Group> getImportGroup() {     return TestImportGroup.class. }
false;public;1;5;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     ImportSelectorTests.importFrom.put(getClass(), importingClassMetadata.getClassName()).     return new String[] { DeferredImportSelector2.class.getName() }. }
false;public;0;5;;@Nullable @Override public Class<? extends DeferredImportSelector.Group> getImportGroup() {     return TestImportGroup.class. }
false;static;0;8;;static void cleanup() {     TestImportGroup.classLoader = null.     TestImportGroup.beanFactory = null.     TestImportGroup.resourceLoader = null.     TestImportGroup.environment = null.     TestImportGroup.instancesCount = new AtomicInteger().     TestImportGroup.imports.clear(). }
false;static;0;6;;static Map<String, List<String>> allImports() {     return TestImportGroup.imports.entrySet().stream().collect(Collectors.toMap((entry) -> entry.getKey().getClassName(), Map.Entry::getValue)). }
false;public;2;8;;@Override public void process(AnnotationMetadata metadata, DeferredImportSelector selector) {     for (String importClassName : selector.selectImports(metadata)) {         this.instanceImports.add(new Entry(metadata, importClassName)).     }     TestImportGroup.imports.addAll(metadata, Arrays.asList(selector.selectImports(metadata))). }
false;public;0;6;;@Override public Iterable<Entry> selectImports() {     LinkedList<Entry> content = new LinkedList<>(this.instanceImports).     Collections.reverse(content).     return content. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     TestImportGroup.classLoader = classLoader. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     TestImportGroup.beanFactory = beanFactory. }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     TestImportGroup.resourceLoader = resourceLoader. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     TestImportGroup.environment = environment. }
