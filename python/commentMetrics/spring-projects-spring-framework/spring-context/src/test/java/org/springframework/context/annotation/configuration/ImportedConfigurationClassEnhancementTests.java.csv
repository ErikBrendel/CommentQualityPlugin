commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void autowiredConfigClassIsEnhancedWhenImported() {     autowiredConfigClassIsEnhanced(ConfigThatDoesImport.class). }
false;public;0;4;;@Test public void autowiredConfigClassIsEnhancedWhenRegisteredViaConstructor() {     autowiredConfigClassIsEnhanced(ConfigThatDoesNotImport.class, ConfigToBeAutowired.class). }
false;private;1;6;;private void autowiredConfigClassIsEnhanced(Class<?>... configClasses) {     ApplicationContext ctx = new AnnotationConfigApplicationContext(configClasses).     Config config = ctx.getBean(Config.class).     assertTrue("autowired config class has not been enhanced", ClassUtils.isCglibProxy(config.autowiredConfig)). }
false;public;0;4;;@Test public void autowiredConfigClassBeanMethodsRespectScopingWhenImported() {     autowiredConfigClassBeanMethodsRespectScoping(ConfigThatDoesImport.class). }
false;public;0;4;;@Test public void autowiredConfigClassBeanMethodsRespectScopingWhenRegisteredViaConstructor() {     autowiredConfigClassBeanMethodsRespectScoping(ConfigThatDoesNotImport.class, ConfigToBeAutowired.class). }
false;private;1;8;;private void autowiredConfigClassBeanMethodsRespectScoping(Class<?>... configClasses) {     ApplicationContext ctx = new AnnotationConfigApplicationContext(configClasses).     Config config = ctx.getBean(Config.class).     TestBean testBean1 = config.autowiredConfig.testBean().     TestBean testBean2 = config.autowiredConfig.testBean().     assertThat("got two distinct instances of testBean when singleton scoping was expected", testBean1, sameInstance(testBean2)). }
false;public;0;6;;@Test public void importingNonConfigurationClassCausesBeanDefinitionParsingException() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigThatImportsNonConfigClass.class).     ConfigThatImportsNonConfigClass config = ctx.getBean(ConfigThatImportsNonConfigClass.class).     assertSame(ctx.getBean(TestBean.class), config.testBean). }
false;public;0;3;;@Bean public TestBean testBean() {     return new TestBean(). }
