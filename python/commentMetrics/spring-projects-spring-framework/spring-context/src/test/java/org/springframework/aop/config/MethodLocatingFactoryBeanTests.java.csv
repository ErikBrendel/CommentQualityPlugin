commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() {     factory = new MethodLocatingFactoryBean().     beanFactory = mock(BeanFactory.class). }
false;public;0;4;;@Test public void testIsSingleton() {     assertTrue(factory.isSingleton()). }
false;public;0;4;;@Test public void testGetObjectType() {     assertEquals(Method.class, factory.getObjectType()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testWithNullTargetBeanName() {     factory.setMethodName("toString()").     factory.setBeanFactory(beanFactory). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWithEmptyTargetBeanName() {     factory.setTargetBeanName("").     factory.setMethodName("toString()").     factory.setBeanFactory(beanFactory). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testWithNullTargetMethodName() {     factory.setTargetBeanName(BEAN_NAME).     factory.setBeanFactory(beanFactory). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWithEmptyTargetMethodName() {     factory.setTargetBeanName(BEAN_NAME).     factory.setMethodName("").     factory.setBeanFactory(beanFactory). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testWhenTargetBeanClassCannotBeResolved() {     factory.setTargetBeanName(BEAN_NAME).     factory.setMethodName("toString()").     factory.setBeanFactory(beanFactory).     verify(beanFactory).getType(BEAN_NAME). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void testSunnyDayPath() throws Exception {     given(beanFactory.getType(BEAN_NAME)).willReturn((Class) String.class).     factory.setTargetBeanName(BEAN_NAME).     factory.setMethodName("toString()").     factory.setBeanFactory(beanFactory).     Object result = factory.getObject().     assertNotNull(result).     assertTrue(result instanceof Method).     Method method = (Method) result.     assertEquals("Bingo", method.invoke("Bingo")). }
false;public;0;8;;@Test(expected = IllegalArgumentException.class) @SuppressWarnings("unchecked") public void testWhereMethodCannotBeResolved() {     given(beanFactory.getType(BEAN_NAME)).willReturn((Class) String.class).     factory.setTargetBeanName(BEAN_NAME).     factory.setMethodName("loadOfOld()").     factory.setBeanFactory(beanFactory). }
