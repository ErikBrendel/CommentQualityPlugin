commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     MBeanTestUtils.resetMBeanServers(). }
false;public;0;4;;@After public void tearDown() throws Exception {     MBeanTestUtils.resetMBeanServers(). }
false;public;0;12;;@Test public void getObject() throws Exception {     MBeanServerFactoryBean bean = new MBeanServerFactoryBean().     bean.afterPropertiesSet().     try {         MBeanServer server = bean.getObject().         assertNotNull("The MBeanServer should not be null", server).     } finally {         bean.destroy().     } }
false;public;0;13;;@Test public void defaultDomain() throws Exception {     MBeanServerFactoryBean bean = new MBeanServerFactoryBean().     bean.setDefaultDomain("foo").     bean.afterPropertiesSet().     try {         MBeanServer server = bean.getObject().         assertEquals("The default domain should be foo", "foo", server.getDefaultDomain()).     } finally {         bean.destroy().     } }
false;public;0;19;;@Test public void withLocateExistingAndExistingServer() {     MBeanServer server = MBeanServerFactory.createMBeanServer().     try {         MBeanServerFactoryBean bean = new MBeanServerFactoryBean().         bean.setLocateExistingServerIfPossible(true).         bean.afterPropertiesSet().         try {             MBeanServer otherServer = bean.getObject().             assertSame("Existing MBeanServer not located", server, otherServer).         } finally {             bean.destroy().         }     } finally {         MBeanServerFactory.releaseMBeanServer(server).     } }
false;public;0;12;;@Test public void withLocateExistingAndFallbackToPlatformServer() {     MBeanServerFactoryBean bean = new MBeanServerFactoryBean().     bean.setLocateExistingServerIfPossible(true).     bean.afterPropertiesSet().     try {         assertSame(ManagementFactory.getPlatformMBeanServer(), bean.getObject()).     } finally {         bean.destroy().     } }
false;public;0;12;;@Test public void withEmptyAgentIdAndFallbackToPlatformServer() {     MBeanServerFactoryBean bean = new MBeanServerFactoryBean().     bean.setAgentId("").     bean.afterPropertiesSet().     try {         assertSame(ManagementFactory.getPlatformMBeanServer(), bean.getObject()).     } finally {         bean.destroy().     } }
false;public;0;4;;@Test public void createMBeanServer() throws Exception {     testCreation(true, "The server should be available in the list"). }
false;public;0;4;;@Test public void newMBeanServer() throws Exception {     testCreation(false, "The server should not be available in the list"). }
false;private;2;25;;private void testCreation(boolean referenceShouldExist, String failMsg) throws Exception {     MBeanServerFactoryBean bean = new MBeanServerFactoryBean().     bean.setRegisterWithFactory(referenceShouldExist).     bean.afterPropertiesSet().     try {         MBeanServer server = bean.getObject().         List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null).         boolean found = false.         for (MBeanServer candidate : servers) {             if (candidate == server) {                 found = true.                 break.             }         }         if (!(found == referenceShouldExist)) {             fail(failMsg).         }     } finally {         bean.destroy().     } }
