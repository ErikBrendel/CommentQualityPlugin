commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;5;/**  * Defensively zero-out static factory count - other tests  * may have misbehaved before us.  */ ;/**  * Defensively zero-out static factory count - other tests  * may have misbehaved before us.  */ @BeforeClass @AfterClass public static void zeroOutFactoryCount() throws Exception {     getSerializableFactoryMap().clear(). }
false;public;0;4;;@Test public void genericContext() throws Exception {     assertFactoryCountThroughoutLifecycle(new GenericApplicationContext()). }
false;public;0;4;;@Test public void abstractRefreshableContext() throws Exception {     assertFactoryCountThroughoutLifecycle(new ClassPathXmlApplicationContext()). }
false;public;0;6;;@Test public void genericContextWithMisconfiguredBean() throws Exception {     GenericApplicationContext ctx = new GenericApplicationContext().     registerMisconfiguredBeanDefinition(ctx).     assertFactoryCountThroughoutLifecycle(ctx). }
false;protected;1;5;;@Override protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {     super.customizeBeanFactory(beanFactory).     registerMisconfiguredBeanDefinition(beanFactory). }
false;public;0;11;;@Test public void abstractRefreshableContextWithMisconfiguredBean() throws Exception {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext() {          @Override         protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {             super.customizeBeanFactory(beanFactory).             registerMisconfiguredBeanDefinition(beanFactory).         }     }.     assertFactoryCountThroughoutLifecycle(ctx). }
false;private;1;14;;private void assertFactoryCountThroughoutLifecycle(ConfigurableApplicationContext ctx) throws Exception {     assertThat(serializableFactoryCount(), equalTo(0)).     try {         ctx.refresh().         assertThat(serializableFactoryCount(), equalTo(1)).         ctx.close().     } catch (BeanCreationException ex) {     // ignore - this is expected on refresh() for failure case tests     } finally {         assertThat(serializableFactoryCount(), equalTo(0)).     } }
false;private;1;5;;private void registerMisconfiguredBeanDefinition(BeanDefinitionRegistry registry) {     registry.registerBeanDefinition("misconfigured", rootBeanDefinition(Object.class).addPropertyValue("nonexistent", "bogus").getBeanDefinition()). }
false;private;0;4;;private int serializableFactoryCount() throws Exception {     Map<?, ?> map = getSerializableFactoryMap().     return map.size(). }
false;private,static;0;5;;private static Map<?, ?> getSerializableFactoryMap() throws Exception {     Field field = DefaultListableBeanFactory.class.getDeclaredField("serializableFactories").     field.setAccessible(true).     return (Map<?, ?>) field.get(DefaultListableBeanFactory.class). }
