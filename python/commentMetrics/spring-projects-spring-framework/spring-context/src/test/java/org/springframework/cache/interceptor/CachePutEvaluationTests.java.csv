# id;timestamp;commentText;codeText;commentWords;codeWords
CachePutEvaluationTests -> SimpleService -> @Cacheable(condition = "#p1", key = "#p0") 		@CachePut(condition = "!#p1", key = "#p0") 		public Long getOrPut(Object id, boolean flag);1404735499;Represent a mutual exclusion use case. The boolean flag exclude one of the two operation.;@Cacheable(condition = "#p1", key = "#p0")_		@CachePut(condition = "!#p1", key = "#p0")_		public Long getOrPut(Object id, boolean flag) {_			return counter.getAndIncrement()__		};represent,a,mutual,exclusion,use,case,the,boolean,flag,exclude,one,of,the,two,operation;cacheable,condition,p1,key,p0,cache,put,condition,p1,key,p0,public,long,get,or,put,object,id,boolean,flag,return,counter,get,and,increment
CachePutEvaluationTests -> SimpleService -> @Cacheable(condition = "#p1", key = "#p0") 		@CachePut(condition = "!#p1", key = "#p0") 		public Long getOrPut(Object id, boolean flag);1413848647;Represent a mutual exclusion use case. The boolean flag exclude one of the two operation.;@Cacheable(condition = "#p1", key = "#p0")_		@CachePut(condition = "!#p1", key = "#p0")_		public Long getOrPut(Object id, boolean flag) {_			return counter.getAndIncrement()__		};represent,a,mutual,exclusion,use,case,the,boolean,flag,exclude,one,of,the,two,operation;cacheable,condition,p1,key,p0,cache,put,condition,p1,key,p0,public,long,get,or,put,object,id,boolean,flag,return,counter,get,and,increment
CachePutEvaluationTests -> SimpleService -> @Cacheable(condition = "#p1", key = "#p0") 		@CachePut(condition = "!#p1", key = "#p0") 		public Long getOrPut(Object id, boolean flag);1468227044;Represent a mutual exclusion use case. The boolean flag exclude one of the two operation.;@Cacheable(condition = "#p1", key = "#p0")_		@CachePut(condition = "!#p1", key = "#p0")_		public Long getOrPut(Object id, boolean flag) {_			return this.counter.getAndIncrement()__		};represent,a,mutual,exclusion,use,case,the,boolean,flag,exclude,one,of,the,two,operation;cacheable,condition,p1,key,p0,cache,put,condition,p1,key,p0,public,long,get,or,put,object,id,boolean,flag,return,this,counter,get,and,increment
CachePutEvaluationTests -> SimpleService -> @Cacheable 		@CachePut(key = "#result + 100", condition = "#result != null") 		public Long getAndPut(long id);1404735499;Represent an invalid use case. If the result of the operation is non null, then we put_the value with a different key. This forces the method to be executed every time.;@Cacheable_		@CachePut(key = "#result + 100", condition = "#result != null")_		public Long getAndPut(long id) {_			return counter.getAndIncrement()__		};represent,an,invalid,use,case,if,the,result,of,the,operation,is,non,null,then,we,put,the,value,with,a,different,key,this,forces,the,method,to,be,executed,every,time;cacheable,cache,put,key,result,100,condition,result,null,public,long,get,and,put,long,id,return,counter,get,and,increment
CachePutEvaluationTests -> SimpleService -> @Cacheable 		@CachePut(key = "#result + 100", condition = "#result != null") 		public Long getAndPut(long id);1413848647;Represent an invalid use case. If the result of the operation is non null, then we put_the value with a different key. This forces the method to be executed every time.;@Cacheable_		@CachePut(key = "#result + 100", condition = "#result != null")_		public Long getAndPut(long id) {_			return counter.getAndIncrement()__		};represent,an,invalid,use,case,if,the,result,of,the,operation,is,non,null,then,we,put,the,value,with,a,different,key,this,forces,the,method,to,be,executed,every,time;cacheable,cache,put,key,result,100,condition,result,null,public,long,get,and,put,long,id,return,counter,get,and,increment
CachePutEvaluationTests -> SimpleService -> @Cacheable 		@CachePut(key = "#result + 100", condition = "#result != null") 		public Long getAndPut(long id);1468227044;Represent an invalid use case. If the result of the operation is non null, then we put_the value with a different key. This forces the method to be executed every time.;@Cacheable_		@CachePut(key = "#result + 100", condition = "#result != null")_		public Long getAndPut(long id) {_			return this.counter.getAndIncrement()__		};represent,an,invalid,use,case,if,the,result,of,the,operation,is,non,null,then,we,put,the,value,with,a,different,key,this,forces,the,method,to,be,executed,every,time;cacheable,cache,put,key,result,100,condition,result,null,public,long,get,and,put,long,id,return,this,counter,get,and,increment
