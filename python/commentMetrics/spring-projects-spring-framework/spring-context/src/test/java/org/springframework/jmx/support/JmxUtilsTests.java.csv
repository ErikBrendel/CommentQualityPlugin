commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testIsMBeanWithDynamicMBean() throws Exception {     DynamicMBean mbean = new TestDynamicMBean().     assertTrue("Dynamic MBean not detected correctly", JmxUtils.isMBean(mbean.getClass())). }
false;public;0;5;;@Test public void testIsMBeanWithStandardMBeanWrapper() throws Exception {     StandardMBean mbean = new StandardMBean(new JmxTestBean(), IJmxTestBean.class).     assertTrue("Standard MBean not detected correctly", JmxUtils.isMBean(mbean.getClass())). }
false;public;0;5;;@Test public void testIsMBeanWithStandardMBeanInherited() throws Exception {     StandardMBean mbean = new StandardMBeanImpl().     assertTrue("Standard MBean not detected correctly", JmxUtils.isMBean(mbean.getClass())). }
false;public;0;4;;@Test public void testNotAnMBean() throws Exception {     assertFalse("Object incorrectly identified as an MBean", JmxUtils.isMBean(Object.class)). }
false;public;0;5;;@Test public void testSimpleMBean() throws Exception {     Foo foo = new Foo().     assertTrue("Simple MBean not detected correctly", JmxUtils.isMBean(foo.getClass())). }
false;public;0;5;;@Test public void testSimpleMXBean() throws Exception {     FooX foo = new FooX().     assertTrue("Simple MXBean not detected correctly", JmxUtils.isMBean(foo.getClass())). }
false;public;0;9;;@Test public void testSimpleMBeanThroughInheritance() throws Exception {     Bar bar = new Bar().     Abc abc = new Abc().     assertTrue("Simple MBean (through inheritance) not detected correctly", JmxUtils.isMBean(bar.getClass())).     assertTrue("Simple MBean (through 2 levels of inheritance) not detected correctly", JmxUtils.isMBean(abc.getClass())). }
false;public;0;6;;@Test public void testGetAttributeNameWithStrictCasing() {     PropertyDescriptor pd = new BeanWrapperImpl(AttributeTestBean.class).getPropertyDescriptor("name").     String attributeName = JmxUtils.getAttributeName(pd, true).     assertEquals("Incorrect casing on attribute name", "Name", attributeName). }
false;public;0;6;;@Test public void testGetAttributeNameWithoutStrictCasing() {     PropertyDescriptor pd = new BeanWrapperImpl(AttributeTestBean.class).getPropertyDescriptor("name").     String attributeName = JmxUtils.getAttributeName(pd, false).     assertEquals("Incorrect casing on attribute name", "name", attributeName). }
false;public;0;12;;@Test public void testAppendIdentityToObjectName() throws MalformedObjectNameException {     ObjectName objectName = ObjectNameManager.getInstance("spring:type=Test").     Object managedResource = new Object().     ObjectName uniqueName = JmxUtils.appendIdentityToObjectName(objectName, managedResource).     String typeProperty = "type".     assertEquals("Domain of transformed name is incorrect", objectName.getDomain(), uniqueName.getDomain()).     assertEquals("Type key is incorrect", objectName.getKeyProperty(typeProperty), uniqueName.getKeyProperty("type")).     assertEquals("Identity key is incorrect", ObjectUtils.getIdentityHexString(managedResource), uniqueName.getKeyProperty(JmxUtils.IDENTITY_OBJECT_NAME_KEY)). }
false;public;0;12;;@Test public void testLocatePlatformMBeanServer() {     MBeanServer server = null.     try {         server = JmxUtils.locateMBeanServer().     } finally {         if (server != null) {             MBeanServerFactory.releaseMBeanServer(server).         }     } }
false;public;0;11;;@Test public void testIsMBean() {     // Correctly returns true for a class     assertTrue(JmxUtils.isMBean(JmxClass.class)).     // Correctly returns false since JmxUtils won't navigate to the extended interface     assertFalse(JmxUtils.isMBean(SpecializedJmxInterface.class)).     // Incorrectly returns true since it doesn't detect that this is an interface     assertFalse(JmxUtils.isMBean(JmxInterface.class)). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;2;4;;@Override public int add(int x, int y) {     return 0. }
false;public;0;4;;@Override public long myOperation() {     return 0. }
false;public;0;4;;@Override public int getAge() {     return 0. }
false;public;1;3;;@Override public void setAge(int age) { }
false;public;1;3;;@Override public void setName(String name) { }
false;public;0;4;;@Override public String getName() {     return null. }
false;public;0;3;;@Override public void dontExposeMe() { }
false;;0;1;;String getName().
false;public;0;4;;@Override public String getName() {     return "Rob Harrop". }
false;;0;1;;String getName().
false;public;0;4;;@Override public String getName() {     return "Rob Harrop". }
