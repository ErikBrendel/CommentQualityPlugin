commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;7;;@Override protected Object createProxy(ProxyCreatorSupport as) {     as.setProxyTargetClass(true).     Object proxy = as.createAopProxy().getProxy().     assertTrue(AopUtils.isCglibProxy(proxy)).     return proxy. }
false;protected;1;5;;@Override protected AopProxy createAopProxy(AdvisedSupport as) {     as.setProxyTargetClass(true).     return new CglibAopProxy(as). }
false;protected;0;4;;@Override protected boolean requiresTarget() {     return true. }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testNullConfig() {     new CglibAopProxy(null). }
false;public;0;7;;@Test(expected = AopConfigException.class) public void testNoTarget() {     AdvisedSupport pc = new AdvisedSupport(ITestBean.class).     pc.addAdvice(new NopInterceptor()).     AopProxy aop = createAopProxy(pc).     aop.getProxy(). }
false;public;0;16;;@Test public void testProtectedMethodInvocation() {     ProtectedMethodTestBean bean = new ProtectedMethodTestBean().     bean.value = "foo".     mockTargetSource.setTarget(bean).     AdvisedSupport as = new AdvisedSupport().     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     AopProxy aop = new CglibAopProxy(as).     ProtectedMethodTestBean proxy = (ProtectedMethodTestBean) aop.getProxy().     assertTrue(AopUtils.isCglibProxy(proxy)).     assertEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader()).     assertEquals("foo", proxy.getString()). }
false;public;0;16;;@Test public void testPackageMethodInvocation() {     PackageMethodTestBean bean = new PackageMethodTestBean().     bean.value = "foo".     mockTargetSource.setTarget(bean).     AdvisedSupport as = new AdvisedSupport().     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     AopProxy aop = new CglibAopProxy(as).     PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy().     assertTrue(AopUtils.isCglibProxy(proxy)).     assertEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader()).     assertEquals("foo", proxy.getString()). }
false;public;0;17;;@Test public void testProxyCanBeClassNotInterface() {     TestBean raw = new TestBean().     raw.setAge(32).     mockTargetSource.setTarget(raw).     AdvisedSupport pc = new AdvisedSupport().     pc.setTargetSource(mockTargetSource).     AopProxy aop = new CglibAopProxy(pc).     Object proxy = aop.getProxy().     assertTrue(AopUtils.isCglibProxy(proxy)).     assertTrue(proxy instanceof ITestBean).     assertTrue(proxy instanceof TestBean).     TestBean tb = (TestBean) proxy.     assertEquals(32, tb.getAge()). }
false;public;0;13;;@Test public void testMethodInvocationDuringConstructor() {     CglibTestBean bean = new CglibTestBean().     bean.setName("Rob Harrop").     AdvisedSupport as = new AdvisedSupport().     as.setTarget(bean).     as.addAdvice(new NopInterceptor()).     AopProxy aop = new CglibAopProxy(as).     CglibTestBean proxy = (CglibTestBean) aop.getProxy().     assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.getName()). }
false;public;0;13;;@Test public void testToStringInvocation() {     PrivateCglibTestBean bean = new PrivateCglibTestBean().     bean.setName("Rob Harrop").     AdvisedSupport as = new AdvisedSupport().     as.setTarget(bean).     as.addAdvice(new NopInterceptor()).     AopProxy aop = new CglibAopProxy(as).     PrivateCglibTestBean proxy = (PrivateCglibTestBean) aop.getProxy().     assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.toString()). }
false;public;0;14;;@Test public void testUnadvisedProxyCreationWithCallDuringConstructor() {     CglibTestBean target = new CglibTestBean().     target.setName("Rob Harrop").     AdvisedSupport pc = new AdvisedSupport().     pc.setFrozen(true).     pc.setTarget(target).     CglibAopProxy aop = new CglibAopProxy(pc).     CglibTestBean proxy = (CglibTestBean) aop.getProxy().     assertNotNull("Proxy should not be null", proxy).     assertEquals("Constructor overrode the value of name", "Rob Harrop", proxy.getName()). }
false;public;0;13;;@Test public void testMultipleProxies() {     TestBean target = new TestBean().     target.setAge(20).     TestBean target2 = new TestBean().     target2.setAge(21).     ITestBean proxy1 = getAdvisedProxy(target).     ITestBean proxy2 = getAdvisedProxy(target2).     assertSame(proxy1.getClass(), proxy2.getClass()).     assertEquals(target.getAge(), proxy1.getAge()).     assertEquals(target2.getAge(), proxy2.getAge()). }
false;public;0;4;;@Override public ClassFilter getClassFilter() {     return ClassFilter.TRUE. }
false;public;0;4;;@Override public MethodMatcher getMethodMatcher() {     return MethodMatcher.TRUE. }
false;public;1;4;;@Override public boolean equals(Object obj) {     return true. }
false;public;0;4;;@Override public int hashCode() {     return 0. }
false;private;1;31;;private ITestBean getAdvisedProxy(TestBean target) {     ProxyFactory pf = new ProxyFactory(new Class<?>[] { ITestBean.class }).     pf.setProxyTargetClass(true).     MethodInterceptor advice = new NopInterceptor().     Pointcut pointcut = new Pointcut() {          @Override         public ClassFilter getClassFilter() {             return ClassFilter.TRUE.         }          @Override         public MethodMatcher getMethodMatcher() {             return MethodMatcher.TRUE.         }          @Override         public boolean equals(Object obj) {             return true.         }          @Override         public int hashCode() {             return 0.         }     }.     pf.addAdvisor(new DefaultPointcutAdvisor(pointcut, advice)).     pf.setTarget(target).     pf.setFrozen(true).     pf.setExposeProxy(false).     return (ITestBean) pf.getProxy(). }
false;public;0;11;;@Test public void testMultipleProxiesForIntroductionAdvisor() {     TestBean target1 = new TestBean().     target1.setAge(20).     TestBean target2 = new TestBean().     target2.setAge(21).     ITestBean proxy1 = getIntroductionAdvisorProxy(target1).     ITestBean proxy2 = getIntroductionAdvisorProxy(target2).     assertSame("Incorrect duplicate creation of proxy classes", proxy1.getClass(), proxy2.getClass()). }
false;private;1;11;;private ITestBean getIntroductionAdvisorProxy(TestBean target) {     ProxyFactory pf = new ProxyFactory(ITestBean.class).     pf.setProxyTargetClass(true).     pf.addAdvisor(new LockMixinAdvisor()).     pf.setTarget(target).     pf.setFrozen(true).     pf.setExposeProxy(false).     return (ITestBean) pf.getProxy(). }
false;public;0;14;;@Test public void testWithNoArgConstructor() {     NoArgCtorTestBean target = new NoArgCtorTestBean("b", 1).     target.reset().     mockTargetSource.setTarget(target).     AdvisedSupport pc = new AdvisedSupport().     pc.setTargetSource(mockTargetSource).     CglibAopProxy aop = new CglibAopProxy(pc).     aop.setConstructorArguments(new Object[] { "Rob Harrop", 22 }, new Class<?>[] { String.class, int.class }).     NoArgCtorTestBean proxy = (NoArgCtorTestBean) aop.getProxy().     assertNotNull(proxy). }
false;public;0;20;;@Test public void testProxyAProxy() {     ITestBean target = new TestBean().     mockTargetSource.setTarget(target).     AdvisedSupport as = new AdvisedSupport().     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     CglibAopProxy cglib = new CglibAopProxy(as).     ITestBean proxy1 = (ITestBean) cglib.getProxy().     mockTargetSource.setTarget(proxy1).     as = new AdvisedSupport(new Class<?>[] {}).     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     cglib = new CglibAopProxy(as).     assertThat(cglib.getProxy(), instanceOf(ITestBean.class)). }
false;public;0;22;;@Test public void testProxyAProxyWithAdditionalInterface() {     ITestBean target = new TestBean().     mockTargetSource.setTarget(target).     AdvisedSupport as = new AdvisedSupport().     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     as.addInterface(Serializable.class).     CglibAopProxy cglib = new CglibAopProxy(as).     ITestBean proxy1 = (ITestBean) cglib.getProxy().     mockTargetSource.setTarget(proxy1).     as = new AdvisedSupport(new Class<?>[] {}).     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     cglib = new CglibAopProxy(as).     ITestBean proxy2 = (ITestBean) cglib.getProxy().     assertTrue(proxy2 instanceof Serializable). }
false;public;0;22;;@Test public void testExceptionHandling() {     ExceptionThrower bean = new ExceptionThrower().     mockTargetSource.setTarget(bean).     AdvisedSupport as = new AdvisedSupport().     as.setTargetSource(mockTargetSource).     as.addAdvice(new NopInterceptor()).     AopProxy aop = new CglibAopProxy(as).     ExceptionThrower proxy = (ExceptionThrower) aop.getProxy().     try {         proxy.doTest().     } catch (Exception ex) {         assertTrue("Invalid exception class", ex instanceof ApplicationContextException).     }     assertTrue("Catch was not invoked", proxy.isCatchInvoked()).     assertTrue("Finally was not invoked", proxy.isFinallyInvoked()). }
false;public;0;6;;@Test @SuppressWarnings("resource") public void testWithDependencyChecking() {     ApplicationContext ctx = new ClassPathXmlApplicationContext(DEPENDENCY_CHECK_CONTEXT, getClass()).     ctx.getBean("testBean"). }
false;public;0;21;;@Test public void testAddAdviceAtRuntime() {     TestBean bean = new TestBean().     CountingBeforeAdvice cba = new CountingBeforeAdvice().     ProxyFactory pf = new ProxyFactory().     pf.setTarget(bean).     pf.setFrozen(false).     pf.setOpaque(false).     pf.setProxyTargetClass(true).     TestBean proxy = (TestBean) pf.getProxy().     assertTrue(AopUtils.isCglibProxy(proxy)).     proxy.getAge().     assertEquals(0, cba.getCalls()).     ((Advised) proxy).addAdvice(cba).     proxy.getAge().     assertEquals(1, cba.getCalls()). }
false;public;0;11;;@Test public void testProxyProtectedMethod() {     CountingBeforeAdvice advice = new CountingBeforeAdvice().     ProxyFactory proxyFactory = new ProxyFactory(new MyBean()).     proxyFactory.addAdvice(advice).     proxyFactory.setProxyTargetClass(true).     MyBean proxy = (MyBean) proxyFactory.getProxy().     assertEquals(4, proxy.add(1, 3)).     assertEquals(1, advice.getCalls("add")). }
false;public;0;6;;@Test public void testProxyTargetClassInCaseOfNoInterfaces() {     ProxyFactory proxyFactory = new ProxyFactory(new MyBean()).     MyBean proxy = (MyBean) proxyFactory.getProxy().     assertEquals(4, proxy.add(1, 3)). }
false;public;0;6;;// SPR-13328 @Test public void testVarargsWithEnumArray() {     ProxyFactory proxyFactory = new ProxyFactory(new MyBean()).     MyBean proxy = (MyBean) proxyFactory.getProxy().     assertTrue(proxy.doWithVarargs(MyEnum.A, MyOtherEnum.C)). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;protected;2;3;;protected int add(int x, int y) {     return x + y. }
false;public;1;4;;@SuppressWarnings("unchecked") public <V extends MyInterface> boolean doWithVarargs(V... args) {     return true. }
false;public;0;3;;public boolean isCatchInvoked() {     return catchInvoked. }
false;public;0;3;;public boolean isFinallyInvoked() {     return finallyInvoked. }
false;public;0;12;;public void doTest() throws Exception {     try {         throw new ApplicationContextException("foo").     } catch (Exception ex) {         catchInvoked = true.         throw ex.     } finally {         finallyInvoked = true.     } }
false;public;0;3;;public boolean wasCalled() {     return called. }
false;public;0;3;;public void reset() {     called = false. }
false;protected;0;3;;protected String getString() {     return this.value. }
false;;0;3;;String getString() {     return this.value. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;4;;@Override public String toString() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;4;;@Override public String toString() {     return this.name. }
false;public;1;4;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     throw new UnsupportedOperationException(mi.getMethod().getName()). }
