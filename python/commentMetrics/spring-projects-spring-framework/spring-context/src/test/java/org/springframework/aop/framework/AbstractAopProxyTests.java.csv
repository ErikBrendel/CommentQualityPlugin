# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1356735495;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1362408075;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1368482696;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1384168190;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1391876651;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1413848647;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1441730087;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1450827071;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1458843770;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1467730834;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1467846264;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1496242568;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1518279448;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1523443675;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1530174524;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1542613849;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Class<?> getTargetClass();1544700571;@see org.springframework.aop.TargetSource#getTargetClass();@Override_		public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;override,public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1356735495;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1362408075;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1368482696;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1384168190;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1391876651;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1413848647;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1441730087;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1450827071;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1458843770;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1467730834;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1467846264;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1496242568;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1518279448;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1523443675;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1530174524;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1542613849;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> @Override 		public boolean isStatic();1544700571;@see org.springframework.aop.TargetSource#isStatic();@Override_		public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;override,public,boolean,is,static,return,false
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1328020251;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1344552803;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1354227248;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1356735495;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1362408075;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1368482696;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1384168190;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1391876651;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1413848647;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1441730087;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(new Class<?>[] {ITestBean.class})__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,new,class,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1450827071;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1458843770;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1467730834;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1467846264;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1496242568;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1518279448;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1523443675;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1530174524;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1542613849;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testMixinWithIntroductionAdvisor() throws Throwable;1544700571;Test stateful interceptor;@Test_	public void testMixinWithIntroductionAdvisor() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory()__		pc.addInterface(ITestBean.class)__		pc.addAdvisor(new LockMixinAdvisor())__		pc.setTarget(tb)___		testTestBeanIntroduction(pc)__	};test,stateful,interceptor;test,public,void,test,mixin,with,introduction,advisor,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,pc,add,interface,itest,bean,class,pc,add,advisor,new,lock,mixin,advisor,pc,set,target,tb,test,test,bean,introduction,pc
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1328020251;Test that the proxy returns itself when the_target returns <code>this</code>;@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this,code;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1344552803;Test that the proxy returns itself when the_target returns <code>this</code>;@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this,code;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1354227248;Test that the proxy returns itself when the_target returns <code>this</code>;@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this,code;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1356735495;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1362408075;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1368482696;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1384168190;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1391876651;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1413848647;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertTrue("this return is wrapped in proxy", tb.getSpouse() == tb)__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,true,this,return,is,wrapped,in,proxy,tb,get,spouse,tb
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1441730087;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1450827071;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1458843770;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1467730834;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1467846264;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1496242568;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1518279448;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,new,class,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1523443675;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(ITestBean.class)__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1530174524;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(ITestBean.class)__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1542613849;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(ITestBean.class)__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testTargetReturnsThis() throws Throwable;1544700571;Test that the proxy returns itself when the_target returns {@code this};@Test_	public void testTargetReturnsThis() throws Throwable {_		_		TestBean raw = new OwnSpouse()___		ProxyCreatorSupport pc = new ProxyCreatorSupport()__		pc.setInterfaces(ITestBean.class)__		pc.setTarget(raw)___		ITestBean tb = (ITestBean) createProxy(pc)__		assertSame("this return is wrapped in proxy", tb, tb.getSpouse())__	};test,that,the,proxy,returns,itself,when,the,target,returns,code,this;test,public,void,test,target,returns,this,throws,throwable,test,bean,raw,new,own,spouse,proxy,creator,support,pc,new,proxy,creator,support,pc,set,interfaces,itest,bean,class,pc,set,target,raw,itest,bean,tb,itest,bean,create,proxy,pc,assert,same,this,return,is,wrapped,in,proxy,tb,tb,get,spouse
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1328020251;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1344552803;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1354227248;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1356735495;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1362408075;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1368482696;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1384168190;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1391876651;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1413848647;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1441730087;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1450827071;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1458843770;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1467730834;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1467846264;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1496242568;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1518279448;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1523443675;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1530174524;Note that an introduction can't throw an unexpected checked exception,_as it's constained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1542613849;Note that an introduction can't throw an unexpected checked exception,_as it's constrained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constrained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable;1544700571;Note that an introduction can't throw an unexpected checked exception,_as it's constrained by the interface.;@Test_	public void testIntroductionThrowsUncheckedException() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)___		@SuppressWarnings("serial")_		class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped {_			_			@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			}_		}_		pc.addAdvisor(new DefaultIntroductionAdvisor(new MyDi()))___		TimeStamped ts = (TimeStamped) createProxy(pc)__		try {_			ts.getTimeStamp()__			fail("Should throw UnsupportedOperationException")__		}_		catch (UnsupportedOperationException ex) {_		}_	};note,that,an,introduction,can,t,throw,an,unexpected,checked,exception,as,it,s,constrained,by,the,interface;test,public,void,test,introduction,throws,unchecked,exception,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,suppress,warnings,serial,class,my,di,extends,delegating,introduction,interceptor,implements,time,stamped,override,public,long,get,time,stamp,throw,new,unsupported,operation,exception,pc,add,advisor,new,default,introduction,advisor,new,my,di,time,stamped,ts,time,stamped,create,proxy,pc,try,ts,get,time,stamp,fail,should,throw,unsupported,operation,exception,catch,unsupported,operation,exception,ex
AbstractAopProxyTests -> protected boolean requiresTarget();1328020251;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1344552803;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1354227248;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1356735495;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1362408075;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1368482696;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1384168190;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1391876651;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1413848647;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1441730087;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1450827071;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1458843770;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1467730834;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1467846264;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1496242568;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1518279448;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1523443675;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1530174524;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1542613849;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> protected boolean requiresTarget();1544700571;Is a target always required?;protected boolean requiresTarget() {_		return false__	};is,a,target,always,required;protected,boolean,requires,target,return,false
AbstractAopProxyTests -> @Test 	public void testValuesStick();1328020251;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1344552803;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1354227248;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1356735495;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1362408075;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1368482696;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1384168190;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1391876651;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1413848647;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1441730087;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1450827071;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1458843770;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1467730834;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1467846264;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1496242568;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1518279448;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1523443675;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1530174524;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1542613849;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testValuesStick();1544700571;Simple test that if we set values we can get them out again.;@Test_	public void testValuesStick() {_		int age1 = 33__		int age2 = 37__		String name = "tony"___		TestBean target1 = new TestBean()__		target1.setAge(age1)__		ProxyFactory pf1 = new ProxyFactory(target1)__		pf1.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__		pf1.addAdvisor(new DefaultPointcutAdvisor(new TimestampIntroductionInterceptor()))__		ITestBean tb = (ITestBean) pf1.getProxy()___		assertEquals(age1, tb.getAge())__		tb.setAge(age2)__		assertEquals(age2, tb.getAge())__		assertNull(tb.getName())__		tb.setName(name)__		assertEquals(name, tb.getName())__	};simple,test,that,if,we,set,values,we,can,get,them,out,again;test,public,void,test,values,stick,int,age1,33,int,age2,37,string,name,tony,test,bean,target1,new,test,bean,target1,set,age,age1,proxy,factory,pf1,new,proxy,factory,target1,pf1,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,pf1,add,advisor,new,default,pointcut,advisor,new,timestamp,introduction,interceptor,itest,bean,tb,itest,bean,pf1,get,proxy,assert,equals,age1,tb,get,age,tb,set,age,age2,assert,equals,age2,tb,get,age,assert,null,tb,get,name,tb,set,name,name,assert,equals,name,tb,get,name
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1328020251;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1344552803;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1354227248;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1356735495;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1362408075;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1368482696;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1384168190;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1391876651;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1413848647;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		_		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1441730087;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1450827071;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1458843770;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1467730834;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1467846264;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1496242568;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1518279448;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1523443675;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1530174524;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1542613849;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> @Test 	public void testOneAdvisedObjectCallsAnother();1544700571;Check that the two MethodInvocations necessary are independent and_don't conflict._Check also proxy exposure.;@Test_	public void testOneAdvisedObjectCallsAnother() {_		int age1 = 33__		int age2 = 37___		TestBean target1 = new TestBean()__		ProxyFactory pf1 = new ProxyFactory(target1)__		_		pf1.setExposeProxy(true)__		NopInterceptor di1 = new NopInterceptor()__		pf1.addAdvice(0, di1)__		pf1.addAdvice(1, new ProxyMatcherInterceptor())__		pf1.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf1.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		_		pf1.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised1 = (ITestBean) pf1.getProxy()__		advised1.setAge(age1)_ __		TestBean target2 = new TestBean()__		ProxyFactory pf2 = new ProxyFactory(target2)__		pf2.setExposeProxy(true)__		NopInterceptor di2 = new NopInterceptor()__		pf2.addAdvice(0, di2)__		pf2.addAdvice(1, new ProxyMatcherInterceptor())__		pf2.addAdvice(2, new CheckMethodInvocationIsSameInAndOutInterceptor())__		pf2.addAdvice(1, new CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor())__		pf2.addAdvice(0, ExposeInvocationInterceptor.INSTANCE)__		ITestBean advised2 = (ITestBean) createProxy(pf2)__		advised2.setAge(age2)__		advised1.setSpouse(advised2)_ __		assertEquals("Advised one has correct age", age1, advised1.getAge())_ _		assertEquals("Advised two has correct age", age2, advised2.getAge())__		_		assertEquals("Advised one spouse has correct age", age2, advised1.getSpouse().getAge())_ __		assertEquals("one was invoked correct number of times", 4, di1.getCount())__		_		assertEquals("one was invoked correct number of times", 3, di2.getCount())__	};check,that,the,two,method,invocations,necessary,are,independent,and,don,t,conflict,check,also,proxy,exposure;test,public,void,test,one,advised,object,calls,another,int,age1,33,int,age2,37,test,bean,target1,new,test,bean,proxy,factory,pf1,new,proxy,factory,target1,pf1,set,expose,proxy,true,nop,interceptor,di1,new,nop,interceptor,pf1,add,advice,0,di1,pf1,add,advice,1,new,proxy,matcher,interceptor,pf1,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf1,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf1,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised1,itest,bean,pf1,get,proxy,advised1,set,age,age1,test,bean,target2,new,test,bean,proxy,factory,pf2,new,proxy,factory,target2,pf2,set,expose,proxy,true,nop,interceptor,di2,new,nop,interceptor,pf2,add,advice,0,di2,pf2,add,advice,1,new,proxy,matcher,interceptor,pf2,add,advice,2,new,check,method,invocation,is,same,in,and,out,interceptor,pf2,add,advice,1,new,check,method,invocation,via,thread,local,is,same,in,and,out,interceptor,pf2,add,advice,0,expose,invocation,interceptor,instance,itest,bean,advised2,itest,bean,create,proxy,pf2,advised2,set,age,age2,advised1,set,spouse,advised2,assert,equals,advised,one,has,correct,age,age1,advised1,get,age,assert,equals,advised,two,has,correct,age,age2,advised2,get,age,assert,equals,advised,one,spouse,has,correct,age,age2,advised1,get,spouse,get,age,assert,equals,one,was,invoked,correct,number,of,times,4,di1,get,count,assert,equals,one,was,invoked,correct,number,of,times,3,di2,get,count
AbstractAopProxyTests -> private void assertNoInvocationContext();1328020251;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1344552803;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1354227248;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1356735495;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1362408075;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1368482696;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1384168190;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1391876651;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1413848647;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1441730087;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1450827071;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1458843770;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1467730834;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1467846264;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1496242568;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1518279448;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1523443675;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1530174524;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1542613849;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> private void assertNoInvocationContext();1544700571;Throw an exception if there is an Invocation.;private void assertNoInvocationContext() {_		try {_			ExposeInvocationInterceptor.currentInvocation()__			fail("Expected no invocation context")__		}_		catch (IllegalStateException ex) {_			_		}_	};throw,an,exception,if,there,is,an,invocation;private,void,assert,no,invocation,context,try,expose,invocation,interceptor,current,invocation,fail,expected,no,invocation,context,catch,illegal,state,exception,ex
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> public long getTimeStamp();1328020251;@see test.util.TimeStamped#getTimeStamp();public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> public long getTimeStamp();1344552803;@see test.util.TimeStamped#getTimeStamp();public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> public long getTimeStamp();1354227248;@see test.util.TimeStamped#getTimeStamp();public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1328020251;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1344552803;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1354227248;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1356735495;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1362408075;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1368482696;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1384168190;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1391876651;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1413848647;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1441730087;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().indexOf("frozen") > -1)__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,index,of,frozen,1,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1450827071;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1458843770;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1467730834;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1467846264;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1496242568;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1518279448;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1523443675;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1530174524;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1542613849;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable;1544700571;Check that casting to Advised can't get around advice freeze.;@Test_	public void testCannotAddAdvisorWhenFrozenUsingCast() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		assertFalse(pc.isFrozen())__		pc.addAdvice(new NopInterceptor())__		ITestBean proxied = (ITestBean) createProxy(pc)__		pc.setFrozen(true)__		Advised advised = (Advised) proxied___		assertTrue(pc.isFrozen())__		try {_			advised.addAdvisor(new DefaultPointcutAdvisor(new NopInterceptor()))__			fail("Shouldn't be able to add Advisor when frozen")__		}_		catch (AopConfigException ex) {_			assertTrue(ex.getMessage().contains("frozen"))__		}_		_		assertEquals(target.getAge(), proxied.getAge())__		assertEquals(1, advised.getAdvisors().length)__	};check,that,casting,to,advised,can,t,get,around,advice,freeze;test,public,void,test,cannot,add,advisor,when,frozen,using,cast,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,assert,false,pc,is,frozen,pc,add,advice,new,nop,interceptor,itest,bean,proxied,itest,bean,create,proxy,pc,pc,set,frozen,true,advised,advised,advised,proxied,assert,true,pc,is,frozen,try,advised,add,advisor,new,default,pointcut,advisor,new,nop,interceptor,fail,shouldn,t,be,able,to,add,advisor,when,frozen,catch,aop,config,exception,ex,assert,true,ex,get,message,contains,frozen,assert,equals,target,get,age,proxied,get,age,assert,equals,1,advised,get,advisors,length
AbstractAopProxyTests -> @Test 	public void testManyProxies();1328020251;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1344552803;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1354227248;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1356735495;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1362408075;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1368482696;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1384168190;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1391876651;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1413848647;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		System.out.println(sw.getTotalTimeMillis())__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,system,out,println,sw,get,total,time,millis,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1441730087;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1450827071;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1458843770;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1467730834;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1467846264;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1496242568;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1518279448;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1523443675;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1530174524;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1542613849;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Test 	public void testManyProxies();1544700571;This is primarily a test for the efficiency of our_usage of CGLIB. If we create too many classes with_CGLIB this will be slow or will run out of memory.;@Test_	public void testManyProxies() {_		Assume.group(TestGroup.PERFORMANCE)__		int howMany = 10000__		StopWatch sw = new StopWatch()__		sw.start("Create " + howMany + " proxies")__		testManyProxies(howMany)__		sw.stop()__		assertTrue("Proxy creation was too slow",  sw.getTotalTimeMillis() < 5000)__	};this,is,primarily,a,test,for,the,efficiency,of,our,usage,of,cglib,if,we,create,too,many,classes,with,cglib,this,will,be,slow,or,will,run,out,of,memory;test,public,void,test,many,proxies,assume,group,test,group,performance,int,how,many,10000,stop,watch,sw,new,stop,watch,sw,start,create,how,many,proxies,test,many,proxies,how,many,sw,stop,assert,true,proxy,creation,was,too,slow,sw,get,total,time,millis,5000
AbstractAopProxyTests -> @Before 	public void setUp();1328020251;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1344552803;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1354227248;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1356735495;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1362408075;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1368482696;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1384168190;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1391876651;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1413848647;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1441730087;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1450827071;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1458843770;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1467730834;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1467846264;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1496242568;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1518279448;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1523443675;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1530174524;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1542613849;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> @Before 	public void setUp();1544700571;Make a clean target source available if code wants to use it._The target must be set. Verification will be automatic in tearDown_to ensure that it was used appropriately by code.;@Before_	public void setUp() {_		mockTargetSource.reset()__	};make,a,clean,target,source,available,if,code,wants,to,use,it,the,target,must,be,set,verification,will,be,automatic,in,tear,down,to,ensure,that,it,was,used,appropriately,by,code;before,public,void,set,up,mock,target,source,reset
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1328020251;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1344552803;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1354227248;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1356735495;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1362408075;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1368482696;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1384168190;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1391876651;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1413848647;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertTrue("have context", ExposeInvocationInterceptor.currentInvocation() != null)__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertTrue("correct return value", tb.getName() == s)__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,true,have,context,expose,invocation,interceptor,current,invocation,null,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,true,correct,return,value,tb,get,name,s
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1441730087;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,new,class,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1450827071;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				} else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1458843770;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1467730834;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1467846264;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1496242568;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1518279448;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1523443675;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1530174524;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1542613849;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> private void testContext(final boolean context) throws Throwable;1544700571;@param context if true, want context;private void testContext(final boolean context) throws Throwable {_		final String s = "foo"__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				if (!context) {_					assertNoInvocationContext()__				}_				else {_					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation())__				}_				return s__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		if (context) {_			pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		}_		pc.addAdvice(mi)__		_		if (requiresTarget()) {_			pc.setTarget(new TestBean())__		}_		AopProxy aop = createAopProxy(pc)___		assertNoInvocationContext()__		ITestBean tb = (ITestBean) aop.getProxy()__		assertNoInvocationContext()__		assertSame("correct return value", s, tb.getName())__	};param,context,if,true,want,context;private,void,test,context,final,boolean,context,throws,throwable,final,string,s,foo,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,if,context,assert,no,invocation,context,else,assert,not,null,have,context,expose,invocation,interceptor,current,invocation,return,s,advised,support,pc,new,advised,support,itest,bean,class,if,context,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,if,requires,target,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,assert,no,invocation,context,itest,bean,tb,itest,bean,aop,get,proxy,assert,no,invocation,context,assert,same,correct,return,value,s,tb,get,name
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1356735495;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1362408075;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1368482696;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1384168190;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1391876651;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1413848647;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1441730087;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1450827071;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1458843770;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1467730834;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1467846264;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1496242568;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1518279448;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1523443675;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1530174524;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1542613849;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> @Override 		public void releaseTarget(Object pTarget) throws Exception;1544700571;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);@Override_		public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;override,public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1328020251;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_net.sf.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		_		_		_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,net,sf,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1344552803;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1354227248;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1356735495;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1362408075;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1368482696;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1384168190;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1391876651;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1413848647;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1441730087;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {ITestBean.class})__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,new,class,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1450827071;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1458843770;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1467730834;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1467846264;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1496242568;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1518279448;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1523443675;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1530174524;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1542613849;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> @Test 	public void testUndeclaredCheckedException() throws Throwable;1544700571;An interceptor throws a checked exception not on the method signature._For efficiency, we don't bother unifying java.lang.reflect and_org.springframework.cglib UndeclaredThrowableException;@Test_	public void testUndeclaredCheckedException() throws Throwable {_		final Exception unexpectedException = new Exception()__		_		MethodInterceptor mi = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation invocation) throws Throwable {_				throw unexpectedException__			}_		}__		AdvisedSupport pc = new AdvisedSupport(ITestBean.class)__		pc.addAdvice(ExposeInvocationInterceptor.INSTANCE)__		pc.addAdvice(mi)___		_		pc.setTarget(new TestBean())__		AopProxy aop = createAopProxy(pc)__		ITestBean tb = (ITestBean) aop.getProxy()___		try {_			_			tb.getAge()__			fail("Should have wrapped exception raised by interceptor")__		}_		catch (UndeclaredThrowableException thrown) {_			assertEquals("exception matches", unexpectedException, thrown.getUndeclaredThrowable())__		}_		catch (Exception ex) {_			ex.printStackTrace()__			fail("Didn't expect exception: " + ex)__		}_	};an,interceptor,throws,a,checked,exception,not,on,the,method,signature,for,efficiency,we,don,t,bother,unifying,java,lang,reflect,and,org,springframework,cglib,undeclared,throwable,exception;test,public,void,test,undeclared,checked,exception,throws,throwable,final,exception,unexpected,exception,new,exception,method,interceptor,mi,new,method,interceptor,override,public,object,invoke,method,invocation,invocation,throws,throwable,throw,unexpected,exception,advised,support,pc,new,advised,support,itest,bean,class,pc,add,advice,expose,invocation,interceptor,instance,pc,add,advice,mi,pc,set,target,new,test,bean,aop,proxy,aop,create,aop,proxy,pc,itest,bean,tb,itest,bean,aop,get,proxy,try,tb,get,age,fail,should,have,wrapped,exception,raised,by,interceptor,catch,undeclared,throwable,exception,thrown,assert,equals,exception,matches,unexpected,exception,thrown,get,undeclared,throwable,catch,exception,ex,ex,print,stack,trace,fail,didn,t,expect,exception,ex
AbstractAopProxyTests -> MockTargetSource -> public boolean isStatic();1328020251;@see org.springframework.aop.TargetSource#isStatic();public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> public boolean isStatic();1344552803;@see org.springframework.aop.TargetSource#isStatic();public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;public,boolean,is,static,return,false
AbstractAopProxyTests -> MockTargetSource -> public boolean isStatic();1354227248;@see org.springframework.aop.TargetSource#isStatic();public boolean isStatic() {_			return false__		};see,org,springframework,aop,target,source,is,static;public,boolean,is,static,return,false
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1328020251;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1344552803;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1354227248;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1356735495;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1362408075;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1368482696;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1384168190;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1391876651;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1413848647;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1441730087;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1450827071;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1458843770;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1467730834;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1467846264;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1496242568;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1518279448;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1523443675;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1530174524;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1542613849;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable;1544700571;Check that the introduction advice isn't allowed to introduce interfaces_that are unsupported by the IntroductionInterceptor.;@Test_	public void testCannotAddIntroductionAdviceWithUnimplementedInterface() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), ITestBean.class))__			fail("Shouldn't be able to add introduction advice introducing an unimplemented interface")__		}_		catch (IllegalArgumentException ex) {_			_		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};check,that,the,introduction,advice,isn,t,allowed,to,introduce,interfaces,that,are,unsupported,by,the,introduction,interceptor;test,public,void,test,cannot,add,introduction,advice,with,unimplemented,interface,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,itest,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,introducing,an,unimplemented,interface,catch,illegal,argument,exception,ex,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> MockTargetSource -> public void releaseTarget(Object pTarget) throws Exception;1328020251;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> public void releaseTarget(Object pTarget) throws Exception;1344552803;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> MockTargetSource -> public void releaseTarget(Object pTarget) throws Exception;1354227248;@see org.springframework.aop.TargetSource#releaseTarget(java.lang.Object);public void releaseTarget(Object pTarget) throws Exception {_			if (pTarget != this.target)_				throw new RuntimeException("Released wrong target")__			++releases__		};see,org,springframework,aop,target,source,release,target,java,lang,object;public,void,release,target,object,p,target,throws,exception,if,p,target,this,target,throw,new,runtime,exception,released,wrong,target,releases
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1328020251;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1344552803;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1354227248;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1356735495;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1362408075;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1368482696;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1384168190;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1391876651;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1413848647;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1441730087;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1450827071;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1458843770;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1467730834;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1467846264;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1496242568;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1518279448;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1523443675;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1530174524;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1542613849;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> protected abstract Object createProxy(ProxyCreatorSupport as)_;1544700571;Set in CGLIB or JDK mode.;protected abstract Object createProxy(ProxyCreatorSupport as)_;set,in,cglib,or,jdk,mode;protected,abstract,object,create,proxy,proxy,creator,support,as
AbstractAopProxyTests -> MockTargetSource -> public Class<?> getTargetClass();1328020251;@see org.springframework.aop.TargetSource#getTargetClass();public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> public Class<?> getTargetClass();1344552803;@see org.springframework.aop.TargetSource#getTargetClass();public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> public Class<?> getTargetClass();1354227248;@see org.springframework.aop.TargetSource#getTargetClass();public Class<?> getTargetClass() {_			return target.getClass()__		};see,org,springframework,aop,target,source,get,target,class;public,class,get,target,class,return,target,get,class
AbstractAopProxyTests -> MockTargetSource -> public Object getTarget() throws Exception;1328020251;@see org.springframework.aop.TargetSource#getTarget();public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> public Object getTarget() throws Exception;1344552803;@see org.springframework.aop.TargetSource#getTarget();public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> public Object getTarget() throws Exception;1354227248;@see org.springframework.aop.TargetSource#getTarget();public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1356735495;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1362408075;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1368482696;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1384168190;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1391876651;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1413848647;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1441730087;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1450827071;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1458843770;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1467730834;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1467846264;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1496242568;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1518279448;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1523443675;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1530174524;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1542613849;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testIntroductionThrowsUncheckedException() throws Throwable -> MyDi -> @Override 			public long getTimeStamp();1544700571;@see test.util.TimeStamped#getTimeStamp();@Override_			public long getTimeStamp() {_				throw new UnsupportedOperationException()__			};see,test,util,time,stamped,get,time,stamp;override,public,long,get,time,stamp,throw,new,unsupported,operation,exception
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1328020251;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1344552803;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1354227248;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1356735495;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1362408075;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1368482696;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1384168190;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1391876651;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1413848647;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1441730087;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1450827071;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1458843770;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1467730834;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1467846264;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1496242568;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, @Nullable Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,nullable,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1518279448;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, @Nullable Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,nullable,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1523443675;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, @Nullable Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,nullable,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1530174524;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, @Nullable Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,nullable,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1542613849;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, @Nullable Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,nullable,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCloneInvocationToProceedThreeTimes() throws Throwable;1544700571;There are times when we want to call proceed() twice._We can do this if we clone the invocation.;@Test_	public void testCloneInvocationToProceedThreeTimes() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		MethodInterceptor twoBirthdayInterceptor = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				_				_				MethodInvocation clone1 = ((ReflectiveMethodInvocation) mi).invocableClone()__				MethodInvocation clone2 = ((ReflectiveMethodInvocation) mi).invocableClone()__				clone1.proceed()__				clone2.proceed()__				return mi.proceed()__			}_		}__		@SuppressWarnings("serial")_		StaticMethodMatcherPointcutAdvisor advisor = new StaticMethodMatcherPointcutAdvisor(twoBirthdayInterceptor) {_			@Override_			public boolean matches(Method m, @Nullable Class<?> targetClass) {_				return "haveBirthday".equals(m.getName())__			}_		}__		pc.addAdvisor(advisor)__		ITestBean it = (ITestBean) createProxy(pc)___		final int age = 20__		it.setAge(age)__		assertEquals(age, it.getAge())__		_		assertEquals(age + 2, it.haveBirthday())__		_		assertEquals(age + 3, it.getAge())__	};there,are,times,when,we,want,to,call,proceed,twice,we,can,do,this,if,we,clone,the,invocation;test,public,void,test,clone,invocation,to,proceed,three,times,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,two,birthday,interceptor,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone1,reflective,method,invocation,mi,invocable,clone,method,invocation,clone2,reflective,method,invocation,mi,invocable,clone,clone1,proceed,clone2,proceed,return,mi,proceed,suppress,warnings,serial,static,method,matcher,pointcut,advisor,advisor,new,static,method,matcher,pointcut,advisor,two,birthday,interceptor,override,public,boolean,matches,method,m,nullable,class,target,class,return,have,birthday,equals,m,get,name,pc,add,advisor,advisor,itest,bean,it,itest,bean,create,proxy,pc,final,int,age,20,it,set,age,age,assert,equals,age,it,get,age,assert,equals,age,2,it,have,birthday,assert,equals,age,3,it,get,age
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1328020251;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1344552803;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1354227248;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1356735495;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1362408075;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1368482696;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1384168190;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1391876651;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1413848647;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1441730087;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1450827071;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1458843770;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<Object>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,object,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1467730834;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1467846264;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1496242568;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1518279448;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1523443675;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1530174524;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1542613849;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> @Test 	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable;1544700571;We want to change the arguments on a clone: it shouldn't affect the original.;@Test_	public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable {_		TestBean tb = new TestBean()__		ProxyFactory pc = new ProxyFactory(tb)__		pc.addInterface(ITestBean.class)___		_		MethodInterceptor nameReverter = new MethodInterceptor() {_			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()__				String oldName = ((ITestBean) mi.getThis()).getName()__				clone.getArguments()[0] = oldName__				_				mi.proceed()__				return clone.proceed()__			}_		}___		class NameSaver implements MethodInterceptor {_			private List<Object> names = new LinkedList<>()___			@Override_			public Object invoke(MethodInvocation mi) throws Throwable {_				names.add(mi.getArguments()[0])__				return mi.proceed()__			}_		}__		NameSaver saver = new NameSaver()___		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))__		pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))__		ITestBean it = (ITestBean) createProxy(pc)___		String name1 = "tony"__		String name2 = "gordon"___		tb.setName(name1)__		assertEquals(name1, tb.getName())___		it.setName(name2)__		_		assertEquals(name1, it.getName())__		assertEquals(2, saver.names.size())__		assertEquals(name2, saver.names.get(0))__		assertEquals(name1, saver.names.get(1))__	};we,want,to,change,the,arguments,on,a,clone,it,shouldn,t,affect,the,original;test,public,void,test,can,change,arguments,independently,on,cloned,invocation,throws,throwable,test,bean,tb,new,test,bean,proxy,factory,pc,new,proxy,factory,tb,pc,add,interface,itest,bean,class,method,interceptor,name,reverter,new,method,interceptor,override,public,object,invoke,method,invocation,mi,throws,throwable,method,invocation,clone,reflective,method,invocation,mi,invocable,clone,string,old,name,itest,bean,mi,get,this,get,name,clone,get,arguments,0,old,name,mi,proceed,return,clone,proceed,class,name,saver,implements,method,interceptor,private,list,object,names,new,linked,list,override,public,object,invoke,method,invocation,mi,throws,throwable,names,add,mi,get,arguments,0,return,mi,proceed,name,saver,saver,new,name,saver,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,name,reverter,pc,add,advisor,new,default,pointcut,advisor,pointcuts,setters,saver,itest,bean,it,itest,bean,create,proxy,pc,string,name1,tony,string,name2,gordon,tb,set,name,name1,assert,equals,name1,tb,get,name,it,set,name,name2,assert,equals,name1,it,get,name,assert,equals,2,saver,names,size,assert,equals,name2,saver,names,get,0,assert,equals,name1,saver,names,get,1
AbstractAopProxyTests -> MockTargetSource -> public void verify();1328020251;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1344552803;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1354227248;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1356735495;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1362408075;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1368482696;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1384168190;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1391876651;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1413848647;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1441730087;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1450827071;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1458843770;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1467730834;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1467846264;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1496242568;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1518279448;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1523443675;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1530174524;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1542613849;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> MockTargetSource -> public void verify();1544700571;Check that gets and releases match;public void verify() {_			if (gets != releases)_				throw new RuntimeException("Expectation failed: " + gets + " gets and " + releases + " releases")__		};check,that,gets,and,releases,match;public,void,verify,if,gets,releases,throw,new,runtime,exception,expectation,failed,gets,gets,and,releases,releases
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1328020251;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1344552803;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1354227248;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1356735495;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1362408075;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1368482696;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1384168190;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1391876651;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1413848647;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1441730087;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(new Class<?>[] {INeedsToSeeProxy.class})__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,new,class,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1450827071;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1458843770;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1467730834;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1467846264;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1496242568;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1518279448;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1523443675;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1530174524;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1542613849;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable;1544700571;Check that although a method is eligible for advice chain optimization and_direct reflective invocation, it doesn't happen if we've asked to see the proxy,_so as to guarantee a consistent programming model._@throws Throwable;@Test_	public void testTargetCanGetInvocationEvenIfNoAdviceChain() throws Throwable {_		NeedsToSeeProxy target = new NeedsToSeeProxy()__		AdvisedSupport pc = new AdvisedSupport(INeedsToSeeProxy.class)__		pc.setTarget(target)__		pc.setExposeProxy(true)___		_		AopProxy aop = createAopProxy(pc)__		INeedsToSeeProxy proxied = (INeedsToSeeProxy) aop.getProxy()__		_		proxied.incrementViaProxy()__	};check,that,although,a,method,is,eligible,for,advice,chain,optimization,and,direct,reflective,invocation,it,doesn,t,happen,if,we,ve,asked,to,see,the,proxy,so,as,to,guarantee,a,consistent,programming,model,throws,throwable;test,public,void,test,target,can,get,invocation,even,if,no,advice,chain,throws,throwable,needs,to,see,proxy,target,new,needs,to,see,proxy,advised,support,pc,new,advised,support,ineeds,to,see,proxy,class,pc,set,target,target,pc,set,expose,proxy,true,aop,proxy,aop,create,aop,proxy,pc,ineeds,to,see,proxy,proxied,ineeds,to,see,proxy,aop,get,proxy,proxied,increment,via,proxy
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1328020251;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1344552803;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1354227248;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1356735495;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1362408075;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1368482696;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1384168190;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1391876651;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1413848647;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1441730087;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().indexOf("interface") > -1)__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,index,of,interface,1,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1450827071;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1458843770;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1467730834;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1467846264;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1496242568;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1518279448;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1523443675;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1530174524;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1542613849;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable;1544700571;Should only be able to introduce interfaces, not classes.;@Test_	public void testCannotAddIntroductionAdviceToIntroduceClass() throws Throwable {_		TestBean target = new TestBean()__		target.setAge(21)__		ProxyFactory pc = new ProxyFactory(target)__		try {_			pc.addAdvisor(0, new DefaultIntroductionAdvisor(new TimestampIntroductionInterceptor(), TestBean.class))__			fail("Shouldn't be able to add introduction advice that introduces a class, rather than an interface")__		}_		catch (IllegalArgumentException ex) {_			assertTrue(ex.getMessage().contains("interface"))__		}_		_		ITestBean proxied = (ITestBean) createProxy(pc)__		assertEquals(target.getAge(), proxied.getAge())__	};should,only,be,able,to,introduce,interfaces,not,classes;test,public,void,test,cannot,add,introduction,advice,to,introduce,class,throws,throwable,test,bean,target,new,test,bean,target,set,age,21,proxy,factory,pc,new,proxy,factory,target,try,pc,add,advisor,0,new,default,introduction,advisor,new,timestamp,introduction,interceptor,test,bean,class,fail,shouldn,t,be,able,to,add,introduction,advice,that,introduces,a,class,rather,than,an,interface,catch,illegal,argument,exception,ex,assert,true,ex,get,message,contains,interface,itest,bean,proxied,itest,bean,create,proxy,pc,assert,equals,target,get,age,proxied,get,age
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1328020251;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1344552803;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1354227248;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1356735495;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1362408075;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1368482696;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1384168190;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1391876651;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1413848647;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1441730087;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(new Class<?>[] {ITestBean.class})__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.indexOf(advisor.toString()) != -1)__		assertTrue(proxyConfigString.indexOf("1 interface") != -1)__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,new,class,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,index,of,advisor,to,string,1,assert,true,proxy,config,string,index,of,1,interface,1
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1450827071;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1458843770;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1467730834;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1467846264;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1496242568;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1518279448;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1523443675;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1530174524;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1542613849;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> @Test 	public void testProxyConfigString();1544700571;Check that the string is informative.;@Test_	public void testProxyConfigString() {_		TestBean target = new TestBean()__		ProxyFactory pc = new ProxyFactory(target)__		pc.setInterfaces(ITestBean.class)__		pc.addAdvice(new NopInterceptor())__		MethodBeforeAdvice mba = new CountingBeforeAdvice()__		Advisor advisor = new DefaultPointcutAdvisor(new NameMatchMethodPointcut(), mba)__		pc.addAdvisor(advisor)__		ITestBean proxied = (ITestBean) createProxy(pc)___		String proxyConfigString = ((Advised) proxied).toProxyConfigString()__		assertTrue(proxyConfigString.contains(advisor.toString()))__		assertTrue(proxyConfigString.contains("1 interface"))__	};check,that,the,string,is,informative;test,public,void,test,proxy,config,string,test,bean,target,new,test,bean,proxy,factory,pc,new,proxy,factory,target,pc,set,interfaces,itest,bean,class,pc,add,advice,new,nop,interceptor,method,before,advice,mba,new,counting,before,advice,advisor,advisor,new,default,pointcut,advisor,new,name,match,method,pointcut,mba,pc,add,advisor,advisor,itest,bean,proxied,itest,bean,create,proxy,pc,string,proxy,config,string,advised,proxied,to,proxy,config,string,assert,true,proxy,config,string,contains,advisor,to,string,assert,true,proxy,config,string,contains,1,interface
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1356735495;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1362408075;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1368482696;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1384168190;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1391876651;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1413848647;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1441730087;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1450827071;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1458843770;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1467730834;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1467846264;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1496242568;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1518279448;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1523443675;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1530174524;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1542613849;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
AbstractAopProxyTests -> MockTargetSource -> @Override 		public Object getTarget() throws Exception;1544700571;@see org.springframework.aop.TargetSource#getTarget();@Override_		public Object getTarget() throws Exception {_			++gets__			return target__		};see,org,springframework,aop,target,source,get,target;override,public,object,get,target,throws,exception,gets,return,target
