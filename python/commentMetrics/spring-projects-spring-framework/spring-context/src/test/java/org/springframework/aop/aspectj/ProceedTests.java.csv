commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     testBean = (SimpleBean) ctx.getBean("testBean").     firstTestAspect = (ProceedTestingAspect) ctx.getBean("firstTestAspect").     secondTestAspect = (ProceedTestingAspect) ctx.getBean("secondTestAspect"). }
false;public;0;5;;@Test public void testSimpleProceedWithChangedArgs() {     this.testBean.setName("abc").     assertEquals("Name changed in around advice", "ABC", this.testBean.getName()). }
false;public;0;5;;@Test public void testGetArgsIsDefensive() {     this.testBean.setAge(5).     assertEquals("getArgs is defensive", 5, this.testBean.getAge()). }
false;public;0;6;;@Test public void testProceedWithArgsInSameAspect() {     this.testBean.setMyFloat(1.0F).     assertTrue("value changed in around advice", this.testBean.getMyFloat() > 1.9F).     assertTrue("changed value visible to next advice in chain", this.firstTestAspect.getLastBeforeFloatValue() > 1.9F). }
false;public;0;7;;@Test public void testProceedWithArgsAcrossAspects() {     this.testBean.setSex("male").     assertEquals("value changed in around advice", "MALE", this.testBean.getSex()).     assertEquals("changed value visible to next before advice in chain", "MALE", this.secondTestAspect.getLastBeforeStringValue()).     assertEquals("changed value visible to next around advice in chain", "MALE", this.secondTestAspect.getLastAroundStringValue()). }
false;;1;1;;void setName(String name).
false;;0;1;;String getName().
false;;1;1;;void setAge(int age).
false;;0;1;;int getAge().
false;;1;1;;void setMyFloat(float f).
false;;0;1;;float getMyFloat().
false;;1;1;;void setSex(String sex).
false;;0;1;;String getSex().
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;0;4;;@Override public float getMyFloat() {     return aFloat. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;0;4;;@Override public String getSex() {     return sex. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;1;4;;@Override public void setMyFloat(float f) {     this.aFloat = f. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;1;4;;@Override public void setSex(String sex) {     this.sex = sex. }
false;public;1;1;;public void setOrder(int order) {     this.order = order. }
false;public;0;2;;@Override public int getOrder() {     return this.order. }
false;public;2;3;;public Object capitalize(ProceedingJoinPoint pjp, String value) throws Throwable {     return pjp.proceed(new Object[] { value.toUpperCase() }). }
false;public;1;5;;public Object doubleOrQuits(ProceedingJoinPoint pjp) throws Throwable {     int value = ((Integer) pjp.getArgs()[0]).intValue().     pjp.getArgs()[0] = new Integer(value * 2).     return pjp.proceed(). }
false;public;2;4;;public Object addOne(ProceedingJoinPoint pjp, Float value) throws Throwable {     float fv = value.floatValue().     return pjp.proceed(new Object[] { new Float(fv + 1.0F) }). }
false;public;2;9;;public void captureStringArgument(JoinPoint tjp, String arg) {     if (!tjp.getArgs()[0].equals(arg)) {         throw new IllegalStateException("argument is '" + arg + "', " + "but args array has '" + tjp.getArgs()[0] + "'").     }     this.lastBeforeStringValue = arg. }
false;public;2;9;;public Object captureStringArgumentInAround(ProceedingJoinPoint pjp, String arg) throws Throwable {     if (!pjp.getArgs()[0].equals(arg)) {         throw new IllegalStateException("argument is '" + arg + "', " + "but args array has '" + pjp.getArgs()[0] + "'").     }     this.lastAroundStringValue = arg.     return pjp.proceed(). }
false;public;2;10;;public void captureFloatArgument(JoinPoint tjp, float arg) {     float tjpArg = ((Float) tjp.getArgs()[0]).floatValue().     if (Math.abs(tjpArg - arg) > 0.000001) {         throw new IllegalStateException("argument is '" + arg + "', " + "but args array has '" + tjpArg + "'").     }     this.lastBeforeFloatValue = arg. }
false;public;0;3;;public String getLastBeforeStringValue() {     return this.lastBeforeStringValue. }
false;public;0;3;;public String getLastAroundStringValue() {     return this.lastAroundStringValue. }
false;public;0;3;;public float getLastBeforeFloatValue() {     return this.lastBeforeFloatValue. }
