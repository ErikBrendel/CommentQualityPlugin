commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void componentScanOverlapsWithImport() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config1.class).     ctx.register(Config2.class).     // no conflicts found trying to register SimpleComponent     ctx.refresh().     // succeeds -> there is only one bean of type SimpleComponent     ctx.getBean(SimpleComponent.class). }
false;public;0;8;;@Test public void componentScanOverlapsWithImportUsingAsm() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config1", new RootBeanDefinition(Config1.class.getName())).     ctx.registerBeanDefinition("config2", new RootBeanDefinition(Config2.class.getName())).     // no conflicts found trying to register SimpleComponent     ctx.refresh().     // succeeds -> there is only one bean of type SimpleComponent     ctx.getBean(SimpleComponent.class). }
false;public;0;7;;@Test public void componentScanViaImport() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config3.class).     ctx.refresh().     ctx.getBean(SimpleComponent.class). }
false;public;0;7;;@Test public void componentScanViaImportUsingAsm() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(Config3.class.getName())).     ctx.refresh().     ctx.getBean(SimpleComponent.class). }
false;public;0;7;;@Test public void componentScanViaImportUsingScan() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.scan("org.springframework.context.annotation.componentscan.importing").     ctx.refresh().     ctx.getBean(SimpleComponent.class). }
false;public;0;7;;@Test public void circularImportViaComponentScan() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(ImportingConfig.class.getName())).     ctx.refresh().     ctx.getBean(SimpleComponent.class). }
