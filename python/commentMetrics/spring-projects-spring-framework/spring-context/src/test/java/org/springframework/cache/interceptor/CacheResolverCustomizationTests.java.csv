commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     ApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     this.cacheManager = context.getBean("cacheManager", CacheManager.class).     this.anotherCacheManager = context.getBean("anotherCacheManager", CacheManager.class).     this.simpleService = context.getBean(SimpleService.class). }
false;public;0;10;;@Test public void noCustomization() {     Cache cache = this.cacheManager.getCache("default").     Object key = new Object().     assertCacheMiss(key, cache).     Object value = this.simpleService.getSimple(key).     assertCacheHit(key, value, cache). }
false;public;0;10;;@Test public void customCacheResolver() {     Cache cache = this.cacheManager.getCache("primary").     Object key = new Object().     assertCacheMiss(key, cache).     Object value = this.simpleService.getWithCustomCacheResolver(key).     assertCacheHit(key, value, cache). }
false;public;0;10;;@Test public void customCacheManager() {     Cache cache = this.anotherCacheManager.getCache("default").     Object key = new Object().     assertCacheMiss(key, cache).     Object value = this.simpleService.getWithCustomCacheManager(key).     assertCacheHit(key, value, cache). }
false;public;0;17;;@Test public void runtimeResolution() {     Cache defaultCache = this.cacheManager.getCache("default").     Cache primaryCache = this.cacheManager.getCache("primary").     Object key = new Object().     assertCacheMiss(key, defaultCache, primaryCache).     Object value = this.simpleService.getWithRuntimeCacheResolution(key, "default").     assertCacheHit(key, value, defaultCache).     assertCacheMiss(key, primaryCache).     Object key2 = new Object().     assertCacheMiss(key2, defaultCache, primaryCache).     Object value2 = this.simpleService.getWithRuntimeCacheResolution(key2, "primary").     assertCacheHit(key2, value2, primaryCache).     assertCacheMiss(key2, defaultCache). }
false;public;0;10;;@Test public void namedResolution() {     Cache cache = this.cacheManager.getCache("secondary").     Object key = new Object().     assertCacheMiss(key, cache).     Object value = this.simpleService.getWithNamedCacheResolution(key).     assertCacheHit(key, value, cache). }
false;public;0;11;;@Test public void noCacheResolved() {     Method method = ReflectionUtils.findMethod(SimpleService.class, "noCacheResolved", Object.class).     try {         this.simpleService.noCacheResolved(new Object()).         fail("Should have failed, no cache resolved").     } catch (IllegalStateException ex) {         assertTrue("Reference to the method must be contained in the message", ex.getMessage().contains(method.toString())).     } }
false;public;0;10;;@Test public void unknownCacheResolver() {     try {         this.simpleService.unknownCacheResolver(new Object()).         fail("Should have failed, no cache resolver with that name").     } catch (NoSuchBeanDefinitionException ex) {         assertEquals("Wrong bean name in exception", "unknownCacheResolver", ex.getBeanName()).     } }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return CacheTestUtils.createSimpleCacheManager("default", "primary", "secondary"). }
false;public;0;4;;@Bean public CacheManager anotherCacheManager() {     return CacheTestUtils.createSimpleCacheManager("default", "primary", "secondary"). }
false;public;0;4;;@Bean public CacheResolver primaryCacheResolver() {     return new NamedCacheResolver(cacheManager(), "primary"). }
false;public;0;4;;@Bean public CacheResolver secondaryCacheResolver() {     return new NamedCacheResolver(cacheManager(), "primary"). }
false;public;0;4;;@Bean public CacheResolver runtimeCacheResolver() {     return new RuntimeCacheResolver(cacheManager()). }
false;public;0;7;;@Bean public CacheResolver namedCacheResolver() {     NamedCacheResolver resolver = new NamedCacheResolver().     resolver.setCacheManager(cacheManager()).     resolver.setCacheNames(Collections.singleton("secondary")).     return resolver. }
false;public;0;4;;@Bean public CacheResolver nullCacheResolver() {     return new NullCacheResolver(cacheManager()). }
false;public;0;4;;@Bean public SimpleService simpleService() {     return new SimpleService(). }
false;public;1;4;;@Cacheable public Object getSimple(Object key) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@Cacheable(cacheResolver = "primaryCacheResolver") public Object getWithCustomCacheResolver(Object key) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@Cacheable(cacheManager = "anotherCacheManager") public Object getWithCustomCacheManager(Object key) {     return this.counter.getAndIncrement(). }
false;public;2;4;;@Cacheable(cacheResolver = "runtimeCacheResolver", key = "#p0") public Object getWithRuntimeCacheResolution(Object key, String cacheName) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@Cacheable(cacheResolver = "namedCacheResolver") public Object getWithNamedCacheResolution(Object key) {     return this.counter.getAndIncrement(). }
false;public;1;4;;// No cache resolved for the operation @Cacheable(cacheResolver = "nullCacheResolver") public Object noCacheResolved(Object key) {     return this.counter.getAndIncrement(). }
false;public;1;4;;// No such bean defined @Cacheable(cacheResolver = "unknownCacheResolver") public Object unknownCacheResolver(Object key) {     return this.counter.getAndIncrement(). }
false;protected;1;6;;@Override @Nullable protected Collection<String> getCacheNames(CacheOperationInvocationContext<?> context) {     String cacheName = (String) context.getArgs()[1].     return Collections.singleton(cacheName). }
false;protected;1;5;;@Override @Nullable protected Collection<String> getCacheNames(CacheOperationInvocationContext<?> context) {     return null. }
