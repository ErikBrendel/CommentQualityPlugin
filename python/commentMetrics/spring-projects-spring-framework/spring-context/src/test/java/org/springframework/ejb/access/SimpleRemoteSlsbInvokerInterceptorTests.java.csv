commented;modifiers;parameterAmount;loc;comment;code
false;private;2;9;;private Context mockContext(String jndiName, RemoteInterface ejbInstance) throws Exception {     SlsbHome mockHome = mock(SlsbHome.class).     given(mockHome.create()).willReturn(ejbInstance).     Context mockCtx = mock(Context.class).     given(mockCtx.lookup("java:comp/env/" + jndiName)).willReturn(mockHome).     return mockCtx. }
false;protected;0;4;;@Override protected Context createInitialContext() {     return mockCtx. }
false;private;2;15;;private SimpleRemoteSlsbInvokerInterceptor configuredInterceptor(final Context mockCtx, String jndiName) throws Exception {     SimpleRemoteSlsbInvokerInterceptor si = createInterceptor().     si.setJndiTemplate(new JndiTemplate() {          @Override         protected Context createInitialContext() {             return mockCtx.         }     }).     si.setResourceRef(true).     si.setJndiName(jndiName).     return si. }
false;protected;0;3;;protected SimpleRemoteSlsbInvokerInterceptor createInterceptor() {     return new SimpleRemoteSlsbInvokerInterceptor(). }
false;protected;2;6;;protected Object configuredProxy(SimpleRemoteSlsbInvokerInterceptor si, Class<?> ifc) throws NamingException {     si.afterPropertiesSet().     ProxyFactory pf = new ProxyFactory(new Class<?>[] { ifc }).     pf.addAdvice(si).     return pf.getProxy(). }
false;public;0;12;;@Test public void testPerformsLookup() throws Exception {     RemoteInterface ejb = mock(RemoteInterface.class).     String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     configuredProxy(si, RemoteInterface.class).     verify(mockContext).close(). }
false;public;0;16;;@Test public void testPerformsLookupWithAccessContext() throws Exception {     RemoteInterface ejb = mock(RemoteInterface.class).     String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     si.setExposeAccessContext(true).     RemoteInterface target = (RemoteInterface) configuredProxy(si, RemoteInterface.class).     assertNull(target.targetMethod()).     verify(mockContext, times(2)).close().     verify(ejb).targetMethod(). }
false;public;1;5;;@Override public Object lookup(String name) throws NamingException {     assertTrue(jndiName.equals(name)).     throw nex. }
false;public;0;25;;@Test public void testLookupFailure() throws Exception {     final NamingException nex = new NamingException().     final String jndiName = "foobar".     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) throws NamingException {             assertTrue(jndiName.equals(name)).             throw nex.         }     }.     SimpleRemoteSlsbInvokerInterceptor si = new SimpleRemoteSlsbInvokerInterceptor().     si.setJndiName("foobar").     // default resourceRef=false should cause this to fail, as java:/comp/env will not     // automatically be added     si.setJndiTemplate(jt).     try {         si.afterPropertiesSet().         fail("Should have failed with naming exception").     } catch (NamingException ex) {         assertTrue(ex == nex).     } }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstance() throws Exception {     doTestInvokesMethodOnEjbInstance(true, true). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithLazyLookup() throws Exception {     doTestInvokesMethodOnEjbInstance(false, true). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithLazyLookupAndNoCache() throws Exception {     doTestInvokesMethodOnEjbInstance(false, false). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithNoCache() throws Exception {     doTestInvokesMethodOnEjbInstance(true, false). }
false;private;2;27;;private void doTestInvokesMethodOnEjbInstance(boolean lookupHomeOnStartup, boolean cacheHome) throws Exception {     Object retVal = new Object().     final RemoteInterface ejb = mock(RemoteInterface.class).     given(ejb.targetMethod()).willReturn(retVal).     int lookupCount = 1.     if (!cacheHome) {         lookupCount++.         if (lookupHomeOnStartup) {             lookupCount++.         }     }     final String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     si.setLookupHomeOnStartup(lookupHomeOnStartup).     si.setCacheHome(cacheHome).     RemoteInterface target = (RemoteInterface) configuredProxy(si, RemoteInterface.class).     assertTrue(target.targetMethod() == retVal).     assertTrue(target.targetMethod() == retVal).     verify(mockContext, times(lookupCount)).close().     verify(ejb, times(2)).remove(). }
false;public;0;23;;@Test public void testInvokesMethodOnEjbInstanceWithRemoteException() throws Exception {     final RemoteInterface ejb = mock(RemoteInterface.class).     given(ejb.targetMethod()).willThrow(new RemoteException()).     ejb.remove().     final String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     RemoteInterface target = (RemoteInterface) configuredProxy(si, RemoteInterface.class).     try {         target.targetMethod().         fail("Should have thrown RemoteException").     } catch (RemoteException ex) {     // expected     }     verify(mockContext).close().     verify(ejb, times(2)).remove(). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithConnectExceptionWithRefresh() throws Exception {     doTestInvokesMethodOnEjbInstanceWithConnectExceptionWithRefresh(true, true). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithConnectExceptionWithRefreshAndLazyLookup() throws Exception {     doTestInvokesMethodOnEjbInstanceWithConnectExceptionWithRefresh(false, true). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithConnectExceptionWithRefreshAndLazyLookupAndNoCache() throws Exception {     doTestInvokesMethodOnEjbInstanceWithConnectExceptionWithRefresh(false, false). }
false;public;0;4;;@Test public void testInvokesMethodOnEjbInstanceWithConnectExceptionWithRefreshAndNoCache() throws Exception {     doTestInvokesMethodOnEjbInstanceWithConnectExceptionWithRefresh(true, false). }
false;private;2;34;;private void doTestInvokesMethodOnEjbInstanceWithConnectExceptionWithRefresh(boolean lookupHomeOnStartup, boolean cacheHome) throws Exception {     final RemoteInterface ejb = mock(RemoteInterface.class).     given(ejb.targetMethod()).willThrow(new ConnectException("")).     int lookupCount = 2.     if (!cacheHome) {         lookupCount++.         if (lookupHomeOnStartup) {             lookupCount++.         }     }     final String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     si.setRefreshHomeOnConnectFailure(true).     si.setLookupHomeOnStartup(lookupHomeOnStartup).     si.setCacheHome(cacheHome).     RemoteInterface target = (RemoteInterface) configuredProxy(si, RemoteInterface.class).     try {         target.targetMethod().         fail("Should have thrown RemoteException").     } catch (ConnectException ex) {     // expected     }     verify(mockContext, times(lookupCount)).close().     verify(ejb, times(2)).remove(). }
false;public;0;17;;@Test public void testInvokesMethodOnEjbInstanceWithBusinessInterface() throws Exception {     Object retVal = new Object().     final RemoteInterface ejb = mock(RemoteInterface.class).     given(ejb.targetMethod()).willReturn(retVal).     final String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     BusinessInterface target = (BusinessInterface) configuredProxy(si, BusinessInterface.class).     assertTrue(target.targetMethod() == retVal).     verify(mockContext).close().     verify(ejb).remove(). }
false;public;0;22;;@Test public void testInvokesMethodOnEjbInstanceWithBusinessInterfaceWithRemoteException() throws Exception {     final RemoteInterface ejb = mock(RemoteInterface.class).     given(ejb.targetMethod()).willThrow(new RemoteException()).     final String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     BusinessInterface target = (BusinessInterface) configuredProxy(si, BusinessInterface.class).     try {         target.targetMethod().         fail("Should have thrown RemoteAccessException").     } catch (RemoteAccessException ex) {     // expected     }     verify(mockContext).close().     verify(ejb).remove(). }
false;public;0;4;;@Test public void testApplicationException() throws Exception {     doTestException(new ApplicationException()). }
false;public;0;4;;@Test public void testRemoteException() throws Exception {     doTestException(new RemoteException()). }
false;private;1;21;;private void doTestException(Exception expected) throws Exception {     final RemoteInterface ejb = mock(RemoteInterface.class).     given(ejb.targetMethod()).willThrow(expected).     final String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     SimpleRemoteSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     RemoteInterface target = (RemoteInterface) configuredProxy(si, RemoteInterface.class).     try {         target.targetMethod().         fail("Should have thrown remote exception").     } catch (Exception thrown) {         assertTrue(thrown == expected).     }     verify(mockContext).close().     verify(ejb).remove(). }
false;;0;1;;EJBObject create() throws RemoteException, CreateException.
true;;0;1;// Also business exception!? ;// Also business exception!? Object targetMethod() throws RemoteException, ApplicationException.
false;;0;1;;Object targetMethod() throws ApplicationException.
