commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void oneLevelDeep() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(L0Config.L1Config.class).     ctx.refresh().     assertFalse(ctx.containsBean("l0Bean")).     ctx.getBean(L0Config.L1Config.class).     ctx.getBean("l1Bean").     ctx.getBean(L0Config.L1Config.L2Config.class).     ctx.getBean("l2Bean").     // ensure that override order is correct     assertThat(ctx.getBean("overrideBean", TestBean.class).getName(), is("override-l1")). }
false;public;0;21;;@Test public void twoLevelsDeep() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(L0Config.class).     ctx.refresh().     assertFalse(ctx.getBeanFactory().containsSingleton("nestedConfigurationClassTests.L0Config")).     ctx.getBean(L0Config.class).     ctx.getBean("l0Bean").     assertTrue(ctx.getBeanFactory().containsSingleton(L0Config.L1Config.class.getName())).     ctx.getBean(L0Config.L1Config.class).     ctx.getBean("l1Bean").     assertFalse(ctx.getBeanFactory().containsSingleton(L0Config.L1Config.L2Config.class.getName())).     ctx.getBean(L0Config.L1Config.L2Config.class).     ctx.getBean("l2Bean").     // ensure that override order is correct     assertThat(ctx.getBean("overrideBean", TestBean.class).getName(), is("override-l0")). }
false;public;0;21;;@Test public void twoLevelsInLiteMode() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(L0ConfigLight.class).     ctx.refresh().     assertFalse(ctx.getBeanFactory().containsSingleton("nestedConfigurationClassTests.L0ConfigLight")).     ctx.getBean(L0ConfigLight.class).     ctx.getBean("l0Bean").     assertTrue(ctx.getBeanFactory().containsSingleton(L0ConfigLight.L1ConfigLight.class.getName())).     ctx.getBean(L0ConfigLight.L1ConfigLight.class).     ctx.getBean("l1Bean").     assertFalse(ctx.getBeanFactory().containsSingleton(L0ConfigLight.L1ConfigLight.L2ConfigLight.class.getName())).     ctx.getBean(L0ConfigLight.L1ConfigLight.L2ConfigLight.class).     ctx.getBean("l2Bean").     // ensure that override order is correct     assertThat(ctx.getBean("overrideBean", TestBean.class).getName(), is("override-l0")). }
false;public;0;27;;@Test public void twoLevelsDeepWithInheritance() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(S1Config.class).     ctx.refresh().     S1Config config = ctx.getBean(S1Config.class).     assertTrue(config != ctx.getBean(S1Config.class)).     TestBean tb = ctx.getBean("l0Bean", TestBean.class).     assertTrue(tb == ctx.getBean("l0Bean", TestBean.class)).     ctx.getBean(L0Config.L1Config.class).     ctx.getBean("l1Bean").     ctx.getBean(L0Config.L1Config.L2Config.class).     ctx.getBean("l2Bean").     // ensure that override order is correct and that it is a singleton     TestBean ob = ctx.getBean("overrideBean", TestBean.class).     assertThat(ob.getName(), is("override-s1")).     assertTrue(ob == ctx.getBean("overrideBean", TestBean.class)).     TestBean pb1 = ctx.getBean("prototypeBean", TestBean.class).     TestBean pb2 = ctx.getBean("prototypeBean", TestBean.class).     assertTrue(pb1 != pb2).     assertTrue(pb1.getFriends().iterator().next() != pb2.getFriends().iterator().next()). }
false;public;0;27;;@Test public void twoLevelsDeepWithInheritanceThroughImport() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(S1Importer.class).     ctx.refresh().     S1Config config = ctx.getBean(S1Config.class).     assertTrue(config != ctx.getBean(S1Config.class)).     TestBean tb = ctx.getBean("l0Bean", TestBean.class).     assertTrue(tb == ctx.getBean("l0Bean", TestBean.class)).     ctx.getBean(L0Config.L1Config.class).     ctx.getBean("l1Bean").     ctx.getBean(L0Config.L1Config.L2Config.class).     ctx.getBean("l2Bean").     // ensure that override order is correct and that it is a singleton     TestBean ob = ctx.getBean("overrideBean", TestBean.class).     assertThat(ob.getName(), is("override-s1")).     assertTrue(ob == ctx.getBean("overrideBean", TestBean.class)).     TestBean pb1 = ctx.getBean("prototypeBean", TestBean.class).     TestBean pb2 = ctx.getBean("prototypeBean", TestBean.class).     assertTrue(pb1 != pb2).     assertTrue(pb1.getFriends().iterator().next() != pb2.getFriends().iterator().next()). }
false;public;0;27;;@Test public void twoLevelsDeepWithInheritanceAndScopedProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(S1ImporterWithProxy.class).     ctx.refresh().     S1ConfigWithProxy config = ctx.getBean(S1ConfigWithProxy.class).     assertTrue(config == ctx.getBean(S1ConfigWithProxy.class)).     TestBean tb = ctx.getBean("l0Bean", TestBean.class).     assertTrue(tb == ctx.getBean("l0Bean", TestBean.class)).     ctx.getBean(L0Config.L1Config.class).     ctx.getBean("l1Bean").     ctx.getBean(L0Config.L1Config.L2Config.class).     ctx.getBean("l2Bean").     // ensure that override order is correct and that it is a singleton     TestBean ob = ctx.getBean("overrideBean", TestBean.class).     assertThat(ob.getName(), is("override-s1")).     assertTrue(ob == ctx.getBean("overrideBean", TestBean.class)).     TestBean pb1 = ctx.getBean("prototypeBean", TestBean.class).     TestBean pb2 = ctx.getBean("prototypeBean", TestBean.class).     assertTrue(pb1 != pb2).     assertTrue(pb1.getFriends().iterator().next() != pb2.getFriends().iterator().next()). }
false;public;0;20;;@Test public void twoLevelsWithNoBeanMethods() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(L0ConfigEmpty.class).     ctx.refresh().     assertFalse(ctx.getBeanFactory().containsSingleton("l0ConfigEmpty")).     Object l0i1 = ctx.getBean(L0ConfigEmpty.class).     Object l0i2 = ctx.getBean(L0ConfigEmpty.class).     assertTrue(l0i1 == l0i2).     Object l1i1 = ctx.getBean(L0ConfigEmpty.L1ConfigEmpty.class).     Object l1i2 = ctx.getBean(L0ConfigEmpty.L1ConfigEmpty.class).     assertTrue(l1i1 != l1i2).     Object l2i1 = ctx.getBean(L0ConfigEmpty.L1ConfigEmpty.L2ConfigEmpty.class).     Object l2i2 = ctx.getBean(L0ConfigEmpty.L1ConfigEmpty.L2ConfigEmpty.class).     assertTrue(l2i1 == l2i2).     assertNotEquals(l2i1.toString(), l2i2.toString()). }
false;public;0;20;;@Test public void twoLevelsOnNonAnnotatedBaseClass() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(L0ConfigConcrete.class).     ctx.refresh().     assertFalse(ctx.getBeanFactory().containsSingleton("l0ConfigConcrete")).     Object l0i1 = ctx.getBean(L0ConfigConcrete.class).     Object l0i2 = ctx.getBean(L0ConfigConcrete.class).     assertTrue(l0i1 == l0i2).     Object l1i1 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.class).     Object l1i2 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.class).     assertTrue(l1i1 != l1i2).     Object l2i1 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.L2ConfigEmpty.class).     Object l2i2 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.L2ConfigEmpty.class).     assertTrue(l2i1 == l2i2).     assertNotEquals(l2i1.toString(), l2i2.toString()). }
false;public;0;5;;@Bean @Lazy public TestBean l0Bean() {     return new TestBean("l0"). }
false;public;0;5;;@Bean @Lazy public TestBean overrideBean() {     return new TestBean("override-l0"). }
false;public;0;4;;@Bean public TestBean l1Bean() {     return new TestBean("l1"). }
false;public;0;4;;@Bean public TestBean overrideBean() {     return new TestBean("override-l1"). }
false;public;0;5;;@Bean @Lazy public TestBean l2Bean() {     return new TestBean("l2"). }
false;public;0;5;;@Bean @Lazy public TestBean overrideBean() {     return new TestBean("override-l2"). }
false;public;0;5;;@Bean @Lazy public TestBean l0Bean() {     return new TestBean("l0"). }
false;public;0;5;;@Bean @Lazy public TestBean overrideBean() {     return new TestBean("override-l0"). }
false;public;0;4;;@Bean public TestBean l1Bean() {     return new TestBean("l1"). }
false;public;0;4;;@Bean public TestBean overrideBean() {     return new TestBean("override-l1"). }
false;public;0;5;;@Bean @Lazy public TestBean l2Bean() {     return new TestBean("l2"). }
false;public;0;5;;@Bean @Lazy public TestBean overrideBean() {     return new TestBean("override-l2"). }
false;public;0;5;;@Override @Bean public TestBean overrideBean() {     return new TestBean("override-s1"). }
false;public;0;7;;@Bean @Scope("prototype") public TestBean prototypeBean() {     TestBean tb = new TestBean("override-s1").     tb.getFriends().add(this).     return tb. }
false;public;0;5;;@Override @Bean public TestBean overrideBean() {     return new TestBean("override-s1"). }
false;public;0;7;;@Bean @Scope("prototype") public TestBean prototypeBean() {     TestBean tb = new TestBean("override-s1").     tb.getFriends().add(this).     return tb. }
