# id;timestamp;commentText;codeText;commentWords;codeWords
DataBinderTests -> @Test 	public void testBindingWithRequiredFields();1518198176;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields();1518541111;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> public void testBindingWithRequiredFields() throws Exception;1328020251;Tests for required field, both null, non-existing and empty strings.;public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields(new String[] {"touchy", "name", "age", "date", "spouse.name"})___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,new,string,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> public void testBindingWithRequiredFields() throws Exception;1356735495;Tests for required field, both null, non-existing and empty strings.;public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields(new String[] {"touchy", "name", "age", "date", "spouse.name"})___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,new,string,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> public void testBindingWithRequiredFields() throws Exception;1362408075;Tests for required field, both null, non-existing and empty strings.;public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields(new String[] {"touchy", "name", "age", "date", "spouse.name"})___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,new,string,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> public void testBindingWithRequiredFields() throws Exception;1366717989;Tests for required field, both null, non-existing and empty strings.;public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields(new String[] {"touchy", "name", "age", "date", "spouse.name"})___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,new,string,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> public void testBindingWithRequiredFields() throws Exception;1391168828;Tests for required field, both null, non-existing and empty strings.;public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> public void testBindingWithRequiredFields() throws Exception;1426272000;Tests for required field, both null, non-existing and empty strings.;public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1431462798;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1431986019;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1455906069;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1465394040;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1465462155;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1467730834;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1478621867;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1478622419;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1481644559;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
DataBinderTests -> @Test 	public void testBindingWithRequiredFields() throws Exception;1496242568;Tests for required field, both null, non-existing and empty strings.;@Test_	public void testBindingWithRequiredFields() throws Exception {_		TestBean tb = new TestBean()__		tb.setSpouse(new TestBean())___		DataBinder binder = new DataBinder(tb, "person")__		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name")___		MutablePropertyValues pvs = new MutablePropertyValues()__		pvs.add("touchy", "")__		pvs.add("name", null)__		pvs.add("age", null)__		pvs.add("spouse.name", "     ")___		binder.bind(pvs)___		BindingResult br = binder.getBindingResult()__		assertEquals("Wrong number of errors", 5, br.getErrorCount())___		assertEquals("required", br.getFieldError("touchy").getCode())__		assertEquals("", br.getFieldValue("touchy"))__		assertEquals("required", br.getFieldError("name").getCode())__		assertEquals("", br.getFieldValue("name"))__		assertEquals("required", br.getFieldError("age").getCode())__		assertEquals("", br.getFieldValue("age"))__		assertEquals("required", br.getFieldError("date").getCode())__		assertEquals("", br.getFieldValue("date"))__		assertEquals("required", br.getFieldError("spouse.name").getCode())__		assertEquals("", br.getFieldValue("spouse.name"))__	};tests,for,required,field,both,null,non,existing,and,empty,strings;test,public,void,test,binding,with,required,fields,throws,exception,test,bean,tb,new,test,bean,tb,set,spouse,new,test,bean,data,binder,binder,new,data,binder,tb,person,binder,set,required,fields,touchy,name,age,date,spouse,name,mutable,property,values,pvs,new,mutable,property,values,pvs,add,touchy,pvs,add,name,null,pvs,add,age,null,pvs,add,spouse,name,binder,bind,pvs,binding,result,br,binder,get,binding,result,assert,equals,wrong,number,of,errors,5,br,get,error,count,assert,equals,required,br,get,field,error,touchy,get,code,assert,equals,br,get,field,value,touchy,assert,equals,required,br,get,field,error,name,get,code,assert,equals,br,get,field,value,name,assert,equals,required,br,get,field,error,age,get,code,assert,equals,br,get,field,value,age,assert,equals,required,br,get,field,error,date,get,code,assert,equals,br,get,field,value,date,assert,equals,required,br,get,field,error,spouse,name,get,code,assert,equals,br,get,field,value,spouse,name
