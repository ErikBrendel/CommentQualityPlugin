commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;@Bean(autowire = Autowire.BY_TYPE) Object foo() {     return null. }
false;public;0;9;;@Test public void autowireMetadataIsPropagated() {     @Configuration     class Config {          @Bean(autowire = Autowire.BY_TYPE)         Object foo() {             return null.         }     }     assertEquals("autowire mode was not propagated", AbstractBeanDefinition.AUTOWIRE_BY_TYPE, beanDef(Config.class).getAutowireMode()). }
false;;0;1;;@Bean(autowireCandidate = false) Object foo() {     return null. }
false;public;0;9;;@Test public void autowireCandidateMetadataIsPropagated() {     @Configuration     class Config {          @Bean(autowireCandidate = false)         Object foo() {             return null.         }     }     assertFalse("autowire candidate flag was not propagated", beanDef(Config.class).isAutowireCandidate()). }
false;;0;1;;@Bean(initMethod = "start") Object foo() {     return null. }
false;public;0;9;;@Test public void initMethodMetadataIsPropagated() {     @Configuration     class Config {          @Bean(initMethod = "start")         Object foo() {             return null.         }     }     assertEquals("init method name was not propagated", "start", beanDef(Config.class).getInitMethodName()). }
false;;0;1;;@Bean(destroyMethod = "destroy") Object foo() {     return null. }
false;public;0;9;;@Test public void destroyMethodMetadataIsPropagated() {     @Configuration     class Config {          @Bean(destroyMethod = "destroy")         Object foo() {             return null.         }     }     assertEquals("destroy method name was not propagated", "destroy", beanDef(Config.class).getDestroyMethodName()). }
false;;0;1;;@Bean() @DependsOn({ "bar", "baz" }) Object foo() {     return null. }
false;public;0;9;;@Test public void dependsOnMetadataIsPropagated() {     @Configuration     class Config {          @Bean()         @DependsOn({ "bar", "baz" })         Object foo() {             return null.         }     }     assertArrayEquals("dependsOn metadata was not propagated", new String[] { "bar", "baz" }, beanDef(Config.class).getDependsOn()). }
false;;0;2;;@Primary @Bean Object foo() {     return null. }
false;public;0;10;;@Test public void primaryMetadataIsPropagated() {     @Configuration     class Config {          @Primary         @Bean         Object foo() {             return null.         }     }     assertTrue("primary metadata was not propagated", beanDef(Config.class).isPrimary()). }
false;;0;1;;@Bean Object foo() {     return null. }
false;public;0;9;;@Test public void primaryMetadataIsFalseByDefault() {     @Configuration     class Config {          @Bean         Object foo() {             return null.         }     }     assertFalse("@Bean methods should be non-primary by default", beanDef(Config.class).isPrimary()). }
false;;0;2;;@Lazy @Bean Object foo() {     return null. }
false;public;0;10;;@Test public void lazyMetadataIsPropagated() {     @Configuration     class Config {          @Lazy         @Bean         Object foo() {             return null.         }     }     assertTrue("lazy metadata was not propagated", beanDef(Config.class).isLazyInit()). }
false;;0;1;;@Bean Object foo() {     return null. }
false;public;0;9;;@Test public void lazyMetadataIsFalseByDefault() {     @Configuration     class Config {          @Bean         Object foo() {             return null.         }     }     assertFalse("@Bean methods should be non-lazy by default", beanDef(Config.class).isLazyInit()). }
false;;0;1;;@Bean Object foo() {     return null. }
false;public;0;9;;@Test public void defaultLazyConfigurationPropagatesToIndividualBeans() {     @Lazy     @Configuration     class Config {          @Bean         Object foo() {             return null.         }     }     assertTrue("@Bean methods declared in a @Lazy @Configuration should be lazily instantiated", beanDef(Config.class).isLazyInit()). }
false;;0;1;;@Lazy(false) @Bean Object foo() {     return null. }
false;public;0;9;;@Test public void eagerBeanOverridesDefaultLazyConfiguration() {     @Lazy     @Configuration     class Config {          @Lazy(false)         @Bean         Object foo() {             return null.         }     }     assertFalse("@Lazy(false) @Bean methods declared in a @Lazy @Configuration should be eagerly instantiated", beanDef(Config.class).isLazyInit()). }
false;;0;1;;@Bean Object foo() {     return null. }
false;public;0;9;;@Test public void eagerConfigurationProducesEagerBeanDefinitions() {     // will probably never happen, doesn't make much sense     @Lazy(false)     // will probably never happen, doesn't make much sense     @Configuration     class Config {          @Bean         Object foo() {             return null.         }     }     assertFalse("@Lazy(false) @Configuration should produce eager bean definitions", beanDef(Config.class).isLazyInit()). }
false;private;1;7;;private AbstractBeanDefinition beanDef(Class<?> configClass) {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     factory.registerBeanDefinition("config", new RootBeanDefinition(configClass)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(factory).     return (AbstractBeanDefinition) factory.getBeanDefinition("foo"). }
