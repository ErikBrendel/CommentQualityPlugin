commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     return objectFactory.getObject(). }
false;public;1;4;;@Override public Object remove(String name) {     return null. }
false;public;2;3;;@Override public void registerDestructionCallback(String name, Runnable callback) { }
false;public;1;9;;@Override public Object resolveContextualObject(String key) {     if (key.equals("mySpecialAttr")) {         return "42".     } else {         return null.     } }
false;public;0;4;;@Override public String getConversationId() {     return null. }
false;public;0;138;;@Test public void genericApplicationContext() throws Exception {     GenericApplicationContext ac = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ac).     ac.getBeanFactory().registerScope("myScope", new Scope() {          @Override         public Object get(String name, ObjectFactory<?> objectFactory) {             return objectFactory.getObject().         }          @Override         public Object remove(String name) {             return null.         }          @Override         public void registerDestructionCallback(String name, Runnable callback) {         }          @Override         public Object resolveContextualObject(String key) {             if (key.equals("mySpecialAttr")) {                 return "42".             } else {                 return null.             }         }          @Override         public String getConversationId() {             return null.         }     }).     ac.getBeanFactory().setConversionService(new DefaultConversionService()).     PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer().     Properties placeholders = new Properties().     placeholders.setProperty("code", "123").     ppc.setProperties(placeholders).     ac.addBeanFactoryPostProcessor(ppc).     GenericBeanDefinition bd0 = new GenericBeanDefinition().     bd0.setBeanClass(TestBean.class).     bd0.getPropertyValues().add("name", "myName").     bd0.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "original")).     ac.registerBeanDefinition("tb0", bd0).     GenericBeanDefinition bd1 = new GenericBeanDefinition().     bd1.setBeanClassName("#{tb0.class}").     bd1.setScope("myScope").     bd1.getConstructorArgumentValues().addGenericArgumentValue("XXX#{tb0.name}YYY#{mySpecialAttr}ZZZ").     bd1.getConstructorArgumentValues().addGenericArgumentValue("#{mySpecialAttr}").     ac.registerBeanDefinition("tb1", bd1).     GenericBeanDefinition bd2 = new GenericBeanDefinition().     bd2.setBeanClassName("#{tb1.class.name}").     bd2.setScope("myScope").     bd2.getPropertyValues().add("name", "{ XXX#{tb0.name}YYY#{mySpecialAttr}ZZZ }").     bd2.getPropertyValues().add("age", "#{mySpecialAttr}").     bd2.getPropertyValues().add("country", "${code} #{systemProperties.country}").     ac.registerBeanDefinition("tb2", bd2).     GenericBeanDefinition bd3 = new GenericBeanDefinition().     bd3.setBeanClass(ValueTestBean.class).     bd3.setScope("myScope").     ac.registerBeanDefinition("tb3", bd3).     GenericBeanDefinition bd4 = new GenericBeanDefinition().     bd4.setBeanClass(ConstructorValueTestBean.class).     bd4.setScope("myScope").     ac.registerBeanDefinition("tb4", bd4).     GenericBeanDefinition bd5 = new GenericBeanDefinition().     bd5.setBeanClass(MethodValueTestBean.class).     bd5.setScope("myScope").     ac.registerBeanDefinition("tb5", bd5).     GenericBeanDefinition bd6 = new GenericBeanDefinition().     bd6.setBeanClass(PropertyValueTestBean.class).     bd6.setScope("myScope").     ac.registerBeanDefinition("tb6", bd6).     System.getProperties().put("country", "UK").     try {         ac.refresh().         TestBean tb0 = ac.getBean("tb0", TestBean.class).         TestBean tb1 = ac.getBean("tb1", TestBean.class).         assertEquals("XXXmyNameYYY42ZZZ", tb1.getName()).         assertEquals(42, tb1.getAge()).         TestBean tb2 = ac.getBean("tb2", TestBean.class).         assertEquals("{ XXXmyNameYYY42ZZZ }", tb2.getName()).         assertEquals(42, tb2.getAge()).         assertEquals("123 UK", tb2.getCountry()).         ValueTestBean tb3 = ac.getBean("tb3", ValueTestBean.class).         assertEquals("XXXmyNameYYY42ZZZ", tb3.name).         assertEquals(42, tb3.age).         assertEquals(42, tb3.ageFactory.getObject().intValue()).         assertEquals("123 UK", tb3.country).         assertEquals("123 UK", tb3.countryFactory.getObject()).         System.getProperties().put("country", "US").         assertEquals("123 UK", tb3.country).         assertEquals("123 US", tb3.countryFactory.getObject()).         System.getProperties().put("country", "UK").         assertEquals("123 UK", tb3.country).         assertEquals("123 UK", tb3.countryFactory.getObject()).         assertEquals("123", tb3.optionalValue1.get()).         assertEquals("123", tb3.optionalValue2.get()).         assertFalse(tb3.optionalValue3.isPresent()).         assertSame(tb0, tb3.tb).         tb3 = (ValueTestBean) SerializationTestUtils.serializeAndDeserialize(tb3).         assertEquals("123 UK", tb3.countryFactory.getObject()).         ConstructorValueTestBean tb4 = ac.getBean("tb4", ConstructorValueTestBean.class).         assertEquals("XXXmyNameYYY42ZZZ", tb4.name).         assertEquals(42, tb4.age).         assertEquals("123 UK", tb4.country).         assertSame(tb0, tb4.tb).         MethodValueTestBean tb5 = ac.getBean("tb5", MethodValueTestBean.class).         assertEquals("XXXmyNameYYY42ZZZ", tb5.name).         assertEquals(42, tb5.age).         assertEquals("123 UK", tb5.country).         assertSame(tb0, tb5.tb).         PropertyValueTestBean tb6 = ac.getBean("tb6", PropertyValueTestBean.class).         assertEquals("XXXmyNameYYY42ZZZ", tb6.name).         assertEquals(42, tb6.age).         assertEquals("123 UK", tb6.country).         assertSame(tb0, tb6.tb).     } finally {         System.getProperties().remove("country").     } }
false;public;0;34;;@Test public void prototypeCreationReevaluatesExpressions() {     GenericApplicationContext ac = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ac).     GenericConversionService cs = new GenericConversionService().     cs.addConverter(String.class, String.class, String::trim).     ac.getBeanFactory().registerSingleton(GenericApplicationContext.CONVERSION_SERVICE_BEAN_NAME, cs).     RootBeanDefinition rbd = new RootBeanDefinition(PrototypeTestBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     rbd.getPropertyValues().add("country", "#{systemProperties.country}").     rbd.getPropertyValues().add("country2", new TypedStringValue("-#{systemProperties.country}-")).     ac.registerBeanDefinition("test", rbd).     ac.refresh().     try {         System.getProperties().put("name", "juergen1").         System.getProperties().put("country", " UK1 ").         PrototypeTestBean tb = (PrototypeTestBean) ac.getBean("test").         assertEquals("juergen1", tb.getName()).         assertEquals("UK1", tb.getCountry()).         assertEquals("-UK1-", tb.getCountry2()).         System.getProperties().put("name", "juergen2").         System.getProperties().put("country", "  UK2  ").         tb = (PrototypeTestBean) ac.getBean("test").         assertEquals("juergen2", tb.getName()).         assertEquals("UK2", tb.getCountry()).         assertEquals("-UK2-", tb.getCountry2()).     } finally {         System.getProperties().remove("name").         System.getProperties().remove("country").     } }
false;public;0;29;;@Test public void prototypeCreationIsFastEnough() {     Assume.group(TestGroup.PERFORMANCE).     Assume.notLogging(factoryLog).     GenericApplicationContext ac = new GenericApplicationContext().     RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     rbd.getConstructorArgumentValues().addGenericArgumentValue("#{systemProperties.name}").     rbd.getPropertyValues().add("country", "#{systemProperties.country}").     ac.registerBeanDefinition("test", rbd).     ac.refresh().     StopWatch sw = new StopWatch().     sw.start("prototype").     System.getProperties().put("name", "juergen").     System.getProperties().put("country", "UK").     try {         for (int i = 0. i < 100000. i++) {             TestBean tb = (TestBean) ac.getBean("test").             assertEquals("juergen", tb.getName()).             assertEquals("UK", tb.getCountry()).         }         sw.stop().     } finally {         System.getProperties().remove("country").         System.getProperties().remove("name").     }     assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 6000). }
false;public;0;4;;@Override public void checkPropertiesAccess() {     throw new AccessControlException("Not Allowed"). }
false;public;1;4;;@Override public void checkPermission(Permission perm) { // allow everything else }
false;public;0;35;;@Test public void systemPropertiesSecurityManager() {     AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext().     GenericBeanDefinition bd = new GenericBeanDefinition().     bd.setBeanClass(TestBean.class).     bd.getPropertyValues().add("country", "#{systemProperties.country}").     ac.registerBeanDefinition("tb", bd).     SecurityManager oldSecurityManager = System.getSecurityManager().     try {         System.setProperty("country", "NL").         SecurityManager securityManager = new SecurityManager() {              @Override             public void checkPropertiesAccess() {                 throw new AccessControlException("Not Allowed").             }              @Override             public void checkPermission(Permission perm) {             // allow everything else             }         }.         System.setSecurityManager(securityManager).         ac.refresh().         TestBean tb = ac.getBean("tb", TestBean.class).         assertEquals("NL", tb.getCountry()).     } finally {         System.setSecurityManager(oldSecurityManager).         System.getProperties().remove("country").     } }
false;public;0;13;;@Test public void stringConcatenationWithDebugLogging() {     AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext().     GenericBeanDefinition bd = new GenericBeanDefinition().     bd.setBeanClass(String.class).     bd.getConstructorArgumentValues().addGenericArgumentValue("test-#{ T(java.lang.System).currentTimeMillis() }").     ac.registerBeanDefinition("str", bd).     ac.refresh().     String str = ac.getBean("str", String.class).     assertTrue(str.startsWith("test-")). }
false;public;0;19;;@Test public void resourceInjection() throws IOException {     System.setProperty("logfile", "do_not_delete_me.txt").     try (AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(ResourceInjectionBean.class)) {         ResourceInjectionBean resourceInjectionBean = ac.getBean(ResourceInjectionBean.class).         Resource resource = new ClassPathResource("do_not_delete_me.txt").         assertEquals(resource, resourceInjectionBean.resource).         assertEquals(resource.getURL(), resourceInjectionBean.url).         assertEquals(resource.getURI(), resourceInjectionBean.uri).         assertEquals(resource.getFile(), resourceInjectionBean.file).         assertArrayEquals(FileCopyUtils.copyToByteArray(resource.getInputStream()), FileCopyUtils.copyToByteArray(resourceInjectionBean.inputStream)).         assertEquals(FileCopyUtils.copyToString(new EncodedResource(resource).getReader()), FileCopyUtils.copyToString(resourceInjectionBean.reader)).     } finally {         System.getProperties().remove("logfile").     } }
false;public;4;11;;@Autowired public void configure(@Qualifier("original") TestBean tb, @Value("XXX#{tb0.name}YYY#{mySpecialAttr}ZZZ") String name, @Value("#{mySpecialAttr}") int age, @Value("${code} #{systemProperties.country}") String country) {     this.name = name.     this.age = age.     this.country = country.     this.tb = tb. }
false;public;1;4;;@Value("XXX#{tb0.name}YYY#{mySpecialAttr}ZZZ") public void setName(String name) {     this.name = name. }
false;public;1;4;;@Value("#{mySpecialAttr}") public void setAge(int age) {     this.age = age. }
false;public;1;4;;@Value("${code} #{systemProperties.country}") public void setCountry(String country) {     this.country = country. }
false;public;1;4;;@Autowired @Qualifier("original") public void setTb(TestBean tb) {     this.tb = tb. }
false;public;1;4;;@Value("#{systemProperties.name}") public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setCountry(String country) {     this.country = country. }
false;public;0;3;;public String getCountry() {     return country. }
false;public;1;3;;public void setCountry2(String country2) {     this.country2 = country2. }
false;public;0;3;;public String getCountry2() {     return country2. }
