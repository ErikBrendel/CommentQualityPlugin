commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     this.cache = context.getBean("mockCache", Cache.class).     this.cacheInterceptor = context.getBean(CacheInterceptor.class).     this.errorHandler = context.getBean(CacheErrorHandler.class).     this.simpleService = context.getBean(SimpleService.class). }
false;public;0;10;;@Test public void getFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get").     willThrow(exception).given(this.cache).get(0L).     Object result = this.simpleService.get(0L).     verify(this.errorHandler).handleCacheGetError(exception, cache, 0L).     verify(this.cache).get(0L).     // result of the invocation     verify(this.cache).put(0L, result). }
false;public;0;14;;@Test public void getAndPutFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get").     willThrow(exception).given(this.cache).get(0L).     // Update of the cache will fail as well     willThrow(exception).given(this.cache).put(0L, 0L).     Object counter = this.simpleService.get(0L).     willReturn(new SimpleValueWrapper(2L)).given(this.cache).get(0L).     Object counter2 = this.simpleService.get(0L).     Object counter3 = this.simpleService.get(0L).     assertNotSame(counter, counter2).     assertEquals(counter2, counter3). }
false;public;0;10;;@Test public void getFailProperException() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get").     willThrow(exception).given(this.cache).get(0L).     this.cacheInterceptor.setErrorHandler(new SimpleCacheErrorHandler()).     this.thrown.expect(is(exception)).     this.simpleService.get(0L). }
false;public;0;8;;@Test public void putFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put").     willThrow(exception).given(this.cache).put(0L, 0L).     this.simpleService.put(0L).     verify(this.errorHandler).handleCachePutError(exception, cache, 0L, 0L). }
false;public;0;10;;@Test public void putFailProperException() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put").     willThrow(exception).given(this.cache).put(0L, 0L).     this.cacheInterceptor.setErrorHandler(new SimpleCacheErrorHandler()).     this.thrown.expect(is(exception)).     this.simpleService.put(0L). }
false;public;0;8;;@Test public void evictFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict").     willThrow(exception).given(this.cache).evict(0L).     this.simpleService.evict(0L).     verify(this.errorHandler).handleCacheEvictError(exception, cache, 0L). }
false;public;0;10;;@Test public void evictFailProperException() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict").     willThrow(exception).given(this.cache).evict(0L).     this.cacheInterceptor.setErrorHandler(new SimpleCacheErrorHandler()).     this.thrown.expect(is(exception)).     this.simpleService.evict(0L). }
false;public;0;8;;@Test public void clearFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict").     willThrow(exception).given(this.cache).clear().     this.simpleService.clear().     verify(this.errorHandler).handleCacheClearError(exception, cache). }
false;public;0;10;;@Test public void clearFailProperException() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict").     willThrow(exception).given(this.cache).clear().     this.cacheInterceptor.setErrorHandler(new SimpleCacheErrorHandler()).     this.thrown.expect(is(exception)).     this.simpleService.clear(). }
false;public;0;5;;@Bean @Override public CacheErrorHandler errorHandler() {     return mock(CacheErrorHandler.class). }
false;public;0;4;;@Bean public SimpleService simpleService() {     return new SimpleService(). }
false;public;0;6;;@Bean public CacheManager cacheManager() {     SimpleCacheManager cacheManager = new SimpleCacheManager().     cacheManager.setCaches(Collections.singletonList(mockCache())).     return cacheManager. }
false;public;0;6;;@Bean public Cache mockCache() {     Cache cache = mock(Cache.class).     given(cache.getName()).willReturn("test").     return cache. }
false;public;1;4;;@Cacheable public Object get(long id) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@CachePut public Object put(long id) {     return this.counter.getAndIncrement(). }
false;public;1;3;;@CacheEvict public void evict(long id) { }
false;public;0;3;;@CacheEvict(allEntries = true) public void clear() { }
