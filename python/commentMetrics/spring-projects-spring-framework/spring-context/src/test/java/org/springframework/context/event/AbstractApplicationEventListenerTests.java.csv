commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;protected ResolvableType getGenericApplicationEventType(String fieldName) {     try {         return ResolvableType.forField(TestEvents.class.getField(fieldName)).     } catch (NoSuchFieldException ex) {         throw new IllegalStateException("No such field on Events '" + fieldName + "'").     } }
false;public;0;3;;public T getPayload() {     return this.payload. }
false;public;0;4;;@Override public ResolvableType getResolvableType() {     return this.resolvableType. }
false;protected;1;3;;protected <T> GenericTestEvent<T> createGenericTestEvent(T payload) {     return new GenericTestEvent<>(this, payload). }
false;public;1;3;;@Override public void onApplicationEvent(GenericTestEvent<?> event) { }
false;public;1;3;;@Override public void onApplicationEvent(GenericTestEvent<Object> event) { }
false;public;1;3;;@Override public void onApplicationEvent(GenericTestEvent<? extends RuntimeException> event) { }
false;public;1;3;;@Override public void onApplicationEvent(GenericTestEvent<String> event) { }
false;public;1;3;;@Override public void onApplicationEvent(ApplicationEvent event) { }
