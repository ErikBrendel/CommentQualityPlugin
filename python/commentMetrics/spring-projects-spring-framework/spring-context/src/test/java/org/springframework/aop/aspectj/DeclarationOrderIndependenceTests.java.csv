commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     aspect = (TopsyTurvyAspect) ctx.getBean("topsyTurvyAspect").     target = (TopsyTurvyTarget) ctx.getBean("topsyTurvyTarget"). }
false;public;0;4;;@Test public void testTargetIsSerializable() {     assertTrue("target bean is serializable", this.target instanceof Serializable). }
false;public;0;4;;@Test public void testTargetIsBeanNameAware() {     assertTrue("target bean is bean name aware", this.target instanceof BeanNameAware). }
false;public;0;7;;@Test public void testBeforeAdviceFiringOk() {     AspectCollaborator collab = new AspectCollaborator().     this.aspect.setCollaborator(collab).     this.target.doSomething().     assertTrue("before advice fired", collab.beforeFired). }
false;public;0;7;;@Test public void testAroundAdviceFiringOk() {     AspectCollaborator collab = new AspectCollaborator().     this.aspect.setCollaborator(collab).     this.target.getX().     assertTrue("around advice fired", collab.aroundFired). }
false;public;0;7;;@Test public void testAfterReturningFiringOk() {     AspectCollaborator collab = new AspectCollaborator().     this.aspect.setCollaborator(collab).     this.target.getX().     assertTrue("after returning advice fired", collab.afterReturningFired). }
false;public;1;4;;@Override public void setBeanName(String name) {     this.beanName = name. }
false;;0;1;;void beforeAdviceFired().
false;;0;1;;void afterReturningAdviceFired().
false;;0;1;;void aroundAdviceFired().
false;public;1;3;;public void setCollaborator(Collaborator collaborator) {     this.collaborator = collaborator. }
false;public;0;3;;public void before() {     this.collaborator.beforeAdviceFired(). }
false;public;0;3;;public void afterReturning() {     this.collaborator.afterReturningAdviceFired(). }
false;public;1;5;;public Object around(ProceedingJoinPoint pjp) throws Throwable {     Object ret = pjp.proceed().     this.collaborator.aroundAdviceFired().     return ret. }
false;;0;1;;void doSomething().
false;;0;1;;int getX().
false;public;0;4;;@Override public void doSomething() {     this.x = 10. }
false;public;0;4;;@Override public int getX() {     return x. }
false;public;0;4;;@Override public void afterReturningAdviceFired() {     this.afterReturningFired = true. }
false;public;0;4;;@Override public void aroundAdviceFired() {     this.aroundFired = true. }
false;public;0;4;;@Override public void beforeAdviceFired() {     this.beforeFired = true. }
