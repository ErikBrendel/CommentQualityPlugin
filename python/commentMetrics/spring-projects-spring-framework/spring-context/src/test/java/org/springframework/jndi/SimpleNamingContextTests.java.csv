# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleNamingContextTests -> @Test 	public void testCreateInitialContext() throws Exception;1328020251;Demonstrates how emptyActivatedContextBuilder() method can be_used repeatedly, and how it affects creating a new InitialContext();@Test_	public void testCreateInitialContext() throws Exception {_		SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		String name = "foo"__		Object o = new Object()__		builder.bind(name, o)__		_		Context ctx = new InitialContext()__		assertTrue(ctx.lookup(name) == o)__		_		ctx.unbind(name)__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}__		_		builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}_		Object o2 = new Object()__		builder.bind(name, o2)__		assertEquals(ctx.lookup(name), o2)__	};demonstrates,how,empty,activated,context,builder,method,can,be,used,repeatedly,and,how,it,affects,creating,a,new,initial,context;test,public,void,test,create,initial,context,throws,exception,simple,naming,context,builder,builder,simple,naming,context,builder,empty,activated,context,builder,string,name,foo,object,o,new,object,builder,bind,name,o,context,ctx,new,initial,context,assert,true,ctx,lookup,name,o,ctx,unbind,name,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,builder,simple,naming,context,builder,empty,activated,context,builder,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,object,o2,new,object,builder,bind,name,o2,assert,equals,ctx,lookup,name,o2
SimpleNamingContextTests -> @Test 	public void testCreateInitialContext() throws Exception;1356735495;Demonstrates how emptyActivatedContextBuilder() method can be_used repeatedly, and how it affects creating a new InitialContext();@Test_	public void testCreateInitialContext() throws Exception {_		SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		String name = "foo"__		Object o = new Object()__		builder.bind(name, o)__		_		Context ctx = new InitialContext()__		assertTrue(ctx.lookup(name) == o)__		_		ctx.unbind(name)__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}__		_		builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}_		Object o2 = new Object()__		builder.bind(name, o2)__		assertEquals(ctx.lookup(name), o2)__	};demonstrates,how,empty,activated,context,builder,method,can,be,used,repeatedly,and,how,it,affects,creating,a,new,initial,context;test,public,void,test,create,initial,context,throws,exception,simple,naming,context,builder,builder,simple,naming,context,builder,empty,activated,context,builder,string,name,foo,object,o,new,object,builder,bind,name,o,context,ctx,new,initial,context,assert,true,ctx,lookup,name,o,ctx,unbind,name,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,builder,simple,naming,context,builder,empty,activated,context,builder,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,object,o2,new,object,builder,bind,name,o2,assert,equals,ctx,lookup,name,o2
SimpleNamingContextTests -> @Test 	public void testCreateInitialContext() throws Exception;1362408075;Demonstrates how emptyActivatedContextBuilder() method can be_used repeatedly, and how it affects creating a new InitialContext();@Test_	public void testCreateInitialContext() throws Exception {_		SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		String name = "foo"__		Object o = new Object()__		builder.bind(name, o)__		_		Context ctx = new InitialContext()__		assertTrue(ctx.lookup(name) == o)__		_		ctx.unbind(name)__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}__		_		builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}_		Object o2 = new Object()__		builder.bind(name, o2)__		assertEquals(ctx.lookup(name), o2)__	};demonstrates,how,empty,activated,context,builder,method,can,be,used,repeatedly,and,how,it,affects,creating,a,new,initial,context;test,public,void,test,create,initial,context,throws,exception,simple,naming,context,builder,builder,simple,naming,context,builder,empty,activated,context,builder,string,name,foo,object,o,new,object,builder,bind,name,o,context,ctx,new,initial,context,assert,true,ctx,lookup,name,o,ctx,unbind,name,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,builder,simple,naming,context,builder,empty,activated,context,builder,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,object,o2,new,object,builder,bind,name,o2,assert,equals,ctx,lookup,name,o2
SimpleNamingContextTests -> @Test 	public void testCreateInitialContext() throws Exception;1385507683;Demonstrates how emptyActivatedContextBuilder() method can be_used repeatedly, and how it affects creating a new InitialContext();@Test_	public void testCreateInitialContext() throws Exception {_		SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		String name = "foo"__		Object o = new Object()__		builder.bind(name, o)__		_		Context ctx = new InitialContext()__		assertTrue(ctx.lookup(name) == o)__		_		ctx.unbind(name)__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}__		_		builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}_		Object o2 = new Object()__		builder.bind(name, o2)__		assertEquals(ctx.lookup(name), o2)__	};demonstrates,how,empty,activated,context,builder,method,can,be,used,repeatedly,and,how,it,affects,creating,a,new,initial,context;test,public,void,test,create,initial,context,throws,exception,simple,naming,context,builder,builder,simple,naming,context,builder,empty,activated,context,builder,string,name,foo,object,o,new,object,builder,bind,name,o,context,ctx,new,initial,context,assert,true,ctx,lookup,name,o,ctx,unbind,name,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,builder,simple,naming,context,builder,empty,activated,context,builder,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,object,o2,new,object,builder,bind,name,o2,assert,equals,ctx,lookup,name,o2
SimpleNamingContextTests -> @Test 	public void testCreateInitialContext() throws Exception;1411165756;Demonstrates how emptyActivatedContextBuilder() method can be_used repeatedly, and how it affects creating a new InitialContext();@Test_	public void testCreateInitialContext() throws Exception {_		SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		String name = "foo"__		Object o = new Object()__		builder.bind(name, o)__		_		Context ctx = new InitialContext()__		assertTrue(ctx.lookup(name) == o)__		_		ctx.unbind(name)__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}__		_		builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}_		Object o2 = new Object()__		builder.bind(name, o2)__		assertEquals(ctx.lookup(name), o2)__	};demonstrates,how,empty,activated,context,builder,method,can,be,used,repeatedly,and,how,it,affects,creating,a,new,initial,context;test,public,void,test,create,initial,context,throws,exception,simple,naming,context,builder,builder,simple,naming,context,builder,empty,activated,context,builder,string,name,foo,object,o,new,object,builder,bind,name,o,context,ctx,new,initial,context,assert,true,ctx,lookup,name,o,ctx,unbind,name,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,builder,simple,naming,context,builder,empty,activated,context,builder,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,object,o2,new,object,builder,bind,name,o2,assert,equals,ctx,lookup,name,o2
SimpleNamingContextTests -> @Test 	public void testCreateInitialContext() throws Exception;1467730834;Demonstrates how emptyActivatedContextBuilder() method can be_used repeatedly, and how it affects creating a new InitialContext();@Test_	public void testCreateInitialContext() throws Exception {_		SimpleNamingContextBuilder builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		String name = "foo"__		Object o = new Object()__		builder.bind(name, o)__		_		Context ctx = new InitialContext()__		assertTrue(ctx.lookup(name) == o)__		_		ctx.unbind(name)__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}__		_		builder = SimpleNamingContextBuilder.emptyActivatedContextBuilder()__		try {_			ctx = new InitialContext()__			ctx.lookup(name)__			fail("Should have thrown NamingException")__		}_		catch (NamingException ex) {_			_		}_		Object o2 = new Object()__		builder.bind(name, o2)__		assertEquals(ctx.lookup(name), o2)__	};demonstrates,how,empty,activated,context,builder,method,can,be,used,repeatedly,and,how,it,affects,creating,a,new,initial,context;test,public,void,test,create,initial,context,throws,exception,simple,naming,context,builder,builder,simple,naming,context,builder,empty,activated,context,builder,string,name,foo,object,o,new,object,builder,bind,name,o,context,ctx,new,initial,context,assert,true,ctx,lookup,name,o,ctx,unbind,name,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,builder,simple,naming,context,builder,empty,activated,context,builder,try,ctx,new,initial,context,ctx,lookup,name,fail,should,have,thrown,naming,exception,catch,naming,exception,ex,object,o2,new,object,builder,bind,name,o2,assert,equals,ctx,lookup,name,o2
