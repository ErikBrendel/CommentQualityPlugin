commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void tearDown() {     if (ctx != null) {         ctx.close().     } }
false;public;0;10;;@Test public void withFixedRateTask() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(FixedRateTaskConfig.class).     assertEquals(2, ctx.getBean(ScheduledTaskHolder.class).getScheduledTasks().size()).     Thread.sleep(100).     assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10)). }
false;public;0;10;;@Test public void withSubclass() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(FixedRateTaskConfigSubclass.class).     assertEquals(2, ctx.getBean(ScheduledTaskHolder.class).getScheduledTasks().size()).     Thread.sleep(100).     assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10)). }
false;public;0;13;;@Test public void withExplicitScheduler() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(ExplicitSchedulerConfig.class).     assertEquals(1, ctx.getBean(ScheduledTaskHolder.class).getScheduledTasks().size()).     Thread.sleep(100).     assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10)).     assertThat(ctx.getBean(ExplicitSchedulerConfig.class).threadName, startsWith("explicitScheduler-")).     assertTrue(Arrays.asList(ctx.getDefaultListableBeanFactory().getDependentBeans("myTaskScheduler")).contains(TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)). }
false;public;0;5;;@Test public void withExplicitSchedulerAmbiguity_andSchedulingEnabled() {     // No exception raised as of 4.3, aligned with the behavior for @Async methods (SPR-14030)     ctx = new AnnotationConfigApplicationContext(AmbiguousExplicitSchedulerConfig.class). }
false;public;0;11;;@Test public void withExplicitScheduledTaskRegistrar() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(ExplicitScheduledTaskRegistrarConfig.class).     assertEquals(1, ctx.getBean(ScheduledTaskHolder.class).getScheduledTasks().size()).     Thread.sleep(100).     assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThanOrEqualTo(10)).     assertThat(ctx.getBean(ExplicitScheduledTaskRegistrarConfig.class).threadName, startsWith("explicitScheduler1")). }
false;public;0;4;;@Test public void withAmbiguousTaskSchedulers_butNoActualTasks() {     ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withAmbiguousTaskSchedulers_butNoActualTasks.class). }
false;public;0;5;;@Test public void withAmbiguousTaskSchedulers_andSingleTask() {     // No exception raised as of 4.3, aligned with the behavior for @Async methods (SPR-14030)     ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withAmbiguousTaskSchedulers_andSingleTask.class). }
false;public;0;10;;@Test public void withAmbiguousTaskSchedulers_andSingleTask_disambiguatedByScheduledTaskRegistrarBean() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withAmbiguousTaskSchedulers_andSingleTask_disambiguatedByScheduledTaskRegistrar.class).     Thread.sleep(100).     assertThat(ctx.getBean(ThreadAwareWorker.class).executedByThread, startsWith("explicitScheduler2-")). }
false;public;0;10;;@Test public void withAmbiguousTaskSchedulers_andSingleTask_disambiguatedBySchedulerNameAttribute() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withAmbiguousTaskSchedulers_andSingleTask_disambiguatedBySchedulerNameAttribute.class).     Thread.sleep(100).     assertThat(ctx.getBean(ThreadAwareWorker.class).executedByThread, startsWith("explicitScheduler2-")). }
false;public;0;9;;@Test public void withTaskAddedVia_configureTasks() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(SchedulingEnabled_withTaskAddedVia_configureTasks.class).     Thread.sleep(100).     assertThat(ctx.getBean(ThreadAwareWorker.class).executedByThread, startsWith("taskScheduler-")). }
false;public;0;9;;@Test public void withTriggerTask() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(TriggerTaskConfig.class).     Thread.sleep(100).     assertThat(ctx.getBean(AtomicInteger.class).get(), greaterThan(1)). }
false;public;0;13;;@Test public void withInitiallyDelayedFixedRateTask() throws InterruptedException {     Assume.group(TestGroup.PERFORMANCE).     ctx = new AnnotationConfigApplicationContext(FixedRateTaskConfig_withInitialDelay.class).     Thread.sleep(1950).     AtomicInteger counter = ctx.getBean(AtomicInteger.class).     // The @Scheduled method should have been called at least once but     // not more times than the delay allows.     assertThat(counter.get(), both(greaterThan(0)).and(lessThanOrEqualTo(10))). }
false;public;1;4;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.addFixedRateTask(() -> {     }, 100). }
false;public;0;4;;@Bean public AtomicInteger counter() {     return new AtomicInteger(). }
false;public;0;4;;@Scheduled(fixedRate = 10) public void task() {     counter().incrementAndGet(). }
false;public;0;6;;@Bean public TaskScheduler myTaskScheduler() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler-").     return scheduler. }
false;public;0;4;;@Bean public AtomicInteger counter() {     return new AtomicInteger(). }
false;public;0;5;;@Scheduled(fixedRate = 10) public void task() {     threadName = Thread.currentThread().getName().     counter().incrementAndGet(). }
false;public;0;6;;@Bean public TaskScheduler taskScheduler1() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler1").     return scheduler. }
false;public;0;6;;@Bean public TaskScheduler taskScheduler2() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler2").     return scheduler. }
false;public;0;3;;@Scheduled(fixedRate = 10) public void task() { }
false;public;0;6;;@Bean public TaskScheduler taskScheduler1() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler1").     return scheduler. }
false;public;0;6;;@Bean public TaskScheduler taskScheduler2() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler2").     return scheduler. }
false;public;0;4;;@Bean public AtomicInteger counter() {     return new AtomicInteger(). }
false;public;0;5;;@Scheduled(fixedRate = 10) public void task() {     threadName = Thread.currentThread().getName().     counter().incrementAndGet(). }
false;public;1;4;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.setScheduler(taskScheduler1()). }
false;public;0;6;;@Bean public TaskScheduler taskScheduler1() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler1").     return scheduler. }
false;public;0;6;;@Bean public TaskScheduler taskScheduler2() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler2").     return scheduler. }
false;public;0;3;;@Scheduled(fixedRate = 10L) public void task() { }
false;public;0;6;;@Bean public TaskScheduler taskScheduler1() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler1").     return scheduler. }
false;public;0;6;;@Bean public TaskScheduler taskScheduler2() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler2").     return scheduler. }
false;public;0;4;;@Scheduled(fixedRate = 10) public void task() {     worker().executedByThread = Thread.currentThread().getName(). }
false;public;0;4;;@Bean public ThreadAwareWorker worker() {     return new ThreadAwareWorker(). }
false;public;1;4;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.setScheduler(taskScheduler2()). }
false;public;0;6;;@Bean public TaskScheduler taskScheduler1() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler1-").     return scheduler. }
false;public;0;6;;@Bean public TaskScheduler taskScheduler2() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler2-").     return scheduler. }
false;public;0;4;;@Scheduled(fixedRate = 10) public void task() {     worker().executedByThread = Thread.currentThread().getName(). }
false;public;0;4;;@Bean public ThreadAwareWorker worker() {     return new ThreadAwareWorker(). }
false;public;0;6;;@Bean public TaskScheduler taskScheduler1() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler1-").     return scheduler. }
false;public;0;6;;@Bean public TaskScheduler taskScheduler2() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.setThreadNamePrefix("explicitScheduler2-").     return scheduler. }
false;public;1;4;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.setScheduler(taskScheduler2()). }
false;public;0;4;;@Bean public ThreadAwareWorker worker() {     return new ThreadAwareWorker(). }
false;public;0;4;;@Bean public TaskScheduler taskScheduler() {     return new ThreadPoolTaskScheduler(). }
false;public;0;4;;@Override public void run() {     worker().executedByThread = Thread.currentThread().getName(). }
false;public;1;12;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.setScheduler(taskScheduler()).     taskRegistrar.addFixedRateTask(new IntervalTask(new Runnable() {          @Override         public void run() {             worker().executedByThread = Thread.currentThread().getName().         }     }, 10, 0)). }
false;public;0;4;;@Bean public AtomicInteger counter() {     return new AtomicInteger(). }
false;public;0;8;;@Bean public TaskScheduler scheduler() {     ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler().     scheduler.initialize().     scheduler.schedule(() -> counter().incrementAndGet(), triggerContext -> new Date(new Date().getTime() + 10)).     return scheduler. }
false;public;0;4;;@Bean public AtomicInteger counter() {     return new AtomicInteger(). }
false;public;0;4;;@Scheduled(initialDelay = 1000, fixedRate = 100) public void task() {     counter().incrementAndGet(). }
