commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected ConfigurableApplicationContext getApplicationContext() {     return new GenericXmlApplicationContext("/org/springframework/cache/config/annotationDrivenCacheNamespace.xml"). }
false;public;0;6;;@Test public void testKeyStrategy() {     CacheInterceptor ci = this.ctx.getBean("org.springframework.cache.interceptor.CacheInterceptor#0", CacheInterceptor.class).     assertSame(this.ctx.getBean("keyGenerator"), ci.getKeyGenerator()). }
false;public;0;9;;@Test public void cacheResolver() {     ConfigurableApplicationContext context = new GenericXmlApplicationContext("/org/springframework/cache/config/annotationDrivenCacheNamespace-resolver.xml").     CacheInterceptor ci = context.getBean(CacheInterceptor.class).     assertSame(context.getBean("cacheResolver"), ci.getCacheResolver()).     context.close(). }
false;public;0;9;;@Test public void bothSetOnlyResolverIsUsed() {     ConfigurableApplicationContext context = new GenericXmlApplicationContext("/org/springframework/cache/config/annotationDrivenCacheNamespace-manager-resolver.xml").     CacheInterceptor ci = context.getBean(CacheInterceptor.class).     assertSame(context.getBean("cacheResolver"), ci.getCacheResolver()).     context.close(). }
false;public;0;6;;@Test public void testCacheErrorHandler() {     CacheInterceptor ci = this.ctx.getBean("org.springframework.cache.interceptor.CacheInterceptor#0", CacheInterceptor.class).     assertSame(this.ctx.getBean("errorHandler", CacheErrorHandler.class), ci.getErrorHandler()). }
