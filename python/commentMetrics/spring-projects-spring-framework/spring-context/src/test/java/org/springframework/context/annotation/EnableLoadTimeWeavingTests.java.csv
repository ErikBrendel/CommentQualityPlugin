commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void control() {     GenericXmlApplicationContext ctx = new GenericXmlApplicationContext(getClass(), "EnableLoadTimeWeavingTests-context.xml").     ctx.getBean("loadTimeWeaver", LoadTimeWeaver.class). }
false;public;0;8;;@Test public void enableLTW_withAjWeavingDisabled() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(EnableLTWConfig_withAjWeavingDisabled.class).     ctx.refresh().     LoadTimeWeaver loadTimeWeaver = ctx.getBean("loadTimeWeaver", LoadTimeWeaver.class).     verifyZeroInteractions(loadTimeWeaver). }
false;public;0;10;;@Test public void enableLTW_withAjWeavingAutodetect() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(EnableLTWConfig_withAjWeavingAutodetect.class).     ctx.refresh().     LoadTimeWeaver loadTimeWeaver = ctx.getBean("loadTimeWeaver", LoadTimeWeaver.class).     // no expectations -> a class file transformer should NOT be added     // because no META-INF/aop.xml is present on the classpath     verifyZeroInteractions(loadTimeWeaver). }
false;public;0;8;;@Test public void enableLTW_withAjWeavingEnabled() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(EnableLTWConfig_withAjWeavingEnabled.class).     ctx.refresh().     LoadTimeWeaver loadTimeWeaver = ctx.getBean("loadTimeWeaver", LoadTimeWeaver.class).     verify(loadTimeWeaver).addTransformer(isA(ClassFileTransformer.class)). }
false;public;0;4;;@Override public LoadTimeWeaver getLoadTimeWeaver() {     return mock(LoadTimeWeaver.class). }
false;public;0;4;;@Override public LoadTimeWeaver getLoadTimeWeaver() {     return mock(LoadTimeWeaver.class). }
false;public;0;4;;@Override public LoadTimeWeaver getLoadTimeWeaver() {     return mock(LoadTimeWeaver.class). }
