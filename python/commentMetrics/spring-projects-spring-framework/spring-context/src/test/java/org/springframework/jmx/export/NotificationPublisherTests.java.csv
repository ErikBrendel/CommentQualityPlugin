commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSimpleBean() throws Exception {     // start the MBeanExporter     ConfigurableApplicationContext ctx = loadContext("org/springframework/jmx/export/notificationPublisherTests.xml").     this.server.addNotificationListener(ObjectNameManager.getInstance("spring:type=Publisher"), listener, null, null).     MyNotificationPublisher publisher = (MyNotificationPublisher) ctx.getBean("publisher").     assertNotNull("NotificationPublisher should not be null", publisher.getNotificationPublisher()).     publisher.sendNotification().     assertEquals("Notification not sent", 1, listener.count). }
false;public;0;14;;@Test public void testSimpleBeanRegisteredManually() throws Exception {     // start the MBeanExporter     ConfigurableApplicationContext ctx = loadContext("org/springframework/jmx/export/notificationPublisherTests.xml").     MBeanExporter exporter = (MBeanExporter) ctx.getBean("exporter").     MyNotificationPublisher publisher = new MyNotificationPublisher().     exporter.registerManagedResource(publisher, ObjectNameManager.getInstance("spring:type=Publisher2")).     this.server.addNotificationListener(ObjectNameManager.getInstance("spring:type=Publisher2"), listener, null, null).     assertNotNull("NotificationPublisher should not be null", publisher.getNotificationPublisher()).     publisher.sendNotification().     assertEquals("Notification not sent", 1, listener.count). }
false;public;0;11;;@Test public void testMBean() throws Exception {     // start the MBeanExporter     ConfigurableApplicationContext ctx = loadContext("org/springframework/jmx/export/notificationPublisherTests.xml").     this.server.addNotificationListener(ObjectNameManager.getInstance("spring:type=PublisherMBean"), listener, null, null).     MyNotificationPublisherMBean publisher = (MyNotificationPublisherMBean) ctx.getBean("publisherMBean").     publisher.sendNotification().     assertEquals("Notification not sent", 1, listener.count). }
false;public;0;16;;/* 	@Test 	public void testStandardMBean() throws Exception { 		// start the MBeanExporter 		ApplicationContext ctx = new ClassPathXmlApplicationContext("org/springframework/jmx/export/notificationPublisherTests.xml"). 		this.server.addNotificationListener(ObjectNameManager.getInstance("spring:type=PublisherStandardMBean"), listener, null, null).  		MyNotificationPublisherStandardMBean publisher = (MyNotificationPublisherStandardMBean) ctx.getBean("publisherStandardMBean"). 		publisher.sendNotification(). 		assertEquals("Notification not sent", 1, listener.count). 	} 	*/ @Test public void testLazyInit() throws Exception {     // start the MBeanExporter     ConfigurableApplicationContext ctx = loadContext("org/springframework/jmx/export/notificationPublisherLazyTests.xml").     assertFalse("Should not have instantiated the bean yet", ctx.getBeanFactory().containsSingleton("publisher")).     // need to touch the MBean proxy     server.getAttribute(ObjectNameManager.getInstance("spring:type=Publisher"), "Name").     this.server.addNotificationListener(ObjectNameManager.getInstance("spring:type=Publisher"), listener, null, null).     MyNotificationPublisher publisher = (MyNotificationPublisher) ctx.getBean("publisher").     assertNotNull("NotificationPublisher should not be null", publisher.getNotificationPublisher()).     publisher.sendNotification().     assertEquals("Notification not sent", 1, listener.count). }
false;public;2;5;;@Override public void handleNotification(Notification notification, Object handback) {     this.lastNotification = notification.     this.count++. }
false;public;0;4;;@SuppressWarnings("unused") public int getCount() {     return count. }
false;public;0;4;;@SuppressWarnings("unused") public Notification getLastNotification() {     return lastNotification. }
false;public;1;4;;@Override public void setNotificationPublisher(NotificationPublisher notificationPublisher) {     this.notificationPublisher = notificationPublisher. }
false;public;0;3;;public NotificationPublisher getNotificationPublisher() {     return notificationPublisher. }
false;public;0;3;;public void sendNotification() {     this.notificationPublisher.sendNotification(new Notification("test", this, 1)). }
false;public;0;3;;public String getName() {     return "Rob Harrop". }
false;public;1;5;;@Override public Object getAttribute(String attribute) throws AttributeNotFoundException, MBeanException, ReflectionException {     return null. }
false;public;1;4;;@Override public void setAttribute(Attribute attribute) throws AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException { }
false;public;1;4;;@Override public AttributeList getAttributes(String[] attributes) {     return null. }
false;public;1;4;;@Override public AttributeList setAttributes(AttributeList attributes) {     return null. }
false;public;3;5;;@Override public Object invoke(String actionName, Object[] params, String[] signature) throws MBeanException, ReflectionException {     return null. }
false;public;0;5;;@Override public MBeanInfo getMBeanInfo() {     return new MBeanInfo(MyNotificationPublisherMBean.class.getName(), "", new MBeanAttributeInfo[0], new MBeanConstructorInfo[0], new MBeanOperationInfo[0], new MBeanNotificationInfo[0]). }
false;public;0;3;;public void sendNotification() {     sendNotification(new Notification("test", this, 1)). }
false;public;0;4;;@Override public void sendNotification() {     sendNotification(new Notification("test", this, 1)). }
false;;0;1;;void sendNotification().
