commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Create a test {@link ClassLoader} that disable the use of the index, even  * if resources are present at the standard location.  * @param classLoader the classloader to use for all other operations  * @return a test {@link ClassLoader} that has no index  * @see CandidateComponentsIndexLoader#COMPONENTS_RESOURCE_LOCATION  */ ;/**  * Create a test {@link ClassLoader} that disable the use of the index, even  * if resources are present at the standard location.  * @param classLoader the classloader to use for all other operations  * @return a test {@link ClassLoader} that has no index  * @see CandidateComponentsIndexLoader#COMPONENTS_RESOURCE_LOCATION  */ public static ClassLoader disableIndex(ClassLoader classLoader) {     return new CandidateComponentsTestClassLoader(classLoader, Collections.enumeration(Collections.emptyList())). }
true;public,static;2;11;/**  * Create a test {@link ClassLoader} that creates an index with the  * specified {@link Resource} instances  * @param classLoader the classloader to use for all other operations  * @return a test {@link ClassLoader} with an index built based on the  * specified resources.  */ ;/**  * Create a test {@link ClassLoader} that creates an index with the  * specified {@link Resource} instances  * @param classLoader the classloader to use for all other operations  * @return a test {@link ClassLoader} with an index built based on the  * specified resources.  */ public static ClassLoader index(ClassLoader classLoader, Resource... resources) {     return new CandidateComponentsTestClassLoader(classLoader, Collections.enumeration(Stream.of(resources).map(r -> {         try {             return r.getURL().         } catch (Exception ex) {             throw new IllegalArgumentException("Invalid resource " + r, ex).         }     }).collect(Collectors.toList()))). }
false;public;1;10;;@Override public Enumeration<URL> getResources(String name) throws IOException {     if (CandidateComponentsIndexLoader.COMPONENTS_RESOURCE_LOCATION.equals(name)) {         if (this.resourceUrls != null) {             return this.resourceUrls.         }         throw this.cause.     }     return super.getResources(name). }
