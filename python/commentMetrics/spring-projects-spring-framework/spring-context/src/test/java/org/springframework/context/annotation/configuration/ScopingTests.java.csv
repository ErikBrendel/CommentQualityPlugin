commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     customScope = new CustomScope().     ctx = createContext(ScopedConfigurationClass.class). }
false;public;0;6;;@After public void tearDown() throws Exception {     if (ctx != null) {         ctx.close().     } }
false;private;1;10;;private GenericApplicationContext createContext(Class<?> configClass) {     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     if (customScope != null) {         beanFactory.registerScope(SCOPE, customScope).     }     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(configClass)).     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(beanFactory).     ctx.refresh().     return ctx. }
false;public;0;4;;@Test public void testScopeOnClasses() throws Exception {     genericTestScope("scopedClass"). }
false;public;0;4;;@Test public void testScopeOnInterfaces() throws Exception {     genericTestScope("scopedInterface"). }
false;private;1;33;;private void genericTestScope(String beanName) throws Exception {     String message = "scope is ignored".     Object bean1 = ctx.getBean(beanName).     Object bean2 = ctx.getBean(beanName).     assertSame(message, bean1, bean2).     Object bean3 = ctx.getBean(beanName).     assertSame(message, bean1, bean3).     // make the scope create a new object     customScope.createNewScope = true.     Object newBean1 = ctx.getBean(beanName).     assertNotSame(message, bean1, newBean1).     Object sameBean1 = ctx.getBean(beanName).     assertSame(message, newBean1, sameBean1).     // make the scope create a new object     customScope.createNewScope = true.     Object newBean2 = ctx.getBean(beanName).     assertNotSame(message, newBean1, newBean2).     // make the scope create a new object .. again     customScope.createNewScope = true.     Object newBean3 = ctx.getBean(beanName).     assertNotSame(message, newBean2, newBean3). }
false;public;0;16;;@Test public void testSameScopeOnDifferentBeans() throws Exception {     Object beanAInScope = ctx.getBean("scopedClass").     Object beanBInScope = ctx.getBean("scopedInterface").     assertNotSame(beanAInScope, beanBInScope).     customScope.createNewScope = true.     Object newBeanAInScope = ctx.getBean("scopedClass").     Object newBeanBInScope = ctx.getBean("scopedInterface").     assertNotSame(newBeanAInScope, newBeanBInScope).     assertNotSame(newBeanAInScope, beanAInScope).     assertNotSame(newBeanBInScope, beanBInScope). }
false;public;0;9;;@Test public void testRawScopes() throws Exception {     String beanName = "scopedProxyInterface".     // get hidden bean     Object bean = ctx.getBean("scopedTarget." + beanName).     assertFalse(bean instanceof ScopedObject). }
false;public;0;31;;@Test public void testScopedProxyConfiguration() throws Exception {     TestBean singleton = (TestBean) ctx.getBean("singletonWithScopedInterfaceDep").     ITestBean spouse = singleton.getSpouse().     assertTrue("scoped bean is not wrapped by the scoped-proxy", spouse instanceof ScopedObject).     String beanName = "scopedProxyInterface".     String scopedBeanName = "scopedTarget." + beanName.     // get hidden bean     assertEquals(flag, spouse.getName()).     ITestBean spouseFromBF = (ITestBean) ctx.getBean(scopedBeanName).     assertEquals(spouse.getName(), spouseFromBF.getName()).     // the scope proxy has kicked in     assertNotSame(spouse, spouseFromBF).     // create a new bean     customScope.createNewScope = true.     // get the bean again from the BF     spouseFromBF = (ITestBean) ctx.getBean(scopedBeanName).     // make sure the name has been updated     assertSame(spouse.getName(), spouseFromBF.getName()).     assertNotSame(spouse, spouseFromBF).     // get the bean again     spouseFromBF = (ITestBean) ctx.getBean(scopedBeanName).     assertSame(spouse.getName(), spouseFromBF.getName()). }
false;public;0;32;;@Test public void testScopedProxyConfigurationWithClasses() throws Exception {     TestBean singleton = (TestBean) ctx.getBean("singletonWithScopedClassDep").     ITestBean spouse = singleton.getSpouse().     assertTrue("scoped bean is not wrapped by the scoped-proxy", spouse instanceof ScopedObject).     String beanName = "scopedProxyClass".     String scopedBeanName = "scopedTarget." + beanName.     // get hidden bean     assertEquals(flag, spouse.getName()).     TestBean spouseFromBF = (TestBean) ctx.getBean(scopedBeanName).     assertEquals(spouse.getName(), spouseFromBF.getName()).     // the scope proxy has kicked in     assertNotSame(spouse, spouseFromBF).     // create a new bean     customScope.createNewScope = true.     flag = "boo".     // get the bean again from the BF     spouseFromBF = (TestBean) ctx.getBean(scopedBeanName).     // make sure the name has been updated     assertSame(spouse.getName(), spouseFromBF.getName()).     assertNotSame(spouse, spouseFromBF).     // get the bean again     spouseFromBF = (TestBean) ctx.getBean(scopedBeanName).     assertSame(spouse.getName(), spouseFromBF.getName()). }
false;public;0;2;;public void doSomething() { }
false;public;0;3;;public Foo getFoo() {     return foo. }
false;public;0;4;;@Bean @Scope(proxyMode = ScopedProxyMode.INTERFACES) public Object invalidProxyOnPredefinedScopes() {     return new Object(). }
false;public;0;7;;@Bean @MyScope public TestBean scopedClass() {     TestBean tb = new TestBean().     tb.setName(flag).     return tb. }
false;public;0;7;;@Bean @MyScope public ITestBean scopedInterface() {     TestBean tb = new TestBean().     tb.setName(flag).     return tb. }
false;public;0;7;;@Bean @MyProxiedScope public ITestBean scopedProxyInterface() {     TestBean tb = new TestBean().     tb.setName(flag).     return tb. }
false;public;0;6;;@MyProxiedScope public TestBean scopedProxyClass() {     TestBean tb = new TestBean().     tb.setName(flag).     return tb. }
false;public;0;6;;@Bean public TestBean singletonWithScopedClassDep() {     TestBean singleton = new TestBean().     singleton.setSpouse(scopedProxyClass()).     return singleton. }
false;public;0;6;;@Bean public TestBean singletonWithScopedInterfaceDep() {     TestBean singleton = new TestBean().     singleton.setSpouse(scopedProxyInterface()).     return singleton. }
false;public;2;17;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     if (createNewScope) {         beans.clear().         // reset the flag back         createNewScope = false.     }     Object bean = beans.get(name).     // name, create one     if (bean == null) {         beans.put(name, objectFactory.getObject()).     }     return beans.get(name). }
false;public;0;4;;@Override public String getConversationId() {     return null. }
false;public;2;4;;@Override public void registerDestructionCallback(String name, Runnable callback) {     throw new IllegalStateException("Not supposed to be called"). }
false;public;1;4;;@Override public Object remove(String name) {     return beans.remove(name). }
false;public;1;4;;@Override public Object resolveContextualObject(String key) {     return null. }
