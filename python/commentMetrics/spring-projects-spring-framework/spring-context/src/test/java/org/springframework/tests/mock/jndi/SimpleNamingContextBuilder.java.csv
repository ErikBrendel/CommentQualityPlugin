commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;4;/**  * Checks if a SimpleNamingContextBuilder is active.  * @return the current SimpleNamingContextBuilder instance,  * or {@code null} if none  */ ;/**  * Checks if a SimpleNamingContextBuilder is active.  * @return the current SimpleNamingContextBuilder instance,  * or {@code null} if none  */ @Nullable public static SimpleNamingContextBuilder getCurrentContextBuilder() {     return activated. }
true;public,static;0;14;/**  * If no SimpleNamingContextBuilder is already configuring JNDI,  * create and activate one. Otherwise take the existing activated  * SimpleNamingContextBuilder, clear it and return it.  * <p>This is mainly intended for test suites that want to  * reinitialize JNDI bindings from scratch repeatedly.  * @return an empty SimpleNamingContextBuilder that can be used  * to control JNDI bindings  */ ;/**  * If no SimpleNamingContextBuilder is already configuring JNDI,  * create and activate one. Otherwise take the existing activated  * SimpleNamingContextBuilder, clear it and return it.  * <p>This is mainly intended for test suites that want to  * reinitialize JNDI bindings from scratch repeatedly.  * @return an empty SimpleNamingContextBuilder that can be used  * to control JNDI bindings  */ public static SimpleNamingContextBuilder emptyActivatedContextBuilder() throws NamingException {     SimpleNamingContextBuilder builder = activated.     if (builder != null) {         // Clear already activated context builder.         builder.clear().     } else {         // Create and activate new context builder.         builder = new SimpleNamingContextBuilder().         // The activate() call will cause an assignment to the activated variable.         builder.activate().     }     return builder. }
true;public;0;14;/**  * Register the context builder by registering it with the JNDI NamingManager.  * Note that once this has been done, {@code new InitialContext()} will always  * return a context from this factory. Use the {@code emptyActivatedContextBuilder()}  * static method to get an empty context (for example, in test methods).  * @throws IllegalStateException if there's already a naming context builder  * registered with the JNDI NamingManager  */ ;/**  * Register the context builder by registering it with the JNDI NamingManager.  * Note that once this has been done, {@code new InitialContext()} will always  * return a context from this factory. Use the {@code emptyActivatedContextBuilder()}  * static method to get an empty context (for example, in test methods).  * @throws IllegalStateException if there's already a naming context builder  * registered with the JNDI NamingManager  */ public void activate() throws IllegalStateException, NamingException {     logger.info("Activating simple JNDI environment").     synchronized (initializationLock) {         if (!initialized) {             Assert.state(!NamingManager.hasInitialContextFactoryBuilder(), "Cannot activate SimpleNamingContextBuilder: there is already a JNDI provider registered. " + "Note that JNDI is a JVM-wide service, shared at the JVM system class loader level, " + "with no reset option. As a consequence, a JNDI provider must only be registered once per JVM.").             NamingManager.setInitialContextFactoryBuilder(this).             initialized = true.         }     }     activated = this. }
true;public;0;4;/**  * Temporarily deactivate this context builder. It will remain registered with  * the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory  * (if configured) instead of exposing its own bound objects.  * <p>Call {@code activate()} again in order to expose this context builder's own  * bound objects again. Such activate/deactivate sequences can be applied any number  * of times (e.g. within a larger integration test suite running in the same VM).  * @see #activate()  */ ;/**  * Temporarily deactivate this context builder. It will remain registered with  * the JNDI NamingManager but will delegate to the standard JNDI InitialContextFactory  * (if configured) instead of exposing its own bound objects.  * <p>Call {@code activate()} again in order to expose this context builder's own  * bound objects again. Such activate/deactivate sequences can be applied any number  * of times (e.g. within a larger integration test suite running in the same VM).  * @see #activate()  */ public void deactivate() {     logger.info("Deactivating simple JNDI environment").     activated = null. }
true;public;0;3;/**  * Clear all bindings in this context builder, while keeping it active.  */ ;/**  * Clear all bindings in this context builder, while keeping it active.  */ public void clear() {     this.boundObjects.clear(). }
true;public;2;6;/**  * Bind the given object under the given name, for all naming contexts  * that this context builder will generate.  * @param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")  * @param obj the object to bind (e.g. a DataSource implementation)  */ ;/**  * Bind the given object under the given name, for all naming contexts  * that this context builder will generate.  * @param name the JNDI name of the object (e.g. "java:comp/env/jdbc/myds")  * @param obj the object to bind (e.g. a DataSource implementation)  */ public void bind(String name, Object obj) {     if (logger.isInfoEnabled()) {         logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]").     }     this.boundObjects.put(name, obj). }
true;public;1;33;/**  * Simple InitialContextFactoryBuilder implementation,  * creating a new SimpleNamingContext instance.  * @see SimpleNamingContext  */ ;/**  * Simple InitialContextFactoryBuilder implementation,  * creating a new SimpleNamingContext instance.  * @see SimpleNamingContext  */ @Override @SuppressWarnings("unchecked") public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?, ?> environment) {     if (activated == null && environment != null) {         Object icf = environment.get(Context.INITIAL_CONTEXT_FACTORY).         if (icf != null) {             Class<?> icfClass.             if (icf instanceof Class) {                 icfClass = (Class<?>) icf.             } else if (icf instanceof String) {                 icfClass = ClassUtils.resolveClassName((String) icf, getClass().getClassLoader()).             } else {                 throw new IllegalArgumentException("Invalid value type for environment key [" + Context.INITIAL_CONTEXT_FACTORY + "]: " + icf.getClass().getName()).             }             if (!InitialContextFactory.class.isAssignableFrom(icfClass)) {                 throw new IllegalArgumentException("Specified class does not implement [" + InitialContextFactory.class.getName() + "]: " + icf).             }             try {                 return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance().             } catch (Throwable ex) {                 throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex).             }         }     }     // Default case...     return env -> new SimpleNamingContext("", this.boundObjects, (Hashtable<String, Object>) env). }
