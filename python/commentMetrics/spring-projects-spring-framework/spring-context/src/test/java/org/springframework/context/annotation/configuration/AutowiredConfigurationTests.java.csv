commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testAutowiredConfigurationDependencies() {     ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(AutowiredConfigurationTests.class.getSimpleName() + ".xml", AutowiredConfigurationTests.class).     assertThat(context.getBean("colour", Colour.class), equalTo(Colour.RED)).     assertThat(context.getBean("testBean", TestBean.class).getName(), equalTo(Colour.RED.toString())). }
false;public;0;8;;@Test public void testAutowiredConfigurationMethodDependencies() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AutowiredMethodConfig.class, ColorConfig.class).     assertThat(context.getBean(Colour.class), equalTo(Colour.RED)).     assertThat(context.getBean(TestBean.class).getName(), equalTo("RED-RED")). }
false;public;0;8;;@Test public void testAutowiredConfigurationMethodDependenciesWithOptionalAndAvailable() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(OptionalAutowiredMethodConfig.class, ColorConfig.class).     assertThat(context.getBean(Colour.class), equalTo(Colour.RED)).     assertThat(context.getBean(TestBean.class).getName(), equalTo("RED-RED")). }
false;public;0;8;;@Test public void testAutowiredConfigurationMethodDependenciesWithOptionalAndNotAvailable() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(OptionalAutowiredMethodConfig.class).     assertTrue(context.getBeansOfType(Colour.class).isEmpty()).     assertThat(context.getBean(TestBean.class).getName(), equalTo("")). }
false;public;0;11;;@Test public void testAutowiredSingleConstructorSupported() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(new ClassPathResource("annotation-config.xml", AutowiredConstructorConfig.class)).     GenericApplicationContext ctx = new GenericApplicationContext(factory).     ctx.registerBeanDefinition("config1", new RootBeanDefinition(AutowiredConstructorConfig.class)).     ctx.registerBeanDefinition("config2", new RootBeanDefinition(ColorConfig.class)).     ctx.refresh().     assertSame(ctx.getBean(AutowiredConstructorConfig.class).colour, ctx.getBean(Colour.class)). }
false;public;0;11;;@Test public void testObjectFactoryConstructorWithTypeVariable() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(new ClassPathResource("annotation-config.xml", ObjectFactoryConstructorConfig.class)).     GenericApplicationContext ctx = new GenericApplicationContext(factory).     ctx.registerBeanDefinition("config1", new RootBeanDefinition(ObjectFactoryConstructorConfig.class)).     ctx.registerBeanDefinition("config2", new RootBeanDefinition(ColorConfig.class)).     ctx.refresh().     assertSame(ctx.getBean(ObjectFactoryConstructorConfig.class).colour, ctx.getBean(Colour.class)). }
false;public;0;11;;@Test public void testAutowiredAnnotatedConstructorSupported() {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     new XmlBeanDefinitionReader(factory).loadBeanDefinitions(new ClassPathResource("annotation-config.xml", MultipleConstructorConfig.class)).     GenericApplicationContext ctx = new GenericApplicationContext(factory).     ctx.registerBeanDefinition("config1", new RootBeanDefinition(MultipleConstructorConfig.class)).     ctx.registerBeanDefinition("config2", new RootBeanDefinition(ColorConfig.class)).     ctx.refresh().     assertSame(ctx.getBean(MultipleConstructorConfig.class).colour, ctx.getBean(Colour.class)). }
false;public;0;6;;@Test public void testValueInjection() {     ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("ValueInjectionTests.xml", AutowiredConfigurationTests.class).     doTestValueInjection(context). }
false;public;0;6;;@Test public void testValueInjectionWithMetaAnnotation() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ValueConfigWithMetaAnnotation.class).     doTestValueInjection(context). }
false;public;0;6;;@Test public void testValueInjectionWithAliasedMetaAnnotation() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ValueConfigWithAliasedMetaAnnotation.class).     doTestValueInjection(context). }
false;public;0;6;;@Test public void testValueInjectionWithProviderFields() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ValueConfigWithProviderFields.class).     doTestValueInjection(context). }
false;public;0;6;;@Test public void testValueInjectionWithProviderConstructorArguments() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ValueConfigWithProviderConstructorArguments.class).     doTestValueInjection(context). }
false;public;0;6;;@Test public void testValueInjectionWithProviderMethodArguments() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ValueConfigWithProviderMethodArguments.class).     doTestValueInjection(context). }
false;private;1;25;;private void doTestValueInjection(BeanFactory context) {     System.clearProperty("myProp").     TestBean testBean = context.getBean("testBean", TestBean.class).     assertNull(testBean.getName()).     testBean = context.getBean("testBean2", TestBean.class).     assertNull(testBean.getName()).     System.setProperty("myProp", "foo").     testBean = context.getBean("testBean", TestBean.class).     assertThat(testBean.getName(), equalTo("foo")).     testBean = context.getBean("testBean2", TestBean.class).     assertThat(testBean.getName(), equalTo("foo")).     System.clearProperty("myProp").     testBean = context.getBean("testBean", TestBean.class).     assertNull(testBean.getName()).     testBean = context.getBean("testBean2", TestBean.class).     assertNull(testBean.getName()). }
false;public;0;9;;@Test public void testCustomPropertiesWithClassPathContext() throws IOException {     ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("AutowiredConfigurationTests-custom.xml", AutowiredConfigurationTests.class).     TestBean testBean = context.getBean("testBean", TestBean.class).     assertThat(testBean.getName(), equalTo("localhost")).     assertThat(testBean.getAge(), equalTo(contentLength())). }
false;public;0;11;;@Test public void testCustomPropertiesWithGenericContext() throws IOException {     GenericApplicationContext context = new GenericApplicationContext().     new XmlBeanDefinitionReader(context).loadBeanDefinitions(new ClassPathResource("AutowiredConfigurationTests-custom.xml", AutowiredConfigurationTests.class)).     context.refresh().     TestBean testBean = context.getBean("testBean", TestBean.class).     assertThat(testBean.getName(), equalTo("localhost")).     assertThat(testBean.getAge(), equalTo(contentLength())). }
false;private;0;3;;private int contentLength() throws IOException {     return (int) new ClassPathResource("do_not_delete_me.txt").contentLength(). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(colour.toString()). }
false;public;2;4;;@Bean public TestBean testBean(Colour colour, List<Colour> colours) {     return new TestBean(colour.toString() + "-" + colours.get(0).toString()). }
false;public;2;9;;@Bean public TestBean testBean(Optional<Colour> colour, Optional<List<Colour>> colours) {     if (!colour.isPresent() && !colours.isPresent()) {         return new TestBean("").     } else {         return new TestBean(colour.get().toString() + "-" + colours.get().get(0).toString()).     } }
false;public;0;4;;@Bean public Colour colour() {     return Colour.RED. }
false;public;1;4;;@Value("#{systemProperties[myProp]}") public void setName2(String name) {     this.name2 = name. }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean() {     return new TestBean(name). }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean2() {     return new TestBean(name2). }
false;public;1;4;;@MyProp public void setName2(String name) {     this.name2 = name. }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean() {     return new TestBean(name). }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean2() {     return new TestBean(name2). }
false;public;1;4;;@AliasedProp("#{systemProperties[myProp]}") public void setName2(String name) {     this.name2 = name. }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean() {     return new TestBean(name). }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean2() {     return new TestBean(name2). }
false;public;1;4;;@Value("#{systemProperties[myProp]}") public void setName2(Provider<String> name) {     this.name2 = name. }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean() {     return new TestBean(name.get()). }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean2() {     return new TestBean(name2.get()). }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean() {     return new TestBean(name.get()). }
false;public;0;4;;@Bean @Scope("prototype") public TestBean testBean2() {     return new TestBean(name2.get()). }
false;public;1;4;;@Bean @Scope("prototype") public TestBean testBean(@Value("#{systemProperties[myProp]}") Provider<String> name) {     return new TestBean(name.get()). }
false;public;1;4;;@Bean @Scope("prototype") public TestBean testBean2(@Value("#{systemProperties[myProp]}") Provider<String> name2) {     return new TestBean(name2.get()). }
false;public;1;4;;@Value("#{myProps.hostname}") public void setHostname(String hostname) {     this.hostname = hostname. }
false;public;1;4;;@Value("do_not_delete_me.txt") public void setResource(Resource resource) {     this.resource = resource. }
false;public;0;4;;@Bean public TestBean testBean() throws IOException {     return new TestBean(hostname, (int) resource.contentLength()). }
