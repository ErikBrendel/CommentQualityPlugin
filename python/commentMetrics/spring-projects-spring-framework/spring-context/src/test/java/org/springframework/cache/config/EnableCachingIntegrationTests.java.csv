commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void fooServiceWithInterface() {     this.context = new AnnotationConfigApplicationContext(FooConfig.class).     FooService service = this.context.getBean(FooService.class).     fooGetSimple(service). }
false;public;0;6;;@Test public void fooServiceWithInterfaceCglib() {     this.context = new AnnotationConfigApplicationContext(FooConfigCglib.class).     FooService service = this.context.getBean(FooService.class).     fooGetSimple(service). }
false;private;1;9;;private void fooGetSimple(FooService service) {     Cache cache = getCache().     Object key = new Object().     assertCacheMiss(key, cache).     Object value = service.getSimple(key).     assertCacheHit(key, value, cache). }
false;public;0;14;;@Test public void beanConditionOff() {     this.context = new AnnotationConfigApplicationContext(BeanConditionConfig.class).     FooService service = this.context.getBean(FooService.class).     Cache cache = getCache().     Object key = new Object().     service.getWithCondition(key).     assertCacheMiss(key, cache).     service.getWithCondition(key).     assertCacheMiss(key, cache).     assertEquals(2, this.context.getBean(BeanConditionConfig.Bar.class).count). }
false;public;0;19;;@Test public void beanConditionOn() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.setEnvironment(new MockEnvironment().withProperty("bar.enabled", "true")).     ctx.register(BeanConditionConfig.class).     ctx.refresh().     this.context = ctx.     FooService service = this.context.getBean(FooService.class).     Cache cache = getCache().     Object key = new Object().     Object value = service.getWithCondition(key).     assertCacheHit(key, value, cache).     value = service.getWithCondition(key).     assertCacheHit(key, value, cache).     assertEquals(2, this.context.getBean(BeanConditionConfig.Bar.class).count). }
false;private;0;3;;private Cache getCache() {     return this.context.getBean(CacheManager.class).getCache("testCache"). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return CacheTestUtils.createSimpleCacheManager("testCache"). }
false;public;0;4;;@Bean public FooService fooService() {     return new FooServiceImpl(). }
false;public;0;4;;@Bean public FooService fooService() {     return new FooServiceImpl(). }
false;;1;1;;Object getSimple(Object key).
false;;1;1;;Object getWithCondition(Object key).
false;public;1;5;;@Override @Cacheable public Object getSimple(Object key) {     return this.counter.getAndIncrement(). }
false;public;1;5;;@Override @Cacheable(condition = "@bar.enabled") public Object getWithCondition(Object key) {     return this.counter.getAndIncrement(). }
false;public;0;4;;@Bean public Bar bar() {     return new Bar(Boolean.valueOf(env.getProperty("bar.enabled"))). }
false;public;0;4;;public boolean isEnabled() {     this.count++.     return this.enabled. }
