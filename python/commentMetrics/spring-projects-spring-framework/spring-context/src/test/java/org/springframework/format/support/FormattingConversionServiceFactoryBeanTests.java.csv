commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testDefaultFormattersOn() throws Exception {     FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean().     factory.afterPropertiesSet().     FormattingConversionService fcs = factory.getObject().     TypeDescriptor descriptor = new TypeDescriptor(TestBean.class.getDeclaredField("pattern")).     LocaleContextHolder.setLocale(Locale.GERMAN).     try {         Object value = fcs.convert("15,00", TypeDescriptor.valueOf(String.class), descriptor).         assertEquals(15.0, value).         value = fcs.convert(15.0, descriptor, TypeDescriptor.valueOf(String.class)).         assertEquals("15", value).     } finally {         LocaleContextHolder.resetLocaleContext().     } }
false;public;0;16;;@Test public void testDefaultFormattersOff() throws Exception {     FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean().     factory.setRegisterDefaultFormatters(false).     factory.afterPropertiesSet().     FormattingConversionService fcs = factory.getObject().     TypeDescriptor descriptor = new TypeDescriptor(TestBean.class.getDeclaredField("pattern")).     try {         fcs.convert("15,00", TypeDescriptor.valueOf(String.class), descriptor).         fail("This format should not be parseable").     } catch (ConversionFailedException ex) {         assertTrue(ex.getCause() instanceof NumberFormatException).     } }
false;public;0;20;;@Test public void testCustomFormatter() throws Exception {     FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean().     Set<Object> formatters = new HashSet<>().     formatters.add(new TestBeanFormatter()).     formatters.add(new SpecialIntAnnotationFormatterFactory()).     factory.setFormatters(formatters).     factory.afterPropertiesSet().     FormattingConversionService fcs = factory.getObject().     TestBean testBean = fcs.convert("5", TestBean.class).     assertEquals(5, testBean.getSpecialInt()).     assertEquals("5", fcs.convert(testBean, String.class)).     TypeDescriptor descriptor = new TypeDescriptor(TestBean.class.getDeclaredField("specialInt")).     Object value = fcs.convert(":5", TypeDescriptor.valueOf(String.class), descriptor).     assertEquals(5, value).     value = fcs.convert(5, descriptor, TypeDescriptor.valueOf(String.class)).     assertEquals(":5", value). }
false;public;0;13;;@Test public void testFormatterRegistrar() throws Exception {     FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean().     Set<FormatterRegistrar> registrars = new HashSet<>().     registrars.add(new TestFormatterRegistrar()).     factory.setFormatterRegistrars(registrars).     factory.afterPropertiesSet().     FormattingConversionService fcs = factory.getObject().     TestBean testBean = fcs.convert("5", TestBean.class).     assertEquals(5, testBean.getSpecialInt()).     assertEquals("5", fcs.convert(testBean, String.class)). }
false;public;0;14;;@Test public void testInvalidFormatter() throws Exception {     FormattingConversionServiceFactoryBean factory = new FormattingConversionServiceFactoryBean().     Set<Object> formatters = new HashSet<>().     formatters.add(new Object()).     factory.setFormatters(formatters).     try {         factory.afterPropertiesSet().         fail("Expected formatter to be rejected").     } catch (IllegalArgumentException ex) {     // expected     } }
false;public;0;3;;public int getSpecialInt() {     return specialInt. }
false;public;1;3;;public void setSpecialInt(int field) {     this.specialInt = field. }
false;public;2;4;;@Override public String print(TestBean object, Locale locale) {     return String.valueOf(object.getSpecialInt()). }
false;public;2;6;;@Override public TestBean parse(String text, Locale locale) throws ParseException {     TestBean object = new TestBean().     object.setSpecialInt(Integer.parseInt(text)).     return object. }
false;public;0;4;;@Override public Set<Class<?>> getFieldTypes() {     return fieldTypes. }
false;public;2;4;;@Override public String print(Integer object, Locale locale) {     return ":" + object.toString(). }
false;public;2;11;;@Override public Printer<?> getPrinter(SpecialInt annotation, Class<?> fieldType) {     assertEquals("aliased", annotation.value()).     assertEquals("aliased", annotation.alias()).     return new Printer<Integer>() {          @Override         public String print(Integer object, Locale locale) {             return ":" + object.toString().         }     }. }
false;public;2;4;;@Override public Integer parse(String text, Locale locale) throws ParseException {     return Integer.parseInt(text.substring(1)). }
false;public;2;11;;@Override public Parser<?> getParser(SpecialInt annotation, Class<?> fieldType) {     assertEquals("aliased", annotation.value()).     assertEquals("aliased", annotation.alias()).     return new Parser<Integer>() {          @Override         public Integer parse(String text, Locale locale) throws ParseException {             return Integer.parseInt(text.substring(1)).         }     }. }
false;public;1;4;;@Override public void registerFormatters(FormatterRegistry registry) {     registry.addFormatter(new TestBeanFormatter()). }
