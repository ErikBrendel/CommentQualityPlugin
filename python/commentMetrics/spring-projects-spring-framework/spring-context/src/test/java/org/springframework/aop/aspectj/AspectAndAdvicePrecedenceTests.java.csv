commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     highPrecedenceAspect = (PrecedenceTestAspect) ctx.getBean("highPrecedenceAspect").     lowPrecedenceAspect = (PrecedenceTestAspect) ctx.getBean("lowPrecedenceAspect").     highPrecedenceSpringAdvice = (SimpleSpringBeforeAdvice) ctx.getBean("highPrecedenceSpringAdvice").     lowPrecedenceSpringAdvice = (SimpleSpringBeforeAdvice) ctx.getBean("lowPrecedenceSpringAdvice").     testBean = (ITestBean) ctx.getBean("testBean"). }
false;public;0;9;;@Test public void testAdviceOrder() {     PrecedenceTestAspect.Collaborator collaborator = new PrecedenceVerifyingCollaborator().     this.highPrecedenceAspect.setCollaborator(collaborator).     this.lowPrecedenceAspect.setCollaborator(collaborator).     this.highPrecedenceSpringAdvice.setCollaborator(collaborator).     this.lowPrecedenceSpringAdvice.setCollaborator(collaborator).     this.testBean.getAge(). }
false;private;1;12;;private void checkAdvice(String whatJustHappened) {     // System.out.println("[" + adviceInvocationNumber + "] " + whatJustHappened + " ==> " + EXPECTED[adviceInvocationNumber]).     if (adviceInvocationNumber > (EXPECTED.length - 1)) {         fail("Too many advice invocations, expecting " + EXPECTED.length + " but had " + adviceInvocationNumber).     }     String expecting = EXPECTED[adviceInvocationNumber++].     if (!whatJustHappened.equals(expecting)) {         fail("Expecting '" + expecting + "' on advice invocation " + adviceInvocationNumber + " but got '" + whatJustHappened + "'").     } }
false;public;1;4;;@Override public void beforeAdviceOne(String beanName) {     checkAdvice("beforeAdviceOne(" + beanName + ")"). }
false;public;1;4;;@Override public void beforeAdviceTwo(String beanName) {     checkAdvice("beforeAdviceTwo(" + beanName + ")"). }
false;public;1;4;;@Override public void aroundAdviceOne(String beanName) {     checkAdvice("aroundAdviceOne(" + beanName + ")"). }
false;public;1;4;;@Override public void aroundAdviceTwo(String beanName) {     checkAdvice("aroundAdviceTwo(" + beanName + ")"). }
false;public;1;4;;@Override public void afterAdviceOne(String beanName) {     checkAdvice("afterAdviceOne(" + beanName + ")"). }
false;public;1;4;;@Override public void afterAdviceTwo(String beanName) {     checkAdvice("afterAdviceTwo(" + beanName + ")"). }
false;public;1;4;;@Override public void setBeanName(String name) {     this.name = name. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return order. }
false;public;1;3;;public void setCollaborator(Collaborator collaborator) {     this.collaborator = collaborator. }
false;public;0;3;;public void beforeAdviceOne() {     this.collaborator.beforeAdviceOne(this.name). }
false;public;0;3;;public void beforeAdviceTwo() {     this.collaborator.beforeAdviceTwo(this.name). }
false;public;1;12;;public int aroundAdviceOne(ProceedingJoinPoint pjp) {     int ret = -1.     this.collaborator.aroundAdviceOne(this.name).     try {         ret = ((Integer) pjp.proceed()).intValue().     } catch (Throwable t) {         throw new RuntimeException(t).     }     this.collaborator.aroundAdviceOne(this.name).     return ret. }
false;public;1;12;;public int aroundAdviceTwo(ProceedingJoinPoint pjp) {     int ret = -1.     this.collaborator.aroundAdviceTwo(this.name).     try {         ret = ((Integer) pjp.proceed()).intValue().     } catch (Throwable t) {         throw new RuntimeException(t).     }     this.collaborator.aroundAdviceTwo(this.name).     return ret. }
false;public;0;3;;public void afterAdviceOne() {     this.collaborator.afterAdviceOne(this.name). }
false;public;0;3;;public void afterAdviceTwo() {     this.collaborator.afterAdviceTwo(this.name). }
false;;1;1;;void beforeAdviceOne(String beanName).
false;;1;1;;void beforeAdviceTwo(String beanName).
false;;1;1;;void aroundAdviceOne(String beanName).
false;;1;1;;void aroundAdviceTwo(String beanName).
false;;1;1;;void afterAdviceOne(String beanName).
false;;1;1;;void afterAdviceTwo(String beanName).
true;public;3;5;/* (non-Javadoc) 	 * @see org.springframework.aop.MethodBeforeAdvice#before(java.lang.reflect.Method, java.lang.Object[], java.lang.Object) 	 */ ;/* (non-Javadoc) 	 * @see org.springframework.aop.MethodBeforeAdvice#before(java.lang.reflect.Method, java.lang.Object[], java.lang.Object) 	 */ @Override public void before(Method method, Object[] args, @Nullable Object target) throws Throwable {     this.collaborator.beforeAdviceOne(this.name). }
false;public;1;3;;public void setCollaborator(PrecedenceTestAspect.Collaborator collaborator) {     this.collaborator = collaborator. }
true;public;1;4;/* (non-Javadoc) 	 * @see org.springframework.beans.factory.BeanNameAware#setBeanName(java.lang.String) 	 */ ;/* (non-Javadoc) 	 * @see org.springframework.beans.factory.BeanNameAware#setBeanName(java.lang.String) 	 */ @Override public void setBeanName(String name) {     this.name = name. }
