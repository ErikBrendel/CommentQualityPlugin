commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.context = new ClassPathXmlApplicationContext("annotationDrivenContext.xml", AnnotationDrivenBeanDefinitionParserTests.class). }
false;public;0;4;;@Test public void asyncPostProcessorRegistered() {     assertTrue(context.containsBean(TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME)). }
false;public;0;4;;@Test public void scheduledPostProcessorRegistered() {     assertTrue(context.containsBean(TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)). }
false;public;0;6;;@Test public void asyncPostProcessorExecutorReference() {     Object executor = context.getBean("testExecutor").     Object postProcessor = context.getBean(TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME).     assertSame(executor, ((Supplier) new DirectFieldAccessor(postProcessor).getPropertyValue("executor")).get()). }
false;public;0;6;;@Test public void scheduledPostProcessorSchedulerReference() {     Object scheduler = context.getBean("testScheduler").     Object postProcessor = context.getBean(TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME).     assertSame(scheduler, new DirectFieldAccessor(postProcessor).getPropertyValue("scheduler")). }
false;public;0;6;;@Test public void asyncPostProcessorExceptionHandlerReference() {     Object exceptionHandler = context.getBean("testExceptionHandler").     Object postProcessor = context.getBean(TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME).     assertSame(exceptionHandler, ((Supplier) new DirectFieldAccessor(postProcessor).getPropertyValue("exceptionHandler")).get()). }
