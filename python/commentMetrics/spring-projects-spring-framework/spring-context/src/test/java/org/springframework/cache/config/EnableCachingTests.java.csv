commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;/**  * hook into superclass suite of tests  */ ;/**  * hook into superclass suite of tests  */ @Override protected ConfigurableApplicationContext getApplicationContext() {     return new AnnotationConfigApplicationContext(EnableCachingConfig.class). }
false;public;0;5;;@Test public void testKeyStrategy() {     CacheInterceptor ci = this.ctx.getBean(CacheInterceptor.class).     assertSame(this.ctx.getBean("keyGenerator", KeyGenerator.class), ci.getKeyGenerator()). }
false;public;0;5;;@Test public void testCacheErrorHandler() {     CacheInterceptor ci = this.ctx.getBean(CacheInterceptor.class).     assertSame(this.ctx.getBean("errorHandler", CacheErrorHandler.class), ci.getErrorHandler()). }
false;public;0;6;;@Test public void singleCacheManagerBean() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(SingleCacheManagerConfig.class).     ctx.refresh(). }
false;public;0;11;;@Test public void multipleCacheManagerBeans() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(MultiCacheManagerConfig.class).     try {         ctx.refresh().     } catch (IllegalStateException ex) {         assertTrue(ex.getMessage().contains("no unique bean of type CacheManager")).     } }
false;public;0;6;;@Test public void multipleCacheManagerBeans_implementsCachingConfigurer() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(MultiCacheManagerConfigurer.class).     // does not throw an exception     ctx.refresh(). }
false;public;0;13;;@Test public void multipleCachingConfigurers() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(MultiCacheManagerConfigurer.class, EnableCachingConfig.class).     try {         ctx.refresh().     } catch (BeanCreationException ex) {         Throwable root = ex.getRootCause().         assertTrue(root instanceof IllegalStateException).         assertTrue(root.getMessage().contains("implementations of CachingConfigurer")).     } }
false;public;0;11;;@Test public void noCacheManagerBeans() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(EmptyConfig.class).     try {         ctx.refresh().     } catch (IllegalStateException ex) {         assertTrue(ex.getMessage().contains("no bean of type CacheManager")).     } }
false;public;0;9;;@Test public void emptyConfigSupport() {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(EmptyConfigSupportConfig.class).     CacheInterceptor ci = context.getBean(CacheInterceptor.class).     assertNotNull(ci.getCacheResolver()).     assertEquals(SimpleCacheResolver.class, ci.getCacheResolver().getClass()).     assertSame(context.getBean(CacheManager.class), ((SimpleCacheResolver) ci.getCacheResolver()).getCacheManager()).     context.close(). }
false;public;0;8;;@Test public void bothSetOnlyResolverIsUsed() {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(FullCachingConfig.class).     CacheInterceptor ci = context.getBean(CacheInterceptor.class).     assertSame(context.getBean("cacheResolver"), ci.getCacheResolver()).     assertSame(context.getBean("keyGenerator"), ci.getKeyGenerator()).     context.close(). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return CacheTestUtils.createSimpleCacheManager("testCache", "primary", "secondary"). }
false;public;0;4;;@Bean public CacheableService<?> service() {     return new DefaultCacheableService(). }
false;public;0;4;;@Bean public CacheableService<?> classService() {     return new AnnotatedClassCacheableService(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SomeKeyGenerator(). }
false;public;0;5;;@Override @Bean public CacheErrorHandler errorHandler() {     return new SimpleCacheErrorHandler(). }
false;public;0;4;;@Bean public KeyGenerator customKeyGenerator() {     return new SomeCustomKeyGenerator(). }
false;public;0;4;;@Bean public CacheManager customCacheManager() {     return CacheTestUtils.createSimpleCacheManager("testCache"). }
false;public;0;4;;@Bean public CacheManager cm1() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm1() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm2() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm1() {     return new NoOpCacheManager(). }
false;public;0;4;;@Bean public CacheManager cm2() {     return new NoOpCacheManager(). }
false;public;0;4;;@Override public CacheManager cacheManager() {     return cm1(). }
false;public;0;4;;@Override public KeyGenerator keyGenerator() {     return null. }
false;public;0;4;;@Bean public CacheManager cm() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SomeKeyGenerator(). }
false;public;0;5;;@Override @Bean public CacheResolver cacheResolver() {     return new NamedCacheResolver(cacheManager(), "foo"). }
