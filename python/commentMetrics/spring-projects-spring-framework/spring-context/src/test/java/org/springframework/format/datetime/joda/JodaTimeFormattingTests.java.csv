commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     setup(registrar). }
false;private;1;15;;private void setup(JodaTimeFormatterRegistrar registrar) {     conversionService = new FormattingConversionService().     DefaultConversionService.addDefaultConverters(conversionService).     registrar.registerFormatters(conversionService).     JodaTimeBean bean = new JodaTimeBean().     bean.getChildren().add(new JodaTimeBean()).     binder = new DataBinder(bean).     binder.setConversionService(conversionService).     LocaleContextHolder.setLocale(Locale.US).     JodaTimeContext context = new JodaTimeContext().     context.setTimeZone(DateTimeZone.forID("-05:00")).     JodaTimeContextHolder.setJodaTimeContext(context). }
false;public;0;5;;@After public void cleanup() {     LocaleContextHolder.setLocale(null).     JodaTimeContextHolder.setJodaTimeContext(null). }
false;public;0;7;;@Test public void testJodaTimePatternsForStyle() {     System.out.println(org.joda.time.format.DateTimeFormat.patternForStyle("SS", LocaleContextHolder.getLocale())).     System.out.println(org.joda.time.format.DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale())).     System.out.println(org.joda.time.format.DateTimeFormat.patternForStyle("LL", LocaleContextHolder.getLocale())).     System.out.println(org.joda.time.format.DateTimeFormat.patternForStyle("FF", LocaleContextHolder.getLocale())). }
false;public;0;8;;@Test public void testBindLocalDate() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;11;;@Test public void testBindLocalDateWithSpecificStyle() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setDateStyle("L").     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", "October 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("October 31, 2009", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;11;;@Test public void testBindLocalDateWithSpecificFormatter() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setDateFormatter(org.joda.time.format.DateTimeFormat.forPattern("yyyyMMdd")).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", "20091031").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("20091031", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;7;;@Test public void testBindLocalDateArray() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", new String[] { "10/31/09" }).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()). }
false;public;0;8;;@Test public void testBindLocalDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("Oct 31, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;8;;@Test public void testBindLocalDateAnnotatedWithError() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct 031, 2009").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getFieldErrorCount("localDateAnnotated")).     assertEquals("Oct 031, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;8;;@Test public void testBindNestedLocalDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("children[0].localDateAnnotated", "Oct 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("Oct 31, 2009", binder.getBindingResult().getFieldValue("children[0].localDateAnnotated")). }
false;public;0;9;;@Test public void testBindLocalDateAnnotatedWithDirectFieldAccess() {     binder.initDirectFieldAccess().     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("Oct 31, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;9;;@Test public void testBindLocalDateAnnotatedWithDirectFieldAccessAndError() {     binder.initDirectFieldAccess().     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct 031, 2009").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getFieldErrorCount("localDateAnnotated")).     assertEquals("Oct 031, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;8;;@Test public void testBindLocalTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", "12:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00 PM", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;11;;@Test public void testBindLocalTimeWithSpecificStyle() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setTimeStyle("M").     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", "12:00:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00 PM", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;11;;@Test public void testBindLocalTimeWithSpecificFormatter() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setTimeFormatter(org.joda.time.format.DateTimeFormat.forPattern("HHmmss")).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", "130000").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("130000", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;8;;@Test public void testBindLocalTimeAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTimeAnnotated", "12:00:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00 PM", binder.getBindingResult().getFieldValue("localTimeAnnotated")). }
false;public;0;10;;@Test public void testBindLocalDateTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTime", new LocalDateTime(2009, 10, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTime").toString().     assertTrue(value.startsWith("10/31/09")).     assertTrue(value.endsWith("12:00 PM")). }
false;public;0;10;;@Test public void testBindLocalDateTimeAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTimeAnnotated", new LocalDateTime(2009, 10, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTimeAnnotated").toString().     assertTrue(value.startsWith("Oct 31, 2009")).     assertTrue(value.endsWith("12:00 PM")). }
false;public;0;9;;@Test public void testBindDateTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTime", new DateTime(2009, 10, 31, 12, 0, ISOChronology.getInstanceUTC())).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("dateTime").toString().     assertTrue(value.startsWith("10/31/09")). }
false;public;0;13;;@Test public void testBindDateTimeWithSpecificStyle() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setDateTimeStyle("MM").     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTime", new LocalDateTime(2009, 10, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTime").toString().     assertTrue(value.startsWith("Oct 31, 2009")).     assertTrue(value.endsWith("12:00:00 PM")). }
false;public;0;11;;@Test public void testBindDateTimeISO() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setUseIsoFormat(true).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTime", "2009-10-31T12:00:00.000Z").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T07:00:00.000-05:00", binder.getBindingResult().getFieldValue("dateTime")). }
false;public;0;11;;@Test public void testBindDateTimeWithSpecificFormatter() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setDateTimeFormatter(org.joda.time.format.DateTimeFormat.forPattern("yyyyMMddHHmmss")).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTime", "20091031130000").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("20091031130000", binder.getBindingResult().getFieldValue("dateTime")). }
false;public;0;9;;@Test public void testBindDateTimeAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTimeAnnotated", new DateTime(2009, 10, 31, 12, 0, ISOChronology.getInstanceUTC())).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("dateTimeAnnotated").toString().     assertTrue(value.startsWith("Oct 31, 2009")). }
false;public;0;8;;@Test public void testBindDateTimeAnnotatedPattern() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTimeAnnotatedPattern", "10/31/09 12:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09 12:00 PM", binder.getBindingResult().getFieldValue("dateTimeAnnotatedPattern")). }
false;public;0;7;;@Test public void testBindDateTimeOverflow() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTimeAnnotatedPattern", "02/29/09 12:00 PM").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getErrorCount()). }
false;public;0;9;;@Test public void testBindDateTimeAnnotatedDefault() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTimeAnnotatedDefault", new DateTime(2009, 10, 31, 12, 0, ISOChronology.getInstanceUTC())).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("dateTimeAnnotatedDefault").toString().     assertTrue(value.startsWith("10/31/09")). }
false;public;0;8;;@Test public void testBindDateWithErrorAvoidingDateConstructor() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("date", "Sat, 12 Aug 1995 13:30:00 GMT").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getErrorCount()).     assertEquals("Sat, 12 Aug 1995 13:30:00 GMT", binder.getBindingResult().getFieldValue("date")). }
false;public;0;8;;@Test public void testBindDateWithoutErrorFallingBackToDateConstructor() {     DataBinder binder = new DataBinder(new JodaTimeBean()).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("date", "Sat, 12 Aug 1995 13:30:00 GMT").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()). }
false;public;0;8;;@Test public void testBindDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("dateAnnotated")). }
false;public;0;8;;@Test public void testBindCalendarAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("calendarAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("calendarAnnotated")). }
false;public;0;8;;@Test public void testBindLong() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("millis", "1256961600").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1256961600", binder.getBindingResult().getFieldValue("millis")). }
false;public;0;8;;@Test public void testBindLongAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("millisAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("millisAnnotated")). }
false;public;0;8;;@Test public void testBindISODate() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDate", "2009-10-31").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31", binder.getBindingResult().getFieldValue("isoDate")). }
false;public;0;8;;@Test public void testBindISOTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoTime", "12:00:00.000-05:00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00.000", binder.getBindingResult().getFieldValue("isoTime")). }
false;public;0;8;;@Test public void testBindISODateTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDateTime", "2009-10-31T12:00:00.000Z").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T07:00:00.000-05:00", binder.getBindingResult().getFieldValue("isoDateTime")). }
false;public;0;8;;@Test public void testBindInstantAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("instantAnnotated", "2009-10-31T12:00:00.000Z").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T07:00:00.000-05:00", binder.getBindingResult().getFieldValue("instantAnnotated")). }
false;public;0;8;;@Test public void testBindMutableDateTimeAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("mutableDateTimeAnnotated", "2009-10-31T12:00:00.000Z").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T07:00:00.000-05:00", binder.getBindingResult().getFieldValue("mutableDateTimeAnnotated")). }
false;public;0;10;;@Test public void dateToStringWithFormat() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     registrar.setDateTimeFormatter(org.joda.time.format.DateTimeFormat.shortDateTime()).     setup(registrar).     Date date = new Date().     Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class)).     String expected = JodaTimeContextHolder.getFormatter(org.joda.time.format.DateTimeFormat.shortDateTime(), Locale.US).print(new DateTime(date)).     assertEquals(expected, actual). }
false;public;0;7;;// SPR-10105 @Test @SuppressWarnings("deprecation") public void stringToDateWithoutGlobalFormat() {     String string = "Sat, 12 Aug 1995 13:30:00 GM".     Date date = this.conversionService.convert(string, Date.class).     assertThat(date, equalTo(new Date(string))). }
false;public;0;12;;// SPR-10105 @Test public void stringToDateWithGlobalFormat() {     JodaTimeFormatterRegistrar registrar = new JodaTimeFormatterRegistrar().     DateTimeFormatterFactory factory = new DateTimeFormatterFactory().     factory.setIso(ISO.DATE_TIME).     registrar.setDateTimeFormatter(factory.createDateTimeFormatter()).     setup(registrar).     // This is a format that cannot be parsed by new Date(String)     String string = "2009-10-31T07:00:00.000-05:00".     Date date = this.conversionService.convert(string, Date.class).     assertNotNull(date). }
false;public;0;8;;@Test public void testBindPeriod() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("period", "P6Y3M1D").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("period").toString().equals("P6Y3M1D")). }
false;public;0;8;;@Test public void testBindDuration() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("duration", "PT72.345S").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("duration").toString().equals("PT72.345S")). }
false;public;0;8;;@Test public void testBindYearMonth() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("yearMonth", "2007-12").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("yearMonth").toString().equals("2007-12")). }
false;public;0;8;;@Test public void testBindMonthDay() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("monthDay", "--12-03").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("monthDay").toString().equals("--12-03")). }
false;public;0;3;;public LocalDate getLocalDate() {     return localDate. }
false;public;1;3;;public void setLocalDate(LocalDate localDate) {     this.localDate = localDate. }
false;public;0;3;;public LocalDate getLocalDateAnnotated() {     return localDateAnnotated. }
false;public;1;3;;public void setLocalDateAnnotated(LocalDate localDateAnnotated) {     this.localDateAnnotated = localDateAnnotated. }
false;public;0;3;;public LocalTime getLocalTime() {     return localTime. }
false;public;1;3;;public void setLocalTime(LocalTime localTime) {     this.localTime = localTime. }
false;public;0;3;;public LocalTime getLocalTimeAnnotated() {     return localTimeAnnotated. }
false;public;1;3;;public void setLocalTimeAnnotated(LocalTime localTimeAnnotated) {     this.localTimeAnnotated = localTimeAnnotated. }
false;public;0;3;;public LocalDateTime getLocalDateTime() {     return localDateTime. }
false;public;1;3;;public void setLocalDateTime(LocalDateTime localDateTime) {     this.localDateTime = localDateTime. }
false;public;0;3;;public LocalDateTime getLocalDateTimeAnnotated() {     return localDateTimeAnnotated. }
false;public;1;3;;public void setLocalDateTimeAnnotated(LocalDateTime localDateTimeAnnotated) {     this.localDateTimeAnnotated = localDateTimeAnnotated. }
false;public;0;3;;public DateTime getDateTime() {     return dateTime. }
false;public;1;3;;public void setDateTime(DateTime dateTime) {     this.dateTime = dateTime. }
false;public;0;3;;public DateTime getDateTimeAnnotated() {     return dateTimeAnnotated. }
false;public;1;3;;public void setDateTimeAnnotated(DateTime dateTimeAnnotated) {     this.dateTimeAnnotated = dateTimeAnnotated. }
false;public;0;3;;public DateTime getDateTimeAnnotatedPattern() {     return dateTimeAnnotatedPattern. }
false;public;1;3;;public void setDateTimeAnnotatedPattern(DateTime dateTimeAnnotatedPattern) {     this.dateTimeAnnotatedPattern = dateTimeAnnotatedPattern. }
false;public;0;3;;public DateTime getDateTimeAnnotatedDefault() {     return dateTimeAnnotatedDefault. }
false;public;1;3;;public void setDateTimeAnnotatedDefault(DateTime dateTimeAnnotatedDefault) {     this.dateTimeAnnotatedDefault = dateTimeAnnotatedDefault. }
false;public;0;3;;public Date getDate() {     return date. }
false;public;1;3;;public void setDate(Date date) {     this.date = date. }
false;public;0;3;;public Date getDateAnnotated() {     return dateAnnotated. }
false;public;1;3;;public void setDateAnnotated(Date dateAnnotated) {     this.dateAnnotated = dateAnnotated. }
false;public;0;3;;public Calendar getCalendarAnnotated() {     return calendarAnnotated. }
false;public;1;3;;public void setCalendarAnnotated(Calendar calendarAnnotated) {     this.calendarAnnotated = calendarAnnotated. }
false;public;0;3;;public Long getMillis() {     return millis. }
false;public;1;3;;public void setMillis(Long millis) {     this.millis = millis. }
false;public;0;4;;@DateTimeFormat(style = "S-") public Long getMillisAnnotated() {     return millisAnnotated. }
false;public;1;3;;public void setMillisAnnotated(@DateTimeFormat(style = "S-") Long millisAnnotated) {     this.millisAnnotated = millisAnnotated. }
false;public;0;3;;public LocalDate getIsoDate() {     return isoDate. }
false;public;1;3;;public void setIsoDate(LocalDate isoDate) {     this.isoDate = isoDate. }
false;public;0;3;;public LocalTime getIsoTime() {     return isoTime. }
false;public;1;3;;public void setIsoTime(LocalTime isoTime) {     this.isoTime = isoTime. }
false;public;0;3;;public DateTime getIsoDateTime() {     return isoDateTime. }
false;public;1;3;;public void setIsoDateTime(DateTime isoDateTime) {     this.isoDateTime = isoDateTime. }
false;public;0;3;;public Instant getInstantAnnotated() {     return instantAnnotated. }
false;public;1;3;;public void setInstantAnnotated(Instant instantAnnotated) {     this.instantAnnotated = instantAnnotated. }
false;public;0;3;;public Instant getMutableDateTimeAnnotated() {     return mutableDateTimeAnnotated. }
false;public;1;3;;public void setMutableDateTimeAnnotated(Instant mutableDateTimeAnnotated) {     this.mutableDateTimeAnnotated = mutableDateTimeAnnotated. }
false;public;0;3;;public Period getPeriod() {     return period. }
false;public;1;3;;public void setPeriod(Period period) {     this.period = period. }
false;public;0;3;;public Duration getDuration() {     return duration. }
false;public;1;3;;public void setDuration(Duration duration) {     this.duration = duration. }
false;public;0;3;;public YearMonth getYearMonth() {     return yearMonth. }
false;public;1;3;;public void setYearMonth(YearMonth yearMonth) {     this.yearMonth = yearMonth. }
false;public;0;3;;public MonthDay getMonthDay() {     return monthDay. }
false;public;1;3;;public void setMonthDay(MonthDay monthDay) {     this.monthDay = monthDay. }
false;public;0;3;;public List<JodaTimeBean> getChildren() {     return children. }
