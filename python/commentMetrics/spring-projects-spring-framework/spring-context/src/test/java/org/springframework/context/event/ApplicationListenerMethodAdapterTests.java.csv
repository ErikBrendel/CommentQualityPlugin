commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void rawListener() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleRaw", ApplicationEvent.class).     supportsEventType(true, method, getGenericApplicationEventType("applicationEvent")). }
false;public;0;5;;@Test public void rawListenerWithGenericEvent() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleRaw", ApplicationEvent.class).     supportsEventType(true, method, getGenericApplicationEventType("stringEvent")). }
false;public;0;6;;@Test public void genericListener() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericString", GenericTestEvent.class).     supportsEventType(true, method, getGenericApplicationEventType("stringEvent")). }
false;public;0;6;;@Test public void genericListenerWrongParameterizedType() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericString", GenericTestEvent.class).     supportsEventType(false, method, getGenericApplicationEventType("longEvent")). }
false;public;0;5;;@Test public void listenerWithPayloadAndGenericInformation() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     supportsEventType(true, method, createGenericEventType(String.class)). }
false;public;0;5;;@Test public void listenerWithInvalidPayloadAndGenericInformation() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     supportsEventType(false, method, createGenericEventType(Integer.class)). }
false;public;0;5;;@Test public void listenerWithPayloadTypeErasure() {     // Always accept such event when the type is unknown     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     supportsEventType(true, method, ResolvableType.forClass(PayloadApplicationEvent.class)). }
false;public;0;6;;@Test public void listenerWithSubTypeSeveralGenerics() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     supportsEventType(true, method, ResolvableType.forClass(PayloadTestEvent.class)). }
false;public;0;5;;@Test public void listenerWithSubTypeSeveralGenericsResolved() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     supportsEventType(true, method, ResolvableType.forClass(PayloadStringTestEvent.class)). }
false;public;0;5;;@Test public void listenerWithAnnotationValue() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationValue").     supportsEventType(true, method, createGenericEventType(String.class)). }
false;public;0;5;;@Test public void listenerWithAnnotationClasses() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationClasses").     supportsEventType(true, method, createGenericEventType(String.class)). }
false;public;0;6;;@Test public void listenerWithAnnotationValueAndParameter() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationValueAndParameter", String.class).     supportsEventType(true, method, createGenericEventType(String.class)). }
false;public;0;7;;@Test public void listenerWithSeveralTypes() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringOrInteger").     supportsEventType(true, method, createGenericEventType(String.class)).     supportsEventType(true, method, createGenericEventType(Integer.class)).     supportsEventType(false, method, createGenericEventType(Double.class)). }
false;public;0;7;;@Test public void listenerWithTooManyParameters() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "tooManyParameters", String.class, String.class).     this.thrown.expect(IllegalStateException.class).     createTestInstance(method). }
false;public;0;6;;@Test public void listenerWithNoParameter() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "noParameter").     this.thrown.expect(IllegalStateException.class).     createTestInstance(method). }
false;public;0;7;;@Test public void listenerWithMoreThanOneParameter() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "moreThanOneParameter", String.class, Integer.class).     this.thrown.expect(IllegalStateException.class).     createTestInstance(method). }
false;public;0;7;;@Test public void defaultOrder() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericString", GenericTestEvent.class).     ApplicationListenerMethodAdapter adapter = createTestInstance(method).     assertEquals(0, adapter.getOrder()). }
false;public;0;7;;@Test public void specifiedOrder() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleRaw", ApplicationEvent.class).     ApplicationListenerMethodAdapter adapter = createTestInstance(method).     assertEquals(42, adapter.getOrder()). }
false;public;0;8;;@Test public void invokeListener() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericString", GenericTestEvent.class).     GenericTestEvent<String> event = createGenericTestEvent("test").     invokeListener(method, event).     verify(this.sampleEvents, times(1)).handleGenericString(event). }
false;public;0;8;;@Test public void invokeListenerWithGenericEvent() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericString", GenericTestEvent.class).     GenericTestEvent<String> event = new SmartGenericTestEvent<>(this, "test").     invokeListener(method, event).     verify(this.sampleEvents, times(1)).handleGenericString(event). }
false;public;0;8;;@Test public void invokeListenerWithGenericPayload() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericStringPayload", EntityWrapper.class).     EntityWrapper<String> payload = new EntityWrapper<>("test").     invokeListener(method, new PayloadApplicationEvent<>(this, payload)).     verify(this.sampleEvents, times(1)).handleGenericStringPayload(payload). }
false;public;0;8;;@Test public void invokeListenerWithWrongGenericPayload() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericStringPayload", EntityWrapper.class).     EntityWrapper<Integer> payload = new EntityWrapper<>(123).     invokeListener(method, new PayloadApplicationEvent<>(this, payload)).     verify(this.sampleEvents, times(0)).handleGenericStringPayload(any()). }
false;public;0;8;;@Test public void invokeListenerWithAnyGenericPayload() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericAnyPayload", EntityWrapper.class).     EntityWrapper<String> payload = new EntityWrapper<>("test").     invokeListener(method, new PayloadApplicationEvent<>(this, payload)).     verify(this.sampleEvents, times(1)).handleGenericAnyPayload(payload). }
false;public;0;11;;@Test public void invokeListenerRuntimeException() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "generateRuntimeException", GenericTestEvent.class).     GenericTestEvent<String> event = createGenericTestEvent("fail").     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("Test exception").     this.thrown.expectCause(is((Throwable) isNull())).     invokeListener(method, event). }
false;public;0;10;;@Test public void invokeListenerCheckedException() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "generateCheckedException", GenericTestEvent.class).     GenericTestEvent<String> event = createGenericTestEvent("fail").     this.thrown.expect(UndeclaredThrowableException.class).     this.thrown.expectCause(is(instanceOf(IOException.class))).     invokeListener(method, event). }
false;public;0;16;;@Test public void invokeListenerInvalidProxy() {     Object target = new InvalidProxyTestBean().     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(target).     proxyFactory.addInterface(SimpleService.class).     Object bean = proxyFactory.getProxy(getClass().getClassLoader()).     Method method = ReflectionUtils.findMethod(InvalidProxyTestBean.class, "handleIt2", ApplicationEvent.class).     StaticApplicationListenerMethodAdapter listener = new StaticApplicationListenerMethodAdapter(method, bean).     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("handleIt2").     listener.onApplicationEvent(createGenericTestEvent("test")). }
false;public;0;7;;@Test public void invokeListenerWithPayload() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     PayloadApplicationEvent<String> event = new PayloadApplicationEvent<>(this, "test").     invokeListener(method, event).     verify(this.sampleEvents, times(1)).handleString("test"). }
false;public;0;7;;@Test public void invokeListenerWithPayloadWrongType() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class).     PayloadApplicationEvent<Long> event = new PayloadApplicationEvent<>(this, 123L).     invokeListener(method, event).     verify(this.sampleEvents, never()).handleString(anyString()). }
false;public;0;7;;@Test public void invokeListenerWithAnnotationValue() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationClasses").     PayloadApplicationEvent<String> event = new PayloadApplicationEvent<>(this, "test").     invokeListener(method, event).     verify(this.sampleEvents, times(1)).handleStringAnnotationClasses(). }
false;public;0;8;;@Test public void invokeListenerWithAnnotationValueAndParameter() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationValueAndParameter", String.class).     PayloadApplicationEvent<String> event = new PayloadApplicationEvent<>(this, "test").     invokeListener(method, event).     verify(this.sampleEvents, times(1)).handleStringAnnotationValueAndParameter("test"). }
false;public;0;13;;@Test public void invokeListenerWithSeveralTypes() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringOrInteger").     PayloadApplicationEvent<String> event = new PayloadApplicationEvent<>(this, "test").     invokeListener(method, event).     verify(this.sampleEvents, times(1)).handleStringOrInteger().     PayloadApplicationEvent<Integer> event2 = new PayloadApplicationEvent<>(this, 123).     invokeListener(method, event2).     verify(this.sampleEvents, times(2)).handleStringOrInteger().     PayloadApplicationEvent<Double> event3 = new PayloadApplicationEvent<>(this, 23.2).     invokeListener(method, event3).     verify(this.sampleEvents, times(2)).handleStringOrInteger(). }
false;public;0;19;;@Test public void beanInstanceRetrievedAtEveryInvocation() {     Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleGenericString", GenericTestEvent.class).     when(this.context.getBean("testBean")).thenReturn(this.sampleEvents).     ApplicationListenerMethodAdapter listener = new ApplicationListenerMethodAdapter("testBean", GenericTestEvent.class, method).     listener.init(this.context, new EventExpressionEvaluator()).     GenericTestEvent<String> event = createGenericTestEvent("test").     listener.onApplicationEvent(event).     verify(this.sampleEvents, times(1)).handleGenericString(event).     verify(this.context, times(1)).getBean("testBean").     listener.onApplicationEvent(event).     verify(this.sampleEvents, times(2)).handleGenericString(event).     verify(this.context, times(2)).getBean("testBean"). }
false;private;3;5;;private void supportsEventType(boolean match, Method method, ResolvableType eventType) {     ApplicationListenerMethodAdapter adapter = createTestInstance(method).     assertEquals("Wrong match for event '" + eventType + "' on " + method, match, adapter.supportsEventType(eventType)). }
false;private;2;4;;private void invokeListener(Method method, ApplicationEvent event) {     ApplicationListenerMethodAdapter adapter = createTestInstance(method).     adapter.onApplicationEvent(event). }
false;private;1;3;;private ApplicationListenerMethodAdapter createTestInstance(Method method) {     return new StaticApplicationListenerMethodAdapter(method, this.sampleEvents). }
false;private;1;3;;private ResolvableType createGenericEventType(Class<?> payloadType) {     return ResolvableType.forClassWithGenerics(PayloadApplicationEvent.class, payloadType). }
false;public;0;4;;@Override public Object getTargetBean() {     return this.targetBean. }
false;public;1;4;;@EventListener @Order(42) public void handleRaw(ApplicationEvent event) { }
false;public;1;3;;@EventListener public void handleGenericString(GenericTestEvent<String> event) { }
false;public;1;3;;@EventListener public void handleString(String payload) { }
false;public;0;3;;@EventListener(String.class) public void handleStringAnnotationValue() { }
false;public;0;3;;@EventListener(classes = String.class) public void handleStringAnnotationClasses() { }
false;public;1;3;;@EventListener(String.class) public void handleStringAnnotationValueAndParameter(String payload) { }
false;public;0;3;;@EventListener({ String.class, Integer.class }) public void handleStringOrInteger() { }
false;public;1;3;;@EventListener({ String.class, Integer.class }) public void handleStringOrIntegerWithParam(String invalid) { }
false;public;1;3;;@EventListener public void handleGenericStringPayload(EntityWrapper<String> event) { }
false;public;1;3;;@EventListener public void handleGenericAnyPayload(EntityWrapper<?> event) { }
false;public;2;3;;@EventListener public void tooManyParameters(String event, String whatIsThis) { }
false;public;0;3;;@EventListener public void noParameter() { }
false;public;2;3;;@EventListener public void moreThanOneParameter(String foo, Integer bar) { }
false;public;1;6;;@EventListener public void generateRuntimeException(GenericTestEvent<String> event) {     if ("fail".equals(event.getPayload())) {         throw new IllegalStateException("Test exception").     } }
false;public;1;6;;@EventListener public void generateCheckedException(GenericTestEvent<String> event) throws IOException {     if ("fail".equals(event.getPayload())) {         throw new IOException("Test exception").     } }
false;;1;1;;void handleIt(ApplicationEvent event).
false;public;0;4;;@Override public ResolvableType getResolvableType() {     return ResolvableType.forClassWithGenerics(getClass(), this.entity.getClass()). }
false;public;1;3;;@Override public void handleIt(ApplicationEvent event) { }
false;public;1;3;;@EventListener public void handleIt2(ApplicationEvent event) { }
