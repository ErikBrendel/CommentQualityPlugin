commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testWithImporter() {     ApplicationContext context = new AnnotationConfigApplicationContext(Wrapper.class).     assertEquals("foo", context.getBean("value")). }
false;public;0;5;;@Test public void testWithoutImporter() {     ApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     assertEquals("foo", context.getBean("value")). }
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     return new String[] { Config.class.getName() }. }
false;public;0;4;;@Bean public FooFactoryBean foo() {     return new FooFactoryBean(). }
false;public;0;6;;@Bean public String value() throws Exception {     String name = foo().getObject().getName().     Assert.state(name != null, "Name cannot be null").     return name. }
false;public;0;5;;@Bean @Conditional(NoBarCondition.class) public String bar() throws Exception {     return "bar". }
false;public;2;7;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     if (context.getBeanFactory().getBeanNamesForAnnotation(Bar.class).length > 0) {         return false.     }     return true. }
false;public;0;4;;@Override public Foo getObject() throws Exception {     return foo. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Foo.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     this.foo.name = "foo". }
false;public;0;3;;public String getName() {     return name. }
