commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     this.publisher = mock(ApplicationEventPublisher.class). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testWithNoApplicationEventClassSupplied() throws Exception {     EventPublicationInterceptor interceptor = new EventPublicationInterceptor().     interceptor.setApplicationEventPublisher(this.publisher).     interceptor.afterPropertiesSet(). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testWithNonApplicationEventClassSupplied() throws Exception {     EventPublicationInterceptor interceptor = new EventPublicationInterceptor().     interceptor.setApplicationEventPublisher(this.publisher).     interceptor.setApplicationEventClass(getClass()).     interceptor.afterPropertiesSet(). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testWithAbstractStraightApplicationEventClassSupplied() throws Exception {     EventPublicationInterceptor interceptor = new EventPublicationInterceptor().     interceptor.setApplicationEventPublisher(this.publisher).     interceptor.setApplicationEventClass(ApplicationEvent.class).     interceptor.afterPropertiesSet(). }
false;public;0;7;;@Test(expected = IllegalArgumentException.class) public void testWithApplicationEventClassThatDoesntExposeAValidCtor() throws Exception {     EventPublicationInterceptor interceptor = new EventPublicationInterceptor().     interceptor.setApplicationEventPublisher(this.publisher).     interceptor.setApplicationEventClass(TestEventWithNoValidOneArgObjectCtor.class).     interceptor.afterPropertiesSet(). }
false;protected;0;4;;@Override protected void onRefresh() throws BeansException {     addApplicationListener(listener). }
false;public;0;35;;@Test public void testExpectedBehavior() throws Exception {     TestBean target = new TestBean().     final TestListener listener = new TestListener().     class TestContext extends StaticApplicationContext {          @Override         protected void onRefresh() throws BeansException {             addApplicationListener(listener).         }     }     StaticApplicationContext ctx = new TestContext().     MutablePropertyValues pvs = new MutablePropertyValues().     pvs.add("applicationEventClass", TestEvent.class.getName()).     // should automatically receive applicationEventPublisher reference     ctx.registerSingleton("publisher", EventPublicationInterceptor.class, pvs).     ctx.registerSingleton("otherListener", FactoryBeanTestListener.class).     ctx.refresh().     EventPublicationInterceptor interceptor = (EventPublicationInterceptor) ctx.getBean("publisher").     ProxyFactory factory = new ProxyFactory(target).     factory.addAdvice(0, interceptor).     ITestBean testBean = (ITestBean) factory.getProxy().     // invoke any method on the advised proxy to see if the interceptor has been invoked     testBean.getAge().     // two events: ContextRefreshedEvent and TestEvent     assertTrue("Interceptor must have published 2 events", listener.getEventCount() == 2).     TestListener otherListener = (TestListener) ctx.getBean("&otherListener").     assertTrue("Interceptor must have published 2 events", otherListener.getEventCount() == 2). }
false;public;0;4;;@Override public Object getObject() {     return "test". }
false;public;0;4;;@Override public Class<String> getObjectType() {     return String.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
