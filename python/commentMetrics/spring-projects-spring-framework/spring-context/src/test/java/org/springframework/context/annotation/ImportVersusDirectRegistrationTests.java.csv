commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test(expected = NoSuchBeanDefinitionException.class) public void thingIsNotAvailableWhenOuterConfigurationIsRegisteredDirectly() {     try (AnnotationConfigApplicationContext directRegistration = new AnnotationConfigApplicationContext()) {         directRegistration.register(AccidentalLiteConfiguration.class).         directRegistration.refresh().         directRegistration.getBean(Thing.class).     } }
false;public;0;9;;@Test(expected = NoSuchBeanDefinitionException.class) public void thingIsNotAvailableWhenOuterConfigurationIsRegisteredWithClassName() {     try (AnnotationConfigApplicationContext directRegistration = new AnnotationConfigApplicationContext()) {         directRegistration.registerBeanDefinition("config", new RootBeanDefinition(AccidentalLiteConfiguration.class.getName())).         directRegistration.refresh().         directRegistration.getBean(Thing.class).     } }
false;public;0;8;;@Test(expected = NoSuchBeanDefinitionException.class) public void thingIsNotAvailableWhenOuterConfigurationIsImported() {     try (AnnotationConfigApplicationContext viaImport = new AnnotationConfigApplicationContext()) {         viaImport.register(Importer.class).         viaImport.refresh().         viaImport.getBean(Thing.class).     } }
false;public;0;4;;@Bean public Thing thing() {     return new Thing(). }
