# id;timestamp;commentText;codeText;commentWords;codeWords
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1328020251;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1329743944;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1362408075;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1382386279;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1382465750;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1394195941;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1397058189;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1398720297;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1405454692;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1408653788;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1408681275;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1408708479;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1409696885;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1411076915;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1411080787;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1411110630;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1413848647;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1456179950;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingIsLifo();1458843770;Tests the LIFO behavior of @PropertySource annotaitons._The last one registered should 'win'.;@Test_	public void orderingIsLifo() {_		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(ConfigWithImplicitName.class, P2Config.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean"))__		}__		{_			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__			ctx.register(P2Config.class, ConfigWithImplicitName.class)__			ctx.refresh()__			_			assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"))__		}_	};tests,the,lifo,behavior,of,property,source,annotaitons,the,last,one,registered,should,win;test,public,void,ordering,is,lifo,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,implicit,name,class,p2config,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p2test,bean,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,p2config,class,config,with,implicit,name,class,ctx,refresh,assert,that,ctx,get,bean,test,bean,class,get,name,equal,to,p1test,bean
PropertySourceAnnotationTests -> @Test 	public void withNameAndMultipleResourceLocations();1329743944;Corner bug reported in SPR-9127.;@Test_	public void withNameAndMultipleResourceLocations() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(ConfigWithNameAndMultipleResourceLocations.class)__		ctx.refresh()__		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true))__		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true))__	};corner,bug,reported,in,spr,9127;test,public,void,with,name,and,multiple,resource,locations,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,name,and,multiple,resource,locations,class,ctx,refresh,assert,that,ctx,get,environment,contains,property,from,p1,is,true,assert,that,ctx,get,environment,contains,property,from,p2,is,true
PropertySourceAnnotationTests -> @Test 	public void withNameAndMultipleResourceLocations();1362408075;Corner bug reported in SPR-9127.;@Test_	public void withNameAndMultipleResourceLocations() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(ConfigWithNameAndMultipleResourceLocations.class)__		ctx.refresh()__		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true))__		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true))__	};corner,bug,reported,in,spr,9127;test,public,void,with,name,and,multiple,resource,locations,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,name,and,multiple,resource,locations,class,ctx,refresh,assert,that,ctx,get,environment,contains,property,from,p1,is,true,assert,that,ctx,get,environment,contains,property,from,p2,is,true
PropertySourceAnnotationTests -> @Test 	public void withNameAndMultipleResourceLocations();1382386279;Corner bug reported in SPR-9127.;@Test_	public void withNameAndMultipleResourceLocations() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(ConfigWithNameAndMultipleResourceLocations.class)__		ctx.refresh()__		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true))__		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true))__	};corner,bug,reported,in,spr,9127;test,public,void,with,name,and,multiple,resource,locations,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,name,and,multiple,resource,locations,class,ctx,refresh,assert,that,ctx,get,environment,contains,property,from,p1,is,true,assert,that,ctx,get,environment,contains,property,from,p2,is,true
PropertySourceAnnotationTests -> @Test 	public void withNameAndMultipleResourceLocations();1382465750;Corner bug reported in SPR-9127.;@Test_	public void withNameAndMultipleResourceLocations() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(ConfigWithNameAndMultipleResourceLocations.class)__		ctx.refresh()__		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true))__		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true))__	};corner,bug,reported,in,spr,9127;test,public,void,with,name,and,multiple,resource,locations,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,name,and,multiple,resource,locations,class,ctx,refresh,assert,that,ctx,get,environment,contains,property,from,p1,is,true,assert,that,ctx,get,environment,contains,property,from,p2,is,true
PropertySourceAnnotationTests -> @Test 	public void withNameAndMultipleResourceLocations();1394195941;Corner bug reported in SPR-9127.;@Test_	public void withNameAndMultipleResourceLocations() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(ConfigWithNameAndMultipleResourceLocations.class)__		ctx.refresh()__		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true))__		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true))__	};corner,bug,reported,in,spr,9127;test,public,void,with,name,and,multiple,resource,locations,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,config,with,name,and,multiple,resource,locations,class,ctx,refresh,assert,that,ctx,get,environment,contains,property,from,p1,is,true,assert,that,ctx,get,environment,contains,property,from,p2,is,true
PropertySourceAnnotationTests -> @Test 	public void orderingWithAndWithoutNameAndMultipleResourceLocations();1382386279;SPR-10820;@Test_	public void orderingWithAndWithoutNameAndMultipleResourceLocations() {_		_		AnnotationConfigApplicationContext ctxWithName = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class)__		AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class)__		assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__		assertThat(ctxWithName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__	};spr,10820;test,public,void,ordering,with,and,without,name,and,multiple,resource,locations,annotation,config,application,context,ctx,with,name,new,annotation,config,application,context,config,with,name,and,multiple,resource,locations,class,annotation,config,application,context,ctx,without,name,new,annotation,config,application,context,config,with,multiple,resource,locations,class,assert,that,ctx,without,name,get,environment,get,property,testbean,name,equal,to,p2test,bean,assert,that,ctx,with,name,get,environment,get,property,testbean,name,equal,to,p2test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingWithAndWithoutNameAndMultipleResourceLocations();1382465750;SPR-10820;@Test_	public void orderingWithAndWithoutNameAndMultipleResourceLocations() {_		_		AnnotationConfigApplicationContext ctxWithName = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class)__		AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class)__		assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__		assertThat(ctxWithName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__	};spr,10820;test,public,void,ordering,with,and,without,name,and,multiple,resource,locations,annotation,config,application,context,ctx,with,name,new,annotation,config,application,context,config,with,name,and,multiple,resource,locations,class,annotation,config,application,context,ctx,without,name,new,annotation,config,application,context,config,with,multiple,resource,locations,class,assert,that,ctx,without,name,get,environment,get,property,testbean,name,equal,to,p2test,bean,assert,that,ctx,with,name,get,environment,get,property,testbean,name,equal,to,p2test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingWithAndWithoutNameAndMultipleResourceLocations();1394195941;SPR-10820;@Test_	public void orderingWithAndWithoutNameAndMultipleResourceLocations() {_		_		AnnotationConfigApplicationContext ctxWithName = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class)__		AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class)__		assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__		assertThat(ctxWithName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__	};spr,10820;test,public,void,ordering,with,and,without,name,and,multiple,resource,locations,annotation,config,application,context,ctx,with,name,new,annotation,config,application,context,config,with,name,and,multiple,resource,locations,class,annotation,config,application,context,ctx,without,name,new,annotation,config,application,context,config,with,multiple,resource,locations,class,assert,that,ctx,without,name,get,environment,get,property,testbean,name,equal,to,p2test,bean,assert,that,ctx,with,name,get,environment,get,property,testbean,name,equal,to,p2test,bean
PropertySourceAnnotationTests -> @Test 	public void orderingWithAndWithoutNameAndMultipleResourceLocations();1397058189;SPR-10820;@Test_	public void orderingWithAndWithoutNameAndMultipleResourceLocations() {_		_		AnnotationConfigApplicationContext ctxWithName = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class)__		AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class)__		assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__		assertThat(ctxWithName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"))__	};spr,10820;test,public,void,ordering,with,and,without,name,and,multiple,resource,locations,annotation,config,application,context,ctx,with,name,new,annotation,config,application,context,config,with,name,and,multiple,resource,locations,class,annotation,config,application,context,ctx,without,name,new,annotation,config,application,context,config,with,multiple,resource,locations,class,assert,that,ctx,without,name,get,environment,get,property,testbean,name,equal,to,p2test,bean,assert,that,ctx,with,name,get,environment,get,property,testbean,name,equal,to,p2test,bean
