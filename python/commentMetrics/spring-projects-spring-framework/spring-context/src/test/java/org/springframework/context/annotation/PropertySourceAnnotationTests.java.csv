commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void withExplicitName() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithExplicitName.class).     ctx.refresh().     assertTrue("property source p1 was not added", ctx.getEnvironment().getPropertySources().contains("p1")).     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean")).     // assert that the property source was added last to the set of sources     String name.     MutablePropertySources sources = ctx.getEnvironment().getPropertySources().     Iterator<org.springframework.core.env.PropertySource<?>> iterator = sources.iterator().     do {         name = iterator.next().getName().     } while (iterator.hasNext()).     assertThat(name, is("p1")). }
false;public;0;9;;@Test public void withImplicitName() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithImplicitName.class).     ctx.refresh().     assertTrue("property source p1 was not added", ctx.getEnvironment().getPropertySources().contains("class path resource [org/springframework/context/annotation/p1.properties]")).     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean")). }
false;public;0;8;;@Test public void withTestProfileBeans() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithTestProfileBeans.class).     ctx.refresh().     assertTrue(ctx.containsBean("testBean")).     assertTrue(ctx.containsBean("testProfileBean")). }
true;public;0;18;/**  * Tests the LIFO behavior of @PropertySource annotaitons.  * The last one registered should 'win'.  */ ;/**  * Tests the LIFO behavior of @PropertySource annotaitons.  * The last one registered should 'win'.  */ @Test public void orderingIsLifo() {     {         AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().         ctx.register(ConfigWithImplicitName.class, P2Config.class).         ctx.refresh().         // p2 should 'win' as it was registered last         assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p2TestBean")).     }     {         AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().         ctx.register(P2Config.class, ConfigWithImplicitName.class).         ctx.refresh().         // p1 should 'win' as it was registered last         assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean")).     } }
false;public;0;7;;@Test public void withCustomFactory() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithImplicitName.class, WithCustomFactory.class).     ctx.refresh().     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("P2TESTBEAN")). }
false;public;0;7;;@Test public void withCustomFactoryAsMeta() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithImplicitName.class, WithCustomFactoryAsMeta.class).     ctx.refresh().     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("P2TESTBEAN")). }
false;public;0;11;;@Test public void withUnresolvablePlaceholder() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithUnresolvablePlaceholder.class).     try {         ctx.refresh().     } catch (BeanDefinitionStoreException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     } }
false;public;0;7;;@Test public void withUnresolvablePlaceholderAndDefault() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithUnresolvablePlaceholderAndDefault.class).     ctx.refresh().     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean")). }
false;public;0;9;;@Test public void withResolvablePlaceholder() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithResolvablePlaceholder.class).     System.setProperty("path.to.properties", "org/springframework/context/annotation").     ctx.refresh().     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean")).     System.clearProperty("path.to.properties"). }
false;public;0;9;;@Test public void withResolvablePlaceholderAndFactoryBean() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithResolvablePlaceholderAndFactoryBean.class).     System.setProperty("path.to.properties", "org/springframework/context/annotation").     ctx.refresh().     assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean")).     System.clearProperty("path.to.properties"). }
false;public;0;11;;@Test public void withEmptyResourceLocations() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithEmptyResourceLocations.class).     try {         ctx.refresh().     } catch (BeanDefinitionStoreException ex) {         assertTrue(ex.getCause() instanceof IllegalArgumentException).     } }
false;public;0;8;;@Test public void withNameAndMultipleResourceLocations() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class).     assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true)).     assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true)).     // p2 should 'win' as it was registered last     assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")). }
false;public;0;8;;@Test public void withMultipleResourceLocations() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class).     assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true)).     assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true)).     // p2 should 'win' as it was registered last     assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")). }
false;public;0;8;;@Test public void withPropertySources() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithPropertySources.class).     assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true)).     assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true)).     // p2 should 'win' as it was registered last     assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")). }
false;public;0;8;;@Test public void withNamedPropertySources() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithNamedPropertySources.class).     assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true)).     assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true)).     // p2 should 'win' as it was registered last     assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")). }
false;public;0;6;;@Test public void withMissingPropertySource() {     thrown.expect(BeanDefinitionStoreException.class).     thrown.expectCause(isA(FileNotFoundException.class)).     new AnnotationConfigApplicationContext(ConfigWithMissingPropertySource.class). }
false;public;0;6;;@Test public void withIgnoredPropertySource() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithIgnoredPropertySource.class).     assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true)).     assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true)). }
false;public;0;7;;@Test public void withSameSourceImportedInDifferentOrder() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithSameSourceImportedInDifferentOrder.class).     assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true)).     assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true)).     assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")). }
false;public;0;8;;@Test public void orderingWithAndWithoutNameAndMultipleResourceLocations() {     // SPR-10820: p2 should 'win' as it was registered last     AnnotationConfigApplicationContext ctxWithName = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class).     AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class).     assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")).     assertThat(ctxWithName.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean")). }
false;public;0;6;;@Test public void orderingWithAndWithoutNameAndFourResourceLocations() {     // SPR-12198: p4 should 'win' as it was registered last     AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext(ConfigWithFourResourceLocations.class).     assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("p4TestBean")). }
false;public;0;11;;@Test public void orderingDoesntReplaceExisting() throws Exception {     // SPR-12198: mySource should 'win' as it was registered manually     AnnotationConfigApplicationContext ctxWithoutName = new AnnotationConfigApplicationContext().     MapPropertySource mySource = new MapPropertySource("mine", Collections.singletonMap("testbean.name", "myTestBean")).     ctxWithoutName.getEnvironment().getPropertySources().addLast(mySource).     ctxWithoutName.register(ConfigWithFourResourceLocations.class).     ctxWithoutName.refresh().     assertThat(ctxWithoutName.getEnvironment().getProperty("testbean.name"), equalTo("myTestBean")). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(env.getProperty("testbean.name")). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(env.getProperty("testbean.name")). }
false;public;0;4;;@Override public Object getObject() {     return new TestBean(name). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return TestBean.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;18;;@Bean public FactoryBean testBean() {     final String name = env.getProperty("testbean.name").     return new FactoryBean() {          @Override         public Object getObject() {             return new TestBean(name).         }          @Override         public Class<?> getObjectType() {             return TestBean.class.         }          @Override         public boolean isSingleton() {             return false.         }     }. }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(env.getProperty("testbean.name")). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(env.getProperty("testbean.name")). }
false;public;0;4;;@Bean @Profile("test") public TestBean testBean() {     return new TestBean(env.getProperty("testbean.name")). }
false;public;1;5;;@Override public Object getProperty(String name) {     String value = props.getProperty(name).     return (value != null ? value.toUpperCase() : null). }
false;public;2;11;;@Override public org.springframework.core.env.PropertySource createPropertySource(String name, EncodedResource resource) throws IOException {     Properties props = PropertiesLoaderUtils.loadProperties(resource).     return new org.springframework.core.env.PropertySource<Properties>("my" + name, props) {          @Override         public Object getProperty(String name) {             String value = props.getProperty(name).             return (value != null ? value.toUpperCase() : null).         }     }. }
