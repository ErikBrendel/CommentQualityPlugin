commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;16;;@Test public void simpleEventJavaConfig() {     load(TestEventListener.class).     TestEvent event = new TestEvent(this, "test").     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1).     this.eventCollector.clear().     this.context.publishEvent(event).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;14;;@Test public void simpleEventXmlConfig() {     this.context = new ClassPathXmlApplicationContext("org/springframework/context/event/simple-event-configuration.xml").     TestEvent event = new TestEvent(this, "test").     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector = getEventCollector(this.context).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;11;;@Test public void metaAnnotationIsDiscovered() {     load(MetaAnnotationListenerTestBean.class).     MetaAnnotationListenerTestBean bean = this.context.getBean(MetaAnnotationListenerTestBean.class).     this.eventCollector.assertNoEventReceived(bean).     TestEvent event = new TestEvent().     this.context.publishEvent(event).     this.eventCollector.assertEvent(bean, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;15;;@Test public void contextEventsAreReceived() {     load(ContextEventListener.class).     ContextEventListener listener = this.context.getBean(ContextEventListener.class).     List<Object> events = this.eventCollector.getEvents(listener).     assertEquals("Wrong number of initial context events", 1, events.size()).     assertEquals(ContextRefreshedEvent.class, events.get(0).getClass()).     this.context.stop().     List<Object> eventsAfterStop = this.eventCollector.getEvents(listener).     assertEquals("Wrong number of context events on shutdown", 2, eventsAfterStop.size()).     assertEquals(ContextStoppedEvent.class, eventsAfterStop.get(1).getClass()).     this.eventCollector.assertTotalEventsCount(2). }
false;public;0;13;;@Test public void methodSignatureNoEvent() {     @SuppressWarnings("resource")     AnnotationConfigApplicationContext failingContext = new AnnotationConfigApplicationContext().     failingContext.register(BasicConfiguration.class, InvalidMethodSignatureEventListener.class).     this.thrown.expect(BeanInitializationException.class).     this.thrown.expectMessage(InvalidMethodSignatureEventListener.class.getName()).     this.thrown.expectMessage("cannotBeCalled").     failingContext.refresh(). }
false;public;0;14;;@Test public void simpleReply() {     load(TestEventListener.class, ReplyEventListener.class).     AnotherTestEvent event = new AnotherTestEvent(this, "dummy").     ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertNoEventReceived(replyEventListener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(replyEventListener, event).     // reply     this.eventCollector.assertEvent(listener, new TestEvent(replyEventListener, event.getId(), "dummy")).     this.eventCollector.assertTotalEventsCount(2). }
false;public;0;14;;@Test public void nullReplyIgnored() {     load(TestEventListener.class, ReplyEventListener.class).     // No response     AnotherTestEvent event = new AnotherTestEvent(this, null).     ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertNoEventReceived(replyEventListener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(replyEventListener, event).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;14;;@Test public void arrayReply() {     load(TestEventListener.class, ReplyEventListener.class).     AnotherTestEvent event = new AnotherTestEvent(this, new String[] { "first", "second" }).     ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertNoEventReceived(replyEventListener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(replyEventListener, event).     // reply     this.eventCollector.assertEvent(listener, "first", "second").     this.eventCollector.assertTotalEventsCount(3). }
false;public;0;18;;@Test public void collectionReply() {     load(TestEventListener.class, ReplyEventListener.class).     Set<Object> replies = new LinkedHashSet<>().     replies.add("first").     replies.add(4L).     replies.add("third").     AnotherTestEvent event = new AnotherTestEvent(this, replies).     ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertNoEventReceived(replyEventListener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(replyEventListener, event).     // reply (no listener for 4L)     this.eventCollector.assertEvent(listener, "first", "third").     this.eventCollector.assertTotalEventsCount(3). }
false;public;0;14;;@Test public void collectionReplyNullValue() {     load(TestEventListener.class, ReplyEventListener.class).     AnotherTestEvent event = new AnotherTestEvent(this, Arrays.asList(null, "test")).     ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertNoEventReceived(replyEventListener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(replyEventListener, event).     this.eventCollector.assertEvent(listener, "test").     this.eventCollector.assertTotalEventsCount(2). }
false;public;0;16;;@Test public void eventListenerWorksWithSimpleInterfaceProxy() throws Exception {     load(ScopedProxyTestBean.class).     SimpleService proxy = this.context.getBean(SimpleService.class).     assertTrue("bean should be a proxy", proxy instanceof Advised).     this.eventCollector.assertNoEventReceived(proxy.getId()).     this.context.publishEvent(new ContextRefreshedEvent(this.context)).     this.eventCollector.assertNoEventReceived(proxy.getId()).     TestEvent event = new TestEvent().     this.context.publishEvent(event).     this.eventCollector.assertEvent(proxy.getId(), event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;16;;@Test public void eventListenerWorksWithAnnotatedInterfaceProxy() throws Exception {     load(AnnotatedProxyTestBean.class).     AnnotatedSimpleService proxy = this.context.getBean(AnnotatedSimpleService.class).     assertTrue("bean should be a proxy", proxy instanceof Advised).     this.eventCollector.assertNoEventReceived(proxy.getId()).     this.context.publishEvent(new ContextRefreshedEvent(this.context)).     this.eventCollector.assertNoEventReceived(proxy.getId()).     TestEvent event = new TestEvent().     this.context.publishEvent(event).     this.eventCollector.assertEvent(proxy.getId(), event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;16;;@Test public void eventListenerWorksWithCglibProxy() throws Exception {     load(CglibProxyTestBean.class).     CglibProxyTestBean proxy = this.context.getBean(CglibProxyTestBean.class).     assertTrue("bean should be a cglib proxy", AopUtils.isCglibProxy(proxy)).     this.eventCollector.assertNoEventReceived(proxy.getId()).     this.context.publishEvent(new ContextRefreshedEvent(this.context)).     this.eventCollector.assertNoEventReceived(proxy.getId()).     TestEvent event = new TestEvent().     this.context.publishEvent(event).     this.eventCollector.assertEvent(proxy.getId(), event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;10;;@Test public void privateMethodOnCglibProxyFails() throws Exception {     try {         load(CglibProxyWithPrivateMethod.class).         fail("Should have thrown BeanInitializationException").     } catch (BeanInitializationException ex) {         assertTrue(ex.getCause() instanceof IllegalStateException).     } }
false;public;0;33;;@Test public void eventListenerWorksWithCustomScope() throws Exception {     load(CustomScopeTestBean.class).     CustomScope customScope = new CustomScope().     this.context.getBeanFactory().registerScope("custom", customScope).     CustomScopeTestBean proxy = this.context.getBean(CustomScopeTestBean.class).     assertTrue("bean should be a cglib proxy", AopUtils.isCglibProxy(proxy)).     this.eventCollector.assertNoEventReceived(proxy.getId()).     this.context.publishEvent(new ContextRefreshedEvent(this.context)).     this.eventCollector.assertNoEventReceived(proxy.getId()).     customScope.active = false.     this.context.publishEvent(new ContextRefreshedEvent(this.context)).     customScope.active = true.     this.eventCollector.assertNoEventReceived(proxy.getId()).     TestEvent event = new TestEvent().     this.context.publishEvent(event).     this.eventCollector.assertEvent(proxy.getId(), event).     this.eventCollector.assertTotalEventsCount(1).     try {         customScope.active = false.         this.context.publishEvent(new TestEvent()).         fail("Should have thrown IllegalStateException").     } catch (BeanCreationException ex) {         // expected         assertTrue(ex.getCause() instanceof IllegalStateException).     } }
false;public;0;14;;@Test public void asyncProcessingApplied() throws InterruptedException {     loadAsync(AsyncEventListener.class).     String threadName = Thread.currentThread().getName().     AnotherTestEvent event = new AnotherTestEvent(this, threadName).     AsyncEventListener listener = this.context.getBean(AsyncEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.countDownLatch.await(2, TimeUnit.SECONDS).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;14;;@Test public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException {     doLoad(AsyncConfigurationWithInterfaces.class, SimpleProxyTestBean.class).     String threadName = Thread.currentThread().getName().     AnotherTestEvent event = new AnotherTestEvent(this, threadName).     SimpleService listener = this.context.getBean(SimpleService.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.countDownLatch.await(2, TimeUnit.SECONDS).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;14;;@Test public void asyncProcessingAppliedWithScopedProxy() throws InterruptedException {     doLoad(AsyncConfigurationWithInterfaces.class, ScopedProxyTestBean.class).     String threadName = Thread.currentThread().getName().     AnotherTestEvent event = new AnotherTestEvent(this, threadName).     SimpleService listener = this.context.getBean(SimpleService.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.countDownLatch.await(2, TimeUnit.SECONDS).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;16;;@Test public void exceptionPropagated() {     load(ExceptionEventListener.class).     TestEvent event = new TestEvent(this, "fail").     ExceptionEventListener listener = this.context.getBean(ExceptionEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     try {         this.context.publishEvent(event).         fail("An exception should have thrown").     } catch (IllegalStateException e) {         assertEquals("Wrong exception", "Test exception", e.getMessage()).         this.eventCollector.assertEvent(listener, event).         this.eventCollector.assertTotalEventsCount(1).     } }
false;public;0;13;;@Test public void exceptionNotPropagatedWithAsync() throws InterruptedException {     loadAsync(ExceptionEventListener.class).     AnotherTestEvent event = new AnotherTestEvent(this, "fail").     ExceptionEventListener listener = this.context.getBean(ExceptionEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.countDownLatch.await(2, TimeUnit.SECONDS).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;10;;@Test public void listenerWithSimplePayload() {     load(TestEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent("test").     this.eventCollector.assertEvent(listener, "test").     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;10;;@Test public void listenerWithNonMatchingPayload() {     load(TestEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(123L).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(0). }
false;public;0;15;;@Test public void replyWithPayload() {     load(TestEventListener.class, ReplyEventListener.class).     AnotherTestEvent event = new AnotherTestEvent(this, "String").     ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class).     TestEventListener listener = this.context.getBean(TestEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertNoEventReceived(replyEventListener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(replyEventListener, event).     // reply     this.eventCollector.assertEvent(listener, "String").     this.eventCollector.assertTotalEventsCount(2). }
false;public;0;10;;@Test public void listenerWithGenericApplicationEvent() {     load(GenericEventListener.class).     GenericEventListener listener = this.context.getBean(GenericEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent("TEST").     this.eventCollector.assertEvent(listener, "TEST").     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;11;;@Test public void listenerWithResolvableTypeEvent() {     load(ResolvableTypeEventListener.class).     ResolvableTypeEventListener listener = this.context.getBean(ResolvableTypeEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     GenericEventPojo<String> event = new GenericEventPojo<>("TEST").     this.context.publishEvent(event).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1). }
false;public;0;11;;@Test public void listenerWithResolvableTypeEventWrongGeneric() {     load(ResolvableTypeEventListener.class).     ResolvableTypeEventListener listener = this.context.getBean(ResolvableTypeEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     GenericEventPojo<Long> event = new GenericEventPojo<>(123L).     this.context.publishEvent(event).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(0). }
false;public;0;4;;@Test public void conditionMatch() {     validateConditionMatch(ConditionalEventListener.class). }
false;public;0;4;;@Test public void conditionMatchWithProxy() {     validateConditionMatch(ConditionalEventListener.class, MethodValidationPostProcessor.class). }
false;private;1;27;;private void validateConditionMatch(Class<?>... classes) {     long timestamp = System.currentTimeMillis().     load(classes).     TestEvent event = new TestEvent(this, "OK").     ConditionalEventInterface listener = this.context.getBean(ConditionalEventInterface.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.eventCollector.assertEvent(listener, event).     this.eventCollector.assertTotalEventsCount(1).     this.context.publishEvent("OK").     this.eventCollector.assertEvent(listener, event, "OK").     this.eventCollector.assertTotalEventsCount(2).     this.context.publishEvent("NOT OK").     this.eventCollector.assertTotalEventsCount(2).     this.context.publishEvent(timestamp).     this.eventCollector.assertEvent(listener, event, "OK", timestamp).     this.eventCollector.assertTotalEventsCount(3).     this.context.publishEvent(42d).     this.eventCollector.assertEvent(listener, event, "OK", timestamp, 42d).     this.eventCollector.assertTotalEventsCount(4). }
false;public;0;24;;@Test public void conditionDoesNotMatch() {     long maxLong = Long.MAX_VALUE.     load(ConditionalEventListener.class).     TestEvent event = new TestEvent(this, "KO").     TestEventListener listener = this.context.getBean(ConditionalEventListener.class).     this.eventCollector.assertNoEventReceived(listener).     this.context.publishEvent(event).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(0).     this.context.publishEvent("KO").     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(0).     this.context.publishEvent(maxLong).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(0).     this.context.publishEvent(24d).     this.eventCollector.assertNoEventReceived(listener).     this.eventCollector.assertTotalEventsCount(0). }
false;public;0;9;;@Test public void orderedListeners() {     load(OrderedTestListener.class).     OrderedTestListener listener = this.context.getBean(OrderedTestListener.class).     assertTrue(listener.order.isEmpty()).     this.context.publishEvent("whatever").     assertThat(listener.order, contains("first", "second", "third")). }
false;public;0;7;;// SPR-15122 @Test // SPR-15122 @Ignore public void listenersReceiveEarlyEvents() {     load(EventOnPostConstruct.class, OrderedTestListener.class).     OrderedTestListener listener = this.context.getBean(OrderedTestListener.class).     assertThat(listener.order, contains("first", "second", "third")). }
false;private;1;6;;private void load(Class<?>... classes) {     List<Class<?>> allClasses = new ArrayList<>().     allClasses.add(BasicConfiguration.class).     allClasses.addAll(Arrays.asList(classes)).     doLoad(allClasses.toArray(new Class<?>[allClasses.size()])). }
false;private;1;6;;private void loadAsync(Class<?>... classes) {     List<Class<?>> allClasses = new ArrayList<>().     allClasses.add(AsyncConfiguration.class).     allClasses.addAll(Arrays.asList(classes)).     doLoad(allClasses.toArray(new Class<?>[allClasses.size()])). }
false;private;1;6;;private void doLoad(Class<?>... classes) {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(classes).     this.eventCollector = ctx.getBean(EventCollector.class).     this.countDownLatch = ctx.getBean(CountDownLatch.class).     this.context = ctx. }
false;private;1;3;;private EventCollector getEventCollector(ConfigurableApplicationContext context) {     return context.getBean(EventCollector.class). }
false;public;0;4;;@Bean public EventCollector eventCollector() {     return new EventCollector(). }
false;public;0;4;;@Bean public CountDownLatch testCountDownLatch() {     return new CountDownLatch(1). }
false;public;0;4;;@Bean public TestConditionEvaluator conditionEvaluator() {     return new TestConditionEvaluator(). }
false;public;1;3;;public boolean valid(Double ratio) {     return new Double(42).equals(ratio). }
false;protected;1;3;;protected void collectEvent(Object content) {     this.eventCollector.addEvent(this, content). }
false;public;1;4;;@EventListener public void handle(TestEvent event) {     collectEvent(event). }
false;public;1;4;;@EventListener public void handleString(String content) {     collectEvent(content). }
false;public;1;4;;@FooListener public void handleIt(TestEvent event) {     collectEvent(event). }
false;public;1;4;;@EventListener public void handleContextEvent(ApplicationContextEvent event) {     collectEvent(event). }
false;public;2;3;;@EventListener public void cannotBeCalled(String s, Integer what) { }
false;public;1;17;;@EventListener public Object handle(AnotherTestEvent event) {     collectEvent(event).     if (event.content == null) {         return null.     } else if (event.content instanceof String) {         String s = (String) event.content.         if (s.equals("String")) {             return event.content.         } else {             return new TestEvent(this, event.getId(), s).         }     }     return event.content. }
false;public;1;7;;@EventListener public void handle(TestEvent event) {     collectEvent(event).     if ("fail".equals(event.msg)) {         throw new IllegalStateException("Test exception").     } }
false;public;1;9;;@EventListener @Async public void handleAsync(AnotherTestEvent event) {     collectEvent(event).     if ("fail".equals(event.content)) {         this.countDownLatch.countDown().         throw new IllegalStateException("Test exception").     } }
false;public;1;7;;@EventListener @Async public void handleAsync(AnotherTestEvent event) {     assertNotEquals(event.content, Thread.currentThread().getName()).     collectEvent(event).     this.countDownLatch.countDown(). }
false;;1;1;;void handleIt(TestEvent event).
false;;1;1;;void handleAsync(AnotherTestEvent event).
false;public;1;5;;@EventListener @Override public void handleIt(TestEvent event) {     this.eventCollector.addEvent(this, event). }
false;public;1;7;;@EventListener @Async public void handleAsync(AnotherTestEvent event) {     assertNotEquals(event.content, Thread.currentThread().getName()).     this.eventCollector.addEvent(this, event).     this.countDownLatch.countDown(). }
false;public;1;5;;@EventListener @Override public void handleIt(TestEvent event) {     this.eventCollector.addEvent(this, event). }
false;public;1;7;;@EventListener @Async public void handleAsync(AnotherTestEvent event) {     assertNotEquals(event.content, Thread.currentThread().getName()).     this.eventCollector.addEvent(this, event).     this.countDownLatch.countDown(). }
false;;1;2;;@EventListener void handleIt(TestEvent event).
false;public;1;4;;@Override public void handleIt(TestEvent event) {     this.eventCollector.addEvent(this, event). }
false;public;1;4;;@EventListener public void handleIt(TestEvent event) {     collectEvent(event). }
false;private;1;4;;@EventListener private void handleIt(TestEvent event) {     collectEvent(event). }
false;public;1;4;;@EventListener public void handleIt(TestEvent event) {     collectEvent(event). }
false;public;1;4;;@EventListener public void handleString(PayloadApplicationEvent<String> event) {     collectEvent(event.getPayload()). }
false;public;1;4;;@EventListener public void handleString(GenericEventPojo<String> value) {     collectEvent(value). }
false;;1;1;;void handle(TestEvent event).
false;;1;1;;void handleString(String payload).
false;;1;1;;void handleTimestamp(Long timestamp).
false;;1;1;;void handleRatio(Double ratio).
false;public;1;5;;@EventListener(condition = "'OK'.equals(#root.event.msg)") @Override public void handle(TestEvent event) {     super.handle(event). }
false;public;1;5;;@Override @EventListener(condition = "#payload.startsWith('OK')") public void handleString(String payload) {     super.handleString(payload). }
false;public;1;4;;@ConditionalEvent("#root.event.timestamp > #p0") public void handleTimestamp(Long timestamp) {     collectEvent(timestamp). }
false;public;1;4;;@ConditionalEvent("@conditionEvaluator.valid(#p0)") public void handleRatio(Double ratio) {     collectEvent(ratio). }
false;public;1;5;;@EventListener @Order(50) public void handleThird(String payload) {     this.order.add("third"). }
false;public;1;5;;@EventListener @Order(-50) public void handleFirst(String payload) {     this.order.add("first"). }
false;public;1;4;;@EventListener public void handleSecond(String payload) {     this.order.add("second"). }
false;public;0;4;;@PostConstruct public void init() {     this.publisher.publishEvent("earlyEvent"). }
false;public;2;8;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     Assert.state(this.active, "Not active").     if (this.instance == null) {         this.instance = objectFactory.getObject().     }     return this.instance. }
false;public;1;4;;@Override public Object remove(String name) {     return null. }
false;public;2;3;;@Override public void registerDestructionCallback(String name, Runnable callback) { }
false;public;1;4;;@Override public Object resolveContextualObject(String key) {     return null. }
false;public;0;4;;@Override public String getConversationId() {     return null. }
