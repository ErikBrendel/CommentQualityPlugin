commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void multipleMetaImportsAreProcessed() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(MultiMetaImportConfig.class).     ctx.refresh().     assertThat(ctx.containsBean("testBean1"), is(true)).     assertThat(ctx.containsBean("testBean2"), is(true)). }
false;public;0;9;;@Test public void localAndMetaImportsAreProcessed() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(MultiMetaImportConfigWithLocalImport.class).     ctx.refresh().     assertThat(ctx.containsBean("testBean1"), is(true)).     assertThat(ctx.containsBean("testBean2"), is(true)).     assertThat(ctx.containsBean("testBean3"), is(true)). }
false;public;0;9;;@Test public void localImportIsProcessedLast() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(MultiMetaImportConfigWithLocalImportWithBeanOverride.class).     ctx.refresh().     assertThat(ctx.containsBean("testBean1"), is(true)).     assertThat(ctx.containsBean("testBean2"), is(true)).     assertThat(ctx.getBean("testBean2", TestBean.class).getName(), is("2a")). }
false;public;0;9;;@Test public void importFromBean() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ImportFromBean.class).     ctx.refresh().     assertThat(ctx.containsBean("importAnnotationDetectionTests.ImportFromBean"), is(true)).     assertThat(ctx.containsBean("testBean1"), is(true)).     assertThat(ctx.getBean("testBean1", TestBean.class).getName(), is("1")). }
false;;0;4;;@Bean TestBean testBean1() {     return new TestBean("1"). }
false;;0;4;;@Bean TestBean testBean2() {     return new TestBean("2"). }
false;;0;4;;@Bean TestBean testBean2() {     return new TestBean("2a"). }
false;;0;4;;@Bean TestBean testBean3() {     return new TestBean("3"). }
