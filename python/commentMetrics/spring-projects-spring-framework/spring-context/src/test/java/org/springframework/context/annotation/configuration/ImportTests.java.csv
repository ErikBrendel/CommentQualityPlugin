commented;modifiers;parameterAmount;loc;comment;code
false;private;1;9;;private DefaultListableBeanFactory processConfigurationClasses(Class<?>... classes) {     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     for (Class<?> clazz : classes) {         beanFactory.registerBeanDefinition(clazz.getSimpleName(), new RootBeanDefinition(clazz)).     }     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     return beanFactory. }
false;private;2;9;;private void assertBeanDefinitionCount(int expectedCount, Class<?>... classes) {     DefaultListableBeanFactory beanFactory = processConfigurationClasses(classes).     assertThat(beanFactory.getBeanDefinitionCount(), equalTo(expectedCount)).     beanFactory.preInstantiateSingletons().     for (Class<?> clazz : classes) {         beanFactory.getBean(clazz).     } }
false;public;0;10;;@Test public void testProcessImportsWithAsm() {     int configClasses = 2.     int beansInClasses = 2.     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ConfigurationWithImportAnnotation.class.getName())).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     assertThat(beanFactory.getBeanDefinitionCount(), equalTo(configClasses + beansInClasses)). }
false;public;0;6;;@Test public void testProcessImportsWithDoubleImports() {     int configClasses = 3.     int beansInClasses = 3.     assertBeanDefinitionCount((configClasses + beansInClasses), ConfigurationWithImportAnnotation.class, OtherConfigurationWithImportAnnotation.class). }
false;public;0;6;;@Test public void testProcessImportsWithExplicitOverridingBefore() {     int configClasses = 2.     int beansInClasses = 2.     assertBeanDefinitionCount((configClasses + beansInClasses), OtherConfiguration.class, ConfigurationWithImportAnnotation.class). }
false;public;0;6;;@Test public void testProcessImportsWithExplicitOverridingAfter() {     int configClasses = 2.     int beansInClasses = 2.     assertBeanDefinitionCount((configClasses + beansInClasses), ConfigurationWithImportAnnotation.class, OtherConfiguration.class). }
false;public;0;4;;@Bean public ITestBean one() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean two() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean three() {     return new TestBean(). }
false;public;0;6;;// ------------------------------------------------------------------------ @Test public void testImportAnnotationWithTwoLevelRecursion() {     int configClasses = 2.     int beansInClasses = 3.     assertBeanDefinitionCount((configClasses + beansInClasses), AppConfig.class). }
false;public;0;4;;@Bean public ITestBean transferService() {     return new TestBean(accountRepository()). }
false;public;0;4;;@Bean public ITestBean accountRepository() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean dataSourceA() {     return new TestBean(). }
false;public;0;6;;// ------------------------------------------------------------------------ @Test public void testImportAnnotationWithThreeLevelRecursion() {     int configClasses = 4.     int beansInClasses = 5.     assertBeanDefinitionCount(configClasses + beansInClasses, FirstLevel.class). }
false;public;0;6;;// ------------------------------------------------------------------------ @Test public void testImportAnnotationWithMultipleArguments() {     int configClasses = 3.     int beansInClasses = 3.     assertBeanDefinitionCount((configClasses + beansInClasses), WithMultipleArgumentsToImportAnnotation.class). }
false;public;0;10;;@Test public void testImportAnnotationWithMultipleArgumentsResultingInOverriddenBeanDefinition() {     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(WithMultipleArgumentsThatWillCauseDuplication.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     assertThat(beanFactory.getBeanDefinitionCount(), equalTo(4)).     assertThat(beanFactory.getBean("foo", ITestBean.class).getName(), equalTo("foo2")). }
false;public;0;4;;@Bean public ITestBean foo() {     return new TestBean("foo1"). }
false;public;0;4;;@Bean public ITestBean foo() {     return new TestBean("foo2"). }
false;public;0;6;;// ------------------------------------------------------------------------ @Test public void testImportAnnotationOnInnerClasses() {     int configClasses = 2.     int beansInClasses = 2.     assertBeanDefinitionCount((configClasses + beansInClasses), OuterConfig.InnerConfig.class). }
false;;0;4;;@Bean String whatev() {     return "whatev". }
false;public;0;4;;@Bean public ITestBean innerBean() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean extBean() {     return new TestBean(). }
false;public;0;4;;@Bean public TestBean m() {     return new TestBean(). }
false;public;0;4;;@Bean public TestBean n() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean thirdLevelA() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean thirdLevelB() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean thirdLevelC() {     return new TestBean(). }
false;public;0;4;;@Bean public TestBean m() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean left() {     return new TestBean(). }
false;public;0;4;;@Bean public ITestBean right() {     return new TestBean(). }
false;public;0;6;;// ------------------------------------------------------------------------ @Test public void testImportNonConfigurationAnnotationClass() {     int configClasses = 2.     int beansInClasses = 0.     assertBeanDefinitionCount((configClasses + beansInClasses), ConfigAnnotated.class). }
true;public;0;9;/**  * Test that values supplied to @Configuration(value="...") are propagated as the  * bean name for the configuration class even in the case of inclusion via @Import  * or in the case of automatic registration via nesting  */ ;// ------------------------------------------------------------------------ /**  * Test that values supplied to @Configuration(value="...") are propagated as the  * bean name for the configuration class even in the case of inclusion via @Import  * or in the case of automatic registration via nesting  */ @Test public void reproSpr9023() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(B.class).     ctx.refresh().     System.out.println(ctx.getBeanFactory()).     assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b")).     assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a")). }
false;public;0;6;;@Test public void testProcessImports() {     int configClasses = 2.     int beansInClasses = 2.     assertBeanDefinitionCount((configClasses + beansInClasses), ConfigurationWithImportAnnotation.class). }
