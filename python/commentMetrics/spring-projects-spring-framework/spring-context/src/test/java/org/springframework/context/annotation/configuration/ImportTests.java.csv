# id;timestamp;commentText;codeText;commentWords;codeWords
ImportTests -> @Test 	public void reproSpr9023();1329142650;Test that values supplied to @Configuration(value="...") are propagated as the_bean name for the configuration class even in the case of inclusion via @Import_or in the case of automatic registration via nesting;@Test_	public void reproSpr9023() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(B.class)__		ctx.refresh()__		System.out.println(ctx.getBeanFactory())__		assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b"))__		assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a"))__	};test,that,values,supplied,to,configuration,value,are,propagated,as,the,bean,name,for,the,configuration,class,even,in,the,case,of,inclusion,via,import,or,in,the,case,of,automatic,registration,via,nesting;test,public,void,repro,spr9023,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,b,class,ctx,refresh,system,out,println,ctx,get,bean,factory,assert,that,ctx,get,bean,names,for,type,b,class,0,is,config,b,assert,that,ctx,get,bean,names,for,type,a,class,0,is,config,a
ImportTests -> @Test 	public void reproSpr9023();1356735495;Test that values supplied to @Configuration(value="...") are propagated as the_bean name for the configuration class even in the case of inclusion via @Import_or in the case of automatic registration via nesting;@Test_	public void reproSpr9023() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(B.class)__		ctx.refresh()__		System.out.println(ctx.getBeanFactory())__		assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b"))__		assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a"))__	};test,that,values,supplied,to,configuration,value,are,propagated,as,the,bean,name,for,the,configuration,class,even,in,the,case,of,inclusion,via,import,or,in,the,case,of,automatic,registration,via,nesting;test,public,void,repro,spr9023,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,b,class,ctx,refresh,system,out,println,ctx,get,bean,factory,assert,that,ctx,get,bean,names,for,type,b,class,0,is,config,b,assert,that,ctx,get,bean,names,for,type,a,class,0,is,config,a
ImportTests -> @Test 	public void reproSpr9023();1362408075;Test that values supplied to @Configuration(value="...") are propagated as the_bean name for the configuration class even in the case of inclusion via @Import_or in the case of automatic registration via nesting;@Test_	public void reproSpr9023() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(B.class)__		ctx.refresh()__		System.out.println(ctx.getBeanFactory())__		assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b"))__		assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a"))__	};test,that,values,supplied,to,configuration,value,are,propagated,as,the,bean,name,for,the,configuration,class,even,in,the,case,of,inclusion,via,import,or,in,the,case,of,automatic,registration,via,nesting;test,public,void,repro,spr9023,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,b,class,ctx,refresh,system,out,println,ctx,get,bean,factory,assert,that,ctx,get,bean,names,for,type,b,class,0,is,config,b,assert,that,ctx,get,bean,names,for,type,a,class,0,is,config,a
ImportTests -> @Test 	public void reproSpr9023();1385507683;Test that values supplied to @Configuration(value="...") are propagated as the_bean name for the configuration class even in the case of inclusion via @Import_or in the case of automatic registration via nesting;@Test_	public void reproSpr9023() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(B.class)__		ctx.refresh()__		System.out.println(ctx.getBeanFactory())__		assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b"))__		assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a"))__	};test,that,values,supplied,to,configuration,value,are,propagated,as,the,bean,name,for,the,configuration,class,even,in,the,case,of,inclusion,via,import,or,in,the,case,of,automatic,registration,via,nesting;test,public,void,repro,spr9023,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,b,class,ctx,refresh,system,out,println,ctx,get,bean,factory,assert,that,ctx,get,bean,names,for,type,b,class,0,is,config,b,assert,that,ctx,get,bean,names,for,type,a,class,0,is,config,a
ImportTests -> @Test 	public void reproSpr9023();1413848647;Test that values supplied to @Configuration(value="...") are propagated as the_bean name for the configuration class even in the case of inclusion via @Import_or in the case of automatic registration via nesting;@Test_	public void reproSpr9023() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(B.class)__		ctx.refresh()__		System.out.println(ctx.getBeanFactory())__		assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b"))__		assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a"))__	};test,that,values,supplied,to,configuration,value,are,propagated,as,the,bean,name,for,the,configuration,class,even,in,the,case,of,inclusion,via,import,or,in,the,case,of,automatic,registration,via,nesting;test,public,void,repro,spr9023,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,b,class,ctx,refresh,system,out,println,ctx,get,bean,factory,assert,that,ctx,get,bean,names,for,type,b,class,0,is,config,b,assert,that,ctx,get,bean,names,for,type,a,class,0,is,config,a
ImportTests -> @Test 	public void reproSpr9023();1427794760;Test that values supplied to @Configuration(value="...") are propagated as the_bean name for the configuration class even in the case of inclusion via @Import_or in the case of automatic registration via nesting;@Test_	public void reproSpr9023() {_		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext()__		ctx.register(B.class)__		ctx.refresh()__		System.out.println(ctx.getBeanFactory())__		assertThat(ctx.getBeanNamesForType(B.class)[0], is("config-b"))__		assertThat(ctx.getBeanNamesForType(A.class)[0], is("config-a"))__	};test,that,values,supplied,to,configuration,value,are,propagated,as,the,bean,name,for,the,configuration,class,even,in,the,case,of,inclusion,via,import,or,in,the,case,of,automatic,registration,via,nesting;test,public,void,repro,spr9023,annotation,config,application,context,ctx,new,annotation,config,application,context,ctx,register,b,class,ctx,refresh,system,out,println,ctx,get,bean,factory,assert,that,ctx,get,bean,names,for,type,b,class,0,is,config,b,assert,that,ctx,get,bean,names,for,type,a,class,0,is,config,a
