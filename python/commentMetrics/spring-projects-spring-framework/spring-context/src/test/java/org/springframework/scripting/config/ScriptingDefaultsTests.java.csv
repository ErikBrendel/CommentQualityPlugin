commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void defaultRefreshCheckDelay() throws Exception {     ApplicationContext context = new ClassPathXmlApplicationContext(CONFIG).     Advised advised = (Advised) context.getBean("testBean").     AbstractRefreshableTargetSource targetSource = ((AbstractRefreshableTargetSource) advised.getTargetSource()).     Field field = AbstractRefreshableTargetSource.class.getDeclaredField("refreshCheckDelay").     field.setAccessible(true).     long delay = ((Long) field.get(targetSource)).longValue().     assertEquals(5000L, delay). }
false;public;0;6;;@Test public void defaultInitMethod() {     ApplicationContext context = new ClassPathXmlApplicationContext(CONFIG).     ITestBean testBean = (ITestBean) context.getBean("testBean").     assertTrue(testBean.isInitialized()). }
false;public;0;6;;@Test public void nameAsAlias() {     ApplicationContext context = new ClassPathXmlApplicationContext(CONFIG).     ITestBean testBean = (ITestBean) context.getBean("/url").     assertTrue(testBean.isInitialized()). }
false;public;0;8;;@Test public void defaultDestroyMethod() {     ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(CONFIG).     ITestBean testBean = (ITestBean) context.getBean("nonRefreshableTestBean").     assertFalse(testBean.isDestroyed()).     context.close().     assertTrue(testBean.isDestroyed()). }
false;public;0;7;;@Test public void defaultAutowire() {     ApplicationContext context = new ClassPathXmlApplicationContext(CONFIG).     ITestBean testBean = (ITestBean) context.getBean("testBean").     ITestBean otherBean = (ITestBean) context.getBean("otherBean").     assertEquals(otherBean, testBean.getOtherBean()). }
false;public;0;6;;@Test public void defaultProxyTargetClass() {     ApplicationContext context = new ClassPathXmlApplicationContext(PROXY_CONFIG).     Object testBean = context.getBean("testBean").     assertTrue(AopUtils.isCglibProxy(testBean)). }
