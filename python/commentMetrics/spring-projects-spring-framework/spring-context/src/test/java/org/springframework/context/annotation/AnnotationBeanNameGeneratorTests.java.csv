commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void generateBeanNameWithNamedComponent() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentWithName.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertNotNull("The generated beanName must *never* be null.", beanName).     assertTrue("The generated beanName must *never* be blank.", StringUtils.hasText(beanName)).     assertEquals("walden", beanName). }
false;public;0;9;;@Test public void generateBeanNameWithDefaultNamedComponent() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(DefaultNamedComponent.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertNotNull("The generated beanName must *never* be null.", beanName).     assertTrue("The generated beanName must *never* be blank.", StringUtils.hasText(beanName)).     assertEquals("thoreau", beanName). }
false;public;0;10;;@Test public void generateBeanNameWithNamedComponentWhereTheNameIsBlank() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentWithBlankName.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertNotNull("The generated beanName must *never* be null.", beanName).     assertTrue("The generated beanName must *never* be blank.", StringUtils.hasText(beanName)).     String expectedGeneratedBeanName = this.beanNameGenerator.buildDefaultBeanName(bd).     assertEquals(expectedGeneratedBeanName, beanName). }
false;public;0;10;;@Test public void generateBeanNameWithAnonymousComponentYieldsGeneratedBeanName() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnonymousComponent.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertNotNull("The generated beanName must *never* be null.", beanName).     assertTrue("The generated beanName must *never* be blank.", StringUtils.hasText(beanName)).     String expectedGeneratedBeanName = this.beanNameGenerator.buildDefaultBeanName(bd).     assertEquals(expectedGeneratedBeanName, beanName). }
false;public;0;7;;@Test public void generateBeanNameFromMetaComponentWithStringValue() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentFromStringMeta.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertEquals("henry", beanName). }
false;public;0;7;;@Test public void generateBeanNameFromMetaComponentWithNonStringValue() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentFromNonStringMeta.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertEquals("annotationBeanNameGeneratorTests.ComponentFromNonStringMeta", beanName). }
true;public;0;8;/**  * @since 4.0.1  * @see https://jira.spring.io/browse/SPR-11360  */ ;/**  * @since 4.0.1  * @see https://jira.spring.io/browse/SPR-11360  */ @Test public void generateBeanNameFromComposedControllerAnnotationWithoutName() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComposedControllerAnnotationWithoutName.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     String expectedGeneratedBeanName = this.beanNameGenerator.buildDefaultBeanName(bd).     assertEquals(expectedGeneratedBeanName, beanName). }
true;public;0;8;/**  * @since 4.0.1  * @see https://jira.spring.io/browse/SPR-11360  */ ;/**  * @since 4.0.1  * @see https://jira.spring.io/browse/SPR-11360  */ @Test public void generateBeanNameFromComposedControllerAnnotationWithBlankName() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComposedControllerAnnotationWithBlankName.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     String expectedGeneratedBeanName = this.beanNameGenerator.buildDefaultBeanName(bd).     assertEquals(expectedGeneratedBeanName, beanName). }
true;public;0;8;/**  * @since 4.0.1  * @see https://jira.spring.io/browse/SPR-11360  */ ;/**  * @since 4.0.1  * @see https://jira.spring.io/browse/SPR-11360  */ @Test public void generateBeanNameFromComposedControllerAnnotationWithStringValue() {     BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry().     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComposedControllerAnnotationWithStringValue.class).     String beanName = this.beanNameGenerator.generateBeanName(bd, registry).     assertEquals("restController", beanName). }
