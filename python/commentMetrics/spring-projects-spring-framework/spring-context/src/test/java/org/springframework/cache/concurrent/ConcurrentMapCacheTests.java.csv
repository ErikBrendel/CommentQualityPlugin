commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     this.nativeCache = new ConcurrentHashMap<>().     this.cache = new ConcurrentMapCache(CACHE_NAME, this.nativeCache, true).     this.nativeCacheNoNull = new ConcurrentHashMap<>().     this.cacheNoNull = new ConcurrentMapCache(CACHE_NAME_NO_NULL, this.nativeCacheNoNull, false).     this.cache.clear(). }
false;protected;0;4;;@Override protected ConcurrentMapCache getCache() {     return getCache(true). }
false;protected;1;4;;@Override protected ConcurrentMapCache getCache(boolean allowNull) {     return allowNull ? this.cache : this.cacheNoNull. }
false;protected;0;4;;@Override protected ConcurrentMap<Object, Object> getNativeCache() {     return this.nativeCache. }
false;public;0;4;;@Test public void testIsStoreByReferenceByDefault() {     assertFalse(this.cache.isStoreByValue()). }
false;public;0;15;;@SuppressWarnings("unchecked") @Test public void testSerializer() {     ConcurrentMapCache serializeCache = createCacheWithStoreByValue().     assertTrue(serializeCache.isStoreByValue()).     Object key = createRandomKey().     List<String> content = new ArrayList<>().     content.addAll(Arrays.asList("one", "two", "three")).     serializeCache.put(key, content).     content.remove(0).     List<String> entry = (List<String>) serializeCache.get(key).get().     assertEquals(3, entry.size()).     assertEquals("one", entry.get(0)). }
false;public;0;9;;@Test public void testNonSerializableContent() {     ConcurrentMapCache serializeCache = createCacheWithStoreByValue().     this.thrown.expect(IllegalArgumentException.class).     this.thrown.expectMessage("Failed to serialize").     this.thrown.expectMessage(this.cache.getClass().getName()).     serializeCache.put(createRandomKey(), this.cache). }
false;public;0;11;;@Test public void testInvalidSerializedContent() {     ConcurrentMapCache serializeCache = createCacheWithStoreByValue().     String key = createRandomKey().     this.nativeCache.put(key, "Some garbage").     this.thrown.expect(IllegalArgumentException.class).     this.thrown.expectMessage("Failed to deserialize").     this.thrown.expectMessage("Some garbage").     serializeCache.get(key). }
false;private;0;4;;private ConcurrentMapCache createCacheWithStoreByValue() {     return new ConcurrentMapCache(CACHE_NAME, this.nativeCache, true, new SerializationDelegate(ConcurrentMapCacheTests.class.getClassLoader())). }
