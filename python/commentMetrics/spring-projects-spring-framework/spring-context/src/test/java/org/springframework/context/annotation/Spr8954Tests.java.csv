commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void repro() {     AnnotationConfigApplicationContext bf = new AnnotationConfigApplicationContext().     bf.registerBeanDefinition("fooConfig", new RootBeanDefinition(FooConfig.class)).     bf.getBeanFactory().addBeanPostProcessor(new PredictingBPP()).     bf.refresh().     assertThat(bf.getBean("foo"), instanceOf(Foo.class)).     assertThat(bf.getBean("&foo"), instanceOf(FooFactoryBean.class)).     assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true)).     @SuppressWarnings("rawtypes")     Map<String, FactoryBean> fbBeans = bf.getBeansOfType(FactoryBean.class).     assertThat(1, equalTo(fbBeans.size())).     assertThat("&foo", equalTo(fbBeans.keySet().iterator().next())).     Map<String, AnInterface> aiBeans = bf.getBeansOfType(AnInterface.class).     assertThat(1, equalTo(aiBeans.size())).     assertThat("&foo", equalTo(aiBeans.keySet().iterator().next())). }
false;public;0;18;;@Test public void findsBeansByTypeIfNotInstantiated() {     AnnotationConfigApplicationContext bf = new AnnotationConfigApplicationContext().     bf.registerBeanDefinition("fooConfig", new RootBeanDefinition(FooConfig.class)).     bf.getBeanFactory().addBeanPostProcessor(new PredictingBPP()).     bf.refresh().     assertThat(bf.isTypeMatch("&foo", FactoryBean.class), is(true)).     @SuppressWarnings("rawtypes")     Map<String, FactoryBean> fbBeans = bf.getBeansOfType(FactoryBean.class).     assertThat(1, equalTo(fbBeans.size())).     assertThat("&foo", equalTo(fbBeans.keySet().iterator().next())).     Map<String, AnInterface> aiBeans = bf.getBeansOfType(AnInterface.class).     assertThat(1, equalTo(aiBeans.size())).     assertThat("&foo", equalTo(aiBeans.keySet().iterator().next())). }
false;;0;3;;@Bean FooFactoryBean foo() {     return new FooFactoryBean(). }
false;public;0;4;;@Override public Foo getObject() {     return new Foo(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Foo.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;2;4;;@Override public Class<?> predictBeanType(Class<?> beanClass, String beanName) {     return FactoryBean.class.isAssignableFrom(beanClass) ? PredictedType.class : null. }
false;public;3;4;;@Override public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) {     return pvs. }
