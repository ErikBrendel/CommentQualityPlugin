commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() {     originalSecurityManager = System.getSecurityManager().     env = StandardEnvironmentTests.getModifiableSystemEnvironment().     env.put(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME, "p1"). }
false;public;0;5;;@After public void tearDown() {     env.remove(AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME).     System.setSecurityManager(originalSecurityManager). }
false;public;1;8;;@Override public void checkPermission(Permission perm) {     // ReadOnlySystemAttributesMap will come into play.     if ("getenv.*".equals(perm.getName())) {         throw new AccessControlException("Accessing the system environment is disallowed").     } }
false;public;0;19;;@Test public void securityManagerDisallowsAccessToSystemEnvironmentButAllowsAccessToIndividualKeys() {     SecurityManager securityManager = new SecurityManager() {          @Override         public void checkPermission(Permission perm) {             // ReadOnlySystemAttributesMap will come into play.             if ("getenv.*".equals(perm.getName())) {                 throw new AccessControlException("Accessing the system environment is disallowed").             }         }     }.     System.setSecurityManager(securityManager).     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(bf).     reader.register(C1.class).     assertThat(bf.containsBean("c1"), is(true)). }
false;public;1;18;;@Override public void checkPermission(Permission perm) {     // ReadOnlySystemAttributesMap will come into play.     if ("getenv.*".equals(perm.getName())) {         throw new AccessControlException("Accessing the system environment is disallowed").     }     // be ignored.     if (("getenv." + AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME).equals(perm.getName())) {         throw new AccessControlException(format("Accessing system environment variable [%s] is disallowed", AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME)).     } }
false;public;0;29;;@Test public void securityManagerDisallowsAccessToSystemEnvironmentAndDisallowsAccessToIndividualKey() {     SecurityManager securityManager = new SecurityManager() {          @Override         public void checkPermission(Permission perm) {             // ReadOnlySystemAttributesMap will come into play.             if ("getenv.*".equals(perm.getName())) {                 throw new AccessControlException("Accessing the system environment is disallowed").             }             // be ignored.             if (("getenv." + AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME).equals(perm.getName())) {                 throw new AccessControlException(format("Accessing system environment variable [%s] is disallowed", AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME)).             }         }     }.     System.setSecurityManager(securityManager).     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(bf).     reader.register(C1.class).     assertThat(bf.containsBean("c1"), is(false)). }
