commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     DefaultsTestBean.INIT_COUNT = 0. }
false;public;0;10;;@Test public void testDefaultLazyInit() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultWithNoOverridesTests.xml").     assertFalse("lazy-init should be false", context.getBeanDefinition(TEST_BEAN_NAME).isLazyInit()).     assertEquals("initCount should be 0", 0, DefaultsTestBean.INIT_COUNT).     context.refresh().     assertEquals("bean should have been instantiated", 1, DefaultsTestBean.INIT_COUNT). }
false;public;0;12;;@Test public void testLazyInitTrue() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultLazyInitTrueTests.xml").     assertTrue("lazy-init should be true", context.getBeanDefinition(TEST_BEAN_NAME).isLazyInit()).     assertEquals("initCount should be 0", 0, DefaultsTestBean.INIT_COUNT).     context.refresh().     assertEquals("bean should not have been instantiated yet", 0, DefaultsTestBean.INIT_COUNT).     context.getBean(TEST_BEAN_NAME).     assertEquals("bean should have been instantiated", 1, DefaultsTestBean.INIT_COUNT). }
false;public;0;10;;@Test public void testLazyInitFalse() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultLazyInitFalseTests.xml").     assertFalse("lazy-init should be false", context.getBeanDefinition(TEST_BEAN_NAME).isLazyInit()).     assertEquals("initCount should be 0", 0, DefaultsTestBean.INIT_COUNT).     context.refresh().     assertEquals("bean should have been instantiated", 1, DefaultsTestBean.INIT_COUNT). }
false;public;0;11;;@Test public void testDefaultAutowire() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultWithNoOverridesTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertNull("no dependencies should have been autowired", bean.getConstructorDependency()).     assertNull("no dependencies should have been autowired", bean.getPropertyDependency1()).     assertNull("no dependencies should have been autowired", bean.getPropertyDependency2()). }
false;public;0;11;;@Test public void testAutowireNo() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultAutowireNoTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertNull("no dependencies should have been autowired", bean.getConstructorDependency()).     assertNull("no dependencies should have been autowired", bean.getPropertyDependency1()).     assertNull("no dependencies should have been autowired", bean.getPropertyDependency2()). }
false;public;0;12;;@Test public void testAutowireConstructor() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultAutowireConstructorTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertNotNull("constructor dependency should have been autowired", bean.getConstructorDependency()).     assertEquals("cd", bean.getConstructorDependency().getName()).     assertNull("property dependencies should not have been autowired", bean.getPropertyDependency1()).     assertNull("property dependencies should not have been autowired", bean.getPropertyDependency2()). }
false;public;0;13;;@Test public void testAutowireByType() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultAutowireByTypeTests.xml").     try {         context.refresh().         fail("expected exception due to multiple matches for byType autowiring").     } catch (UnsatisfiedDependencyException ex) {     // expected     } }
false;public;0;12;;@Test public void testAutowireByName() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultAutowireByNameTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertNull("constructor dependency should not have been autowired", bean.getConstructorDependency()).     assertNull("propertyDependency1 should not have been autowired", bean.getPropertyDependency1()).     assertNotNull("propertyDependency2 should have been autowired", bean.getPropertyDependency2()).     assertEquals("pd2", bean.getPropertyDependency2().getName()). }
false;public;0;11;;@Test public void testDefaultDependencyCheck() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultWithNoOverridesTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertNull("constructor dependency should not have been autowired", bean.getConstructorDependency()).     assertNull("property dependencies should not have been autowired", bean.getPropertyDependency1()).     assertNull("property dependencies should not have been autowired", bean.getPropertyDependency2()). }
false;public;0;11;;@Test public void testDefaultInitAndDestroyMethodsNotDefined() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultWithNoOverridesTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertFalse("bean should not have been initialized", bean.isInitialized()).     context.close().     assertFalse("bean should not have been destroyed", bean.isDestroyed()). }
false;public;0;11;;@Test public void testDefaultInitAndDestroyMethodsDefined() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultInitAndDestroyMethodsTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertTrue("bean should have been initialized", bean.isInitialized()).     context.close().     assertTrue("bean should have been destroyed", bean.isDestroyed()). }
false;public;0;11;;@Test public void testDefaultNonExistingInitAndDestroyMethodsDefined() {     GenericApplicationContext context = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(LOCATION_PREFIX + "defaultNonExistingInitAndDestroyMethodsTests.xml").     context.refresh().     DefaultsTestBean bean = (DefaultsTestBean) context.getBean(TEST_BEAN_NAME).     assertFalse("bean should not have been initialized", bean.isInitialized()).     context.close().     assertFalse("bean should not have been destroyed", bean.isDestroyed()). }
false;public;0;3;;public void init() {     this.initialized = true. }
false;public;0;3;;public boolean isInitialized() {     return this.initialized. }
false;public;0;3;;public void destroy() {     this.destroyed = true. }
false;public;0;3;;public boolean isDestroyed() {     return this.destroyed. }
false;public;1;3;;public void setPropertyDependency1(PropertyDependencyTestBean pdtb) {     this.propertyDependency1 = pdtb. }
false;public;1;3;;public void setPropertyDependency2(PropertyDependencyTestBean pdtb) {     this.propertyDependency2 = pdtb. }
false;public;0;3;;public ConstructorDependencyTestBean getConstructorDependency() {     return this.constructorDependency. }
false;public;0;3;;public PropertyDependencyTestBean getPropertyDependency1() {     return this.propertyDependency1. }
false;public;0;3;;public PropertyDependencyTestBean getPropertyDependency2() {     return this.propertyDependency2. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public String getName() {     return this.name. }
