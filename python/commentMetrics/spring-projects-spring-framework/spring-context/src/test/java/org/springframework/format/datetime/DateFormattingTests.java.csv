commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     DateFormatterRegistrar registrar = new DateFormatterRegistrar().     setup(registrar). }
false;private;1;11;;private void setup(DateFormatterRegistrar registrar) {     DefaultConversionService.addDefaultConverters(conversionService).     registrar.registerFormatters(conversionService).     SimpleDateBean bean = new SimpleDateBean().     bean.getChildren().add(new SimpleDateBean()).     binder = new DataBinder(bean).     binder.setConversionService(conversionService).     LocaleContextHolder.setLocale(Locale.US). }
false;public;0;4;;@After public void tearDown() {     LocaleContextHolder.setLocale(null). }
false;public;0;8;;@Test public void testBindLong() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("millis", "1256961600").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1256961600", binder.getBindingResult().getFieldValue("millis")). }
false;public;0;8;;@Test public void testBindLongAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("millisAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("millisAnnotated")). }
false;public;0;8;;@Test public void testBindCalendarAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("calendarAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("calendarAnnotated")). }
false;public;0;8;;@Test public void testBindDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("dateAnnotated")). }
false;public;0;7;;@Test public void testBindDateArray() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotated", new String[] { "10/31/09 12:00 PM" }).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()). }
false;public;0;8;;@Test public void testBindDateAnnotatedWithError() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotated", "Oct X31, 2009").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getFieldErrorCount("dateAnnotated")).     assertEquals("Oct X31, 2009", binder.getBindingResult().getFieldValue("dateAnnotated")). }
false;public;0;10;;@Test @Ignore public void testBindDateAnnotatedWithFallbackError() {     // TODO This currently passes because of the Date(String) constructor fallback is used     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotated", "Oct 031, 2009").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getFieldErrorCount("dateAnnotated")).     assertEquals("Oct 031, 2009", binder.getBindingResult().getFieldValue("dateAnnotated")). }
false;public;0;8;;@Test public void testBindDateAnnotatedPattern() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotatedPattern", "10/31/09 1:05").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09 1:05", binder.getBindingResult().getFieldValue("dateAnnotatedPattern")). }
false;public;0;7;;@Test public void testBindDateTimeOverflow() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateAnnotatedPattern", "02/29/09 12:00 PM").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getErrorCount()). }
false;public;0;8;;@Test public void testBindISODate() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDate", "2009-10-31").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31", binder.getBindingResult().getFieldValue("isoDate")). }
false;public;0;8;;@Test public void testBindISOTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoTime", "12:00:00.000-05:00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("17:00:00.000Z", binder.getBindingResult().getFieldValue("isoTime")). }
false;public;0;8;;@Test public void testBindISODateTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDateTime", "2009-10-31T12:00:00.000-08:00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T20:00:00.000Z", binder.getBindingResult().getFieldValue("isoDateTime")). }
false;public;0;8;;@Test public void testBindNestedDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("children[0].dateAnnotated", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("children[0].dateAnnotated")). }
false;public;0;7;;@Test public void dateToStringWithoutGlobalFormat() {     Date date = new Date().     Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class)).     String expected = date.toString().     assertEquals(expected, actual). }
false;public;0;10;;@Test public void dateToStringWithGlobalFormat() {     DateFormatterRegistrar registrar = new DateFormatterRegistrar().     registrar.setFormatter(new DateFormatter()).     setup(registrar).     Date date = new Date().     Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class)).     String expected = new DateFormatter().print(date, Locale.US).     assertEquals(expected, actual). }
false;public;0;7;;// SPR-10105 @Test @SuppressWarnings("deprecation") public void stringToDateWithoutGlobalFormat() {     String string = "Sat, 12 Aug 1995 13:30:00 GM".     Date date = this.conversionService.convert(string, Date.class).     assertThat(date, equalTo(new Date(string))). }
false;public;0;12;;// SPR-10105 @Test public void stringToDateWithGlobalFormat() {     DateFormatterRegistrar registrar = new DateFormatterRegistrar().     DateFormatter dateFormatter = new DateFormatter().     dateFormatter.setIso(ISO.DATE_TIME).     registrar.setFormatter(dateFormatter).     setup(registrar).     // This is a format that cannot be parsed by new Date(String)     String string = "2009-06-01T14:23:05.003+00:00".     Date date = this.conversionService.convert(string, Date.class).     assertNotNull(date). }
false;public;0;3;;public Long getMillis() {     return millis. }
false;public;1;3;;public void setMillis(Long millis) {     this.millis = millis. }
false;public;0;4;;@DateTimeFormat(style = "S-") public Long getMillisAnnotated() {     return millisAnnotated. }
false;public;1;3;;public void setMillisAnnotated(@DateTimeFormat(style = "S-") Long millisAnnotated) {     this.millisAnnotated = millisAnnotated. }
false;public;0;3;;public Calendar getCalendarAnnotated() {     return calendarAnnotated. }
false;public;1;3;;public void setCalendarAnnotated(Calendar calendarAnnotated) {     this.calendarAnnotated = calendarAnnotated. }
false;public;0;3;;public Date getDateAnnotated() {     return dateAnnotated. }
false;public;1;3;;public void setDateAnnotated(Date dateAnnotated) {     this.dateAnnotated = dateAnnotated. }
false;public;0;3;;public Date getDateAnnotatedPattern() {     return dateAnnotatedPattern. }
false;public;1;3;;public void setDateAnnotatedPattern(Date dateAnnotatedPattern) {     this.dateAnnotatedPattern = dateAnnotatedPattern. }
false;public;0;3;;public Date getIsoDate() {     return isoDate. }
false;public;1;3;;public void setIsoDate(Date isoDate) {     this.isoDate = isoDate. }
false;public;0;3;;public Date getIsoTime() {     return isoTime. }
false;public;1;3;;public void setIsoTime(Date isoTime) {     this.isoTime = isoTime. }
false;public;0;3;;public Date getIsoDateTime() {     return isoDateTime. }
false;public;1;3;;public void setIsoDateTime(Date isoDateTime) {     this.isoDateTime = isoDateTime. }
false;public;0;3;;public List<SimpleDateBean> getChildren() {     return children. }
