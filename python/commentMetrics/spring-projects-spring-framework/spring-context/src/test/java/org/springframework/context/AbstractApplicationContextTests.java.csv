commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     this.applicationContext = createContext(). }
false;protected;0;4;;@Override protected BeanFactory getBeanFactory() {     return applicationContext. }
false;protected;0;3;;protected ApplicationContext getApplicationContext() {     return applicationContext. }
true;protected,abstract;0;1;/**  * Must register a TestListener.  * Must register standard beans.  * Parent must register rod with name Roderick  * and father with name Albert.  */ ;/**  * Must register a TestListener.  * Must register standard beans.  * Parent must register rod with name Roderick  * and father with name Albert.  */ protected abstract ConfigurableApplicationContext createContext() throws Exception.
false;public;0;8;;@Test public void contextAwareSingletonWasCalledBack() throws Exception {     ACATester aca = (ACATester) applicationContext.getBean("aca").     assertTrue("has had context set", aca.getApplicationContext() == applicationContext).     Object aca2 = applicationContext.getBean("aca").     assertTrue("Same instance", aca == aca2).     assertTrue("Says is singleton", applicationContext.isSingleton("aca")). }
false;public;0;8;;@Test public void contextAwarePrototypeWasCalledBack() throws Exception {     ACATester aca = (ACATester) applicationContext.getBean("aca-prototype").     assertTrue("has had context set", aca.getApplicationContext() == applicationContext).     Object aca2 = applicationContext.getBean("aca-prototype").     assertTrue("NOT Same instance", aca != aca2).     assertTrue("Says is prototype", !applicationContext.isSingleton("aca-prototype")). }
false;public;0;4;;@Test public void parentNonNull() {     assertTrue("parent isn't null", applicationContext.getParent() != null). }
false;public;0;4;;@Test public void grandparentNull() {     assertTrue("grandparent is null", applicationContext.getParent().getParent() == null). }
false;public;0;5;;@Test public void overrideWorked() throws Exception {     TestBean rod = (TestBean) applicationContext.getParent().getBean("rod").     assertTrue("Parent's name differs", rod.getName().equals("Roderick")). }
false;public;0;5;;@Test public void grandparentDefinitionFound() throws Exception {     TestBean dad = (TestBean) applicationContext.getBean("father").     assertTrue("Dad has correct name", dad.getName().equals("Albert")). }
false;public;0;5;;@Test public void grandparentTypedDefinitionFound() throws Exception {     TestBean dad = applicationContext.getBean("father", TestBean.class).     assertTrue("Dad has correct name", dad.getName().equals("Albert")). }
false;public;0;15;;@Test public void closeTriggersDestroy() {     LifecycleBean lb = (LifecycleBean) applicationContext.getBean("lifecycle").     assertTrue("Not destroyed", !lb.isDestroyed()).     applicationContext.close().     if (applicationContext.getParent() != null) {         ((ConfigurableApplicationContext) applicationContext.getParent()).close().     }     assertTrue("Destroyed", lb.isDestroyed()).     applicationContext.close().     if (applicationContext.getParent() != null) {         ((ConfigurableApplicationContext) applicationContext.getParent()).close().     }     assertTrue("Destroyed", lb.isDestroyed()). }
false;public;0;7;;@Test(expected = NoSuchMessageException.class) public void messageSource() throws NoSuchMessageException {     assertEquals("message1", applicationContext.getMessage("code1", null, Locale.getDefault())).     assertEquals("message2", applicationContext.getMessage("code2", null, Locale.getDefault())).     applicationContext.getMessage("code0", null, Locale.getDefault()). }
false;public;0;4;;@Test public void events() throws Exception {     doTestEvents(this.listener, this.parentListener, new MyEvent(this)). }
false;public;0;12;;@Test public void eventsWithNoSource() throws Exception {     // See SPR-10945 Serialized events result in a null source     MyEvent event = new MyEvent(this).     ByteArrayOutputStream bos = new ByteArrayOutputStream().     ObjectOutputStream oos = new ObjectOutputStream(bos).     oos.writeObject(event).     oos.close().     event = (MyEvent) new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject().     doTestEvents(this.listener, this.parentListener, event). }
false;protected;3;10;;protected void doTestEvents(TestListener listener, TestListener parentListener, MyEvent event) {     listener.zeroCounter().     parentListener.zeroCounter().     assertTrue("0 events before publication", listener.getEventCount() == 0).     assertTrue("0 parent events before publication", parentListener.getEventCount() == 0).     this.applicationContext.publishEvent(event).     assertTrue("1 events after publication, not " + listener.getEventCount(), listener.getEventCount() == 1).     assertTrue("1 parent events after publication", parentListener.getEventCount() == 1). }
false;public;0;10;;@Test public void beanAutomaticallyHearsEvents() throws Exception {     // String[] listenerNames = ((ListableBeanFactory) applicationContext).getBeanDefinitionNames(ApplicationListener.class).     // assertTrue("listeners include beanThatListens", Arrays.asList(listenerNames).contains("beanThatListens")).     BeanThatListens b = (BeanThatListens) applicationContext.getBean("beanThatListens").     b.zero().     assertTrue("0 events before publication", b.getEventCount() == 0).     this.applicationContext.publishEvent(new MyEvent(this)).     assertTrue("1 events after publication, not " + b.getEventCount(), b.getEventCount() == 1). }
