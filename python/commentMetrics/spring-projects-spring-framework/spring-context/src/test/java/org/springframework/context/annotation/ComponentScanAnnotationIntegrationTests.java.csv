commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void controlScan() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.scan(example.scannable._package.class.getPackage().getName()).     ctx.refresh().     assertThat("control scan for example.scannable package failed to register FooServiceImpl bean", ctx.containsBean("fooServiceImpl"), is(true)). }
false;public;0;12;;@Test public void viaContextRegistration() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanAnnotatedConfig.class).     ctx.refresh().     ctx.getBean(ComponentScanAnnotatedConfig.class).     ctx.getBean(TestBean.class).     assertThat("config class bean not found", ctx.containsBeanDefinition("componentScanAnnotatedConfig"), is(true)).     assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected", ctx.containsBean("fooServiceImpl"), is(true)). }
false;public;0;12;;@Test public void viaContextRegistration_WithValueAttribute() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanAnnotatedConfig_WithValueAttribute.class).     ctx.refresh().     ctx.getBean(ComponentScanAnnotatedConfig_WithValueAttribute.class).     ctx.getBean(TestBean.class).     assertThat("config class bean not found", ctx.containsBeanDefinition("componentScanAnnotatedConfig_WithValueAttribute"), is(true)).     assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected", ctx.containsBean("fooServiceImpl"), is(true)). }
false;public;0;12;;@Test public void viaContextRegistration_FromPackageOfConfigClass() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanAnnotatedConfigWithImplicitBasePackage.class).     ctx.refresh().     ctx.getBean(ComponentScanAnnotatedConfigWithImplicitBasePackage.class).     assertThat("config class bean not found", ctx.containsBeanDefinition("componentScanAnnotatedConfigWithImplicitBasePackage"), is(true)).     assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected", ctx.containsBean("scannedComponent"), is(true)).     assertThat("@Bean method overrides scanned class", ctx.getBean(ConfigurableComponent.class).isFlag(), is(true)). }
false;public;0;15;;@Test public void viaContextRegistration_WithComposedAnnotation() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComposedAnnotationConfig.class).     ctx.refresh().     ctx.getBean(ComposedAnnotationConfig.class).     ctx.getBean(SimpleComponent.class).     ctx.getBean(ClassWithNestedComponents.NestedComponent.class).     ctx.getBean(ClassWithNestedComponents.OtherNestedComponent.class).     assertThat("config class bean not found", ctx.containsBeanDefinition("componentScanAnnotationIntegrationTests.ComposedAnnotationConfig"), is(true)).     assertThat("@ComponentScan annotated @Configuration class registered directly against " + "AnnotationConfigApplicationContext did not trigger component scanning as expected", ctx.containsBean("simpleComponent"), is(true)). }
false;public;0;16;;@Test public void viaBeanRegistration() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("componentScanAnnotatedConfig", genericBeanDefinition(ComponentScanAnnotatedConfig.class).getBeanDefinition()).     bf.registerBeanDefinition("configurationClassPostProcessor", genericBeanDefinition(ConfigurationClassPostProcessor.class).getBeanDefinition()).     GenericApplicationContext ctx = new GenericApplicationContext(bf).     ctx.refresh().     ctx.getBean(ComponentScanAnnotatedConfig.class).     ctx.getBean(TestBean.class).     assertThat("config class bean not found", ctx.containsBeanDefinition("componentScanAnnotatedConfig"), is(true)).     assertThat("@ComponentScan annotated @Configuration class registered " + "as bean definition did not trigger component scanning as expected", ctx.containsBean("fooServiceImpl"), is(true)). }
false;public;0;8;;@Test public void withCustomBeanNameGenerator() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithBeanNameGenerator.class).     ctx.refresh().     assertThat(ctx.containsBean("custom_fooServiceImpl"), is(true)).     assertThat(ctx.containsBean("fooServiceImpl"), is(false)). }
false;public;0;8;;@Test public void withScopeResolver() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ComponentScanWithScopeResolver.class).     // custom scope annotation makes the bean prototype scoped. subsequent calls     // to getBean should return distinct instances.     assertThat(ctx.getBean(CustomScopeAnnotationBean.class), not(sameInstance(ctx.getBean(CustomScopeAnnotationBean.class)))).     assertThat(ctx.containsBean("scannedComponent"), is(false)). }
false;public;0;6;;@Test public void multiComponentScan() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MultiComponentScan.class).     assertThat(ctx.getBean(CustomScopeAnnotationBean.class), not(sameInstance(ctx.getBean(CustomScopeAnnotationBean.class)))).     assertThat(ctx.containsBean("scannedComponent"), is(true)). }
false;public;0;7;;@Test public void withCustomTypeFilter() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ComponentScanWithCustomTypeFilter.class).     assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("componentScanParserTests.KustomAnnotationAutowiredBean")).     KustomAnnotationAutowiredBean testBean = ctx.getBean("componentScanParserTests.KustomAnnotationAutowiredBean", KustomAnnotationAutowiredBean.class).     assertThat(testBean.getDependency(), notNullValue()). }
false;public;0;5;;@Test public void withAwareTypeFilter() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ComponentScanWithAwareTypeFilter.class).     assertTrue(ctx.getEnvironment().acceptsProfiles(Profiles.of("the-filter-ran"))). }
false;public;0;16;;@Test public void withScopedProxy() throws IOException, ClassNotFoundException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithScopedProxy.class).     ctx.getBeanFactory().registerScope("myScope", new SimpleMapScope()).     ctx.refresh().     // should cast to the interface     FooService bean = (FooService) ctx.getBean("scopedProxyTestBean").     // should be dynamic proxy     assertThat(AopUtils.isJdkDynamicProxy(bean), is(true)).     // test serializability     assertThat(bean.foo(1), equalTo("bar")).     FooService deserialized = (FooService) SerializationTestUtils.serializeAndDeserialize(bean).     assertThat(deserialized, notNullValue()).     assertThat(deserialized.foo(1), equalTo("bar")). }
false;public;0;11;;@Test public void withScopedProxyThroughRegex() throws IOException, ClassNotFoundException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithScopedProxyThroughRegex.class).     ctx.getBeanFactory().registerScope("myScope", new SimpleMapScope()).     ctx.refresh().     // should cast to the interface     FooService bean = (FooService) ctx.getBean("scopedProxyTestBean").     // should be dynamic proxy     assertThat(AopUtils.isJdkDynamicProxy(bean), is(true)). }
false;public;0;11;;@Test public void withScopedProxyThroughAspectJPattern() throws IOException, ClassNotFoundException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithScopedProxyThroughAspectJPattern.class).     ctx.getBeanFactory().registerScope("myScope", new SimpleMapScope()).     ctx.refresh().     // should cast to the interface     FooService bean = (FooService) ctx.getBean("scopedProxyTestBean").     // should be dynamic proxy     assertThat(AopUtils.isJdkDynamicProxy(bean), is(true)). }
false;public;0;8;;@Test public void withMultipleAnnotationIncludeFilters1() throws IOException, ClassNotFoundException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithMultipleAnnotationIncludeFilters1.class).     ctx.refresh().     // @CustomStereotype-annotated     ctx.getBean(DefaultNamedComponent.class).     // @CustomComponent-annotated     ctx.getBean(MessageBean.class). }
false;public;0;8;;@Test public void withMultipleAnnotationIncludeFilters2() throws IOException, ClassNotFoundException {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithMultipleAnnotationIncludeFilters2.class).     ctx.refresh().     // @CustomStereotype-annotated     ctx.getBean(DefaultNamedComponent.class).     // @CustomComponent-annotated     ctx.getBean(MessageBean.class). }
false;public;0;7;;@Test public void withBasePackagesAndValueAlias() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ComponentScanWithBasePackagesAndValueAlias.class).     ctx.refresh().     assertThat(ctx.containsBean("fooServiceImpl"), is(true)). }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.classLoader = classLoader. }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.environment = environment. }
false;public;2;9;;@Override public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) {     ((ConfigurableEnvironment) this.environment).addActiveProfile("the-filter-ran").     assertNotNull(this.beanFactory).     assertNotNull(this.classLoader).     assertNotNull(this.resourceLoader).     assertNotNull(this.environment).     return false. }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(). }
false;public;2;4;;@Override public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {     return "custom_" + super.generateBeanName(definition, registry). }
false;public,static;0;7;;@Bean @SuppressWarnings({ "rawtypes", "serial", "unchecked" }) public static CustomAutowireConfigurer customAutowireConfigurer() {     CustomAutowireConfigurer cac = new CustomAutowireConfigurer().     cac.setCustomQualifierTypes(new HashSet() {          {             add(ComponentScanParserTests.CustomAnnotation.class).         }     }).     return cac. }
false;public;0;3;;public ComponentScanParserTests.KustomAnnotationAutowiredBean testBean() {     return new ComponentScanParserTests.KustomAnnotationAutowiredBean(). }
