commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testAttributeFromInterface() throws Exception {     ModelMBeanInfo inf = getMBeanInfoFromAssembler().     ModelMBeanAttributeInfo attr = inf.getAttribute("Colour").     assertTrue("The name attribute should be writable", attr.isWritable()).     assertTrue("The name attribute should be readable", attr.isReadable()). }
false;public;0;6;;@Test public void testOperationFromInterface() throws Exception {     ModelMBeanInfo inf = getMBeanInfoFromAssembler().     ModelMBeanOperationInfo op = inf.getOperation("fromInterface").     assertNotNull(op). }
false;public;0;6;;@Test public void testOperationOnGetter() throws Exception {     ModelMBeanInfo inf = getMBeanInfoFromAssembler().     ModelMBeanOperationInfo op = inf.getOperation("getExpensiveToCalculate").     assertNotNull(op). }
false;public;0;22;;@Test public void testRegistrationOnInterface() throws Exception {     Object bean = getContext().getBean("testInterfaceBean").     ModelMBeanInfo inf = getAssembler().getMBeanInfo(bean, "bean:name=interfaceTestBean").     assertNotNull(inf).     assertEquals("My Managed Bean", inf.getDescription()).     ModelMBeanOperationInfo op = inf.getOperation("foo").     assertNotNull("foo operation not exposed", op).     assertEquals("invoke foo", op.getDescription()).     assertNull("doNotExpose operation should not be exposed", inf.getOperation("doNotExpose")).     ModelMBeanAttributeInfo attr = inf.getAttribute("Bar").     assertNotNull("bar attribute not exposed", attr).     assertEquals("Bar description", attr.getDescription()).     ModelMBeanAttributeInfo attr2 = inf.getAttribute("CacheEntries").     assertNotNull("cacheEntries attribute not exposed", attr2).     assertEquals("Metric Type should be COUNTER", "COUNTER", attr2.getDescriptor().getFieldValue("metricType")). }
false;protected;0;4;;@Override protected JmxAttributeSource getAttributeSource() {     return new AnnotationJmxAttributeSource(). }
false;protected;0;4;;@Override protected String getObjectName() {     return OBJECT_NAME. }
false;protected;0;4;;@Override protected IJmxTestBean createJmxTestBean() {     return new AnnotationTestSubBean(). }
false;protected;0;4;;@Override protected String getApplicationContextPath() {     return "org/springframework/jmx/export/annotation/annotations.xml". }
false;protected;0;4;;@Override protected int getExpectedAttributeCount() {     return super.getExpectedAttributeCount() + 1. }
false;protected;0;4;;@Override protected int getExpectedOperationCount() {     return super.getExpectedOperationCount() + 4. }
