commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testInvokeValidatorWithNullValidator() throws Exception {     TestBean tb = new TestBean().     Errors errors = new BeanPropertyBindingResult(tb, "tb").     ValidationUtils.invokeValidator(null, tb, errors). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testInvokeValidatorWithNullErrors() throws Exception {     TestBean tb = new TestBean().     ValidationUtils.invokeValidator(new EmptyValidator(), tb, null). }
false;public;0;8;;@Test public void testInvokeValidatorSunnyDay() throws Exception {     TestBean tb = new TestBean().     Errors errors = new BeanPropertyBindingResult(tb, "tb").     ValidationUtils.invokeValidator(new EmptyValidator(), tb, errors).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY", errors.getFieldError("name").getCode()). }
false;public;0;15;;@Test public void testValidationUtilsSunnyDay() throws Exception {     TestBean tb = new TestBean("").     Validator testValidator = new EmptyValidator().     tb.setName(" ").     Errors errors = new BeanPropertyBindingResult(tb, "tb").     testValidator.validate(tb, errors).     assertFalse(errors.hasFieldErrors("name")).     tb.setName("Roddy").     errors = new BeanPropertyBindingResult(tb, "tb").     testValidator.validate(tb, errors).     assertFalse(errors.hasFieldErrors("name")). }
false;public;0;9;;@Test public void testValidationUtilsNull() throws Exception {     TestBean tb = new TestBean().     Errors errors = new BeanPropertyBindingResult(tb, "tb").     Validator testValidator = new EmptyValidator().     testValidator.validate(tb, errors).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY", errors.getFieldError("name").getCode()). }
false;public;0;9;;@Test public void testValidationUtilsEmpty() throws Exception {     TestBean tb = new TestBean("").     Errors errors = new BeanPropertyBindingResult(tb, "tb").     Validator testValidator = new EmptyValidator().     testValidator.validate(tb, errors).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY", errors.getFieldError("name").getCode()). }
false;public;0;17;;@Test public void testValidationUtilsEmptyVariants() {     TestBean tb = new TestBean().     Errors errors = new BeanPropertyBindingResult(tb, "tb").     ValidationUtils.rejectIfEmpty(errors, "name", "EMPTY_OR_WHITESPACE", new Object[] { "arg" }).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     assertEquals("arg", errors.getFieldError("name").getArguments()[0]).     errors = new BeanPropertyBindingResult(tb, "tb").     ValidationUtils.rejectIfEmpty(errors, "name", "EMPTY_OR_WHITESPACE", new Object[] { "arg" }, "msg").     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     assertEquals("arg", errors.getFieldError("name").getArguments()[0]).     assertEquals("msg", errors.getFieldError("name").getDefaultMessage()). }
false;public;0;31;;@Test public void testValidationUtilsEmptyOrWhitespace() throws Exception {     TestBean tb = new TestBean().     Validator testValidator = new EmptyOrWhitespaceValidator().     // Test null     Errors errors = new BeanPropertyBindingResult(tb, "tb").     testValidator.validate(tb, errors).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     // Test empty String     tb.setName("").     errors = new BeanPropertyBindingResult(tb, "tb").     testValidator.validate(tb, errors).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     // Test whitespace String     tb.setName(" ").     errors = new BeanPropertyBindingResult(tb, "tb").     testValidator.validate(tb, errors).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     // Test OK     tb.setName("Roddy").     errors = new BeanPropertyBindingResult(tb, "tb").     testValidator.validate(tb, errors).     assertFalse(errors.hasFieldErrors("name")). }
false;public;0;18;;@Test public void testValidationUtilsEmptyOrWhitespaceVariants() {     TestBean tb = new TestBean().     tb.setName(" ").     Errors errors = new BeanPropertyBindingResult(tb, "tb").     ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "EMPTY_OR_WHITESPACE", new Object[] { "arg" }).     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     assertEquals("arg", errors.getFieldError("name").getArguments()[0]).     errors = new BeanPropertyBindingResult(tb, "tb").     ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "EMPTY_OR_WHITESPACE", new Object[] { "arg" }, "msg").     assertTrue(errors.hasFieldErrors("name")).     assertEquals("EMPTY_OR_WHITESPACE", errors.getFieldError("name").getCode()).     assertEquals("arg", errors.getFieldError("name").getArguments()[0]).     assertEquals("msg", errors.getFieldError("name").getDefaultMessage()). }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return TestBean.class.isAssignableFrom(clazz). }
false;public;2;4;;@Override public void validate(@Nullable Object obj, Errors errors) {     ValidationUtils.rejectIfEmpty(errors, "name", "EMPTY", "You must enter a name!"). }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return TestBean.class.isAssignableFrom(clazz). }
false;public;2;4;;@Override public void validate(@Nullable Object obj, Errors errors) {     ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "EMPTY_OR_WHITESPACE", "You must enter a name!"). }
