# id;timestamp;commentText;codeText;commentWords;codeWords
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1328020251;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener l = (ApplicationListener) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1356735495;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1357119417;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1362408075;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1413848647;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1450827071;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1467730834;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1469546119;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1496242568;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1525511255;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1533725446;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testGlobalsCanAddAspectInterfaces();1544700571;Checks that globals get invoked,_and that they can add aspect interfaces unavailable_to other beans. These interfaces don't need_to be included in proxiedInterface [].;@Test_	public void testGlobalsCanAddAspectInterfaces() {_		AddedGlobalInterface agi = (AddedGlobalInterface) factory.getBean("autoInvoker")__		assertTrue(agi.globalsAdded() == -1)___		ProxyFactoryBean pfb = (ProxyFactoryBean) factory.getBean("&validGlobals")__		_		pfb.getObject()__		_		assertEquals("Have 2 globals and 2 explicit advisors", 3, pfb.getAdvisors().length)___		ApplicationListener<?> l = (ApplicationListener<?>) factory.getBean("validGlobals")__		agi = (AddedGlobalInterface) l__		assertTrue(agi.globalsAdded() == -1)___		try {_			agi = (AddedGlobalInterface) factory.getBean("test1")__			fail("Aspect interface should't be implemeneted without globals")__		}_		catch (ClassCastException ex) {_		}_	};checks,that,globals,get,invoked,and,that,they,can,add,aspect,interfaces,unavailable,to,other,beans,these,interfaces,don,t,need,to,be,included,in,proxied,interface;test,public,void,test,globals,can,add,aspect,interfaces,added,global,interface,agi,added,global,interface,factory,get,bean,auto,invoker,assert,true,agi,globals,added,1,proxy,factory,bean,pfb,proxy,factory,bean,factory,get,bean,valid,globals,pfb,get,object,assert,equals,have,2,globals,and,2,explicit,advisors,3,pfb,get,advisors,length,application,listener,l,application,listener,factory,get,bean,valid,globals,agi,added,global,interface,l,assert,true,agi,globals,added,1,try,agi,added,global,interface,factory,get,bean,test1,fail,aspect,interface,should,t,be,implemeneted,without,globals,catch,class,cast,exception,ex
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1328020251;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		ListableBeanFactory bf = new XmlBeanFactory(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,listable,bean,factory,bf,new,xml,bean,factory,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1356735495;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		ListableBeanFactory bf = new XmlBeanFactory(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,listable,bean,factory,bf,new,xml,bean,factory,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1357119417;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1362408075;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1413848647;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1450827071;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1467730834;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1469546119;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1496242568;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1525511255;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1533725446;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testTargetAsInnerBean();1544700571;Test that inner bean for target means that we can use_autowire without ambiguity from target and proxy;@Test_	public void testTargetAsInnerBean() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INNER_BEAN_TARGET_CONTEXT, CLASS))__		ITestBean itb = (ITestBean) bf.getBean("testBean")__		assertEquals("innerBeanTarget", itb.getName())__		assertEquals("Only have proxy and interceptor: no target", 3, bf.getBeanDefinitionCount())__		DependsOnITestBean doit = (DependsOnITestBean) bf.getBean("autowireCheck")__		assertSame(itb, doit.tb)__	};test,that,inner,bean,for,target,means,that,we,can,use,autowire,without,ambiguity,from,target,and,proxy;test,public,void,test,target,as,inner,bean,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,itest,bean,itb,itest,bean,bf,get,bean,test,bean,assert,equals,inner,bean,target,itb,get,name,assert,equals,only,have,proxy,and,interceptor,no,target,3,bf,get,bean,definition,count,depends,on,itest,bean,doit,depends,on,itest,bean,bf,get,bean,autowire,check,assert,same,itb,doit,tb
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1328020251;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1356735495;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1357119417;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1362408075;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1413848647;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1450827071;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1467730834;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1469546119;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1496242568;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1525511255;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1533725446;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testAutoInvoker();1544700571;Test invoker is automatically added to manipulate target.;@Test_	public void testAutoInvoker() {_		String name = "Hieronymous"__		TestBean target = (TestBean) factory.getBean("test")__		target.setName(name)__		ITestBean autoInvoker = (ITestBean) factory.getBean("autoInvoker")__		assertTrue(autoInvoker.getName().equals(name))__	};test,invoker,is,automatically,added,to,manipulate,target;test,public,void,test,auto,invoker,string,name,hieronymous,test,bean,target,test,bean,factory,get,bean,test,target,set,name,name,itest,bean,auto,invoker,itest,bean,factory,get,bean,auto,invoker,assert,true,auto,invoker,get,name,equals,name
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1328020251;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1356735495;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1357119417;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1362408075;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1413848647;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1450827071;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1467730834;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1469546119;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1496242568;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1525511255;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1533725446;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAspectInterfacesOnPrototype();1544700571;Try adding and removing interfaces and interceptors on prototype._Changes will only affect future references obtained from the factory._Each instance will be independent.;@Test_	public void testCanAddAndRemoveAspectInterfacesOnPrototype() {_		assertThat("Shouldn't implement TimeStamped before manipulation",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		ProxyFactoryBean config = (ProxyFactoryBean) factory.getBean("&test2")__		long time = 666L__		TimestampIntroductionInterceptor ti = new TimestampIntroductionInterceptor()__		ti.setTime(time)__		_		int oldCount = config.getAdvisors().length__		config.addAdvisor(0, new DefaultIntroductionAdvisor(ti, TimeStamped.class))__		assertTrue(config.getAdvisors().length == oldCount + 1)___		TimeStamped ts = (TimeStamped) factory.getBean("test2")__		assertEquals(time, ts.getTimeStamp())___		_		config.removeAdvice(ti)__		assertTrue(config.getAdvisors().length == oldCount)___		_		assertTrue(ts.getTimeStamp() == time)___		assertThat("Should no longer implement TimeStamped",_				factory.getBean("test2"), not(instanceOf(TimeStamped.class)))___		_		config.removeAdvice(new DebugInterceptor())__		assertTrue(config.getAdvisors().length == oldCount)___		ITestBean it = (ITestBean) ts__		DebugInterceptor debugInterceptor = new DebugInterceptor()__		config.addAdvice(0, debugInterceptor)__		it.getSpouse()__		_		assertTrue(debugInterceptor.getCount() == 0)__		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(1, debugInterceptor.getCount())__		config.removeAdvice(debugInterceptor)__		it.getSpouse()___		_		assertEquals(2, debugInterceptor.getCount())___		_		it = (ITestBean) factory.getBean("test2")__		it.getSpouse()__		assertEquals(2, debugInterceptor.getCount())___		_		assertEquals(time, ts.getTimeStamp())__	};try,adding,and,removing,interfaces,and,interceptors,on,prototype,changes,will,only,affect,future,references,obtained,from,the,factory,each,instance,will,be,independent;test,public,void,test,can,add,and,remove,aspect,interfaces,on,prototype,assert,that,shouldn,t,implement,time,stamped,before,manipulation,factory,get,bean,test2,not,instance,of,time,stamped,class,proxy,factory,bean,config,proxy,factory,bean,factory,get,bean,test2,long,time,666l,timestamp,introduction,interceptor,ti,new,timestamp,introduction,interceptor,ti,set,time,time,int,old,count,config,get,advisors,length,config,add,advisor,0,new,default,introduction,advisor,ti,time,stamped,class,assert,true,config,get,advisors,length,old,count,1,time,stamped,ts,time,stamped,factory,get,bean,test2,assert,equals,time,ts,get,time,stamp,config,remove,advice,ti,assert,true,config,get,advisors,length,old,count,assert,true,ts,get,time,stamp,time,assert,that,should,no,longer,implement,time,stamped,factory,get,bean,test2,not,instance,of,time,stamped,class,config,remove,advice,new,debug,interceptor,assert,true,config,get,advisors,length,old,count,itest,bean,it,itest,bean,ts,debug,interceptor,debug,interceptor,new,debug,interceptor,config,add,advice,0,debug,interceptor,it,get,spouse,assert,true,debug,interceptor,get,count,0,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,1,debug,interceptor,get,count,config,remove,advice,debug,interceptor,it,get,spouse,assert,equals,2,debug,interceptor,get,count,it,itest,bean,factory,get,bean,test2,it,get,spouse,assert,equals,2,debug,interceptor,get,count,assert,equals,time,ts,get,time,stamp
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1328020251;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1356735495;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1357119417;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1362408075;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1413848647;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1450827071;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1467730834;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1469546119;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1496242568;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1525511255;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1533725446;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testSingletonInstancesAreEqual();1544700571;The instances are equal, but do not have object identity._Interceptors and interfaces and the target are the same.;@Test_	public void testSingletonInstancesAreEqual() {_		ITestBean test1 = (ITestBean) factory.getBean("test1")__		ITestBean test1_1 = (ITestBean) factory.getBean("test1")__		_		assertEquals("Singleton instances ==", test1, test1_1)__		test1.setAge(25)__		assertEquals(test1.getAge(), test1_1.getAge())__		test1.setAge(250)__		assertEquals(test1.getAge(), test1_1.getAge())__		Advised pc1 = (Advised) test1__		Advised pc2 = (Advised) test1_1__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		int oldLength = pc1.getAdvisors().length__		NopInterceptor di = new NopInterceptor()__		pc1.addAdvice(1, di)__		assertArrayEquals(pc1.getAdvisors(), pc2.getAdvisors())__		assertEquals("Now have one more advisor", oldLength + 1, pc2.getAdvisors().length)__		assertEquals(di.getCount(), 0)__		test1.setAge(5)__		assertEquals(test1_1.getAge(), test1.getAge())__		assertEquals(di.getCount(), 3)__	};the,instances,are,equal,but,do,not,have,object,identity,interceptors,and,interfaces,and,the,target,are,the,same;test,public,void,test,singleton,instances,are,equal,itest,bean,test1,itest,bean,factory,get,bean,test1,itest,bean,itest,bean,factory,get,bean,test1,assert,equals,singleton,instances,test1,test1,set,age,25,assert,equals,test1,get,age,get,age,test1,set,age,250,assert,equals,test1,get,age,get,age,advised,pc1,advised,test1,advised,pc2,advised,assert,array,equals,pc1,get,advisors,pc2,get,advisors,int,old,length,pc1,get,advisors,length,nop,interceptor,di,new,nop,interceptor,pc1,add,advice,1,di,assert,array,equals,pc1,get,advisors,pc2,get,advisors,assert,equals,now,have,one,more,advisor,old,length,1,pc2,get,advisors,length,assert,equals,di,get,count,0,test1,set,age,5,assert,equals,get,age,test1,get,age,assert,equals,di,get,count,3
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1328020251;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1356735495;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1357119417;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1362408075;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1413848647;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1450827071;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1467730834;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1469546119;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1496242568;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1525511255;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1533725446;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testDoubleTargetSourcesAreRejected();1544700571;Test that it's forbidden to specify TargetSource in both_interceptor chain and targetSource property.;@Test_	public void testDoubleTargetSourcesAreRejected() {_		testDoubleTargetSourceIsRejected("doubleTarget")__		_		testDoubleTargetSourceIsRejected("arbitraryTarget")__	};test,that,it,s,forbidden,to,specify,target,source,in,both,interceptor,chain,and,target,source,property;test,public,void,test,double,target,sources,are,rejected,test,double,target,source,is,rejected,double,target,test,double,target,source,is,rejected,arbitrary,target
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1328020251;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		BeanFactory bf = new XmlBeanFactory(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,bean,factory,bf,new,xml,bean,factory,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1356735495;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		BeanFactory bf = new XmlBeanFactory(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,bean,factory,bf,new,xml,bean,factory,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1357119417;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1362408075;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1413848647;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1450827071;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1467730834;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1469546119;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1496242568;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1525511255;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1533725446;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testInnerBeanTargetUsingAutowiring();1544700571;Simple test of a ProxyFactoryBean that has an inner bean as target that specifies autowiring._Checks for correct use of getType() by bean factory.;@Test_	public void testInnerBeanTargetUsingAutowiring() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(AUTOWIRING_CONTEXT, CLASS))__		bf.getBean("testBean")__	};simple,test,of,a,proxy,factory,bean,that,has,an,inner,bean,as,target,that,specifies,autowiring,checks,for,correct,use,of,get,type,by,bean,factory;test,public,void,test,inner,bean,target,using,autowiring,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,bf,get,bean,test,bean
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1328020251;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1356735495;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1357119417;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1362408075;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1413848647;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1450827071;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1467730834;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1469546119;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1496242568;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1525511255;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1533725446;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testCanAddAndRemoveAdvicesOnSingleton();1544700571;Note that we can't add or remove interfaces without reconfiguring the_singleton.;@Test_	public void testCanAddAndRemoveAdvicesOnSingleton() {_		ITestBean it = (ITestBean) factory.getBean("test1")__		Advised pc = (Advised) it__		it.getAge()__		NopInterceptor di = new NopInterceptor()__		pc.addAdvice(0, di)__		assertEquals(0, di.getCount())__		it.setAge(25)__		assertEquals(25, it.getAge())__		assertEquals(2, di.getCount())__	};note,that,we,can,t,add,or,remove,interfaces,without,reconfiguring,the,singleton;test,public,void,test,can,add,and,remove,advices,on,singleton,itest,bean,it,itest,bean,factory,get,bean,test1,advised,pc,advised,it,it,get,age,nop,interceptor,di,new,nop,interceptor,pc,add,advice,0,di,assert,equals,0,di,get,count,it,set,age,25,assert,equals,25,it,get,age,assert,equals,2,di,get,count
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1328020251;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			factory.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,xml,bean,factory,factory,new,xml,bean,factory,new,class,path,resource,class,try,factory,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1356735495;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			factory.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,xml,bean,factory,factory,new,xml,bean,factory,new,class,path,resource,class,try,factory,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1357119417;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1362408075;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1413848647;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1450827071;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1467730834;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1469546119;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1496242568;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1525511255;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1533725446;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> @Test 	public void testGlobalsWithoutTarget();1544700571;Globals must be followed by a target.;@Test_	public void testGlobalsWithoutTarget() {_		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(INVALID_CONTEXT, CLASS))__		try {_			bf.getBean("globalsWithoutTarget")__			fail("Should require target name")__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getCause() instanceof AopConfigException)__		}_	};globals,must,be,followed,by,a,target;test,public,void,test,globals,without,target,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,try,bf,get,bean,globals,without,target,fail,should,require,target,name,catch,bean,creation,exception,ex,assert,true,ex,get,cause,instanceof,aop,config,exception
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1328020251;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		BeanFactory bf = new XmlBeanFactory(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,bean,factory,bf,new,xml,bean,factory,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1356735495;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		BeanFactory bf = new XmlBeanFactory(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,bean,factory,bf,new,xml,bean,factory,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1357119417;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1362408075;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1413848647;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1450827071;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1467730834;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1469546119;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1496242568;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount() )__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount() )___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount() )__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount() )__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount() )___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1525511255;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount())__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount())__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount())___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount())__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount())___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount())__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount())___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1533725446;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount())__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount())__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount())___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount())__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount())___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount())__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount())___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
ProxyFactoryBeanTests -> private Object testPrototypeInstancesAreIndependent(String beanName);1544700571;Uses its own bean factory XML for clarity_@param beanName name of the ProxyFactoryBean definition that should_be a prototype;private Object testPrototypeInstancesAreIndependent(String beanName) {_		_		int INITIAL_COUNT = 10___		DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(PROTOTYPE_CONTEXT, CLASS))___		_		SideEffectBean raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount())__		raw.doWork()__		assertEquals(INITIAL_COUNT+1, raw.getCount())__		raw = (SideEffectBean) bf.getBean("prototypeTarget")__		assertEquals(INITIAL_COUNT, raw.getCount())___		_		SideEffectBean prototype2FirstInstance = (SideEffectBean) bf.getBean(beanName)__		assertEquals(INITIAL_COUNT, prototype2FirstInstance.getCount())__		prototype2FirstInstance.doWork()__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount())___		SideEffectBean prototype2SecondInstance = (SideEffectBean) bf.getBean(beanName)__		assertFalse("Prototypes are not ==", prototype2FirstInstance == prototype2SecondInstance)__		assertEquals(INITIAL_COUNT, prototype2SecondInstance.getCount())__		assertEquals(INITIAL_COUNT + 1, prototype2FirstInstance.getCount())___		return prototype2FirstInstance__	};uses,its,own,bean,factory,xml,for,clarity,param,bean,name,name,of,the,proxy,factory,bean,definition,that,should,be,a,prototype;private,object,test,prototype,instances,are,independent,string,bean,name,int,10,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,new,class,path,resource,class,side,effect,bean,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,raw,do,work,assert,equals,1,raw,get,count,raw,side,effect,bean,bf,get,bean,prototype,target,assert,equals,raw,get,count,side,effect,bean,prototype2first,instance,side,effect,bean,bf,get,bean,bean,name,assert,equals,prototype2first,instance,get,count,prototype2first,instance,do,work,assert,equals,1,prototype2first,instance,get,count,side,effect,bean,prototype2second,instance,side,effect,bean,bf,get,bean,bean,name,assert,false,prototypes,are,not,prototype2first,instance,prototype2second,instance,assert,equals,prototype2second,instance,get,count,assert,equals,1,prototype2first,instance,get,count,return,prototype2first,instance
