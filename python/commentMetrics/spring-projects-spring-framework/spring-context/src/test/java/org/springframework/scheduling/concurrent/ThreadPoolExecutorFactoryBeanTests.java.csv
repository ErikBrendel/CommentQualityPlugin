commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String call() throws Exception {     return "foo". }
false;public;0;14;;@Test public void defaultExecutor() throws Exception {     ApplicationContext context = new AnnotationConfigApplicationContext(ExecutorConfig.class).     ExecutorService executor = context.getBean("executor", ExecutorService.class).     FutureTask<String> task = new FutureTask<>(new Callable<String>() {          @Override         public String call() throws Exception {             return "foo".         }     }).     executor.execute(task).     assertEquals("foo", task.get()). }
false;public;0;4;;@Bean public ThreadPoolExecutorFactoryBean executorFactory() {     return new ThreadPoolExecutorFactoryBean(). }
false;public;0;4;;@Bean public ExecutorService executor() {     return executorFactory().getObject(). }
