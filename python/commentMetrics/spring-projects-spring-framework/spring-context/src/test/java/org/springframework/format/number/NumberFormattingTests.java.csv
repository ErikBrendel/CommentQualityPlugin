commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public String resolveStringValue(String strVal) {     if ("${pattern}".equals(strVal)) {         return "#,##.00".     } else {         return strVal.     } }
false;public;0;20;;@Before public void setUp() {     DefaultConversionService.addDefaultConverters(conversionService).     conversionService.setEmbeddedValueResolver(new StringValueResolver() {          @Override         public String resolveStringValue(String strVal) {             if ("${pattern}".equals(strVal)) {                 return "#,##.00".             } else {                 return strVal.             }         }     }).     conversionService.addFormatterForFieldType(Number.class, new NumberStyleFormatter()).     conversionService.addFormatterForFieldAnnotation(new NumberFormatAnnotationFormatterFactory()).     LocaleContextHolder.setLocale(Locale.US).     binder = new DataBinder(new TestBean()).     binder.setConversionService(conversionService). }
false;public;0;4;;@After public void tearDown() {     LocaleContextHolder.setLocale(null). }
false;public;0;8;;@Test public void testDefaultNumberFormatting() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("numberDefault", "3,339.12").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("3,339", binder.getBindingResult().getFieldValue("numberDefault")). }
false;public;0;8;;@Test public void testDefaultNumberFormattingAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("numberDefaultAnnotated", "3,339.12").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("3,339.12", binder.getBindingResult().getFieldValue("numberDefaultAnnotated")). }
false;public;0;8;;@Test public void testCurrencyFormatting() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("currency", "$3,339.12").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("$3,339.12", binder.getBindingResult().getFieldValue("currency")). }
false;public;0;8;;@Test public void testPercentFormatting() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("percent", "53%").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("53%", binder.getBindingResult().getFieldValue("percent")). }
false;public;0;8;;@Test public void testPatternFormatting() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("pattern", "1,25.00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00", binder.getBindingResult().getFieldValue("pattern")). }
false;public;0;17;;@Test public void testPatternArrayFormatting() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("patternArray", new String[] { "1,25.00", "2,35.00" }).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternArray[0]")).     assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternArray[1]")).     propertyValues = new MutablePropertyValues().     propertyValues.add("patternArray[0]", "1,25.00").     propertyValues.add("patternArray[1]", "2,35.00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternArray[0]")).     assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternArray[1]")). }
false;public;0;17;;@Test public void testPatternListFormatting() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("patternList", new String[] { "1,25.00", "2,35.00" }).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]")).     assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]")).     propertyValues = new MutablePropertyValues().     propertyValues.add("patternList[0]", "1,25.00").     propertyValues.add("patternList[1]", "2,35.00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]")).     assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]")). }
false;public;0;10;;@Test public void testPatternList2FormattingListElement() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("patternList2[0]", "1,25.00").     propertyValues.add("patternList2[1]", "2,35.00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList2[0]")).     assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList2[1]")). }
false;public;0;9;;@Test public void testPatternList2FormattingList() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("patternList2[0]", "1,25.00").     propertyValues.add("patternList2[1]", "2,35.00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("1,25.00,2,35.00", binder.getBindingResult().getFieldValue("patternList2")). }
false;public;0;3;;public Integer getNumberDefault() {     return numberDefault. }
false;public;1;3;;public void setNumberDefault(Integer numberDefault) {     this.numberDefault = numberDefault. }
false;public;0;3;;public Double getNumberDefaultAnnotated() {     return numberDefaultAnnotated. }
false;public;1;3;;public void setNumberDefaultAnnotated(Double numberDefaultAnnotated) {     this.numberDefaultAnnotated = numberDefaultAnnotated. }
false;public;0;3;;public BigDecimal getCurrency() {     return currency. }
false;public;1;3;;public void setCurrency(BigDecimal currency) {     this.currency = currency. }
false;public;0;3;;public BigDecimal getPercent() {     return percent. }
false;public;1;3;;public void setPercent(BigDecimal percent) {     this.percent = percent. }
false;public;0;3;;public BigDecimal getPattern() {     return pattern. }
false;public;1;3;;public void setPattern(BigDecimal pattern) {     this.pattern = pattern. }
false;public;0;3;;public BigDecimal[] getPatternArray() {     return patternArray. }
false;public;1;3;;public void setPatternArray(BigDecimal[] patternArray) {     this.patternArray = patternArray. }
false;public;0;3;;public List<BigDecimal> getPatternList() {     return patternList. }
false;public;1;3;;public void setPatternList(List<BigDecimal> patternList) {     this.patternList = patternList. }
false;public;0;3;;public List<BigDecimal> getPatternList2() {     return patternList2. }
false;public;1;3;;public void setPatternList2(List<BigDecimal> patternList2) {     this.patternList2 = patternList2. }
