commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setup() {     ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     testBean1 = (ITestBean) ctx.getBean("testBean1").     testBean2 = (ITestBean) ctx.getBean("testBean2").     testBeanContainingNestedBean = (ITestBean) ctx.getBean("testBeanContainingNestedBean").     testFactoryBean1 = (Map<?, ?>) ctx.getBean("testFactoryBean1").     testFactoryBean2 = (Map<?, ?>) ctx.getBean("testFactoryBean2").     counterAspect = (Counter) ctx.getBean("counterAspect").     interceptThis = (ITestBean) ctx.getBean("interceptThis").     dontInterceptThis = (ITestBean) ctx.getBean("dontInterceptThis").     testInterceptor = (TestInterceptor) ctx.getBean("testInterceptor").     counterAspect.reset(). }
false;public;0;8;;// We don't need to test all combination of pointcuts due to BeanNamePointcutMatchingTests @Test public void testMatchingBeanName() {     assertTrue("Matching bean must be advised (proxied)", this.testBean1 instanceof Advised).     // Call two methods to test for SPR-3953-like condition     this.testBean1.setAge(20).     this.testBean1.setName("").     assertEquals("Advice not executed: must have been", 2, this.counterAspect.getCount()). }
false;public;0;6;;@Test public void testNonMatchingBeanName() {     assertFalse("Non-matching bean must *not* be advised (proxied)", this.testBean2 instanceof Advised).     this.testBean2.setAge(20).     assertEquals("Advice must *not* have been executed", 0, this.counterAspect.getCount()). }
false;public;0;4;;@Test public void testNonMatchingNestedBeanName() {     assertFalse("Non-matching bean must *not* be advised (proxied)", this.testBeanContainingNestedBean.getDoctor() instanceof Advised). }
false;public;0;9;;@Test public void testMatchingFactoryBeanObject() {     assertTrue("Matching bean must be advised (proxied)", this.testFactoryBean1 instanceof Advised).     assertEquals("myValue", this.testFactoryBean1.get("myKey")).     assertEquals("myValue", this.testFactoryBean1.get("myKey")).     assertEquals("Advice not executed: must have been", 2, this.counterAspect.getCount()).     FactoryBean<?> fb = (FactoryBean<?>) ctx.getBean("&testFactoryBean1").     assertTrue("FactoryBean itself must *not* be advised", !(fb instanceof Advised)). }
false;public;0;9;;@Test public void testMatchingFactoryBeanItself() {     assertTrue("Matching bean must *not* be advised (proxied)", !(this.testFactoryBean2 instanceof Advised)).     FactoryBean<?> fb = (FactoryBean<?>) ctx.getBean("&testFactoryBean2").     assertTrue("FactoryBean itself must be advised", fb instanceof Advised).     assertTrue(Map.class.isAssignableFrom(fb.getObjectType())).     assertTrue(Map.class.isAssignableFrom(fb.getObjectType())).     assertEquals("Advice not executed: must have been", 2, this.counterAspect.getCount()). }
false;public;0;9;;@Test public void testPointcutAdvisorCombination() {     assertTrue("Matching bean must be advised (proxied)", this.interceptThis instanceof Advised).     assertFalse("Non-matching bean must *not* be advised (proxied)", this.dontInterceptThis instanceof Advised).     interceptThis.setAge(20).     assertEquals(1, testInterceptor.interceptionCount).     dontInterceptThis.setAge(20).     assertEquals(1, testInterceptor.interceptionCount). }
false;public;3;4;;@Override public void before(Method method, Object[] args, @Nullable Object target) throws Throwable {     interceptionCount++. }
