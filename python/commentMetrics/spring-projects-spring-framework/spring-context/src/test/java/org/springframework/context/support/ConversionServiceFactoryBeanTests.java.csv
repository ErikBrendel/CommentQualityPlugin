commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void createDefaultConversionService() {     ConversionServiceFactoryBean factory = new ConversionServiceFactoryBean().     factory.afterPropertiesSet().     ConversionService service = factory.getObject().     assertTrue(service.canConvert(String.class, Integer.class)). }
false;public;1;4;;@Override public Foo convert(String source) {     return new Foo(). }
false;public;1;5;;@SuppressWarnings("unchecked") @Override public T convert(String source) {     return (T) new Bar(). }
false;public;1;10;;@Override public <T extends Bar> Converter<String, T> getConverter(Class<T> targetType) {     return new Converter<String, T>() {          @SuppressWarnings("unchecked")         @Override         public T convert(String source) {             return (T) new Bar().         }     }. }
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(String.class, Baz.class)). }
false;public;3;5;;@Override @Nullable public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     return new Baz(). }
false;public;0;41;;@Test public void createDefaultConversionServiceWithSupplements() {     ConversionServiceFactoryBean factory = new ConversionServiceFactoryBean().     Set<Object> converters = new HashSet<>().     converters.add(new Converter<String, Foo>() {          @Override         public Foo convert(String source) {             return new Foo().         }     }).     converters.add(new ConverterFactory<String, Bar>() {          @Override         public <T extends Bar> Converter<String, T> getConverter(Class<T> targetType) {             return new Converter<String, T>() {                  @SuppressWarnings("unchecked")                 @Override                 public T convert(String source) {                     return (T) new Bar().                 }             }.         }     }).     converters.add(new GenericConverter() {          @Override         public Set<ConvertiblePair> getConvertibleTypes() {             return Collections.singleton(new ConvertiblePair(String.class, Baz.class)).         }          @Override         @Nullable         public Object convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {             return new Baz().         }     }).     factory.setConverters(converters).     factory.afterPropertiesSet().     ConversionService service = factory.getObject().     assertTrue(service.canConvert(String.class, Integer.class)).     assertTrue(service.canConvert(String.class, Foo.class)).     assertTrue(service.canConvert(String.class, Bar.class)).     assertTrue(service.canConvert(String.class, Baz.class)). }
false;public;0;8;;@Test(expected = IllegalArgumentException.class) public void createDefaultConversionServiceWithInvalidSupplements() {     ConversionServiceFactoryBean factory = new ConversionServiceFactoryBean().     Set<Object> converters = new HashSet<>().     converters.add("bogus").     factory.setConverters(converters).     factory.afterPropertiesSet(). }
false;public;0;4;;@Test public void conversionServiceInApplicationContext() {     doTestConversionServiceInApplicationContext("conversionService.xml", ClassPathResource.class). }
false;public;0;4;;@Test public void conversionServiceInApplicationContextWithResourceOverriding() {     doTestConversionServiceInApplicationContext("conversionServiceWithResourceOverriding.xml", FileSystemResource.class). }
false;private;2;12;;private void doTestConversionServiceInApplicationContext(String fileName, Class<?> resourceClass) {     ApplicationContext ctx = new ClassPathXmlApplicationContext(fileName, getClass()).     ResourceTestBean tb = ctx.getBean("resourceTestBean", ResourceTestBean.class).     assertTrue(resourceClass.isInstance(tb.getResource())).     assertTrue(tb.getResourceArray().length > 0).     assertTrue(resourceClass.isInstance(tb.getResourceArray()[0])).     assertTrue(tb.getResourceMap().size() == 1).     assertTrue(resourceClass.isInstance(tb.getResourceMap().get("key1"))).     assertTrue(tb.getResourceArrayMap().size() == 1).     assertTrue(tb.getResourceArrayMap().get("key1").length > 0).     assertTrue(resourceClass.isInstance(tb.getResourceArrayMap().get("key1")[0])). }
