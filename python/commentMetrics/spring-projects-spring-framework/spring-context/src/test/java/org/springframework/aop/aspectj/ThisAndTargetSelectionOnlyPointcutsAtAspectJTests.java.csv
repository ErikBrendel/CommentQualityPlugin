commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@org.junit.Before public void setup() {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     testBean = (TestInterface) ctx.getBean("testBean").     testAnnotatedClassBean = (TestInterface) ctx.getBean("testAnnotatedClassBean").     testAnnotatedMethodBean = (TestInterface) ctx.getBean("testAnnotatedMethodBean").     counter = (Counter) ctx.getBean("counter").     counter.reset(). }
false;public;0;5;;@Test public void thisAsClassDoesNotMatch() {     testBean.doIt().     assertEquals(0, counter.thisAsClassCounter). }
false;public;0;5;;@Test public void thisAsInterfaceMatch() {     testBean.doIt().     assertEquals(1, counter.thisAsInterfaceCounter). }
false;public;0;5;;@Test public void targetAsClassDoesMatch() {     testBean.doIt().     assertEquals(1, counter.targetAsClassCounter). }
false;public;0;5;;@Test public void targetAsInterfaceMatch() {     testBean.doIt().     assertEquals(1, counter.targetAsInterfaceCounter). }
false;public;0;5;;@Test public void thisAsClassAndTargetAsClassCounterNotMatch() {     testBean.doIt().     assertEquals(0, counter.thisAsClassAndTargetAsClassCounter). }
false;public;0;5;;@Test public void thisAsInterfaceAndTargetAsInterfaceCounterMatch() {     testBean.doIt().     assertEquals(1, counter.thisAsInterfaceAndTargetAsInterfaceCounter). }
false;public;0;5;;@Test public void thisAsInterfaceAndTargetAsClassCounterMatch() {     testBean.doIt().     assertEquals(1, counter.thisAsInterfaceAndTargetAsInterfaceCounter). }
false;public;0;5;;@Test public void atTargetClassAnnotationMatch() {     testAnnotatedClassBean.doIt().     assertEquals(1, counter.atTargetClassAnnotationCounter). }
false;public;0;5;;@Test public void atAnnotationMethodAnnotationMatch() {     testAnnotatedMethodBean.doIt().     assertEquals(1, counter.atAnnotationMethodAnnotationCounter). }
false;public;0;1;;public void doIt().
false;public;0;3;;@Override public void doIt() { }
false;public;0;3;;@Override public void doIt() { }
false;public;0;4;;@Override @TestAnnotation public void doIt() { }
false;public;0;11;;public void reset() {     thisAsClassCounter = 0.     thisAsInterfaceCounter = 0.     targetAsClassCounter = 0.     targetAsInterfaceCounter = 0.     thisAsClassAndTargetAsClassCounter = 0.     thisAsInterfaceAndTargetAsInterfaceCounter = 0.     thisAsInterfaceAndTargetAsClassCounter = 0.     atTargetClassAnnotationCounter = 0.     atAnnotationMethodAnnotationCounter = 0. }
false;public;0;4;;@Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementThisAsClassCounter() {     thisAsClassCounter++. }
false;public;0;4;;@Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface)") public void incrementThisAsInterfaceCounter() {     thisAsInterfaceCounter++. }
false;public;0;4;;@Before("target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementTargetAsClassCounter() {     targetAsClassCounter++. }
false;public;0;4;;@Before("target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface)") public void incrementTargetAsInterfaceCounter() {     targetAsInterfaceCounter++. }
false;public;0;5;;@Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl) " + "&& target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementThisAsClassAndTargetAsClassCounter() {     thisAsClassAndTargetAsClassCounter++. }
false;public;0;5;;@Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface) " + "&& target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface)") public void incrementThisAsInterfaceAndTargetAsInterfaceCounter() {     thisAsInterfaceAndTargetAsInterfaceCounter++. }
false;public;0;5;;@Before("this(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestInterface) " + "&& target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestImpl)") public void incrementThisAsInterfaceAndTargetAsClassCounter() {     thisAsInterfaceAndTargetAsClassCounter++. }
false;public;0;4;;@Before("@target(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestAnnotation)") public void incrementAtTargetClassAnnotationCounter() {     atTargetClassAnnotationCounter++. }
false;public;0;4;;@Before("@annotation(org.springframework.aop.aspectj.ThisAndTargetSelectionOnlyPointcutsAtAspectJTests.TestAnnotation)") public void incrementAtAnnotationMethodAnnotationCounter() {     atAnnotationMethodAnnotationCounter++. }
