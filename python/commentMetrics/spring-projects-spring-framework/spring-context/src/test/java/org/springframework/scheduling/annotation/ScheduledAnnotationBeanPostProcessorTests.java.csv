commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void closeContextAfterTest() {     context.close(). }
false;public;0;27;;@Test public void fixedDelayTask() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(FixedDelayTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedDelayTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedDelayTasks").     assertEquals(1, fixedDelayTasks.size()).     IntervalTask task = fixedDelayTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedDelay", targetMethod.getName()).     assertEquals(0L, task.getInitialDelay()).     assertEquals(5000L, task.getInterval()). }
false;public;0;27;;@Test public void fixedRateTask() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(FixedRateTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks").     assertEquals(1, fixedRateTasks.size()).     IntervalTask task = fixedRateTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedRate", targetMethod.getName()).     assertEquals(0L, task.getInitialDelay()).     assertEquals(3000L, task.getInterval()). }
false;public;0;27;;@Test public void fixedRateTaskWithInitialDelay() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(FixedRateWithInitialDelayTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks").     assertEquals(1, fixedRateTasks.size()).     IntervalTask task = fixedRateTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedRate", targetMethod.getName()).     assertEquals(1000L, task.getInitialDelay()).     assertEquals(3000L, task.getInterval()). }
false;public;0;6;;@Test public void severalFixedRatesWithRepeatedScheduledAnnotation() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean.class).     severalFixedRates(context, processorDefinition, targetDefinition). }
false;public;0;6;;@Test public void severalFixedRatesWithSchedulesContainerAnnotation() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(SeveralFixedRatesWithSchedulesContainerAnnotationTestBean.class).     severalFixedRates(context, processorDefinition, targetDefinition). }
false;public;0;6;;@Test public void severalFixedRatesOnBaseClass() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(FixedRatesSubBean.class).     severalFixedRates(context, processorDefinition, targetDefinition). }
false;public;0;6;;@Test public void severalFixedRatesOnDefaultMethod() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(FixedRatesDefaultBean.class).     severalFixedRates(context, processorDefinition, targetDefinition). }
false;public;0;7;;@Test public void severalFixedRatesAgainstNestedCglibProxy() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean.class).     targetDefinition.setFactoryMethodName("nestedProxy").     severalFixedRates(context, processorDefinition, targetDefinition). }
false;private;3;34;;private void severalFixedRates(StaticApplicationContext context, BeanDefinition processorDefinition, BeanDefinition targetDefinition) {     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(2, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks").     assertEquals(2, fixedRateTasks.size()).     IntervalTask task1 = fixedRateTasks.get(0).     ScheduledMethodRunnable runnable1 = (ScheduledMethodRunnable) task1.getRunnable().     Object targetObject = runnable1.getTarget().     Method targetMethod = runnable1.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedRate", targetMethod.getName()).     assertEquals(0, task1.getInitialDelay()).     assertEquals(4000L, task1.getInterval()).     IntervalTask task2 = fixedRateTasks.get(1).     ScheduledMethodRunnable runnable2 = (ScheduledMethodRunnable) task2.getRunnable().     targetObject = runnable2.getTarget().     targetMethod = runnable2.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedRate", targetMethod.getName()).     assertEquals(2000L, task2.getInitialDelay()).     assertEquals(4000L, task2.getInterval()). }
false;public;0;26;;@Test public void cronTask() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(CronTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("cron", targetMethod.getName()).     assertEquals("*/7 * * * * ?", task.getExpression()). }
false;public;0;43;;@Test public void cronTaskWithZone() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(CronWithTimezoneTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("cron", targetMethod.getName()).     assertEquals("0 0 0-4,6-23 * * ?", task.getExpression()).     Trigger trigger = task.getTrigger().     assertNotNull(trigger).     assertTrue(trigger instanceof CronTrigger).     CronTrigger cronTrigger = (CronTrigger) trigger.     Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT+10")).     cal.clear().     // 15-04-2013 4:00 GMT+10     cal.set(2013, 3, 15, 4, 0).     Date lastScheduledExecutionTime = cal.getTime().     Date lastActualExecutionTime = cal.getTime().     // 4:30     cal.add(Calendar.MINUTE, 30).     Date lastCompletionTime = cal.getTime().     TriggerContext triggerContext = new SimpleTriggerContext(lastScheduledExecutionTime, lastActualExecutionTime, lastCompletionTime).     cal.add(Calendar.MINUTE, 30).     // 6:00     cal.add(Calendar.HOUR_OF_DAY, 1).     Date nextExecutionTime = cronTrigger.nextExecutionTime(triggerContext).     // assert that 6:00 is next execution time     assertEquals(cal.getTime(), nextExecutionTime). }
false;public;0;8;;@Test(expected = BeanCreationException.class) public void cronTaskWithInvalidZone() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(CronWithInvalidTimezoneTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh(). }
false;public;0;10;;@Test(expected = BeanCreationException.class) public void cronTaskWithMethodValidation() {     BeanDefinition validationDefinition = new RootBeanDefinition(MethodValidationPostProcessor.class).     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(CronTestBean.class).     context.registerBeanDefinition("methodValidation", validationDefinition).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh(). }
false;public;0;24;;@Test public void cronTaskWithScopedProxy() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     new AnnotatedBeanDefinitionReader(context).register(ProxiedCronTestBean.class, ProxiedCronTestBeanDependent.class).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(context.getBean(ScopedProxyUtils.getTargetBeanName("target")), targetObject).     assertEquals("cron", targetMethod.getName()).     assertEquals("*/7 * * * * ?", task.getExpression()). }
false;public;0;26;;@Test public void metaAnnotationWithFixedRate() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(MetaAnnotationFixedRateTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks").     assertEquals(1, fixedRateTasks.size()).     IntervalTask task = fixedRateTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("checkForUpdates", targetMethod.getName()).     assertEquals(5000L, task.getInterval()). }
false;public;0;27;;@Test public void composedAnnotationWithInitialDelayAndFixedRate() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(ComposedAnnotationFixedRateTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks").     assertEquals(1, fixedRateTasks.size()).     IntervalTask task = fixedRateTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("checkForUpdates", targetMethod.getName()).     assertEquals(5000L, task.getInterval()).     assertEquals(1000L, task.getInitialDelay()). }
false;public;0;26;;@Test public void metaAnnotationWithCronExpression() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(MetaAnnotationCronTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("generateReport", targetMethod.getName()).     assertEquals("0 0 * * * ?", task.getExpression()). }
false;public;0;32;;@Test public void propertyPlaceholderWithCron() {     String businessHoursCronExpression = "0 0 9-17 * * MON-FRI".     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).     Properties properties = new Properties().     properties.setProperty("schedules.businessHours", businessHoursCronExpression).     placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties).     BeanDefinition targetDefinition = new RootBeanDefinition(PropertyPlaceholderWithCronTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("placeholder", placeholderDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("x", targetMethod.getName()).     assertEquals(businessHoursCronExpression, task.getExpression()). }
false;public;0;17;;@Test public void propertyPlaceholderWithInactiveCron() {     String businessHoursCronExpression = "-".     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).     Properties properties = new Properties().     properties.setProperty("schedules.businessHours", businessHoursCronExpression).     placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties).     BeanDefinition targetDefinition = new RootBeanDefinition(PropertyPlaceholderWithCronTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("placeholder", placeholderDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertTrue(postProcessor.getScheduledTasks().isEmpty()). }
false;public;0;4;;@Test public void propertyPlaceholderWithFixedDelayInMillis() {     propertyPlaceholderWithFixedDelay(false). }
false;public;0;4;;@Test public void propertyPlaceholderWithFixedDelayInDuration() {     propertyPlaceholderWithFixedDelay(true). }
false;private;1;32;;private void propertyPlaceholderWithFixedDelay(boolean durationFormat) {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).     Properties properties = new Properties().     properties.setProperty("fixedDelay", (durationFormat ? "PT5S" : "5000")).     properties.setProperty("initialDelay", (durationFormat ? "PT1S" : "1000")).     placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties).     BeanDefinition targetDefinition = new RootBeanDefinition(PropertyPlaceholderWithFixedDelayTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("placeholder", placeholderDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedDelayTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedDelayTasks").     assertEquals(1, fixedDelayTasks.size()).     IntervalTask task = fixedDelayTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedDelay", targetMethod.getName()).     assertEquals(1000L, task.getInitialDelay()).     assertEquals(5000L, task.getInterval()). }
false;public;0;4;;@Test public void propertyPlaceholderWithFixedRateInMillis() {     propertyPlaceholderWithFixedRate(false). }
false;public;0;4;;@Test public void propertyPlaceholderWithFixedRateInDuration() {     propertyPlaceholderWithFixedRate(true). }
false;private;1;32;;private void propertyPlaceholderWithFixedRate(boolean durationFormat) {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).     Properties properties = new Properties().     properties.setProperty("fixedRate", (durationFormat ? "PT3S" : "3000")).     properties.setProperty("initialDelay", (durationFormat ? "PT1S" : "1000")).     placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties).     BeanDefinition targetDefinition = new RootBeanDefinition(PropertyPlaceholderWithFixedRateTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("placeholder", placeholderDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<IntervalTask> fixedRateTasks = (List<IntervalTask>) new DirectFieldAccessor(registrar).getPropertyValue("fixedRateTasks").     assertEquals(1, fixedRateTasks.size()).     IntervalTask task = fixedRateTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("fixedRate", targetMethod.getName()).     assertEquals(1000L, task.getInitialDelay()).     assertEquals(3000L, task.getInterval()). }
false;public;0;30;;@Test public void expressionWithCron() {     String businessHoursCronExpression = "0 0 9-17 * * MON-FRI".     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(ExpressionWithCronTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     Map<String, String> schedules = new HashMap<>().     schedules.put("businessHours", businessHoursCronExpression).     context.getBeanFactory().registerSingleton("schedules", schedules).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("x", targetMethod.getName()).     assertEquals(businessHoursCronExpression, task.getExpression()). }
false;public;0;32;;@Test public void propertyPlaceholderForMetaAnnotation() {     String businessHoursCronExpression = "0 0 9-17 * * MON-FRI".     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).     Properties properties = new Properties().     properties.setProperty("schedules.businessHours", businessHoursCronExpression).     placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties).     BeanDefinition targetDefinition = new RootBeanDefinition(PropertyPlaceholderMetaAnnotationTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("placeholder", placeholderDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("y", targetMethod.getName()).     assertEquals(businessHoursCronExpression, task.getExpression()). }
false;public;0;26;;@Test public void nonVoidReturnType() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(NonVoidReturnTypeTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh().     ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class).     assertEquals(1, postProcessor.getScheduledTasks().size()).     Object target = context.getBean("target").     ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar) new DirectFieldAccessor(postProcessor).getPropertyValue("registrar").     @SuppressWarnings("unchecked")     List<CronTask> cronTasks = (List<CronTask>) new DirectFieldAccessor(registrar).getPropertyValue("cronTasks").     assertEquals(1, cronTasks.size()).     CronTask task = cronTasks.get(0).     ScheduledMethodRunnable runnable = (ScheduledMethodRunnable) task.getRunnable().     Object targetObject = runnable.getTarget().     Method targetMethod = runnable.getMethod().     assertEquals(target, targetObject).     assertEquals("cron", targetMethod.getName()).     assertEquals("0 0 9-17 * * MON-FRI", task.getExpression()). }
false;public;0;8;;@Test(expected = BeanCreationException.class) public void emptyAnnotation() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(EmptyAnnotationTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh(). }
false;public;0;8;;@Test(expected = BeanCreationException.class) public void invalidCron() throws Throwable {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(InvalidCronTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh(). }
false;public;0;8;;@Test(expected = BeanCreationException.class) public void nonEmptyParamList() {     BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class).     BeanDefinition targetDefinition = new RootBeanDefinition(NonEmptyParamListTestBean.class).     context.registerBeanDefinition("postProcessor", processorDefinition).     context.registerBeanDefinition("target", targetDefinition).     context.refresh(). }
false;public;0;3;;@Scheduled(fixedDelay = 5000) public void fixedDelay() { }
false;public;0;3;;@Scheduled(fixedRate = 3000) public void fixedRate() { }
false;public;0;3;;@Scheduled(fixedRate = 3000, initialDelay = 1000) public void fixedRate() { }
false;public;0;3;;@Schedules({ @Scheduled(fixedRate = 4000), @Scheduled(fixedRate = 4000, initialDelay = 2000) }) public void fixedRate() { }
false;public;0;4;;@Scheduled(fixedRate = 4000) @Scheduled(fixedRate = 4000, initialDelay = 2000) public void fixedRate() { }
false;static;0;7;;static SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean nestedProxy() {     ProxyFactory pf1 = new ProxyFactory(new SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean()).     pf1.setProxyTargetClass(true).     ProxyFactory pf2 = new ProxyFactory(pf1.getProxy()).     pf2.setProxyTargetClass(true).     return (SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean) pf2.getProxy(). }
false;public;0;4;;@Scheduled(fixedRate = 4000) @Scheduled(fixedRate = 4000, initialDelay = 2000) public void fixedRate() { }
false;default;0;4;;@Scheduled(fixedRate = 4000) @Scheduled(fixedRate = 4000, initialDelay = 2000) default void fixedRate() { }
false;private;0;4;;@Scheduled(cron = "*/7 * * * * ?") private void cron() throws IOException {     throw new IOException("no no no"). }
false;protected;0;4;;@Scheduled(cron = "0 0 0-4,6-23 * * ?", zone = "GMT+10") protected void cron() throws IOException {     throw new IOException("no no no"). }
false;public;0;4;;@Scheduled(cron = "0 0 0-4,6-23 * * ?", zone = "FOO") public void cron() throws IOException {     throw new IOException("no no no"). }
false;public;0;4;;@Scheduled(cron = "*/7 * * * * ?") public void cron() throws IOException {     throw new IOException("no no no"). }
false;public;0;4;;@Scheduled(cron = "0 0 9-17 * * MON-FRI") public String cron() {     return "oops". }
false;public;0;3;;@Scheduled public void invalid() { }
false;public;0;3;;@Scheduled(cron = "abc") public void invalid() { }
false;public;1;3;;@Scheduled(fixedRate = 3000) public void invalid(String oops) { }
false;public;0;3;;@EveryFiveSeconds public void checkForUpdates() { }
false;public;0;3;;@WaitASec(fixedRate = 5000) public void checkForUpdates() { }
false;public;0;3;;@Hourly public void generateReport() { }
false;public;0;3;;@Scheduled(cron = "${schedules.businessHours}") public void x() { }
false;public;0;3;;@Scheduled(fixedDelayString = "${fixedDelay}", initialDelayString = "${initialDelay}") public void fixedDelay() { }
false;public;0;3;;@Scheduled(fixedRateString = "${fixedRate}", initialDelayString = "${initialDelay}") public void fixedRate() { }
false;public;0;3;;@Scheduled(cron = "#{schedules.businessHours}") public void x() { }
false;public;0;3;;@BusinessHours public void y() { }
