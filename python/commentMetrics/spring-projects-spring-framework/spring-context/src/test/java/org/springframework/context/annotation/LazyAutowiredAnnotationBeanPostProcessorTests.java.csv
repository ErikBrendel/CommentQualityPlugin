commented;modifiers;parameterAmount;loc;comment;code
false;private;1;19;;private void doTestLazyResourceInjection(Class<? extends TestBeanHolder> annotatedBeanClass) {     AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext().     RootBeanDefinition abd = new RootBeanDefinition(annotatedBeanClass).     abd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     ac.registerBeanDefinition("annotatedBean", abd).     RootBeanDefinition tbd = new RootBeanDefinition(TestBean.class).     tbd.setLazyInit(true).     ac.registerBeanDefinition("testBean", tbd).     ac.refresh().     TestBeanHolder bean = ac.getBean("annotatedBean", TestBeanHolder.class).     assertFalse(ac.getBeanFactory().containsSingleton("testBean")).     assertNotNull(bean.getTestBean()).     assertNull(bean.getTestBean().getName()).     assertTrue(ac.getBeanFactory().containsSingleton("testBean")).     TestBean tb = (TestBean) ac.getBean("testBean").     tb.setName("tb").     assertSame("tb", bean.getTestBean().getName()). }
false;public;0;22;;@Test public void testLazyResourceInjectionWithField() {     doTestLazyResourceInjection(FieldResourceInjectionBean.class).     AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext().     RootBeanDefinition abd = new RootBeanDefinition(FieldResourceInjectionBean.class).     abd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     ac.registerBeanDefinition("annotatedBean", abd).     RootBeanDefinition tbd = new RootBeanDefinition(TestBean.class).     tbd.setLazyInit(true).     ac.registerBeanDefinition("testBean", tbd).     ac.refresh().     FieldResourceInjectionBean bean = ac.getBean("annotatedBean", FieldResourceInjectionBean.class).     assertFalse(ac.getBeanFactory().containsSingleton("testBean")).     assertFalse(bean.getTestBeans().isEmpty()).     assertNull(bean.getTestBeans().get(0).getName()).     assertTrue(ac.getBeanFactory().containsSingleton("testBean")).     TestBean tb = (TestBean) ac.getBean("testBean").     tb.setName("tb").     assertSame("tb", bean.getTestBean().getName()). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithFieldAndCustomAnnotation() {     doTestLazyResourceInjection(FieldResourceInjectionBeanWithCompositeAnnotation.class). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithMethod() {     doTestLazyResourceInjection(MethodResourceInjectionBean.class). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithMethodLevelLazy() {     doTestLazyResourceInjection(MethodResourceInjectionBeanWithMethodLevelLazy.class). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithMethodAndCustomAnnotation() {     doTestLazyResourceInjection(MethodResourceInjectionBeanWithCompositeAnnotation.class). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithConstructor() {     doTestLazyResourceInjection(ConstructorResourceInjectionBean.class). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithConstructorLevelLazy() {     doTestLazyResourceInjection(ConstructorResourceInjectionBeanWithConstructorLevelLazy.class). }
false;public;0;4;;@Test public void testLazyResourceInjectionWithConstructorAndCustomAnnotation() {     doTestLazyResourceInjection(ConstructorResourceInjectionBeanWithCompositeAnnotation.class). }
false;public;0;21;;@Test public void testLazyResourceInjectionWithNonExistingTarget() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver()).     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(bf).     bf.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(FieldResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     FieldResourceInjectionBean bean = (FieldResourceInjectionBean) bf.getBean("annotatedBean").     assertNotNull(bean.getTestBean()).     try {         bean.getTestBean().getName().         fail("Should have thrown NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {     // expected     } }
false;public;0;23;;@Test public void testLazyOptionalResourceInjectionWithNonExistingTarget() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.setAutowireCandidateResolver(new ContextAnnotationAutowireCandidateResolver()).     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(bf).     bf.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(OptionalFieldResourceInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     bf.registerBeanDefinition("annotatedBean", bd).     OptionalFieldResourceInjectionBean bean = (OptionalFieldResourceInjectionBean) bf.getBean("annotatedBean").     assertNotNull(bean.getTestBean()).     assertNotNull(bean.getTestBeans()).     assertTrue(bean.getTestBeans().isEmpty()).     try {         bean.getTestBean().getName().         fail("Should have thrown NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {     // expected     } }
false;;0;1;;TestBean getTestBean().
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public List<TestBean> getTestBeans() {     return testBeans. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public List<TestBean> getTestBeans() {     return this.testBeans. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;1;7;;@Autowired public void setTestBean(@Lazy TestBean testBean) {     if (this.testBean != null) {         throw new IllegalStateException("Already called").     }     this.testBean = testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;1;7;;@Autowired @Lazy public void setTestBean(TestBean testBean) {     if (this.testBean != null) {         throw new IllegalStateException("Already called").     }     this.testBean = testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;1;7;;@LazyInject public void setTestBean(TestBean testBean) {     if (this.testBean != null) {         throw new IllegalStateException("Already called").     }     this.testBean = testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
false;public;0;3;;public TestBean getTestBean() {     return this.testBean. }
