commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void resolveScopeMetadataShouldNotApplyScopedProxyModeToSingleton() {     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnnotatedWithSingletonScope.class).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals(BeanDefinition.SCOPE_SINGLETON, scopeMetadata.getScopeName()).     assertEquals(NO, scopeMetadata.getScopedProxyMode()). }
false;public;0;9;;@Test public void resolveScopeMetadataShouldApplyScopedProxyModeToPrototype() {     this.scopeMetadataResolver = new AnnotationScopeMetadataResolver(INTERFACES).     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnnotatedWithPrototypeScope.class).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals(BeanDefinition.SCOPE_PROTOTYPE, scopeMetadata.getScopeName()).     assertEquals(INTERFACES, scopeMetadata.getScopedProxyMode()). }
false;public;0;8;;@Test public void resolveScopeMetadataShouldReadScopedProxyModeFromAnnotation() {     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnnotatedWithScopedProxy.class).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals("request", scopeMetadata.getScopeName()).     assertEquals(TARGET_CLASS, scopeMetadata.getScopedProxyMode()). }
false;public;0;8;;@Test public void customRequestScope() {     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnnotatedWithCustomRequestScope.class).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals("request", scopeMetadata.getScopeName()).     assertEquals(NO, scopeMetadata.getScopedProxyMode()). }
false;public;0;10;;@Test public void customRequestScopeViaAsm() throws IOException {     MetadataReaderFactory readerFactory = new SimpleMetadataReaderFactory().     MetadataReader reader = readerFactory.getMetadataReader(AnnotatedWithCustomRequestScope.class.getName()).     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(reader.getAnnotationMetadata()).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals("request", scopeMetadata.getScopeName()).     assertEquals(NO, scopeMetadata.getScopedProxyMode()). }
false;public;0;9;;@Test public void customRequestScopeWithAttribute() {     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnnotatedWithCustomRequestScopeWithAttributeOverride.class).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals("request", scopeMetadata.getScopeName()).     assertEquals(TARGET_CLASS, scopeMetadata.getScopedProxyMode()). }
false;public;0;10;;@Test public void customRequestScopeWithAttributeViaAsm() throws IOException {     MetadataReaderFactory readerFactory = new SimpleMetadataReaderFactory().     MetadataReader reader = readerFactory.getMetadataReader(AnnotatedWithCustomRequestScopeWithAttributeOverride.class.getName()).     AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(reader.getAnnotationMetadata()).     ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(bd).     assertNotNull("resolveScopeMetadata(..) must *never* return null.", scopeMetadata).     assertEquals("request", scopeMetadata.getScopeName()).     assertEquals(TARGET_CLASS, scopeMetadata.getScopedProxyMode()). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void ctorWithNullScopedProxyMode() {     new AnnotationScopeMetadataResolver(null). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void setScopeAnnotationTypeWithNullType() {     scopeMetadataResolver.setScopeAnnotationType(null). }
