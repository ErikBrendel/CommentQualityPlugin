commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testCtorWithNullClassLoader() {     new ReflectiveLoadTimeWeaver(null). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void testCtorWithClassLoaderThatDoesNotExposeAnAddTransformerMethod() {     new ReflectiveLoadTimeWeaver(getClass().getClassLoader()). }
false;public;5;4;;@Override public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {     return "CAFEDEAD".getBytes(). }
false;public;0;12;;@Test public void testCtorWithClassLoaderThatDoesNotExposeAGetThrowawayClassLoaderMethodIsOkay() {     JustAddTransformerClassLoader classLoader = new JustAddTransformerClassLoader().     ReflectiveLoadTimeWeaver weaver = new ReflectiveLoadTimeWeaver(classLoader).     weaver.addTransformer(new ClassFileTransformer() {          @Override         public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {             return "CAFEDEAD".getBytes().         }     }).     assertEquals(1, classLoader.getNumTimesGetThrowawayClassLoaderCalled()). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testAddTransformerWithNullTransformer() {     new ReflectiveLoadTimeWeaver(new JustAddTransformerClassLoader()).addTransformer(null). }
false;public;0;6;;@Test public void testGetThrowawayClassLoaderWithClassLoaderThatDoesNotExposeAGetThrowawayClassLoaderMethodYieldsFallbackClassLoader() {     ReflectiveLoadTimeWeaver weaver = new ReflectiveLoadTimeWeaver(new JustAddTransformerClassLoader()).     ClassLoader throwawayClassLoader = weaver.getThrowawayClassLoader().     assertNotNull(throwawayClassLoader). }
false;public;0;8;;@Test public void testGetThrowawayClassLoaderWithTotallyCompliantClassLoader() {     TotallyCompliantClassLoader classLoader = new TotallyCompliantClassLoader().     ReflectiveLoadTimeWeaver weaver = new ReflectiveLoadTimeWeaver(classLoader).     ClassLoader throwawayClassLoader = weaver.getThrowawayClassLoader().     assertNotNull(throwawayClassLoader).     assertEquals(1, classLoader.getNumTimesGetThrowawayClassLoaderCalled()). }
false;public;0;3;;public int getNumTimesGetThrowawayClassLoaderCalled() {     return this.numTimesAddTransformerCalled. }
false;public;1;3;;public void addTransformer(ClassFileTransformer transformer) {     ++this.numTimesAddTransformerCalled. }
false;public;0;4;;@Override public int getNumTimesGetThrowawayClassLoaderCalled() {     return this.numTimesGetThrowawayClassLoaderCalled. }
false;public;0;4;;public ClassLoader getThrowawayClassLoader() {     ++this.numTimesGetThrowawayClassLoaderCalled.     return getClass().getClassLoader(). }
