commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setUp() throws Exception {     NamespaceHandlerResolver resolver = new DefaultNamespaceHandlerResolver(CLASS.getClassLoader(), NS_PROPS).     this.beanFactory = new GenericApplicationContext().     XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(this.beanFactory).     reader.setNamespaceHandlerResolver(resolver).     reader.setValidationMode(XmlBeanDefinitionReader.VALIDATION_XSD).     reader.setEntityResolver(new DummySchemaResolver()).     reader.loadBeanDefinitions(getResource()).     this.beanFactory.refresh(). }
false;public;0;5;;@Test public void testSimpleParser() throws Exception {     TestBean bean = (TestBean) this.beanFactory.getBean("testBean").     assertTestBean(bean). }
false;public;0;5;;@Test public void testSimpleDecorator() throws Exception {     TestBean bean = (TestBean) this.beanFactory.getBean("customisedTestBean").     assertTestBean(bean). }
false;public;0;9;;@Test public void testProxyingDecorator() throws Exception {     ITestBean bean = (ITestBean) this.beanFactory.getBean("debuggingTestBean").     assertTestBean(bean).     assertTrue(AopUtils.isAopProxy(bean)).     Advisor[] advisors = ((Advised) bean).getAdvisors().     assertEquals("Incorrect number of advisors", 1, advisors.length).     assertEquals("Incorrect advice class", DebugInterceptor.class, advisors[0].getAdvice().getClass()). }
false;public;0;13;;@Test public void testProxyingDecoratorNoInstance() throws Exception {     String[] beanNames = this.beanFactory.getBeanNamesForType(ApplicationListener.class).     assertTrue(Arrays.asList(beanNames).contains("debuggingTestBeanNoInstance")).     assertEquals(ApplicationListener.class, this.beanFactory.getType("debuggingTestBeanNoInstance")).     try {         this.beanFactory.getBean("debuggingTestBeanNoInstance").         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         assertTrue(ex.getRootCause() instanceof BeanInstantiationException).     } }
false;public;0;10;;@Test public void testChainedDecorators() throws Exception {     ITestBean bean = (ITestBean) this.beanFactory.getBean("chainedTestBean").     assertTestBean(bean).     assertTrue(AopUtils.isAopProxy(bean)).     Advisor[] advisors = ((Advised) bean).getAdvisors().     assertEquals("Incorrect number of advisors", 2, advisors.length).     assertEquals("Incorrect advice class", DebugInterceptor.class, advisors[0].getAdvice().getClass()).     assertEquals("Incorrect advice class", NopInterceptor.class, advisors[1].getAdvice().getClass()). }
false;public;0;5;;@Test public void testDecorationViaAttribute() throws Exception {     BeanDefinition beanDefinition = this.beanFactory.getBeanDefinition("decorateWithAttribute").     assertEquals("foo", beanDefinition.getAttribute("objectName")). }
false;public;0;6;;// SPR-2728 @Test public void testCustomElementNestedWithinUtilList() throws Exception {     List<?> things = (List<?>) this.beanFactory.getBean("list.of.things").     assertNotNull(things).     assertEquals(2, things.size()). }
false;public;0;6;;// SPR-2728 @Test public void testCustomElementNestedWithinUtilSet() throws Exception {     Set<?> things = (Set<?>) this.beanFactory.getBean("set.of.things").     assertNotNull(things).     assertEquals(2, things.size()). }
false;public;0;6;;// SPR-2728 @Test public void testCustomElementNestedWithinUtilMap() throws Exception {     Map<?, ?> things = (Map<?, ?>) this.beanFactory.getBean("map.of.things").     assertNotNull(things).     assertEquals(2, things.size()). }
false;private;1;4;;private void assertTestBean(ITestBean bean) {     assertEquals("Invalid name", "Rob Harrop", bean.getName()).     assertEquals("Invalid age", 23, bean.getAge()). }
false;private;0;3;;private Resource getResource() {     return new ClassPathResource(NS_XML). }
false;public;2;11;;@Override public InputSource resolveEntity(String publicId, String systemId) throws IOException {     InputSource source = super.resolveEntity(publicId, systemId).     if (source == null) {         Resource resource = new ClassPathResource(TEST_XSD).         source = new InputSource(resource.getInputStream()).         source.setPublicId(publicId).         source.setSystemId(systemId).     }     return source. }
false;public;0;10;;@Override public void init() {     registerBeanDefinitionParser("testBean", new TestBeanDefinitionParser()).     registerBeanDefinitionParser("person", new PersonDefinitionParser()).     registerBeanDefinitionDecorator("set", new PropertyModifyingBeanDefinitionDecorator()).     registerBeanDefinitionDecorator("debug", new DebugBeanDefinitionDecorator()).     registerBeanDefinitionDecorator("nop", new NopInterceptorBeanDefinitionDecorator()).     registerBeanDefinitionDecoratorForAttribute("object-name", new ObjectNameBeanDefinitionDecorator()). }
false;public;2;13;;@Override public BeanDefinition parse(Element element, ParserContext parserContext) {     RootBeanDefinition definition = new RootBeanDefinition().     definition.setBeanClass(TestBean.class).     MutablePropertyValues mpvs = new MutablePropertyValues().     mpvs.add("name", element.getAttribute("name")).     mpvs.add("age", element.getAttribute("age")).     definition.setPropertyValues(mpvs).     parserContext.getRegistry().registerBeanDefinition(element.getAttribute("id"), definition).     return null. }
false;protected;1;4;;@Override protected Class<?> getBeanClass(Element element) {     return TestBean.class. }
false;protected;2;5;;@Override protected void doParse(Element element, BeanDefinitionBuilder builder) {     builder.addPropertyValue("name", element.getAttribute("name")).     builder.addPropertyValue("age", element.getAttribute("age")). }
false;public;3;12;;@Override public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {     Element element = (Element) node.     BeanDefinition def = definition.getBeanDefinition().     MutablePropertyValues mpvs = (def.getPropertyValues() == null) ? new MutablePropertyValues() : def.getPropertyValues().     mpvs.add("name", element.getAttribute("name")).     mpvs.add("age", element.getAttribute("age")).     ((AbstractBeanDefinition) def).setPropertyValues(mpvs).     return definition. }
false;protected;1;4;;@Override protected BeanDefinition createInterceptorDefinition(Node node) {     return new RootBeanDefinition(DebugInterceptor.class). }
false;protected;1;4;;@Override protected BeanDefinition createInterceptorDefinition(Node node) {     return new RootBeanDefinition(NopInterceptor.class). }
false;public;3;6;;@Override public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {     Attr objectNameAttribute = (Attr) node.     definition.getBeanDefinition().setAttribute("objectName", objectNameAttribute.getValue()).     return definition. }
