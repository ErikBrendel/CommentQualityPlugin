commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * Prior to the fix for SPR-8080, this method would succeed due to ordering of  * configuration class registration.  */ ;/**  * Prior to the fix for SPR-8080, this method would succeed due to ordering of  * configuration class registration.  */ @Test public void control() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config1.class, Config2.class).     ctx.refresh().     assertions(ctx).     Config2 config2 = ctx.getBean(Config2.class).     assertThat(config2.testBean, is(ctx.getBean(TestBean.class))). }
true;public;0;8;/**  * Prior to the fix for SPR-8080, this method would fail due to ordering of  * configuration class registration.  */ ;/**  * Prior to the fix for SPR-8080, this method would fail due to ordering of  * configuration class registration.  */ @Test public void originalReproCase() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(Config2.class, Config1.class).     ctx.refresh().     assertions(ctx). }
false;private;1;6;;private void assertions(AnnotationConfigApplicationContext ctx) {     Config1 config1 = ctx.getBean(Config1.class).     TestBean testBean = ctx.getBean(TestBean.class).     assertThat(config1.beanMethodCallCount, is(1)).     assertThat(testBean.getAge(), is(2)). }
false;public;0;4;;@PostConstruct public void init() {     // age == 2     beanMethod().setAge(beanMethod().getAge() + 1). }
false;public;0;7;;@Bean public TestBean beanMethod() {     beanMethodCallCount++.     TestBean testBean = new TestBean().     testBean.setAge(1).     return testBean. }
false;;1;4;;@Autowired void setTestBean(TestBean testBean) {     this.testBean = testBean. }
