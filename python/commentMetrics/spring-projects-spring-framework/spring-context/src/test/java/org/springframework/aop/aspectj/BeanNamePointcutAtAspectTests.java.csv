commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@org.junit.Before public void setup() {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     counterAspect = (CounterAspect) ctx.getBean("counterAspect").     testBean1 = (ITestBean) ctx.getBean("testBean1").     testBean3 = (ITestBean) ctx.getBean("testBean3"). }
false;public;0;9;;@Test public void testMatchingBeanName() {     assertTrue("Expected a proxy", testBean1 instanceof Advised).     // Call two methods to test for SPR-3953-like condition     testBean1.setAge(20).     testBean1.setName("").     assertEquals(2, counterAspect.count). }
false;public;0;7;;@Test public void testNonMatchingBeanName() {     assertFalse("Didn't expect a proxy", testBean3 instanceof Advised).     testBean3.setAge(20).     assertEquals(0, counterAspect.count). }
false;public;0;16;;@Test public void testProgrammaticProxyCreation() {     ITestBean testBean = new TestBean().     AspectJProxyFactory factory = new AspectJProxyFactory().     factory.setTarget(testBean).     CounterAspect myCounterAspect = new CounterAspect().     factory.addAspect(myCounterAspect).     ITestBean proxyTestBean = factory.getProxy().     assertTrue("Expected a proxy", proxyTestBean instanceof Advised).     proxyTestBean.setAge(20).     assertEquals("Programmatically created proxy shouldn't match bean()", 0, myCounterAspect.count). }
false;public;0;4;;@Before("execution(* set*(..)) && bean(testBean1)") public void increment1ForAnonymousPointcut() {     count++. }
