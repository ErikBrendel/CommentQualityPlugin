# id;timestamp;commentText;codeText;commentWords;codeWords
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1328020251;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop = (NopInterceptor) bf.getBean("nopInterceptor")__		assertEquals(0, nop.getCount())___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2__		_		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		_		assertEquals(2, nop.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop.getCount())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop,nop,interceptor,bf,get,bean,nop,interceptor,assert,equals,0,nop,get,count,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop,get,count
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1356735495;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop = (NopInterceptor) bf.getBean("nopInterceptor")__		assertEquals(0, nop.getCount())___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2___		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		_		assertEquals(2, nop.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop.getCount())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop,nop,interceptor,bf,get,bean,nop,interceptor,assert,equals,0,nop,get,count,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop,get,count
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1362408075;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop = (NopInterceptor) bf.getBean("nopInterceptor")__		assertEquals(0, nop.getCount())___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2___		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		_		assertEquals(2, nop.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop.getCount())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop,nop,interceptor,bf,get,bean,nop,interceptor,assert,equals,0,nop,get,count,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop,get,count
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1384168190;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop = (NopInterceptor) bf.getBean("nopInterceptor")__		assertEquals(0, nop.getCount())___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2___		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		_		assertEquals(2, nop.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop.getCount())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop,nop,interceptor,bf,get,bean,nop,interceptor,assert,equals,0,nop,get,count,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop,get,count
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1413848647;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop = (NopInterceptor) bf.getBean("nopInterceptor")__		assertEquals(0, nop.getCount())___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2___		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		_		assertEquals(2, nop.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop.getCount())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop,nop,interceptor,bf,get,bean,nop,interceptor,assert,equals,0,nop,get,count,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop,get,count
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1424347624;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop = (NopInterceptor) bf.getBean("nopInterceptor")__		assertEquals(0, nop.getCount())___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2___		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		_		assertEquals(2, nop.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop.getCount())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop,nop,interceptor,bf,get,bean,nop,interceptor,assert,equals,0,nop,get,count,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop,get,count
AdvisorAutoProxyCreatorTests -> @Test 	public void testCommonInterceptorAndAdvisor() throws Exception;1460663185;Check that we can provide a common interceptor that will_appear in the chain before "specific" interceptors,_which are sourced from matching advisors;@Test_	public void testCommonInterceptorAndAdvisor() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(COMMON_INTERCEPTORS_CONTEXT, CLASS)__		ITestBean test1 = (ITestBean) bf.getBean("test1")__		assertTrue(AopUtils.isAopProxy(test1))___		Lockable lockable1 = (Lockable) test1__		NopInterceptor nop1 = (NopInterceptor) bf.getBean("nopInterceptor")__		NopInterceptor nop2 = (NopInterceptor) bf.getBean("pointcutAdvisor", Advisor.class).getAdvice()___		ITestBean test2 = (ITestBean) bf.getBean("test2")__		Lockable lockable2 = (Lockable) test2___		_		assertFalse(lockable1.locked())__		assertFalse(lockable2.locked())__		_		_		assertEquals(2, nop1.getCount())__		assertEquals(0, nop2.getCount())__		lockable1.lock()__		assertTrue(lockable1.locked())__		assertFalse(lockable2.locked())__		assertEquals(5, nop1.getCount())__		assertEquals(0, nop2.getCount())___		PackageVisibleMethod packageVisibleMethod = (PackageVisibleMethod) bf.getBean("packageVisibleMethod")__		assertEquals(5, nop1.getCount())__		assertEquals(0, nop2.getCount())__		packageVisibleMethod.doSomething()__		assertEquals(6, nop1.getCount())__		assertEquals(1, nop2.getCount())__		assertTrue(packageVisibleMethod instanceof Lockable)__		Lockable lockable3 = (Lockable) packageVisibleMethod__		lockable3.lock()__		assertTrue(lockable3.locked())__		lockable3.unlock()__		assertFalse(lockable3.locked())__	};check,that,we,can,provide,a,common,interceptor,that,will,appear,in,the,chain,before,specific,interceptors,which,are,sourced,from,matching,advisors;test,public,void,test,common,interceptor,and,advisor,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test1,itest,bean,bf,get,bean,test1,assert,true,aop,utils,is,aop,proxy,test1,lockable,lockable1,lockable,test1,nop,interceptor,nop1,nop,interceptor,bf,get,bean,nop,interceptor,nop,interceptor,nop2,nop,interceptor,bf,get,bean,pointcut,advisor,advisor,class,get,advice,itest,bean,test2,itest,bean,bf,get,bean,test2,lockable,lockable2,lockable,test2,assert,false,lockable1,locked,assert,false,lockable2,locked,assert,equals,2,nop1,get,count,assert,equals,0,nop2,get,count,lockable1,lock,assert,true,lockable1,locked,assert,false,lockable2,locked,assert,equals,5,nop1,get,count,assert,equals,0,nop2,get,count,package,visible,method,package,visible,method,package,visible,method,bf,get,bean,package,visible,method,assert,equals,5,nop1,get,count,assert,equals,0,nop2,get,count,package,visible,method,do,something,assert,equals,6,nop1,get,count,assert,equals,1,nop2,get,count,assert,true,package,visible,method,instanceof,lockable,lockable,lockable3,lockable,package,visible,method,lockable3,lock,assert,true,lockable3,locked,lockable3,unlock,assert,false,lockable3,locked
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1328020251;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1356735495;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1362408075;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1384168190;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1413848647;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1424347624;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> protected BeanFactory getBeanFactory() throws IOException;1460663185;Return a bean factory with attributes and EnterpriseServices configured.;protected BeanFactory getBeanFactory() throws IOException {_		return new ClassPathXmlApplicationContext(DEFAULT_CONTEXT, CLASS)__	};return,a,bean,factory,with,attributes,and,enterprise,services,configured;protected,bean,factory,get,bean,factory,throws,ioexception,return,new,class,path,xml,application,context,class
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1328020251;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1356735495;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1362408075;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1384168190;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1413848647;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1424347624;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
AdvisorAutoProxyCreatorTests -> @Test 	public void testCustomTargetSourceNoMatch() throws Exception;1460663185;We have custom TargetSourceCreators but there's no match, and_hence no proxying, for this bean;@Test_	public void testCustomTargetSourceNoMatch() throws Exception {_		BeanFactory bf = new ClassPathXmlApplicationContext(CUSTOM_TARGETSOURCE_CONTEXT, CLASS)__		ITestBean test = (ITestBean) bf.getBean("test")__		assertFalse(AopUtils.isAopProxy(test))__		assertEquals("Rod", test.getName())__		assertEquals("Kerry", test.getSpouse().getName())__	};we,have,custom,target,source,creators,but,there,s,no,match,and,hence,no,proxying,for,this,bean;test,public,void,test,custom,target,source,no,match,throws,exception,bean,factory,bf,new,class,path,xml,application,context,class,itest,bean,test,itest,bean,bf,get,bean,test,assert,false,aop,utils,is,aop,proxy,test,assert,equals,rod,test,get,name,assert,equals,kerry,test,get,spouse,get,name
