commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testGetAgeIsReadOnly() throws Exception {     ModelMBeanInfo info = getMBeanInfoFromAssembler().     ModelMBeanAttributeInfo attr = info.getAttribute(AGE_ATTRIBUTE).     assertTrue("Age is not readable", attr.isReadable()).     assertFalse("Age is not writable", attr.isWritable()). }
false;public;0;10;;@Test public void testWithUnknownClass() throws Exception {     try {         getWithMapping("com.foo.bar.Unknown").         fail("Should have thrown IllegalArgumentException").     } catch (IllegalArgumentException ex) {     // expected     } }
false;public;0;10;;@Test public void testWithNonInterface() throws Exception {     try {         getWithMapping("JmxTestBean").         fail("Should have thrown IllegalArgumentException").     } catch (IllegalArgumentException ex) {     // expected     } }
false;public;0;11;;@Test public void testWithFallThrough() throws Exception {     InterfaceBasedMBeanInfoAssembler assembler = getWithMapping("foobar", "org.springframework.jmx.export.assembler.ICustomJmxBean").     assembler.setManagedInterfaces(new Class<?>[] { IAdditionalTestMethods.class }).     ModelMBeanInfo inf = assembler.getMBeanInfo(getBean(), getObjectName()).     MBeanAttributeInfo attr = inf.getAttribute("NickName").     assertNickName(attr). }
false;public;0;7;;@Test public void testNickNameIsExposed() throws Exception {     ModelMBeanInfo inf = (ModelMBeanInfo) getMBeanInfo().     MBeanAttributeInfo attr = inf.getAttribute("NickName").     assertNickName(attr). }
false;protected;0;4;;@Override protected String getObjectName() {     return OBJECT_NAME. }
false;protected;0;4;;@Override protected int getExpectedOperationCount() {     return 7. }
false;protected;0;4;;@Override protected int getExpectedAttributeCount() {     return 3. }
false;protected;0;6;;@Override protected MBeanInfoAssembler getAssembler() throws Exception {     return getWithMapping("org.springframework.jmx.export.assembler.IAdditionalTestMethods, " + "org.springframework.jmx.export.assembler.ICustomJmxBean"). }
false;protected;0;4;;@Override protected String getApplicationContextPath() {     return "org/springframework/jmx/export/assembler/interfaceAssemblerMapped.xml". }
false;private;1;3;;private InterfaceBasedMBeanInfoAssembler getWithMapping(String mapping) {     return getWithMapping(OBJECT_NAME, mapping). }
false;private;2;8;;private InterfaceBasedMBeanInfoAssembler getWithMapping(String name, String mapping) {     InterfaceBasedMBeanInfoAssembler assembler = new InterfaceBasedMBeanInfoAssembler().     Properties props = new Properties().     props.setProperty(name, mapping).     assembler.setInterfaceMappings(props).     assembler.afterPropertiesSet().     return assembler. }
false;private;1;5;;private void assertNickName(MBeanAttributeInfo attr) {     assertNotNull("Nick Name should not be null", attr).     assertTrue("Nick Name should be writable", attr.isWritable()).     assertTrue("Nick Name should be readable", attr.isReadable()). }
