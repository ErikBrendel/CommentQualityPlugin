commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void conditionalOnMissingBeanMatch() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(BeanOneConfiguration.class, BeanTwoConfiguration.class).     ctx.refresh().     assertTrue(ctx.containsBean("bean1")).     assertFalse(ctx.containsBean("bean2")).     assertFalse(ctx.containsBean("configurationClassWithConditionTests.BeanTwoConfiguration")). }
false;public;0;9;;@Test public void conditionalOnMissingBeanNoMatch() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(BeanTwoConfiguration.class).     ctx.refresh().     assertFalse(ctx.containsBean("bean1")).     assertTrue(ctx.containsBean("bean2")).     assertTrue(ctx.containsBean("configurationClassWithConditionTests.BeanTwoConfiguration")). }
false;public;0;8;;@Test public void conditionalOnBeanMatch() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(BeanOneConfiguration.class, BeanThreeConfiguration.class).     ctx.refresh().     assertTrue(ctx.containsBean("bean1")).     assertTrue(ctx.containsBean("bean3")). }
false;public;0;8;;@Test public void conditionalOnBeanNoMatch() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(BeanThreeConfiguration.class).     ctx.refresh().     assertFalse(ctx.containsBean("bean1")).     assertFalse(ctx.containsBean("bean3")). }
false;public;0;7;;@Test public void metaConditional() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigurationWithMetaCondition.class).     ctx.refresh().     assertTrue(ctx.containsBean("bean")). }
false;public;0;7;;@Test public void metaConditionalWithAsm() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(ConfigurationWithMetaCondition.class.getName())).     ctx.refresh().     assertTrue(ctx.containsBean("bean")). }
false;public;0;7;;@Test public void nonConfigurationClass() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(NonConfigurationClass.class).     ctx.refresh().     assertFalse(ctx.containsBean("bean1")). }
false;public;0;7;;@Test public void nonConfigurationClassWithAsm() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(NonConfigurationClass.class.getName())).     ctx.refresh().     assertFalse(ctx.containsBean("bean1")). }
false;public;0;7;;@Test public void methodConditional() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConditionOnMethodConfiguration.class).     ctx.refresh().     assertFalse(ctx.containsBean("bean1")). }
false;public;0;7;;@Test public void methodConditionalWithAsm() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("config", new RootBeanDefinition(ConditionOnMethodConfiguration.class.getName())).     ctx.refresh().     assertFalse(ctx.containsBean("bean1")). }
false;public;0;6;;@Test public void importsNotCreated() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ImportsNotCreated.class).     ctx.refresh(). }
false;public;0;5;;@Test public void conditionOnOverriddenMethodHonored() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithBeanSkipped.class).     assertEquals(0, context.getBeansOfType(ExampleBean.class).size()). }
false;public;0;7;;@Test public void noConditionOnOverriddenMethodHonored() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithBeanReactivated.class).     Map<String, ExampleBean> beans = context.getBeansOfType(ExampleBean.class).     assertEquals(1, beans.size()).     assertEquals("baz", beans.keySet().iterator().next()). }
false;public;0;7;;@Test public void configWithAlternativeBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithAlternativeBeans.class).     Map<String, ExampleBean> beans = context.getBeansOfType(ExampleBean.class).     assertEquals(1, beans.size()).     assertEquals("baz", beans.keySet().iterator().next()). }
false;public;0;4;;@Bean public ExampleBean bean1() {     return new ExampleBean(). }
false;public;0;4;;@Bean public ExampleBean bean2() {     return new ExampleBean(). }
false;public;0;4;;@Bean public ExampleBean bean3() {     return new ExampleBean(). }
false;public;0;4;;@Bean public ExampleBean bean() {     return new ExampleBean(). }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return !context.getBeanFactory().containsBeanDefinition("bean1"). }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return ConfigurationPhase.REGISTER_BEAN. }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return context.getBeanFactory().containsBeanDefinition("bean1"). }
false;public;2;6;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(MetaConditional.class.getName())).     assertThat(attributes.getString("value"), equalTo("test")).     return true. }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return false. }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return true. }
false;public;0;4;;@Bean public ExampleBean bean1() {     return new ExampleBean(). }
false;public;0;5;;@Bean @Never public ExampleBean bean1() {     return new ExampleBean(). }
false;public;2;4;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { }
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     return new String[] {}. }
false;public;0;4;;@Bean public ExampleBean baz() {     return new ExampleBean(). }
false;public;0;6;;@Override @Bean @Conditional(NeverCondition.class) public ExampleBean baz() {     return new ExampleBean(). }
false;public;0;5;;@Override @Bean public ExampleBean baz() {     return new ExampleBean(). }
false;public;0;5;;@Bean(name = "baz") @Conditional(AlwaysCondition.class) public ExampleBean baz1() {     return new ExampleBean(). }
false;public;0;5;;@Bean(name = "baz") @Conditional(NeverCondition.class) public ExampleBean baz2() {     return new ExampleBean(). }
