commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;29;;@Override protected ConfigurableApplicationContext createContext() throws Exception {     StaticApplicationContext parent = new StaticApplicationContext().     Map<String, String> m = new HashMap<>().     m.put("name", "Roderick").     parent.registerPrototype("rod", TestBean.class, new MutablePropertyValues(m)).     m.put("name", "Albert").     parent.registerPrototype("father", TestBean.class, new MutablePropertyValues(m)).     parent.registerSingleton(StaticApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME, TestApplicationEventMulticaster.class, null).     parent.refresh().     parent.addApplicationListener(parentListener).     parent.getStaticMessageSource().addMessage("code1", Locale.getDefault(), "message1").     this.sac = new StaticApplicationContext(parent).     sac.registerSingleton("beanThatListens", BeanThatListens.class, new MutablePropertyValues()).     sac.registerSingleton("aca", ACATester.class, new MutablePropertyValues()).     sac.registerPrototype("aca-prototype", ACATester.class, new MutablePropertyValues()).     PropertiesBeanDefinitionReader reader = new PropertiesBeanDefinitionReader(sac.getDefaultListableBeanFactory()).     Resource resource = new ClassPathResource("testBeans.properties", getClass()).     reader.loadBeanDefinitions(new EncodedResource(resource, "ISO-8859-1")).     sac.refresh().     sac.addApplicationListener(listener).     sac.getStaticMessageSource().addMessage("code2", Locale.getDefault(), "message2").     return sac. }
false;public;0;5;;@Test @Override public void count() {     assertCount(15). }
false;public;0;7;;@Test @Override public void events() throws Exception {     TestApplicationEventMulticaster.counter = 0.     super.events().     assertEquals(1, TestApplicationEventMulticaster.counter). }
false;public;2;5;;@Override public void multicastEvent(ApplicationEvent event, @Nullable ResolvableType eventType) {     super.multicastEvent(event, eventType).     counter++. }
