commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void doesNotPropagateFatalExceptionOnResourceThatCannotBeResolvedToAFile() throws Exception {     Resource resource = mock(Resource.class).     given(resource.lastModified()).willThrow(new IOException()).     ResourceScriptSource scriptSource = new ResourceScriptSource(resource).     long lastModified = scriptSource.retrieveLastModifiedTime().     assertEquals(0, lastModified). }
false;public;0;6;;@Test public void beginsInModifiedState() throws Exception {     Resource resource = mock(Resource.class).     ResourceScriptSource scriptSource = new ResourceScriptSource(resource).     assertTrue(scriptSource.isModified()). }
false;public;0;18;;@Test public void lastModifiedWorksWithResourceThatDoesNotSupportFileBasedReading() throws Exception {     Resource resource = mock(Resource.class).     // underlying File is asked for so that the last modified time can be checked...     // And then mock the file changing. i.e. the File says it has been modified     given(resource.lastModified()).willReturn(100L, 100L, 200L).     // does not support File-based reading. delegates to InputStream-style reading...     // resource.getFile().     // mock.setThrowable(new FileNotFoundException()).     given(resource.getInputStream()).willReturn(StreamUtils.emptyInput()).     ResourceScriptSource scriptSource = new ResourceScriptSource(resource).     assertTrue("ResourceScriptSource must start off in the 'isModified' state (it obviously isn't).", scriptSource.isModified()).     scriptSource.getScriptAsString().     assertFalse("ResourceScriptSource must not report back as being modified if the underlying File resource is not reporting a changed lastModified time.", scriptSource.isModified()).     // Must now report back as having been modified     assertTrue("ResourceScriptSource must report back as being modified if the underlying File resource is reporting a changed lastModified time.", scriptSource.isModified()). }
false;public;0;10;;@Test public void lastModifiedWorksWithResourceThatDoesNotSupportFileBasedAccessAtAll() throws Exception {     Resource resource = new ByteArrayResource(new byte[0]).     ResourceScriptSource scriptSource = new ResourceScriptSource(resource).     assertTrue("ResourceScriptSource must start off in the 'isModified' state (it obviously isn't).", scriptSource.isModified()).     scriptSource.getScriptAsString().     assertFalse("ResourceScriptSource must not report back as being modified if the underlying File resource is not reporting a changed lastModified time.", scriptSource.isModified()).     // Must now continue to report back as not having been modified 'cos the Resource does not support access as a File (and so the lastModified date cannot be determined).     assertFalse("ResourceScriptSource must not report back as being modified if the underlying File resource is not reporting a changed lastModified time.", scriptSource.isModified()). }
