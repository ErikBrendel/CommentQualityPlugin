commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;11;;@Before public final void setUp() throws Exception {     this.server = MBeanServerFactory.createMBeanServer().     try {         onSetUp().     } catch (Exception ex) {         releaseServer().         throw ex.     } }
false;protected;1;7;;protected ConfigurableApplicationContext loadContext(String configLocation) {     GenericApplicationContext ctx = new GenericApplicationContext().     new XmlBeanDefinitionReader(ctx).loadBeanDefinitions(configLocation).     ctx.getDefaultListableBeanFactory().registerSingleton("server", this.server).     ctx.refresh().     return ctx. }
false;public;0;5;;@After public void tearDown() throws Exception {     releaseServer().     onTearDown(). }
false;private;0;4;;private void releaseServer() throws Exception {     MBeanServerFactory.releaseMBeanServer(getServer()).     MBeanTestUtils.resetMBeanServers(). }
false;protected;0;2;;protected void onTearDown() throws Exception { }
false;protected;0;2;;protected void onSetUp() throws Exception { }
false;public;0;3;;public MBeanServer getServer() {     return this.server. }
true;protected;1;4;/**  * Start the specified {@link MBeanExporter}.  */ ;/**  * Start the specified {@link MBeanExporter}.  */ protected void start(MBeanExporter exporter) {     exporter.afterPropertiesSet().     exporter.afterSingletonsInstantiated(). }
false;protected;2;3;;protected void assertIsRegistered(String message, ObjectName objectName) {     assertTrue(message, getServer().isRegistered(objectName)). }
false;protected;2;3;;protected void assertIsNotRegistered(String message, ObjectName objectName) {     assertFalse(message, getServer().isRegistered(objectName)). }
