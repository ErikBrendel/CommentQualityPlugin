commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void withConcreteFactoryBeanImplementationAsReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(ConcreteFactoryBeanImplementationConfig.class).     ctx.refresh(). }
false;public;0;7;;@Test public void withParameterizedFactoryBeanImplementationAsReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(ParameterizedFactoryBeanImplementationConfig.class).     ctx.refresh(). }
false;public;0;7;;@Test public void withParameterizedFactoryBeanInterfaceAsReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(ParameterizedFactoryBeanInterfaceConfig.class).     ctx.refresh(). }
false;public;0;7;;@Test public void withNonPublicParameterizedFactoryBeanInterfaceAsReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(NonPublicParameterizedFactoryBeanInterfaceConfig.class).     ctx.refresh(). }
false;public;0;7;;@Test public void withRawFactoryBeanInterfaceAsReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(RawFactoryBeanInterfaceConfig.class).     ctx.refresh(). }
false;public;0;7;;@Test public void withWildcardParameterizedFactoryBeanInterfaceAsReturnType() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(WildcardParameterizedFactoryBeanInterfaceConfig.class).     ctx.refresh(). }
false;public;0;8;;@Test public void withFactoryBeanCallingBean() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AppConfig.class).     ctx.register(FactoryBeanCallingConfig.class).     ctx.refresh().     assertEquals("true", ctx.getBean("myString")). }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     this.initialized = true. }
false;public;0;4;;@Override public String getObject() throws Exception {     return "foo". }
false;public;0;4;;@Override public Class<String> getObjectType() {     return String.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public String getString() {     return Boolean.toString(this.initialized). }
false;public;0;4;;@Override public T getObject() throws Exception {     return obj. }
false;public;0;5;;@Override @SuppressWarnings("unchecked") public Class<T> getObjectType() {     return (Class<T>) obj.getClass(). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Bean public DummyBean dummyBean() {     return new DummyBean(). }
false;public;0;5;;@Bean public MyFactoryBean factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyFactoryBean(). }
false;public;0;5;;@Bean public MyParameterizedFactoryBean<String> factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyParameterizedFactoryBean<>("whatev"). }
false;public;0;5;;@Bean public FactoryBean<String> factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyFactoryBean(). }
false;;0;5;;@Bean FactoryBean<String> factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyFactoryBean(). }
false;public;0;6;;@Bean @SuppressWarnings("rawtypes") public FactoryBean factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyFactoryBean(). }
false;public;0;5;;@Bean public FactoryBean<?> factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyFactoryBean(). }
false;public;0;5;;@Bean public MyFactoryBean factoryBean() {     Assert.notNull(dummyBean, "DummyBean was not injected.").     return new MyFactoryBean(). }
false;public;0;4;;@Bean public String myString() {     return factoryBean().getString(). }
