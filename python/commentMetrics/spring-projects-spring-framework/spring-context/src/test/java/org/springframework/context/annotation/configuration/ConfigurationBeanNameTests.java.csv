commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void registerOuterConfig() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(A.class).     ctx.refresh().     assertThat(ctx.containsBean("outer"), is(true)).     assertThat(ctx.containsBean("imported"), is(true)).     assertThat(ctx.containsBean("nested"), is(true)).     assertThat(ctx.containsBean("nestedBean"), is(true)). }
false;public;0;10;;@Test public void registerNestedConfig() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(A.B.class).     ctx.refresh().     assertThat(ctx.containsBean("outer"), is(false)).     assertThat(ctx.containsBean("imported"), is(false)).     assertThat(ctx.containsBean("nested"), is(true)).     assertThat(ctx.containsBean("nestedBean"), is(true)). }
false;public;2;5;;@Override public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {     return "custom-" + super.generateBeanName(definition, registry). }
false;public;0;17;;@Test public void registerOuterConfig_withBeanNameGenerator() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.setBeanNameGenerator(new AnnotationBeanNameGenerator() {          @Override         public String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry) {             return "custom-" + super.generateBeanName(definition, registry).         }     }).     ctx.register(A.class).     ctx.refresh().     assertThat(ctx.containsBean("custom-outer"), is(true)).     assertThat(ctx.containsBean("custom-imported"), is(true)).     assertThat(ctx.containsBean("custom-nested"), is(true)).     assertThat(ctx.containsBean("nestedBean"), is(true)). }
false;public;0;1;;@Bean public String nestedBean() {     return "". }
false;public;0;1;;@Bean public String s() {     return "s". }
