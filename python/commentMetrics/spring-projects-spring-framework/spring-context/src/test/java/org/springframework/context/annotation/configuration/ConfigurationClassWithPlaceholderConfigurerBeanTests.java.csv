commented;modifiers;parameterAmount;loc;comment;code
true;public;0;13;/**  * Test which proves that a non-static property placeholder bean cannot be declared  * in the same configuration class that has a {@code @Value} field in need of  * placeholder replacement. It's an obvious chicken-and-egg issue.  *  * <p>One solution is to do as {@link #valueFieldsAreProcessedWhenPlaceholderConfigurerIsSegregated()}  * does and segregate the two bean definitions across configuration classes.  *  * <p>Another solution is to simply make the {@code @Bean} method for the property  * placeholder {@code static} as in  * {@link #valueFieldsAreProcessedWhenStaticPlaceholderConfigurerIsIntegrated()}.  */ ;/**  * Test which proves that a non-static property placeholder bean cannot be declared  * in the same configuration class that has a {@code @Value} field in need of  * placeholder replacement. It's an obvious chicken-and-egg issue.  *  * <p>One solution is to do as {@link #valueFieldsAreProcessedWhenPlaceholderConfigurerIsSegregated()}  * does and segregate the two bean definitions across configuration classes.  *  * <p>Another solution is to simply make the {@code @Bean} method for the property  * placeholder {@code static} as in  * {@link #valueFieldsAreProcessedWhenStaticPlaceholderConfigurerIsIntegrated()}.  */ @Test @SuppressWarnings("resource") public void valueFieldsAreNotProcessedWhenPlaceholderConfigurerIsIntegrated() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithValueFieldAndPlaceholderConfigurer.class).     System.setProperty("test.name", "foo").     ctx.refresh().     System.clearProperty("test.name").     TestBean testBean = ctx.getBean(TestBean.class).     // Proof that the @Value field did not get set:     assertThat(testBean.getName(), nullValue()). }
false;public;0;12;;@Test @SuppressWarnings("resource") public void valueFieldsAreProcessedWhenStaticPlaceholderConfigurerIsIntegrated() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithValueFieldAndStaticPlaceholderConfigurer.class).     System.setProperty("test.name", "foo").     ctx.refresh().     System.clearProperty("test.name").     TestBean testBean = ctx.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("foo")). }
false;public;0;13;;@Test @SuppressWarnings("resource") public void valueFieldsAreProcessedWhenPlaceholderConfigurerIsSegregated() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithValueField.class).     ctx.register(ConfigWithPlaceholderConfigurer.class).     System.setProperty("test.name", "foo").     ctx.refresh().     System.clearProperty("test.name").     TestBean testBean = ctx.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("foo")). }
false;public;0;11;;@Test @SuppressWarnings("resource") public void valueFieldsResolveToPlaceholderSpecifiedDefaultValuesWithPlaceholderConfigurer() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithValueField.class).     ctx.register(ConfigWithPlaceholderConfigurer.class).     ctx.refresh().     TestBean testBean = ctx.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("bar")). }
false;public;0;11;;@Test @SuppressWarnings("resource") public void valueFieldsResolveToPlaceholderSpecifiedDefaultValuesWithoutPlaceholderConfigurer() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithValueField.class).     // ctx.register(ConfigWithPlaceholderConfigurer.class).     ctx.refresh().     TestBean testBean = ctx.getBean(TestBean.class).     assertThat(testBean.getName(), equalTo("bar")). }
false;public;0;4;;@Bean public ITestBean testBean() {     return new TestBean(this.name). }
false;public;0;4;;@Bean public PropertySourcesPlaceholderConfigurer ppc() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public;0;4;;@Bean public ITestBean testBean() {     return new TestBean(this.name). }
false;public;0;4;;@Bean public PropertySourcesPlaceholderConfigurer ppc() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public;0;4;;@Bean public ITestBean testBean() {     return new TestBean(this.name). }
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer ppc() {     return new PropertySourcesPlaceholderConfigurer(). }
