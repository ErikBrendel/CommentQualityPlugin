commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getObjectName() {     return OBJECT_NAME. }
false;protected;0;4;;@Override protected int getExpectedOperationCount() {     return 9. }
false;protected;0;4;;@Override protected int getExpectedAttributeCount() {     return 4. }
false;protected;0;4;;@Override protected String getApplicationContextPath() {     return "org/springframework/jmx/export/assembler/methodExclusionAssembler.xml". }
false;protected;0;6;;@Override protected MBeanInfoAssembler getAssembler() {     MethodExclusionMBeanInfoAssembler assembler = new MethodExclusionMBeanInfoAssembler().     assembler.setIgnoredMethods(new String[] { "dontExposeMe", "setSuperman" }).     return assembler. }
false;public;0;8;;@Test public void testSupermanIsReadOnly() throws Exception {     ModelMBeanInfo info = getMBeanInfoFromAssembler().     ModelMBeanAttributeInfo attr = info.getAttribute("Superman").     assertTrue(attr.isReadable()).     assertFalse(attr.isWritable()). }
true;public;0;12;/* 	 * http://opensource.atlassian.com/projects/spring/browse/SPR-2754 	 */ ;/* 	 * http://opensource.atlassian.com/projects/spring/browse/SPR-2754 	 */ @Test public void testIsNotIgnoredDoesntIgnoreUnspecifiedBeanMethods() throws Exception {     final String beanKey = "myTestBean".     MethodExclusionMBeanInfoAssembler assembler = new MethodExclusionMBeanInfoAssembler().     Properties ignored = new Properties().     ignored.setProperty(beanKey, "dontExposeMe,setSuperman").     assembler.setIgnoredMethodMappings(ignored).     Method method = JmxTestBean.class.getMethod("dontExposeMe").     assertFalse(assembler.isNotIgnored(method, beanKey)).     // this bean does not have any ignored methods on it, so must obviously not be ignored...     assertTrue(assembler.isNotIgnored(method, "someOtherBeanKey")). }
