commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setup() {     ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     testImpl1 = (TestInterface) ctx.getBean("testImpl1").     testImpl2 = (TestInterface) ctx.getBean("testImpl2").     testAspectForTestImpl1 = (TestAspect) ctx.getBean("testAspectForTestImpl1").     testAspectForAbstractTestImpl = (TestAspect) ctx.getBean("testAspectForAbstractTestImpl").     testInterceptor = (TestInterceptor) ctx.getBean("testInterceptor").     testAspectForTestImpl1.count = 0.     testAspectForAbstractTestImpl.count = 0.     testInterceptor.count = 0. }
false;public;0;7;;@Test public void targetSelectionForMatchedType() {     testImpl1.interfaceMethod().     assertEquals("Should have been advised by POJO advice for impl", 1, testAspectForTestImpl1.count).     assertEquals("Should have been advised by POJO advice for base type", 1, testAspectForAbstractTestImpl.count).     assertEquals("Should have been advised by advisor", 1, testInterceptor.count). }
false;public;0;7;;@Test public void targetNonSelectionForMismatchedType() {     testImpl2.interfaceMethod().     assertEquals("Shouldn't have been advised by POJO advice for impl", 0, testAspectForTestImpl1.count).     assertEquals("Should have been advised by POJO advice for base type", 1, testAspectForAbstractTestImpl.count).     assertEquals("Shouldn't have been advised by advisor", 0, testInterceptor.count). }
false;public;0;1;;public void interfaceMethod().
false;public;0;3;;@Override public void interfaceMethod() { }
false;public;0;3;;public void increment() {     count++. }
false;public;1;5;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     increment().     return mi.proceed(). }
