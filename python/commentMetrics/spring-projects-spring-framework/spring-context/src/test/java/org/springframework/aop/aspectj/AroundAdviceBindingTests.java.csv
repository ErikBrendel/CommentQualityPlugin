commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void onSetUp() throws Exception {     ctx = new ClassPathXmlApplicationContext(getClass().getSimpleName() + ".xml", getClass()).     AroundAdviceBindingTestAspect aroundAdviceAspect = ((AroundAdviceBindingTestAspect) ctx.getBean("testAspect")).     ITestBean injectedTestBean = (ITestBean) ctx.getBean("testBean").     assertTrue(AopUtils.isAopProxy(injectedTestBean)).     this.testBeanProxy = injectedTestBean.     // we need the real target too, not just the proxy...     this.testBeanTarget = (TestBean) ((Advised) testBeanProxy).getTargetSource().getTarget().     mockCollaborator = mock(AroundAdviceBindingCollaborator.class).     aroundAdviceAspect.setCollaborator(mockCollaborator). }
false;public;0;5;;@Test public void testOneIntArg() {     testBeanProxy.setAge(5).     verify(mockCollaborator).oneIntArg(5). }
false;public;0;5;;@Test public void testOneObjectArgBoundToTarget() {     testBeanProxy.getAge().     verify(mockCollaborator).oneObjectArg(this.testBeanTarget). }
false;public;0;5;;@Test public void testOneIntAndOneObjectArgs() {     testBeanProxy.setAge(5).     verify(mockCollaborator).oneIntAndOneObject(5, this.testBeanProxy). }
false;public;0;5;;@Test public void testJustJoinPoint() {     testBeanProxy.getAge().     verify(mockCollaborator).justJoinPoint("getAge"). }
false;public;1;3;;public void setCollaborator(AroundAdviceBindingCollaborator aCollaborator) {     this.collaborator = aCollaborator. }
true;public;2;4;// "advice" methods ;// "advice" methods public void oneIntArg(ProceedingJoinPoint pjp, int age) throws Throwable {     this.collaborator.oneIntArg(age).     pjp.proceed(). }
false;public;2;4;;public int oneObjectArg(ProceedingJoinPoint pjp, Object bean) throws Throwable {     this.collaborator.oneObjectArg(bean).     return ((Integer) pjp.proceed()).intValue(). }
false;public;3;4;;public void oneIntAndOneObject(ProceedingJoinPoint pjp, int x, Object o) throws Throwable {     this.collaborator.oneIntAndOneObject(x, o).     pjp.proceed(). }
false;public;1;4;;public int justJoinPoint(ProceedingJoinPoint pjp) throws Throwable {     this.collaborator.justJoinPoint(pjp.getSignature().getName()).     return ((Integer) pjp.proceed()).intValue(). }
false;;1;1;;void oneIntArg(int x).
false;;1;1;;void oneObjectArg(Object o).
false;;2;1;;void oneIntAndOneObject(int x, Object o).
false;;1;1;;void justJoinPoint(String s).
