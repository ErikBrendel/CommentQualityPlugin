commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testGetCache() throws Exception {     Cache cache = this.manager.getCache("bucket").     assertNotNull(cache).     assertSame(cache, this.manager.getCache("bucket")). }
false;public;0;11;;@Test public void testNoOpCache() throws Exception {     String name = createRandomKey().     Cache cache = this.manager.getCache(name).     assertEquals(name, cache.getName()).     Object key = new Object().     cache.put(key, new Object()).     assertNull(cache.get(key)).     assertNull(cache.get(key, Object.class)).     assertSame(cache, cache.getNativeCache()). }
false;public;0;7;;@Test public void testCacheName() throws Exception {     String name = "bucket".     assertFalse(this.manager.getCacheNames().contains(name)).     this.manager.getCache(name).     assertTrue(this.manager.getCacheNames().contains(name)). }
false;public;0;8;;@Test public void testCacheCallable() throws Exception {     String name = createRandomKey().     Cache cache = this.manager.getCache(name).     Object returnValue = new Object().     Object value = cache.get(new Object(), () -> returnValue).     assertEquals(returnValue, value). }
false;public;0;14;;@Test public void testCacheGetCallableFail() {     Cache cache = this.manager.getCache(createRandomKey()).     String key = createRandomKey().     try {         cache.get(key, () -> {             throw new UnsupportedOperationException("Expected exception").         }).     } catch (Cache.ValueRetrievalException ex) {         assertNotNull(ex.getCause()).         assertEquals(UnsupportedOperationException.class, ex.getCause().getClass()).     } }
false;private;0;3;;private String createRandomKey() {     return UUID.randomUUID().toString(). }
