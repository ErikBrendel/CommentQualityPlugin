commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testRepeatedAroundAdviceInvocationsWithAspectJ() {     testRepeatedAroundAdviceInvocations(ASPECTJ_CONTEXT, getCount(), "AspectJ"). }
false;public;0;4;;@Test public void testRepeatedAroundAdviceInvocationsWithSpringAop() {     testRepeatedAroundAdviceInvocations(SPRING_AOP_CONTEXT, getCount(), "Spring AOP"). }
false;public;0;4;;@Test public void testRepeatedBeforeAdviceInvocationsWithAspectJ() {     testBeforeAdviceWithoutJoinPoint(ASPECTJ_CONTEXT, getCount(), "AspectJ"). }
false;public;0;4;;@Test public void testRepeatedBeforeAdviceInvocationsWithSpringAop() {     testBeforeAdviceWithoutJoinPoint(SPRING_AOP_CONTEXT, getCount(), "Spring AOP"). }
false;public;0;4;;@Test public void testRepeatedAfterReturningAdviceInvocationsWithAspectJ() {     testAfterReturningAdviceWithoutJoinPoint(ASPECTJ_CONTEXT, getCount(), "AspectJ"). }
false;public;0;4;;@Test public void testRepeatedAfterReturningAdviceInvocationsWithSpringAop() {     testAfterReturningAdviceWithoutJoinPoint(SPRING_AOP_CONTEXT, getCount(), "Spring AOP"). }
false;public;0;4;;@Test public void testRepeatedMixWithAspectJ() {     testMix(ASPECTJ_CONTEXT, getCount(), "AspectJ"). }
false;public;0;4;;@Test public void testRepeatedMixWithSpringAop() {     testMix(SPRING_AOP_CONTEXT, getCount(), "Spring AOP"). }
true;protected;0;3;/**  * Change the return number to a higher number to make this test useful.  */ ;/**  * Change the return number to a higher number to make this test useful.  */ protected int getCount() {     return 10. }
false;private;3;18;;private long testRepeatedAroundAdviceInvocations(String file, int howmany, String technology) {     ClassPathXmlApplicationContext bf = new ClassPathXmlApplicationContext(file, CLASS).     StopWatch sw = new StopWatch().     sw.start(howmany + " repeated around advice invocations with " + technology).     ITestBean adrian = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian)).     assertEquals(68, adrian.getAge()).     for (int i = 0. i < howmany. i++) {         adrian.getAge().     }     sw.stop().     System.out.println(sw.prettyPrint()).     return sw.getLastTaskTimeMillis(). }
false;private;3;20;;private long testBeforeAdviceWithoutJoinPoint(String file, int howmany, String technology) {     ClassPathXmlApplicationContext bf = new ClassPathXmlApplicationContext(file, CLASS).     StopWatch sw = new StopWatch().     sw.start(howmany + " repeated before advice invocations with " + technology).     ITestBean adrian = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian)).     Advised a = (Advised) adrian.     assertTrue(a.getAdvisors().length >= 3).     assertEquals("adrian", adrian.getName()).     for (int i = 0. i < howmany. i++) {         adrian.getName().     }     sw.stop().     System.out.println(sw.prettyPrint()).     return sw.getLastTaskTimeMillis(). }
false;private;3;21;;private long testAfterReturningAdviceWithoutJoinPoint(String file, int howmany, String technology) {     ClassPathXmlApplicationContext bf = new ClassPathXmlApplicationContext(file, CLASS).     StopWatch sw = new StopWatch().     sw.start(howmany + " repeated after returning advice invocations with " + technology).     ITestBean adrian = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian)).     Advised a = (Advised) adrian.     assertTrue(a.getAdvisors().length >= 3).     // Hits joinpoint     adrian.setAge(25).     for (int i = 0. i < howmany. i++) {         adrian.setAge(i).     }     sw.stop().     System.out.println(sw.prettyPrint()).     return sw.getLastTaskTimeMillis(). }
false;private;3;27;;private long testMix(String file, int howmany, String technology) {     ClassPathXmlApplicationContext bf = new ClassPathXmlApplicationContext(file, CLASS).     StopWatch sw = new StopWatch().     sw.start(howmany + " repeated mixed invocations with " + technology).     ITestBean adrian = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian)).     Advised a = (Advised) adrian.     assertTrue(a.getAdvisors().length >= 3).     for (int i = 0. i < howmany. i++) {         // Hit all 3 joinpoints         adrian.getAge().         adrian.getName().         adrian.setAge(i).         // Invoke three non-advised methods         adrian.getDoctor().         adrian.getLawyer().         adrian.getSpouse().     }     sw.stop().     System.out.println(sw.prettyPrint()).     return sw.getLastTaskTimeMillis(). }
false;public;1;3;;public void setMultiple(int multiple) {     this.multiple = multiple. }
false;public;0;3;;public int getMultiple() {     return this.multiple. }
false;public;1;6;;@Override public Object invoke(MethodInvocation mi) throws Throwable {     ++invocations.     int result = (Integer) mi.proceed().     return result * this.multiple. }
false;public;4;4;;@Override public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {     ++afterTakesInt. }
false;public;2;5;;@Override public boolean matches(Method method, Class<?> targetClass) {     return method.getParameterCount() == 1 && method.getParameterTypes()[0].equals(Integer.class). }
false;public,static;0;11;;public static Advisor advisor() {     return new DefaultPointcutAdvisor(new StaticMethodMatcherPointcut() {          @Override         public boolean matches(Method method, Class<?> targetClass) {             return method.getParameterCount() == 1 && method.getParameterTypes()[0].equals(Integer.class).         }     }, new TraceAfterReturningAdvice()). }
false;public;0;4;;@Before("execution(String *.*(..))") public void traceWithoutJoinPoint() {     ++beforeStringReturn. }
false;public;0;4;;@AfterReturning("execution(void *.*(int))") public void traceWithoutJoinPoint2() {     ++afterTakesInt. }
false;public;3;4;;@Override public void before(Method method, Object[] args, Object target) throws Throwable {     ++beforeStringReturn. }
false;public;2;4;;@Override public boolean matches(Method method, Class<?> targetClass) {     return method.getReturnType().equals(String.class). }
false;public,static;0;10;;public static Advisor advisor() {     return new DefaultPointcutAdvisor(new StaticMethodMatcherPointcut() {          @Override         public boolean matches(Method method, Class<?> targetClass) {             return method.getReturnType().equals(String.class).         }     }, new TraceBeforeAdvice()). }
