commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void withJdkProxy() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithJdkProxy.class).     aspectIsApplied(ctx).     assertThat(AopUtils.isJdkDynamicProxy(ctx.getBean(FooService.class)), is(true)). }
false;public;0;7;;@Test public void withCglibProxy() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithCglibProxy.class).     aspectIsApplied(ctx).     assertThat(AopUtils.isCglibProxy(ctx.getBean(FooService.class)), is(true)). }
false;public;0;7;;@Test public void withExposedProxy() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithExposedProxy.class).     aspectIsApplied(ctx).     assertThat(AopUtils.isJdkDynamicProxy(ctx.getBean(FooService.class)), is(true)). }
false;private;1;16;;private void aspectIsApplied(ApplicationContext ctx) {     FooService fooService = ctx.getBean(FooService.class).     ServiceInvocationCounter counter = ctx.getBean(ServiceInvocationCounter.class).     assertEquals(0, counter.getCount()).     assertTrue(fooService.isInitCalled()).     assertEquals(1, counter.getCount()).     String value = fooService.foo(1).     assertEquals("bar", value).     assertEquals(2, counter.getCount()).     fooService.foo(1).     assertEquals(3, counter.getCount()). }
false;public;0;11;;@Test public void withAnnotationOnArgumentAndJdkProxy() {     ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithJdkProxy.class, SampleService.class, LoggingAspect.class).     SampleService sampleService = ctx.getBean(SampleService.class).     sampleService.execute(new SampleDto()).     sampleService.execute(new SampleInputBean()).     sampleService.execute((SampleDto) null).     sampleService.execute((SampleInputBean) null). }
false;public;0;11;;@Test public void withAnnotationOnArgumentAndCglibProxy() {     ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithCglibProxy.class, SampleService.class, LoggingAspect.class).     SampleService sampleService = ctx.getBean(SampleService.class).     sampleService.execute(new SampleDto()).     sampleService.execute(new SampleInputBean()).     sampleService.execute((SampleDto) null).     sampleService.execute((SampleInputBean) null). }
false;public;1;5;;@Override public String foo(int id) {     assertNotNull(AopContext.currentProxy()).     return super.foo(id). }
false;protected;0;4;;@Override protected FooDao fooDao() {     return context.getBean(FooDao.class). }
false;public;1;14;;@Bean public FooService fooServiceImpl(final ApplicationContext context) {     return new FooServiceImpl() {          @Override         public String foo(int id) {             assertNotNull(AopContext.currentProxy()).             return super.foo(id).         }          @Override         protected FooDao fooDao() {             return context.getBean(FooDao.class).         }     }. }
true;public;1;2;// Not matched method on {@link LoggingAspect}. ;// Not matched method on {@link LoggingAspect}. public void execute(SampleInputBean inputBean) { }
true;public;1;2;// Matched method on {@link LoggingAspect} ;// Matched method on {@link LoggingAspect} public void execute(SampleDto dto) { }
false;public;0;3;;@Before("@args(org.springframework.context.annotation.EnableAspectJAutoProxyTests.Loggable))") public void loggingBeginByAtArgs() { }
