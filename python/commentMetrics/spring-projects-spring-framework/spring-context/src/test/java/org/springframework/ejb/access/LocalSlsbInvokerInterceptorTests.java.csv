commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * Test that it performs the correct lookup.  */ ;/**  * Test that it performs the correct lookup.  */ @Test public void testPerformsLookup() throws Exception {     LocalInterfaceWithBusinessMethods ejb = mock(LocalInterfaceWithBusinessMethods.class).     String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     configuredInterceptor(mockContext, jndiName).     verify(mockContext).close(). }
false;public;1;5;;@Override public Object lookup(String name) throws NamingException {     assertTrue(jndiName.equals(name)).     throw nex. }
false;public;0;25;;@Test public void testLookupFailure() throws Exception {     final NamingException nex = new NamingException().     final String jndiName = "foobar".     JndiTemplate jt = new JndiTemplate() {          @Override         public Object lookup(String name) throws NamingException {             assertTrue(jndiName.equals(name)).             throw nex.         }     }.     LocalSlsbInvokerInterceptor si = new LocalSlsbInvokerInterceptor().     si.setJndiName("foobar").     // default resourceRef=false should cause this to fail, as java:/comp/env will not     // automatically be added     si.setJndiTemplate(jt).     try {         si.afterPropertiesSet().         fail("Should have failed with naming exception").     } catch (NamingException ex) {         assertTrue(ex == nex).     } }
false;public;0;20;;@Test public void testInvokesMethodOnEjbInstance() throws Exception {     Object retVal = new Object().     LocalInterfaceWithBusinessMethods ejb = mock(LocalInterfaceWithBusinessMethods.class).     given(ejb.targetMethod()).willReturn(retVal).     String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     LocalSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     ProxyFactory pf = new ProxyFactory(new Class<?>[] { BusinessMethods.class }).     pf.addAdvice(si).     BusinessMethods target = (BusinessMethods) pf.getProxy().     assertTrue(target.targetMethod() == retVal).     verify(mockContext).close().     verify(ejb).remove(). }
false;public;0;20;;@Test public void testInvokesMethodOnEjbInstanceWithSeparateBusinessMethods() throws Exception {     Object retVal = new Object().     LocalInterface ejb = mock(LocalInterface.class).     given(ejb.targetMethod()).willReturn(retVal).     String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     LocalSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     ProxyFactory pf = new ProxyFactory(new Class<?>[] { BusinessMethods.class }).     pf.addAdvice(si).     BusinessMethods target = (BusinessMethods) pf.getProxy().     assertTrue(target.targetMethod() == retVal).     verify(mockContext).close().     verify(ejb).remove(). }
false;private;1;23;;private void testException(Exception expected) throws Exception {     LocalInterfaceWithBusinessMethods ejb = mock(LocalInterfaceWithBusinessMethods.class).     given(ejb.targetMethod()).willThrow(expected).     String jndiName = "foobar".     Context mockContext = mockContext(jndiName, ejb).     LocalSlsbInvokerInterceptor si = configuredInterceptor(mockContext, jndiName).     ProxyFactory pf = new ProxyFactory(new Class<?>[] { LocalInterfaceWithBusinessMethods.class }).     pf.addAdvice(si).     LocalInterfaceWithBusinessMethods target = (LocalInterfaceWithBusinessMethods) pf.getProxy().     try {         target.targetMethod().         fail("Should have thrown exception").     } catch (Exception thrown) {         assertTrue(thrown == expected).     }     verify(mockContext).close(). }
false;public;0;4;;@Test public void testApplicationException() throws Exception {     testException(new ApplicationException()). }
false;protected;2;8;;protected Context mockContext(final String jndiName, final Object ejbInstance) throws Exception {     SlsbHome mockHome = mock(SlsbHome.class).     given(mockHome.create()).willReturn((LocalInterface) ejbInstance).     Context mockCtx = mock(Context.class).     given(mockCtx.lookup("java:comp/env/" + jndiName)).willReturn(mockHome).     return mockCtx. }
false;protected;0;4;;@Override protected Context createInitialContext() throws NamingException {     return mockCtx. }
false;protected;2;16;;protected LocalSlsbInvokerInterceptor configuredInterceptor(final Context mockCtx, final String jndiName) throws Exception {     LocalSlsbInvokerInterceptor si = new LocalSlsbInvokerInterceptor().     si.setJndiTemplate(new JndiTemplate() {          @Override         protected Context createInitialContext() throws NamingException {             return mockCtx.         }     }).     si.setJndiName(jndiName).     si.setResourceRef(true).     si.afterPropertiesSet().     return si. }
false;;0;1;;LocalInterface create() throws CreateException.
false;;0;1;;Object targetMethod() throws ApplicationException.
false;;0;1;;Object targetMethod() throws ApplicationException.
