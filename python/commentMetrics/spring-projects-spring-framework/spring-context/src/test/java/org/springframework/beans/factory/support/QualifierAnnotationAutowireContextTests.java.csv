# id;timestamp;commentText;codeText;commentWords;codeWords
QualifierAnnotationAutowireContextTests -> @Test 	@Ignore("Disabled until SPR-14058 is resolved") 	public void autowiredFieldResolutionIgnoresEmptyQualifierFromComposedQualifierAnnotation();1458062039;@see SpringBean;@Test_	@Ignore("Disabled until SPR-14058 is resolved")_	public void autowiredFieldResolutionIgnoresEmptyQualifierFromComposedQualifierAnnotation() {_		GenericApplicationContext context = new GenericApplicationContext()__		ConstructorArgumentValues cavs1 = new ConstructorArgumentValues()__		cavs1.addGenericArgumentValue(SAM)__		RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null)__		context.registerBeanDefinition(SAM, person1)__		context.registerBeanDefinition("autowired", new RootBeanDefinition(ComposedAnnotationQualifiedFieldTestBean.class))__		AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__		context.refresh()__		ComposedAnnotationQualifiedFieldTestBean bean = context.getBean(ComposedAnnotationQualifiedFieldTestBean.class)__		assertEquals(SAM, bean.getPerson().getName())__	};see,spring,bean;test,ignore,disabled,until,spr,14058,is,resolved,public,void,autowired,field,resolution,ignores,empty,qualifier,from,composed,qualifier,annotation,generic,application,context,context,new,generic,application,context,constructor,argument,values,cavs1,new,constructor,argument,values,cavs1,add,generic,argument,value,sam,root,bean,definition,person1,new,root,bean,definition,person,class,cavs1,null,context,register,bean,definition,sam,person1,context,register,bean,definition,autowired,new,root,bean,definition,composed,annotation,qualified,field,test,bean,class,annotation,config,utils,register,annotation,config,processors,context,context,refresh,composed,annotation,qualified,field,test,bean,bean,context,get,bean,composed,annotation,qualified,field,test,bean,class,assert,equals,sam,bean,get,person,get,name
QualifierAnnotationAutowireContextTests -> @Test 	@Ignore("Disabled until SPR-14058 is resolved") 	public void autowiredFieldResolutionIgnoresEmptyQualifierFromComposedQualifierAnnotation();1458062270;@see SpringBean;@Test_	@Ignore("Disabled until SPR-14058 is resolved")_	public void autowiredFieldResolutionIgnoresEmptyQualifierFromComposedQualifierAnnotation() {_		GenericApplicationContext context = new GenericApplicationContext()__		ConstructorArgumentValues cavs1 = new ConstructorArgumentValues()__		cavs1.addGenericArgumentValue(SAM)__		RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null)__		context.registerBeanDefinition(SAM, person1)__		context.registerBeanDefinition("autowired", new RootBeanDefinition(ComposedAnnotationQualifiedFieldTestBean.class))__		AnnotationConfigUtils.registerAnnotationConfigProcessors(context)__		context.refresh()__		ComposedAnnotationQualifiedFieldTestBean bean = context.getBean(ComposedAnnotationQualifiedFieldTestBean.class)__		assertEquals(SAM, bean.getPerson().getName())__	};see,spring,bean;test,ignore,disabled,until,spr,14058,is,resolved,public,void,autowired,field,resolution,ignores,empty,qualifier,from,composed,qualifier,annotation,generic,application,context,context,new,generic,application,context,constructor,argument,values,cavs1,new,constructor,argument,values,cavs1,add,generic,argument,value,sam,root,bean,definition,person1,new,root,bean,definition,person,class,cavs1,null,context,register,bean,definition,sam,person1,context,register,bean,definition,autowired,new,root,bean,definition,composed,annotation,qualified,field,test,bean,class,annotation,config,utils,register,annotation,config,processors,context,context,refresh,composed,annotation,qualified,field,test,bean,bean,context,get,bean,composed,annotation,qualified,field,test,bean,class,assert,equals,sam,bean,get,person,get,name
