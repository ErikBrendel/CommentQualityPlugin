commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void autowiredFieldWithSingleNonQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;19;;@Test public void autowiredMethodParameterWithSingleNonQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedMethodParameterTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;19;;@Test public void autowiredConstructorArgumentWithSingleNonQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedConstructorArgumentTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e instanceof UnsatisfiedDependencyException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;14;;@Test public void autowiredFieldWithSingleQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     person.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldTestBean bean = (QualifiedFieldTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;16;;@Test public void autowiredMethodParameterWithSingleQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     person.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedMethodParameterTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedMethodParameterTestBean bean = (QualifiedMethodParameterTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;16;;@Test public void autowiredMethodParameterWithStaticallyQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(QualifiedPerson.class, cavs, null).     context.registerBeanDefinition(JUERGEN, ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(person, JUERGEN), context, true).getBeanDefinition()).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedMethodParameterTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedMethodParameterTestBean bean = (QualifiedMethodParameterTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;19;;@Test public void autowiredMethodParameterWithStaticallyQualifiedCandidateAmongOthers() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(QualifiedPerson.class, cavs, null).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(DefaultValueQualifiedPerson.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedMethodParameterTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedMethodParameterTestBean bean = (QualifiedMethodParameterTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;16;;@Test public void autowiredConstructorArgumentWithSingleQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs = new ConstructorArgumentValues().     cavs.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null).     person.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     context.registerBeanDefinition(JUERGEN, person).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedConstructorArgumentTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedConstructorArgumentTestBean bean = (QualifiedConstructorArgumentTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;23;;@Test public void autowiredFieldWithMultipleNonQualifiedCandidates() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;23;;@Test public void autowiredMethodParameterWithMultipleNonQualifiedCandidates() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedMethodParameterTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;23;;@Test public void autowiredConstructorArgumentWithMultipleNonQualifiedCandidates() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedConstructorArgumentTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e instanceof UnsatisfiedDependencyException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;19;;@Test public void autowiredFieldResolvesQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldTestBean bean = (QualifiedFieldTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;19;;@Test public void autowiredFieldResolvesMetaQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(MetaQualifiedFieldTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     MetaQualifiedFieldTestBean bean = (MetaQualifiedFieldTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;20;;@Test public void autowiredMethodParameterResolvesQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedMethodParameterTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedMethodParameterTestBean bean = (QualifiedMethodParameterTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;20;;@Test public void autowiredConstructorArgumentResolvesQualifiedCandidate() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class)).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedConstructorArgumentTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedConstructorArgumentTestBean bean = (QualifiedConstructorArgumentTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;21;;@Test public void autowiredFieldResolvesQualifiedCandidateWithDefaultValueAndNoValueOnBeanDefinition() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     // qualifier added, but includes no value     person1.addQualifier(new AutowireCandidateQualifier(TestQualifierWithDefaultValue.class)).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithDefaultValueTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldWithDefaultValueTestBean bean = (QualifiedFieldWithDefaultValueTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;25;;@Test public void autowiredFieldDoesNotResolveCandidateWithDefaultValueAndConflictingValueOnBeanDefinition() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     // qualifier added, and non-default value specified     person1.addQualifier(new AutowireCandidateQualifier(TestQualifierWithDefaultValue.class, "not the default")).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithDefaultValueTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;21;;@Test public void autowiredFieldResolvesWithDefaultValueAndExplicitDefaultValueOnBeanDefinition() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     // qualifier added, and value matches the default     person1.addQualifier(new AutowireCandidateQualifier(TestQualifierWithDefaultValue.class, "default")).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithDefaultValueTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldWithDefaultValueTestBean bean = (QualifiedFieldWithDefaultValueTestBean) context.getBean("autowired").     assertEquals(JUERGEN, bean.getPerson().getName()). }
false;public;0;25;;@Test public void autowiredFieldResolvesWithMultipleQualifierValues() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier.setAttribute("number", 456).     person1.addQualifier(qualifier).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     AutowireCandidateQualifier qualifier2 = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier2.setAttribute("number", 123).     person2.addQualifier(qualifier2).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithMultipleAttributesTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldWithMultipleAttributesTestBean bean = (QualifiedFieldWithMultipleAttributesTestBean) context.getBean("autowired").     assertEquals(MARK, bean.getPerson().getName()). }
false;public;0;30;;@Test public void autowiredFieldDoesNotResolveWithMultipleQualifierValuesAndConflictingDefaultValue() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier.setAttribute("number", 456).     person1.addQualifier(qualifier).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     AutowireCandidateQualifier qualifier2 = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier2.setAttribute("number", 123).     qualifier2.setAttribute("value", "not the default").     person2.addQualifier(qualifier2).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithMultipleAttributesTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;26;;@Test public void autowiredFieldResolvesWithMultipleQualifierValuesAndExplicitDefaultValue() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier.setAttribute("number", 456).     person1.addQualifier(qualifier).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     AutowireCandidateQualifier qualifier2 = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier2.setAttribute("number", 123).     qualifier2.setAttribute("value", "default").     person2.addQualifier(qualifier2).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithMultipleAttributesTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldWithMultipleAttributesTestBean bean = (QualifiedFieldWithMultipleAttributesTestBean) context.getBean("autowired").     assertEquals(MARK, bean.getPerson().getName()). }
false;public;0;30;;@Test public void autowiredFieldDoesNotResolveWithMultipleQualifierValuesAndMultipleMatchingCandidates() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     AutowireCandidateQualifier qualifier = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier.setAttribute("number", 123).     person1.addQualifier(qualifier).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     AutowireCandidateQualifier qualifier2 = new AutowireCandidateQualifier(TestQualifierWithMultipleAttributes.class).     qualifier2.setAttribute("number", 123).     qualifier2.setAttribute("value", "default").     person2.addQualifier(qualifier2).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithMultipleAttributesTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;20;;@Test public void autowiredFieldResolvesWithBaseQualifierAndDefaultValue() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue(JUERGEN).     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue(MARK).     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     person2.addQualifier(new AutowireCandidateQualifier(Qualifier.class)).     context.registerBeanDefinition(JUERGEN, person1).     context.registerBeanDefinition(MARK, person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedFieldWithBaseQualifierDefaultValueTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedFieldWithBaseQualifierDefaultValueTestBean bean = (QualifiedFieldWithBaseQualifierDefaultValueTestBean) context.getBean("autowired").     assertEquals(MARK, bean.getPerson().getName()). }
false;public;0;21;;@Test public void autowiredFieldResolvesWithBaseQualifierAndNonDefaultValue() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue("the real juergen").     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "juergen")).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue("juergen imposter").     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     person2.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "not really juergen")).     context.registerBeanDefinition("juergen1", person1).     context.registerBeanDefinition("juergen2", person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     context.refresh().     QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean bean = (QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean) context.getBean("autowired").     assertEquals("the real juergen", bean.getPerson().getName()). }
false;public;0;25;;@Test public void autowiredFieldDoesNotResolveWithBaseQualifierAndNonDefaultValueAndMultipleMatchingCandidates() {     GenericApplicationContext context = new GenericApplicationContext().     ConstructorArgumentValues cavs1 = new ConstructorArgumentValues().     cavs1.addGenericArgumentValue("the real juergen").     RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null).     person1.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "juergen")).     ConstructorArgumentValues cavs2 = new ConstructorArgumentValues().     cavs2.addGenericArgumentValue("juergen imposter").     RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null).     person2.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "juergen")).     context.registerBeanDefinition("juergen1", person1).     context.registerBeanDefinition("juergen2", person2).     context.registerBeanDefinition("autowired", new RootBeanDefinition(QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean.class)).     AnnotationConfigUtils.registerAnnotationConfigProcessors(context).     try {         context.refresh().         fail("expected BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e instanceof UnsatisfiedDependencyException).         assertEquals("autowired", e.getBeanName()).     } }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;1;4;;@Autowired public void setPerson(@TestQualifier Person person) {     this.person = person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;0;3;;public String getName() {     return this.name. }
