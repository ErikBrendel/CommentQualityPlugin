commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.context = new ClassPathXmlApplicationContext(getClass().getSimpleName() + "-context.xml", getClass()). }
false;protected;0;3;;protected ITestBean getTestBean() {     return (ITestBean) this.context.getBean("testBean"). }
false;public;0;12;;@Test public void testIsProxy() throws Exception {     ITestBean bean = getTestBean().     assertTrue("Bean is not a proxy", AopUtils.isAopProxy(bean)).     // check the advice details     Advised advised = (Advised) bean.     Advisor[] advisors = advised.getAdvisors().     assertTrue("Advisors should not be empty", advisors.length > 0). }
false;public;0;20;;@Test public void testAdviceInvokedCorrectly() throws Exception {     CountingBeforeAdvice getAgeCounter = (CountingBeforeAdvice) this.context.getBean("getAgeCounter").     CountingBeforeAdvice getNameCounter = (CountingBeforeAdvice) this.context.getBean("getNameCounter").     ITestBean bean = getTestBean().     assertEquals("Incorrect initial getAge count", 0, getAgeCounter.getCalls("getAge")).     assertEquals("Incorrect initial getName count", 0, getNameCounter.getCalls("getName")).     bean.getAge().     assertEquals("Incorrect getAge count on getAge counter", 1, getAgeCounter.getCalls("getAge")).     assertEquals("Incorrect getAge count on getName counter", 0, getNameCounter.getCalls("getAge")).     bean.getName().     assertEquals("Incorrect getName count on getName counter", 1, getNameCounter.getCalls("getName")).     assertEquals("Incorrect getName count on getAge counter", 0, getAgeCounter.getCalls("getName")). }
false;public;0;19;;@Test public void testAspectApplied() throws Exception {     ITestBean bean = getTestBean().     CountingAspectJAdvice advice = (CountingAspectJAdvice) this.context.getBean("countingAdvice").     assertEquals("Incorrect before count", 0, advice.getBeforeCount()).     assertEquals("Incorrect after count", 0, advice.getAfterCount()).     bean.setName("Sally").     assertEquals("Incorrect before count", 1, advice.getBeforeCount()).     assertEquals("Incorrect after count", 1, advice.getAfterCount()).     bean.getName().     assertEquals("Incorrect before count", 1, advice.getBeforeCount()).     assertEquals("Incorrect after count", 1, advice.getAfterCount()). }
false;public;0;19;;@Test public void testAspectAppliedForInitializeBeanWithEmptyName() {     ITestBean bean = (ITestBean) this.context.getAutowireCapableBeanFactory().initializeBean(new TestBean(), "").     CountingAspectJAdvice advice = (CountingAspectJAdvice) this.context.getBean("countingAdvice").     assertEquals("Incorrect before count", 0, advice.getBeforeCount()).     assertEquals("Incorrect after count", 0, advice.getAfterCount()).     bean.setName("Sally").     assertEquals("Incorrect before count", 1, advice.getBeforeCount()).     assertEquals("Incorrect after count", 1, advice.getAfterCount()).     bean.getName().     assertEquals("Incorrect before count", 1, advice.getBeforeCount()).     assertEquals("Incorrect after count", 1, advice.getAfterCount()). }
false;public;0;19;;@Test public void testAspectAppliedForInitializeBeanWithNullName() {     ITestBean bean = (ITestBean) this.context.getAutowireCapableBeanFactory().initializeBean(new TestBean(), null).     CountingAspectJAdvice advice = (CountingAspectJAdvice) this.context.getBean("countingAdvice").     assertEquals("Incorrect before count", 0, advice.getBeforeCount()).     assertEquals("Incorrect after count", 0, advice.getAfterCount()).     bean.setName("Sally").     assertEquals("Incorrect before count", 1, advice.getBeforeCount()).     assertEquals("Incorrect after count", 1, advice.getAfterCount()).     bean.getName().     assertEquals("Incorrect before count", 1, advice.getBeforeCount()).     assertEquals("Incorrect after count", 1, advice.getAfterCount()). }
false;public;0;3;;public void myBeforeAdvice() throws Throwable {     this.beforeCount++. }
false;public;0;3;;public void myAfterAdvice() throws Throwable {     this.afterCount++. }
false;public;1;4;;public void myAroundAdvice(ProceedingJoinPoint pjp) throws Throwable {     this.aroundCount++.     pjp.proceed(). }
false;public;1;3;;public void myAfterReturningAdvice(int age) {     this.afterCount++. }
false;public;1;3;;public void myAfterThrowingAdvice(RuntimeException ex) {     this.afterCount++. }
false;public;2;3;;public void mySetAgeAdvice(int newAge, ITestBean bean) { // no-op }
false;public;0;3;;public int getBeforeCount() {     return this.beforeCount. }
false;public;0;3;;public int getAfterCount() {     return this.afterCount. }
false;public;0;3;;public int getAroundCount() {     return this.aroundCount. }
