commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public void onSetUp() throws Exception {     target = new JmxTestBean().     target.setAge(100).     target.setName("Rob Harrop").     MBeanExporter adapter = new MBeanExporter().     Map<String, Object> beans = new HashMap<>().     beans.put(OBJECT_NAME, target).     adapter.setServer(getServer()).     adapter.setBeans(beans).     adapter.setAssembler(new ProxyTestAssembler()).     start(adapter). }
false;protected;0;3;;protected MBeanServerConnection getServerConnection() throws Exception {     return getServer(). }
false;protected;0;8;;protected IJmxTestBean getProxy() throws Exception {     MBeanProxyFactoryBean factory = new MBeanProxyFactoryBean().     factory.setServer(getServerConnection()).     factory.setProxyInterface(IJmxTestBean.class).     factory.setObjectName(OBJECT_NAME).     factory.afterPropertiesSet().     return (IJmxTestBean) factory.getObject(). }
false;public;0;6;;@Test public void testProxyClassIsDifferent() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     assertTrue("The proxy class should be different than the base class", (proxy.getClass() != IJmxTestBean.class)). }
false;public;0;9;;@Test public void testDifferentProxiesSameClass() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy1 = getProxy().     IJmxTestBean proxy2 = getProxy().     assertNotSame("The proxies should NOT be the same", proxy1, proxy2).     assertSame("The proxy classes should be the same", proxy1.getClass(), proxy2.getClass()). }
false;public;0;7;;@Test public void testGetAttributeValue() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy1 = getProxy().     int age = proxy1.getAge().     assertEquals("The age should be 100", 100, age). }
false;public;0;7;;@Test public void testSetAttributeValue() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     proxy.setName("Rob Harrop").     assertEquals("The name of the bean should have been updated", "Rob Harrop", target.getName()). }
false;public;0;6;;@Test(expected = IllegalArgumentException.class) public void testSetAttributeValueWithRuntimeException() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     proxy.setName("Juergen"). }
false;public;0;6;;@Test(expected = ClassNotFoundException.class) public void testSetAttributeValueWithCheckedException() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     proxy.setName("Juergen Class"). }
false;public;0;6;;@Test(expected = IOException.class) public void testSetAttributeValueWithIOException() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     proxy.setName("Juergen IO"). }
false;public;0;6;;@Test(expected = InvalidInvocationException.class) public void testSetReadOnlyAttribute() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     proxy.setAge(900). }
false;public;0;7;;@Test public void testInvokeNoArgs() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     long result = proxy.myOperation().     assertEquals("The operation should return 1", 1, result). }
false;public;0;7;;@Test public void testInvokeArgs() throws Exception {     assumeTrue(runTests).     IJmxTestBean proxy = getProxy().     int result = proxy.add(1, 2).     assertEquals("The operation should return 3", 3, result). }
false;public;0;6;;@Test(expected = InvalidInvocationException.class) public void testInvokeUnexposedMethodWithException() throws Exception {     assumeTrue(runTests).     IJmxTestBean bean = getProxy().     bean.dontExposeMe(). }
false;public;0;58;;@Test public void testTestLazyConnectionToRemote() throws Exception {     assumeTrue(runTests).     Assume.group(TestGroup.JMXMP).     final int port = SocketUtils.findAvailableTcpPort().     JMXServiceURL url = new JMXServiceURL("service:jmx:jmxmp://localhost:" + port).     JMXConnectorServer connector = JMXConnectorServerFactory.newJMXConnectorServer(url, null, getServer()).     MBeanProxyFactoryBean factory = new MBeanProxyFactoryBean().     factory.setServiceUrl(url.toString()).     factory.setProxyInterface(IJmxTestBean.class).     factory.setObjectName(OBJECT_NAME).     factory.setConnectOnStartup(false).     factory.setRefreshOnConnectFailure(true).     // should skip connection to the server     factory.afterPropertiesSet().     IJmxTestBean bean = (IJmxTestBean) factory.getObject().     // now start the connector     try {         connector.start().     } catch (BindException ex) {         System.out.println("Skipping remainder of JMX LazyConnectionToRemote test because binding to local port [" + port + "] failed: " + ex.getMessage()).         return.     }     // should now be able to access data via the lazy proxy     try {         assertEquals("Rob Harrop", bean.getName()).         assertEquals(100, bean.getAge()).     } finally {         connector.stop().     }     try {         bean.getName().     } catch (JmxException ex) {     // expected     }     connector = JMXConnectorServerFactory.newJMXConnectorServer(url, null, getServer()).     connector.start().     // should now be able to access data via the lazy proxy     try {         assertEquals("Rob Harrop", bean.getName()).         assertEquals(100, bean.getAge()).     } finally {         connector.stop().     } }
false;protected;2;4;;@Override protected boolean includeReadAttribute(Method method, String beanKey) {     return true. }
false;protected;2;7;;@Override protected boolean includeWriteAttribute(Method method, String beanKey) {     if ("setAge".equals(method.getName())) {         return false.     }     return true. }
false;protected;2;7;;@Override protected boolean includeOperation(Method method, String beanKey) {     if ("dontExposeMe".equals(method.getName())) {         return false.     }     return true. }
false;protected;1;4;;@SuppressWarnings("unused") protected String getOperationDescription(Method method) {     return method.getName(). }
false;protected;1;4;;@SuppressWarnings("unused") protected String getAttributeDescription(PropertyDescriptor propertyDescriptor) {     return propertyDescriptor.getDisplayName(). }
false;protected;3;4;;@SuppressWarnings("unused") protected void populateAttributeDescriptor(Descriptor descriptor, Method getter, Method setter) { }
false;protected;2;4;;@SuppressWarnings("unused") protected void populateOperationDescriptor(Descriptor descriptor, Method method) { }
false;protected;2;4;;@SuppressWarnings({ "unused", "rawtypes" }) protected String getDescription(String beanKey, Class beanClass) {     return "". }
false;protected;3;4;;@SuppressWarnings({ "unused", "rawtypes" }) protected void populateMBeanDescriptor(Descriptor mbeanDescriptor, String beanKey, Class beanClass) { }
