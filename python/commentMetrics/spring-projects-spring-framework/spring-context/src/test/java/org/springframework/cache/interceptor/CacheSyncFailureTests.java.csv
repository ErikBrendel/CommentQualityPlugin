commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() {     this.context = new AnnotationConfigApplicationContext(Config.class).     this.simpleService = this.context.getBean(SimpleService.class). }
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void unlessSync() {     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("@Cacheable(sync=true) does not support unless attribute").     this.simpleService.unlessSync("key"). }
false;public;0;6;;@Test public void severalCachesSync() {     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("@Cacheable(sync=true) only allows a single cache").     this.simpleService.severalCachesSync("key"). }
false;public;0;6;;@Test public void severalCachesWithResolvedSync() {     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("@Cacheable(sync=true) only allows a single cache").     this.simpleService.severalCachesWithResolvedSync("key"). }
false;public;0;6;;@Test public void syncWithAnotherOperation() {     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("@Cacheable(sync=true) cannot be combined with other cache operations").     this.simpleService.syncWithAnotherOperation("key"). }
false;public;0;6;;@Test public void syncWithTwoGetOperations() {     this.thrown.expect(IllegalStateException.class).     this.thrown.expectMessage("Only one @Cacheable(sync=true) entry is allowed").     this.simpleService.syncWithTwoGetOperations("key"). }
false;public;1;4;;@Cacheable(cacheNames = "testCache", sync = true, unless = "#result > 10") public Object unlessSync(Object arg1) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@Cacheable(cacheNames = { "testCache", "anotherTestCache" }, sync = true) public Object severalCachesSync(Object arg1) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@Cacheable(cacheResolver = "testCacheResolver", sync = true) public Object severalCachesWithResolvedSync(Object arg1) {     return this.counter.getAndIncrement(). }
false;public;1;5;;@Cacheable(cacheNames = "testCache", sync = true) @CacheEvict(cacheNames = "anotherTestCache", key = "#arg1") public Object syncWithAnotherOperation(Object arg1) {     return this.counter.getAndIncrement(). }
false;public;1;7;;@Caching(cacheable = { @Cacheable(cacheNames = "testCache", sync = true), @Cacheable(cacheNames = "anotherTestCache", sync = true) }) public Object syncWithTwoGetOperations(Object arg1) {     return this.counter.getAndIncrement(). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return CacheTestUtils.createSimpleCacheManager("testCache", "anotherTestCache"). }
false;public;0;4;;@Bean public CacheResolver testCacheResolver() {     return new NamedCacheResolver(cacheManager(), "testCache", "anotherTestCache"). }
false;public;0;4;;@Bean public SimpleService simpleService() {     return new SimpleService(). }
