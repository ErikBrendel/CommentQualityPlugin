commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testStandard() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(StandardConfig.class, StandardPojo.class).     assertFalse(ctx.getBeanFactory().containsSingleton("testBean1")).     StandardPojo pojo = ctx.getBean(StandardPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")).     assertThat(pojo.testBean2.getName(), equalTo("boring")). }
false;public;0;9;;@Test public void testScoped() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ScopedConfig.class, StandardPojo.class).     assertFalse(ctx.getBeanFactory().containsSingleton("testBean1")).     StandardPojo pojo = ctx.getBean(StandardPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")).     assertThat(pojo.testBean2.getName(), equalTo("boring")). }
false;public;0;9;;@Test public void testScopedProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ScopedProxyConfig.class, StandardPojo.class).     // a shared scoped proxy     assertTrue(ctx.getBeanFactory().containsSingleton("testBean1")).     StandardPojo pojo = ctx.getBean(StandardPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")).     assertThat(pojo.testBean2.getName(), equalTo("boring")). }
false;public;0;14;;@Test public void testCustomWithLazyResolution() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(CustomConfig.class, CustomPojo.class).     assertFalse(ctx.getBeanFactory().containsSingleton("testBean1")).     assertFalse(ctx.getBeanFactory().containsSingleton("testBean2")).     assertTrue(BeanFactoryAnnotationUtils.isQualifierMatch(value -> value.equals("boring"), "testBean2", ctx.getDefaultListableBeanFactory())).     CustomPojo pojo = ctx.getBean(CustomPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")).     TestBean testBean2 = BeanFactoryAnnotationUtils.qualifiedBeanOfType(ctx.getDefaultListableBeanFactory(), TestBean.class, "boring").     assertThat(testBean2.getName(), equalTo("boring")). }
false;public;0;13;;@Test public void testCustomWithEarlyResolution() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(CustomConfig.class, CustomPojo.class).     ctx.refresh().     assertFalse(ctx.getBeanFactory().containsSingleton("testBean1")).     assertFalse(ctx.getBeanFactory().containsSingleton("testBean2")).     ctx.getBean("testBean2").     assertTrue(BeanFactoryAnnotationUtils.isQualifierMatch(value -> value.equals("boring"), "testBean2", ctx.getDefaultListableBeanFactory())).     CustomPojo pojo = ctx.getBean(CustomPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")). }
false;public;0;13;;@Test public void testCustomWithAsm() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.registerBeanDefinition("customConfig", new RootBeanDefinition(CustomConfig.class.getName())).     RootBeanDefinition customPojo = new RootBeanDefinition(CustomPojo.class.getName()).     customPojo.setLazyInit(true).     ctx.registerBeanDefinition("customPojo", customPojo).     ctx.refresh().     assertFalse(ctx.getBeanFactory().containsSingleton("testBean1")).     assertFalse(ctx.getBeanFactory().containsSingleton("testBean2")).     CustomPojo pojo = ctx.getBean(CustomPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")). }
false;public;0;8;;@Test public void testCustomWithAttributeOverride() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(CustomConfigWithAttributeOverride.class, CustomPojo.class).     assertFalse(ctx.getBeanFactory().containsSingleton("testBeanX")).     CustomPojo pojo = ctx.getBean(CustomPojo.class).     assertThat(pojo.testBean.getName(), equalTo("interesting")). }
false;public;0;4;;@Bean @Qualifier("interesting") @Lazy public TestBean testBean1() {     return new TestBean("interesting"). }
false;public;1;6;;@Bean @Boring public TestBean testBean2(@Lazy TestBean testBean1) {     TestBean tb = new TestBean("boring").     tb.setSpouse(testBean1).     return tb. }
false;public;0;4;;@Bean @Qualifier("interesting") @Scope("prototype") public TestBean testBean1() {     return new TestBean("interesting"). }
false;public;1;6;;@Bean @Boring @Scope("prototype") public TestBean testBean2(TestBean testBean1) {     TestBean tb = new TestBean("boring").     tb.setSpouse(testBean1).     return tb. }
false;public;0;4;;@Bean @Qualifier("interesting") @Scope(value = "prototype", proxyMode = ScopedProxyMode.TARGET_CLASS) public TestBean testBean1() {     return new TestBean("interesting"). }
false;public;1;6;;@Bean @Boring @Scope(value = "prototype", proxyMode = ScopedProxyMode.TARGET_CLASS) public TestBean testBean2(TestBean testBean1) {     TestBean tb = new TestBean("boring").     tb.setSpouse(testBean1).     return tb. }
false;public;0;4;;@InterestingBean public TestBean testBean1() {     return new TestBean("interesting"). }
false;public;1;6;;@Bean @Qualifier("boring") @Lazy public TestBean testBean2(@Lazy TestBean testBean1) {     TestBean tb = new TestBean("boring").     tb.setSpouse(testBean1).     return tb. }
false;public;0;4;;@InterestingBeanWithName(name = "testBeanX") public TestBean testBean1() {     return new TestBean("interesting"). }
false;public;1;6;;@Bean @Qualifier("boring") public TestBean testBean2(@Lazy TestBean testBean1) {     TestBean tb = new TestBean("boring").     tb.setSpouse(testBean1).     return tb. }
