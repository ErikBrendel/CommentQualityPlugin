commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testNonQualifiedFieldFails() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", NonQualifiedTestBean.class).     try {         context.refresh().         fail("Should have thrown a BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getMessage().contains("found 6")).     } }
false;public;0;11;;@Test public void testQualifiedByValue() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByValueTestBean.class).     context.refresh().     QualifiedByValueTestBean testBean = (QualifiedByValueTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("Larry", person.getName()). }
false;public;0;24;;@Test public void testQualifiedByParentValue() {     StaticApplicationContext parent = new StaticApplicationContext().     GenericBeanDefinition parentLarry = new GenericBeanDefinition().     parentLarry.setBeanClass(Person.class).     parentLarry.getPropertyValues().add("name", "ParentLarry").     parentLarry.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "parentLarry")).     parent.registerBeanDefinition("someLarry", parentLarry).     GenericBeanDefinition otherLarry = new GenericBeanDefinition().     otherLarry.setBeanClass(Person.class).     otherLarry.getPropertyValues().add("name", "OtherLarry").     otherLarry.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "otherLarry")).     parent.registerBeanDefinition("someOtherLarry", otherLarry).     parent.refresh().     StaticApplicationContext context = new StaticApplicationContext(parent).     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByParentValueTestBean.class).     context.refresh().     QualifiedByParentValueTestBean testBean = (QualifiedByParentValueTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("ParentLarry", person.getName()). }
false;public;0;12;;@Test public void testQualifiedByBeanName() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByBeanNameTestBean.class).     context.refresh().     QualifiedByBeanNameTestBean testBean = (QualifiedByBeanNameTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("LarryBean", person.getName()).     assertTrue(testBean.myProps != null && testBean.myProps.isEmpty()). }
false;public;0;11;;@Test public void testQualifiedByFieldName() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByFieldNameTestBean.class).     context.refresh().     QualifiedByFieldNameTestBean testBean = (QualifiedByFieldNameTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("LarryBean", person.getName()). }
false;public;0;11;;@Test public void testQualifiedByParameterName() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByParameterNameTestBean.class).     context.refresh().     QualifiedByParameterNameTestBean testBean = (QualifiedByParameterNameTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("LarryBean", person.getName()). }
false;public;0;11;;@Test public void testQualifiedByAlias() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByAliasTestBean.class).     context.refresh().     QualifiedByAliasTestBean testBean = (QualifiedByAliasTestBean) context.getBean("testBean").     Person person = testBean.getStooge().     assertEquals("LarryBean", person.getName()). }
false;public;0;11;;@Test public void testQualifiedByAnnotation() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByAnnotationTestBean.class).     context.refresh().     QualifiedByAnnotationTestBean testBean = (QualifiedByAnnotationTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("LarrySpecial", person.getName()). }
false;public;0;11;;@Test public void testQualifiedByCustomValue() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByCustomValueTestBean.class).     context.refresh().     QualifiedByCustomValueTestBean testBean = (QualifiedByCustomValueTestBean) context.getBean("testBean").     Person person = testBean.getCurly().     assertEquals("Curly", person.getName()). }
false;public;0;11;;@Test public void testQualifiedByAnnotationValue() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByAnnotationValueTestBean.class).     context.refresh().     QualifiedByAnnotationValueTestBean testBean = (QualifiedByAnnotationValueTestBean) context.getBean("testBean").     Person person = testBean.getLarry().     assertEquals("LarrySpecial", person.getName()). }
false;public;0;14;;@Test public void testQualifiedByAttributesFailsWithoutCustomQualifierRegistered() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     context.registerSingleton("testBean", QualifiedByAttributesTestBean.class).     try {         context.refresh().         fail("should have thrown a BeanCreationException").     } catch (BeanCreationException e) {         assertTrue(e.getMessage().contains("found 6")).     } }
false;public;0;16;;@Test public void testQualifiedByAttributesWithCustomQualifierRegistered() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION).     QualifierAnnotationAutowireCandidateResolver resolver = (QualifierAnnotationAutowireCandidateResolver) context.getDefaultListableBeanFactory().getAutowireCandidateResolver().     resolver.addQualifierType(MultipleAttributeQualifier.class).     context.registerSingleton("testBean", MultiQualifierClient.class).     context.refresh().     MultiQualifierClient testBean = (MultiQualifierClient) context.getBean("testBean").     assertNotNull(testBean.factoryTheta).     assertNotNull(testBean.implTheta). }
false;public;0;6;;@Test public void testInterfaceWithOneQualifiedFactoryAndOneQualifiedBean() {     StaticApplicationContext context = new StaticApplicationContext().     BeanDefinitionReader reader = new XmlBeanDefinitionReader(context).     reader.loadBeanDefinitions(CONFIG_LOCATION). }
false;public;0;3;;public Person getAnonymous() {     return anonymous. }
false;public;0;3;;public Person getLarry() {     return larry. }
false;public;0;3;;public Person getLarry() {     return larry. }
false;public;0;3;;public Person getLarry() {     return larry. }
false;public;0;3;;public Person getLarry() {     return larryBean. }
false;public;1;4;;@Autowired public void setLarryBean(Person larryBean) {     this.larryBean = larryBean. }
false;public;0;3;;public Person getLarry() {     return larryBean. }
false;public;0;3;;public Person getStooge() {     return stooge. }
false;public;0;3;;public Person getLarry() {     return larry. }
false;public;0;3;;public Person getCurly() {     return curly. }
false;public;0;3;;public Person getLarry() {     return larry. }
false;public;0;3;;public Person getMoeSenior() {     return moeSenior. }
false;public;0;3;;public Person getMoeJunior() {     return moeJunior. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public Theta getObject() {     return new Theta() {     }. }
false;public;0;4;;@Override public Class<Theta> getObjectType() {     return Theta.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
