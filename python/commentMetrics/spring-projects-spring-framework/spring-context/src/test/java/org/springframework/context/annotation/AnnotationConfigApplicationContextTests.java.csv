commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void scanAndRefresh() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.scan("org.springframework.context.annotation6").     context.refresh().     context.getBean(uncapitalize(ConfigForScanning.class.getSimpleName())).     // contributed by ConfigForScanning     context.getBean("testBean").     context.getBean(uncapitalize(ComponentForScanning.class.getSimpleName())).     context.getBean(uncapitalize(Jsr330NamedForScanning.class.getSimpleName())).     Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class).     assertEquals(1, beans.size()). }
false;public;0;11;;@Test public void registerAndRefresh() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(Config.class, NameConfig.class).     context.refresh().     context.getBean("testBean").     context.getBean("name").     Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class).     assertEquals(2, beans.size()). }
false;public;0;11;;@Test public void getBeansWithAnnotation() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(Config.class, NameConfig.class, UntypedFactoryBean.class).     context.refresh().     context.getBean("testBean").     context.getBean("name").     Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class).     assertEquals(2, beans.size()). }
false;public;0;7;;@Test public void getBeanByType() {     ApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     TestBean testBean = context.getBean(TestBean.class).     assertNotNull(testBean).     assertThat(testBean.name, equalTo("foo")). }
false;public;0;14;;@Test public void getBeanByTypeRaisesNoSuchBeanDefinitionException() {     ApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     // attempt to retrieve a bean that does not exist     Class<?> targetType = Pattern.class.     try {         context.getBean(targetType).         fail("Should have thrown NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {         assertThat(ex.getMessage(), containsString(format("No qualifying bean of type '%s'", targetType.getName()))).     } }
false;public;0;17;;@Test public void getBeanByTypeAmbiguityRaisesException() {     ApplicationContext context = new AnnotationConfigApplicationContext(TwoTestBeanConfig.class).     try {         context.getBean(TestBean.class).     } catch (NoSuchBeanDefinitionException ex) {         assertThat(ex.getMessage(), allOf(containsString("No qualifying bean of type '" + TestBean.class.getName() + "'"), containsString("tb1"), containsString("tb2"))).     } }
true;public;0;8;/**  * Tests that Configuration classes are registered according to convention  * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator#generateBeanName  */ ;/**  * Tests that Configuration classes are registered according to convention  * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator#generateBeanName  */ @Test public void defaultConfigClassBeanNameIsGeneratedProperly() {     ApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     // attempt to retrieve the instance by its generated bean name     Config configObject = (Config) context.getBean("annotationConfigApplicationContextTests.Config").     assertNotNull(configObject). }
true;public;0;8;/**  * Tests that specifying @Configuration(value="foo") results in registering  * the configuration class with bean name 'foo'.  */ ;/**  * Tests that specifying @Configuration(value="foo") results in registering  * the configuration class with bean name 'foo'.  */ @Test public void explicitConfigClassBeanNameIsRespected() {     ApplicationContext context = new AnnotationConfigApplicationContext(ConfigWithCustomName.class).     // attempt to retrieve the instance by its specified name     ConfigWithCustomName configObject = (ConfigWithCustomName) context.getBean("customConfigBeanName").     assertNotNull(configObject). }
false;public;0;5;;@Test public void autowiringIsEnabledByDefault() {     ApplicationContext context = new AnnotationConfigApplicationContext(AutowiredConfig.class).     assertThat(context.getBean(TestBean.class).name, equalTo("foo")). }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) {     return (bean instanceof TestBean ? null : bean). }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     return bean. }
false;public;2;5;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) {     bean.getClass().getName().     return bean. }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     bean.getClass().getName().     return bean. }
false;public;0;28;;@Test public void nullReturningBeanPostProcessor() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(AutowiredConfig.class).     context.getBeanFactory().addBeanPostProcessor(new BeanPostProcessor() {          @Override         public Object postProcessBeforeInitialization(Object bean, String beanName) {             return (bean instanceof TestBean ? null : bean).         }          @Override         public Object postProcessAfterInitialization(Object bean, String beanName) {             return bean.         }     }).     context.getBeanFactory().addBeanPostProcessor(new BeanPostProcessor() {          @Override         public Object postProcessBeforeInitialization(Object bean, String beanName) {             bean.getClass().getName().             return bean.         }          @Override         public Object postProcessAfterInitialization(Object bean, String beanName) {             bean.getClass().getName().             return bean.         }     }).     context.refresh(). }
false;public;0;10;;@Test public void individualBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(BeanA.class, BeanB.class, BeanC.class).     context.refresh().     assertSame(context.getBean(BeanB.class), context.getBean(BeanA.class).b).     assertSame(context.getBean(BeanC.class), context.getBean(BeanA.class).c).     assertSame(context, context.getBean(BeanB.class).applicationContext). }
false;public;0;12;;@Test public void individualNamedBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean("a", BeanA.class).     context.registerBean("b", BeanB.class).     context.registerBean("c", BeanC.class).     context.refresh().     assertSame(context.getBean("b"), context.getBean("a", BeanA.class).b).     assertSame(context.getBean("c"), context.getBean("a", BeanA.class).c).     assertSame(context, context.getBean("b", BeanB.class).applicationContext). }
false;public;0;19;;@Test public void individualBeanWithSupplier() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean(BeanA.class, () -> new BeanA(context.getBean(BeanB.class), context.getBean(BeanC.class))).     context.registerBean(BeanB.class, BeanB::new).     context.registerBean(BeanC.class, BeanC::new).     context.refresh().     assertTrue(context.getBeanFactory().containsSingleton("annotationConfigApplicationContextTests.BeanA")).     assertSame(context.getBean(BeanB.class), context.getBean(BeanA.class).b).     assertSame(context.getBean(BeanC.class), context.getBean(BeanA.class).c).     assertSame(context, context.getBean(BeanB.class).applicationContext).     assertArrayEquals(new String[] { "annotationConfigApplicationContextTests.BeanA" }, context.getDefaultListableBeanFactory().getDependentBeans("annotationConfigApplicationContextTests.BeanB")).     assertArrayEquals(new String[] { "annotationConfigApplicationContextTests.BeanA" }, context.getDefaultListableBeanFactory().getDependentBeans("annotationConfigApplicationContextTests.BeanC")). }
false;public;0;15;;@Test public void individualBeanWithSupplierAndCustomizer() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean(BeanA.class, () -> new BeanA(context.getBean(BeanB.class), context.getBean(BeanC.class)), bd -> bd.setLazyInit(true)).     context.registerBean(BeanB.class, BeanB::new).     context.registerBean(BeanC.class, BeanC::new).     context.refresh().     assertFalse(context.getBeanFactory().containsSingleton("annotationConfigApplicationContextTests.BeanA")).     assertSame(context.getBean(BeanB.class), context.getBean(BeanA.class).b).     assertSame(context.getBean(BeanC.class), context.getBean(BeanA.class).c).     assertSame(context, context.getBean(BeanB.class).applicationContext). }
false;public;0;14;;@Test public void individualNamedBeanWithSupplier() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean("a", BeanA.class, () -> new BeanA(context.getBean(BeanB.class), context.getBean(BeanC.class))).     context.registerBean("b", BeanB.class, BeanB::new).     context.registerBean("c", BeanC.class, BeanC::new).     context.refresh().     assertTrue(context.getBeanFactory().containsSingleton("a")).     assertSame(context.getBean("b", BeanB.class), context.getBean(BeanA.class).b).     assertSame(context.getBean("c"), context.getBean("a", BeanA.class).c).     assertSame(context, context.getBean("b", BeanB.class).applicationContext). }
false;public;0;15;;@Test public void individualNamedBeanWithSupplierAndCustomizer() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean("a", BeanA.class, () -> new BeanA(context.getBean(BeanB.class), context.getBean(BeanC.class)), bd -> bd.setLazyInit(true)).     context.registerBean("b", BeanB.class, BeanB::new).     context.registerBean("c", BeanC.class, BeanC::new).     context.refresh().     assertFalse(context.getBeanFactory().containsSingleton("a")).     assertSame(context.getBean("b", BeanB.class), context.getBean(BeanA.class).b).     assertSame(context.getBean("c"), context.getBean("a", BeanA.class).c).     assertSame(context, context.getBean("b", BeanB.class).applicationContext). }
false;public;0;15;;@Test public void individualBeanWithNullReturningSupplier() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean("a", BeanA.class, () -> null).     context.registerBean("b", BeanB.class, BeanB::new).     context.registerBean("c", BeanC.class, BeanC::new).     context.refresh().     assertTrue(ObjectUtils.containsElement(context.getBeanNamesForType(BeanA.class), "a")).     assertTrue(ObjectUtils.containsElement(context.getBeanNamesForType(BeanB.class), "b")).     assertTrue(ObjectUtils.containsElement(context.getBeanNamesForType(BeanC.class), "c")).     assertTrue(context.getBeansOfType(BeanA.class).isEmpty()).     assertSame(context.getBean(BeanB.class), context.getBeansOfType(BeanB.class).values().iterator().next()).     assertSame(context.getBean(BeanC.class), context.getBeansOfType(BeanC.class).values().iterator().next()). }
false;public;0;12;;@Test public void individualBeanWithSpecifiedConstructorArguments() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     BeanB b = new BeanB().     BeanC c = new BeanC().     context.registerBean(BeanA.class, b, c).     context.refresh().     assertSame(b, context.getBean(BeanA.class).b).     assertSame(c, context.getBean(BeanA.class).c).     assertNull(b.applicationContext). }
false;public;0;12;;@Test public void individualNamedBeanWithSpecifiedConstructorArguments() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     BeanB b = new BeanB().     BeanC c = new BeanC().     context.registerBean("a", BeanA.class, b, c).     context.refresh().     assertSame(b, context.getBean("a", BeanA.class).b).     assertSame(c, context.getBean("a", BeanA.class).c).     assertNull(b.applicationContext). }
false;public;0;12;;@Test public void individualBeanWithMixedConstructorArguments() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     BeanC c = new BeanC().     context.registerBean(BeanA.class, c).     context.registerBean(BeanB.class).     context.refresh().     assertSame(context.getBean(BeanB.class), context.getBean(BeanA.class).b).     assertSame(c, context.getBean(BeanA.class).c).     assertSame(context, context.getBean(BeanB.class).applicationContext). }
false;public;0;12;;@Test public void individualNamedBeanWithMixedConstructorArguments() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     BeanC c = new BeanC().     context.registerBean("a", BeanA.class, c).     context.registerBean("b", BeanB.class).     context.refresh().     assertSame(context.getBean("b", BeanB.class), context.getBean("a", BeanA.class).b).     assertSame(c, context.getBean("a", BeanA.class).c).     assertSame(context, context.getBean("b", BeanB.class).applicationContext). }
false;public;0;9;;@Test public void individualBeanWithFactoryBeanSupplier() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.registerBean("fb", TypedFactoryBean.class, TypedFactoryBean::new, bd -> bd.setLazyInit(true)).     context.refresh().     assertEquals(String.class, context.getType("fb")).     assertEquals(TypedFactoryBean.class, context.getType("&fb")). }
false;public;0;13;;@Test public void individualBeanWithFactoryBeanSupplierAndTargetType() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     RootBeanDefinition bd = new RootBeanDefinition().     bd.setInstanceSupplier(TypedFactoryBean::new).     bd.setTargetType(ResolvableType.forClassWithGenerics(FactoryBean.class, String.class)).     bd.setLazyInit(true).     context.registerBeanDefinition("fb", bd).     context.refresh().     assertEquals(String.class, context.getType("fb")).     assertEquals(FactoryBean.class, context.getType("&fb")). }
false;public;0;6;;@Bean public TestBean testBean() {     TestBean testBean = new TestBean().     testBean.name = "foo".     return testBean. }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(). }
false;;0;3;;@Bean TestBean tb1() {     return new TestBean(). }
false;;0;3;;@Bean TestBean tb2() {     return new TestBean(). }
false;;0;1;;@Bean String name() {     return "foo". }
false;;0;5;;@Bean TestBean testBean() {     TestBean testBean = new TestBean().     testBean.name = autowiredName.     return testBean. }
false;public;0;4;;@Override public String getObject() {     return "". }
false;public;0;4;;@Override public Class<?> getObjectType() {     return String.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public Object getObject() {     return null. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;7;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + (name == null ? 0 : name.hashCode()).     return result. }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (this == obj)         return true.     if (obj == null)         return false.     if (getClass() != obj.getClass())         return false.     TestBean other = (TestBean) obj.     if (name == null) {         if (other.name != null)             return false.     } else if (!name.equals(other.name))         return false.     return true. }
