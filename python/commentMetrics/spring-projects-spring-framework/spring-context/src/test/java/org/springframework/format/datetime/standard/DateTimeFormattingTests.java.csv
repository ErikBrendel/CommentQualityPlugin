commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar().     setup(registrar). }
false;private;1;15;;private void setup(DateTimeFormatterRegistrar registrar) {     conversionService = new FormattingConversionService().     DefaultConversionService.addDefaultConverters(conversionService).     registrar.registerFormatters(conversionService).     DateTimeBean bean = new DateTimeBean().     bean.getChildren().add(new DateTimeBean()).     binder = new DataBinder(bean).     binder.setConversionService(conversionService).     LocaleContextHolder.setLocale(Locale.US).     DateTimeContext context = new DateTimeContext().     context.setTimeZone(ZoneId.of("-05:00")).     DateTimeContextHolder.setDateTimeContext(context). }
false;public;0;5;;@After public void cleanup() {     LocaleContextHolder.setLocale(null).     DateTimeContextHolder.setDateTimeContext(null). }
false;public;0;8;;@Test public void testBindLocalDate() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", "10/31/09").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;11;;@Test public void testBindLocalDateWithSpecificStyle() {     DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar().     registrar.setDateStyle(FormatStyle.LONG).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", "October 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("October 31, 2009", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;11;;@Test public void testBindLocalDateWithSpecificFormatter() {     DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar().     registrar.setDateFormatter(DateTimeFormatter.ofPattern("yyyyMMdd")).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", "20091031").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("20091031", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;7;;@Test public void testBindLocalDateArray() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", new String[] { "10/31/09" }).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()). }
false;public;0;8;;@Test public void testBindLocalDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("Oct 31, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;8;;@Test public void testBindLocalDateAnnotatedWithError() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct -31, 2009").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getFieldErrorCount("localDateAnnotated")).     assertEquals("Oct -31, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;8;;@Test public void testBindNestedLocalDateAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("children[0].localDateAnnotated", "Oct 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("Oct 31, 2009", binder.getBindingResult().getFieldValue("children[0].localDateAnnotated")). }
false;public;0;9;;@Test public void testBindLocalDateAnnotatedWithDirectFieldAccess() {     binder.initDirectFieldAccess().     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct 31, 2009").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("Oct 31, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;9;;@Test public void testBindLocalDateAnnotatedWithDirectFieldAccessAndError() {     binder.initDirectFieldAccess().     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateAnnotated", "Oct -31, 2009").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getFieldErrorCount("localDateAnnotated")).     assertEquals("Oct -31, 2009", binder.getBindingResult().getFieldValue("localDateAnnotated")). }
false;public;0;8;;@Test public void testBindLocalDateFromJavaUtilCalendar() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDate", new GregorianCalendar(2009, 9, 31, 0, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09", binder.getBindingResult().getFieldValue("localDate")). }
false;public;0;8;;@Test public void testBindLocalTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", "12:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00 PM", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;11;;@Test public void testBindLocalTimeWithSpecificStyle() {     DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar().     registrar.setTimeStyle(FormatStyle.MEDIUM).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", "12:00:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00 PM", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;11;;@Test public void testBindLocalTimeWithSpecificFormatter() {     DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar().     registrar.setTimeFormatter(DateTimeFormatter.ofPattern("HHmmss")).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", "130000").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("130000", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;8;;@Test public void testBindLocalTimeAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTimeAnnotated", "12:00:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00 PM", binder.getBindingResult().getFieldValue("localTimeAnnotated")). }
false;public;0;8;;@Test public void testBindLocalTimeFromJavaUtilCalendar() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localTime", new GregorianCalendar(1970, 0, 0, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00 PM", binder.getBindingResult().getFieldValue("localTime")). }
false;public;0;10;;@Test public void testBindLocalDateTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTime", LocalDateTime.of(2009, 10, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTime").toString().     assertTrue(value.startsWith("10/31/09")).     assertTrue(value.endsWith("12:00 PM")). }
false;public;0;10;;@Test public void testBindLocalDateTimeAnnotated() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTimeAnnotated", LocalDateTime.of(2009, 10, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTimeAnnotated").toString().     assertTrue(value.startsWith("Oct 31, 2009")).     assertTrue(value.endsWith("12:00:00 PM")). }
false;public;0;10;;@Test public void testBindLocalDateTimeFromJavaUtilCalendar() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTime", new GregorianCalendar(2009, 9, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTime").toString().     assertTrue(value.startsWith("10/31/09")).     assertTrue(value.endsWith("12:00 PM")). }
false;public;0;13;;@Test public void testBindDateTimeWithSpecificStyle() {     DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar().     registrar.setDateTimeStyle(FormatStyle.MEDIUM).     setup(registrar).     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("localDateTime", LocalDateTime.of(2009, 10, 31, 12, 0)).     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     String value = binder.getBindingResult().getFieldValue("localDateTime").toString().     assertTrue(value.startsWith("Oct 31, 2009")).     assertTrue(value.endsWith("12:00:00 PM")). }
false;public;0;8;;@Test public void testBindDateTimeAnnotatedPattern() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTimeAnnotatedPattern", "10/31/09 12:00 PM").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("10/31/09 12:00 PM", binder.getBindingResult().getFieldValue("dateTimeAnnotatedPattern")). }
false;public;0;7;;@Test public void testBindDateTimeOverflow() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("dateTimeAnnotatedPattern", "02/29/09 12:00 PM").     binder.bind(propertyValues).     assertEquals(1, binder.getBindingResult().getErrorCount()). }
false;public;0;8;;@Test public void testBindISODate() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDate", "2009-10-31").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31", binder.getBindingResult().getFieldValue("isoDate")). }
false;public;0;8;;@Test public void testBindISOTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoTime", "12:00:00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00", binder.getBindingResult().getFieldValue("isoTime")). }
false;public;0;8;;@Test public void testBindISOTimeWithZone() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoTime", "12:00:00.000-05:00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("12:00:00", binder.getBindingResult().getFieldValue("isoTime")). }
false;public;0;8;;@Test public void testBindISODateTime() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDateTime", "2009-10-31T12:00:00").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T12:00:00", binder.getBindingResult().getFieldValue("isoDateTime")). }
false;public;0;8;;@Test public void testBindISODateTimeWithZone() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("isoDateTime", "2009-10-31T12:00:00.000Z").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertEquals("2009-10-31T12:00:00", binder.getBindingResult().getFieldValue("isoDateTime")). }
false;public;0;8;;@Test public void testBindInstant() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("instant", "2009-10-31T12:00:00.000Z").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("instant").toString().startsWith("2009-10-31T12:00")). }
false;public;0;16;;@Test @SuppressWarnings("deprecation") public void testBindInstantFromJavaUtilDate() {     TimeZone defaultZone = TimeZone.getDefault().     TimeZone.setDefault(TimeZone.getTimeZone("GMT")).     try {         MutablePropertyValues propertyValues = new MutablePropertyValues().         propertyValues.add("instant", new Date(109, 9, 31, 12, 0)).         binder.bind(propertyValues).         assertEquals(0, binder.getBindingResult().getErrorCount()).         assertTrue(binder.getBindingResult().getFieldValue("instant").toString().startsWith("2009-10-31")).     } finally {         TimeZone.setDefault(defaultZone).     } }
false;public;0;8;;@Test public void testBindPeriod() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("period", "P6Y3M1D").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("period").toString().equals("P6Y3M1D")). }
false;public;0;8;;@Test public void testBindDuration() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("duration", "PT8H6M12.345S").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("duration").toString().equals("PT8H6M12.345S")). }
false;public;0;8;;@Test public void testBindYear() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("year", "2007").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("year").toString().equals("2007")). }
false;public;0;8;;@Test public void testBindMonth() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("month", "JULY").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("month").toString().equals("JULY")). }
false;public;0;8;;@Test public void testBindMonthInAnyCase() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("month", "July").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("month").toString().equals("JULY")). }
false;public;0;8;;@Test public void testBindYearMonth() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("yearMonth", "2007-12").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("yearMonth").toString().equals("2007-12")). }
false;public;0;8;;@Test public void testBindMonthDay() {     MutablePropertyValues propertyValues = new MutablePropertyValues().     propertyValues.add("monthDay", "--12-03").     binder.bind(propertyValues).     assertEquals(0, binder.getBindingResult().getErrorCount()).     assertTrue(binder.getBindingResult().getFieldValue("monthDay").toString().equals("--12-03")). }
false;public;0;3;;public LocalDate getLocalDate() {     return localDate. }
false;public;1;3;;public void setLocalDate(LocalDate localDate) {     this.localDate = localDate. }
false;public;0;3;;public LocalDate getLocalDateAnnotated() {     return localDateAnnotated. }
false;public;1;3;;public void setLocalDateAnnotated(LocalDate localDateAnnotated) {     this.localDateAnnotated = localDateAnnotated. }
false;public;0;3;;public LocalTime getLocalTime() {     return localTime. }
false;public;1;3;;public void setLocalTime(LocalTime localTime) {     this.localTime = localTime. }
false;public;0;3;;public LocalTime getLocalTimeAnnotated() {     return localTimeAnnotated. }
false;public;1;3;;public void setLocalTimeAnnotated(LocalTime localTimeAnnotated) {     this.localTimeAnnotated = localTimeAnnotated. }
false;public;0;3;;public LocalDateTime getLocalDateTime() {     return localDateTime. }
false;public;1;3;;public void setLocalDateTime(LocalDateTime localDateTime) {     this.localDateTime = localDateTime. }
false;public;0;3;;public LocalDateTime getLocalDateTimeAnnotated() {     return localDateTimeAnnotated. }
false;public;1;3;;public void setLocalDateTimeAnnotated(LocalDateTime localDateTimeAnnotated) {     this.localDateTimeAnnotated = localDateTimeAnnotated. }
false;public;0;3;;public LocalDateTime getDateTimeAnnotatedPattern() {     return dateTimeAnnotatedPattern. }
false;public;1;3;;public void setDateTimeAnnotatedPattern(LocalDateTime dateTimeAnnotatedPattern) {     this.dateTimeAnnotatedPattern = dateTimeAnnotatedPattern. }
false;public;0;3;;public LocalDate getIsoDate() {     return isoDate. }
false;public;1;3;;public void setIsoDate(LocalDate isoDate) {     this.isoDate = isoDate. }
false;public;0;3;;public LocalTime getIsoTime() {     return isoTime. }
false;public;1;3;;public void setIsoTime(LocalTime isoTime) {     this.isoTime = isoTime. }
false;public;0;3;;public LocalDateTime getIsoDateTime() {     return isoDateTime. }
false;public;1;3;;public void setIsoDateTime(LocalDateTime isoDateTime) {     this.isoDateTime = isoDateTime. }
false;public;0;3;;public Instant getInstant() {     return instant. }
false;public;1;3;;public void setInstant(Instant instant) {     this.instant = instant. }
false;public;0;3;;public Period getPeriod() {     return period. }
false;public;1;3;;public void setPeriod(Period period) {     this.period = period. }
false;public;0;3;;public Duration getDuration() {     return duration. }
false;public;1;3;;public void setDuration(Duration duration) {     this.duration = duration. }
false;public;0;3;;public Year getYear() {     return year. }
false;public;1;3;;public void setYear(Year year) {     this.year = year. }
false;public;0;3;;public Month getMonth() {     return month. }
false;public;1;3;;public void setMonth(Month month) {     this.month = month. }
false;public;0;3;;public YearMonth getYearMonth() {     return yearMonth. }
false;public;1;3;;public void setYearMonth(YearMonth yearMonth) {     this.yearMonth = yearMonth. }
false;public;0;3;;public MonthDay getMonthDay() {     return monthDay. }
false;public;1;3;;public void setMonthDay(MonthDay monthDay) {     this.monthDay = monthDay. }
false;public;0;3;;public List<DateTimeBean> getChildren() {     return children. }
