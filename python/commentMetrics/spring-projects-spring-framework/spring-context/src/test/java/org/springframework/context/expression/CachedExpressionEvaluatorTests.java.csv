commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void parseNewExpression() {     Method method = ReflectionUtils.findMethod(getClass(), "toString").     Expression expression = expressionEvaluator.getTestExpression("true", method, getClass()).     hasParsedExpression("true").     assertEquals(true, expression.getValue()).     assertEquals("Expression should be in cache", 1, expressionEvaluator.testCache.size()). }
false;public;0;10;;@Test public void cacheExpression() {     Method method = ReflectionUtils.findMethod(getClass(), "toString").     expressionEvaluator.getTestExpression("true", method, getClass()).     expressionEvaluator.getTestExpression("true", method, getClass()).     expressionEvaluator.getTestExpression("true", method, getClass()).     hasParsedExpression("true").     assertEquals("Only one expression should be in cache", 1, expressionEvaluator.testCache.size()). }
false;public;0;7;;@Test public void cacheExpressionBasedOnConcreteType() {     Method method = ReflectionUtils.findMethod(getClass(), "toString").     expressionEvaluator.getTestExpression("true", method, getClass()).     expressionEvaluator.getTestExpression("true", method, Object.class).     assertEquals("Cached expression should be based on type", 2, expressionEvaluator.testCache.size()). }
false;private;1;3;;private void hasParsedExpression(String expression) {     verify(expressionEvaluator.getParser(), times(1)).parseExpression(expression). }
false;public;3;3;;public Expression getTestExpression(String expression, Method method, Class<?> type) {     return getExpression(this.testCache, new AnnotatedElementKey(method, type), expression). }
false;private,static;0;4;;private static SpelExpressionParser mockSpelExpressionParser() {     SpelExpressionParser parser = new SpelExpressionParser().     return spy(parser). }
