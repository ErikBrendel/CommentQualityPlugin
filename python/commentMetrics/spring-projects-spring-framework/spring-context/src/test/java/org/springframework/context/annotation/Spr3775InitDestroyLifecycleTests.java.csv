commented;modifiers;parameterAmount;loc;comment;code
false;private;3;5;;private void debugMethods(Class<?> clazz, String category, List<String> methodNames) {     if (logger.isDebugEnabled()) {         logger.debug(clazz.getSimpleName() + ": " + category + ": " + methodNames).     } }
false;private;4;6;;private void assertMethodOrdering(Class<?> clazz, String category, List<String> expectedMethods, List<String> actualMethods) {     debugMethods(clazz, category, actualMethods).     assertTrue("Verifying " + category + ": expected<" + expectedMethods + "> but got<" + actualMethods + ">.", ObjectUtils.nullSafeEquals(expectedMethods, actualMethods)). }
false;private;3;10;;private DefaultListableBeanFactory createBeanFactoryAndRegisterBean(final Class<?> beanClass, final String initMethodName, final String destroyMethodName) {     DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory().     RootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass).     beanDefinition.setInitMethodName(initMethodName).     beanDefinition.setDestroyMethodName(destroyMethodName).     beanFactory.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor()).     beanFactory.registerBeanDefinition(LIFECYCLE_TEST_BEAN, beanDefinition).     return beanFactory. }
false;public;0;10;;@Test public void testInitDestroyMethods() {     final Class<?> beanClass = InitDestroyBean.class.     final DefaultListableBeanFactory beanFactory = createBeanFactoryAndRegisterBean(beanClass, "afterPropertiesSet", "destroy").     final InitDestroyBean bean = (InitDestroyBean) beanFactory.getBean(LIFECYCLE_TEST_BEAN).     assertMethodOrdering(beanClass, "init-methods", Arrays.asList("afterPropertiesSet"), bean.initMethods).     beanFactory.destroySingletons().     assertMethodOrdering(beanClass, "destroy-methods", Arrays.asList("destroy"), bean.destroyMethods). }
false;public;0;12;;@Test public void testInitializingDisposableInterfaces() {     final Class<?> beanClass = CustomInitializingDisposableBean.class.     final DefaultListableBeanFactory beanFactory = createBeanFactoryAndRegisterBean(beanClass, "customInit", "customDestroy").     final CustomInitializingDisposableBean bean = (CustomInitializingDisposableBean) beanFactory.getBean(LIFECYCLE_TEST_BEAN).     assertMethodOrdering(beanClass, "init-methods", Arrays.asList("afterPropertiesSet", "customInit"), bean.initMethods).     beanFactory.destroySingletons().     assertMethodOrdering(beanClass, "destroy-methods", Arrays.asList("destroy", "customDestroy"), bean.destroyMethods). }
false;public;0;11;;@Test public void testInitializingDisposableInterfacesWithShadowedMethods() {     final Class<?> beanClass = InitializingDisposableWithShadowedMethodsBean.class.     final DefaultListableBeanFactory beanFactory = createBeanFactoryAndRegisterBean(beanClass, "afterPropertiesSet", "destroy").     final InitializingDisposableWithShadowedMethodsBean bean = (InitializingDisposableWithShadowedMethodsBean) beanFactory.getBean(LIFECYCLE_TEST_BEAN).     assertMethodOrdering(beanClass, "init-methods", Arrays.asList("InitializingBean.afterPropertiesSet"), bean.initMethods).     beanFactory.destroySingletons().     assertMethodOrdering(beanClass, "destroy-methods", Arrays.asList("DisposableBean.destroy"), bean.destroyMethods). }
false;public;0;12;;@Test public void testJsr250Annotations() {     final Class<?> beanClass = CustomAnnotatedInitDestroyBean.class.     final DefaultListableBeanFactory beanFactory = createBeanFactoryAndRegisterBean(beanClass, "customInit", "customDestroy").     final CustomAnnotatedInitDestroyBean bean = (CustomAnnotatedInitDestroyBean) beanFactory.getBean(LIFECYCLE_TEST_BEAN).     assertMethodOrdering(beanClass, "init-methods", Arrays.asList("postConstruct", "afterPropertiesSet", "customInit"), bean.initMethods).     beanFactory.destroySingletons().     assertMethodOrdering(beanClass, "destroy-methods", Arrays.asList("preDestroy", "destroy", "customDestroy"), bean.destroyMethods). }
false;public;0;12;;@Test public void testJsr250AnnotationsWithShadowedMethods() {     final Class<?> beanClass = CustomAnnotatedInitDestroyWithShadowedMethodsBean.class.     final DefaultListableBeanFactory beanFactory = createBeanFactoryAndRegisterBean(beanClass, "customInit", "customDestroy").     final CustomAnnotatedInitDestroyWithShadowedMethodsBean bean = (CustomAnnotatedInitDestroyWithShadowedMethodsBean) beanFactory.getBean(LIFECYCLE_TEST_BEAN).     assertMethodOrdering(beanClass, "init-methods", Arrays.asList("@PostConstruct.afterPropertiesSet", "customInit"), bean.initMethods).     beanFactory.destroySingletons().     assertMethodOrdering(beanClass, "destroy-methods", Arrays.asList("@PreDestroy.destroy", "customDestroy"), bean.destroyMethods). }
false;public;0;10;;@Test public void testAllLifecycleMechanismsAtOnce() {     final Class<?> beanClass = AllInOneBean.class.     final DefaultListableBeanFactory beanFactory = createBeanFactoryAndRegisterBean(beanClass, "afterPropertiesSet", "destroy").     final AllInOneBean bean = (AllInOneBean) beanFactory.getBean(LIFECYCLE_TEST_BEAN).     assertMethodOrdering(beanClass, "init-methods", Arrays.asList("afterPropertiesSet"), bean.initMethods).     beanFactory.destroySingletons().     assertMethodOrdering(beanClass, "destroy-methods", Arrays.asList("destroy"), bean.destroyMethods). }
false;public;0;3;;public void afterPropertiesSet() throws Exception {     this.initMethods.add("afterPropertiesSet"). }
false;public;0;3;;public void destroy() throws Exception {     this.destroyMethods.add("destroy"). }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     this.initMethods.add("InitializingBean.afterPropertiesSet"). }
false;public;0;4;;@Override public void destroy() throws Exception {     this.destroyMethods.add("DisposableBean.destroy"). }
false;public;0;3;;public void customInit() throws Exception {     this.initMethods.add("customInit"). }
false;public;0;3;;public void customDestroy() throws Exception {     this.destroyMethods.add("customDestroy"). }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     this.initMethods.add("afterPropertiesSet"). }
false;public;0;4;;@Override public void destroy() throws Exception {     this.destroyMethods.add("destroy"). }
false;public;0;4;;@PostConstruct public void postConstruct() throws Exception {     this.initMethods.add("postConstruct"). }
false;public;0;4;;@PreDestroy public void preDestroy() throws Exception {     this.destroyMethods.add("preDestroy"). }
false;public;0;5;;@PostConstruct @Override public void afterPropertiesSet() throws Exception {     this.initMethods.add("@PostConstruct.afterPropertiesSet"). }
false;public;0;5;;@PreDestroy @Override public void destroy() throws Exception {     this.destroyMethods.add("@PreDestroy.destroy"). }
false;public;0;5;;@Override @PostConstruct public void afterPropertiesSet() throws Exception {     this.initMethods.add("afterPropertiesSet"). }
false;public;0;5;;@Override @PreDestroy public void destroy() throws Exception {     this.destroyMethods.add("destroy"). }
