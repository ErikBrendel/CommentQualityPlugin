commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void commonAssumptions() {     Assume.group(TestGroup.PERFORMANCE).     Assume.notLogging(factoryLog). }
false;public;0;20;;@Test public void testPrototypeCreationWithResourcePropertiesIsFastEnough() {     GenericApplicationContext ctx = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ctx).     ctx.refresh().     RootBeanDefinition rbd = new RootBeanDefinition(ResourceAnnotatedTestBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     ctx.registerBeanDefinition("test", rbd).     ctx.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class)).     TestBean spouse = (TestBean) ctx.getBean("spouse").     StopWatch sw = new StopWatch().     sw.start("prototype").     for (int i = 0. i < 100000. i++) {         TestBean tb = (TestBean) ctx.getBean("test").         assertSame(spouse, tb.getSpouse()).     }     sw.stop().     assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000). }
false;public;0;21;;@Test public void testPrototypeCreationWithOverriddenResourcePropertiesIsFastEnough() {     GenericApplicationContext ctx = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ctx).     ctx.refresh().     RootBeanDefinition rbd = new RootBeanDefinition(ResourceAnnotatedTestBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse")).     ctx.registerBeanDefinition("test", rbd).     ctx.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class)).     TestBean spouse = (TestBean) ctx.getBean("spouse").     StopWatch sw = new StopWatch().     sw.start("prototype").     for (int i = 0. i < 100000. i++) {         TestBean tb = (TestBean) ctx.getBean("test").         assertSame(spouse, tb.getSpouse()).     }     sw.stop().     assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000). }
false;public;0;20;;@Test public void testPrototypeCreationWithAutowiredPropertiesIsFastEnough() {     GenericApplicationContext ctx = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ctx).     ctx.refresh().     RootBeanDefinition rbd = new RootBeanDefinition(AutowiredAnnotatedTestBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     ctx.registerBeanDefinition("test", rbd).     ctx.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class)).     TestBean spouse = (TestBean) ctx.getBean("spouse").     StopWatch sw = new StopWatch().     sw.start("prototype").     for (int i = 0. i < 100000. i++) {         TestBean tb = (TestBean) ctx.getBean("test").         assertSame(spouse, tb.getSpouse()).     }     sw.stop().     assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 4000). }
false;public;0;21;;@Test public void testPrototypeCreationWithOverriddenAutowiredPropertiesIsFastEnough() {     GenericApplicationContext ctx = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ctx).     ctx.refresh().     RootBeanDefinition rbd = new RootBeanDefinition(AutowiredAnnotatedTestBean.class).     rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     rbd.getPropertyValues().add("spouse", new RuntimeBeanReference("spouse")).     ctx.registerBeanDefinition("test", rbd).     ctx.registerBeanDefinition("spouse", new RootBeanDefinition(TestBean.class)).     TestBean spouse = (TestBean) ctx.getBean("spouse").     StopWatch sw = new StopWatch().     sw.start("prototype").     for (int i = 0. i < 100000. i++) {         TestBean tb = (TestBean) ctx.getBean("test").         assertSame(spouse, tb.getSpouse()).     }     sw.stop().     assertTrue("Prototype creation took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 6000). }
false;public;1;7;;@Override @Resource @SuppressWarnings("deprecation") @org.springframework.beans.factory.annotation.Required public void setSpouse(ITestBean spouse) {     super.setSpouse(spouse). }
false;public;1;7;;@Override @Autowired @SuppressWarnings("deprecation") @org.springframework.beans.factory.annotation.Required public void setSpouse(ITestBean spouse) {     super.setSpouse(spouse). }
