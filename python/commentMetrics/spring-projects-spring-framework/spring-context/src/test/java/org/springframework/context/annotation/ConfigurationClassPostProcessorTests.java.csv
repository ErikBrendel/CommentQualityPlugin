commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     QualifierAnnotationAutowireCandidateResolver acr = new QualifierAnnotationAutowireCandidateResolver().     acr.setBeanFactory(this.beanFactory).     this.beanFactory.setAutowireCandidateResolver(acr). }
true;public;0;10;/**  * Enhanced {@link Configuration} classes are only necessary for respecting  * certain bean semantics, like singleton-scoping, scoped proxies, etc.  * <p>Technically, {@link ConfigurationClassPostProcessor} could fail to enhance the  * registered Configuration classes and many use cases would still work.  * Certain cases, however, like inter-bean singleton references would not.  * We test for such a case below, and in doing so prove that enhancement is  * working.  */ ;/**  * Enhanced {@link Configuration} classes are only necessary for respecting  * certain bean semantics, like singleton-scoping, scoped proxies, etc.  * <p>Technically, {@link ConfigurationClassPostProcessor} could fail to enhance the  * registered Configuration classes and many use cases would still work.  * Certain cases, however, like inter-bean singleton references would not.  * We test for such a case below, and in doing so prove that enhancement is  * working.  */ @Test public void enhancementIsPresentBecauseSingletonSemanticsAreRespected() {     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean("foo", Foo.class).     Bar bar = beanFactory.getBean("bar", Bar.class).     assertSame(foo, bar.foo).     assertTrue(Arrays.asList(beanFactory.getDependentBeans("foo")).contains("bar")). }
false;public;0;9;;@Test public void configurationIntrospectionOfInnerClassesWorksWithDotNameSyntax() {     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(getClass().getName() + ".SingletonBeanConfig")).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean("foo", Foo.class).     Bar bar = beanFactory.getBean("bar", Bar.class).     assertSame(foo, bar.foo). }
true;public;0;9;/**  * Tests the fix for SPR-5655, a special workaround that prefers reflection  * over ASM if a bean class is already loaded.  */ ;/**  * Tests the fix for SPR-5655, a special workaround that prefers reflection  * over ASM if a bean class is already loaded.  */ @Test public void alreadyLoadedConfigurationClasses() {     beanFactory.registerBeanDefinition("unloadedConfig", new RootBeanDefinition(UnloadedConfig.class.getName())).     beanFactory.registerBeanDefinition("loadedConfig", new RootBeanDefinition(LoadedConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.getBean("foo").     beanFactory.getBean("bar"). }
true;public;0;11;/**  * Tests whether a bean definition without a specified bean class is handled  * correctly.  */ ;/**  * Tests whether a bean definition without a specified bean class is handled  * correctly.  */ @Test public void postProcessorIntrospectsInheritedDefinitionsCorrectly() {     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class)).     beanFactory.registerBeanDefinition("parent", new RootBeanDefinition(TestBean.class)).     beanFactory.registerBeanDefinition("child", new ChildBeanDefinition("parent")).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean("foo", Foo.class).     Bar bar = beanFactory.getBean("bar", Bar.class).     assertSame(foo, bar.foo). }
false;public;0;5;;@Test public void postProcessorWorksWithComposedConfigurationUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationClass.class).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;5;;@Test public void postProcessorWorksWithComposedConfigurationUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationClass.class.getName()).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForBasePackageUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationWithAttributeOverrideForBasePackage.class).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForBasePackageUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationWithAttributeOverrideForBasePackage.class.getName()).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForExcludeFilterUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationWithAttributeOverrideForExcludeFilter.class).     assertSupportForComposedAnnotationWithExclude(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForExcludeFilterUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedConfigurationWithAttributeOverrideForExcludeFilter.class.getName()).     assertSupportForComposedAnnotationWithExclude(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithExtendedConfigurationWithAttributeOverrideForExcludesFilterUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ExtendedConfigurationWithAttributeOverrideForExcludeFilter.class).     assertSupportForComposedAnnotationWithExclude(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithExtendedConfigurationWithAttributeOverrideForExcludesFilterUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ExtendedConfigurationWithAttributeOverrideForExcludeFilter.class.getName()).     assertSupportForComposedAnnotationWithExclude(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithComposedComposedConfigurationWithAttributeOverridesUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedComposedConfigurationWithAttributeOverridesClass.class).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithComposedComposedConfigurationWithAttributeOverridesUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(ComposedComposedConfigurationWithAttributeOverridesClass.class.getName()).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(MetaComponentScanConfigurationWithAttributeOverridesClass.class).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(MetaComponentScanConfigurationWithAttributeOverridesClass.class.getName()).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclassUsingReflection() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(SubMetaComponentScanConfigurationWithAttributeOverridesClass.class).     assertSupportForComposedAnnotation(beanDefinition). }
false;public;0;6;;@Test public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclassUsingAsm() {     RootBeanDefinition beanDefinition = new RootBeanDefinition(SubMetaComponentScanConfigurationWithAttributeOverridesClass.class.getName()).     assertSupportForComposedAnnotation(beanDefinition). }
false;private;1;8;;private void assertSupportForComposedAnnotation(RootBeanDefinition beanDefinition) {     beanFactory.registerBeanDefinition("config", beanDefinition).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.setEnvironment(new StandardEnvironment()).     pp.postProcessBeanFactory(beanFactory).     SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class).     assertNotNull(simpleComponent). }
false;private;1;13;;private void assertSupportForComposedAnnotationWithExclude(RootBeanDefinition beanDefinition) {     beanFactory.registerBeanDefinition("config", beanDefinition).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.setEnvironment(new StandardEnvironment()).     pp.postProcessBeanFactory(beanFactory).     try {         beanFactory.getBean(SimpleComponent.class).         fail("Should have thrown NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {     // expected     } }
false;public;0;12;;@Test public void postProcessorOverridesNonApplicationBeanDefinitions() {     RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class).     rbd.setRole(RootBeanDefinition.ROLE_SUPPORT).     beanFactory.registerBeanDefinition("bar", rbd).     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean("foo", Foo.class).     Bar bar = beanFactory.getBean("bar", Bar.class).     assertSame(foo, bar.foo). }
false;public;0;11;;@Test public void postProcessorDoesNotOverrideRegularBeanDefinitions() {     RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class).     rbd.setResource(new DescriptiveResource("XML or something")).     beanFactory.registerBeanDefinition("bar", rbd).     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.getBean("foo", Foo.class).     beanFactory.getBean("bar", TestBean.class). }
false;public;0;13;;@Test public void postProcessorDoesNotOverrideRegularBeanDefinitionsEvenWithScopedProxy() {     RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class).     rbd.setResource(new DescriptiveResource("XML or something")).     BeanDefinitionHolder proxied = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(rbd, "bar"), beanFactory, true).     beanFactory.registerBeanDefinition("bar", proxied.getBeanDefinition()).     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.getBean("foo", Foo.class).     beanFactory.getBean("bar", TestBean.class). }
false;public;0;18;;@Test public void postProcessorFailsOnImplicitOverrideIfOverridingIsNotAllowed() {     RootBeanDefinition rbd = new RootBeanDefinition(TestBean.class).     rbd.setResource(new DescriptiveResource("XML or something")).     beanFactory.registerBeanDefinition("bar", rbd).     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class)).     beanFactory.setAllowBeanDefinitionOverriding(false).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     try {         pp.postProcessBeanFactory(beanFactory).         fail("Should have thrown BeanDefinitionStoreException").     } catch (BeanDefinitionStoreException ex) {         assertTrue(ex.getMessage().contains("bar")).         assertTrue(ex.getMessage().contains("SingletonBeanConfig")).         assertTrue(ex.getMessage().contains(TestBean.class.getName())).     } }
false;public;0;12;;@Test public void configurationClassesProcessedInCorrectOrder() {     beanFactory.registerBeanDefinition("config1", new RootBeanDefinition(OverridingSingletonBeanConfig.class)).     beanFactory.registerBeanDefinition("config2", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean(Foo.class).     assertTrue(foo instanceof ExtendedFoo).     Bar bar = beanFactory.getBean(Bar.class).     assertSame(foo, bar.foo). }
false;public;0;13;;@Test public void configurationClassesWithValidOverridingForProgrammaticCall() {     beanFactory.registerBeanDefinition("config1", new RootBeanDefinition(OverridingAgainSingletonBeanConfig.class)).     beanFactory.registerBeanDefinition("config2", new RootBeanDefinition(OverridingSingletonBeanConfig.class)).     beanFactory.registerBeanDefinition("config3", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean(Foo.class).     assertTrue(foo instanceof ExtendedAgainFoo).     Bar bar = beanFactory.getBean(Bar.class).     assertSame(foo, bar.foo). }
false;public;0;19;;@Test public void configurationClassesWithInvalidOverridingForProgrammaticCall() {     beanFactory.registerBeanDefinition("config1", new RootBeanDefinition(InvalidOverridingSingletonBeanConfig.class)).     beanFactory.registerBeanDefinition("config2", new RootBeanDefinition(OverridingSingletonBeanConfig.class)).     beanFactory.registerBeanDefinition("config3", new RootBeanDefinition(SingletonBeanConfig.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     try {         beanFactory.getBean(Bar.class).         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         assertTrue(ex.getMessage().contains("OverridingSingletonBeanConfig.foo")).         assertTrue(ex.getMessage().contains(ExtendedFoo.class.getName())).         assertTrue(ex.getMessage().contains(Foo.class.getName())).         assertTrue(ex.getMessage().contains("InvalidOverridingSingletonBeanConfig")).     } }
false;public;0;11;;// SPR-15384 @Test public void nestedConfigurationClassesProcessedInCorrectOrder() {     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ConfigWithOrderedNestedClasses.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     Foo foo = beanFactory.getBean(Foo.class).     assertTrue(foo instanceof ExtendedFoo).     Bar bar = beanFactory.getBean(Bar.class).     assertSame(foo, bar.foo). }
false;public;0;12;;// SPR-16734 @Test public void innerConfigurationClassesProcessedInCorrectOrder() {     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ConfigWithOrderedInnerClasses.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(new AutowiredAnnotationBeanPostProcessor()).     Foo foo = beanFactory.getBean(Foo.class).     assertTrue(foo instanceof ExtendedFoo).     Bar bar = beanFactory.getBean(Bar.class).     assertSame(foo, bar.foo). }
false;public;0;15;;@Test public void scopedProxyTargetMarkedAsNonAutowireCandidate() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ScopedProxyConfigurationClass.class)).     beanFactory.registerBeanDefinition("consumer", new RootBeanDefinition(ScopedProxyConsumer.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     ITestBean injected = beanFactory.getBean("consumer", ScopedProxyConsumer.class).testBean.     assertTrue(injected instanceof ScopedObject).     assertSame(beanFactory.getBean("scopedClass"), injected).     assertSame(beanFactory.getBean(ITestBean.class), injected). }
false;public;0;20;;@Test public void processingAllowedOnlyOncePerProcessorRegistryPair() {     DefaultListableBeanFactory bf1 = new DefaultListableBeanFactory().     DefaultListableBeanFactory bf2 = new DefaultListableBeanFactory().     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     // first invocation -- should succeed     pp.postProcessBeanFactory(bf1).     try {         // second invocation for bf1 -- should throw         pp.postProcessBeanFactory(bf1).         fail("expected exception").     } catch (IllegalStateException ex) {     }     // first invocation for bf2 -- should succeed     pp.postProcessBeanFactory(bf2).     try {         // second invocation for bf2 -- should throw         pp.postProcessBeanFactory(bf2).         fail("expected exception").     } catch (IllegalStateException ex) {     } }
false;public;0;16;;@Test public void genericsBasedInjection() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("annotatedBean", bd).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     RepositoryInjectionBean bean = (RepositoryInjectionBean) beanFactory.getBean("annotatedBean").     assertEquals("Repository<String>", bean.stringRepository.toString()).     assertEquals("Repository<Integer>", bean.integerRepository.toString()). }
false;public;0;16;;@Test public void genericsBasedInjectionWithScoped() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("annotatedBean", bd).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ScopedRepositoryConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     RepositoryInjectionBean bean = (RepositoryInjectionBean) beanFactory.getBean("annotatedBean").     assertEquals("Repository<String>", bean.stringRepository.toString()).     assertEquals("Repository<Integer>", bean.integerRepository.toString()). }
false;public;0;19;;@Test public void genericsBasedInjectionWithScopedProxy() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("annotatedBean", bd).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ScopedProxyRepositoryConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.freezeConfiguration().     RepositoryInjectionBean bean = (RepositoryInjectionBean) beanFactory.getBean("annotatedBean").     assertEquals("Repository<String>", bean.stringRepository.toString()).     assertEquals("Repository<Integer>", bean.integerRepository.toString()).     assertTrue(AopUtils.isCglibProxy(bean.stringRepository)).     assertTrue(AopUtils.isCglibProxy(bean.integerRepository)). }
false;public;0;19;;@Test public void genericsBasedInjectionWithScopedProxyUsingAsm() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class.getName()).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("annotatedBean", bd).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ScopedProxyRepositoryConfiguration.class.getName())).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.freezeConfiguration().     RepositoryInjectionBean bean = (RepositoryInjectionBean) beanFactory.getBean("annotatedBean").     assertEquals("Repository<String>", bean.stringRepository.toString()).     assertEquals("Repository<Integer>", bean.integerRepository.toString()).     assertTrue(AopUtils.isCglibProxy(bean.stringRepository)).     assertTrue(AopUtils.isCglibProxy(bean.integerRepository)). }
false;public;0;16;;@Test public void genericsBasedInjectionWithImplTypeAtInjectionPoint() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(SpecificRepositoryInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("annotatedBean", bd).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(SpecificRepositoryConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     SpecificRepositoryInjectionBean bean = (SpecificRepositoryInjectionBean) beanFactory.getBean("annotatedBean").     assertSame(beanFactory.getBean("genericRepo"), bean.genericRepository). }
false;public;0;18;;@Test public void genericsBasedInjectionWithFactoryBean() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     RootBeanDefinition bd = new RootBeanDefinition(RepositoryFactoryBeanInjectionBean.class).     bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE).     beanFactory.registerBeanDefinition("annotatedBean", bd).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryFactoryBeanConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     RepositoryFactoryBeanInjectionBean bean = (RepositoryFactoryBeanInjectionBean) beanFactory.getBean("annotatedBean").     assertSame(beanFactory.getBean("&repoFactoryBean"), bean.repositoryFactoryBean).     assertSame(beanFactory.getBean("&repoFactoryBean"), bean.qualifiedRepositoryFactoryBean).     assertSame(beanFactory.getBean("&repoFactoryBean"), bean.prefixQualifiedRepositoryFactoryBean). }
false;public;0;8;;@Test public void genericsBasedInjectionWithRawMatch() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawMatchingConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     assertSame(beanFactory.getBean("rawRepo"), beanFactory.getBean("repoConsumer")). }
false;public;0;8;;@Test public void genericsBasedInjectionWithWildcardMatch() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(WildcardMatchingConfiguration.class)).     ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor().     pp.postProcessBeanFactory(beanFactory).     assertSame(beanFactory.getBean("genericRepo"), beanFactory.getBean("repoConsumer")). }
false;public;0;7;;@Test public void genericsBasedInjectionWithWildcardWithExtendsMatch() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(WildcardWithExtendsConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     assertSame(beanFactory.getBean("stringRepo"), beanFactory.getBean("repoConsumer")). }
false;public;0;7;;@Test public void genericsBasedInjectionWithWildcardWithGenericExtendsMatch() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(WildcardWithGenericExtendsConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     assertSame(beanFactory.getBean("genericRepo"), beanFactory.getBean("repoConsumer")). }
false;public;0;16;;@Test public void genericsBasedInjectionWithEarlyGenericsMatching() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]). }
false;public;0;17;;@Test public void genericsBasedInjectionWithLateGenericsMatching() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]). }
false;public;0;14;;@Test public void genericsBasedInjectionWithEarlyGenericsMatchingAndRawFactoryMethod() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawFactoryMethodRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(0, beanNames.length).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(0, beanNames.length). }
false;public;0;17;;@Test public void genericsBasedInjectionWithLateGenericsMatchingAndRawFactoryMethod() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawFactoryMethodRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]). }
false;public;0;16;;@Test public void genericsBasedInjectionWithEarlyGenericsMatchingAndRawInstance() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawInstanceRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]). }
false;public;0;17;;@Test public void genericsBasedInjectionWithLateGenericsMatchingAndRawInstance() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawInstanceRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]). }
false;public;0;23;;@Test public void genericsBasedInjectionWithEarlyGenericsMatchingOnCglibProxy() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setProxyTargetClass(true).     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isCglibProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;24;;@Test public void genericsBasedInjectionWithLateGenericsMatchingOnCglibProxy() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setProxyTargetClass(true).     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isCglibProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;24;;@Test public void genericsBasedInjectionWithLateGenericsMatchingOnCglibProxyAndRawFactoryMethod() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawFactoryMethodRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setProxyTargetClass(true).     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isCglibProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;24;;@Test public void genericsBasedInjectionWithLateGenericsMatchingOnCglibProxyAndRawInstance() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawInstanceRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setProxyTargetClass(true).     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(Repository.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(Repository.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isCglibProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;22;;@Test public void genericsBasedInjectionWithEarlyGenericsMatchingOnJdkProxy() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     String[] beanNames = beanFactory.getBeanNamesForType(RepositoryInterface.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isJdkDynamicProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;23;;@Test public void genericsBasedInjectionWithLateGenericsMatchingOnJdkProxy() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(RepositoryInterface.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isJdkDynamicProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;23;;@Test public void genericsBasedInjectionWithLateGenericsMatchingOnJdkProxyAndRawFactoryMethod() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawFactoryMethodRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(RepositoryInterface.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isJdkDynamicProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;23;;@Test public void genericsBasedInjectionWithLateGenericsMatchingOnJdkProxyAndRawInstance() {     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawInstanceRepositoryConfiguration.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator().     autoProxyCreator.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(autoProxyCreator).     beanFactory.registerSingleton("traceInterceptor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor())).     beanFactory.preInstantiateSingletons().     String[] beanNames = beanFactory.getBeanNamesForType(RepositoryInterface.class).     assertTrue(ObjectUtils.containsElement(beanNames, "stringRepo")).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     beanNames = beanFactory.getBeanNamesForType(ResolvableType.forClassWithGenerics(RepositoryInterface.class, String.class)).     assertEquals(1, beanNames.length).     assertEquals("stringRepo", beanNames[0]).     assertTrue(AopUtils.isJdkDynamicProxy(beanFactory.getBean("stringRepo"))). }
false;public;0;13;;@Test public void testSelfReferenceExclusionForFactoryMethodOnSameBean() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     beanFactory.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor()).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ConcreteConfig.class)).     beanFactory.registerBeanDefinition("serviceBeanProvider", new RootBeanDefinition(ServiceBeanProvider.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     beanFactory.getBean(ServiceBean.class). }
false;public;0;13;;@Test public void testConfigWithDefaultMethods() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     beanFactory.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor()).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ConcreteConfigWithDefaultMethods.class)).     beanFactory.registerBeanDefinition("serviceBeanProvider", new RootBeanDefinition(ServiceBeanProvider.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     beanFactory.getBean(ServiceBean.class). }
false;public;0;13;;@Test public void testConfigWithDefaultMethodsUsingAsm() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     beanFactory.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor()).     beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ConcreteConfigWithDefaultMethods.class.getName())).     beanFactory.registerBeanDefinition("serviceBeanProvider", new RootBeanDefinition(ServiceBeanProvider.class.getName())).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     beanFactory.preInstantiateSingletons().     beanFactory.getBean(ServiceBean.class). }
false;public;0;16;;@Test public void testCircularDependency() {     AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor().     bpp.setBeanFactory(beanFactory).     beanFactory.addBeanPostProcessor(bpp).     beanFactory.registerBeanDefinition("configClass1", new RootBeanDefinition(A.class)).     beanFactory.registerBeanDefinition("configClass2", new RootBeanDefinition(AStrich.class)).     new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory).     try {         beanFactory.preInstantiateSingletons().         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         assertTrue(ex.getMessage().contains("Circular reference")).     } }
false;public;0;10;;@Test public void testCircularDependencyWithApplicationContext() {     try {         new AnnotationConfigApplicationContext(A.class, AStrich.class).         fail("Should have thrown BeanCreationException").     } catch (BeanCreationException ex) {         assertTrue(ex.getMessage().contains("Circular reference")).     } }
false;public;0;5;;@Test public void testPrototypeArgumentThroughBeanMethodCall() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanArgumentConfigWithPrototype.class).     ctx.getBean(FooFactory.class).createFoo(new BarArgument()). }
false;public;0;5;;@Test public void testSingletonArgumentThroughBeanMethodCall() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanArgumentConfigWithSingleton.class).     ctx.getBean(FooFactory.class).createFoo(new BarArgument()). }
false;public;0;5;;@Test public void testNullArgumentThroughBeanMethodCall() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanArgumentConfigWithNull.class).     ctx.getBean("aFoo"). }
false;public;0;5;;@Test public void testInjectionPointMatchForNarrowTargetReturnType() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(FooBarConfiguration.class).     assertSame(ctx.getBean(BarImpl.class), ctx.getBean(FooImpl.class).bar). }
false;public;0;8;;@Test public void testVarargOnBeanMethod() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(VarargConfiguration.class, TestBean.class).     VarargConfiguration bean = ctx.getBean(VarargConfiguration.class).     assertNotNull(bean.testBeans).     assertEquals(1, bean.testBeans.length).     assertSame(ctx.getBean(TestBean.class), bean.testBeans[0]). }
false;public;0;7;;@Test public void testEmptyVarargOnBeanMethod() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(VarargConfiguration.class).     VarargConfiguration bean = ctx.getBean(VarargConfiguration.class).     assertNotNull(bean.testBeans).     assertEquals(0, bean.testBeans.length). }
false;public;0;8;;@Test public void testCollectionArgumentOnBeanMethod() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(CollectionArgumentConfiguration.class, TestBean.class).     CollectionArgumentConfiguration bean = ctx.getBean(CollectionArgumentConfiguration.class).     assertNotNull(bean.testBeans).     assertEquals(1, bean.testBeans.size()).     assertSame(ctx.getBean(TestBean.class), bean.testBeans.get(0)). }
false;public;0;7;;@Test public void testEmptyCollectionArgumentOnBeanMethod() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(CollectionArgumentConfiguration.class).     CollectionArgumentConfiguration bean = ctx.getBean(CollectionArgumentConfiguration.class).     assertNotNull(bean.testBeans).     assertTrue(bean.testBeans.isEmpty()). }
false;public;0;8;;@Test public void testMapArgumentOnBeanMethod() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(MapArgumentConfiguration.class, DummyRunnable.class).     MapArgumentConfiguration bean = ctx.getBean(MapArgumentConfiguration.class).     assertNotNull(bean.testBeans).     assertEquals(1, bean.testBeans.size()).     assertSame(ctx.getBean(Runnable.class), bean.testBeans.values().iterator().next()). }
false;public;0;7;;@Test public void testEmptyMapArgumentOnBeanMethod() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(MapArgumentConfiguration.class).     MapArgumentConfiguration bean = ctx.getBean(MapArgumentConfiguration.class).     assertNotNull(bean.testBeans).     assertTrue(bean.testBeans.isEmpty()). }
false;public;0;8;;@Test public void testCollectionInjectionFromSameConfigurationClass() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(CollectionInjectionConfiguration.class).     CollectionInjectionConfiguration bean = ctx.getBean(CollectionInjectionConfiguration.class).     assertNotNull(bean.testBeans).     assertEquals(1, bean.testBeans.size()).     assertSame(ctx.getBean(TestBean.class), bean.testBeans.get(0)). }
false;public;0;8;;@Test public void testMapInjectionFromSameConfigurationClass() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(MapInjectionConfiguration.class).     MapInjectionConfiguration bean = ctx.getBean(MapInjectionConfiguration.class).     assertNotNull(bean.testBeans).     assertEquals(1, bean.testBeans.size()).     assertSame(ctx.getBean(Runnable.class), bean.testBeans.get("testBean")). }
false;public;0;7;;@Test public void testBeanLookupFromSameConfigurationClass() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanLookupConfiguration.class).     BeanLookupConfiguration bean = ctx.getBean(BeanLookupConfiguration.class).     assertNotNull(bean.getTestBean()).     assertSame(ctx.getBean(TestBean.class), bean.getTestBean()). }
false;public;0;5;;@Test(expected = BeanDefinitionStoreException.class) public void testNameClashBetweenConfigurationClassAndBean() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(MyTestBean.class).     ctx.getBean("myTestBean", TestBean.class). }
false;public;0;5;;@Test public void testBeanDefinitionRegistryPostProcessorConfig() {     ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanDefinitionRegistryPostProcessorConfig.class).     assertTrue(ctx.getBean("myTestBean") instanceof TestBean). }
false;public;0;3;;@Bean public Foo foo() {     return new Foo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(foo()). }
false;public;0;3;;@Bean public ExtendedFoo foo() {     return new ExtendedFoo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(foo()). }
false;public;0;3;;@Bean public ExtendedAgainFoo foo() {     return new ExtendedAgainFoo(). }
false;public;0;3;;@Bean public Foo foo() {     return new Foo(). }
false;public;0;3;;@Bean public Foo foo() {     return new Foo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(foo()). }
false;public;0;3;;@Bean public ExtendedFoo foo() {     return new ExtendedFoo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(foo()). }
false;public;0;3;;@Bean public Foo foo() {     return new Foo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(foo()). }
false;public;0;3;;@Bean public ExtendedFoo foo() {     return new ExtendedFoo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(foo()). }
false;public;0;3;;@Bean public Foo foo() {     return new Foo(). }
false;public;0;3;;@Bean public Bar bar() {     return new Bar(new Foo()). }
false;public;0;4;;@Bean @Lazy @Scope(proxyMode = ScopedProxyMode.INTERFACES) public ITestBean scopedClass() {     return new TestBean(). }
false;;0;1;;String toString().
false;public;0;4;;@Override public T getObject() {     throw new IllegalStateException(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return Object.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;4;;@Override public String toString() {     return "Repository<String>". }
false;public;0;9;;@Bean public Repository<String> stringRepo() {     return new Repository<String>() {          @Override         public String toString() {             return "Repository<String>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<Integer>". }
false;public;0;9;;@Bean public Repository<Integer> integerRepo() {     return new Repository<Integer>() {          @Override         public String toString() {             return "Repository<Integer>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<Object>". }
false;public;0;9;;@Bean public Repository<?> genericRepo() {     return new Repository<Object>() {          @Override         public String toString() {             return "Repository<Object>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<String>". }
false;public;0;9;;@Bean public Repository stringRepo() {     return new Repository<String>() {          @Override         public String toString() {             return "Repository<String>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<String>". }
false;public;0;10;;@SuppressWarnings({ "rawtypes", "unchecked" }) @Bean public Repository<String> stringRepo() {     return new Repository() {          @Override         public String toString() {             return "Repository<String>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<String>". }
false;public;0;10;;@Bean @Scope("prototype") public Repository<String> stringRepo() {     return new Repository<String>() {          @Override         public String toString() {             return "Repository<String>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<Integer>". }
false;public;0;10;;@Bean @Scope("prototype") public Repository<Integer> integerRepo() {     return new Repository<Integer>() {          @Override         public String toString() {             return "Repository<Integer>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<Object>". }
false;public;0;11;;@Bean @Scope("prototype") @SuppressWarnings("rawtypes") public Repository genericRepo() {     return new Repository<Object>() {          @Override         public String toString() {             return "Repository<Object>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<String>". }
false;public;0;10;;@Bean @Scope(scopeName = "prototype", proxyMode = ScopedProxyMode.TARGET_CLASS) public Repository<String> stringRepo() {     return new Repository<String>() {          @Override         public String toString() {             return "Repository<String>".         }     }. }
false;public;0;4;;@Override public String toString() {     return "Repository<Integer>". }
false;public;0;10;;@Bean @PrototypeScoped public Repository<Integer> integerRepo() {     return new Repository<Integer>() {          @Override         public String toString() {             return "Repository<Integer>".         }     }. }
false;public;0;4;;@Bean public Repository<Object> genericRepo() {     return new GenericRepository<>(). }
false;public;0;4;;@Bean public RepositoryFactoryBean<Object> repoFactoryBean() {     return new RepositoryFactoryBean<>(). }
false;public;0;4;;@Bean public FactoryBean<Object> nullFactoryBean() {     return null. }
false;public;0;5;;@Bean @SuppressWarnings("rawtypes") public Repository rawRepo() {     return new Repository(). }
false;public;1;4;;@Bean public Object repoConsumer(Repository<String> repo) {     return repo. }
false;public;0;5;;@Bean @SuppressWarnings("rawtypes") public Repository<?> genericRepo() {     return new Repository(). }
false;public;1;4;;@Bean public Object repoConsumer(Repository<String> repo) {     return repo. }
false;public;0;4;;@Bean public Repository<? extends String> stringRepo() {     return new Repository<>(). }
false;public;0;4;;@Bean public Repository<? extends Number> numberRepo() {     return new Repository<>(). }
false;public;1;4;;@Bean public Object repoConsumer(Repository<? extends String> repo) {     return repo. }
false;public;0;4;;@Bean public Repository<? extends Object> genericRepo() {     return new Repository<String>(). }
false;public;0;4;;@Bean public Repository<? extends Number> numberRepo() {     return new Repository<>(). }
false;public;1;4;;@Bean public Object repoConsumer(Repository<String> repo) {     return repo. }
false;public;0;3;;public String getParameter() {     return parameter. }
false;public;0;4;;@Bean public ServiceBean serviceBean() {     return provider().getServiceBean(). }
false;public;0;4;;@Bean public ServiceBeanProvider provider() {     return new ServiceBeanProvider(). }
false;public;0;5;;@Bean @Override public ServiceBeanProvider provider() {     return provider. }
false;public;0;4;;@PostConstruct public void validate() {     Assert.notNull(provider, "No ServiceBeanProvider injected"). }
false;;0;1;;ServiceBean serviceBean().
false;default;0;4;;@Bean default ServiceBeanProvider provider() {     return new ServiceBeanProvider(). }
false;default;0;5;;@Bean @Override default ServiceBean serviceBean() {     return provider().getServiceBean(). }
false;public;0;5;;@Bean @Override public ServiceBeanProvider provider() {     return provider. }
false;public;0;4;;@PostConstruct public void validate() {     Assert.notNull(provider, "No ServiceBeanProvider injected"). }
false;public;0;3;;public ServiceBean getServiceBean() {     return new ServiceBean("message"). }
false;public;0;7;;@Bean public B b() {     if (z == null) {         throw new NullPointerException("z is null").     }     return new B(z). }
false;public;0;4;;@Bean public Z z() {     return new Z(). }
false;public;1;5;;@Bean @Scope("prototype") public DependingFoo foo(BarArgument bar) {     return new DependingFoo(bar). }
false;public;1;4;;@Override public DependingFoo createFoo(BarArgument bar) {     return foo(bar). }
false;public;0;9;;@Bean public FooFactory fooFactory() {     return new FooFactory() {          @Override         public DependingFoo createFoo(BarArgument bar) {             return foo(bar).         }     }. }
false;public;1;4;;@Bean @Lazy public DependingFoo foo(BarArgument bar) {     return new DependingFoo(bar). }
false;public;1;4;;@Override public DependingFoo createFoo(BarArgument bar) {     return foo(bar). }
false;public;0;9;;@Bean public FooFactory fooFactory() {     return new FooFactory() {          @Override         public DependingFoo createFoo(BarArgument bar) {             return foo(bar).         }     }. }
false;public;0;4;;@Bean public DependingFoo aFoo() {     return foo(null). }
false;public;1;4;;@Bean @Lazy public DependingFoo foo(BarArgument bar) {     return new DependingFoo(bar). }
false;public;0;4;;@Bean public BarArgument bar() {     return new BarArgument(). }
false;abstract;1;1;;abstract DependingFoo createFoo(BarArgument bar).
false;public;0;4;;@Bean public BarInterface bar() {     return new BarImpl(). }
false;public;0;4;;@Bean public FooImpl foo() {     return new FooImpl(). }
false;public;0;4;;@Override public void run() { /* no-op */ }
false;public;1;5;;@Bean(autowireCandidate = false) public TestBean thing(TestBean... testBeans) {     this.testBeans = testBeans.     return new TestBean(). }
false;public;1;5;;@Bean(autowireCandidate = false) public TestBean thing(List<TestBean> testBeans) {     this.testBeans = testBeans.     return new TestBean(). }
false;;3;9;;@Bean(autowireCandidate = false) Runnable testBean(Map<String, Runnable> testBeans, @Qualifier("systemProperties") Map<String, String> sysprops, @Qualifier("systemEnvironment") Map<String, String> sysenv) {     this.testBeans = testBeans.     assertSame(env.getSystemProperties(), sysprops).     assertSame(env.getSystemEnvironment(), sysenv).     return () -> {     }. }
true;private;1;3;// Unrelated, not to be considered as a factory method ;// Unrelated, not to be considered as a factory method private boolean testBean(boolean param) {     return param. }
false;public;0;4;;@Bean public TestBean thing() {     return new TestBean(). }
false;;0;4;;@Bean Runnable testBean() {     return () -> {     }. }
true;private;1;3;// Unrelated, not to be considered as a factory method ;// Unrelated, not to be considered as a factory method private boolean testBean(boolean param) {     return param. }
false;public;0;4;;@Bean public TestBean thing() {     return new TestBean(). }
false;public,abstract;0;2;;@Lookup public abstract TestBean getTestBean().
false;public;1;4;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {     registry.registerBeanDefinition("myTestBean", new RootBeanDefinition(TestBean.class)). }
false;public;1;3;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) { }
false;public,static;0;12;;@Bean public static BeanDefinitionRegistryPostProcessor bdrpp() {     return new BeanDefinitionRegistryPostProcessor() {          @Override         public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {             registry.registerBeanDefinition("myTestBean", new RootBeanDefinition(TestBean.class)).         }          @Override         public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {         }     }. }
