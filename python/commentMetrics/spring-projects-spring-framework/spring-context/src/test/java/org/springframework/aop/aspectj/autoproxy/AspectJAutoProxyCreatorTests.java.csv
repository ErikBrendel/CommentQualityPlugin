commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testAspectsAreApplied() {     ClassPathXmlApplicationContext bf = newContext("aspects.xml").     ITestBean tb = (ITestBean) bf.getBean("adrian").     assertEquals(68, tb.getAge()).     MethodInvokingFactoryBean factoryBean = (MethodInvokingFactoryBean) bf.getBean("&factoryBean").     assertTrue(AopUtils.isAopProxy(factoryBean.getTargetObject())).     assertEquals(68, ((ITestBean) factoryBean.getTargetObject()).getAge()). }
false;public;0;8;;@Test public void testMultipleAspectsWithParameterApplied() {     ClassPathXmlApplicationContext bf = newContext("aspects.xml").     ITestBean tb = (ITestBean) bf.getBean("adrian").     tb.setAge(10).     assertEquals(20, tb.getAge()). }
false;public;0;7;;@Test public void testAspectsAreAppliedInDefinedOrder() {     ClassPathXmlApplicationContext bf = newContext("aspectsWithOrdering.xml").     ITestBean tb = (ITestBean) bf.getBean("adrian").     assertEquals(71, tb.getAge()). }
false;public;0;7;;@Test public void testAspectsAndAdvisorAreApplied() {     ClassPathXmlApplicationContext ac = newContext("aspectsPlusAdvisor.xml").     ITestBean shouldBeWeaved = (ITestBean) ac.getBean("adrian").     doTestAspectsAndAdvisorAreApplied(ac, shouldBeWeaved). }
false;public;0;21;;@Test public void testAspectsAndAdvisorAppliedToPrototypeIsFastEnough() {     Assume.group(TestGroup.PERFORMANCE).     Assume.notLogging(factoryLog).     ClassPathXmlApplicationContext ac = newContext("aspectsPlusAdvisor.xml").     StopWatch sw = new StopWatch().     sw.start("Prototype Creation").     for (int i = 0. i < 10000. i++) {         ITestBean shouldBeWeaved = (ITestBean) ac.getBean("adrian2").         if (i < 10) {             doTestAspectsAndAdvisorAreApplied(ac, shouldBeWeaved).         }     }     sw.stop().     // What's a reasonable expectation for _any_ server or developer machine load?     // 9 seconds?     assertStopWatchTimeLimit(sw, 9000). }
false;public;0;21;;@Test public void testAspectsAndAdvisorNotAppliedToPrototypeIsFastEnough() {     Assume.group(TestGroup.PERFORMANCE).     Assume.notLogging(factoryLog).     ClassPathXmlApplicationContext ac = newContext("aspectsPlusAdvisor.xml").     StopWatch sw = new StopWatch().     sw.start("Prototype Creation").     for (int i = 0. i < 100000. i++) {         INestedTestBean shouldNotBeWeaved = (INestedTestBean) ac.getBean("i21").         if (i < 10) {             assertFalse(AopUtils.isAopProxy(shouldNotBeWeaved)).         }     }     sw.stop().     // What's a reasonable expectation for _any_ server or developer machine load?     // 3 seconds?     assertStopWatchTimeLimit(sw, 6000). }
false;public;0;21;;@Test public void testAspectsAndAdvisorNotAppliedToManySingletonsIsFastEnough() {     Assume.group(TestGroup.PERFORMANCE).     Assume.notLogging(factoryLog).     GenericApplicationContext ac = new GenericApplicationContext().     new XmlBeanDefinitionReader(ac).loadBeanDefinitions(new ClassPathResource(qName("aspectsPlusAdvisor.xml"), getClass())).     for (int i = 0. i < 10000. i++) {         ac.registerBeanDefinition("singleton" + i, new RootBeanDefinition(NestedTestBean.class)).     }     StopWatch sw = new StopWatch().     sw.start("Singleton Creation").     ac.refresh().     sw.stop().     // What's a reasonable expectation for _any_ server or developer machine load?     // 8 seconds?     assertStopWatchTimeLimit(sw, 8000). }
false;public;0;19;;@Test public void testAspectsAndAdvisorAreAppliedEvenIfComingFromParentFactory() {     ClassPathXmlApplicationContext ac = newContext("aspectsPlusAdvisor.xml").     GenericApplicationContext childAc = new GenericApplicationContext(ac).     // Create a child factory with a bean that should be woven     RootBeanDefinition bd = new RootBeanDefinition(TestBean.class).     bd.getPropertyValues().addPropertyValue(new PropertyValue("name", "Adrian")).addPropertyValue(new PropertyValue("age", 34)).     childAc.registerBeanDefinition("adrian2", bd).     // Register the advisor auto proxy creator with subclass     childAc.registerBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class.getName(), new RootBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class)).     childAc.refresh().     ITestBean beanFromChildContextThatShouldBeWeaved = (ITestBean) childAc.getBean("adrian2").     // testAspectsAndAdvisorAreApplied(childAc, (ITestBean) ac.getBean("adrian")).     doTestAspectsAndAdvisorAreApplied(childAc, beanFromChildContextThatShouldBeWeaved). }
false;protected;2;16;;protected void doTestAspectsAndAdvisorAreApplied(ApplicationContext ac, ITestBean shouldBeWeaved) {     TestBeanAdvisor tba = (TestBeanAdvisor) ac.getBean("advisor").     MultiplyReturnValue mrv = (MultiplyReturnValue) ac.getBean("aspect").     assertEquals(3, mrv.getMultiple()).     tba.count = 0.     mrv.invocations = 0.     assertTrue("Autoproxying must apply from @AspectJ aspect", AopUtils.isAopProxy(shouldBeWeaved)).     assertEquals("Adrian", shouldBeWeaved.getName()).     assertEquals(0, mrv.invocations).     assertEquals(34 * mrv.getMultiple(), shouldBeWeaved.getAge()).     assertEquals("Spring advisor must be invoked", 2, tba.count).     assertEquals("Must be able to hold state in aspect", 1, mrv.invocations). }
false;public;0;19;;@Test public void testPerThisAspect() {     ClassPathXmlApplicationContext bf = newContext("perthis.xml").     ITestBean adrian1 = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian1)).     assertEquals(0, adrian1.getAge()).     assertEquals(1, adrian1.getAge()).     ITestBean adrian2 = (ITestBean) bf.getBean("adrian").     assertNotSame(adrian1, adrian2).     assertTrue(AopUtils.isAopProxy(adrian1)).     assertEquals(0, adrian2.getAge()).     assertEquals(1, adrian2.getAge()).     assertEquals(2, adrian2.getAge()).     assertEquals(3, adrian2.getAge()).     assertEquals(2, adrian1.getAge()). }
false;public;0;35;;@Test public void testPerTargetAspect() throws SecurityException, NoSuchMethodException {     ClassPathXmlApplicationContext bf = newContext("pertarget.xml").     ITestBean adrian1 = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian1)).     // Does not trigger advice or count     int explicitlySetAge = 25.     adrian1.setAge(explicitlySetAge).     assertEquals("Setter does not initiate advice", explicitlySetAge, adrian1.getAge()).     // Fire aspect     AspectMetadata am = new AspectMetadata(PerTargetAspect.class, "someBean").     assertTrue(am.getPerClausePointcut().getMethodMatcher().matches(TestBean.class.getMethod("getSpouse"), null)).     adrian1.getSpouse().     assertEquals("Advice has now been instantiated", 0, adrian1.getAge()).     adrian1.setAge(11).     assertEquals("Any int setter increments", 2, adrian1.getAge()).     adrian1.setName("Adrian").     // assertEquals("Any other setter does not increment", 2, adrian1.getAge()).     ITestBean adrian2 = (ITestBean) bf.getBean("adrian").     assertNotSame(adrian1, adrian2).     assertTrue(AopUtils.isAopProxy(adrian1)).     assertEquals(34, adrian2.getAge()).     adrian2.getSpouse().     assertEquals("Aspect now fired", 0, adrian2.getAge()).     assertEquals(1, adrian2.getAge()).     assertEquals(2, adrian2.getAge()).     assertEquals(3, adrian1.getAge()). }
false;public;0;7;;@Test public void testTwoAdviceAspect() {     ClassPathXmlApplicationContext bf = newContext("twoAdviceAspect.xml").     ITestBean adrian1 = (ITestBean) bf.getBean("adrian").     testAgeAspect(adrian1, 0, 2). }
false;public;0;10;;@Test public void testTwoAdviceAspectSingleton() {     ClassPathXmlApplicationContext bf = newContext("twoAdviceAspectSingleton.xml").     ITestBean adrian1 = (ITestBean) bf.getBean("adrian").     testAgeAspect(adrian1, 0, 1).     ITestBean adrian2 = (ITestBean) bf.getBean("adrian").     assertNotSame(adrian1, adrian2).     testAgeAspect(adrian2, 2, 1). }
false;public;0;10;;@Test public void testTwoAdviceAspectPrototype() {     ClassPathXmlApplicationContext bf = newContext("twoAdviceAspectPrototype.xml").     ITestBean adrian1 = (ITestBean) bf.getBean("adrian").     testAgeAspect(adrian1, 0, 1).     ITestBean adrian2 = (ITestBean) bf.getBean("adrian").     assertNotSame(adrian1, adrian2).     testAgeAspect(adrian2, 0, 1). }
false;private;3;10;;private void testAgeAspect(ITestBean adrian, int start, int increment) {     assertTrue(AopUtils.isAopProxy(adrian)).     adrian.setName("").     assertEquals(start, adrian.age()).     int newAge = 32.     adrian.setAge(newAge).     assertEquals(start + increment, adrian.age()).     adrian.setAge(0).     assertEquals(start + increment * 2, adrian.age()). }
false;public;0;11;;@Test public void testAdviceUsingJoinPoint() {     ClassPathXmlApplicationContext bf = newContext("usesJoinPointAspect.xml").     ITestBean adrian1 = (ITestBean) bf.getBean("adrian").     adrian1.getAge().     AdviceUsingThisJoinPoint aspectInstance = (AdviceUsingThisJoinPoint) bf.getBean("aspect").     // (AdviceUsingThisJoinPoint) Aspects.aspectOf(AdviceUsingThisJoinPoint.class).     // assertEquals("method-execution(int TestBean.getAge())",aspectInstance.getLastMethodEntered()).     assertTrue(aspectInstance.getLastMethodEntered().indexOf("TestBean.getAge())") != 0). }
false;public;0;8;;@Test public void testIncludeMechanism() {     ClassPathXmlApplicationContext bf = newContext("usesInclude.xml").     ITestBean adrian = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian)).     assertEquals(68, adrian.getAge()). }
false;public;0;8;;@Test public void testForceProxyTargetClass() {     ClassPathXmlApplicationContext bf = newContext("aspectsWithCGLIB.xml").     ProxyConfig pc = (ProxyConfig) bf.getBean(AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME).     assertTrue("should be proxying classes", pc.isProxyTargetClass()).     assertTrue("should expose proxy", pc.isExposeProxy()). }
false;public;0;8;;@Test public void testWithAbstractFactoryBeanAreApplied() {     ClassPathXmlApplicationContext bf = newContext("aspectsWithAbstractBean.xml").     ITestBean adrian = (ITestBean) bf.getBean("adrian").     assertTrue(AopUtils.isAopProxy(adrian)).     assertEquals(68, adrian.getAge()). }
false;public;0;12;;@Test public void testRetryAspect() {     ClassPathXmlApplicationContext bf = newContext("retryAspect.xml").     UnreliableBean bean = (UnreliableBean) bf.getBean("unreliableBean").     RetryAspect aspect = (RetryAspect) bf.getBean("retryAspect").     int attempts = bean.unreliable().     assertEquals(2, attempts).     assertEquals(2, aspect.getBeginCalls()).     assertEquals(1, aspect.getRollbackCalls()).     assertEquals(1, aspect.getCommitCalls()). }
false;public;0;7;;@Test public void testWithBeanNameAutoProxyCreator() {     ClassPathXmlApplicationContext bf = newContext("withBeanNameAutoProxyCreator.xml").     ITestBean tb = (ITestBean) bf.getBean("adrian").     assertEquals(68, tb.getAge()). }
true;private;1;3;/**  * Returns a new {@link ClassPathXmlApplicationContext} for the file ending in <var>fileSuffix</var>.  */ ;/**  * Returns a new {@link ClassPathXmlApplicationContext} for the file ending in <var>fileSuffix</var>.  */ private ClassPathXmlApplicationContext newContext(String fileSuffix) {     return new ClassPathXmlApplicationContext(qName(fileSuffix), getClass()). }
true;private;1;3;/**  * Returns the relatively qualified name for <var>fileSuffix</var>.  * e.g. for a fileSuffix='foo.xml', this method will return  * 'AspectJAutoProxyCreatorTests-foo.xml'  */ ;/**  * Returns the relatively qualified name for <var>fileSuffix</var>.  * e.g. for a fileSuffix='foo.xml', this method will return  * 'AspectJAutoProxyCreatorTests-foo.xml'  */ private String qName(String fileSuffix) {     return String.format("%s-%s", getClass().getSimpleName(), fileSuffix). }
false;private;2;5;;private void assertStopWatchTimeLimit(final StopWatch sw, final long maxTimeMillis) {     long totalTimeMillis = sw.getTotalTimeMillis().     assertTrue("'" + sw.getLastTaskName() + "' took too long: expected less than<" + maxTimeMillis + "> ms, actual<" + totalTimeMillis + "> ms.", totalTimeMillis < maxTimeMillis). }
false;public;0;4;;@Around("execution(int *.getAge())") public int returnCountAsAge() {     return count++. }
false;public;0;4;;@Before("execution(void *.set*(int))") public void countSetter() {     ++count. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;3;;public String getLastMethodEntered() {     return this.lastEntry. }
false;public;0;3;;@Pointcut("execution(* *(..))") public void methodExecution() { }
false;public;1;4;;@Before("methodExecution()") public void entryTrace(JoinPoint jp) {     this.lastEntry = jp.toString(). }
false;public;1;4;;@Around("execution(* setAge(int))") public Object test(ProceedingJoinPoint pjp) throws Throwable {     return pjp.proceed(). }
false;public;2;4;;@Around("execution(* setAge(int)) && args(age)") public Object test(ProceedingJoinPoint pjp, int age) throws Throwable {     return pjp.proceed(). }
false;public;0;4;;@Override public Object getObject() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public boolean isSingleton() {     throw new UnsupportedOperationException(). }
false;public;1;5;;@Around("execution(int *.getAge())") public Object doubleReturnValue(ProceedingJoinPoint pjp) throws Throwable {     int result = (Integer) pjp.proceed().     return result + 3. }
false;public;1;3;;public void setMultiple(int multiple) {     this.multiple = multiple. }
false;public;0;3;;public int getMultiple() {     return this.multiple. }
false;public;1;6;;@Around("execution(int *.getAge())") public Object doubleReturnValue(ProceedingJoinPoint pjp) throws Throwable {     ++this.invocations.     int result = (Integer) pjp.proceed().     return result * this.multiple. }
false;public;1;3;;public void setMultiple(int multiple) {     this.multiple = multiple. }
false;public;0;3;;public int getMultiple() {     return this.multiple. }
false;public;1;6;;@Around("@annotation(org.springframework.aop.aspectj.autoproxy.Marker)") public Object doubleReturnValue(ProceedingJoinPoint pjp) throws Throwable {     ++this.invocations.     int result = (Integer) pjp.proceed().     return result * this.multiple. }
false;;0;3;;@Marker @Override int getAge().
false;public;0;5;;@Marker @Override public int getAge() {     return super.getAge(). }
false;public;0;3;;@Pointcut("execution(public * UnreliableBean.*(..))") public void execOfPublicMethod() { }
true;public;1;23;/**  * Retry Advice  */ ;/**  * Retry Advice  */ @Around("execOfPublicMethod()") public Object retry(ProceedingJoinPoint jp) throws Throwable {     boolean retry = true.     Object o = null.     while (retry) {         try {             retry = false.             this.beginCalls++.             try {                 o = jp.proceed().                 this.commitCalls++.             } catch (RetryableException re) {                 this.rollbackCalls++.                 throw re.             }         } catch (RetryableException re) {             retry = true.         }     }     return o. }
false;public;0;3;;public int getBeginCalls() {     return this.beginCalls. }
false;public;0;3;;public int getCommitCalls() {     return this.commitCalls. }
false;public;0;3;;public int getRollbackCalls() {     return this.rollbackCalls. }
false;public;0;7;;public int unreliable() {     this.calls++.     if (this.calls % 2 != 0) {         throw new RetryableException("foo").     }     return this.calls. }
false;public;3;4;;@Override public void before(Method method, Object[] args, @Nullable Object target) throws Throwable {     ++count. }
false;public;2;4;;@Override public boolean matches(Method method, @Nullable Class<?> targetClass) {     return ITestBean.class.isAssignableFrom(targetClass). }
