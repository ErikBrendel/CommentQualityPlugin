# id;timestamp;commentText;codeText;commentWords;codeWords
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1362408075;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		exporter.afterPropertiesSet()__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,exporter,after,properties,set
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1402388547;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		start(exporter)__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,start,exporter
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1404769827;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		start(exporter)__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,start,exporter
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1423471263;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		start(exporter)__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,start,exporter
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1467726769;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		start(exporter)__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,start,exporter
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1467730834;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		start(exporter)__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,start,exporter
MBeanExporterTests -> @Test 	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1469546119;SPR-3302;@Test_	public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		start(exporter)__	};spr,3302;test,public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,start,exporter
MBeanExporterTests -> public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1328020251;Want to ensure that said MBean is not exported twice.;public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		exporter.afterPropertiesSet()__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,exporter,after,properties,set,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1351167990;Want to ensure that said MBean is not exported twice.;public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		exporter.afterPropertiesSet()__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,exporter,after,properties,set,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1356735495;Want to ensure that said MBean is not exported twice.;public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		exporter.afterPropertiesSet()__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,exporter,after,properties,set,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1357119417;Want to ensure that said MBean is not exported twice.;public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		exporter.afterPropertiesSet()__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,exporter,after,properties,set,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception;1328020251;Fails if JVM platform MBean server has been started already_public void testWithLocatedMBeanServer() throws Exception {_MBeanExporter adaptor = new MBeanExporter()__adaptor.setBeans(getBeanMap())__adaptor.afterPropertiesSet()__assertIsRegistered("The bean was not registered with the MBeanServer", ObjectNameManager.getInstance(OBJECT_NAME))__server.unregisterMBean(new ObjectName(OBJECT_NAME))_;public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception {_		Map<String, Object> map = new HashMap<String, Object>()__		map.put("spring:name=dynBean", new TestDynamicMBean())___		InvokeDetectAssembler asm = new InvokeDetectAssembler()___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(server)__		exporter.setBeans(map)__		exporter.setAssembler(asm)__		exporter.afterPropertiesSet()___		Object name = server.getAttribute(ObjectNameManager.getInstance("spring:name=dynBean"), "Name")__		assertEquals("The name attribute is incorrect", "Rob Harrop", name)__		assertFalse("Assembler should not have been invoked", asm.invoked)__	};fails,if,jvm,platform,mbean,server,has,been,started,already,public,void,test,with,located,mbean,server,throws,exception,mbean,exporter,adaptor,new,mbean,exporter,adaptor,set,beans,get,bean,map,adaptor,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,server,unregister,mbean,new,object,name;public,void,test,user,created,mbean,reg,with,dynamic,mbean,throws,exception,map,string,object,map,new,hash,map,string,object,map,put,spring,name,dyn,bean,new,test,dynamic,mbean,invoke,detect,assembler,asm,new,invoke,detect,assembler,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,server,exporter,set,beans,map,exporter,set,assembler,asm,exporter,after,properties,set,object,name,server,get,attribute,object,name,manager,get,instance,spring,name,dyn,bean,name,assert,equals,the,name,attribute,is,incorrect,rob,harrop,name,assert,false,assembler,should,not,have,been,invoked,asm,invoked
MBeanExporterTests -> public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception;1351167990;Fails if JVM platform MBean server has been started already_public void testWithLocatedMBeanServer() throws Exception {_MBeanExporter adaptor = new MBeanExporter()__adaptor.setBeans(getBeanMap())__adaptor.afterPropertiesSet()__assertIsRegistered("The bean was not registered with the MBeanServer", ObjectNameManager.getInstance(OBJECT_NAME))__server.unregisterMBean(new ObjectName(OBJECT_NAME))_;public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception {_		Map<String, Object> map = new HashMap<String, Object>()__		map.put("spring:name=dynBean", new TestDynamicMBean())___		InvokeDetectAssembler asm = new InvokeDetectAssembler()___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(server)__		exporter.setBeans(map)__		exporter.setAssembler(asm)__		exporter.afterPropertiesSet()___		Object name = server.getAttribute(ObjectNameManager.getInstance("spring:name=dynBean"), "Name")__		assertEquals("The name attribute is incorrect", "Rob Harrop", name)__		assertFalse("Assembler should not have been invoked", asm.invoked)__	};fails,if,jvm,platform,mbean,server,has,been,started,already,public,void,test,with,located,mbean,server,throws,exception,mbean,exporter,adaptor,new,mbean,exporter,adaptor,set,beans,get,bean,map,adaptor,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,server,unregister,mbean,new,object,name;public,void,test,user,created,mbean,reg,with,dynamic,mbean,throws,exception,map,string,object,map,new,hash,map,string,object,map,put,spring,name,dyn,bean,new,test,dynamic,mbean,invoke,detect,assembler,asm,new,invoke,detect,assembler,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,server,exporter,set,beans,map,exporter,set,assembler,asm,exporter,after,properties,set,object,name,server,get,attribute,object,name,manager,get,instance,spring,name,dyn,bean,name,assert,equals,the,name,attribute,is,incorrect,rob,harrop,name,assert,false,assembler,should,not,have,been,invoked,asm,invoked
MBeanExporterTests -> public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception;1356735495;Fails if JVM platform MBean server has been started already_public void testWithLocatedMBeanServer() throws Exception {_MBeanExporter adaptor = new MBeanExporter()__adaptor.setBeans(getBeanMap())__adaptor.afterPropertiesSet()__assertIsRegistered("The bean was not registered with the MBeanServer", ObjectNameManager.getInstance(OBJECT_NAME))__server.unregisterMBean(new ObjectName(OBJECT_NAME))_;public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception {_		Map<String, Object> map = new HashMap<String, Object>()__		map.put("spring:name=dynBean", new TestDynamicMBean())___		InvokeDetectAssembler asm = new InvokeDetectAssembler()___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(server)__		exporter.setBeans(map)__		exporter.setAssembler(asm)__		exporter.afterPropertiesSet()___		Object name = server.getAttribute(ObjectNameManager.getInstance("spring:name=dynBean"), "Name")__		assertEquals("The name attribute is incorrect", "Rob Harrop", name)__		assertFalse("Assembler should not have been invoked", asm.invoked)__	};fails,if,jvm,platform,mbean,server,has,been,started,already,public,void,test,with,located,mbean,server,throws,exception,mbean,exporter,adaptor,new,mbean,exporter,adaptor,set,beans,get,bean,map,adaptor,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,server,unregister,mbean,new,object,name;public,void,test,user,created,mbean,reg,with,dynamic,mbean,throws,exception,map,string,object,map,new,hash,map,string,object,map,put,spring,name,dyn,bean,new,test,dynamic,mbean,invoke,detect,assembler,asm,new,invoke,detect,assembler,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,server,exporter,set,beans,map,exporter,set,assembler,asm,exporter,after,properties,set,object,name,server,get,attribute,object,name,manager,get,instance,spring,name,dyn,bean,name,assert,equals,the,name,attribute,is,incorrect,rob,harrop,name,assert,false,assembler,should,not,have,been,invoked,asm,invoked
MBeanExporterTests -> public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception;1357119417;Fails if JVM platform MBean server has been started already_public void testWithLocatedMBeanServer() throws Exception {_MBeanExporter adaptor = new MBeanExporter()__adaptor.setBeans(getBeanMap())__adaptor.afterPropertiesSet()__assertIsRegistered("The bean was not registered with the MBeanServer", ObjectNameManager.getInstance(OBJECT_NAME))__server.unregisterMBean(new ObjectName(OBJECT_NAME))_;public void testUserCreatedMBeanRegWithDynamicMBean() throws Exception {_		Map<String, Object> map = new HashMap<String, Object>()__		map.put("spring:name=dynBean", new TestDynamicMBean())___		InvokeDetectAssembler asm = new InvokeDetectAssembler()___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(server)__		exporter.setBeans(map)__		exporter.setAssembler(asm)__		exporter.afterPropertiesSet()___		Object name = server.getAttribute(ObjectNameManager.getInstance("spring:name=dynBean"), "Name")__		assertEquals("The name attribute is incorrect", "Rob Harrop", name)__		assertFalse("Assembler should not have been invoked", asm.invoked)__	};fails,if,jvm,platform,mbean,server,has,been,started,already,public,void,test,with,located,mbean,server,throws,exception,mbean,exporter,adaptor,new,mbean,exporter,adaptor,set,beans,get,bean,map,adaptor,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,server,unregister,mbean,new,object,name;public,void,test,user,created,mbean,reg,with,dynamic,mbean,throws,exception,map,string,object,map,new,hash,map,string,object,map,put,spring,name,dyn,bean,new,test,dynamic,mbean,invoke,detect,assembler,asm,new,invoke,detect,assembler,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,server,exporter,set,beans,map,exporter,set,assembler,asm,exporter,after,properties,set,object,name,server,get,attribute,object,name,manager,get,instance,spring,name,dyn,bean,name,assert,equals,the,name,attribute,is,incorrect,rob,harrop,name,assert,false,assembler,should,not,have,been,invoked,asm,invoked
MBeanExporterTests -> public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1328020251;SPR-2158;public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(new MBeanExporterListener[] { listener })__		exporter.afterPropertiesSet()__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,new,mbean,exporter,listener,listener,exporter,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1351167990;SPR-2158;public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(new MBeanExporterListener[] { listener })__		exporter.afterPropertiesSet()__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,new,mbean,exporter,listener,listener,exporter,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1356735495;SPR-2158;public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(new MBeanExporterListener[] { listener })__		exporter.afterPropertiesSet()__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,new,mbean,exporter,listener,listener,exporter,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1357119417;SPR-2158;public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(new MBeanExporterListener[] { listener })__		exporter.afterPropertiesSet()__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,new,mbean,exporter,listener,listener,exporter,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1362408075;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(new MBeanExporterListener[] { listener })__		exporter.afterPropertiesSet()__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,new,mbean,exporter,listener,listener,exporter,after,properties,set,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1402388547;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(new MBeanExporterListener[] { listener })__		start(exporter)__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.stop()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,new,mbean,exporter,listener,listener,start,exporter,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,stop,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1404769827;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(listener)__		start(exporter)__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,listener,start,exporter,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1423471263;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(listener)__		start(exporter)__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,listener,start,exporter,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1467726769;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(listener)__		start(exporter)__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,listener,start,exporter,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1467730834;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(listener)__		start(exporter)__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,listener,start,exporter,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> @Test 	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception;1469546119;SPR-2158;@Test_	public void testMBeanIsNotUnregisteredSpuriouslyIfSomeExternalProcessHasUnregisteredMBean() throws Exception {_		MBeanExporter exporter = new MBeanExporter()__		exporter.setBeans(getBeanMap())__		exporter.setServer(this.server)__		MockMBeanExporterListener listener = new MockMBeanExporterListener()__		exporter.setListeners(listener)__		start(exporter)__		assertIsRegistered("The bean was not registered with the MBeanServer",_				ObjectNameManager.getInstance(OBJECT_NAME))___		this.server.unregisterMBean(new ObjectName(OBJECT_NAME))__		exporter.destroy()__		assertEquals("Listener should not have been invoked (MBean previously unregistered by external agent)", 0,_				listener.getUnregistered().size())__	};spr,2158;test,public,void,test,mbean,is,not,unregistered,spuriously,if,some,external,process,has,unregistered,mbean,throws,exception,mbean,exporter,exporter,new,mbean,exporter,exporter,set,beans,get,bean,map,exporter,set,server,this,server,mock,mbean,exporter,listener,listener,new,mock,mbean,exporter,listener,exporter,set,listeners,listener,start,exporter,assert,is,registered,the,bean,was,not,registered,with,the,mbean,server,object,name,manager,get,instance,this,server,unregister,mbean,new,object,name,exporter,destroy,assert,equals,listener,should,not,have,been,invoked,mbean,previously,unregistered,by,external,agent,0,listener,get,unregistered,size
MBeanExporterTests -> public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1328020251;SPR-3302;public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		exporter.afterPropertiesSet()__	};spr,3302;public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,exporter,after,properties,set
MBeanExporterTests -> public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1351167990;SPR-3302;public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		exporter.afterPropertiesSet()__	};spr,3302;public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,exporter,after,properties,set
MBeanExporterTests -> public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1356735495;SPR-3302;public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		exporter.afterPropertiesSet()__	};spr,3302;public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,exporter,after,properties,set
MBeanExporterTests -> public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception;1357119417;SPR-3302;public void testBeanNameCanBeUsedInNotificationListenersMap() throws Exception {_		String beanName = "charlesDexterWard"__		BeanDefinitionBuilder testBean = BeanDefinitionBuilder.rootBeanDefinition(JmxTestBean.class)___		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(beanName, testBean.getBeanDefinition())__		factory.preInstantiateSingletons()__		Object testBeanInstance = factory.getBean(beanName)___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put("test:what=ever", testBeanInstance)__		exporter.setBeans(beansToExport)__		exporter.setBeanFactory(factory)__		StubNotificationListener listener = new StubNotificationListener()__		exporter.setNotificationListenerMappings(Collections.singletonMap(beanName, listener))___		exporter.afterPropertiesSet()__	};spr,3302;public,void,test,bean,name,can,be,used,in,notification,listeners,map,throws,exception,string,bean,name,charles,dexter,ward,bean,definition,builder,test,bean,bean,definition,builder,root,bean,definition,jmx,test,bean,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,bean,name,test,bean,get,bean,definition,factory,pre,instantiate,singletons,object,test,bean,instance,factory,get,bean,bean,name,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,test,what,ever,test,bean,instance,exporter,set,beans,beans,to,export,exporter,set,bean,factory,factory,stub,notification,listener,listener,new,stub,notification,listener,exporter,set,notification,listener,mappings,collections,singleton,map,bean,name,listener,exporter,after,properties,set
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1362408075;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		exporter.afterPropertiesSet()__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,exporter,after,properties,set,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1402388547;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1404769827;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1423471263;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1467726769;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<String, Object>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,string,object,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1467730834;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1469546119;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1482159779;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1496837955;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
MBeanExporterTests -> @Test 	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception;1530174524;Want to ensure that said MBean is not exported twice.;@Test_	public void testBonaFideMBeanExplicitlyExportedAndAutodetectionIsOn() throws Exception {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(Person.class)__		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		factory.registerBeanDefinition(OBJECT_NAME, builder.getBeanDefinition())___		MBeanExporter exporter = new MBeanExporter()__		exporter.setServer(getServer())__		Map<String, Object> beansToExport = new HashMap<>()__		beansToExport.put(OBJECT_NAME, OBJECT_NAME)__		exporter.setBeans(beansToExport)__		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(OBJECT_NAME))__		exporter.setBeanFactory(factory)__		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ASSEMBLER)__		start(exporter)__		assertIsRegistered("Explicitly exported bona fide MBean obviously not exported.",_				ObjectNameManager.getInstance(OBJECT_NAME))__	};want,to,ensure,that,said,mbean,is,not,exported,twice;test,public,void,test,bona,fide,mbean,explicitly,exported,and,autodetection,is,on,throws,exception,bean,definition,builder,builder,bean,definition,builder,root,bean,definition,person,class,default,listable,bean,factory,factory,new,default,listable,bean,factory,factory,register,bean,definition,builder,get,bean,definition,mbean,exporter,exporter,new,mbean,exporter,exporter,set,server,get,server,map,string,object,beans,to,export,new,hash,map,beans,to,export,put,exporter,set,beans,beans,to,export,exporter,set,assembler,new,named,bean,autodetect,capable,mbean,info,assembler,stub,exporter,set,bean,factory,factory,exporter,set,autodetect,mode,mbean,exporter,start,exporter,assert,is,registered,explicitly,exported,bona,fide,mbean,obviously,not,exported,object,name,manager,get,instance
