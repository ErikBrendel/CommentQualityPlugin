commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void nonExistentProperty() {     JndiPropertySource ps = new JndiPropertySource("jndiProperties").     assertThat(ps.getProperty("bogus"), nullValue()). }
false;protected;0;4;;@Override protected Context createInitialContext() throws NamingException {     return context. }
false;public;0;18;;@Test public void nameBoundWithoutPrefix() {     final SimpleNamingContext context = new SimpleNamingContext().     context.bind("p1", "v1").     JndiTemplate jndiTemplate = new JndiTemplate() {          @Override         protected Context createInitialContext() throws NamingException {             return context.         }     }.     JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate().     jndiLocator.setResourceRef(true).     jndiLocator.setJndiTemplate(jndiTemplate).     JndiPropertySource ps = new JndiPropertySource("jndiProperties", jndiLocator).     assertThat(ps.getProperty("p1"), equalTo("v1")). }
false;protected;0;4;;@Override protected Context createInitialContext() throws NamingException {     return context. }
false;public;0;18;;@Test public void nameBoundWithPrefix() {     final SimpleNamingContext context = new SimpleNamingContext().     context.bind("java:comp/env/p1", "v1").     JndiTemplate jndiTemplate = new JndiTemplate() {          @Override         protected Context createInitialContext() throws NamingException {             return context.         }     }.     JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate().     jndiLocator.setResourceRef(true).     jndiLocator.setJndiTemplate(jndiTemplate).     JndiPropertySource ps = new JndiPropertySource("jndiProperties", jndiLocator).     assertThat(ps.getProperty("p1"), equalTo("v1")). }
false;public;1;4;;@Override public Object lookup(String jndiName) throws NamingException {     throw new IllegalStateException("Should not get called"). }
false;public;0;13;;@Test public void propertyWithDefaultClauseInResourceRefMode() {     JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate() {          @Override         public Object lookup(String jndiName) throws NamingException {             throw new IllegalStateException("Should not get called").         }     }.     jndiLocator.setResourceRef(true).     JndiPropertySource ps = new JndiPropertySource("jndiProperties", jndiLocator).     assertThat(ps.getProperty("propertyKey:defaultValue"), nullValue()). }
false;public;1;5;;@Override public Object lookup(String jndiName) throws NamingException {     assertEquals("my:key", jndiName).     return "my:value". }
false;public;0;14;;@Test public void propertyWithColonInNonResourceRefMode() {     JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate() {          @Override         public Object lookup(String jndiName) throws NamingException {             assertEquals("my:key", jndiName).             return "my:value".         }     }.     jndiLocator.setResourceRef(false).     JndiPropertySource ps = new JndiPropertySource("jndiProperties", jndiLocator).     assertThat(ps.getProperty("my:key"), equalTo("my:value")). }
