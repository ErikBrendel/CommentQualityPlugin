commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;// Actual implementations of Context methods follow @Override public NamingEnumeration<NameClassPair> list(String root) throws NamingException {     if (logger.isDebugEnabled()) {         logger.debug("Listing name/class pairs under [" + root + "]").     }     return new NameClassPairEnumeration(this, root). }
false;public;1;7;;@Override public NamingEnumeration<Binding> listBindings(String root) throws NamingException {     if (logger.isDebugEnabled()) {         logger.debug("Listing bindings under [" + root + "]").     }     return new BindingEnumeration(this, root). }
true;public;1;25;/**  * Look up the object with the given name.  * <p>Note: Not intended for direct use by applications.  * Will be used by any standard InitialContext JNDI lookups.  * @throws javax.naming.NameNotFoundException if the object could not be found  */ ;/**  * Look up the object with the given name.  * <p>Note: Not intended for direct use by applications.  * Will be used by any standard InitialContext JNDI lookups.  * @throws javax.naming.NameNotFoundException if the object could not be found  */ @Override public Object lookup(String lookupName) throws NameNotFoundException {     String name = this.root + lookupName.     if (logger.isDebugEnabled()) {         logger.debug("Static JNDI lookup: [" + name + "]").     }     if ("".equals(name)) {         return new SimpleNamingContext(this.root, this.boundObjects, this.environment).     }     Object found = this.boundObjects.get(name).     if (found == null) {         if (!name.endsWith("/")) {             name = name + "/".         }         for (String boundName : this.boundObjects.keySet()) {             if (boundName.startsWith(name)) {                 return new SimpleNamingContext(name, this.boundObjects, this.environment).             }         }         throw new NameNotFoundException("Name [" + this.root + lookupName + "] not bound. " + this.boundObjects.size() + " bindings: [" + StringUtils.collectionToDelimitedString(this.boundObjects.keySet(), ",") + "]").     }     return found. }
false;public;1;4;;@Override public Object lookupLink(String name) throws NameNotFoundException {     return lookup(name). }
true;public;2;7;/**  * Bind the given object to the given name.  * Note: Not intended for direct use by applications  * if setting up a JVM-level JNDI environment.  * Use SimpleNamingContextBuilder to set up JNDI bindings then.  * @see org.springframework.tests.mock.jndi.SimpleNamingContextBuilder#bind  */ ;/**  * Bind the given object to the given name.  * Note: Not intended for direct use by applications  * if setting up a JVM-level JNDI environment.  * Use SimpleNamingContextBuilder to set up JNDI bindings then.  * @see org.springframework.tests.mock.jndi.SimpleNamingContextBuilder#bind  */ @Override public void bind(String name, Object obj) {     if (logger.isInfoEnabled()) {         logger.info("Static JNDI binding: [" + this.root + name + "] = [" + obj + "]").     }     this.boundObjects.put(this.root + name, obj). }
false;public;1;7;;@Override public void unbind(String name) {     if (logger.isInfoEnabled()) {         logger.info("Static JNDI remove: [" + this.root + name + "]").     }     this.boundObjects.remove(this.root + name). }
false;public;2;4;;@Override public void rebind(String name, Object obj) {     bind(name, obj). }
false;public;2;6;;@Override public void rename(String oldName, String newName) throws NameNotFoundException {     Object obj = lookup(oldName).     unbind(oldName).     bind(newName, obj). }
false;public;1;10;;@Override public Context createSubcontext(String name) {     String subcontextName = this.root + name.     if (!subcontextName.endsWith("/")) {         subcontextName += "/".     }     Context subcontext = new SimpleNamingContext(subcontextName, this.boundObjects, this.environment).     bind(name, subcontext).     return subcontext. }
false;public;1;4;;@Override public void destroySubcontext(String name) {     unbind(name). }
false;public;2;4;;@Override public String composeName(String name, String prefix) {     return prefix + name. }
false;public;0;4;;@Override public Hashtable<String, Object> getEnvironment() {     return this.environment. }
false;public;2;5;;@Override @Nullable public Object addToEnvironment(String propName, Object propVal) {     return this.environment.put(propName, propVal). }
false;public;1;4;;@Override public Object removeFromEnvironment(String propName) {     return this.environment.remove(propName). }
false;public;0;3;;@Override public void close() { }
false;public;1;4;;// Unsupported methods follow: no support for javax.naming.Name @Override public NamingEnumeration<NameClassPair> list(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public Object lookup(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public Object lookupLink(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;2;4;;@Override public void bind(Name name, Object obj) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public void unbind(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;2;4;;@Override public void rebind(Name name, Object obj) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;2;4;;@Override public void rename(Name oldName, Name newName) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public Context createSubcontext(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public void destroySubcontext(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;0;4;;@Override public String getNameInNamespace() throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public NameParser getNameParser(Name name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;1;4;;@Override public NameParser getNameParser(String name) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;public;2;4;;@Override public Name composeName(Name name, Name prefix) throws NamingException {     throw new OperationNotSupportedException("SimpleNamingContext does not support [javax.naming.Name]"). }
false;protected,abstract;2;1;;protected abstract T createObject(String strippedName, Object obj).
false;public;0;4;;@Override public boolean hasMore() {     return this.iterator.hasNext(). }
false;public;0;4;;@Override public T next() {     return this.iterator.next(). }
false;public;0;4;;@Override public boolean hasMoreElements() {     return this.iterator.hasNext(). }
false;public;0;4;;@Override public T nextElement() {     return this.iterator.next(). }
false;public;0;3;;@Override public void close() { }
false;protected;2;4;;@Override protected NameClassPair createObject(String strippedName, Object obj) {     return new NameClassPair(strippedName, obj.getClass().getName()). }
false;protected;2;4;;@Override protected Binding createObject(String strippedName, Object obj) {     return new Binding(strippedName, obj). }
