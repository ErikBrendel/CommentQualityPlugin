commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getAge() {     return age. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public TestBean getSpouse1() {     return spouse1. }
false;public;0;3;;public TestBean getSpouse2() {     return spouse2. }
false;public;0;3;;public IndexedTestBean getOther() {     return other. }
false;public;1;3;;public void setAge(int age) {     this.age = age. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public int getAge() {     return age. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public ITestBean getTestBean() {     return this.tb. }
false;protected,abstract;0;1;;protected abstract FactoryMethods createFactoryMethods().
false;public;0;3;;public String getSetterString() {     return setterString. }
false;public;1;3;;public void setSetterString(String setterString) {     this.setterString = setterString. }
false;private;0;3;;private void init() {     this.initialized = true. }
false;private;0;3;;private void destroy() {     this.destroyed = true. }
false;;0;1;;void something().
false;public;0;3;;@Override public void something() { }
false;public;1;3;;public void setDummyFactory(DummyFactory dummyFactory) {     this.dummyFactory = dummyFactory. }
false;public;0;3;;public DummyFactory getDummyFactory() {     return dummyFactory. }
false;public;1;3;;public void setTestBean1(TestBean testBean1) {     this.testBean1 = testBean1. }
false;public;0;3;;public TestBean getTestBean1() {     return testBean1. }
false;public;1;3;;public void setTestBean2(TestBean testBean2) {     this.testBean2 = testBean2. }
false;public;0;3;;public TestBean getTestBean2() {     return testBean2. }
false;public,static;0;3;;public static FactoryMethods nullInstance() {     return null. }
false;public,static;0;5;;public static FactoryMethods defaultInstance() {     TestBean tb = new TestBean().     tb.setName("defaultInstance").     return new FactoryMethods(tb, "default", 0). }
true;public,static;1;3;/**  * Note that overloaded methods are supported.  */ ;/**  * Note that overloaded methods are supported.  */ public static FactoryMethods newInstance(TestBean tb) {     return new FactoryMethods(tb, "default", 0). }
false;protected,static;3;6;;protected static FactoryMethods newInstance(TestBean tb, int num, String name) {     if (name == null) {         throw new IllegalStateException("Should never be called with null value").     }     return new FactoryMethods(tb, name, num). }
false;static;3;6;;static FactoryMethods newInstance(TestBean tb, int num, Integer something) {     if (something != null) {         throw new IllegalStateException("Should never be called with non-null value").     }     return new FactoryMethods(tb, null, num). }
false;private,static;0;3;;private static List<?> listInstance() {     return Collections.EMPTY_LIST. }
false;public;1;3;;public void setStringValue(String stringValue) {     this.stringValue = stringValue. }
false;public;0;3;;public String getStringValue() {     return this.stringValue. }
false;public;0;3;;public TestBean getTestBean() {     return this.tb. }
false;protected;0;3;;protected TestBean protectedGetTestBean() {     return this.tb. }
false;private;0;3;;private TestBean privateGetTestBean() {     return this.tb. }
false;public;0;3;;public int getNum() {     return num. }
false;public;0;3;;public String getName() {     return name. }
true;public;1;3;/**  * Set via Setter Injection once instance is created.  */ ;/**  * Set via Setter Injection once instance is created.  */ public void setName(String name) {     this.name = name. }
false;public;3;4;;@Override public Object reimplement(Object obj, Method method, Object[] args) throws Throwable {     return VALUE. }
false;public;0;3;;public Object getObject() {     return obj. }
false;public;1;3;;public String replaceMe(String echo) {     return echo. }
false;public;1;3;;public void setJumble(Collection<?> jumble) {     this.jumble = jumble. }
false;public;0;3;;public Collection<?> getJumble() {     return jumble. }
false;;0;1;;TestBean getPrototypeDependency().
false;;1;1;;TestBean getPrototypeDependency(Object someParam).
false;protected,abstract;0;1;;protected abstract TestBean protectedOverrideSingleton().
false;public;1;4;;@Override public TestBean getPrototypeDependency(Object someParam) {     return new TestBean(). }
false;public;0;3;;public TestBean invokesOverriddenMethodOnSelf() {     return getPrototypeDependency(). }
false;public;1;3;;public String echo(String echo) {     return echo. }
true;public;0;3;/**  * Overloaded form of replaceMe.  */ ;/**  * Overloaded form of replaceMe.  */ public String replaceMe() {     return "replaceMe". }
true;public;1;3;/**  * Another overloaded form of replaceMe, not getting replaced.  * Must not cause errors when the other replaceMe methods get replaced.  */ ;/**  * Another overloaded form of replaceMe, not getting replaced.  * Must not cause errors when the other replaceMe methods get replaced.  */ public String replaceMe(int someParam) {     return "replaceMe:" + someParam. }
false;public;1;4;;@Override public String replaceMe(String someParam) {     return "replaceMe:" + someParam. }
false;protected;1;4;;protected void doSomething(String arg) { // This implementation does nothing! // It's not overloaded }
false;public;1;3;;public void setInitMethodDeclared(boolean initMethodDeclared) {     this.initMethodDeclared = initMethodDeclared. }
false;public;0;3;;public boolean isInitMethodDeclared() {     return initMethodDeclared. }
false;public;1;4;;@Override public void setBeanName(String name) {     this.beanName = name. }
false;public;0;3;;public String getBeanName() {     return beanName. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.owningFactory = beanFactory. }
false;public;0;9;;public void postProcessBeforeInit() {     if (this.inited || this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory called postProcessBeforeInit after afterPropertiesSet").     }     if (this.postProcessedBeforeInit) {         throw new RuntimeException("Factory called postProcessBeforeInit twice").     }     this.postProcessedBeforeInit = true. }
false;public;0;16;;@Override public void afterPropertiesSet() {     if (this.owningFactory == null) {         throw new RuntimeException("Factory didn't call setBeanFactory before afterPropertiesSet on lifecycle bean").     }     if (!this.postProcessedBeforeInit) {         throw new RuntimeException("Factory didn't call postProcessBeforeInit before afterPropertiesSet on lifecycle bean").     }     if (this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory initialized via declared init method before initializing via afterPropertiesSet").     }     if (this.inited) {         throw new RuntimeException("Factory called afterPropertiesSet twice").     }     this.inited = true. }
false;public;0;10;;public void declaredInitMethod() {     if (!this.inited) {         throw new RuntimeException("Factory didn't call afterPropertiesSet before declared init method").     }     if (this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory called declared init method twice").     }     this.initedViaDeclaredInitMethod = true. }
false;public;0;12;;public void postProcessAfterInit() {     if (!this.inited) {         throw new RuntimeException("Factory called postProcessAfterInit before afterPropertiesSet").     }     if (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) {         throw new RuntimeException("Factory called postProcessAfterInit before calling declared init method").     }     if (this.postProcessedAfterInit) {         throw new RuntimeException("Factory called postProcessAfterInit twice").     }     this.postProcessedAfterInit = true. }
true;public;0;6;/**  * Dummy business method that will fail unless the factory  * managed the bean's lifecycle correctly  */ ;/**  * Dummy business method that will fail unless the factory  * managed the bean's lifecycle correctly  */ public void businessMethod() {     if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) || !this.postProcessedAfterInit) {         throw new RuntimeException("Factory didn't initialize lifecycle object correctly").     } }
false;public;0;7;;@Override public void destroy() {     if (this.destroyed) {         throw new IllegalStateException("Already destroyed").     }     this.destroyed = true. }
false;public;0;3;;public boolean isDestroyed() {     return destroyed. }
false;public;2;7;;@Override public Object postProcessBeforeInitialization(Object bean, String name) throws BeansException {     if (bean instanceof ProtectedLifecycleBean) {         ((ProtectedLifecycleBean) bean).postProcessBeforeInit().     }     return bean. }
false;public;2;7;;@Override public Object postProcessAfterInitialization(Object bean, String name) throws BeansException {     if (bean instanceof ProtectedLifecycleBean) {         ((ProtectedLifecycleBean) bean).postProcessAfterInit().     }     return bean. }
false;public;3;5;;@Override public Object reimplement(Object obj, Method method, Object[] args) throws Throwable {     String s = (String) args[0].     return new StringBuffer(s).reverse().toString(). }
false;public;0;3;;public boolean isSingleBoolean() {     return singleBoolean. }
false;public;0;3;;public boolean isSecondBoolean() {     return secondBoolean. }
false;public;0;3;;public String getTestString() {     return testString. }
