# id;timestamp;commentText;codeText;commentWords;codeWords
OverrideOneMethod -> public String replaceMe();1328020251;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1351392612;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1356735495;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1362408075;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1408052969;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1408056940;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1467726413;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
OverrideOneMethod -> public String replaceMe();1497341594;Overloaded form of replaceMe.;public String replaceMe() {_		return "replaceMe"__	};overloaded,form,of,replace,me;public,string,replace,me,return,replace,me
ConstructorInjectedOverrides -> public String getSetterString();1328020251;@return Returns the setterString.;public String getSetterString() {_		return setterString__	};return,returns,the,setter,string;public,string,get,setter,string,return,setter,string
ConstructorInjectedOverrides -> public String getSetterString();1351392612;@return Returns the setterString.;public String getSetterString() {_		return setterString__	};return,returns,the,setter,string;public,string,get,setter,string,return,setter,string
ConstructorInjectedOverrides -> public String getSetterString();1356735495;@return Returns the setterString.;public String getSetterString() {_		return setterString__	};return,returns,the,setter,string;public,string,get,setter,string,return,setter,string
ConstructorInjectedOverrides -> public String getSetterString();1362408075;@return Returns the setterString.;public String getSetterString() {_		return setterString__	};return,returns,the,setter,string;public,string,get,setter,string,return,setter,string
ConstructorInjectedOverrides -> public String getSetterString();1408052969;@return Returns the setterString.;public String getSetterString() {_		return setterString__	};return,returns,the,setter,string;public,string,get,setter,string,return,setter,string
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1328020251;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1351392612;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1356735495;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1362408075;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1408052969;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1408056940;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1467726413;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
FactoryMethods -> private FactoryMethods(TestBean tb, String name, int num);1497341594;Constructor is private: not for use outside this class,_even by IoC container.;private FactoryMethods(TestBean tb, String name, int num) {_		this.tb = tb__		this.name = name__		this.num = num__	};constructor,is,private,not,for,use,outside,this,class,even,by,io,c,container;private,factory,methods,test,bean,tb,string,name,int,num,this,tb,tb,this,name,name,this,num,num
ConstructorInjectedOverrides -> public void setSetterString(String setterString);1328020251;@param setterString The setterString to set.;public void setSetterString(String setterString) {_		this.setterString = setterString__	};param,setter,string,the,setter,string,to,set;public,void,set,setter,string,string,setter,string,this,setter,string,setter,string
ConstructorInjectedOverrides -> public void setSetterString(String setterString);1351392612;@param setterString The setterString to set.;public void setSetterString(String setterString) {_		this.setterString = setterString__	};param,setter,string,the,setter,string,to,set;public,void,set,setter,string,string,setter,string,this,setter,string,setter,string
ConstructorInjectedOverrides -> public void setSetterString(String setterString);1356735495;@param setterString The setterString to set.;public void setSetterString(String setterString) {_		this.setterString = setterString__	};param,setter,string,the,setter,string,to,set;public,void,set,setter,string,string,setter,string,this,setter,string,setter,string
ConstructorInjectedOverrides -> public void setSetterString(String setterString);1362408075;@param setterString The setterString to set.;public void setSetterString(String setterString) {_		this.setterString = setterString__	};param,setter,string,the,setter,string,to,set;public,void,set,setter,string,string,setter,string,this,setter,string,setter,string
ConstructorInjectedOverrides -> public void setSetterString(String setterString);1408052969;@param setterString The setterString to set.;public void setSetterString(String setterString) {_		this.setterString = setterString__	};param,setter,string,the,setter,string,to,set;public,void,set,setter,string,string,setter,string,this,setter,string,setter,string
ProtectedLifecycleBean -> public void businessMethod();1328020251;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1351392612;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1356735495;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1362408075;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1408052969;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1408056940;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1467726413;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
ProtectedLifecycleBean -> public void businessMethod();1497341594;Dummy business method that will fail unless the factory_managed the bean's lifecycle correctly;public void businessMethod() {_		if (!this.inited || (this.initMethodDeclared && !this.initedViaDeclaredInitMethod) ||_				!this.postProcessedAfterInit) {_			throw new RuntimeException("Factory didn't initialize lifecycle object correctly")__		}_	};dummy,business,method,that,will,fail,unless,the,factory,managed,the,bean,s,lifecycle,correctly;public,void,business,method,if,this,inited,this,init,method,declared,this,inited,via,declared,init,method,this,post,processed,after,init,throw,new,runtime,exception,factory,didn,t,initialize,lifecycle,object,correctly
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1328020251;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1351392612;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1356735495;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1362408075;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1408052969;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1408056940;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1467726413;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public static FactoryMethods newInstance(TestBean tb);1497341594;Note that overloaded methods are supported.;public static FactoryMethods newInstance(TestBean tb) {_		return new FactoryMethods(tb, "default", 0)__	};note,that,overloaded,methods,are,supported;public,static,factory,methods,new,instance,test,bean,tb,return,new,factory,methods,tb,default,0
FactoryMethods -> public void setName(String name);1328020251;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1351392612;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1356735495;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1362408075;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1408052969;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1408056940;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1467726413;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
FactoryMethods -> public void setName(String name);1497341594;Set via Setter Injection once instance is created.;public void setName(String name) {_		this.name = name__	};set,via,setter,injection,once,instance,is,created;public,void,set,name,string,name,this,name,name
OverrideOneMethod -> public String replaceMe(int someParam);1328020251;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1351392612;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1356735495;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1362408075;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1408052969;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1408056940;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1467726413;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
OverrideOneMethod -> public String replaceMe(int someParam);1497341594;Another overloaded form of replaceMe, not getting replaced._Must not cause errors when the other replaceMe methods get replaced.;public String replaceMe(int someParam) {_		return "replaceMe:" + someParam__	};another,overloaded,form,of,replace,me,not,getting,replaced,must,not,cause,errors,when,the,other,replace,me,methods,get,replaced;public,string,replace,me,int,some,param,return,replace,me,some,param
