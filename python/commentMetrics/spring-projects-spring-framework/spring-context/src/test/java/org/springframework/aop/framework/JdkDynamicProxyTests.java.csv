commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;7;;@Override protected Object createProxy(ProxyCreatorSupport as) {     assertFalse("Not forcible CGLIB", as.isProxyTargetClass()).     Object proxy = as.createAopProxy().getProxy().     assertTrue("Should be a JDK proxy: " + proxy.getClass(), AopUtils.isJdkDynamicProxy(proxy)).     return proxy. }
false;protected;1;4;;@Override protected AopProxy createAopProxy(AdvisedSupport as) {     return new JdkDynamicAopProxy(as). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testNullConfig() {     new JdkDynamicAopProxy(null). }
false;public;0;12;;@Test public void testProxyIsJustInterface() {     TestBean raw = new TestBean().     raw.setAge(32).     AdvisedSupport pc = new AdvisedSupport(ITestBean.class).     pc.setTarget(raw).     JdkDynamicAopProxy aop = new JdkDynamicAopProxy(pc).     Object proxy = aop.getProxy().     assertTrue(proxy instanceof ITestBean).     assertFalse(proxy instanceof TestBean). }
false;public;0;13;;@Test public void testInterceptorIsInvokedWithNoTarget() {     // Test return value     final int age = 25.     MethodInterceptor mi = (invocation -> age).     AdvisedSupport pc = new AdvisedSupport(ITestBean.class).     pc.addAdvice(mi).     AopProxy aop = createAopProxy(pc).     ITestBean tb = (ITestBean) aop.getProxy().     assertEquals("correct return value", age, tb.getAge()). }
false;protected;1;6;;@Override protected void assertions(MethodInvocation invocation) {     assertEquals(this, invocation.getThis()).     assertEquals("Invocation should be on ITestBean: " + invocation.getMethod(), ITestBean.class, invocation.getMethod().getDeclaringClass()). }
false;public;1;6;;@Override public Object invoke(MethodInvocation invocation) throws Throwable {     // Assert that target matches BEFORE invocation returns     assertEquals("Target is correct", expectedTarget, invocation.getThis()).     return super.invoke(invocation). }
false;public;0;28;;@Test public void testTargetCanGetInvocationWithPrivateClass() {     final ExposedInvocationTestBean expectedTarget = new ExposedInvocationTestBean() {          @Override         protected void assertions(MethodInvocation invocation) {             assertEquals(this, invocation.getThis()).             assertEquals("Invocation should be on ITestBean: " + invocation.getMethod(), ITestBean.class, invocation.getMethod().getDeclaringClass()).         }     }.     AdvisedSupport pc = new AdvisedSupport(ITestBean.class, IOther.class).     pc.addAdvice(ExposeInvocationInterceptor.INSTANCE).     TrapTargetInterceptor tii = new TrapTargetInterceptor() {          @Override         public Object invoke(MethodInvocation invocation) throws Throwable {             // Assert that target matches BEFORE invocation returns             assertEquals("Target is correct", expectedTarget, invocation.getThis()).             return super.invoke(invocation).         }     }.     pc.addAdvice(tii).     pc.setTarget(expectedTarget).     AopProxy aop = createAopProxy(pc).     ITestBean tb = (ITestBean) aop.getProxy().     tb.getName(). }
false;public;0;11;;@Test public void testProxyNotWrappedIfIncompatible() {     FooBar bean = new FooBar().     ProxyCreatorSupport as = new ProxyCreatorSupport().     as.setInterfaces(Foo.class).     as.setTarget(bean).     Foo proxy = (Foo) createProxy(as).     assertSame("Target should be returned when return types are incompatible", bean, proxy.getBarThis()).     assertSame("Proxy should be returned when return types are compatible", proxy, proxy.getFooThis()). }
false;public;0;10;;@Test public void testEqualsAndHashCodeDefined() {     AdvisedSupport as = new AdvisedSupport(Named.class).     as.setTarget(new Person()).     JdkDynamicAopProxy aopProxy = new JdkDynamicAopProxy(as).     Named proxy = (Named) aopProxy.getProxy().     Named named = new Person().     assertEquals("equals()", proxy, named).     assertEquals("hashCode()", proxy.hashCode(), named.hashCode()). }
false;public;0;6;;// SPR-13328 @Test public void testVarargsWithEnumArray() {     ProxyFactory proxyFactory = new ProxyFactory(new VarargTestBean()).     VarargTestInterface proxy = (VarargTestInterface) proxyFactory.getProxy().     assertTrue(proxy.doWithVarargs(MyEnum.A, MyOtherEnum.C)). }
false;;0;1;;Bar getBarThis().
false;;0;1;;Foo getFooThis().
false;public;0;4;;@Override public Bar getBarThis() {     return this. }
false;public;0;4;;@Override public Foo getFooThis() {     return this. }
false;;0;1;;String getName().
false;;1;2;;@Override boolean equals(Object other).
false;;0;2;;@Override int hashCode().
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Person person = (Person) o.     if (!name.equals(person.name))         return false.     return true. }
false;public;0;4;;@Override public int hashCode() {     return name.hashCode(). }
false;;1;1;;<V extends MyInterface> boolean doWithVarargs(V... args).
false;public;1;5;;@SuppressWarnings("unchecked") @Override public <V extends MyInterface> boolean doWithVarargs(V... args) {     return true. }
