commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract T getCache().
false;protected,abstract;0;1;;protected abstract Object getNativeCache().
false;public;0;4;;@Test public void testCacheName() throws Exception {     assertEquals(CACHE_NAME, getCache().getName()). }
false;public;0;4;;@Test public void testNativeCache() throws Exception {     assertSame(getNativeCache(), getCache().getNativeCache()). }
false;public;0;23;;@Test public void testCachePut() throws Exception {     T cache = getCache().     String key = createRandomKey().     Object value = "george".     assertNull(cache.get(key)).     assertNull(cache.get(key, String.class)).     assertNull(cache.get(key, Object.class)).     cache.put(key, value).     assertEquals(value, cache.get(key).get()).     assertEquals(value, cache.get(key, String.class)).     assertEquals(value, cache.get(key, Object.class)).     assertEquals(value, cache.get(key, (Class<?>) null)).     cache.put(key, null).     assertNotNull(cache.get(key)).     assertNull(cache.get(key).get()).     assertNull(cache.get(key, String.class)).     assertNull(cache.get(key, Object.class)). }
false;public;0;13;;@Test public void testCachePutIfAbsent() throws Exception {     T cache = getCache().     String key = createRandomKey().     Object value = "initialValue".     assertNull(cache.get(key)).     assertNull(cache.putIfAbsent(key, value)).     assertEquals(value, cache.get(key).get()).     assertEquals("initialValue", cache.putIfAbsent(key, "anotherValue").get()).     // not changed     assertEquals(value, cache.get(key).get()). }
false;public;0;10;;@Test public void testCacheRemove() throws Exception {     T cache = getCache().     String key = createRandomKey().     Object value = "george".     assertNull(cache.get(key)).     cache.put(key, value). }
false;public;0;12;;@Test public void testCacheClear() throws Exception {     T cache = getCache().     assertNull(cache.get("enescu")).     cache.put("enescu", "george").     assertNull(cache.get("vlaicu")).     cache.put("vlaicu", "aurel").     cache.clear().     assertNull(cache.get("vlaicu")).     assertNull(cache.get("enescu")). }
false;public;0;4;;@Test public void testCacheGetCallable() {     doTestCacheGetCallable("test"). }
false;public;0;4;;@Test public void testCacheGetCallableWithNull() {     doTestCacheGetCallable(null). }
false;private;1;10;;private void doTestCacheGetCallable(Object returnValue) {     T cache = getCache().     String key = createRandomKey().     assertNull(cache.get(key)).     Object value = cache.get(key, () -> returnValue).     assertEquals(returnValue, value).     assertEquals(value, cache.get(key).get()). }
false;public;0;4;;@Test public void testCacheGetCallableNotInvokedWithHit() {     doTestCacheGetCallableNotInvokedWithHit("existing"). }
false;public;0;4;;@Test public void testCacheGetCallableNotInvokedWithHitNull() {     doTestCacheGetCallableNotInvokedWithHit(null). }
false;private;1;11;;private void doTestCacheGetCallableNotInvokedWithHit(Object initialValue) {     T cache = getCache().     String key = createRandomKey().     cache.put(key, initialValue).     Object value = cache.get(key, () -> {         throw new IllegalStateException("Should not have been invoked").     }).     assertEquals(initialValue, value). }
false;public;0;17;;@Test public void testCacheGetCallableFail() {     T cache = getCache().     String key = createRandomKey().     assertNull(cache.get(key)).     try {         cache.get(key, () -> {             throw new UnsupportedOperationException("Expected exception").         }).     } catch (Cache.ValueRetrievalException ex) {         assertNotNull(ex.getCause()).         assertEquals(UnsupportedOperationException.class, ex.getCause().getClass()).     } }
true;public;0;29;/**  * Test that a call to get with a Callable concurrently properly synchronize the  * invocations.  */ ;/**  * Test that a call to get with a Callable concurrently properly synchronize the  * invocations.  */ @Test public void testCacheGetSynchronized() throws InterruptedException {     T cache = getCache().     final AtomicInteger counter = new AtomicInteger().     final List<Object> results = new CopyOnWriteArrayList<>().     final CountDownLatch latch = new CountDownLatch(10).     String key = createRandomKey().     Runnable run = () -> {         try {             Integer value = cache.get(key, () -> {                 // make sure the thread will overlap                 Thread.sleep(50).                 return counter.incrementAndGet().             }).             results.add(value).         } finally {             latch.countDown().         }     }.     for (int i = 0. i < 10. i++) {         new Thread(run).start().     }     latch.await().     assertEquals(10, results.size()).     // Only one method got invoked     results.forEach(r -> assertThat(r, is(1))). }
false;protected;0;3;;protected String createRandomKey() {     return UUID.randomUUID().toString(). }
