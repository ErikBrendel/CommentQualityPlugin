# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCacheTests -> @Test 	public void testCacheGetSynchronized() throws InterruptedException;1450701275;Test that a call to get with a Callable concurrently properly synchronize the_invocations.;@Test_	public void testCacheGetSynchronized() throws InterruptedException {_		T cache = getCache()__		final AtomicInteger counter = new AtomicInteger()__		final List<Object> results = new CopyOnWriteArrayList<>()__		final CountDownLatch latch = new CountDownLatch(10)___		String key = createRandomKey()__		Runnable run = () -> {_			try {_				Integer value = cache.get(key, () -> {_					Thread.sleep(50)_ _					return counter.incrementAndGet()__				})__				results.add(value)__			}_			finally {_				latch.countDown()__			}_		}___		for (int i = 0_ i < 10_ i++) {_			new Thread(run).start()__		}_		latch.await()___		assertEquals(10, results.size())__		results.forEach(r -> assertThat(r, is(1)))_ _	};test,that,a,call,to,get,with,a,callable,concurrently,properly,synchronize,the,invocations;test,public,void,test,cache,get,synchronized,throws,interrupted,exception,t,cache,get,cache,final,atomic,integer,counter,new,atomic,integer,final,list,object,results,new,copy,on,write,array,list,final,count,down,latch,latch,new,count,down,latch,10,string,key,create,random,key,runnable,run,try,integer,value,cache,get,key,thread,sleep,50,return,counter,increment,and,get,results,add,value,finally,latch,count,down,for,int,i,0,i,10,i,new,thread,run,start,latch,await,assert,equals,10,results,size,results,for,each,r,assert,that,r,is,1
AbstractCacheTests -> @Test 	public void testCacheGetSynchronized() throws InterruptedException;1450788623;Test that a call to get with a Callable concurrently properly synchronize the_invocations.;@Test_	public void testCacheGetSynchronized() throws InterruptedException {_		T cache = getCache()__		final AtomicInteger counter = new AtomicInteger()__		final List<Object> results = new CopyOnWriteArrayList<>()__		final CountDownLatch latch = new CountDownLatch(10)___		String key = createRandomKey()__		Runnable run = () -> {_			try {_				Integer value = cache.get(key, () -> {_					Thread.sleep(50)_ _					return counter.incrementAndGet()__				})__				results.add(value)__			}_			finally {_				latch.countDown()__			}_		}___		for (int i = 0_ i < 10_ i++) {_			new Thread(run).start()__		}_		latch.await()___		assertEquals(10, results.size())__		results.forEach(r -> assertThat(r, is(1)))_ _	};test,that,a,call,to,get,with,a,callable,concurrently,properly,synchronize,the,invocations;test,public,void,test,cache,get,synchronized,throws,interrupted,exception,t,cache,get,cache,final,atomic,integer,counter,new,atomic,integer,final,list,object,results,new,copy,on,write,array,list,final,count,down,latch,latch,new,count,down,latch,10,string,key,create,random,key,runnable,run,try,integer,value,cache,get,key,thread,sleep,50,return,counter,increment,and,get,results,add,value,finally,latch,count,down,for,int,i,0,i,10,i,new,thread,run,start,latch,await,assert,equals,10,results,size,results,for,each,r,assert,that,r,is,1
AbstractCacheTests -> @Test 	public void testCacheGetSynchronized() throws InterruptedException;1487603288;Test that a call to get with a Callable concurrently properly synchronize the_invocations.;@Test_	public void testCacheGetSynchronized() throws InterruptedException {_		T cache = getCache()__		final AtomicInteger counter = new AtomicInteger()__		final List<Object> results = new CopyOnWriteArrayList<>()__		final CountDownLatch latch = new CountDownLatch(10)___		String key = createRandomKey()__		Runnable run = () -> {_			try {_				Integer value = cache.get(key, () -> {_					Thread.sleep(50)_ _					return counter.incrementAndGet()__				})__				results.add(value)__			}_			finally {_				latch.countDown()__			}_		}___		for (int i = 0_ i < 10_ i++) {_			new Thread(run).start()__		}_		latch.await()___		assertEquals(10, results.size())__		results.forEach(r -> assertThat(r, is(1)))_ _	};test,that,a,call,to,get,with,a,callable,concurrently,properly,synchronize,the,invocations;test,public,void,test,cache,get,synchronized,throws,interrupted,exception,t,cache,get,cache,final,atomic,integer,counter,new,atomic,integer,final,list,object,results,new,copy,on,write,array,list,final,count,down,latch,latch,new,count,down,latch,10,string,key,create,random,key,runnable,run,try,integer,value,cache,get,key,thread,sleep,50,return,counter,increment,and,get,results,add,value,finally,latch,count,down,for,int,i,0,i,10,i,new,thread,run,start,latch,await,assert,equals,10,results,size,results,for,each,r,assert,that,r,is,1
AbstractCacheTests -> @Test 	public void testCacheGetSynchronized() throws InterruptedException;1487604545;Test that a call to get with a Callable concurrently properly synchronize the_invocations.;@Test_	public void testCacheGetSynchronized() throws InterruptedException {_		T cache = getCache()__		final AtomicInteger counter = new AtomicInteger()__		final List<Object> results = new CopyOnWriteArrayList<>()__		final CountDownLatch latch = new CountDownLatch(10)___		String key = createRandomKey()__		Runnable run = () -> {_			try {_				Integer value = cache.get(key, () -> {_					Thread.sleep(50)_ _					return counter.incrementAndGet()__				})__				results.add(value)__			}_			finally {_				latch.countDown()__			}_		}___		for (int i = 0_ i < 10_ i++) {_			new Thread(run).start()__		}_		latch.await()___		assertEquals(10, results.size())__		results.forEach(r -> assertThat(r, is(1)))_ _	};test,that,a,call,to,get,with,a,callable,concurrently,properly,synchronize,the,invocations;test,public,void,test,cache,get,synchronized,throws,interrupted,exception,t,cache,get,cache,final,atomic,integer,counter,new,atomic,integer,final,list,object,results,new,copy,on,write,array,list,final,count,down,latch,latch,new,count,down,latch,10,string,key,create,random,key,runnable,run,try,integer,value,cache,get,key,thread,sleep,50,return,counter,increment,and,get,results,add,value,finally,latch,count,down,for,int,i,0,i,10,i,new,thread,run,start,latch,await,assert,equals,10,results,size,results,for,each,r,assert,that,r,is,1
AbstractCacheTests -> @Test 	public void testCacheGetSynchronized() throws InterruptedException;1525511255;Test that a call to get with a Callable concurrently properly synchronize the_invocations.;@Test_	public void testCacheGetSynchronized() throws InterruptedException {_		T cache = getCache()__		final AtomicInteger counter = new AtomicInteger()__		final List<Object> results = new CopyOnWriteArrayList<>()__		final CountDownLatch latch = new CountDownLatch(10)___		String key = createRandomKey()__		Runnable run = () -> {_			try {_				Integer value = cache.get(key, () -> {_					Thread.sleep(50)_ _					return counter.incrementAndGet()__				})__				results.add(value)__			}_			finally {_				latch.countDown()__			}_		}___		for (int i = 0_ i < 10_ i++) {_			new Thread(run).start()__		}_		latch.await()___		assertEquals(10, results.size())__		results.forEach(r -> assertThat(r, is(1)))_ _	};test,that,a,call,to,get,with,a,callable,concurrently,properly,synchronize,the,invocations;test,public,void,test,cache,get,synchronized,throws,interrupted,exception,t,cache,get,cache,final,atomic,integer,counter,new,atomic,integer,final,list,object,results,new,copy,on,write,array,list,final,count,down,latch,latch,new,count,down,latch,10,string,key,create,random,key,runnable,run,try,integer,value,cache,get,key,thread,sleep,50,return,counter,increment,and,get,results,add,value,finally,latch,count,down,for,int,i,0,i,10,i,new,thread,run,start,latch,await,assert,equals,10,results,size,results,for,each,r,assert,that,r,is,1
