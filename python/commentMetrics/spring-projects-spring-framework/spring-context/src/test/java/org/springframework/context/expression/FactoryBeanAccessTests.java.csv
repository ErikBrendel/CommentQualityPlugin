commented;modifiers;parameterAmount;loc;comment;code
false;public;0;40;;@Test public void factoryBeanAccess() {     // SPR9511     StandardEvaluationContext context = new StandardEvaluationContext().     context.setBeanResolver(new SimpleBeanResolver()).     Expression expr = new SpelExpressionParser().parseRaw("@car.colour").     assertEquals("red", expr.getValue(context)).     expr = new SpelExpressionParser().parseRaw("&car.class.name").     assertEquals(CarFactoryBean.class.getName(), expr.getValue(context)).     expr = new SpelExpressionParser().parseRaw("@boat.colour").     assertEquals("blue", expr.getValue(context)).     expr = new SpelExpressionParser().parseRaw("&boat.class.name").     try {         assertEquals(Boat.class.getName(), expr.getValue(context)).         fail("Expected BeanIsNotAFactoryException").     } catch (BeanIsNotAFactoryException binafe) {     // success     }     // No such bean     try {         expr = new SpelExpressionParser().parseRaw("@truck").         assertEquals("red", expr.getValue(context)).         fail("Expected NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException nsbde) {     // success     }     // No such factory bean     try {         expr = new SpelExpressionParser().parseRaw("&truck").         assertEquals(CarFactoryBean.class.getName(), expr.getValue(context)).         fail("Expected NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException nsbde) {     // success     } }
false;public;0;3;;public String getColour() {     return "red". }
false;public;0;3;;public Car getObject() {     return new Car(). }
false;public;0;3;;public Class<Car> getObjectType() {     return Car.class. }
false;public;0;3;;public boolean isSingleton() {     return false. }
false;public;0;3;;public String getColour() {     return "blue". }
false;public;2;5;;@Override public Object resolve(EvaluationContext context, String beanName) throws AccessException {     return ac.getBean(beanName). }
