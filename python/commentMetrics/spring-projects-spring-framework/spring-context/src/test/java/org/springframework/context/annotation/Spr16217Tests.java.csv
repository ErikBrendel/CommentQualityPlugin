commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test @Ignore("TODO") public void baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInRegisterBeanPhase() {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(RegisterBeanPhaseImportingConfiguration.class)) {         context.getBean("someBean").     } }
false;public;0;7;;@Test public void baseConfigurationIsIncludedWhenFirstSuperclassReferenceIsSkippedInParseConfigurationPhase() {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ParseConfigurationPhaseImportingConfiguration.class)) {         context.getBean("someBean").     } }
false;public;0;13;;@Test public void baseConfigurationIsIncludedOnceWhenBothConfigurationClassesAreActive() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.setAllowBeanDefinitionOverriding(false).     context.register(UnconditionalImportingConfiguration.class).     context.refresh().     try {         context.getBean("someBean").     } finally {         context.close().     } }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return false. }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return ConfigurationPhase.REGISTER_BEAN. }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return false. }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return ConfigurationPhase.PARSE_CONFIGURATION. }
false;public;0;4;;@Bean public String someBean() {     return "foo". }
