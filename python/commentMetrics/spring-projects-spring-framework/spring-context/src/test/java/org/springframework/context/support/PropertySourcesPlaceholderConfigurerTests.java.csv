commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void replacementFromEnvironmentProperties() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     MockEnvironment env = new MockEnvironment().     env.setProperty("my.name", "myValue").     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setEnvironment(env).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("myValue")).     assertThat(ppc.getAppliedPropertySources(), not(nullValue())). }
false;public;0;14;;@Test public void localPropertiesViaResource() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     Resource resource = new ClassPathResource("PropertySourcesPlaceholderConfigurerTests.properties", this.getClass()).     ppc.setLocation(resource).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("foo")). }
false;public;0;4;;@Test public void localPropertiesOverrideFalse() {     localPropertiesOverride(false). }
false;public;0;4;;@Test public void localPropertiesOverrideTrue() {     localPropertiesOverride(true). }
false;public;0;17;;@Test public void explicitPropertySources() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     MutablePropertySources propertySources = new MutablePropertySources().     propertySources.addLast(new MockPropertySource().withProperty("my.name", "foo")).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setPropertySources(propertySources).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("foo")).     assertEquals(ppc.getAppliedPropertySources().iterator().next(), propertySources.iterator().next()). }
false;public;0;19;;@Test public void explicitPropertySourcesExcludesEnvironment() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     MutablePropertySources propertySources = new MutablePropertySources().     propertySources.addLast(new MockPropertySource()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setPropertySources(propertySources).     ppc.setEnvironment(new MockEnvironment().withProperty("my.name", "env")).     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("${my.name}")).     assertEquals(ppc.getAppliedPropertySources().iterator().next(), propertySources.iterator().next()). }
false;public;0;21;;@Test @SuppressWarnings("serial") public void explicitPropertySourcesExcludesLocalProperties() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     MutablePropertySources propertySources = new MutablePropertySources().     propertySources.addLast(new MockPropertySource()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setPropertySources(propertySources).     ppc.setProperties(new Properties() {          {             put("my.name", "local").         }     }).     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("${my.name}")). }
false;public;0;12;;@Test(expected = BeanDefinitionStoreException.class) public void ignoreUnresolvablePlaceholders_falseIsDefault() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     // pc.setIgnoreUnresolvablePlaceholders(false). // the default     // should throw     ppc.postProcessBeanFactory(bf). }
false;public;0;13;;@Test public void ignoreUnresolvablePlaceholders_true() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("${my.name}")). }
false;public;0;15;;@Test(expected = BeanDefinitionStoreException.class) @SuppressWarnings("serial") public void nestedUnresolvablePlaceholder() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setProperties(new Properties() {          {             put("my.name", "${bogus}").         }     }).     // should throw     ppc.postProcessBeanFactory(bf). }
false;public;0;17;;@Test @SuppressWarnings("serial") public void ignoredNestedUnresolvablePlaceholder() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setProperties(new Properties() {          {             put("my.name", "${bogus}").         }     }).     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("${bogus}")). }
false;public;1;4;;@Override public Object getProperty(String key) {     return "bar". }
false;public;0;24;;@Test public void withNonEnumerablePropertySource() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${foo}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     PropertySource<?> ps = new PropertySource<Object>("simplePropertySource", new Object()) {          @Override         public Object getProperty(String key) {             return "bar".         }     }.     MockEnvironment env = new MockEnvironment().     env.getPropertySources().addFirst(ps).     ppc.setEnvironment(env).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("bar")). }
false;private;1;21;;@SuppressWarnings("serial") private void localPropertiesOverride(boolean override) {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("name", "${foo}").getBeanDefinition()).     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setLocalOverride(override).     ppc.setProperties(new Properties() {          {             setProperty("foo", "local").         }     }).     ppc.setEnvironment(new MockEnvironment().withProperty("foo", "enclosing")).     ppc.postProcessBeanFactory(bf).     if (override) {         assertThat(bf.getBean(TestBean.class).getName(), equalTo("local")).     } else {         assertThat(bf.getBean(TestBean.class).getName(), equalTo("enclosing")).     } }
false;public;0;23;;@Test public void customPlaceholderPrefixAndSuffix() {     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setPlaceholderPrefix("@<").     ppc.setPlaceholderSuffix(">").     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", rootBeanDefinition(TestBean.class).addPropertyValue("name", "@<key1>").addPropertyValue("sex", "${key2}").getBeanDefinition()).     System.setProperty("key1", "systemKey1Value").     System.setProperty("key2", "systemKey2Value").     ppc.setEnvironment(new StandardEnvironment()).     ppc.postProcessBeanFactory(bf).     System.clearProperty("key1").     System.clearProperty("key2").     assertThat(bf.getBean(TestBean.class).getName(), is("systemKey1Value")).     assertThat(bf.getBean(TestBean.class).getSex(), is("${key2}")). }
false;public;0;12;;@Test public void nullValueIsPreserved() {     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setNullValue("customNull").     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", rootBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     ppc.setEnvironment(new MockEnvironment().withProperty("my.name", "customNull")).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), nullValue()). }
false;public;0;11;;@Test public void trimValuesIsOffByDefault() {     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", rootBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     ppc.setEnvironment(new MockEnvironment().withProperty("my.name", " myValue  ")).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo(" myValue  ")). }
false;public;0;12;;@Test public void trimValuesIsApplied() {     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setTrimValues(true).     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", rootBeanDefinition(TestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     ppc.setEnvironment(new MockEnvironment().withProperty("my.name", " myValue  ")).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).getName(), equalTo("myValue")). }
false;public;0;6;;@Test public void getAppliedPropertySourcesTooEarly() throws Exception {     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     thrown.expect(IllegalStateException.class).     ppc.getAppliedPropertySources(). }
false;public;0;17;;@Test public void multipleLocationsWithDefaultResolvedValue() throws Exception {     // SPR-10619     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ClassPathResource doesNotHave = new ClassPathResource("test.properties", getClass()).     ClassPathResource setToTrue = new ClassPathResource("placeholder.properties", getClass()).     ppc.setLocations(doesNotHave, setToTrue).     ppc.setIgnoreResourceNotFound(true).     ppc.setIgnoreUnresolvablePlaceholders(true).     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("testBean", genericBeanDefinition(TestBean.class).addPropertyValue("jedi", "${jedi:false}").getBeanDefinition()).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(TestBean.class).isJedi(), equalTo(true)). }
false;public;0;18;;@Test public void optionalPropertyWithValue() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.setConversionService(new DefaultConversionService()).     bf.registerBeanDefinition("testBean", genericBeanDefinition(OptionalTestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     MockEnvironment env = new MockEnvironment().     env.setProperty("my.name", "myValue").     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setEnvironment(env).     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(OptionalTestBean.class).getName(), equalTo(Optional.of("myValue"))). }
false;public;0;19;;@Test public void optionalPropertyWithoutValue() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.setConversionService(new DefaultConversionService()).     bf.registerBeanDefinition("testBean", genericBeanDefinition(OptionalTestBean.class).addPropertyValue("name", "${my.name}").getBeanDefinition()).     MockEnvironment env = new MockEnvironment().     env.setProperty("my.name", "").     PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer().     ppc.setEnvironment(env).     ppc.setIgnoreUnresolvablePlaceholders(true).     ppc.setNullValue("").     ppc.postProcessBeanFactory(bf).     assertThat(bf.getBean(OptionalTestBean.class).getName(), equalTo(Optional.empty())). }
false;public;0;3;;public Optional<String> getName() {     return name. }
false;public;1;3;;public void setName(Optional<String> name) {     this.name = name. }
