commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void propertyDependentAspectWithPropertyDeclaredBeforeAdvice() throws Exception {     checkXmlAspect(getClass().getSimpleName() + "-before.xml"). }
false;public;0;4;;@Test public void propertyDependentAspectWithPropertyDeclaredAfterAdvice() throws Exception {     checkXmlAspect(getClass().getSimpleName() + "-after.xml"). }
false;public;0;5;;@Test public void propertyDependentAtAspectJAspectWithPropertyDeclaredBeforeAdvice() throws Exception {     checkAtAspectJAspect(getClass().getSimpleName() + "-atAspectJ-before.xml"). }
false;public;0;5;;@Test public void propertyDependentAtAspectJAspectWithPropertyDeclaredAfterAdvice() throws Exception {     checkAtAspectJAspect(getClass().getSimpleName() + "-atAspectJ-after.xml"). }
false;private;1;10;;private void checkXmlAspect(String appContextFile) {     ApplicationContext context = new ClassPathXmlApplicationContext(appContextFile, getClass()).     ICounter counter = (ICounter) context.getBean("counter").     assertTrue("Proxy didn't get created", counter instanceof Advised).     counter.increment().     JoinPointMonitorAspect callCountingAspect = (JoinPointMonitorAspect) context.getBean("monitoringAspect").     assertEquals("Advise didn't get executed", 1, callCountingAspect.beforeExecutions).     assertEquals("Advise didn't get executed", 1, callCountingAspect.aroundExecutions). }
false;private;1;10;;private void checkAtAspectJAspect(String appContextFile) {     ApplicationContext context = new ClassPathXmlApplicationContext(appContextFile, getClass()).     ICounter counter = (ICounter) context.getBean("counter").     assertTrue("Proxy didn't get created", counter instanceof Advised).     counter.increment().     JoinPointMonitorAtAspectJAspect callCountingAspect = (JoinPointMonitorAtAspectJAspect) context.getBean("monitoringAspect").     assertEquals("Advise didn't get executed", 1, callCountingAspect.beforeExecutions).     assertEquals("Advise didn't get executed", 1, callCountingAspect.aroundExecutions). }
false;public;0;3;;public void before() {     beforeExecutions++. }
false;public;1;4;;public Object around(ProceedingJoinPoint pjp) throws Throwable {     aroundExecutions++.     return pjp.proceed(). }
false;public;0;3;;public ICounter getCounter() {     return counter. }
false;public;1;3;;public void setCounter(ICounter counter) {     this.counter = counter. }
false;public;0;4;;@Before("execution(* increment*())") public void before() {     beforeExecutions++. }
false;public;1;5;;@Around("execution(* increment*())") public Object around(ProceedingJoinPoint pjp) throws Throwable {     aroundExecutions++.     return pjp.proceed(). }
false;public;0;3;;public ICounter getCounter() {     return counter. }
false;public;1;3;;public void setCounter(ICounter counter) {     this.counter = counter. }
