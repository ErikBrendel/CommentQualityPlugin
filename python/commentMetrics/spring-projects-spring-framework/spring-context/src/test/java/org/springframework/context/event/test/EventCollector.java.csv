# id;timestamp;commentText;codeText;commentWords;codeWords
EventCollector -> public void assertEvent(String listenerId, Object... events);1423555982;Assert that the listener identified by the specified id has received the_specified events, in that specific order.;public void assertEvent(String listenerId, Object... events) {_		List<Object> actual = content.getOrDefault(listenerId, Collections.emptyList())__		assertEquals("wrong number of events", events.length, actual.size())__		for (int i = 0_ i < events.length_ i++) {_			assertEquals("Wrong event at index " + i, events[i], actual.get(i))__		}_	};assert,that,the,listener,identified,by,the,specified,id,has,received,the,specified,events,in,that,specific,order;public,void,assert,event,string,listener,id,object,events,list,object,actual,content,get,or,default,listener,id,collections,empty,list,assert,equals,wrong,number,of,events,events,length,actual,size,for,int,i,0,i,events,length,i,assert,equals,wrong,event,at,index,i,events,i,actual,get,i
EventCollector -> public void assertEvent(String listenerId, Object... events);1460442878;Assert that the listener identified by the specified id has received the_specified events, in that specific order.;public void assertEvent(String listenerId, Object... events) {_		List<Object> actual = this.content.getOrDefault(listenerId, Collections.emptyList())__		assertEquals("wrong number of events", events.length, actual.size())__		for (int i = 0_ i < events.length_ i++) {_			assertEquals("Wrong event at index " + i, events[i], actual.get(i))__		}_	};assert,that,the,listener,identified,by,the,specified,id,has,received,the,specified,events,in,that,specific,order;public,void,assert,event,string,listener,id,object,events,list,object,actual,this,content,get,or,default,listener,id,collections,empty,list,assert,equals,wrong,number,of,events,events,length,actual,size,for,int,i,0,i,events,length,i,assert,equals,wrong,event,at,index,i,events,i,actual,get,i
EventCollector -> public void assertEvent(String listenerId, Object... events);1472594231;Assert that the listener identified by the specified id has received the_specified events, in that specific order.;public void assertEvent(String listenerId, Object... events) {_		List<Object> actual = this.content.getOrDefault(listenerId, Collections.emptyList())__		assertEquals("Wrong number of events", events.length, actual.size())__		for (int i = 0_ i < events.length_ i++) {_			assertEquals("Wrong event at index " + i, events[i], actual.get(i))__		}_	};assert,that,the,listener,identified,by,the,specified,id,has,received,the,specified,events,in,that,specific,order;public,void,assert,event,string,listener,id,object,events,list,object,actual,this,content,get,or,default,listener,id,collections,empty,list,assert,equals,wrong,number,of,events,events,length,actual,size,for,int,i,0,i,events,length,i,assert,equals,wrong,event,at,index,i,events,i,actual,get,i
EventCollector -> public void addEvent(Identifiable listener, Object event);1423555982;Register an event for the specified listener.;public void addEvent(Identifiable listener, Object event) {_		this.content.add(listener.getId(), event)__	};register,an,event,for,the,specified,listener;public,void,add,event,identifiable,listener,object,event,this,content,add,listener,get,id,event
EventCollector -> public void addEvent(Identifiable listener, Object event);1460442878;Register an event for the specified listener.;public void addEvent(Identifiable listener, Object event) {_		this.content.add(listener.getId(), event)__	};register,an,event,for,the,specified,listener;public,void,add,event,identifiable,listener,object,event,this,content,add,listener,get,id,event
EventCollector -> public void addEvent(Identifiable listener, Object event);1472594231;Register an event for the specified listener.;public void addEvent(Identifiable listener, Object event) {_		this.content.add(listener.getId(), event)__	};register,an,event,for,the,specified,listener;public,void,add,event,identifiable,listener,object,event,this,content,add,listener,get,id,event
EventCollector -> public void assertTotalEventsCount(int number);1423555982;Assert the number of events received by this instance. Checks that_unexpected events have not been received. If an event is handled by_several listeners, each instance will be registered.;public void assertTotalEventsCount(int number) {_		int actual = 0__		for (Map.Entry<String, List<Object>> entry : this.content.entrySet()) {_			actual += entry.getValue().size()__		}_		assertEquals("Wrong number of total events (" + this.content.size() + ") " +_				"registered listener(s)", number, actual)__	};assert,the,number,of,events,received,by,this,instance,checks,that,unexpected,events,have,not,been,received,if,an,event,is,handled,by,several,listeners,each,instance,will,be,registered;public,void,assert,total,events,count,int,number,int,actual,0,for,map,entry,string,list,object,entry,this,content,entry,set,actual,entry,get,value,size,assert,equals,wrong,number,of,total,events,this,content,size,registered,listener,s,number,actual
EventCollector -> public void assertTotalEventsCount(int number);1460442878;Assert the number of events received by this instance. Checks that_unexpected events have not been received. If an event is handled by_several listeners, each instance will be registered.;public void assertTotalEventsCount(int number) {_		int actual = 0__		for (Map.Entry<String, List<Object>> entry : this.content.entrySet()) {_			actual += entry.getValue().size()__		}_		assertEquals("Wrong number of total events (" + this.content.size() + ") " +_				"registered listener(s)", number, actual)__	};assert,the,number,of,events,received,by,this,instance,checks,that,unexpected,events,have,not,been,received,if,an,event,is,handled,by,several,listeners,each,instance,will,be,registered;public,void,assert,total,events,count,int,number,int,actual,0,for,map,entry,string,list,object,entry,this,content,entry,set,actual,entry,get,value,size,assert,equals,wrong,number,of,total,events,this,content,size,registered,listener,s,number,actual
EventCollector -> public void assertTotalEventsCount(int number);1472594231;Assert the number of events received by this instance. Checks that_unexpected events have not been received. If an event is handled by_several listeners, each instance will be registered.;public void assertTotalEventsCount(int number) {_		int actual = 0__		for (Map.Entry<String, List<Object>> entry : this.content.entrySet()) {_			actual += entry.getValue().size()__		}_		assertEquals("Wrong number of total events (" + this.content.size() +_				") registered listener(s)", number, actual)__	};assert,the,number,of,events,received,by,this,instance,checks,that,unexpected,events,have,not,been,received,if,an,event,is,handled,by,several,listeners,each,instance,will,be,registered;public,void,assert,total,events,count,int,number,int,actual,0,for,map,entry,string,list,object,entry,this,content,entry,set,actual,entry,get,value,size,assert,equals,wrong,number,of,total,events,this,content,size,registered,listener,s,number,actual
EventCollector -> public void assertNoEventReceived(String listenerId);1423555982;Assert that the listener identified by the specified id has not received any event.;public void assertNoEventReceived(String listenerId) {_		List<Object> events = content.getOrDefault(listenerId, Collections.emptyList())__		assertEquals("Expected no events but got " + events, 0, events.size())__	};assert,that,the,listener,identified,by,the,specified,id,has,not,received,any,event;public,void,assert,no,event,received,string,listener,id,list,object,events,content,get,or,default,listener,id,collections,empty,list,assert,equals,expected,no,events,but,got,events,0,events,size
EventCollector -> public void assertNoEventReceived(String listenerId);1460442878;Assert that the listener identified by the specified id has not received any event.;public void assertNoEventReceived(String listenerId) {_		List<Object> events = this.content.getOrDefault(listenerId, Collections.emptyList())__		assertEquals("Expected no events but got " + events, 0, events.size())__	};assert,that,the,listener,identified,by,the,specified,id,has,not,received,any,event;public,void,assert,no,event,received,string,listener,id,list,object,events,this,content,get,or,default,listener,id,collections,empty,list,assert,equals,expected,no,events,but,got,events,0,events,size
EventCollector -> public void assertNoEventReceived(String listenerId);1472594231;Assert that the listener identified by the specified id has not received any event.;public void assertNoEventReceived(String listenerId) {_		List<Object> events = this.content.getOrDefault(listenerId, Collections.emptyList())__		assertEquals("Expected no events but got " + events, 0, events.size())__	};assert,that,the,listener,identified,by,the,specified,id,has,not,received,any,event;public,void,assert,no,event,received,string,listener,id,list,object,events,this,content,get,or,default,listener,id,collections,empty,list,assert,equals,expected,no,events,but,got,events,0,events,size
EventCollector -> public void assertEvent(Identifiable listener, Object... events);1423555982;Assert that the specified listener has received the specified events, in_that specific order.;public void assertEvent(Identifiable listener, Object... events) {_		assertEvent(listener.getId(), events)__	};assert,that,the,specified,listener,has,received,the,specified,events,in,that,specific,order;public,void,assert,event,identifiable,listener,object,events,assert,event,listener,get,id,events
EventCollector -> public void assertEvent(Identifiable listener, Object... events);1460442878;Assert that the specified listener has received the specified events, in_that specific order.;public void assertEvent(Identifiable listener, Object... events) {_		assertEvent(listener.getId(), events)__	};assert,that,the,specified,listener,has,received,the,specified,events,in,that,specific,order;public,void,assert,event,identifiable,listener,object,events,assert,event,listener,get,id,events
EventCollector -> public void assertEvent(Identifiable listener, Object... events);1472594231;Assert that the specified listener has received the specified events, in_that specific order.;public void assertEvent(Identifiable listener, Object... events) {_		assertEvent(listener.getId(), events)__	};assert,that,the,specified,listener,has,received,the,specified,events,in,that,specific,order;public,void,assert,event,identifiable,listener,object,events,assert,event,listener,get,id,events
EventCollector -> public List<Object> getEvents(Identifiable listener);1423555982;Return the events that the specified listener has received. The list of events_is ordered according to their reception order.;public List<Object> getEvents(Identifiable listener) {_		return this.content.get(listener.getId())__	};return,the,events,that,the,specified,listener,has,received,the,list,of,events,is,ordered,according,to,their,reception,order;public,list,object,get,events,identifiable,listener,return,this,content,get,listener,get,id
EventCollector -> public List<Object> getEvents(Identifiable listener);1460442878;Return the events that the specified listener has received. The list of events_is ordered according to their reception order.;public List<Object> getEvents(Identifiable listener) {_		return this.content.get(listener.getId())__	};return,the,events,that,the,specified,listener,has,received,the,list,of,events,is,ordered,according,to,their,reception,order;public,list,object,get,events,identifiable,listener,return,this,content,get,listener,get,id
EventCollector -> public List<Object> getEvents(Identifiable listener);1472594231;Return the events that the specified listener has received. The list of events_is ordered according to their reception order.;public List<Object> getEvents(Identifiable listener) {_		return this.content.get(listener.getId())__	};return,the,events,that,the,specified,listener,has,received,the,list,of,events,is,ordered,according,to,their,reception,order;public,list,object,get,events,identifiable,listener,return,this,content,get,listener,get,id
EventCollector -> public void assertNoEventReceived(Identifiable listener);1423555982;Assert that the specified listener has not received any event.;public void assertNoEventReceived(Identifiable listener) {_		assertNoEventReceived(listener.getId())__	};assert,that,the,specified,listener,has,not,received,any,event;public,void,assert,no,event,received,identifiable,listener,assert,no,event,received,listener,get,id
EventCollector -> public void assertNoEventReceived(Identifiable listener);1460442878;Assert that the specified listener has not received any event.;public void assertNoEventReceived(Identifiable listener) {_		assertNoEventReceived(listener.getId())__	};assert,that,the,specified,listener,has,not,received,any,event;public,void,assert,no,event,received,identifiable,listener,assert,no,event,received,listener,get,id
EventCollector -> public void assertNoEventReceived(Identifiable listener);1472594231;Assert that the specified listener has not received any event.;public void assertNoEventReceived(Identifiable listener) {_		assertNoEventReceived(listener.getId())__	};assert,that,the,specified,listener,has,not,received,any,event;public,void,assert,no,event,received,identifiable,listener,assert,no,event,received,listener,get,id
