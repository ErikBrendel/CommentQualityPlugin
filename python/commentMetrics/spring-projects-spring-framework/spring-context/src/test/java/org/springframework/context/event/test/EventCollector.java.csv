commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Register an event for the specified listener.  */ ;/**  * Register an event for the specified listener.  */ public void addEvent(Identifiable listener, Object event) {     this.content.add(listener.getId(), event). }
true;public;1;3;/**  * Return the events that the specified listener has received. The list of events  * is ordered according to their reception order.  */ ;/**  * Return the events that the specified listener has received. The list of events  * is ordered according to their reception order.  */ public List<Object> getEvents(Identifiable listener) {     return this.content.get(listener.getId()). }
true;public;1;4;/**  * Assert that the listener identified by the specified id has not received any event.  */ ;/**  * Assert that the listener identified by the specified id has not received any event.  */ public void assertNoEventReceived(String listenerId) {     List<Object> events = this.content.getOrDefault(listenerId, Collections.emptyList()).     assertEquals("Expected no events but got " + events, 0, events.size()). }
true;public;1;3;/**  * Assert that the specified listener has not received any event.  */ ;/**  * Assert that the specified listener has not received any event.  */ public void assertNoEventReceived(Identifiable listener) {     assertNoEventReceived(listener.getId()). }
true;public;2;7;/**  * Assert that the listener identified by the specified id has received the  * specified events, in that specific order.  */ ;/**  * Assert that the listener identified by the specified id has received the  * specified events, in that specific order.  */ public void assertEvent(String listenerId, Object... events) {     List<Object> actual = this.content.getOrDefault(listenerId, Collections.emptyList()).     assertEquals("Wrong number of events", events.length, actual.size()).     for (int i = 0. i < events.length. i++) {         assertEquals("Wrong event at index " + i, events[i], actual.get(i)).     } }
true;public;2;3;/**  * Assert that the specified listener has received the specified events, in  * that specific order.  */ ;/**  * Assert that the specified listener has received the specified events, in  * that specific order.  */ public void assertEvent(Identifiable listener, Object... events) {     assertEvent(listener.getId(), events). }
true;public;1;8;/**  * Assert the number of events received by this instance. Checks that  * unexpected events have not been received. If an event is handled by  * several listeners, each instance will be registered.  */ ;/**  * Assert the number of events received by this instance. Checks that  * unexpected events have not been received. If an event is handled by  * several listeners, each instance will be registered.  */ public void assertTotalEventsCount(int number) {     int actual = 0.     for (Map.Entry<String, List<Object>> entry : this.content.entrySet()) {         actual += entry.getValue().size().     }     assertEquals("Wrong number of total events (" + this.content.size() + ") registered listener(s)", number, actual). }
true;public;0;3;/**  * Clear the collected events, allowing for reuse of the collector.  */ ;/**  * Clear the collected events, allowing for reuse of the collector.  */ public void clear() {     this.content.clear(). }
