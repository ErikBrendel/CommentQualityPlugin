commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void singularAnnotation() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "singular", 1).     assertTrue(ops.iterator().next() instanceof CacheableOperation). }
false;public;0;7;;@Test public void multipleAnnotation() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "multiple", 2).     Iterator<CacheOperation> it = ops.iterator().     assertTrue(it.next() instanceof CacheableOperation).     assertTrue(it.next() instanceof CacheEvictOperation). }
false;public;0;7;;@Test public void caching() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "caching", 2).     Iterator<CacheOperation> it = ops.iterator().     assertTrue(it.next() instanceof CacheableOperation).     assertTrue(it.next() instanceof CacheEvictOperation). }
false;public;0;4;;@Test public void emptyCaching() {     getOps(AnnotatedClass.class, "emptyCaching", 0). }
false;public;0;5;;@Test public void singularStereotype() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "singleStereotype", 1).     assertTrue(ops.iterator().next() instanceof CacheEvictOperation). }
false;public;0;12;;@Test public void multipleStereotypes() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "multipleStereotype", 3).     Iterator<CacheOperation> it = ops.iterator().     assertTrue(it.next() instanceof CacheableOperation).     CacheOperation next = it.next().     assertTrue(next instanceof CacheEvictOperation).     assertTrue(next.getCacheNames().contains("foo")).     next = it.next().     assertTrue(next instanceof CacheEvictOperation).     assertTrue(next.getCacheNames().contains("bar")). }
false;public;0;15;;@Test public void singleComposedAnnotation() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "singleComposed", 2).     Iterator<CacheOperation> it = ops.iterator().     CacheOperation cacheOperation = it.next().     assertThat(cacheOperation, instanceOf(CacheableOperation.class)).     assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("directly declared"))).     assertThat(cacheOperation.getKey(), equalTo("")).     cacheOperation = it.next().     assertThat(cacheOperation, instanceOf(CacheableOperation.class)).     assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("composedCache"))).     assertThat(cacheOperation.getKey(), equalTo("composedKey")). }
false;public;0;25;;@Test public void multipleComposedAnnotations() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "multipleComposed", 4).     Iterator<CacheOperation> it = ops.iterator().     CacheOperation cacheOperation = it.next().     assertThat(cacheOperation, instanceOf(CacheableOperation.class)).     assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("directly declared"))).     assertThat(cacheOperation.getKey(), equalTo("")).     cacheOperation = it.next().     assertThat(cacheOperation, instanceOf(CacheableOperation.class)).     assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("composedCache"))).     assertThat(cacheOperation.getKey(), equalTo("composedKey")).     cacheOperation = it.next().     assertThat(cacheOperation, instanceOf(CacheableOperation.class)).     assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("foo"))).     assertThat(cacheOperation.getKey(), equalTo("")).     cacheOperation = it.next().     assertThat(cacheOperation, instanceOf(CacheEvictOperation.class)).     assertThat(cacheOperation.getCacheNames(), equalTo(Collections.singleton("composedCacheEvict"))).     assertThat(cacheOperation.getKey(), equalTo("composedEvictionKey")). }
false;public;0;6;;@Test public void customKeyGenerator() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "customKeyGenerator", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertEquals("Custom key generator not set", "custom", cacheOperation.getKeyGenerator()). }
false;public;0;6;;@Test public void customKeyGeneratorInherited() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "customKeyGeneratorInherited", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertEquals("Custom key generator not set", "custom", cacheOperation.getKeyGenerator()). }
false;public;0;5;;@Test public void keyAndKeyGeneratorCannotBeSetTogether() {     this.exception.expect(IllegalStateException.class).     getOps(AnnotatedClass.class, "invalidKeyAndKeyGeneratorSet"). }
false;public;0;6;;@Test public void customCacheManager() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "customCacheManager", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertEquals("Custom cache manager not set", "custom", cacheOperation.getCacheManager()). }
false;public;0;6;;@Test public void customCacheManagerInherited() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "customCacheManagerInherited", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertEquals("Custom cache manager not set", "custom", cacheOperation.getCacheManager()). }
false;public;0;6;;@Test public void customCacheResolver() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "customCacheResolver", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertEquals("Custom cache resolver not set", "custom", cacheOperation.getCacheResolver()). }
false;public;0;6;;@Test public void customCacheResolverInherited() {     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "customCacheResolverInherited", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertEquals("Custom cache resolver not set", "custom", cacheOperation.getCacheResolver()). }
false;public;0;5;;@Test public void cacheResolverAndCacheManagerCannotBeSetTogether() {     this.exception.expect(IllegalStateException.class).     getOps(AnnotatedClass.class, "invalidCacheResolverAndCacheManagerSet"). }
false;public;0;6;;@Test public void fullClassLevelWithCustomCacheName() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithFullDefault.class, "methodLevelCacheName", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "", "classCacheResolver", "custom"). }
false;public;0;6;;@Test public void fullClassLevelWithCustomKeyManager() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithFullDefault.class, "methodLevelKeyGenerator", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "custom", "", "classCacheResolver", "classCacheName"). }
false;public;0;6;;@Test public void fullClassLevelWithCustomCacheManager() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithFullDefault.class, "methodLevelCacheManager", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "custom", "", "classCacheName"). }
false;public;0;6;;@Test public void fullClassLevelWithCustomCacheResolver() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithFullDefault.class, "methodLevelCacheResolver", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "", "custom", "classCacheName"). }
false;public;0;8;;@Test public void validateNoCacheIsValid() {     // Valid as a CacheResolver might return the cache names to use with other info     Collection<CacheOperation> ops = getOps(AnnotatedClass.class, "noCacheNameSpecified").     CacheOperation cacheOperation = ops.iterator().next().     assertNotNull("cache names set must not be null", cacheOperation.getCacheNames()).     assertEquals("no cache names specified", 0, cacheOperation.getCacheNames().size()). }
false;public;0;6;;@Test public void customClassLevelWithCustomCacheName() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithCustomDefault.class, "methodLevelCacheName", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "", "classCacheResolver", "custom"). }
false;public;0;6;;@Test public void severalCacheConfigUseClosest() {     Collection<CacheOperation> ops = getOps(MultipleCacheConfig.class, "multipleCacheConfig").     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "", "", "", "myCache"). }
false;public;0;6;;@Test public void cacheConfigFromInterface() {     Collection<CacheOperation> ops = getOps(InterfaceCacheConfig.class, "interfaceCacheConfig").     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "", "", "", "myCache"). }
false;public;0;7;;@Test public void cacheAnnotationOverride() {     Collection<CacheOperation> ops = getOps(InterfaceCacheConfig.class, "interfaceCacheableOverride").     assertSame(1, ops.size()).     CacheOperation cacheOperation = ops.iterator().next().     assertTrue(cacheOperation instanceof CacheableOperation). }
false;public;0;6;;@Test public void partialClassLevelWithCustomCacheManager() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithSomeDefault.class, "methodLevelCacheManager", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "custom", "", "classCacheName"). }
false;public;0;6;;@Test public void partialClassLevelWithCustomCacheResolver() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithSomeDefault.class, "methodLevelCacheResolver", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "", "custom", "classCacheName"). }
false;public;0;6;;@Test public void partialClassLevelWithNoCustomization() {     Collection<CacheOperation> ops = getOps(AnnotatedClassWithSomeDefault.class, "noCustomization", 1).     CacheOperation cacheOperation = ops.iterator().next().     assertSharedConfig(cacheOperation, "classKeyGenerator", "classCacheManager", "", "classCacheName"). }
false;private;3;5;;private Collection<CacheOperation> getOps(Class<?> target, String name, int expectedNumberOfOperations) {     Collection<CacheOperation> result = getOps(target, name).     assertEquals("Wrong number of operation(s) for '" + name + "'", expectedNumberOfOperations, result.size()).     return result. }
false;private;2;9;;private Collection<CacheOperation> getOps(Class<?> target, String name) {     try {         Method method = target.getMethod(name).         return this.source.getCacheOperations(method, target).     } catch (NoSuchMethodException ex) {         throw new IllegalStateException(ex).     } }
false;private;5;11;;private void assertSharedConfig(CacheOperation actual, String keyGenerator, String cacheManager, String cacheResolver, String... cacheNames) {     assertEquals("Wrong key manager", keyGenerator, actual.getKeyGenerator()).     assertEquals("Wrong cache manager", cacheManager, actual.getCacheManager()).     assertEquals("Wrong cache resolver", cacheResolver, actual.getCacheResolver()).     assertEquals("Wrong number of cache names", cacheNames.length, actual.getCacheNames().size()).     Arrays.stream(cacheNames).forEach(cacheName -> assertTrue("Cache '" + cacheName + "' not found in " + actual.getCacheNames(), actual.getCacheNames().contains(cacheName))). }
false;public;0;3;;@Cacheable("test") public void singular() { }
false;public;0;4;;@CacheEvict("test") @Cacheable("test") public void multiple() { }
false;public;0;3;;@Caching(cacheable = @Cacheable("test"), evict = @CacheEvict("test")) public void caching() { }
false;public;0;3;;@Caching public void emptyCaching() { }
false;public;0;3;;@Cacheable(cacheNames = "test", keyGenerator = "custom") public void customKeyGenerator() { }
false;public;0;3;;@Cacheable(cacheNames = "test", cacheManager = "custom") public void customCacheManager() { }
false;public;0;3;;@Cacheable(cacheNames = "test", cacheResolver = "custom") public void customCacheResolver() { }
false;public;0;3;;@EvictFoo public void singleStereotype() { }
false;public;0;5;;@EvictFoo @CacheableFoo @EvictBar public void multipleStereotype() { }
false;public;0;4;;@Cacheable("directly declared") @ComposedCacheable(cacheNames = "composedCache", key = "composedKey") public void singleComposed() { }
false;public;0;6;;@Cacheable("directly declared") @ComposedCacheable(cacheNames = "composedCache", key = "composedKey") @CacheableFoo @ComposedCacheEvict(cacheNames = "composedCacheEvict", key = "composedEvictionKey") public void multipleComposed() { }
false;public;0;3;;@Caching(cacheable = { @Cacheable(cacheNames = "test", key = "a"), @Cacheable(cacheNames = "test", key = "b") }) public void multipleCaching() { }
false;public;0;3;;@CacheableFooCustomKeyGenerator public void customKeyGeneratorInherited() { }
false;public;0;3;;@Cacheable(cacheNames = "test", key = "#root.methodName", keyGenerator = "custom") public void invalidKeyAndKeyGeneratorSet() { }
false;public;0;3;;@CacheableFooCustomCacheManager public void customCacheManagerInherited() { }
false;public;0;3;;@CacheableFooCustomCacheResolver public void customCacheResolverInherited() { }
false;public;0;3;;@Cacheable(cacheNames = "test", cacheManager = "custom", cacheResolver = "custom") public void invalidCacheResolverAndCacheManagerSet() { }
false;public;0;3;;// cache name can be inherited from CacheConfig. There's none here @Cacheable public void noCacheNameSpecified() { }
false;public;0;3;;@Cacheable("custom") public void methodLevelCacheName() { }
false;public;0;3;;@Cacheable(keyGenerator = "custom") public void methodLevelKeyGenerator() { }
false;public;0;3;;@Cacheable(cacheManager = "custom") public void methodLevelCacheManager() { }
false;public;0;3;;@Cacheable(cacheResolver = "custom") public void methodLevelCacheResolver() { }
false;public;0;3;;@Cacheable("custom") public void methodLevelCacheName() { }
false;public;0;3;;@Cacheable(cacheManager = "custom") public void methodLevelCacheManager() { }
false;public;0;3;;@Cacheable(cacheResolver = "custom") public void methodLevelCacheResolver() { }
false;public;0;3;;@Cacheable public void noCustomization() { }
false;public;0;3;;@Cacheable public void multipleCacheConfig() { }
false;;0;2;;@Cacheable void interfaceCacheConfig().
false;;0;2;;@CachePut void interfaceCacheableOverride().
false;public;0;3;;@Override public void interfaceCacheConfig() { }
false;public;0;4;;@Override @Cacheable public void interfaceCacheableOverride() { }
