commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void directlyAnnotatedWithImport() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ImportingConfig.class).     ctx.refresh().     assertNotNull(ctx.getBean("importedConfigBean")).     ImportedConfig importAwareConfig = ctx.getBean(ImportedConfig.class).     AnnotationMetadata importMetadata = importAwareConfig.importMetadata.     assertThat("import metadata was not injected", importMetadata, notNullValue()).     assertThat(importMetadata.getClassName(), is(ImportingConfig.class.getName())).     AnnotationAttributes importAttribs = AnnotationConfigUtils.attributesFor(importMetadata, Import.class).     Class<?>[] importedClasses = importAttribs.getClassArray("value").     assertThat(importedClasses[0].getName(), is(ImportedConfig.class.getName())). }
false;public;0;15;;@Test public void indirectlyAnnotatedWithImport() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(IndirectlyImportingConfig.class).     ctx.refresh().     assertNotNull(ctx.getBean("importedConfigBean")).     ImportedConfig importAwareConfig = ctx.getBean(ImportedConfig.class).     AnnotationMetadata importMetadata = importAwareConfig.importMetadata.     assertThat("import metadata was not injected", importMetadata, notNullValue()).     assertThat(importMetadata.getClassName(), is(IndirectlyImportingConfig.class.getName())).     AnnotationAttributes enableAttribs = AnnotationConfigUtils.attributesFor(importMetadata, EnableImportedConfig.class).     String foo = enableAttribs.getString("foo").     assertThat(foo, is("xyz")). }
false;public;0;9;;@Test public void importRegistrar() throws Exception {     ImportedRegistrar.called = false.     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ImportingRegistrarConfig.class).     ctx.refresh().     assertNotNull(ctx.getBean("registrarImportedBean")).     assertNotNull(ctx.getBean("otherImportedConfigBean")). }
false;public;0;11;;@Test public void importRegistrarWithImport() throws Exception {     ImportedRegistrar.called = false.     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ImportingRegistrarConfigWithImport.class).     ctx.refresh().     assertNotNull(ctx.getBean("registrarImportedBean")).     assertNotNull(ctx.getBean("otherImportedConfigBean")).     assertNotNull(ctx.getBean("importedConfigBean")).     assertNotNull(ctx.getBean(ImportedConfig.class)). }
false;public;0;8;;@Test public void metadataFromImportsOneThenTwo() {     AnnotationMetadata importMetadata = new AnnotationConfigApplicationContext(ConfigurationOne.class, ConfigurationTwo.class).getBean(MetadataHolder.class).importMetadata.     assertEquals(ConfigurationOne.class, ((StandardAnnotationMetadata) importMetadata).getIntrospectedClass()). }
false;public;0;8;;@Test public void metadataFromImportsTwoThenOne() {     AnnotationMetadata importMetadata = new AnnotationConfigApplicationContext(ConfigurationTwo.class, ConfigurationOne.class).getBean(MetadataHolder.class).importMetadata.     assertEquals(ConfigurationOne.class, ((StandardAnnotationMetadata) importMetadata).getIntrospectedClass()). }
false;public;1;4;;@Override public void setImportMetadata(AnnotationMetadata importMetadata) {     this.importMetadata = importMetadata. }
false;public;0;4;;@Bean public BPP importedConfigBean() {     return new BPP(). }
false;public;0;4;;@Bean public AsyncAnnotationBeanPostProcessor asyncBPP() {     return new AsyncAnnotationBeanPostProcessor(). }
false;public;0;4;;@Bean public String otherImportedConfigBean() {     return "". }
false;public;1;3;;@Override public void setBeanFactory(BeanFactory beanFactory) { }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) {     return bean. }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     return bean. }
false;public;2;11;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {     GenericBeanDefinition beanDefinition = new GenericBeanDefinition().     beanDefinition.setBeanClassName(String.class.getName()).     registry.registerBeanDefinition("registrarImportedBean", beanDefinition).     GenericBeanDefinition beanDefinition2 = new GenericBeanDefinition().     beanDefinition2.setBeanClass(OtherImportedConfig.class).     registry.registerBeanDefinition("registrarImportedConfig", beanDefinition2).     Assert.state(!called, "ImportedRegistrar called twice").     called = true. }
false;public;1;4;;@Override public void setImportMetadata(AnnotationMetadata importMetadata) {     this.importMetadata = importMetadata. }
false;public;0;4;;@Bean public MetadataHolder holder() {     return new MetadataHolder(this.importMetadata). }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return (context.getBeanFactory().getBeanNamesForType(MetadataHolder.class, true, false).length == 0). }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return ConfigurationPhase.REGISTER_BEAN. }
