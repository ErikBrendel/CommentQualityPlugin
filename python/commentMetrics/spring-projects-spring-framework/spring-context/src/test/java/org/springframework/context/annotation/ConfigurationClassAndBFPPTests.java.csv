commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void autowiringFailsWithBFPPAsInstanceMethod() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(TestBeanConfig.class, AutowiredConfigWithBFPPAsInstanceMethod.class).     ctx.refresh().     // instance method BFPP interferes with lifecycle -> autowiring fails!     // WARN-level logging should have been issued about returning BFPP from non-static @Bean method     assertThat(ctx.getBean(AutowiredConfigWithBFPPAsInstanceMethod.class).autowiredTestBean, nullValue()). }
false;public;0;8;;@Test public void autowiringSucceedsWithBFPPAsStaticMethod() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(TestBeanConfig.class, AutowiredConfigWithBFPPAsStaticMethod.class).     ctx.refresh().     // static method BFPP does not interfere with lifecycle -> autowiring succeeds     assertThat(ctx.getBean(AutowiredConfigWithBFPPAsStaticMethod.class).autowiredTestBean, notNullValue()). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(). }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { // no-op }
false;public;0;9;;@Bean public BeanFactoryPostProcessor bfpp() {     return new BeanFactoryPostProcessor() {          @Override         public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {         // no-op         }     }. }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { // no-op }
false;public,static,final;0;9;;@Bean public static final BeanFactoryPostProcessor bfpp() {     return new BeanFactoryPostProcessor() {          @Override         public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {         // no-op         }     }. }
false;public;0;7;;@Test public void staticBeanMethodsDoNotRespectScoping() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithStaticBeanMethod.class).     ctx.refresh().     assertThat(ConfigWithStaticBeanMethod.testBean(), not(sameInstance(ConfigWithStaticBeanMethod.testBean()))). }
false;public,static;0;4;;@Bean public static TestBean testBean() {     return new TestBean("foo"). }
