commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testRegisteredBeanFactoryPostProcessor() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("tb1", TestBean.class).     ac.registerSingleton("tb2", TestBean.class).     TestBeanFactoryPostProcessor bfpp = new TestBeanFactoryPostProcessor().     ac.addBeanFactoryPostProcessor(bfpp).     assertFalse(bfpp.wasCalled).     ac.refresh().     assertTrue(bfpp.wasCalled). }
false;public;0;10;;@Test public void testDefinedBeanFactoryPostProcessor() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("tb1", TestBean.class).     ac.registerSingleton("tb2", TestBean.class).     ac.registerSingleton("bfpp", TestBeanFactoryPostProcessor.class).     ac.refresh().     TestBeanFactoryPostProcessor bfpp = (TestBeanFactoryPostProcessor) ac.getBean("bfpp").     assertTrue(bfpp.wasCalled). }
false;public;0;16;;@Test public void testMultipleDefinedBeanFactoryPostProcessors() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("tb1", TestBean.class).     ac.registerSingleton("tb2", TestBean.class).     MutablePropertyValues pvs1 = new MutablePropertyValues().     pvs1.add("initValue", "${key}").     ac.registerSingleton("bfpp1", TestBeanFactoryPostProcessor.class, pvs1).     MutablePropertyValues pvs2 = new MutablePropertyValues().     pvs2.add("properties", "key=value").     ac.registerSingleton("bfpp2", PropertyPlaceholderConfigurer.class, pvs2).     ac.refresh().     TestBeanFactoryPostProcessor bfpp = (TestBeanFactoryPostProcessor) ac.getBean("bfpp1").     assertEquals("value", bfpp.initValue).     assertTrue(bfpp.wasCalled). }
false;public;0;9;;@Test public void testBeanFactoryPostProcessorNotExecutedByBeanFactory() {     DefaultListableBeanFactory bf = new DefaultListableBeanFactory().     bf.registerBeanDefinition("tb1", new RootBeanDefinition(TestBean.class)).     bf.registerBeanDefinition("tb2", new RootBeanDefinition(TestBean.class)).     bf.registerBeanDefinition("bfpp", new RootBeanDefinition(TestBeanFactoryPostProcessor.class)).     TestBeanFactoryPostProcessor bfpp = (TestBeanFactoryPostProcessor) bf.getBean("bfpp").     assertFalse(bfpp.wasCalled). }
false;public;0;14;;@Test public void testBeanDefinitionRegistryPostProcessor() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("tb1", TestBean.class).     ac.registerSingleton("tb2", TestBean.class).     ac.addBeanFactoryPostProcessor(new PrioritizedBeanDefinitionRegistryPostProcessor()).     TestBeanDefinitionRegistryPostProcessor bdrpp = new TestBeanDefinitionRegistryPostProcessor().     ac.addBeanFactoryPostProcessor(bdrpp).     assertFalse(bdrpp.wasCalled).     ac.refresh().     assertTrue(bdrpp.wasCalled).     assertTrue(ac.getBean("bfpp1", TestBeanFactoryPostProcessor.class).wasCalled).     assertTrue(ac.getBean("bfpp2", TestBeanFactoryPostProcessor.class).wasCalled). }
false;public;0;10;;@Test public void testBeanDefinitionRegistryPostProcessorRegisteringAnother() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("tb1", TestBean.class).     ac.registerSingleton("tb2", TestBean.class).     ac.registerBeanDefinition("bdrpp2", new RootBeanDefinition(OuterBeanDefinitionRegistryPostProcessor.class)).     ac.refresh().     assertTrue(ac.getBean("bfpp1", TestBeanFactoryPostProcessor.class).wasCalled).     assertTrue(ac.getBean("bfpp2", TestBeanFactoryPostProcessor.class).wasCalled). }
false;public;0;10;;@Test public void testPrioritizedBeanDefinitionRegistryPostProcessorRegisteringAnother() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("tb1", TestBean.class).     ac.registerSingleton("tb2", TestBean.class).     ac.registerBeanDefinition("bdrpp2", new RootBeanDefinition(PrioritizedOuterBeanDefinitionRegistryPostProcessor.class)).     ac.refresh().     assertTrue(ac.getBean("bfpp1", TestBeanFactoryPostProcessor.class).wasCalled).     assertTrue(ac.getBean("bfpp2", TestBeanFactoryPostProcessor.class).wasCalled). }
false;public;0;7;;@Test public void testBeanFactoryPostProcessorAsApplicationListener() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerBeanDefinition("bfpp", new RootBeanDefinition(ListeningBeanFactoryPostProcessor.class)).     ac.refresh().     assertTrue(ac.getBean(ListeningBeanFactoryPostProcessor.class).received instanceof ContextRefreshedEvent). }
false;public;0;9;;@Test public void testBeanFactoryPostProcessorWithInnerBeanAsApplicationListener() {     StaticApplicationContext ac = new StaticApplicationContext().     RootBeanDefinition rbd = new RootBeanDefinition(NestingBeanFactoryPostProcessor.class).     rbd.getPropertyValues().add("listeningBean", new RootBeanDefinition(ListeningBean.class)).     ac.registerBeanDefinition("bfpp", rbd).     ac.refresh().     assertTrue(ac.getBean(NestingBeanFactoryPostProcessor.class).getListeningBean().received instanceof ContextRefreshedEvent). }
false;public;1;3;;public void setInitValue(String initValue) {     this.initValue = initValue. }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {     wasCalled = true. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
false;public;1;4;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     registry.registerBeanDefinition("bfpp1", new RootBeanDefinition(TestBeanFactoryPostProcessor.class)). }
false;public;1;3;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;1;5;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     assertTrue(registry.containsBeanDefinition("bfpp1")).     registry.registerBeanDefinition("bfpp2", new RootBeanDefinition(TestBeanFactoryPostProcessor.class)). }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     this.wasCalled = true. }
false;public;1;5;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     registry.registerBeanDefinition("anotherpp", new RootBeanDefinition(TestBeanDefinitionRegistryPostProcessor.class)).     registry.registerBeanDefinition("ppp", new RootBeanDefinition(PrioritizedBeanDefinitionRegistryPostProcessor.class)). }
false;public;1;3;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;0;4;;@Override public int getOrder() {     return HIGHEST_PRECEDENCE. }
false;public;1;3;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;1;5;;@Override public void onApplicationEvent(ApplicationEvent event) {     Assert.state(this.received == null, "Just one ContextRefreshedEvent expected").     this.received = event. }
false;public;1;5;;@Override public void onApplicationEvent(ApplicationEvent event) {     Assert.state(this.received == null, "Just one ContextRefreshedEvent expected").     this.received = event. }
false;public;1;3;;public void setListeningBean(ListeningBean listeningBean) {     this.listeningBean = listeningBean. }
false;public;0;3;;public ListeningBean getListeningBean() {     return listeningBean. }
false;public;1;3;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
