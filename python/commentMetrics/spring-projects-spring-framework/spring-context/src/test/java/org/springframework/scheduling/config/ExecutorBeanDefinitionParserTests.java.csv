commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.context = new ClassPathXmlApplicationContext("executorContext.xml", ExecutorBeanDefinitionParserTests.class). }
false;public;0;4;;@Override public String call() throws Exception {     return "foo". }
false;public;0;18;;@Test public void defaultExecutor() throws Exception {     ThreadPoolTaskExecutor executor = this.context.getBean("default", ThreadPoolTaskExecutor.class).     assertEquals(1, getCorePoolSize(executor)).     assertEquals(Integer.MAX_VALUE, getMaxPoolSize(executor)).     assertEquals(Integer.MAX_VALUE, getQueueCapacity(executor)).     assertEquals(60, getKeepAliveSeconds(executor)).     assertEquals(false, getAllowCoreThreadTimeOut(executor)).     FutureTask<String> task = new FutureTask<>(new Callable<String>() {          @Override         public String call() throws Exception {             return "foo".         }     }).     executor.execute(task).     assertEquals("foo", task.get()). }
false;public;0;6;;@Test public void singleSize() {     Object executor = this.context.getBean("singleSize").     assertEquals(42, getCorePoolSize(executor)).     assertEquals(42, getMaxPoolSize(executor)). }
false;public;0;4;;@Test(expected = BeanCreationException.class) public void invalidPoolSize() {     this.context.getBean("invalidPoolSize"). }
false;public;0;7;;@Test public void rangeWithBoundedQueue() {     Object executor = this.context.getBean("rangeWithBoundedQueue").     assertEquals(7, getCorePoolSize(executor)).     assertEquals(42, getMaxPoolSize(executor)).     assertEquals(11, getQueueCapacity(executor)). }
false;public;0;9;;@Test public void rangeWithUnboundedQueue() {     Object executor = this.context.getBean("rangeWithUnboundedQueue").     assertEquals(9, getCorePoolSize(executor)).     assertEquals(9, getMaxPoolSize(executor)).     assertEquals(37, getKeepAliveSeconds(executor)).     assertEquals(true, getAllowCoreThreadTimeOut(executor)).     assertEquals(Integer.MAX_VALUE, getQueueCapacity(executor)). }
false;public;0;9;;@Test public void propertyPlaceholderWithSingleSize() {     Object executor = this.context.getBean("propertyPlaceholderWithSingleSize").     assertEquals(123, getCorePoolSize(executor)).     assertEquals(123, getMaxPoolSize(executor)).     assertEquals(60, getKeepAliveSeconds(executor)).     assertEquals(false, getAllowCoreThreadTimeOut(executor)).     assertEquals(Integer.MAX_VALUE, getQueueCapacity(executor)). }
false;public;0;8;;@Test public void propertyPlaceholderWithRange() {     Object executor = this.context.getBean("propertyPlaceholderWithRange").     assertEquals(5, getCorePoolSize(executor)).     assertEquals(25, getMaxPoolSize(executor)).     assertEquals(false, getAllowCoreThreadTimeOut(executor)).     assertEquals(10, getQueueCapacity(executor)). }
false;public;0;7;;@Test public void propertyPlaceholderWithRangeAndCoreThreadTimeout() {     Object executor = this.context.getBean("propertyPlaceholderWithRangeAndCoreThreadTimeout").     assertEquals(99, getCorePoolSize(executor)).     assertEquals(99, getMaxPoolSize(executor)).     assertEquals(true, getAllowCoreThreadTimeOut(executor)). }
false;public;0;4;;@Test(expected = BeanCreationException.class) public void propertyPlaceholderWithInvalidPoolSize() {     this.context.getBean("propertyPlaceholderWithInvalidPoolSize"). }
false;public;0;5;;@Test public void threadNamePrefix() {     CustomizableThreadCreator executor = this.context.getBean("default", CustomizableThreadCreator.class).     assertEquals("default-", executor.getThreadNamePrefix()). }
false;public;0;6;;@Test public void typeCheck() {     assertTrue(this.context.isTypeMatch("default", Executor.class)).     assertTrue(this.context.isTypeMatch("default", TaskExecutor.class)).     assertTrue(this.context.isTypeMatch("default", ThreadPoolTaskExecutor.class)). }
false;private;1;3;;private int getCorePoolSize(Object executor) {     return (Integer) new DirectFieldAccessor(executor).getPropertyValue("corePoolSize"). }
false;private;1;3;;private int getMaxPoolSize(Object executor) {     return (Integer) new DirectFieldAccessor(executor).getPropertyValue("maxPoolSize"). }
false;private;1;3;;private int getQueueCapacity(Object executor) {     return (Integer) new DirectFieldAccessor(executor).getPropertyValue("queueCapacity"). }
false;private;1;3;;private int getKeepAliveSeconds(Object executor) {     return (Integer) new DirectFieldAccessor(executor).getPropertyValue("keepAliveSeconds"). }
false;private;1;3;;private boolean getAllowCoreThreadTimeOut(Object executor) {     return (Boolean) new DirectFieldAccessor(executor).getPropertyValue("allowCoreThreadTimeOut"). }
