commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void importXml() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ImportXmlConfig.class).     assertTrue("did not contain java-declared bean", ctx.containsBean("javaDeclaredBean")).     assertTrue("did not contain xml-declared bean", ctx.containsBean("xmlDeclaredBean")).     TestBean tb = ctx.getBean("javaDeclaredBean", TestBean.class).     assertEquals("myName", tb.getName()).     ctx.close(). }
false;public;0;6;;@Test public void importXmlIsInheritedFromSuperclassDeclarations() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(FirstLevelSubConfig.class).     assertTrue(ctx.containsBean("xmlDeclaredBean")).     ctx.close(). }
false;public;0;7;;@Test public void importXmlIsMergedFromSuperclassDeclarations() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(SecondLevelSubConfig.class).     assertTrue("failed to pick up second-level-declared XML bean", ctx.containsBean("secondLevelXmlDeclaredBean")).     assertTrue("failed to pick up parent-declared XML bean", ctx.containsBean("xmlDeclaredBean")).     ctx.close(). }
false;public;0;7;;@Test public void importXmlWithNamespaceConfig() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ImportXmlWithAopNamespaceConfig.class).     Object bean = ctx.getBean("proxiedXmlBean").     assertTrue(AopUtils.isAopProxy(bean)).     ctx.close(). }
false;public;0;9;;@Test public void importXmlWithOtherConfigurationClass() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ImportXmlWithConfigurationClass.class).     assertTrue("did not contain java-declared bean", ctx.containsBean("javaDeclaredBean")).     assertTrue("did not contain xml-declared bean", ctx.containsBean("xmlDeclaredBean")).     TestBean tb = ctx.getBean("javaDeclaredBean", TestBean.class).     assertEquals("myName", tb.getName()).     ctx.close(). }
false;public;0;11;;@Test public void importWithPlaceholder() throws Exception {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     PropertySource<?> propertySource = new MapPropertySource("test", Collections.<String, Object>singletonMap("test", "springframework")).     ctx.getEnvironment().getPropertySources().addFirst(propertySource).     ctx.register(ImportXmlConfig.class).     ctx.refresh().     assertTrue("did not contain xml-declared bean", ctx.containsBean("xmlDeclaredBean")).     ctx.close(). }
false;public;0;7;;@Test public void importXmlWithAutowiredConfig() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ImportXmlAutowiredConfig.class).     String name = ctx.getBean("xmlBeanName", String.class).     assertThat(name, equalTo("xml.declared")).     ctx.close(). }
false;public;0;6;;@Test public void importNonXmlResource() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ImportNonXmlResourceConfig.class).     assertTrue(ctx.containsBean("propertiesDeclaredBean")).     ctx.close(). }
false;public;0;3;;@Bean public TestBean javaDeclaredBean() {     return new TestBean(this.name). }
false;public;0;2;;@Before("execution(* org.springframework.tests.sample.beans.TestBean.*(..))") public void advice() { }
false;public;0;3;;@Bean public String xmlBeanName() {     return xmlDeclaredBean.getName(). }
