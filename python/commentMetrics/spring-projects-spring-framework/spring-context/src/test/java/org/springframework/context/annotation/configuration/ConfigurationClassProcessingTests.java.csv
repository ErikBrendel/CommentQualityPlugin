commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void customBeanNameIsRespectedWhenConfiguredViaNameAttribute() {     customBeanNameIsRespected(ConfigWithBeanWithCustomName.class, () -> ConfigWithBeanWithCustomName.testBean, "customName"). }
false;public;0;5;;@Test public void customBeanNameIsRespectedWhenConfiguredViaValueAttribute() {     customBeanNameIsRespected(ConfigWithBeanWithCustomNameConfiguredViaValueAttribute.class, () -> ConfigWithBeanWithCustomNameConfiguredViaValueAttribute.testBean, "enigma"). }
false;private;3;12;;private void customBeanNameIsRespected(Class<?> testClass, Supplier<TestBean> testBeanSupplier, String beanName) {     GenericApplicationContext ac = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ac).     ac.registerBeanDefinition("config", new RootBeanDefinition(testClass)).     ac.refresh().     assertSame(testBeanSupplier.get(), ac.getBean(beanName)).     // method name should not be registered     exception.expect(NoSuchBeanDefinitionException.class).     ac.getBean("methodName"). }
false;public;0;5;;@Test public void aliasesAreRespectedWhenConfiguredViaNameAttribute() {     aliasesAreRespected(ConfigWithBeanWithAliases.class, () -> ConfigWithBeanWithAliases.testBean, "name1"). }
false;public;0;5;;@Test public void aliasesAreRespectedWhenConfiguredViaValueAttribute() {     aliasesAreRespected(ConfigWithBeanWithAliasesConfiguredViaValueAttribute.class, () -> ConfigWithBeanWithAliasesConfiguredViaValueAttribute.testBean, "enigma"). }
false;private;3;11;;private void aliasesAreRespected(Class<?> testClass, Supplier<TestBean> testBeanSupplier, String beanName) {     TestBean testBean = testBeanSupplier.get().     BeanFactory factory = initBeanFactory(testClass).     assertSame(testBean, factory.getBean(beanName)).     Arrays.stream(factory.getAliases(beanName)).map(factory::getBean).forEach(alias -> assertSame(testBean, alias)).     // method name should not be registered     exception.expect(NoSuchBeanDefinitionException.class).     factory.getBean("methodName"). }
false;public;0;8;;// SPR-11830 @Test public void configWithBeanWithProviderImplementation() {     GenericApplicationContext ac = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ac).     ac.registerBeanDefinition("config", new RootBeanDefinition(ConfigWithBeanWithProviderImplementation.class)).     ac.refresh().     assertSame(ac.getBean("customName"), ConfigWithBeanWithProviderImplementation.testBean). }
false;public;0;8;;// SPR-11830 @Test public void configWithSetWithProviderImplementation() {     GenericApplicationContext ac = new GenericApplicationContext().     AnnotationConfigUtils.registerAnnotationConfigProcessors(ac).     ac.registerBeanDefinition("config", new RootBeanDefinition(ConfigWithSetWithProviderImplementation.class)).     ac.refresh().     assertSame(ac.getBean("customName"), ConfigWithSetWithProviderImplementation.set). }
false;public;0;5;;@Test public void testFinalBeanMethod() {     exception.expect(BeanDefinitionParsingException.class).     initBeanFactory(ConfigWithFinalBean.class). }
false;public;0;6;;@Test public void simplestPossibleConfig() {     BeanFactory factory = initBeanFactory(SimplestPossibleConfig.class).     String stringBean = factory.getBean("stringBean", String.class).     assertEquals("foo", stringBean). }
false;public;0;8;;@Test public void configWithObjectReturnType() {     BeanFactory factory = initBeanFactory(ConfigWithNonSpecificReturnTypes.class).     assertEquals(Object.class, factory.getType("stringBean")).     assertFalse(factory.isTypeMatch("stringBean", String.class)).     String stringBean = factory.getBean("stringBean", String.class).     assertEquals("foo", stringBean). }
false;public;0;26;;@Test public void configWithFactoryBeanReturnType() {     ListableBeanFactory factory = initBeanFactory(ConfigWithNonSpecificReturnTypes.class).     assertEquals(List.class, factory.getType("factoryBean")).     assertTrue(factory.isTypeMatch("factoryBean", List.class)).     assertEquals(FactoryBean.class, factory.getType("&factoryBean")).     assertTrue(factory.isTypeMatch("&factoryBean", FactoryBean.class)).     assertFalse(factory.isTypeMatch("&factoryBean", BeanClassLoaderAware.class)).     assertFalse(factory.isTypeMatch("&factoryBean", ListFactoryBean.class)).     assertTrue(factory.getBean("factoryBean") instanceof List).     String[] beanNames = factory.getBeanNamesForType(FactoryBean.class).     assertEquals(1, beanNames.length).     assertEquals("&factoryBean", beanNames[0]).     beanNames = factory.getBeanNamesForType(BeanClassLoaderAware.class).     assertEquals(1, beanNames.length).     assertEquals("&factoryBean", beanNames[0]).     beanNames = factory.getBeanNamesForType(ListFactoryBean.class).     assertEquals(1, beanNames.length).     assertEquals("&factoryBean", beanNames[0]).     beanNames = factory.getBeanNamesForType(List.class).     assertEquals("factoryBean", beanNames[0]). }
false;public;0;11;;@Test public void configurationWithPrototypeScopedBeans() {     BeanFactory factory = initBeanFactory(ConfigWithPrototypeBean.class).     TestBean foo = factory.getBean("foo", TestBean.class).     ITestBean bar = factory.getBean("bar", ITestBean.class).     ITestBean baz = factory.getBean("baz", ITestBean.class).     assertSame(foo.getSpouse(), bar).     assertNotSame(bar.getSpouse(), baz). }
false;public;0;8;;@Test public void configurationWithNullReference() {     BeanFactory factory = initBeanFactory(ConfigWithNullReference.class).     TestBean foo = factory.getBean("foo", TestBean.class).     assertTrue(factory.getBean("bar").equals(null)).     assertNull(foo.getSpouse()). }
false;public;0;15;;@Test public void configurationWithAdaptivePrototypes() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithPrototypeBean.class, AdaptiveInjectionPoints.class).     ctx.refresh().     AdaptiveInjectionPoints adaptive = ctx.getBean(AdaptiveInjectionPoints.class).     assertEquals("adaptiveInjectionPoint1", adaptive.adaptiveInjectionPoint1.getName()).     assertEquals("setAdaptiveInjectionPoint2", adaptive.adaptiveInjectionPoint2.getName()).     adaptive = ctx.getBean(AdaptiveInjectionPoints.class).     assertEquals("adaptiveInjectionPoint1", adaptive.adaptiveInjectionPoint1.getName()).     assertEquals("setAdaptiveInjectionPoint2", adaptive.adaptiveInjectionPoint2.getName()).     ctx.close(). }
false;public;0;15;;@Test public void configurationWithAdaptiveResourcePrototypes() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithPrototypeBean.class, AdaptiveResourceInjectionPoints.class).     ctx.refresh().     AdaptiveResourceInjectionPoints adaptive = ctx.getBean(AdaptiveResourceInjectionPoints.class).     assertEquals("adaptiveInjectionPoint1", adaptive.adaptiveInjectionPoint1.getName()).     assertEquals("setAdaptiveInjectionPoint2", adaptive.adaptiveInjectionPoint2.getName()).     adaptive = ctx.getBean(AdaptiveResourceInjectionPoints.class).     assertEquals("adaptiveInjectionPoint1", adaptive.adaptiveInjectionPoint1.getName()).     assertEquals("setAdaptiveInjectionPoint2", adaptive.adaptiveInjectionPoint2.getName()).     ctx.close(). }
false;public;0;21;;@Test public void configurationWithPostProcessor() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithPostProcessor.class).     RootBeanDefinition placeholderConfigurer = new RootBeanDefinition(PropertyPlaceholderConfigurer.class).     placeholderConfigurer.getPropertyValues().add("properties", "myProp=myValue").     ctx.registerBeanDefinition("placeholderConfigurer", placeholderConfigurer).     ctx.refresh().     TestBean foo = ctx.getBean("foo", TestBean.class).     ITestBean bar = ctx.getBean("bar", ITestBean.class).     ITestBean baz = ctx.getBean("baz", ITestBean.class).     assertEquals("foo-processed-myValue", foo.getName()).     assertEquals("bar-processed-myValue", bar.getName()).     assertEquals("baz-processed-myValue", baz.getName()).     SpousyTestBean listener = ctx.getBean("listenerTestBean", SpousyTestBean.class).     assertTrue(listener.refreshed).     ctx.close(). }
false;public;0;9;;@Test public void configurationWithFunctionalRegistration() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(ConfigWithFunctionalRegistration.class).     ctx.refresh().     assertSame(ctx.getBean("spouse"), ctx.getBean(TestBean.class).getSpouse()).     assertEquals("functional", ctx.getBean(NestedTestBean.class).getCompany()). }
true;private;1;12;/**  * Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}  * for each of the given {@link Configuration} {@code configClasses}, and then  * post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}.  * When complete, the factory is ready to service requests for any {@link Bean} methods  * declared by {@code configClasses}.  */ ;/**  * Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}  * for each of the given {@link Configuration} {@code configClasses}, and then  * post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}.  * When complete, the factory is ready to service requests for any {@link Bean} methods  * declared by {@code configClasses}.  */ private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {     DefaultListableBeanFactory factory = new DefaultListableBeanFactory().     for (Class<?> configClass : configClasses) {         String configBeanName = configClass.getName().         factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass)).     }     ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor().     ccpp.postProcessBeanDefinitionRegistry(factory).     ccpp.postProcessBeanFactory(factory).     factory.freezeConfiguration().     return factory. }
false;public;0;4;;@Bean(name = "customName") public TestBean methodName() {     return testBean. }
false;public;0;4;;@Bean("enigma") public TestBean methodName() {     return testBean. }
false;public;0;4;;@Bean(name = { "name1", "alias1", "alias2", "alias3" }) public TestBean methodName() {     return testBean. }
false;public;0;4;;@Bean({ "enigma", "alias1", "alias2", "alias3" }) public TestBean methodName() {     return testBean. }
false;public;0;4;;@Bean(name = "customName") public TestBean get() {     return testBean. }
false;public;0;4;;@Bean(name = "customName") public Set<String> get() {     return set. }
false;public,final;0;3;;@Bean public final TestBean testBean() {     return new TestBean(). }
false;public;0;3;;@Bean public String stringBean() {     return "foo". }
false;public;0;3;;@Bean public Object stringBean() {     return "foo". }
false;public;0;5;;@Bean public FactoryBean<?> factoryBean() {     ListFactoryBean fb = new ListFactoryBean().     fb.setSourceList(Arrays.asList("element1", "element2")).     return fb. }
false;public;0;5;;@Bean public TestBean foo() {     TestBean foo = new SpousyTestBean("foo").     foo.setSpouse(bar()).     return foo. }
false;public;0;5;;@Bean public TestBean bar() {     TestBean bar = new SpousyTestBean("bar").     bar.setSpouse(baz()).     return bar. }
false;public;0;4;;@Bean @Scope("prototype") public TestBean baz() {     return new TestBean("baz"). }
false;public;1;4;;@Bean @Scope("prototype") public TestBean adaptive1(InjectionPoint ip) {     return new TestBean(ip.getMember().getName()). }
false;public;1;4;;@Bean @Scope("prototype") public TestBean adaptive2(DependencyDescriptor dd) {     return new TestBean(dd.getMember().getName()). }
false;public;0;4;;@Override public TestBean bar() {     return null. }
false;public;1;4;;@Autowired @Qualifier("adaptive2") public void setAdaptiveInjectionPoint2(TestBean adaptiveInjectionPoint2) {     this.adaptiveInjectionPoint2 = adaptiveInjectionPoint2. }
false;public;1;4;;@Resource(name = "adaptive2") public void setAdaptiveInjectionPoint2(TestBean adaptiveInjectionPoint2) {     this.adaptiveInjectionPoint2 = adaptiveInjectionPoint2. }
false;public;1;3;;public void setNameSuffix(String nameSuffix) {     this.nameSuffix = nameSuffix. }
false;public;2;7;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) {     if (bean instanceof ITestBean) {         ((ITestBean) bean).setName(((ITestBean) bean).getName() + nameSuffix).     }     return bean. }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     return bean. }
false;public;0;3;;public int getOrder() {     return 0. }
false;public;0;28;;@Bean public POBPP beanPostProcessor() {     return new POBPP() {          String nameSuffix = "-processed-" + myProp.          public void setNameSuffix(String nameSuffix) {             this.nameSuffix = nameSuffix.         }          @Override         public Object postProcessBeforeInitialization(Object bean, String beanName) {             if (bean instanceof ITestBean) {                 ((ITestBean) bean).setName(((ITestBean) bean).getName() + nameSuffix).             }             return bean.         }          @Override         public Object postProcessAfterInitialization(Object bean, String beanName) {             return bean.         }          public int getOrder() {             return 0.         }     }. }
false;public;1;5;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {     BeanDefinition bd = beanFactory.getBeanDefinition("beanPostProcessor").     bd.getPropertyValues().addPropertyValue("nameSuffix", "-processed-" + myProp). }
true;public;0;9;// @Bean ;// @Bean public BeanFactoryPostProcessor beanFactoryPostProcessor() {     return new BeanFactoryPostProcessor() {          @Override         public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {             BeanDefinition bd = beanFactory.getBeanDefinition("beanPostProcessor").             bd.getPropertyValues().addPropertyValue("nameSuffix", "-processed-" + myProp).         }     }. }
false;public;0;4;;@Bean public ITestBean listenerTestBean() {     return new SpousyTestBean("listener"). }
false;public;1;4;;@Override public void setSpouse(ITestBean spouse) {     super.setSpouse(spouse). }
false;public;1;4;;@Override public void onApplicationEvent(ContextRefreshedEvent event) {     this.refreshed = true. }
false;;1;9;;@Autowired void register(GenericApplicationContext ctx) {     ctx.registerBean("spouse", TestBean.class, () -> new TestBean("functional")).     Supplier<TestBean> testBeanSupplier = () -> new TestBean(ctx.getBean("spouse", TestBean.class)).     ctx.registerBean(TestBean.class, testBeanSupplier, bd -> bd.setPrimary(true)). }
false;public;1;4;;@Bean public NestedTestBean nestedTestBean(TestBean testBean) {     return new NestedTestBean(testBean.getSpouse().getName()). }
