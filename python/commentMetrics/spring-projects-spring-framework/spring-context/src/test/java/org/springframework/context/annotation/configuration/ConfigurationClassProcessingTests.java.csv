# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1458311433;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1458843770;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1466893134;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1469546119;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1474121766;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1474227238;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1487773939;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1493889981;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1495657464;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1504267514;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1518279448;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1530188116;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses);1549551674;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition}_for each of the given {@link Configuration} {@code configClasses}, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by {@code configClasses}.;private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,code,config,classes,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,code,config,classes;private,default,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private ListableBeanFactory initBeanFactory(Class<?>... configClasses);1350077658;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,return,factory
ConfigurationClassProcessingTests -> private ListableBeanFactory initBeanFactory(Class<?>... configClasses);1350077662;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,return,factory
ConfigurationClassProcessingTests -> private ListableBeanFactory initBeanFactory(Class<?>... configClasses);1356735495;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,return,factory
ConfigurationClassProcessingTests -> private ListableBeanFactory initBeanFactory(Class<?>... configClasses);1362408075;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,return,factory
ConfigurationClassProcessingTests -> private ListableBeanFactory initBeanFactory(Class<?>... configClasses);1386799042;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
ConfigurationClassProcessingTests -> private ListableBeanFactory initBeanFactory(Class<?>... configClasses);1401478621;Creates a new {@link BeanFactory}, populates it with a {@link BeanDefinition} for_each of the given {@link Configuration} <var>configClasses</var>, and then_post-processes the factory using JavaConfig's {@link ConfigurationClassPostProcessor}._When complete, the factory is ready to service requests for any {@link Bean} methods_declared by <var>configClasses</var>.;private ListableBeanFactory initBeanFactory(Class<?>... configClasses) {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		for (Class<?> configClass : configClasses) {_			String configBeanName = configClass.getName()__			factory.registerBeanDefinition(configBeanName, new RootBeanDefinition(configClass))__		}_		ConfigurationClassPostProcessor ccpp = new ConfigurationClassPostProcessor()__		ccpp.postProcessBeanDefinitionRegistry(factory)__		ccpp.postProcessBeanFactory(factory)__		RequiredAnnotationBeanPostProcessor rapp = new RequiredAnnotationBeanPostProcessor()__		rapp.setBeanFactory(factory)__		factory.addBeanPostProcessor(rapp)__		factory.freezeConfiguration()__		return factory__	};creates,a,new,link,bean,factory,populates,it,with,a,link,bean,definition,for,each,of,the,given,link,configuration,var,config,classes,var,and,then,post,processes,the,factory,using,java,config,s,link,configuration,class,post,processor,when,complete,the,factory,is,ready,to,service,requests,for,any,link,bean,methods,declared,by,var,config,classes,var;private,listable,bean,factory,init,bean,factory,class,config,classes,default,listable,bean,factory,factory,new,default,listable,bean,factory,for,class,config,class,config,classes,string,config,bean,name,config,class,get,name,factory,register,bean,definition,config,bean,name,new,root,bean,definition,config,class,configuration,class,post,processor,ccpp,new,configuration,class,post,processor,ccpp,post,process,bean,definition,registry,factory,ccpp,post,process,bean,factory,factory,required,annotation,bean,post,processor,rapp,new,required,annotation,bean,post,processor,rapp,set,bean,factory,factory,factory,add,bean,post,processor,rapp,factory,freeze,configuration,return,factory
