commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testFindsExistingResourceWithGetResourceAndNoOverrides() {     assertNotNull(thisClassLoader.getResource(EXISTING_RESOURCE)).     assertNotNull(overridingLoader.getResource(EXISTING_RESOURCE)). }
false;public;0;6;;@Test public void testDoesNotFindExistingResourceWithGetResourceAndNullOverride() {     assertNotNull(thisClassLoader.getResource(EXISTING_RESOURCE)).     overridingLoader.override(EXISTING_RESOURCE, null).     assertNull(overridingLoader.getResource(EXISTING_RESOURCE)). }
false;public;0;5;;@Test public void testFindsExistingResourceWithGetResourceAsStreamAndNoOverrides() {     assertNotNull(thisClassLoader.getResourceAsStream(EXISTING_RESOURCE)).     assertNotNull(overridingLoader.getResourceAsStream(EXISTING_RESOURCE)). }
false;public;0;6;;@Test public void testDoesNotFindExistingResourceWithGetResourceAsStreamAndNullOverride() {     assertNotNull(thisClassLoader.getResourceAsStream(EXISTING_RESOURCE)).     overridingLoader.override(EXISTING_RESOURCE, null).     assertNull(overridingLoader.getResourceAsStream(EXISTING_RESOURCE)). }
false;public;0;6;;@Test public void testFindsExistingResourceWithGetResourcesAndNoOverrides() throws IOException {     assertNotNull(thisClassLoader.getResources(EXISTING_RESOURCE)).     assertNotNull(overridingLoader.getResources(EXISTING_RESOURCE)).     assertEquals(1, countElements(overridingLoader.getResources(EXISTING_RESOURCE))). }
false;public;0;6;;@Test public void testDoesNotFindExistingResourceWithGetResourcesAndNullOverride() throws IOException {     assertNotNull(thisClassLoader.getResources(EXISTING_RESOURCE)).     overridingLoader.override(EXISTING_RESOURCE, null).     assertEquals(0, countElements(overridingLoader.getResources(EXISTING_RESOURCE))). }
false;private;1;8;;private int countElements(Enumeration<?> e) {     int elts = 0.     while (e.hasMoreElements()) {         e.nextElement().         ++elts.     }     return elts. }
