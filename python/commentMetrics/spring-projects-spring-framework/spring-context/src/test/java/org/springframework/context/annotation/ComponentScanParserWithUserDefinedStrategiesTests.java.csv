commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testCustomBeanNameGenerator() {     ApplicationContext context = new ClassPathXmlApplicationContext("org/springframework/context/annotation/customNameGeneratorTests.xml").     assertTrue(context.containsBean("testing.fooServiceImpl")). }
false;public;0;8;;@Test public void testCustomScopeMetadataResolver() {     ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("org/springframework/context/annotation/customScopeResolverTests.xml").     BeanDefinition bd = context.getBeanFactory().getBeanDefinition("fooServiceImpl").     assertEquals("myCustomScope", bd.getScope()).     assertFalse(bd.isSingleton()). }
false;public;0;11;;@Test public void testInvalidConstructorBeanNameGenerator() {     try {         new ClassPathXmlApplicationContext("org/springframework/context/annotation/invalidConstructorNameGeneratorTests.xml").         fail("should have failed: no-arg constructor is required").     } catch (BeansException ex) {     // expected     } }
false;public;0;11;;@Test public void testInvalidClassNameScopeMetadataResolver() {     try {         new ClassPathXmlApplicationContext("org/springframework/context/annotation/invalidClassNameScopeResolverTests.xml").         fail("should have failed: no such class").     } catch (BeansException ex) {     // expected     } }
