commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * @return a refreshed application context  */ ;/**  * @return a refreshed application context  */ protected abstract ConfigurableApplicationContext getApplicationContext().
false;public;0;12;;@Before public void setup() {     this.ctx = getApplicationContext().     this.cs = ctx.getBean("service", CacheableService.class).     this.ccs = ctx.getBean("classService", CacheableService.class).     this.cm = ctx.getBean("cacheManager", CacheManager.class).     Collection<String> cn = this.cm.getCacheNames().     assertTrue(cn.contains("testCache")).     assertTrue(cn.contains("secondary")).     assertTrue(cn.contains("primary")). }
false;public;0;6;;@After public void close() {     if (this.ctx != null) {         this.ctx.close().     } }
false;public;1;10;;public void testCacheable(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     Object r3 = service.cache(o1).     assertSame(r1, r2).     assertSame(r1, r3). }
false;public;1;14;;public void testCacheableNull(CacheableService<?> service) throws Exception {     Object o1 = new Object().     assertNull(this.cm.getCache("testCache").get(o1)).     Object r1 = service.cacheNull(o1).     Object r2 = service.cacheNull(o1).     Object r3 = service.cacheNull(o1).     assertSame(r1, r2).     assertSame(r1, r3).     assertEquals(r3, this.cm.getCache("testCache").get(o1).get()).     assertNull("Cached value should be null", r3). }
false;public;1;10;;public void testCacheableSync(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cacheSync(o1).     Object r2 = service.cacheSync(o1).     Object r3 = service.cacheSync(o1).     assertSame(r1, r2).     assertSame(r1, r3). }
false;public;1;14;;public void testCacheableSyncNull(CacheableService<?> service) throws Exception {     Object o1 = new Object().     assertNull(this.cm.getCache("testCache").get(o1)).     Object r1 = service.cacheSyncNull(o1).     Object r2 = service.cacheSyncNull(o1).     Object r3 = service.cacheSyncNull(o1).     assertSame(r1, r2).     assertSame(r1, r3).     assertEquals(r3, this.cm.getCache("testCache").get(o1).get()).     assertNull("Cached value should be null", r3). }
false;public;1;13;;public void testEvict(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     assertSame(r1, r2).     service.invalidate(o1).     Object r3 = service.cache(o1).     Object r4 = service.cache(o1).     assertNotSame(r1, r3).     assertSame(r3, r4). }
false;public;1;19;;public void testEvictEarly(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     assertSame(r1, r2).     try {         service.evictEarly(o1).     } catch (RuntimeException ex) {     // expected     }     Object r3 = service.cache(o1).     Object r4 = service.cache(o1).     assertNotSame(r1, r3).     assertSame(r3, r4). }
false;public;1;17;;public void testEvictException(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     assertSame(r1, r2).     try {         service.evictWithException(o1).     } catch (RuntimeException ex) {     // expected     }     // exception occurred, eviction skipped, data should still be in the cache     Object r3 = service.cache(o1).     assertSame(r1, r3). }
false;public;1;13;;public void testEvictWKey(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     assertSame(r1, r2).     service.evict(o1, null).     Object r3 = service.cache(o1).     Object r4 = service.cache(o1).     assertNotSame(r1, r3).     assertSame(r3, r4). }
false;public;1;19;;public void testEvictWKeyEarly(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     assertSame(r1, r2).     try {         service.invalidateEarly(o1, null).     } catch (Exception ex) {     // expected     }     Object r3 = service.cache(o1).     Object r4 = service.cache(o1).     assertNotSame(r1, r3).     assertSame(r3, r4). }
false;public;1;21;;public void testEvictAll(CacheableService<?> service) throws Exception {     Object o1 = new Object().     Object r1 = service.cache(o1).     Object r2 = service.cache(o1).     Object o2 = new Object().     Object r10 = service.cache(o2).     assertSame(r1, r2).     assertNotSame(r1, r10).     service.evictAll(new Object()).     Cache cache = this.cm.getCache("testCache").     assertNull(cache.get(o1)).     assertNull(cache.get(o2)).     Object r3 = service.cache(o1).     Object r4 = service.cache(o1).     assertNotSame(r1, r3).     assertSame(r3, r4). }
false;public;1;11;;public void testConditionalExpression(CacheableService<?> service) throws Exception {     Object r1 = service.conditional(4).     Object r2 = service.conditional(4).     assertNotSame(r1, r2).     Object r3 = service.conditional(3).     Object r4 = service.conditional(3).     assertSame(r3, r4). }
false;public;1;11;;public void testConditionalExpressionSync(CacheableService<?> service) throws Exception {     Object r1 = service.conditionalSync(4).     Object r2 = service.conditionalSync(4).     assertNotSame(r1, r2).     Object r3 = service.conditionalSync(3).     Object r4 = service.conditionalSync(3).     assertSame(r3, r4). }
false;public;1;8;;public void testUnlessExpression(CacheableService<?> service) throws Exception {     Cache cache = this.cm.getCache("testCache").     cache.clear().     service.unless(10).     service.unless(11).     assertThat(cache.get(10).get(), equalTo(10L)).     assertThat(cache.get(11), nullValue()). }
false;public;1;11;;public void testKeyExpression(CacheableService<?> service) throws Exception {     Object r1 = service.key(5, 1).     Object r2 = service.key(5, 2).     assertSame(r1, r2).     Object r3 = service.key(1, 5).     Object r4 = service.key(2, 5).     assertNotSame(r3, r4). }
false;public;1;11;;public void testVarArgsKey(CacheableService<?> service) throws Exception {     Object r1 = service.varArgsKey(1, 2, 3).     Object r2 = service.varArgsKey(1, 2, 3).     assertSame(r1, r2).     Object r3 = service.varArgsKey(1, 2, 3).     Object r4 = service.varArgsKey(1, 2).     assertNotSame(r3, r4). }
false;public;1;9;;public void testNullValue(CacheableService<?> service) throws Exception {     Object key = new Object().     assertNull(service.nullValue(key)).     int nr = service.nullInvocations().intValue().     assertNull(service.nullValue(key)).     assertEquals(nr, service.nullInvocations().intValue()).     assertNull(service.nullValue(new Object())).     assertEquals(nr + 1, service.nullInvocations().intValue()). }
false;public;2;8;;public void testMethodName(CacheableService<?> service, String keyName) throws Exception {     Object key = new Object().     Object r1 = service.name(key).     assertSame(r1, service.name(key)).     Cache cache = this.cm.getCache("testCache").     // assert the method name is used     assertNotNull(cache.get(keyName)). }
false;public;1;9;;public void testRootVars(CacheableService<?> service) {     Object key = new Object().     Object r1 = service.rootVars(key).     assertSame(r1, service.rootVars(key)).     Cache cache = this.cm.getCache("testCache").     // assert the method name is used     String expectedKey = "rootVarsrootVars" + AopProxyUtils.ultimateTargetClass(service) + service.     assertNotNull(cache.get(expectedKey)). }
false;public;1;11;;public void testCheckedThrowable(CacheableService<?> service) throws Exception {     String arg = UUID.randomUUID().toString().     try {         service.throwChecked(arg).         fail("Excepted exception").     } catch (Exception ex) {         assertEquals("Wrong exception type", IOException.class, ex.getClass()).         assertEquals(arg, ex.getMessage()).     } }
false;public;1;10;;public void testUncheckedThrowable(CacheableService<?> service) throws Exception {     try {         service.throwUnchecked(1L).         fail("Excepted exception").     } catch (RuntimeException ex) {         assertEquals("Wrong exception type", UnsupportedOperationException.class, ex.getClass()).         assertEquals("1", ex.getMessage()).     } }
false;public;1;12;;public void testCheckedThrowableSync(CacheableService<?> service) throws Exception {     String arg = UUID.randomUUID().toString().     try {         service.throwCheckedSync(arg).         fail("Excepted exception").     } catch (Exception ex) {         ex.printStackTrace().         assertEquals("Wrong exception type", IOException.class, ex.getClass()).         assertEquals(arg, ex.getMessage()).     } }
false;public;1;10;;public void testUncheckedThrowableSync(CacheableService<?> service) throws Exception {     try {         service.throwUncheckedSync(1L).         fail("Excepted exception").     } catch (RuntimeException ex) {         assertEquals("Wrong exception type", UnsupportedOperationException.class, ex.getClass()).         assertEquals("1", ex.getMessage()).     } }
false;public;1;4;;public void testNullArg(CacheableService<?> service) {     Object r1 = service.cache(null).     assertSame(r1, service.cache(null)). }
false;public;1;12;;public void testCacheUpdate(CacheableService<?> service) {     Object o = new Object().     Cache cache = this.cm.getCache("testCache").     assertNull(cache.get(o)).     Object r1 = service.update(o).     assertSame(r1, cache.get(o).get()).     o = new Object().     assertNull(cache.get(o)).     Object r2 = service.update(o).     assertSame(r2, cache.get(o).get()). }
false;public;1;11;;public void testConditionalCacheUpdate(CacheableService<?> service) {     Integer one = 1.     Integer three = 3.     Cache cache = this.cm.getCache("testCache").     assertEquals(one, Integer.valueOf(service.conditionalUpdate(one).toString())).     assertNull(cache.get(one)).     assertEquals(three, Integer.valueOf(service.conditionalUpdate(three).toString())).     assertEquals(three, Integer.valueOf(cache.get(three).get().toString())). }
false;public;1;25;;public void testMultiCache(CacheableService<?> service) {     Object o1 = new Object().     Object o2 = new Object().     Cache primary = this.cm.getCache("primary").     Cache secondary = this.cm.getCache("secondary").     assertNull(primary.get(o1)).     assertNull(secondary.get(o1)).     Object r1 = service.multiCache(o1).     assertSame(r1, primary.get(o1).get()).     assertSame(r1, secondary.get(o1).get()).     Object r2 = service.multiCache(o1).     Object r3 = service.multiCache(o1).     assertSame(r1, r2).     assertSame(r1, r3).     assertNull(primary.get(o2)).     assertNull(secondary.get(o2)).     Object r4 = service.multiCache(o2).     assertSame(r4, primary.get(o2).get()).     assertSame(r4, secondary.get(o2).get()). }
false;public;1;29;;public void testMultiEvict(CacheableService<?> service) {     Object o1 = new Object().     Object o2 = o1.toString() + "A".     Object r1 = service.multiCache(o1).     Object r2 = service.multiCache(o1).     Cache primary = this.cm.getCache("primary").     Cache secondary = this.cm.getCache("secondary").     primary.put(o2, o2).     assertSame(r1, r2).     assertSame(r1, primary.get(o1).get()).     assertSame(r1, secondary.get(o1).get()).     service.multiEvict(o1).     assertNull(primary.get(o1)).     assertNull(secondary.get(o1)).     assertNull(primary.get(o2)).     Object r3 = service.multiCache(o1).     Object r4 = service.multiCache(o1).     assertNotSame(r1, r3).     assertSame(r3, r4).     assertSame(r3, primary.get(o1).get()).     assertSame(r4, secondary.get(o1).get()). }
false;public;1;19;;public void testMultiPut(CacheableService<?> service) {     Object o = 1.     Cache primary = this.cm.getCache("primary").     Cache secondary = this.cm.getCache("secondary").     assertNull(primary.get(o)).     assertNull(secondary.get(o)).     Object r1 = service.multiUpdate(o).     assertSame(r1, primary.get(o).get()).     assertSame(r1, secondary.get(o).get()).     o = 2.     assertNull(primary.get(o)).     assertNull(secondary.get(o)).     Object r2 = service.multiUpdate(o).     assertSame(r2, primary.get(o).get()).     assertSame(r2, secondary.get(o).get()). }
false;public;1;9;;public void testPutRefersToResult(CacheableService<?> service) throws Exception {     Long id = Long.MIN_VALUE.     TestEntity entity = new TestEntity().     Cache primary = this.cm.getCache("primary").     assertNull(primary.get(id)).     assertNull(entity.getId()).     service.putRefersToResult(entity).     assertSame(entity, primary.get(id).get()). }
false;public;1;20;;public void testMultiCacheAndEvict(CacheableService<?> service) {     String methodName = "multiCacheAndEvict".     Cache primary = this.cm.getCache("primary").     Cache secondary = this.cm.getCache("secondary").     Object key = 1.     secondary.put(key, key).     assertNull(secondary.get(methodName)).     assertSame(key, secondary.get(key).get()).     Object r1 = service.multiCacheAndEvict(key).     assertSame(r1, service.multiCacheAndEvict(key)).     // assert the method name is used     assertSame(r1, primary.get(methodName).get()).     assertNull(secondary.get(methodName)).     assertNull(secondary.get(key)). }
false;public;1;24;;public void testMultiConditionalCacheAndEvict(CacheableService<?> service) {     Cache primary = this.cm.getCache("primary").     Cache secondary = this.cm.getCache("secondary").     Object key = 1.     secondary.put(key, key).     assertNull(primary.get(key)).     assertSame(key, secondary.get(key).get()).     Object r1 = service.multiConditionalCacheAndEvict(key).     Object r3 = service.multiConditionalCacheAndEvict(key).     assertTrue(!r1.equals(r3)).     assertNull(primary.get(key)).     Object key2 = 3.     Object r2 = service.multiConditionalCacheAndEvict(key2).     assertSame(r2, service.multiConditionalCacheAndEvict(key2)).     // assert the method name is used     assertSame(r2, primary.get(key2).get()).     assertNull(secondary.get(key2)). }
false;public;0;4;;@Test public void testCacheable() throws Exception {     testCacheable(this.cs). }
false;public;0;4;;@Test public void testCacheableNull() throws Exception {     testCacheableNull(this.cs). }
false;public;0;4;;@Test public void testCacheableSync() throws Exception {     testCacheableSync(this.cs). }
false;public;0;4;;@Test public void testCacheableSyncNull() throws Exception {     testCacheableSyncNull(this.cs). }
false;public;0;4;;@Test public void testInvalidate() throws Exception {     testEvict(this.cs). }
false;public;0;4;;@Test public void testEarlyInvalidate() throws Exception {     testEvictEarly(this.cs). }
false;public;0;4;;@Test public void testEvictWithException() throws Exception {     testEvictException(this.cs). }
false;public;0;4;;@Test public void testEvictAll() throws Exception {     testEvictAll(this.cs). }
false;public;0;4;;@Test public void testInvalidateWithKey() throws Exception {     testEvictWKey(this.cs). }
false;public;0;4;;@Test public void testEarlyInvalidateWithKey() throws Exception {     testEvictWKeyEarly(this.cs). }
false;public;0;4;;@Test public void testConditionalExpression() throws Exception {     testConditionalExpression(this.cs). }
false;public;0;4;;@Test public void testConditionalExpressionSync() throws Exception {     testConditionalExpressionSync(this.cs). }
false;public;0;4;;@Test public void testUnlessExpression() throws Exception {     testUnlessExpression(this.cs). }
false;public;0;4;;@Test public void testClassCacheUnlessExpression() throws Exception {     testUnlessExpression(this.cs). }
false;public;0;4;;@Test public void testKeyExpression() throws Exception {     testKeyExpression(this.cs). }
false;public;0;4;;@Test public void testVarArgsKey() throws Exception {     testVarArgsKey(this.cs). }
false;public;0;4;;@Test public void testClassCacheCacheable() throws Exception {     testCacheable(this.ccs). }
false;public;0;4;;@Test public void testClassCacheInvalidate() throws Exception {     testEvict(this.ccs). }
false;public;0;4;;@Test public void testClassEarlyInvalidate() throws Exception {     testEvictEarly(this.ccs). }
false;public;0;4;;@Test public void testClassEvictAll() throws Exception {     testEvictAll(this.ccs). }
false;public;0;4;;@Test public void testClassEvictWithException() throws Exception {     testEvictException(this.ccs). }
false;public;0;4;;@Test public void testClassCacheInvalidateWKey() throws Exception {     testEvictWKey(this.ccs). }
false;public;0;4;;@Test public void testClassEarlyInvalidateWithKey() throws Exception {     testEvictWKeyEarly(this.ccs). }
false;public;0;4;;@Test public void testNullValue() throws Exception {     testNullValue(this.cs). }
false;public;0;12;;@Test public void testClassNullValue() throws Exception {     Object key = new Object().     assertNull(this.ccs.nullValue(key)).     int nr = this.ccs.nullInvocations().intValue().     assertNull(this.ccs.nullValue(key)).     assertEquals(nr, this.ccs.nullInvocations().intValue()).     assertNull(this.ccs.nullValue(new Object())).     // the check method is also cached     assertEquals(nr, this.ccs.nullInvocations().intValue()).     assertEquals(nr + 1, AnnotatedClassCacheableService.nullInvocations.intValue()). }
false;public;0;4;;@Test public void testMethodName() throws Exception {     testMethodName(this.cs, "name"). }
false;public;0;4;;@Test public void testClassMethodName() throws Exception {     testMethodName(this.ccs, "nametestCache"). }
false;public;0;4;;@Test public void testRootVars() throws Exception {     testRootVars(this.cs). }
false;public;0;4;;@Test public void testClassRootVars() throws Exception {     testRootVars(this.ccs). }
false;public;0;10;;@Test public void testCustomKeyGenerator() {     Object param = new Object().     Object r1 = this.cs.customKeyGenerator(param).     assertSame(r1, this.cs.customKeyGenerator(param)).     Cache cache = this.cm.getCache("testCache").     // Checks that the custom keyGenerator was used     Object expectedKey = SomeCustomKeyGenerator.generateKey("customKeyGenerator", param).     assertNotNull(cache.get(expectedKey)). }
false;public;0;11;;@Test public void testUnknownCustomKeyGenerator() {     try {         Object param = new Object().         this.cs.unknownCustomKeyGenerator(param).         fail("should have failed with NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {     // expected     } }
false;public;0;10;;@Test public void testCustomCacheManager() {     CacheManager customCm = this.ctx.getBean("customCacheManager", CacheManager.class).     Object key = new Object().     Object r1 = this.cs.customCacheManager(key).     assertSame(r1, this.cs.customCacheManager(key)).     Cache cache = customCm.getCache("testCache").     assertNotNull(cache.get(key)). }
false;public;0;11;;@Test public void testUnknownCustomCacheManager() {     try {         Object param = new Object().         this.cs.unknownCustomCacheManager(param).         fail("should have failed with NoSuchBeanDefinitionException").     } catch (NoSuchBeanDefinitionException ex) {     // expected     } }
false;public;0;4;;@Test public void testNullArg() throws Exception {     testNullArg(this.cs). }
false;public;0;4;;@Test public void testClassNullArg() throws Exception {     testNullArg(this.ccs). }
false;public;0;4;;@Test public void testCheckedException() throws Exception {     testCheckedThrowable(this.cs). }
false;public;0;4;;@Test public void testClassCheckedException() throws Exception {     testCheckedThrowable(this.ccs). }
false;public;0;4;;@Test public void testCheckedExceptionSync() throws Exception {     testCheckedThrowableSync(this.cs). }
false;public;0;4;;@Test public void testClassCheckedExceptionSync() throws Exception {     testCheckedThrowableSync(this.ccs). }
false;public;0;4;;@Test public void testUncheckedException() throws Exception {     testUncheckedThrowable(this.cs). }
false;public;0;4;;@Test public void testClassUncheckedException() throws Exception {     testUncheckedThrowable(this.ccs). }
false;public;0;4;;@Test public void testUncheckedExceptionSync() throws Exception {     testUncheckedThrowableSync(this.cs). }
false;public;0;4;;@Test public void testClassUncheckedExceptionSync() throws Exception {     testUncheckedThrowableSync(this.ccs). }
false;public;0;4;;@Test public void testUpdate() {     testCacheUpdate(this.cs). }
false;public;0;4;;@Test public void testClassUpdate() {     testCacheUpdate(this.ccs). }
false;public;0;4;;@Test public void testConditionalUpdate() {     testConditionalCacheUpdate(this.cs). }
false;public;0;4;;@Test public void testClassConditionalUpdate() {     testConditionalCacheUpdate(this.ccs). }
false;public;0;4;;@Test public void testMultiCache() {     testMultiCache(this.cs). }
false;public;0;4;;@Test public void testClassMultiCache() {     testMultiCache(this.ccs). }
false;public;0;4;;@Test public void testMultiEvict() {     testMultiEvict(this.cs). }
false;public;0;4;;@Test public void testClassMultiEvict() {     testMultiEvict(this.ccs). }
false;public;0;4;;@Test public void testMultiPut() {     testMultiPut(this.cs). }
false;public;0;4;;@Test public void testClassMultiPut() {     testMultiPut(this.ccs). }
false;public;0;4;;@Test public void testPutRefersToResult() throws Exception {     testPutRefersToResult(this.cs). }
false;public;0;4;;@Test public void testClassPutRefersToResult() throws Exception {     testPutRefersToResult(this.ccs). }
false;public;0;4;;@Test public void testMultiCacheAndEvict() {     testMultiCacheAndEvict(this.cs). }
false;public;0;4;;@Test public void testClassMultiCacheAndEvict() {     testMultiCacheAndEvict(this.ccs). }
false;public;0;4;;@Test public void testMultiConditionalCacheAndEvict() {     testMultiConditionalCacheAndEvict(this.cs). }
false;public;0;4;;@Test public void testClassMultiConditionalCacheAndEvict() {     testMultiConditionalCacheAndEvict(this.ccs). }
