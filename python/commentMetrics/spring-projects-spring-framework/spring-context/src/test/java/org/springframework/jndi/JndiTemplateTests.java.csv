commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;18;;@Test public void testLookupSucceeds() throws Exception {     Object o = new Object().     String name = "foo".     final Context context = mock(Context.class).     given(context.lookup(name)).willReturn(o).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     Object o2 = jt.lookup(name).     assertEquals(o, o2).     verify(context).close(). }
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;23;;@Test public void testLookupFails() throws Exception {     NameNotFoundException ne = new NameNotFoundException().     String name = "foo".     final Context context = mock(Context.class).     given(context.lookup(name)).willThrow(ne).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     try {         jt.lookup(name).         fail("Should have thrown NamingException").     } catch (NameNotFoundException ex) {     // Ok     }     verify(context).close(). }
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;22;;@Test public void testLookupReturnsNull() throws Exception {     String name = "foo".     final Context context = mock(Context.class).     given(context.lookup(name)).willReturn(null).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     try {         jt.lookup(name).         fail("Should have thrown NamingException").     } catch (NameNotFoundException ex) {     // Ok     }     verify(context).close(). }
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;23;;@Test public void testLookupFailsWithTypeMismatch() throws Exception {     Object o = new Object().     String name = "foo".     final Context context = mock(Context.class).     given(context.lookup(name)).willReturn(o).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     try {         jt.lookup(name, String.class).         fail("Should have thrown TypeMismatchNamingException").     } catch (TypeMismatchNamingException ex) {     // Ok     }     verify(context).close(). }
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;17;;@Test public void testBind() throws Exception {     Object o = new Object().     String name = "foo".     final Context context = mock(Context.class).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     jt.bind(name, o).     verify(context).bind(name, o).     verify(context).close(). }
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;17;;@Test public void testRebind() throws Exception {     Object o = new Object().     String name = "foo".     final Context context = mock(Context.class).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     jt.rebind(name, o).     verify(context).rebind(name, o).     verify(context).close(). }
false;protected;0;4;;@Override protected Context createInitialContext() {     return context. }
false;public;0;16;;@Test public void testUnbind() throws Exception {     String name = "something".     final Context context = mock(Context.class).     JndiTemplate jt = new JndiTemplate() {          @Override         protected Context createInitialContext() {             return context.         }     }.     jt.unbind(name).     verify(context).unbind(name).     verify(context).close(). }
