# id;timestamp;commentText;codeText;commentWords;codeWords
XmlBeanFactoryTests -> public @Test void testInitMethodThrowsException();1328020251;Test that if a custom initializer throws an exception, it's handled correctly;public @Test void testInitMethodThrowsException() {_		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;public,test,void,test,init,method,throws,exception,xml,bean,factory,xbf,new,xml,bean,factory,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> public @Test void testInitMethodThrowsException();1351392612;Test that if a custom initializer throws an exception, it's handled correctly;public @Test void testInitMethodThrowsException() {_		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;public,test,void,test,init,method,throws,exception,xml,bean,factory,xbf,new,xml,bean,factory,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> public @Test void testInitMethodThrowsException();1356735495;Test that if a custom initializer throws an exception, it's handled correctly;public @Test void testInitMethodThrowsException() {_		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;public,test,void,test,init,method,throws,exception,xml,bean,factory,xbf,new,xml,bean,factory,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> public @Test void testInitMethodThrowsException();1357119417;Test that if a custom initializer throws an exception, it's handled correctly;public @Test void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;public,test,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndSameInitMethod() throws Exception;1328020251;Check that InitializingBean method is not called twice.;public @Test void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;public,test,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,xml,bean,factory,xbf,new,xml,bean,factory,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndSameInitMethod() throws Exception;1351392612;Check that InitializingBean method is not called twice.;public @Test void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;public,test,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,xml,bean,factory,xbf,new,xml,bean,factory,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndSameInitMethod() throws Exception;1356735495;Check that InitializingBean method is not called twice.;public @Test void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;public,test,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,xml,bean,factory,xbf,new,xml,bean,factory,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndSameInitMethod() throws Exception;1357119417;Check that InitializingBean method is not called twice.;public @Test void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;public,test,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1328020251;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		XmlBeanFactory parent = new XmlBeanFactory(PARENT_CONTEXT)__		XmlBeanFactory child = new XmlBeanFactory(CHILD_CONTEXT, parent)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;public,test,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,xml,bean,factory,parent,new,xml,bean,factory,xml,bean,factory,child,new,xml,bean,factory,parent,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1351392612;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		XmlBeanFactory parent = new XmlBeanFactory(PARENT_CONTEXT)__		XmlBeanFactory child = new XmlBeanFactory(CHILD_CONTEXT, parent)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;public,test,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,xml,bean,factory,parent,new,xml,bean,factory,xml,bean,factory,child,new,xml,bean,factory,parent,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1356735495;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		XmlBeanFactory parent = new XmlBeanFactory(PARENT_CONTEXT)__		XmlBeanFactory child = new XmlBeanFactory(CHILD_CONTEXT, parent)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;public,test,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,xml,bean,factory,parent,new,xml,bean,factory,xml,bean,factory,child,new,xml,bean,factory,parent,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1357119417;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;public @Test void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;public,test,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndInitMethod() throws Exception;1328020251;Check that InitializingBean method is called first.;public @Test void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;public,test,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,xml,bean,factory,xbf,new,xml,bean,factory,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndInitMethod() throws Exception;1351392612;Check that InitializingBean method is called first.;public @Test void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;public,test,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,xml,bean,factory,xbf,new,xml,bean,factory,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndInitMethod() throws Exception;1356735495;Check that InitializingBean method is called first.;public @Test void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		XmlBeanFactory xbf = new XmlBeanFactory(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;public,test,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,xml,bean,factory,xbf,new,xml,bean,factory,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testInitializingBeanAndInitMethod() throws Exception;1357119417;Check that InitializingBean method is called first.;public @Test void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;public,test,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1362408075;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1386621944;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1392247717;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1392253766;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1394450789;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1394709692;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1394825889;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1408056940;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1456741103;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1458323493;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1462299157;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1467744603;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1521222540;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testBogusParentageFromParentFactory() throws Exception;1544700571;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;@Test_	public void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().contains("bogusParent"))__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;test,public,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,contains,bogus,parent,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1362408075;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1386621944;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1392247717;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1392253766;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1394450789;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1394709692;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1394825889;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1408056940;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1456741103;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1458323493;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1462299157;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1467744603;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1521222540;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testClassNotFoundWithDefaultBeanClassLoader();1544700571;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;@Test_	public void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().contains("classNotFound.xml"))__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;test,public,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,contains,class,not,found,xml,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testSerializabilityOfMethodReplacer() throws Exception;1362408075;Assert the presence of this bug until we resolve it.;@Test_	public void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;test,public,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> @Test 	public void testSerializabilityOfMethodReplacer() throws Exception;1386621944;Assert the presence of this bug until we resolve it.;@Test_	public void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;test,public,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> @Test 	public void testSerializabilityOfMethodReplacer() throws Exception;1392247717;Assert the presence of this bug until we resolve it.;@Test_	public void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;test,public,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1362408075;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1386621944;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1392247717;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1392253766;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1394450789;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1394709692;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1394825889;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1408056940;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1456741103;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1458323493;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1462299157;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1467744603;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1521222540;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndSameInitMethod() throws Exception;1544700571;Check that InitializingBean method is not called twice.;@Test_	public void testInitializingBeanAndSameInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("ib-same-init")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && !iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && !iib.customDestroyed)__	};check,that,initializing,bean,method,is,not,called,twice;test,public,void,test,initializing,bean,and,same,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,ib,same,init,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testBogusParentageFromParentFactory() throws Exception;1328020251;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;public @Test void testBogusParentageFromParentFactory() throws Exception {_		XmlBeanFactory parent = new XmlBeanFactory(PARENT_CONTEXT)__		XmlBeanFactory child = new XmlBeanFactory(CHILD_CONTEXT, parent)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;public,test,void,test,bogus,parentage,from,parent,factory,throws,exception,xml,bean,factory,parent,new,xml,bean,factory,xml,bean,factory,child,new,xml,bean,factory,parent,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> public @Test void testBogusParentageFromParentFactory() throws Exception;1351392612;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;public @Test void testBogusParentageFromParentFactory() throws Exception {_		XmlBeanFactory parent = new XmlBeanFactory(PARENT_CONTEXT)__		XmlBeanFactory child = new XmlBeanFactory(CHILD_CONTEXT, parent)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;public,test,void,test,bogus,parentage,from,parent,factory,throws,exception,xml,bean,factory,parent,new,xml,bean,factory,xml,bean,factory,child,new,xml,bean,factory,parent,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> public @Test void testBogusParentageFromParentFactory() throws Exception;1356735495;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;public @Test void testBogusParentageFromParentFactory() throws Exception {_		XmlBeanFactory parent = new XmlBeanFactory(PARENT_CONTEXT)__		XmlBeanFactory child = new XmlBeanFactory(CHILD_CONTEXT, parent)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;public,test,void,test,bogus,parentage,from,parent,factory,throws,exception,xml,bean,factory,parent,new,xml,bean,factory,xml,bean,factory,child,new,xml,bean,factory,parent,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> public @Test void testBogusParentageFromParentFactory() throws Exception;1357119417;Check that a prototype can't inherit from a bogus parent._If a singleton does this the factory will fail to load.;public @Test void testBogusParentageFromParentFactory() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		try {_			child.getBean("bogusParent", TestBean.class)__			fail()__		}_		catch (BeanDefinitionStoreException ex) {_			_			assertTrue(ex.getMessage().indexOf("bogusParent") != -1)__			assertTrue(ex.getCause() instanceof NoSuchBeanDefinitionException)__		}_	};check,that,a,prototype,can,t,inherit,from,a,bogus,parent,if,a,singleton,does,this,the,factory,will,fail,to,load;public,test,void,test,bogus,parentage,from,parent,factory,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,try,child,get,bean,bogus,parent,test,bean,class,fail,catch,bean,definition,store,exception,ex,assert,true,ex,get,message,index,of,bogus,parent,1,assert,true,ex,get,cause,instanceof,no,such,bean,definition,exception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1328020251;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1351392612;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1356735495;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1357119417;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1362408075;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1386621944;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1392247717;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1392253766;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1394450789;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1394709692;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1394825889;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1408056940;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1456741103;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1458323493;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1462299157;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1467744603;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1521222540;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> BadInitializer -> public void init2() throws IOException;1544700571;Init method;public void init2() throws IOException {_			throw new IOException()__		};init,method;public,void,init2,throws,ioexception,throw,new,ioexception
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1392247717;@since 3.2.8 and 4.0.2_@see <a href="https://jira.springsource.org/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.springsource.org/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 1_ i <= 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,springsource,org,browse,spr,10785,spr,10785,a,and,a,href,https,jira,springsource,org,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,1,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1392253766;@since 3.2.8 and 4.0.2_@see <a href="https://jira.springsource.org/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.springsource.org/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,springsource,org,browse,spr,10785,spr,10785,a,and,a,href,https,jira,springsource,org,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1394450789;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1394709692;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1394825889;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1408056940;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1456741103;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1458323493;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1462299157;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1467744603;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1521222540;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories();1544700571;@since 3.2.8 and 4.0.2_@see <a href="https://jira.spring.io/browse/SPR-10785">SPR-10785</a> and <a_href="https://jira.spring.io/browse/SPR-11420">SPR-11420</a>;@Test_	public void methodInjectedBeanMustBeOfSameEnhancedCglibSubclassTypeAcrossBeanFactories() {_		Class<?> firstClass = null___		for (int i = 0_ i < 10_ i++) {_			DefaultListableBeanFactory bf = new DefaultListableBeanFactory()__			new XmlBeanDefinitionReader(bf).loadBeanDefinitions(OVERRIDES_CONTEXT)___			final Class<?> currentClass = bf.getBean("overrideOneMethod").getClass()__			assertTrue("Method injected bean class [" + currentClass + "] must be a CGLIB enhanced subclass.",_				ClassUtils.isCglibProxyClass(currentClass))___			if (firstClass == null) {_				firstClass = currentClass__			}_			else {_				assertEquals(firstClass, currentClass)__			}_		}_	};since,3,2,8,and,4,0,2,see,a,href,https,jira,spring,io,browse,spr,10785,spr,10785,a,and,a,href,https,jira,spring,io,browse,spr,11420,spr,11420,a;test,public,void,method,injected,bean,must,be,of,same,enhanced,cglib,subclass,type,across,bean,factories,class,first,class,null,for,int,i,0,i,10,i,default,listable,bean,factory,bf,new,default,listable,bean,factory,new,xml,bean,definition,reader,bf,load,bean,definitions,final,class,current,class,bf,get,bean,override,one,method,get,class,assert,true,method,injected,bean,class,current,class,must,be,a,cglib,enhanced,subclass,class,utils,is,cglib,proxy,class,current,class,if,first,class,null,first,class,current,class,else,assert,equals,first,class,current,class
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1362408075;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1386621944;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1392247717;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1392253766;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1394450789;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1394709692;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1394825889;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1408056940;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1456741103;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1458323493;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1462299157;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1467744603;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1521222540;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> @Test 	public void testInitializingBeanAndInitMethod() throws Exception;1544700571;Check that InitializingBean method is called first.;@Test_	public void testInitializingBeanAndInitMethod() throws Exception {_		InitAndIB.constructed = false__		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		assertFalse(InitAndIB.constructed)__		xbf.preInstantiateSingletons()__		assertFalse(InitAndIB.constructed)__		InitAndIB iib = (InitAndIB) xbf.getBean("init-and-ib")__		assertTrue(InitAndIB.constructed)__		assertTrue(iib.afterPropertiesSetInvoked && iib.initMethodInvoked)__		assertTrue(!iib.destroyed && !iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__		xbf.destroySingletons()__		assertTrue(iib.destroyed && iib.customDestroyed)__	};check,that,initializing,bean,method,is,called,first;test,public,void,test,initializing,bean,and,init,method,throws,exception,init,and,ib,constructed,false,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,assert,false,init,and,ib,constructed,xbf,pre,instantiate,singletons,assert,false,init,and,ib,constructed,init,and,ib,iib,init,and,ib,xbf,get,bean,init,and,ib,assert,true,init,and,ib,constructed,assert,true,iib,after,properties,set,invoked,iib,init,method,invoked,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed,xbf,destroy,singletons,assert,true,iib,destroyed,iib,custom,destroyed
XmlBeanFactoryTests -> public @Test void testClassNotFoundWithDefaultBeanClassLoader();1328020251;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;public @Test void testClassNotFoundWithDefaultBeanClassLoader() {_		BeanFactory factory = new XmlBeanFactory(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;public,test,void,test,class,not,found,with,default,bean,class,loader,bean,factory,factory,new,xml,bean,factory,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> public @Test void testClassNotFoundWithDefaultBeanClassLoader();1351392612;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;public @Test void testClassNotFoundWithDefaultBeanClassLoader() {_		BeanFactory factory = new XmlBeanFactory(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;public,test,void,test,class,not,found,with,default,bean,class,loader,bean,factory,factory,new,xml,bean,factory,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> public @Test void testClassNotFoundWithDefaultBeanClassLoader();1356735495;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;public @Test void testClassNotFoundWithDefaultBeanClassLoader() {_		BeanFactory factory = new XmlBeanFactory(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;public,test,void,test,class,not,found,with,default,bean,class,loader,bean,factory,factory,new,xml,bean,factory,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> public @Test void testClassNotFoundWithDefaultBeanClassLoader();1357119417;When using a BeanFactory. singletons are of course not pre-instantiated._So rubbish class names in bean defs must now not be 'resolved' when the_bean def is being parsed, 'cos everything on a bean def is now lazy, but_must rather only be picked up when the bean is instantiated.;public @Test void testClassNotFoundWithDefaultBeanClassLoader() {_		DefaultListableBeanFactory factory = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(CLASS_NOT_FOUND_CONTEXT)__		_		try {_			_			factory.getBean("classNotFound")__			fail("Must have thrown a CannotLoadBeanClassException")__		}_		catch (CannotLoadBeanClassException ex) {_			assertTrue(ex.getResourceDescription().indexOf("classNotFound.xml") != -1)__			assertTrue(ex.getCause() instanceof ClassNotFoundException)__		}_	};when,using,a,bean,factory,singletons,are,of,course,not,pre,instantiated,so,rubbish,class,names,in,bean,defs,must,now,not,be,resolved,when,the,bean,def,is,being,parsed,cos,everything,on,a,bean,def,is,now,lazy,but,must,rather,only,be,picked,up,when,the,bean,is,instantiated;public,test,void,test,class,not,found,with,default,bean,class,loader,default,listable,bean,factory,factory,new,default,listable,bean,factory,new,xml,bean,definition,reader,factory,load,bean,definitions,try,factory,get,bean,class,not,found,fail,must,have,thrown,a,cannot,load,bean,class,exception,catch,cannot,load,bean,class,exception,ex,assert,true,ex,get,resource,description,index,of,class,not,found,xml,1,assert,true,ex,get,cause,instanceof,class,not,found,exception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1362408075;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1386621944;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1392247717;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1392253766;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1394450789;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1394709692;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1394825889;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1408056940;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1456741103;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1458323493;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1462299157;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1467744603;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1521222540;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().indexOf("initializers.xml") != -1)__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,index,of,initializers,xml,1,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> @Test 	public void testInitMethodThrowsException();1544700571;Test that if a custom initializer throws an exception, it's handled correctly;@Test_	public void testInitMethodThrowsException() {_		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(xbf).loadBeanDefinitions(INITIALIZERS_CONTEXT)__		try {_			xbf.getBean("init-method2")__			fail()__		}_		catch (BeanCreationException ex) {_			assertTrue(ex.getResourceDescription().contains("initializers.xml"))__			assertEquals("init-method2", ex.getBeanName())__			assertTrue(ex.getCause() instanceof IOException)__		}_	};test,that,if,a,custom,initializer,throws,an,exception,it,s,handled,correctly;test,public,void,test,init,method,throws,exception,default,listable,bean,factory,xbf,new,default,listable,bean,factory,new,xml,bean,definition,reader,xbf,load,bean,definitions,try,xbf,get,bean,init,method2,fail,catch,bean,creation,exception,ex,assert,true,ex,get,resource,description,contains,initializers,xml,assert,equals,init,method2,ex,get,bean,name,assert,true,ex,get,cause,instanceof,ioexception
XmlBeanFactoryTests -> public @Test void testSerializabilityOfMethodReplacer() throws Exception;1328020251;Assert the presence of this bug until we resolve it.;public @Test void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;public,test,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> public @Test void testSerializabilityOfMethodReplacer() throws Exception;1351392612;Assert the presence of this bug until we resolve it.;public @Test void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;public,test,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> public @Test void testSerializabilityOfMethodReplacer() throws Exception;1356735495;Assert the presence of this bug until we resolve it.;public @Test void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;public,test,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> public @Test void testSerializabilityOfMethodReplacer() throws Exception;1357119417;Assert the presence of this bug until we resolve it.;public @Test void testSerializabilityOfMethodReplacer() throws Exception {_		try {_			BUGtestSerializableMethodReplacerAndSuperclass()__			fail()__		}_		catch (AssertionError ex) {_			System.err.println("****** SPR-356: Objects with MethodReplace overrides are not serializable")__		}_	};assert,the,presence,of,this,bug,until,we,resolve,it;public,test,void,test,serializability,of,method,replacer,throws,exception,try,bugtest,serializable,method,replacer,and,superclass,fail,catch,assertion,error,ex,system,err,println,spr,356,objects,with,method,replace,overrides,are,not,serializable
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1328020251;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1351392612;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1356735495;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1357119417;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1362408075;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1386621944;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1392247717;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1392253766;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1394450789;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1394709692;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1394825889;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1408056940;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1456741103;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1458323493;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1462299157;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1467744603;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1521222540;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> InitAndIB -> public void customInit() throws IOException;1544700571;Init method;public void customInit() throws IOException {_			if (!this.afterPropertiesSetInvoked) {_				fail()__			}_			if (this.initMethodInvoked) {_				throw new IllegalStateException("Already customInitialized")__			}_			this.initMethodInvoked = true__		};init,method;public,void,custom,init,throws,ioexception,if,this,after,properties,set,invoked,fail,if,this,init,method,invoked,throw,new,illegal,state,exception,already,custom,initialized,this,init,method,invoked,true
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1362408075;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1386621944;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1392247717;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1392253766;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1394450789;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1394709692;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1394825889;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1408056940;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1456741103;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1458323493;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1462299157;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1467744603;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1521222540;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> @Test 	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception;1544700571;Note that prototype/singleton distinction is <b>not</b> inherited._It's possible for a subclass singleton not to return independent_instances even if derived from a prototype;@Test_	public void testSingletonInheritsFromParentFactoryPrototype() throws Exception {_		DefaultListableBeanFactory parent = new DefaultListableBeanFactory()__		new XmlBeanDefinitionReader(parent).loadBeanDefinitions(PARENT_CONTEXT)__		DefaultListableBeanFactory child = new DefaultListableBeanFactory(parent)__		new XmlBeanDefinitionReader(child).loadBeanDefinitions(CHILD_CONTEXT)__		TestBean inherits = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		_		assertTrue(inherits.getName().equals("prototype-override"))__		_		assertTrue(inherits.getAge() == 2)__		TestBean inherits2 = (TestBean) child.getBean("singletonInheritsFromParentFactoryPrototype")__		assertTrue(inherits2 == inherits)__	};note,that,prototype,singleton,distinction,is,b,not,b,inherited,it,s,possible,for,a,subclass,singleton,not,to,return,independent,instances,even,if,derived,from,a,prototype;test,public,void,test,singleton,inherits,from,parent,factory,prototype,throws,exception,default,listable,bean,factory,parent,new,default,listable,bean,factory,new,xml,bean,definition,reader,parent,load,bean,definitions,default,listable,bean,factory,child,new,default,listable,bean,factory,parent,new,xml,bean,definition,reader,child,load,bean,definitions,test,bean,inherits,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits,get,name,equals,prototype,override,assert,true,inherits,get,age,2,test,bean,inherits2,test,bean,child,get,bean,singleton,inherits,from,parent,factory,prototype,assert,true,inherits2,inherits
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1328020251;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1351392612;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1356735495;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1357119417;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1362408075;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1386621944;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1392247717;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1392253766;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1394450789;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1394709692;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1394825889;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1408056940;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1456741103;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1458323493;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1462299157;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1467744603;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1521222540;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
XmlBeanFactoryTests -> DoubleInitializer -> public void init();1544700571;Init method;public void init() {_			this.num *= 2__		};init,method;public,void,init,this,num,2
