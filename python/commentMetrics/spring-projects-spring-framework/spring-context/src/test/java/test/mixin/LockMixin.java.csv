# id;timestamp;commentText;codeText;commentWords;codeWords
LockMixin -> @Override 	public boolean locked();1356735495;@see test.mixin.AopProxyTests.Lockable#locked();@Override_	public boolean locked() {_		return this.locked__	};see,test,mixin,aop,proxy,tests,lockable,locked;override,public,boolean,locked,return,this,locked
LockMixin -> @Override 	public boolean locked();1385507683;@see test.mixin.AopProxyTests.Lockable#locked();@Override_	public boolean locked() {_		return this.locked__	};see,test,mixin,aop,proxy,tests,lockable,locked;override,public,boolean,locked,return,this,locked
LockMixin -> @Override 	public boolean locked();1413848647;@see test.mixin.AopProxyTests.Lockable#locked();@Override_	public boolean locked() {_		return this.locked__	};see,test,mixin,aop,proxy,tests,lockable,locked;override,public,boolean,locked,return,this,locked
LockMixin -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1356735495;Note that we need to override around advice._If the method is a setter and we're locked, prevent execution._Otherwise let super.invoke() handle it, and do normal_Lockable(this) then target behaviour._@see org.aopalliance.MethodInterceptor#invoke(org.aopalliance.MethodInvocation);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		if (locked() && invocation.getMethod().getName().indexOf("set") == 0)_			throw new LockedException()__		return super.invoke(invocation)__	};note,that,we,need,to,override,around,advice,if,the,method,is,a,setter,and,we,re,locked,prevent,execution,otherwise,let,super,invoke,handle,it,and,do,normal,lockable,this,then,target,behaviour,see,org,aopalliance,method,interceptor,invoke,org,aopalliance,method,invocation;override,public,object,invoke,method,invocation,invocation,throws,throwable,if,locked,invocation,get,method,get,name,index,of,set,0,throw,new,locked,exception,return,super,invoke,invocation
LockMixin -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1385507683;Note that we need to override around advice._If the method is a setter and we're locked, prevent execution._Otherwise let super.invoke() handle it, and do normal_Lockable(this) then target behaviour._@see org.aopalliance.MethodInterceptor#invoke(org.aopalliance.MethodInvocation);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		if (locked() && invocation.getMethod().getName().indexOf("set") == 0)_			throw new LockedException()__		return super.invoke(invocation)__	};note,that,we,need,to,override,around,advice,if,the,method,is,a,setter,and,we,re,locked,prevent,execution,otherwise,let,super,invoke,handle,it,and,do,normal,lockable,this,then,target,behaviour,see,org,aopalliance,method,interceptor,invoke,org,aopalliance,method,invocation;override,public,object,invoke,method,invocation,invocation,throws,throwable,if,locked,invocation,get,method,get,name,index,of,set,0,throw,new,locked,exception,return,super,invoke,invocation
LockMixin -> @Override 	public Object invoke(MethodInvocation invocation) throws Throwable;1413848647;Note that we need to override around advice._If the method is a setter and we're locked, prevent execution._Otherwise let super.invoke() handle it, and do normal_Lockable(this) then target behaviour._@see org.aopalliance.MethodInterceptor#invoke(org.aopalliance.MethodInvocation);@Override_	public Object invoke(MethodInvocation invocation) throws Throwable {_		if (locked() && invocation.getMethod().getName().indexOf("set") == 0)_			throw new LockedException()__		return super.invoke(invocation)__	};note,that,we,need,to,override,around,advice,if,the,method,is,a,setter,and,we,re,locked,prevent,execution,otherwise,let,super,invoke,handle,it,and,do,normal,lockable,this,then,target,behaviour,see,org,aopalliance,method,interceptor,invoke,org,aopalliance,method,invocation;override,public,object,invoke,method,invocation,invocation,throws,throwable,if,locked,invocation,get,method,get,name,index,of,set,0,throw,new,locked,exception,return,super,invoke,invocation
