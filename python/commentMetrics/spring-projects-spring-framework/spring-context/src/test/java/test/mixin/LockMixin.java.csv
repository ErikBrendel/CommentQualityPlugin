commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void lock() {     this.locked = true. }
false;public;0;4;;@Override public void unlock() {     this.locked = false. }
true;public;0;4;/**  * @see test.mixin.AopProxyTests.Lockable#locked()  */ ;/**  * @see test.mixin.AopProxyTests.Lockable#locked()  */ @Override public boolean locked() {     return this.locked. }
true;public;1;6;/**  * Note that we need to override around advice.  * If the method is a setter and we're locked, prevent execution.  * Otherwise let super.invoke() handle it, and do normal  * Lockable(this) then target behaviour.  * @see org.aopalliance.MethodInterceptor#invoke(org.aopalliance.MethodInvocation)  */ ;/**  * Note that we need to override around advice.  * If the method is a setter and we're locked, prevent execution.  * Otherwise let super.invoke() handle it, and do normal  * Lockable(this) then target behaviour.  * @see org.aopalliance.MethodInterceptor#invoke(org.aopalliance.MethodInvocation)  */ @Override public Object invoke(MethodInvocation invocation) throws Throwable {     if (locked() && invocation.getMethod().getName().indexOf("set") == 0)         throw new LockedException().     return super.invoke(invocation). }
