commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;protected File getProjectDir(String name) {     File root = new File("src/testKit/").     if (root.exists() == false) {         throw new RuntimeException("Could not find resources dir for integration tests. " + "Note that these tests can only be ran by Gradle and are not currently supported by the IDE").     }     return new File(root, name).getAbsoluteFile(). }
false;protected;1;5;;protected GradleRunner getGradleRunner(String sampleProject) {     return GradleRunner.create().withProjectDir(getProjectDir(sampleProject)).withPluginClasspath(). }
false;protected;1;3;;protected File getBuildDir(String name) {     return new File(getProjectDir(name), "build"). }
false;protected;2;12;;protected void assertOutputContains(String output, String... lines) {     for (String line : lines) {         assertOutputContains(output, line).     }     List<Integer> index = Stream.of(lines).map(line -> output.indexOf(line)).collect(Collectors.toList()).     if (index.equals(index.stream().sorted().collect(Collectors.toList())) == false) {         fail("Expected the following lines to appear in this order:\n" + Stream.of(lines).map(line -> "   - `" + line + "`").collect(Collectors.joining("\n")) + "\nTBut the order was different. Output is:\n\n```" + output + "\n```\n").     } }
false;protected;2;5;;protected void assertOutputContains(String output, Set<String> lines) {     for (String line : lines) {         assertOutputContains(output, line).     } }
false;protected;2;6;;protected void assertOutputContains(String output, String line) {     assertTrue("Expected the following line in output:\n\n" + line + "\n\nOutput is:\n" + output, output.contains(line)). }
false;protected;2;6;;protected void assertOutputDoesNotContain(String output, String line) {     assertFalse("Expected the following line not to be in output:\n\n" + line + "\n\nOutput is:\n" + output, output.contains(line)). }
false;protected;2;5;;protected void assertOutputDoesNotContain(String output, String... lines) {     for (String line : lines) {         assertOutputDoesNotContain(line).     } }
false;protected;2;3;;protected void assertTaskFailed(BuildResult result, String taskName) {     assertTaskOutcome(result, taskName, TaskOutcome.FAILED). }
false;protected;2;5;;protected void assertTaskSuccessful(BuildResult result, String... taskNames) {     for (String taskName : taskNames) {         assertTaskOutcome(result, taskName, TaskOutcome.SUCCESS).     } }
false;protected;2;5;;protected void assertTaskSkipped(BuildResult result, String... taskNames) {     for (String taskName : taskNames) {         assertTaskOutcome(result, taskName, TaskOutcome.SKIPPED).     } }
false;protected;2;5;;protected void assertTaskNoSource(BuildResult result, String... taskNames) {     for (String taskName : taskNames) {         assertTaskOutcome(result, taskName, TaskOutcome.NO_SOURCE).     } }
false;private;3;13;;private void assertTaskOutcome(BuildResult result, String taskName, TaskOutcome taskOutcome) {     BuildTask task = result.task(taskName).     if (task == null) {         fail("Expected task `" + taskName + "` to be " + taskOutcome + ", but it did not run" + "\n\nOutput is:\n" + result.getOutput()).     }     assertEquals("Expected task `" + taskName + "` to be " + taskOutcome + " but it was: " + task.getOutcome() + "\n\nOutput is:\n" + result.getOutput(), taskOutcome, task.getOutcome()). }
false;protected;2;14;;protected void assertTaskUpToDate(BuildResult result, String... taskNames) {     for (String taskName : taskNames) {         BuildTask task = result.task(taskName).         if (task == null) {             fail("Expected task `" + taskName + "` to be up-to-date, but it did not run").         }         assertEquals("Expected task to be up to date but it was: " + task.getOutcome() + "\n\nOutput is:\n" + result.getOutput(), TaskOutcome.UP_TO_DATE, task.getOutcome()).     } }
false;protected;3;8;;protected void assertBuildFileExists(BuildResult result, String projectName, String path) {     Path absPath = getBuildDir(projectName).toPath().resolve(path).     assertTrue(result.getOutput() + "\n\nExpected `" + absPath + "` to exists but it did not" + "\n\nOutput is:\n" + result.getOutput(), Files.exists(absPath)). }
false;protected;3;8;;protected void assertBuildFileDoesNotExists(BuildResult result, String projectName, String path) {     Path absPath = getBuildDir(projectName).toPath().resolve(path).     assertFalse(result.getOutput() + "\n\nExpected `" + absPath + "` bo to exists but it did" + "\n\nOutput is:\n" + result.getOutput(), Files.exists(absPath)). }
false;protected;0;3;;protected String getLocalTestRepoPath() {     return getLocalTestPath("test.local-test-repo-path"). }
false;protected;0;3;;protected String getLocalTestDownloadsPath() {     return getLocalTestPath("test.local-test-downloads-path"). }
false;private;1;12;;private String getLocalTestPath(String propertyName) {     String property = System.getProperty(propertyName).     Objects.requireNonNull(property, propertyName + " not passed to tests").     File file = new File(property).     assertTrue("Expected " + property + " to exist, but it did not!", file.exists()).     if (File.separator.equals("\\")) {         // Use / on Windows too, the build script is not happy with \         return file.getAbsolutePath().replace(File.separator, "/").     } else {         return file.getAbsolutePath().     } }
false;public;2;12;;public void assertOutputOnlyOnce(String output, String... text) {     for (String each : text) {         int i = output.indexOf(each).         if (i == -1) {             fail("Expected \n```" + each + "```\nto appear at most once, but it didn't at all.\n\nOutout is:\n" + output).         }         if (output.indexOf(each) != output.lastIndexOf(each)) {             fail("Expected `" + each + "` to appear at most once, but it did multiple times.\n\nOutout is:\n" + output).         }     } }
