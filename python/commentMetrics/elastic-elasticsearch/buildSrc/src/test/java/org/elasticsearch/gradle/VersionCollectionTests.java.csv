commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testExceptionOnEmpty() {     new VersionCollection(asList("foo", "bar"), Version.fromString("7.0.0")). }
false;public;0;4;;@Test(expected = IllegalStateException.class) public void testExceptionOnNonCurrent() {     new VersionCollection(singletonList(formatVersionToLine("6.5.0")), Version.fromString("7.0.0")). }
false;public;0;11;;@Test(expected = IllegalStateException.class) public void testExceptionOnTooManyMajors() {     new VersionCollection(asList(formatVersionToLine("5.6.12"), formatVersionToLine("6.5.0"), formatVersionToLine("7.0.0")), Version.fromString("6.5.0")). }
false;public;0;46;;public void testWireCompatible() {     assertVersionsEquals(singletonList("6.5.0-SNAPSHOT"), getVersionCollection("7.0.0-alpha1").getWireCompatible()).     assertVersionsEquals(asList("5.6.0", "5.6.1", "5.6.2", "5.6.3", "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13-SNAPSHOT", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2-SNAPSHOT"), getVersionCollection("6.5.0").getWireCompatible()).     assertVersionsEquals(asList("5.6.0", "5.6.1", "5.6.2", "5.6.3", "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13-SNAPSHOT", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1"), getVersionCollection("6.4.2").getWireCompatible()).     assertVersionsEquals(asList("5.6.0", "5.6.1", "5.6.2", "5.6.3", "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13-SNAPSHOT", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2-SNAPSHOT", "6.5.0-SNAPSHOT"), getVersionCollection("6.6.0").getWireCompatible()).     assertVersionsEquals(singletonList("7.3.0"), getVersionCollection("8.0.0").getWireCompatible()).     assertVersionsEquals(asList("6.7.0", "7.0.0"), getVersionCollection("7.1.0").getWireCompatible()). }
false;public;0;29;;public void testWireCompatibleUnreleased() {     assertVersionsEquals(singletonList("6.5.0-SNAPSHOT"), getVersionCollection("7.0.0-alpha1").getUnreleasedWireCompatible()).     assertVersionsEquals(asList("5.6.13-SNAPSHOT", "6.4.2-SNAPSHOT"), getVersionCollection("6.5.0").getUnreleasedWireCompatible()).     assertVersionsEquals(singletonList("5.6.13-SNAPSHOT"), getVersionCollection("6.4.2").getUnreleasedWireCompatible()).     assertVersionsEquals(asList("5.6.13-SNAPSHOT", "6.4.2-SNAPSHOT", "6.5.0-SNAPSHOT"), getVersionCollection("6.6.0").getUnreleasedWireCompatible()).     assertVersionsEquals(singletonList("7.3.0"), getVersionCollection("8.0.0").getUnreleasedWireCompatible()).     assertVersionsEquals(asList("6.7.0", "7.0.0"), getVersionCollection("7.1.0").getWireCompatible()). }
false;public;0;48;;public void testIndexCompatible() {     assertVersionsEquals(asList("6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2-SNAPSHOT", "6.5.0-SNAPSHOT"), getVersionCollection("7.0.0-alpha1").getIndexCompatible()).     assertVersionsEquals(asList("5.0.0", "5.0.1", "5.0.2", "5.1.1", "5.1.2", "5.2.0", "5.2.1", "5.2.2", "5.3.0", "5.3.1", "5.3.2", "5.3.3", "5.4.0", "5.4.1", "5.4.2", "5.4.3", "5.5.0", "5.5.1", "5.5.2", "5.5.3", "5.6.0", "5.6.1", "5.6.2", "5.6.3", "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13-SNAPSHOT", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2-SNAPSHOT"), getVersionCollection("6.5.0").getIndexCompatible()).     assertVersionsEquals(asList("5.0.0", "5.0.1", "5.0.2", "5.1.1", "5.1.2", "5.2.0", "5.2.1", "5.2.2", "5.3.0", "5.3.1", "5.3.2", "5.3.3", "5.4.0", "5.4.1", "5.4.2", "5.4.3", "5.5.0", "5.5.1", "5.5.2", "5.5.3", "5.6.0", "5.6.1", "5.6.2", "5.6.3", "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13-SNAPSHOT", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1"), getVersionCollection("6.4.2").getIndexCompatible()).     assertVersionsEquals(asList("5.0.0", "5.0.1", "5.0.2", "5.1.1", "5.1.2", "5.2.0", "5.2.1", "5.2.2", "5.3.0", "5.3.1", "5.3.2", "5.3.3", "5.4.0", "5.4.1", "5.4.2", "5.4.3", "5.5.0", "5.5.1", "5.5.2", "5.5.3", "5.6.0", "5.6.1", "5.6.2", "5.6.3", "5.6.4", "5.6.5", "5.6.6", "5.6.7", "5.6.8", "5.6.9", "5.6.10", "5.6.11", "5.6.12", "5.6.13-SNAPSHOT", "6.0.0", "6.0.1", "6.1.0", "6.1.1", "6.1.2", "6.1.3", "6.1.4", "6.2.0", "6.2.1", "6.2.2", "6.2.3", "6.2.4", "6.3.0", "6.3.1", "6.3.2", "6.4.0", "6.4.1", "6.4.2-SNAPSHOT", "6.5.0-SNAPSHOT"), getVersionCollection("6.6.0").getIndexCompatible()).     assertVersionsEquals(asList("7.0.0", "7.0.1", "7.1.0", "7.1.1", "7.2.0", "7.3.0"), getVersionCollection("8.0.0").getIndexCompatible()). }
false;public;0;26;;public void testIndexCompatibleUnreleased() {     assertVersionsEquals(asList("6.4.2-SNAPSHOT", "6.5.0-SNAPSHOT"), getVersionCollection("7.0.0-alpha1").getUnreleasedIndexCompatible()).     assertVersionsEquals(asList("5.6.13-SNAPSHOT", "6.4.2-SNAPSHOT"), getVersionCollection("6.5.0").getUnreleasedIndexCompatible()).     assertVersionsEquals(singletonList("5.6.13-SNAPSHOT"), getVersionCollection("6.4.2").getUnreleasedIndexCompatible()).     assertVersionsEquals(asList("5.6.13-SNAPSHOT", "6.4.2-SNAPSHOT", "6.5.0-SNAPSHOT"), getVersionCollection("6.6.0").getUnreleasedIndexCompatible()).     assertVersionsEquals(asList("7.1.1", "7.2.0", "7.3.0"), getVersionCollection("8.0.0").getUnreleasedIndexCompatible()). }
false;public;0;22;;public void testGetUnreleased() {     assertVersionsEquals(asList("6.4.2", "6.5.0", "7.0.0-alpha1"), getVersionCollection("7.0.0-alpha1").getUnreleased()).     assertVersionsEquals(asList("5.6.13", "6.4.2", "6.5.0"), getVersionCollection("6.5.0").getUnreleased()).     assertVersionsEquals(asList("5.6.13", "6.4.2"), getVersionCollection("6.4.2").getUnreleased()).     assertVersionsEquals(asList("5.6.13", "6.4.2", "6.5.0", "6.6.0"), getVersionCollection("6.6.0").getUnreleased()).     assertVersionsEquals(asList("7.1.1", "7.2.0", "7.3.0", "8.0.0"), getVersionCollection("8.0.0").getUnreleased()). }
false;public;0;22;;public void testGetBranch() {     assertUnreleasedBranchNames(asList("6.4", "6.x"), getVersionCollection("7.0.0-alpha1")).     assertUnreleasedBranchNames(asList("5.6", "6.4"), getVersionCollection("6.5.0")).     assertUnreleasedBranchNames(singletonList("5.6"), getVersionCollection("6.4.2")).     assertUnreleasedBranchNames(asList("5.6", "6.4", "6.x"), getVersionCollection("6.6.0")).     assertUnreleasedBranchNames(asList("7.1", "7.2", "7.x"), getVersionCollection("8.0.0")). }
false;public;0;26;;public void testGetGradleProjectName() {     assertUnreleasedGradleProjectNames(asList("bugfix", "minor"), getVersionCollection("7.0.0-alpha1")).     assertUnreleasedGradleProjectNames(asList("maintenance", "bugfix"), getVersionCollection("6.5.0")).     assertUnreleasedGradleProjectNames(singletonList("maintenance"), getVersionCollection("6.4.2")).     assertUnreleasedGradleProjectNames(asList("maintenance", "bugfix", "minor"), getVersionCollection("6.6.0")).     assertUnreleasedGradleProjectNames(asList("bugfix", "staged", "minor"), getVersionCollection("8.0.0")).     assertUnreleasedGradleProjectNames(asList("staged", "minor"), getVersionCollection("7.1.0")). }
false;public;0;14;;public void testCompareToAuthoritative() {     List<String> listOfVersions = asList("7.0.0", "7.0.1", "7.1.0", "7.1.1", "7.2.0", "7.3.0", "8.0.0").     List<Version> authoritativeReleasedVersions = Stream.of("7.0.0", "7.0.1", "7.1.0").map(Version::fromString).collect(Collectors.toList()).     VersionCollection vc = new VersionCollection(listOfVersions.stream().map(this::formatVersionToLine).collect(Collectors.toList()), Version.fromString("8.0.0")).     vc.compareToAuthoritative(authoritativeReleasedVersions). }
false;public;0;16;;public void testCompareToAuthoritativeUnreleasedActuallyReleased() {     List<String> listOfVersions = asList("7.0.0", "7.0.1", "7.1.0", "7.1.1", "7.2.0", "7.3.0", "8.0.0").     List<Version> authoritativeReleasedVersions = Stream.of("7.0.0", "7.0.1", "7.1.0", "7.1.1", "8.0.0").map(Version::fromString).collect(Collectors.toList()).     VersionCollection vc = new VersionCollection(listOfVersions.stream().map(this::formatVersionToLine).collect(Collectors.toList()), Version.fromString("8.0.0")).     expectedEx.expect(IllegalStateException.class).     expectedEx.expectMessage("but they are released").     vc.compareToAuthoritative(authoritativeReleasedVersions). }
false;public;0;15;;public void testCompareToAuthoritativeNotReallyRelesed() {     List<String> listOfVersions = asList("7.0.0", "7.0.1", "7.1.0", "7.1.1", "7.2.0", "7.3.0", "8.0.0").     List<Version> authoritativeReleasedVersions = Stream.of("7.0.0", "7.0.1").map(Version::fromString).collect(Collectors.toList()).     VersionCollection vc = new VersionCollection(listOfVersions.stream().map(this::formatVersionToLine).collect(Collectors.toList()), Version.fromString("8.0.0")).     expectedEx.expect(IllegalStateException.class).     expectedEx.expectMessage("not really released").     vc.compareToAuthoritative(authoritativeReleasedVersions). }
false;private;2;7;;private void assertUnreleasedGradleProjectNames(List<String> expectedNAmes, VersionCollection versionCollection) {     List<String> actualNames = new ArrayList<>().     versionCollection.forPreviousUnreleased(unreleasedVersion -> actualNames.add(unreleasedVersion.gradleProjectName)).     assertEquals(expectedNAmes, actualNames). }
false;private;2;7;;private void assertUnreleasedBranchNames(List<String> expectedBranches, VersionCollection versionCollection) {     List<String> actualBranches = new ArrayList<>().     versionCollection.forPreviousUnreleased(unreleasedVersionInfo -> actualBranches.add(unreleasedVersionInfo.branch)).     assertEquals(expectedBranches, actualBranches). }
false;private;1;3;;private String formatVersionToLine(final String version) {     return " public static final Version V_" + version.replaceAll("\\.", "_") + " ". }
false;private;2;8;;private void assertVersionsEquals(List<String> expected, List<Version> actual) {     assertEquals(expected.stream().map(Version::fromString).collect(Collectors.toList()), actual). }
false;private;1;8;;private VersionCollection getVersionCollection(String currentVersion) {     return new VersionCollection(sampleVersions.get(currentVersion).stream().map(this::formatVersionToLine).collect(Collectors.toList()), Version.fromString(currentVersion)). }
