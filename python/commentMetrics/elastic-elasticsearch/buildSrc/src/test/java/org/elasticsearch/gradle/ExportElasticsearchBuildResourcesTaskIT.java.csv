commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testUpToDateWithSourcesConfigured() {     GradleRunner.create().withProjectDir(getProjectDir(PROJECT_NAME)).withArguments("clean", "-s").withPluginClasspath().build().     BuildResult result = GradleRunner.create().withProjectDir(getProjectDir(PROJECT_NAME)).withArguments("buildResources", "-s", "-i").withPluginClasspath().build().     assertTaskSuccessful(result, ":buildResources").     assertBuildFileExists(result, PROJECT_NAME, "build-tools-exported/checkstyle.xml").     assertBuildFileExists(result, PROJECT_NAME, "build-tools-exported/checkstyle_suppressions.xml").     result = GradleRunner.create().withProjectDir(getProjectDir(PROJECT_NAME)).withArguments("buildResources", "-s", "-i").withPluginClasspath().build().     assertTaskUpToDate(result, ":buildResources").     assertBuildFileExists(result, PROJECT_NAME, "build-tools-exported/checkstyle.xml").     assertBuildFileExists(result, PROJECT_NAME, "build-tools-exported/checkstyle_suppressions.xml"). }
false;public;0;13;;public void testImplicitTaskDependencyCopy() {     BuildResult result = GradleRunner.create().withProjectDir(getProjectDir(PROJECT_NAME)).withArguments("clean", "sampleCopyAll", "-s", "-i").withPluginClasspath().build().     assertTaskSuccessful(result, ":buildResources").     assertTaskSuccessful(result, ":sampleCopyAll").     assertBuildFileExists(result, PROJECT_NAME, "sampleCopyAll/checkstyle.xml").     // This is a side effect of compile time reference     assertBuildFileExists(result, PROJECT_NAME, "sampleCopyAll/checkstyle_suppressions.xml"). }
false;public;0;11;;public void testImplicitTaskDependencyInputFileOfOther() {     BuildResult result = GradleRunner.create().withProjectDir(getProjectDir(PROJECT_NAME)).withArguments("clean", "sample", "-s", "-i").withPluginClasspath().build().     assertTaskSuccessful(result, ":sample").     assertBuildFileExists(result, PROJECT_NAME, "build-tools-exported/checkstyle.xml").     assertBuildFileExists(result, PROJECT_NAME, "build-tools-exported/checkstyle_suppressions.xml"). }
false;public;0;8;;public void testIncorrectUsage() {     BuildResult result = GradleRunner.create().withProjectDir(getProjectDir(PROJECT_NAME)).withArguments("noConfigAfterExecution", "-s", "-i").withPluginClasspath().buildAndFail().     assertOutputContains("buildResources can't be configured after the task ran"). }
