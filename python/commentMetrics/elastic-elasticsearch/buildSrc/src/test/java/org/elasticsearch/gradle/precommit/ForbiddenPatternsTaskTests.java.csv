commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testCheckInvalidPatternsWhenNoSourceFilesExist() throws Exception {     Project project = createProject().     ForbiddenPatternsTask task = createTask(project).     checkAndAssertTaskSuccessful(task). }
false;public;0;7;;public void testCheckInvalidPatternsWhenSourceFilesExistNoViolation() throws Exception {     Project project = createProject().     ForbiddenPatternsTask task = createTask(project).     writeSourceFile(project, "src/main/java/Foo.java", "public void bar() {}").     checkAndAssertTaskSuccessful(task). }
false;public;0;7;;public void testCheckInvalidPatternsWhenSourceFilesExistHavingTab() throws Exception {     Project project = createProject().     ForbiddenPatternsTask task = createTask(project).     writeSourceFile(project, "src/main/java/Bar.java", "\tpublic void bar() {}").     checkAndAssertTaskThrowsException(task). }
false;public;0;12;;public void testCheckInvalidPatternsWithCustomRule() throws Exception {     Map<String, String> rule = new HashMap<>().     rule.put("name", "TODO comments are not allowed").     rule.put("pattern", "\\/\\/.*(?i)TODO").     Project project = createProject().     ForbiddenPatternsTask task = createTask(project).     task.rule(rule).     writeSourceFile(project, "src/main/java/Moot.java", "GOOD LINE", "//todo", "// some stuff, toDo").     checkAndAssertTaskThrowsException(task). }
false;public;0;8;;public void testCheckInvalidPatternsWhenExcludingFiles() throws Exception {     Project project = createProject().     ForbiddenPatternsTask task = createTask(project).     task.exclude("**/*.java").     writeSourceFile(project, "src/main/java/FooBarMoot.java", "\t").     checkAndAssertTaskSuccessful(task). }
false;private;0;6;;private Project createProject() {     Project project = ProjectBuilder.builder().build().     project.getPlugins().apply(JavaPlugin.class).     return project. }
false;private;1;3;;private ForbiddenPatternsTask createTask(Project project) {     return project.getTasks().create("forbiddenPatterns", ForbiddenPatternsTask.class). }
false;private;2;3;;private ForbiddenPatternsTask createTask(Project project, String taskName) {     return project.getTasks().create(taskName, ForbiddenPatternsTask.class). }
false;private;3;8;;private void writeSourceFile(Project project, String name, String... lines) throws IOException {     File file = new File(project.getProjectDir(), name).     file.getParentFile().mkdirs().     file.createNewFile().     if (lines.length != 0)         Files.write(file.toPath(), Arrays.asList(lines), StandardCharsets.UTF_8). }
false;private;1;4;;private void checkAndAssertTaskSuccessful(ForbiddenPatternsTask task) throws IOException {     task.checkInvalidPatterns().     assertTaskSuccessful(task.getProject(), task.getName()). }
false;private;1;8;;private void checkAndAssertTaskThrowsException(ForbiddenPatternsTask task) throws IOException {     try {         task.checkInvalidPatterns().         fail("GradleException was expected to be thrown in this case!").     } catch (GradleException e) {         assertTrue(e.getMessage().startsWith("Found invalid patterns")).     } }
false;private;2;8;;private void assertTaskSuccessful(Project project, String fileName) throws IOException {     File outputMarker = new File(project.getBuildDir(), "markers/" + fileName).     assertTrue(outputMarker.exists()).     Optional<String> result = Files.readAllLines(outputMarker.toPath(), StandardCharsets.UTF_8).stream().findFirst().     assertTrue(result.isPresent()).     assertEquals("done", result.get()). }
