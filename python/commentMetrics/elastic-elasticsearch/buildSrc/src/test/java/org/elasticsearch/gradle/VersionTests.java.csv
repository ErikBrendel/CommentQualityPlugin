commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testVersionParsing() {     assertVersionEquals("7.0.1", 7, 0, 1).     assertVersionEquals("7.0.1-alpha2", 7, 0, 1).     assertVersionEquals("5.1.2-rc3", 5, 1, 2).     assertVersionEquals("6.1.2-SNAPSHOT", 6, 1, 2).     assertVersionEquals("6.1.2-beta1-SNAPSHOT", 6, 1, 2). }
false;public;0;11;;public void testCompareWithStringVersions() {     assertTrue("1.10.20 is not interpreted as before 2.0.0", Version.fromString("1.10.20").before("2.0.0")).     assertTrue("7.0.0-alpha1 should be equal to 7.0.0-alpha1", Version.fromString("7.0.0-alpha1").equals(Version.fromString("7.0.0-alpha1"))).     assertTrue("7.0.0-SNAPSHOT should be equal to 7.0.0-SNAPSHOT", Version.fromString("7.0.0-SNAPSHOT").equals(Version.fromString("7.0.0-SNAPSHOT"))). }
false;public;0;20;;public void testCollections() {     assertTrue(Arrays.asList(Version.fromString("5.2.0"), Version.fromString("5.2.1-SNAPSHOT"), Version.fromString("6.0.0"), Version.fromString("6.0.1"), Version.fromString("6.1.0")).containsAll(Arrays.asList(Version.fromString("6.0.1"), Version.fromString("5.2.1-SNAPSHOT")))).     Set<Version> versions = new HashSet<>().     versions.addAll(Arrays.asList(Version.fromString("5.2.0"), Version.fromString("5.2.1-SNAPSHOT"), Version.fromString("6.0.0"), Version.fromString("6.0.1"), Version.fromString("6.1.0"))).     Set<Version> subset = new HashSet<>().     subset.addAll(Arrays.asList(Version.fromString("6.0.1"), Version.fromString("5.2.1-SNAPSHOT"))).     assertTrue(versions.containsAll(subset)). }
false;public;0;3;;public void testToString() {     assertEquals("7.0.1", new Version(7, 0, 1).toString()). }
false;public;0;5;;public void testCompareVersions() {     assertEquals(0, new Version(7, 0, 0).compareTo(new Version(7, 0, 0))). }
false;public;0;5;;public void testExceptionEmpty() {     expectedEx.expect(IllegalArgumentException.class).     expectedEx.expectMessage("Invalid version format").     Version.fromString(""). }
false;public;0;5;;public void testExceptionSyntax() {     expectedEx.expect(IllegalArgumentException.class).     expectedEx.expectMessage("Invalid version format").     Version.fromString("foo.bar.baz"). }
false;private;2;3;;private void assertOrder(Version smaller, Version bigger) {     assertEquals(smaller + " should be smaller than " + bigger, -1, smaller.compareTo(bigger)). }
false;private;4;6;;private void assertVersionEquals(String stringVersion, int major, int minor, int revision) {     Version version = Version.fromString(stringVersion).     assertEquals(major, version.getMajor()).     assertEquals(minor, version.getMinor()).     assertEquals(revision, version.getRevision()). }
