commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@BeforeClass public static void assertProjectsExist() {     assertEquals(EXAMPLE_PLUGINS, EXAMPLE_PLUGINS.stream().filter(File::exists).collect(Collectors.toList())). }
false;public,static;0;7;;@ParametersFactory public static Iterable<Object[]> parameters() {     return EXAMPLE_PLUGINS.stream().map(each -> new Object[] { each }).collect(Collectors.toList()). }
false;public;0;21;;public void testCurrentExamplePlugin() throws IOException {     FileUtils.copyDirectory(examplePlugin, tmpDir.getRoot()).     // just get rid of deprecation warnings     Files.write(getTempPath("settings.gradle"), "enableFeaturePreview('STABLE_PUBLISHING')\n".getBytes(StandardCharsets.UTF_8)).     adaptBuildScriptForTest().     Files.write(tmpDir.newFile("NOTICE.txt").toPath(), "dummy test notice".getBytes(StandardCharsets.UTF_8)).     GradleRunner.create().withProjectDir(tmpDir.getRoot()).withArguments("clean", "check", "-s", "-i", "--warning-mode=all", "--scan").withPluginClasspath().build(). }
false;private;0;45;;private void adaptBuildScriptForTest() throws IOException {     // Add the local repo as a build script URL so we can pull in build-tools and apply the plugin under test     // we need to specify the exact version of build-tools because gradle automatically adds its plugin portal     // which appears to mirror jcenter, opening us up to pulling a "later" version of build-tools     writeBuildScript("buildscript {\n" + "    repositories {\n" + "        maven {\n" + "            url = '" + getLocalTestRepoPath() + "'\n" + "        }\n" + "    }\n" + "    dependencies {\n" + "        classpath \"org.elasticsearch.gradle:build-tools:" + BUILD_TOOLS_VERSION + "\"\n" + "    }\n" + "}\n").     // get the original file     Files.readAllLines(getTempPath("build.gradle"), StandardCharsets.UTF_8).stream().map(line -> line + "\n").forEach(this::writeBuildScript).     // Add a repositories section to be able to resolve dependencies     String luceneSnapshotRepo = "".     String luceneSnapshotRevision = System.getProperty("test.lucene-snapshot-revision").     if (luceneSnapshotRepo != null) {         luceneSnapshotRepo = "  maven {\n" + "    url \"http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/" + luceneSnapshotRevision + "\"\n" + "  }\n".     }     writeBuildScript("\n" + "repositories {\n" + "  maven {\n" + "    url \"" + getLocalTestRepoPath() + "\"\n" + "  }\n" + "  flatDir {\n" + "    dir '" + getLocalTestDownloadsPath() + "'\n" + "  }\n" + luceneSnapshotRepo + "}\n").     Files.delete(getTempPath("build.gradle")).     Files.move(getTempPath("build.gradle.new"), getTempPath("build.gradle")).     System.err.print("Generated build script is:").     Files.readAllLines(getTempPath("build.gradle")).forEach(System.err::println). }
false;private;1;3;;private Path getTempPath(String fileName) {     return new File(tmpDir.getRoot(), fileName).toPath(). }
false;private;1;12;;private Path writeBuildScript(String script) {     try {         Path path = getTempPath("build.gradle.new").         return Files.write(path, script.getBytes(StandardCharsets.UTF_8), Files.exists(path) ? StandardOpenOption.APPEND : StandardOpenOption.CREATE_NEW).     } catch (IOException e) {         throw new RuntimeException(e).     } }
