commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Before public void setUp() { }
false;public;0;13;;public void testInnerClasses() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":no_tests_in_inner_classes:testingConventions", "-i", "-s").     BuildResult result = runner.buildAndFail().     assertOutputContains(result.getOutput(), "Test classes implemented by inner classes will not run:", "  * org.elasticsearch.gradle.testkit.NastyInnerClasses$LooksLikeATestWithoutNamingConvention1", "  * org.elasticsearch.gradle.testkit.NastyInnerClasses$LooksLikeATestWithoutNamingConvention2", "  * org.elasticsearch.gradle.testkit.NastyInnerClasses$LooksLikeATestWithoutNamingConvention3", "  * org.elasticsearch.gradle.testkit.NastyInnerClasses$NamingConventionIT", "  * org.elasticsearch.gradle.testkit.NastyInnerClasses$NamingConventionTests"). }
false;public;0;12;;public void testNamingConvention() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":incorrect_naming_conventions:testingConventions", "-i", "-s").     BuildResult result = runner.buildAndFail().     assertOutputContains(result.getOutput(), "Seem like test classes but don't match naming convention:", "  * org.elasticsearch.gradle.testkit.LooksLikeATestWithoutNamingConvention1", "  * org.elasticsearch.gradle.testkit.LooksLikeATestWithoutNamingConvention2", "  * org.elasticsearch.gradle.testkit.LooksLikeATestWithoutNamingConvention3").     assertOutputDoesNotContain(result.getOutput(), "LooksLikeTestsButAbstract"). }
false;public;0;9;;public void testNoEmptyTasks() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":empty_test_task:testingConventions", "-i", "-s").     BuildResult result = runner.buildAndFail().     assertOutputContains(result.getOutput(), "Expected at least one test class included in task :empty_test_task:emptyTest, but found none.", "Expected at least one test class included in task :empty_test_task:emptyTestRandomized, but found none."). }
false;public;0;10;;public void testAllTestTasksIncluded() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":all_classes_in_tasks:testingConventions", "-i", "-s").     BuildResult result = runner.buildAndFail().     assertOutputContains(result.getOutput(), "Test classes are not included in any enabled task (:all_classes_in_tasks:emptyTestRandomized):", "  * org.elasticsearch.gradle.testkit.NamingConventionIT", "  * org.elasticsearch.gradle.testkit.NamingConventionTests"). }
false;public;0;13;;public void testTaskNotImplementBaseClass() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":not_implementing_base:testingConventions", "-i", "-s").     BuildResult result = runner.buildAndFail().     assertOutputContains(result.getOutput(), "Tests classes with suffix `IT` should extend org.elasticsearch.gradle.testkit.Integration but the following classes do not:", "  * org.elasticsearch.gradle.testkit.NamingConventionIT", "  * org.elasticsearch.gradle.testkit.NamingConventionMissmatchIT", "Tests classes with suffix `Tests` should extend org.elasticsearch.gradle.testkit.Unit but the following classes do not:", "  * org.elasticsearch.gradle.testkit.NamingConventionMissmatchTests", "  * org.elasticsearch.gradle.testkit.NamingConventionTests"). }
false;public;0;6;;public void testValidSetupWithoutBaseClass() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":valid_setup_no_base:testingConventions", "-i", "-s").     BuildResult result = runner.build().     assertTaskSuccessful(result, ":valid_setup_no_base:testingConventions"). }
false;public;0;6;;public void testValidSetupWithBaseClass() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":valid_setup_with_base:testingConventions", "-i", "-s").     BuildResult result = runner.build().     assertTaskSuccessful(result, ":valid_setup_with_base:testingConventions"). }
false;public;0;10;;public void testTestsInMain() {     GradleRunner runner = getGradleRunner("testingConventions").withArguments("clean", ":tests_in_main:testingConventions", "-i", "-s").     BuildResult result = runner.buildAndFail().     assertOutputContains(result.getOutput(), "Classes matching the test naming convention should be in test not main:", "  * NamingConventionIT", "  * NamingConventionTests"). }
