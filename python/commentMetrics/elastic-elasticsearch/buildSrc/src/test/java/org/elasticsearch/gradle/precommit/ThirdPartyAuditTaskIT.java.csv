commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     // Build the sample jars     getGradleRunner("thirdPartyAudit").withArguments("build", "-s").build(). }
false;public;0;9;;public void testElasticsearchIgnored() {     BuildResult result = getGradleRunner("thirdPartyAudit").withArguments("clean", "empty", "-s", "-PcompileOnlyGroup=elasticsearch.gradle:broken-log4j", "-PcompileOnlyVersion=0.0.1", "-PcompileGroup=elasticsearch.gradle:dummy-io", "-PcompileVersion=0.0.1").build().     assertTaskNoSource(result, ":empty"). }
false;public;0;28;;public void testWithEmptyRules() {     BuildResult result = getGradleRunner("thirdPartyAudit").withArguments("clean", "empty", "-s", "-PcompileOnlyGroup=other.gradle:broken-log4j", "-PcompileOnlyVersion=0.0.1", "-PcompileGroup=other.gradle:dummy-io", "-PcompileVersion=0.0.1").build().     assertTaskSuccessful(result, ":empty").     result = getGradleRunner("thirdPartyAudit").withArguments("empty", "-s", "-PcompileOnlyGroup=other.gradle:broken-log4j", "-PcompileOnlyVersion=0.0.1", "-PcompileGroup=other.gradle:dummy-io", "-PcompileVersion=0.0.1").build().     assertTaskUpToDate(result, ":empty").     result = getGradleRunner("thirdPartyAudit").withArguments("empty", "-s", "-PcompileOnlyGroup=other.gradle:broken-log4j", "-PcompileOnlyVersion=0.0.1", "-PcompileGroup=other.gradle:dummy-io", "-PcompileVersion=0.0.2").build().     assertTaskSuccessful(result, ":empty"). }
false;public;0;16;;public void testViolationFoundAndCompileOnlyIgnored() {     BuildResult result = getGradleRunner("thirdPartyAudit").withArguments("clean", "absurd", "-s", "-PcompileOnlyGroup=other.gradle:broken-log4j", "-PcompileOnlyVersion=0.0.1", "-PcompileGroup=other.gradle:dummy-io", "-PcompileVersion=0.0.1").buildAndFail().     assertTaskFailed(result, ":absurd").     assertOutputContains(result.getOutput(), "Classes with violations:", "  * TestingIO", "> Audit of third party dependencies failed").     assertOutputDoesNotContain(result.getOutput(), "Missing classes:"). }
false;public;0;16;;public void testClassNotFoundAndCompileOnlyIgnored() {     BuildResult result = getGradleRunner("thirdPartyAudit").withArguments("clean", "absurd", "-s", "-PcompileGroup=other.gradle:broken-log4j", "-PcompileVersion=0.0.1", "-PcompileOnlyGroup=other.gradle:dummy-io", "-PcompileOnlyVersion=0.0.1").buildAndFail().     assertTaskFailed(result, ":absurd").     assertOutputContains(result.getOutput(), "Missing classes:", "  * org.apache.logging.log4j.LogManager", "> Audit of third party dependencies failed").     assertOutputDoesNotContain(result.getOutput(), "Classes with violations:"). }
false;public;0;16;;public void testJarHellWithJDK() {     BuildResult result = getGradleRunner("thirdPartyAudit").withArguments("clean", "absurd", "-s", "-PcompileGroup=other.gradle:jarhellJdk", "-PcompileVersion=0.0.1", "-PcompileOnlyGroup=other.gradle:dummy-io", "-PcompileOnlyVersion=0.0.1").buildAndFail().     assertTaskFailed(result, ":absurd").     assertOutputContains(result.getOutput(), "> Audit of third party dependencies failed:", "   Jar Hell with the JDK:", "    * java.lang.String").     assertOutputDoesNotContain(result.getOutput(), "Classes with violations:"). }
false;public;0;9;;public void testElasticsearchIgnoredWithViolations() {     BuildResult result = getGradleRunner("thirdPartyAudit").withArguments("clean", "absurd", "-s", "-PcompileOnlyGroup=elasticsearch.gradle:broken-log4j", "-PcompileOnlyVersion=0.0.1", "-PcompileGroup=elasticsearch.gradle:dummy-io", "-PcompileVersion=0.0.1").build().     assertTaskNoSource(result, ":absurd"). }
