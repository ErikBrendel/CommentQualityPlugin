commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testPluginCanBeApplied() {     BuildResult result = getGradleRunner("elasticsearch.build").withArguments("hello", "-s").build().     assertTaskSuccessful(result, ":hello").     assertOutputContains("build plugin can be applied"). }
false;public;0;6;;public void testCheckTask() {     BuildResult result = getGradleRunner("elasticsearch.build").withArguments("check", "assemble", "-s", "-Dlocal.repo.path=" + getLocalTestRepoPath()).build().     assertTaskSuccessful(result, ":check"). }
false;public;0;25;;public void testLicenseAndNotice() throws IOException {     BuildResult result = getGradleRunner("elasticsearch.build").withArguments("clean", "assemble", "-s", "-Dlocal.repo.path=" + getLocalTestRepoPath()).build().     assertTaskSuccessful(result, ":assemble").     assertBuildFileExists(result, "elasticsearch.build", "distributions/elasticsearch.build.jar").     try (ZipFile zipFile = new ZipFile(new File(getBuildDir("elasticsearch.build"), "distributions/elasticsearch.build.jar"))) {         ZipEntry licenseEntry = zipFile.getEntry("META-INF/LICENSE.txt").         ZipEntry noticeEntry = zipFile.getEntry("META-INF/NOTICE.txt").         assertNotNull("Jar does not have META-INF/LICENSE.txt", licenseEntry).         assertNotNull("Jar does not have META-INF/NOTICE.txt", noticeEntry).         try (InputStream license = zipFile.getInputStream(licenseEntry).             InputStream notice = zipFile.getInputStream(noticeEntry)) {             assertEquals("this is a test license file", IOUtils.toString(license, StandardCharsets.UTF_8.name())).             assertEquals("this is a test notice file", IOUtils.toString(notice, StandardCharsets.UTF_8.name())).         }     } }
