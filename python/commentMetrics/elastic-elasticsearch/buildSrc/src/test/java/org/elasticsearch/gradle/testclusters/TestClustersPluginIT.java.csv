commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testListClusters() {     BuildResult result = getTestClustersRunner("listTestClusters").build().     assertTaskSuccessful(result, ":listTestClusters").     assertOutputContains(result.getOutput(), "   * myTestCluster:"). }
false;public;0;5;;public void testUseClusterByOne() {     BuildResult result = getTestClustersRunner(":user1").build().     assertTaskSuccessful(result, ":user1").     assertStartedAndStoppedOnce(result). }
false;public;0;5;;public void testUseClusterByOneWithDryRun() {     BuildResult result = getTestClustersRunner("--dry-run", ":user1").build().     assertNull(result.task(":user1")).     assertNotStarted(result). }
false;public;0;5;;public void testUseClusterByTwo() {     BuildResult result = getTestClustersRunner(":user1", ":user2").build().     assertTaskSuccessful(result, ":user1", ":user2").     assertStartedAndStoppedOnce(result). }
false;public;0;8;;public void testUseClusterByUpToDateTask() {     // Run it once, ignoring the result and again to make sure it's considered up to date.     // Gradle randomly considers tasks without inputs and outputs as as up-to-date or success on the first run     getTestClustersRunner(":upToDate1", ":upToDate2").build().     BuildResult result = getTestClustersRunner(":upToDate1", ":upToDate2").build().     assertTaskUpToDate(result, ":upToDate1", ":upToDate2").     assertNotStarted(result). }
false;public;0;5;;public void testUseClusterBySkippedTask() {     BuildResult result = getTestClustersRunner(":skipped1", ":skipped2").build().     assertTaskSkipped(result, ":skipped1", ":skipped2").     assertNotStarted(result). }
false;public;0;11;;public void testUseClusterBySkippedAndWorkingTask() {     BuildResult result = getTestClustersRunner("skipped1", "user1").build().     assertTaskSkipped(result, ":skipped1").     assertTaskSuccessful(result, ":user1").     assertOutputContains(result.getOutput(), "> Task :user1", "Starting `node{::myTestCluster}`", "Stopping `node{::myTestCluster}`"). }
false;public;0;21;;public void testMultiProject() {     BuildResult result = getTestClustersRunner("user1", "user2", "-s", "-i", "--parallel", "-Dlocal.repo.path=" + getLocalTestRepoPath()).build().     assertTaskSuccessful(result, ":user1", ":user2", ":alpha:user1", ":alpha:user2", ":bravo:user1", ":bravo:user2").     assertStartedAndStoppedOnce(result).     assertOutputOnlyOnce(result.getOutput(), "Starting `node{:alpha:myTestCluster}`", "Stopping `node{::myTestCluster}`").     assertOutputOnlyOnce(result.getOutput(), "Starting `node{::myTestCluster}`", "Stopping `node{:bravo:myTestCluster}`"). }
false;public;0;14;;public void testIncremental() {     BuildResult result = getTestClustersRunner("clean", ":user1").build().     assertTaskSuccessful(result, ":user1").     assertStartedAndStoppedOnce(result).     result = getTestClustersRunner(":user1").build().     assertTaskSuccessful(result, ":user1").     assertStartedAndStoppedOnce(result).     result = getTestClustersRunner("clean", ":user1").build().     assertTaskSuccessful(result, ":user1").     assertStartedAndStoppedOnce(result).     assertStartedAndStoppedOnce(result). }
false;public;0;10;;public void testUseClusterByFailingOne() {     BuildResult result = getTestClustersRunner(":itAlwaysFails").buildAndFail().     assertTaskFailed(result, ":itAlwaysFails").     assertStartedAndStoppedOnce(result).     assertOutputContains(result.getOutput(), "Stopping `node{::myTestCluster}`, tailLogs: true", "Execution failed for task ':itAlwaysFails'."). }
false;public;0;11;;public void testUseClusterByFailingDependency() {     BuildResult result = getTestClustersRunner(":dependsOnFailed").buildAndFail().     assertTaskFailed(result, ":itAlwaysFails").     assertNull(result.task(":dependsOnFailed")).     assertStartedAndStoppedOnce(result).     assertOutputContains(result.getOutput(), "Stopping `node{::myTestCluster}`, tailLogs: true", "Execution failed for task ':itAlwaysFails'."). }
false;public;0;8;;public void testConfigurationLocked() {     BuildResult result = getTestClustersRunner(":illegalConfigAlter").buildAndFail().     assertTaskFailed(result, ":illegalConfigAlter").     assertOutputContains(result.getOutput(), "Configuration can not be altered, already locked"). }
false;private;1;7;;private void assertNotStarted(BuildResult result) {     assertOutputDoesNotContain(result.getOutput(), "Starting ", "Stopping "). }
false;private;1;10;;private GradleRunner getTestClustersRunner(String... tasks) {     String[] arguments = Arrays.copyOf(tasks, tasks.length + 3).     arguments[tasks.length] = "-s".     arguments[tasks.length + 1] = "-i".     arguments[tasks.length + 2] = "-Dlocal.repo.path=" + getLocalTestRepoPath().     return GradleRunner.create().withProjectDir(getProjectDir("testclusters")).withArguments(arguments).withPluginClasspath(). }
false;private;1;7;;private void assertStartedAndStoppedOnce(BuildResult result) {     assertOutputOnlyOnce(result.getOutput(), "Starting `node{::myTestCluster}`", "Stopping `node{::myTestCluster}`"). }
