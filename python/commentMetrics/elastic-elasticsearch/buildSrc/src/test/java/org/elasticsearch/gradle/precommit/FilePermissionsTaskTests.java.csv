commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testCheckPermissionsWhenAnExecutableFileExists() throws Exception {     RandomizedTest.assumeFalse("Functionality is Unix specific", Os.isFamily(Os.FAMILY_WINDOWS)).     Project project = createProject().     FilePermissionsTask filePermissionsTask = createTask(project).     File file = new File(project.getProjectDir(), "src/main/java/Code.java").     file.getParentFile().mkdirs().     file.createNewFile().     file.setExecutable(true).     try {         filePermissionsTask.checkInvalidPermissions().         Assert.fail("the check should have failed because of the executable file permission").     } catch (GradleException e) {         assertTrue(e.getMessage().startsWith("Found invalid file permissions")).     }     file.delete(). }
false;public;0;13;;public void testCheckPermissionsWhenNoFileExists() throws Exception {     RandomizedTest.assumeFalse("Functionality is Unix specific", Os.isFamily(Os.FAMILY_WINDOWS)).     Project project = createProject().     FilePermissionsTask filePermissionsTask = createTask(project).     filePermissionsTask.checkInvalidPermissions().     File outputMarker = new File(project.getBuildDir(), "markers/filePermissions").     List<String> result = Files.readAllLines(outputMarker.toPath(), Charset.forName("UTF-8")).     assertEquals("done", result.get(0)). }
false;public;0;19;;public void testCheckPermissionsWhenNoExecutableFileExists() throws Exception {     RandomizedTest.assumeFalse("Functionality is Unix specific", Os.isFamily(Os.FAMILY_WINDOWS)).     Project project = createProject().     FilePermissionsTask filePermissionsTask = createTask(project).     File file = new File(project.getProjectDir(), "src/main/java/Code.java").     file.getParentFile().mkdirs().     file.createNewFile().     filePermissionsTask.checkInvalidPermissions().     File outputMarker = new File(project.getBuildDir(), "markers/filePermissions").     List<String> result = Files.readAllLines(outputMarker.toPath(), Charset.forName("UTF-8")).     assertEquals("done", result.get(0)).     file.delete(). }
false;private;0;5;;private Project createProject() {     Project project = ProjectBuilder.builder().build().     project.getPlugins().apply(JavaPlugin.class).     return project. }
false;private;1;3;;private FilePermissionsTask createTask(Project project) {     return project.getTasks().create("filePermissionsTask", FilePermissionsTask.class). }
