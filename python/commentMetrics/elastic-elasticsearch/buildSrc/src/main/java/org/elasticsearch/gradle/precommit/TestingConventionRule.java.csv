commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getSuffix() {     return suffix. }
true;public;0;3;/**  * Alias for @{link getSuffix} as Gradle requires a name property  */ ;/**  * Alias for @{link getSuffix} as Gradle requires a name property  */ public String getName() {     return suffix. }
false;public;1;3;;public void baseClass(String clazz) {     baseClasses.add(clazz). }
false;public;1;4;;public void setBaseClasses(Collection<String> baseClasses) {     this.baseClasses.clear().     this.baseClasses.addAll(baseClasses). }
false;public;1;3;;public void taskName(Pattern expression) {     taskNames.add(expression). }
false;public;1;3;;public void taskName(String expression) {     taskNames.add(Pattern.compile(expression)). }
false;public;1;4;;public void setTaskNames(Collection<Pattern> expressions) {     taskNames.clear().     taskNames.addAll(expressions). }
false;public;0;3;;public Set<String> getBaseClasses() {     return baseClasses. }
false;public;0;3;;public Set<Pattern> getTaskNames() {     return taskNames. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TestingConventionRule that = (TestingConventionRule) o.     return Objects.equals(suffix, that.suffix). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(suffix). }
