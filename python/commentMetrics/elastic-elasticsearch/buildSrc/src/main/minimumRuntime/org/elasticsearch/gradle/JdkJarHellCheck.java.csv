commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {     String entry = root.relativize(file).toString().replace('\\', '/').     if (entry.endsWith(".class") && entry.endsWith("module-info.class") == false) {         if (ext.getResource(entry) != null) {             detected.add(entry.replace("/", ".").replace(".class", "")).         }     }     return FileVisitResult.CONTINUE. }
false;private;1;23;;private void scanForJDKJarHell(Path root) throws IOException {     // system.parent = extensions loader.     // note: for jigsaw, this evilness will need modifications (e.g. use jrt filesystem!)     ClassLoader ext = ClassLoader.getSystemClassLoader().getParent().     assert ext != null.     Files.walkFileTree(root, new SimpleFileVisitor<Path>() {          @Override         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {             String entry = root.relativize(file).toString().replace('\\', '/').             if (entry.endsWith(".class") && entry.endsWith("module-info.class") == false) {                 if (ext.getResource(entry) != null) {                     detected.add(entry.replace("/", ".").replace(".class", "")).                 }             }             return FileVisitResult.CONTINUE.         }     }). }
false;public;0;3;;public Set<String> getDetected() {     return Collections.unmodifiableSet(detected). }
false;public,static;1;16;;public static void main(String[] argv) throws IOException {     JdkJarHellCheck checker = new JdkJarHellCheck().     for (String location : argv) {         Path path = Paths.get(location).         if (Files.exists(path) == false) {             throw new IllegalArgumentException("Path does not exist: " + path).         }         checker.scanForJDKJarHell(path).     }     if (checker.getDetected().isEmpty()) {         System.exit(0).     } else {         checker.getDetected().forEach(System.out::println).         System.exit(1).     } }
