commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static ExecResult exec(Project project, Action<ExecSpec> action) {     return genericExec(project, project::exec, action). }
false;public,static;2;3;;public static ExecResult javaexec(Project project, Action<JavaExecSpec> action) {     return genericExec(project, project::javaexec, action). }
false;private,static;3;28;;private static <T extends BaseExecSpec> ExecResult genericExec(Project project, Function<Action<T>, ExecResult> function, Action<T> action) {     if (project.getLogger().isInfoEnabled()) {         return function.apply(action).     }     ByteArrayOutputStream output = new ByteArrayOutputStream().     ByteArrayOutputStream error = new ByteArrayOutputStream().     try {         return function.apply(spec -> {             spec.setStandardOutput(output).             spec.setErrorOutput(error).             action.execute(spec).         }).     } catch (Exception e) {         try {             project.getLogger().error("Standard output:").             project.getLogger().error(output.toString("UTF-8")).             project.getLogger().error("Standard error:").             project.getLogger().error(error.toString("UTF-8")).         } catch (UnsupportedEncodingException ue) {             throw new GradleException("Failed to read exec output", ue).         }         throw e.     } }
