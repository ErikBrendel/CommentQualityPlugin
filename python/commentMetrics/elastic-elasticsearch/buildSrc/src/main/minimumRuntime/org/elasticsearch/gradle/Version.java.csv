commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;6;;private static int parseSuffixNumber(String substring) {     if (substring.isEmpty()) {         throw new IllegalArgumentException("Invalid suffix, must contain a number e.x. alpha2").     }     return Integer.parseInt(substring). }
false;public,static;1;15;;public static Version fromString(final String s) {     Objects.requireNonNull(s).     Matcher matcher = pattern.matcher(s).     if (matcher.matches() == false) {         throw new IllegalArgumentException("Invalid version format: '" + s + "'. Should be major.minor.revision[-(alpha|beta|rc)Number][-SNAPSHOT]").     }     return new Version(Integer.parseInt(matcher.group(1)), parseSuffixNumber(matcher.group(2)), parseSuffixNumber(matcher.group(3))). }
false;public;0;4;;@Override public String toString() {     return String.valueOf(getMajor()) + "." + String.valueOf(getMinor()) + "." + String.valueOf(getRevision()). }
false;public;1;3;;public boolean before(Version compareTo) {     return id < compareTo.getId(). }
false;public;1;3;;public boolean before(String compareTo) {     return before(fromString(compareTo)). }
false;public;1;3;;public boolean onOrBefore(Version compareTo) {     return id <= compareTo.getId(). }
false;public;1;3;;public boolean onOrBefore(String compareTo) {     return onOrBefore(fromString(compareTo)). }
false;public;1;3;;public boolean onOrAfter(Version compareTo) {     return id >= compareTo.getId(). }
false;public;1;3;;public boolean onOrAfter(String compareTo) {     return onOrAfter(fromString(compareTo)). }
false;public;1;3;;public boolean after(Version compareTo) {     return id > compareTo.getId(). }
false;public;1;3;;public boolean after(String compareTo) {     return after(fromString(compareTo)). }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Version version = (Version) o.     return major == version.major && minor == version.minor && revision == version.revision. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(major, minor, revision, id). }
false;public;0;3;;public int getMajor() {     return major. }
false;public;0;3;;public int getMinor() {     return minor. }
false;public;0;3;;public int getRevision() {     return revision. }
false;protected;0;3;;protected int getId() {     return id. }
false;public;1;4;;@Override public int compareTo(Version other) {     return Integer.compare(getId(), other.getId()). }
