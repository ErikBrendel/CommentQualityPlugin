commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() throws Exception {     pubKeyPath = getDataPath(TestUtils.PUBLIC_KEY_RESOURCE).     priKeyPath = getDataPath(TestUtils.PRIVATE_KEY_RESOURCE). }
false;protected;0;4;;@Override protected Command newCommand() {     return new LicenseGeneratorTool(). }
false;public;0;24;;public void testMissingKeyPaths() throws Exception {     Path pub = createTempDir().resolve("pub").     Path pri = createTempDir().resolve("pri").     UserException e = expectThrows(UserException.class, () -> execute("--publicKeyPath", pub.toString(), "--privateKeyPath", pri.toString())).     assertTrue(e.getMessage(), e.getMessage().contains("pri does not exist")).     assertEquals(ExitCodes.USAGE, e.exitCode).     Files.createFile(pri).     e = expectThrows(UserException.class, () -> execute("--publicKeyPath", pub.toString(), "--privateKeyPath", pri.toString())).     assertTrue(e.getMessage(), e.getMessage().contains("pub does not exist")).     assertEquals(ExitCodes.USAGE, e.exitCode). }
false;public;0;13;;public void testMissingLicenseSpec() throws Exception {     UserException e = expectThrows(UserException.class, () -> execute("--publicKeyPath", pubKeyPath.toString(), "--privateKeyPath", priKeyPath.toString())).     assertTrue(e.getMessage(), e.getMessage().contains("Must specify either --license or --licenseFile")).     assertEquals(ExitCodes.USAGE, e.exitCode). }
false;public;0;15;;public void testLicenseSpecString() throws Exception {     TestUtils.LicenseSpec inputLicenseSpec = TestUtils.generateRandomLicenseSpec(License.VERSION_CURRENT).     String licenseSpecString = TestUtils.generateLicenseSpecString(inputLicenseSpec).     String output = execute("--publicKeyPath", pubKeyPath.toString(), "--privateKeyPath", priKeyPath.toString(), "--license", licenseSpecString).     final BytesArray bytes = new BytesArray(output.getBytes(StandardCharsets.UTF_8)).     License outputLicense = License.fromSource(bytes, XContentType.JSON).     TestUtils.assertLicenseSpec(inputLicenseSpec, outputLicense). }
false;public;0;17;;public void testLicenseSpecFile() throws Exception {     TestUtils.LicenseSpec inputLicenseSpec = TestUtils.generateRandomLicenseSpec(License.VERSION_CURRENT).     String licenseSpecString = TestUtils.generateLicenseSpecString(inputLicenseSpec).     Path licenseSpecFile = createTempFile().     Files.write(licenseSpecFile, licenseSpecString.getBytes(StandardCharsets.UTF_8)).     String output = execute("--publicKeyPath", pubKeyPath.toString(), "--privateKeyPath", priKeyPath.toString(), "--licenseFile", licenseSpecFile.toString()).     final BytesArray bytes = new BytesArray(output.getBytes(StandardCharsets.UTF_8)).     License outputLicense = License.fromSource(bytes, XContentType.JSON).     TestUtils.assertLicenseSpec(inputLicenseSpec, outputLicense). }
