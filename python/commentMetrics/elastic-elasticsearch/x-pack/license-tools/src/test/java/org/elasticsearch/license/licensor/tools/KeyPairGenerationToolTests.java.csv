commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Command newCommand() {     return new KeyPairGeneratorTool(). }
false;public;0;22;;public void testMissingKeyPaths() throws Exception {     Path exists = createTempFile("", "existing").     Path dne = createTempDir().resolve("dne").     UserException e = expectThrows(UserException.class, () -> execute("--publicKeyPath", exists.toString(), "--privateKeyPath", dne.toString())).     assertThat(e.getMessage(), containsString("existing")).     assertEquals(ExitCodes.USAGE, e.exitCode).     e = expectThrows(UserException.class, () -> execute("--publicKeyPath", dne.toString(), "--privateKeyPath", exists.toString())).     assertThat(e.getMessage(), containsString("existing")).     assertEquals(ExitCodes.USAGE, e.exitCode). }
false;public;0;13;;public void testTool() throws Exception {     Path keysDir = createTempDir().     Path publicKeyFilePath = keysDir.resolve("public").     Path privateKeyFilePath = keysDir.resolve("private").     execute("--publicKeyPath", publicKeyFilePath.toString(), "--privateKeyPath", privateKeyFilePath.toString()).     assertTrue(publicKeyFilePath.toString(), Files.exists(publicKeyFilePath)).     assertTrue(privateKeyFilePath.toString(), Files.exists(privateKeyFilePath)). }
