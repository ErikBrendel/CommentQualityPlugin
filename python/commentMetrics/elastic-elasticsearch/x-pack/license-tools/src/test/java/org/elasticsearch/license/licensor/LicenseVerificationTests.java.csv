commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() throws Exception {     pubKeyPath = getDataPath("/public.key").     priKeyPath = getDataPath("/private.key"). }
false;public;0;5;;@After public void cleanUp() {     pubKeyPath = null.     priKeyPath = null. }
false;public;0;6;;public void testGeneratedLicenses() throws Exception {     final TimeValue fortyEightHours = TimeValue.timeValueHours(2 * 24).     final License license = TestUtils.generateSignedLicense(fortyEightHours, pubKeyPath, priKeyPath).     assertTrue(LicenseVerifier.verifyLicense(license, Files.readAllBytes(pubKeyPath))). }
false;public;0;12;;public void testLicenseTampering() throws Exception {     final TimeValue twoHours = TimeValue.timeValueHours(2).     License license = TestUtils.generateSignedLicense(twoHours, pubKeyPath, priKeyPath).     final License tamperedLicense = License.builder().fromLicenseSpec(license, license.signature()).expiryDate(license.expiryDate() + 10 * 24 * 60 * 60 * 1000L).validate().build().     assertFalse(LicenseVerifier.verifyLicense(tamperedLicense, Files.readAllBytes(pubKeyPath))). }
false;public;0;6;;public void testRandomLicenseVerification() throws Exception {     TestUtils.LicenseSpec licenseSpec = TestUtils.generateRandomLicenseSpec(randomIntBetween(License.VERSION_START, License.VERSION_CURRENT)).     License generatedLicense = generateSignedLicense(licenseSpec, pubKeyPath, priKeyPath).     assertTrue(LicenseVerifier.verifyLicense(generatedLicense, Files.readAllBytes(pubKeyPath))). }
false;private,static;3;25;;private static License generateSignedLicense(TestUtils.LicenseSpec spec, Path pubKeyPath, Path priKeyPath) throws Exception {     LicenseSigner signer = new LicenseSigner(priKeyPath, pubKeyPath).     License.Builder builder = License.builder().uid(spec.uid).feature(spec.feature).type(spec.type).subscriptionType(spec.subscriptionType).issuedTo(spec.issuedTo).issuer(spec.issuer).maxNodes(spec.maxNodes).     if (spec.expiryDate != null) {         builder.expiryDate(DateUtils.endOfTheDay(spec.expiryDate)).     } else {         builder.expiryDate(spec.expiryDateInMillis).     }     if (spec.issueDate != null) {         builder.issueDate(DateUtils.beginningOfTheDay(spec.issueDate)).     } else {         builder.issueDate(spec.issueDateInMillis).     }     builder.version(spec.version).     return signer.sign(builder.build()). }
