# id;timestamp;commentText;codeText;commentWords;codeWords
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1524684173;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1526449283;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1529687475;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1531179852;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1534176840;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1539796943;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1541624883;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("xpack.security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("xpack.security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,xpack,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1544519590;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void deleteUsers() throws Exception;1550481268;Deletes users after every test just in case any test adds any.;@After_    public void deleteUsers() throws Exception {_        ClientYamlTestResponse response = getAdminExecutionContext().callApi("security.get_user", emptyMap(), emptyList(),_                emptyMap())__        @SuppressWarnings("unchecked")_        Map<String, Object> users = (Map<String, Object>) response.getBody()__        for (String user: users.keySet()) {_            Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata")__            Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved")__            if (reserved == null || reserved == false) {_                logger.warn("Deleting leftover user {}", user)__                getAdminExecutionContext().callApi("security.delete_user", singletonMap("username", user), emptyList(), emptyMap())__            }_        }_    };deletes,users,after,every,test,just,in,case,any,test,adds,any;after,public,void,delete,users,throws,exception,client,yaml,test,response,response,get,admin,execution,context,call,api,security,empty,map,empty,list,empty,map,suppress,warnings,unchecked,map,string,object,users,map,string,object,response,get,body,for,string,user,users,key,set,map,meta,data,map,map,map,users,get,user,get,metadata,boolean,reserved,meta,data,map,null,null,boolean,meta,data,map,get,if,reserved,null,reserved,false,logger,warn,deleting,leftover,user,user,get,admin,execution,context,call,api,security,singleton,map,username,user,empty,list,empty,map
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1524684173;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        break__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,break,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1526449283;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        break__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,break,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1529687475;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        break__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,break,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1531179852;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        break__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,break,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1534176840;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        break__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,break,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1539796943;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        break__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,break,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1541624883;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        throw new AssertionError("waiting until stopped state reached started state")__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,throw,new,assertion,error,waiting,until,stopped,state,reached,started,state,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1544519590;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("xpack.watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        throw new AssertionError("waiting until stopped state reached started state")__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,xpack,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,xpack,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,throw,new,assertion,error,waiting,until,stopped,state,reached,started,state,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @After     public void reenableWatcher() throws Exception;1550481268;Re-enables watcher after every test just in case any test disables it. One does.;@After_    public void reenableWatcher() throws Exception {_        if (isWatcherTest()) {_            assertBusy(() -> {_                ClientYamlTestResponse response =_                        getAdminExecutionContext().callApi("watcher.stats", emptyMap(), emptyList(), emptyMap())__                String state = (String) response.evaluate("stats.0.watcher_state")___                switch (state) {_                    case "stopped":_                        ClientYamlTestResponse startResponse =_                                getAdminExecutionContext().callApi("watcher.start", emptyMap(), emptyList(), emptyMap())__                        boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged")__                        assertThat(isAcknowledged, is(true))__                        throw new AssertionError("waiting until stopped state reached started state")__                    case "stopping":_                        throw new AssertionError("waiting until stopping state reached stopped state to start again")__                    case "starting":_                        throw new AssertionError("waiting until starting state reached started state")__                    case "started":_                        _                        break__                    default:_                        throw new AssertionError("unknown state[" + state + "]")__                }_            })__        }_    };re,enables,watcher,after,every,test,just,in,case,any,test,disables,it,one,does;after,public,void,reenable,watcher,throws,exception,if,is,watcher,test,assert,busy,client,yaml,test,response,response,get,admin,execution,context,call,api,watcher,stats,empty,map,empty,list,empty,map,string,state,string,response,evaluate,stats,0,switch,state,case,stopped,client,yaml,test,response,start,response,get,admin,execution,context,call,api,watcher,start,empty,map,empty,list,empty,map,boolean,is,acknowledged,boolean,start,response,evaluate,acknowledged,assert,that,is,acknowledged,is,true,throw,new,assertion,error,waiting,until,stopped,state,reached,started,state,case,stopping,throw,new,assertion,error,waiting,until,stopping,state,reached,stopped,state,to,start,again,case,starting,throw,new,assertion,error,waiting,until,starting,state,reached,started,state,case,started,break,default,throw,new,assertion,error,unknown,state,state
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1524684173;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1526449283;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1529687475;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1531179852;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1534176840;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1539796943;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1541624883;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1544519590;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
XDocsClientYamlTestSuiteIT -> @Override     protected Settings restClientSettings();1550481268;All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.;@Override_    protected Settings restClientSettings() {_        return Settings.builder()_                .put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN)_                .build()__    };all,tests,run,as,a,an,administrative,user,but,use,code,es,shield,runas,user,code,to,become,a,less,privileged,user;override,protected,settings,rest,client,settings,return,settings,builder,put,thread,context,prefix,authorization,build
