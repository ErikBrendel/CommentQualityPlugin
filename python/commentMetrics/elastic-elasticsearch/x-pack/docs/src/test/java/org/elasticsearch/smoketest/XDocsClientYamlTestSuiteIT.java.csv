commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected void afterIfFailed(List<Throwable> errors) {     super.afterIfFailed(errors).     String name = getTestName().split("=")[1].     name = name.substring(0, name.length() - 1).     name = name.replaceAll("/([^/]+)$", ".asciidoc:$1").     logger.error("This failing test was generated by documentation starting at {}. It may include many snippets. " + "See Elasticsearch's docs/README.asciidoc for an explanation of test generation.", name). }
false;protected;0;4;;@Override protected boolean preserveTemplatesUponCompletion() {     return true. }
false;protected;5;9;;@Override protected ClientYamlTestClient initClientYamlTestClient(final ClientYamlSuiteRestSpec restSpec, final RestClient restClient, final List<HttpHost> hosts, final Version esVersion, final Version masterVersion) {     return new ClientYamlDocsTestClient(restSpec, restClient, hosts, esVersion, masterVersion, this::getClientBuilderWithSniffedHosts). }
true;protected;0;6;/**  * All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.  */ ;/**  * All tests run as a an administrative user but use <code>es-shield-runas-user</code> to become a less privileged user.  */ @Override protected Settings restClientSettings() {     return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", USER_TOKEN).build(). }
true;public;0;28;/**  * Re-enables watcher after every test just in case any test disables it. One does.  */ ;/**  * Re-enables watcher after every test just in case any test disables it. One does.  */ @After public void reenableWatcher() throws Exception {     if (isWatcherTest()) {         assertBusy(() -> {             ClientYamlTestResponse response = getAdminExecutionContext().callApi("watcher.stats", emptyMap(), emptyList(), emptyMap()).             String state = (String) response.evaluate("stats.0.watcher_state").             switch(state) {                 case "stopped":                     ClientYamlTestResponse startResponse = getAdminExecutionContext().callApi("watcher.start", emptyMap(), emptyList(), emptyMap()).                     boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged").                     assertThat(isAcknowledged, is(true)).                     throw new AssertionError("waiting until stopped state reached started state").                 case "stopping":                     throw new AssertionError("waiting until stopping state reached stopped state to start again").                 case "starting":                     throw new AssertionError("waiting until starting state reached started state").                 case "started":                     // all good here, we are done                     break.                 default:                     throw new AssertionError("unknown state[" + state + "]").             }         }).     } }
false;protected;0;5;;@Override protected boolean isWatcherTest() {     String testName = getTestName().     return testName != null && (testName.contains("watcher/") || testName.contains("watcher\\")). }
false;protected;0;4;;@Override protected boolean isMonitoringTest() {     return false. }
false;protected;0;5;;@Override protected boolean isMachineLearningTest() {     String testName = getTestName().     return testName != null && (testName.contains("ml/") || testName.contains("ml\\")). }
true;public;0;15;/**  * Deletes users after every test just in case any test adds any.  */ ;/**  * Deletes users after every test just in case any test adds any.  */ @After public void deleteUsers() throws Exception {     ClientYamlTestResponse response = getAdminExecutionContext().callApi("security.get_user", emptyMap(), emptyList(), emptyMap()).     @SuppressWarnings("unchecked")     Map<String, Object> users = (Map<String, Object>) response.getBody().     for (String user : users.keySet()) {         Map<?, ?> metaDataMap = (Map<?, ?>) ((Map<?, ?>) users.get(user)).get("metadata").         Boolean reserved = metaDataMap == null ? null : (Boolean) metaDataMap.get("_reserved").         if (reserved == null || reserved == false) {             logger.warn("Deleting leftover user {}", user).             getAdminExecutionContext().callApi("security.delete_user", singletonMap("username", user), emptyList(), emptyMap()).         }     } }
false;protected;0;4;;@Override protected boolean randomizeContentType() {     return false. }
