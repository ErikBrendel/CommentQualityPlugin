commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setReferralFollowing() {     ldapConnection.getConnectionOptions().setFollowReferrals(AbstractActiveDirectoryTestCase.FOLLOW_REFERRALS). }
false;public;0;20;;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/35738") @SuppressWarnings("unchecked") public void testResolveSubTree() throws Exception {     Settings settings = Settings.builder().put("xpack.security.authc.realms.active_directory.ad.group_search.scope", LdapSearchScope.SUB_TREE).put("xpack.security.authc.realms.active_directory.ad.group_search.base_dn", "DC=ad,DC=test,DC=elasticsearch,DC=com").put("xpack.security.authc.realms.active_directory.ad.domain_name", "ad.test.elasticsearch.com").build().     ActiveDirectoryGroupsResolver resolver = new ActiveDirectoryGroupsResolver(config(REALM_ID, settings)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(10), NoOpLogger.INSTANCE, null).     assertThat(groups, containsInAnyOrder(containsString("Avengers"), containsString("SHIELD"), containsString("Geniuses"), containsString("Philanthropists"), containsString("CN=Users,CN=Builtin"), containsString("Domain Users"), containsString("Supers"))). }
false;public;0;12;;public void testResolveOneLevel() throws Exception {     Settings settings = Settings.builder().put("xpack.security.authc.realms.active_directory.ad.scope", LdapSearchScope.ONE_LEVEL).put("xpack.security.authc.realms.active_directory.ad.group_search.base_dn", "CN=Builtin, DC=ad, DC=test, DC=elasticsearch,DC=com").put("xpack.security.authc.realms.active_directory.ad.domain_name", "ad.test.elasticsearch.com").build().     ActiveDirectoryGroupsResolver resolver = new ActiveDirectoryGroupsResolver(config(REALM_ID, settings)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(10), NoOpLogger.INSTANCE, null).     assertThat(groups, hasItem(containsString("Users"))). }
false;public;0;12;;public void testResolveBaseLevel() throws Exception {     Settings settings = Settings.builder().put("xpack.security.authc.realms.active_directory.ad.group_search.scope", LdapSearchScope.BASE).put("xpack.security.authc.realms.active_directory.ad.group_search.base_dn", "CN=Users, CN=Builtin, DC=ad, DC=test, DC=elasticsearch, DC=com").put("xpack.security.authc.realms.active_directory.ad.domain_name", "ad.test.elasticsearch.com").build().     ActiveDirectoryGroupsResolver resolver = new ActiveDirectoryGroupsResolver(config(REALM_ID, settings)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(10), NoOpLogger.INSTANCE, null).     assertThat(groups, hasItem(containsString("CN=Users,CN=Builtin"))). }
false;public;0;27;;public void testBuildGroupQuery() throws Exception {     // test a user with no assigned groups, other than the default groups     {         String[] expectedSids = new String[] { // Default Users group         "S-1-5-32-545" }.         final String dn = "CN=Jarvis, CN=Users, DC=ad, DC=test, DC=elasticsearch, DC=com".         PlainActionFuture<Filter> future = new PlainActionFuture<>().         ActiveDirectoryGroupsResolver.buildGroupQuery(ldapConnection, dn, TimeValue.timeValueSeconds(10), false, future).         Filter query = future.actionGet().         assertValidSidQuery(query, expectedSids).     }     // test a user of one groups     {         String[] expectedSids = new String[] { // Default Users group         "S-1-5-32-545" }.         final String dn = "CN=Odin, CN=Users, DC=ad, DC=test, DC=elasticsearch, DC=com".         PlainActionFuture<Filter> future = new PlainActionFuture<>().         ActiveDirectoryGroupsResolver.buildGroupQuery(ldapConnection, dn, TimeValue.timeValueSeconds(10), false, future).         Filter query = future.actionGet().         assertValidSidQuery(query, expectedSids).     } }
false;private;2;9;;private void assertValidSidQuery(Filter query, String[] expectedSids) {     String queryString = query.toString().     Pattern sidQueryPattern = Pattern.compile("\\(\\|(\\(objectSid=S(-\\d+)+\\))+\\)").     assertThat("[" + queryString + "] didn't match the search filter pattern", sidQueryPattern.matcher(queryString).matches(), is(true)).     for (String sid : expectedSids) {         assertThat(queryString, containsString(sid)).     } }
false;protected;0;4;;@Override protected String ldapUrl() {     return ActiveDirectorySessionFactoryTests.AD_LDAP_URL. }
false;protected;0;4;;@Override protected String bindDN() {     return BRUCE_BANNER_DN. }
false;protected;0;4;;@Override protected String bindPassword() {     return ActiveDirectorySessionFactoryTests.PASSWORD. }
false;protected;0;4;;@Override protected String trustPath() {     return "/org/elasticsearch/xpack/security/authc/ldap/support/ADtrust.jks". }
