commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@SuppressWarnings("unchecked") public void testResolve() throws Exception {     // falling back on the 'memberOf' attribute     UserAttributeGroupsResolver resolver = new UserAttributeGroupsResolver(config(REALM_ID, Settings.EMPTY)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(20), NoOpLogger.INSTANCE, null).     assertThat(groups, containsInAnyOrder(containsString("Avengers"), containsString("SHIELD"), containsString("Geniuses"), containsString("Philanthropists"))). }
false;public;0;14;;@SuppressWarnings("unchecked") public void testResolveFromPreloadedAttributes() throws Exception {     SearchRequest preSearch = new SearchRequest(BRUCE_BANNER_DN, SearchScope.BASE, LdapUtils.OBJECT_CLASS_PRESENCE_FILTER, "memberOf").     final Collection<Attribute> attributes = ldapConnection.searchForEntry(preSearch).getAttributes().     UserAttributeGroupsResolver resolver = new UserAttributeGroupsResolver(config(REALM_ID, Settings.EMPTY)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(20), NoOpLogger.INSTANCE, attributes).     assertThat(groups, containsInAnyOrder(containsString("Avengers"), containsString("SHIELD"), containsString("Geniuses"), containsString("Philanthropists"))). }
false;public;0;10;;@SuppressWarnings("unchecked") public void testResolveCustomGroupAttribute() throws Exception {     Settings settings = Settings.builder().put("user_group_attribute", "seeAlso").build().     UserAttributeGroupsResolver resolver = new UserAttributeGroupsResolver(config(REALM_ID, settings)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(20), NoOpLogger.INSTANCE, null).     // seeAlso only has Avengers     assertThat(groups, hasItems(containsString("Avengers"))). }
false;public;0;9;;public void testResolveInvalidGroupAttribute() throws Exception {     Settings settings = Settings.builder().put("user_group_attribute", "doesntExist").build().     UserAttributeGroupsResolver resolver = new UserAttributeGroupsResolver(config(REALM_ID, settings)).     List<String> groups = resolveBlocking(resolver, ldapConnection, BRUCE_BANNER_DN, TimeValue.timeValueSeconds(20), NoOpLogger.INSTANCE, null).     assertThat(groups, empty()). }
false;protected;0;4;;@Override protected String ldapUrl() {     return ActiveDirectorySessionFactoryTests.AD_LDAP_URL. }
false;protected;0;4;;@Override protected String bindDN() {     return BRUCE_BANNER_DN. }
false;protected;0;4;;@Override protected String bindPassword() {     return ActiveDirectorySessionFactoryTests.PASSWORD. }
false;protected;0;4;;@Override protected String trustPath() {     return "/org/elasticsearch/xpack/security/authc/ldap/support/ADtrust.jks". }
