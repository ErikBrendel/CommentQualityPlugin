commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Before public void init() throws Exception {     Path certPath = getDataPath("support/smb_ca.crt").     Environment env = TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     /*          * Prior to each test we reinitialize the socket factory with a new SSLService so that we get a new SSLContext.          * If we re-use a SSLContext, previously connected sessions can get re-established which breaks hostname          * verification tests since a re-established connection does not perform hostname verification.          */     globalSettings = Settings.builder().put("path.home", createTempDir()).put("xpack.security.authc.realms.active_directory.ad.ssl.certificate_authorities", certPath).build().     sslService = new SSLService(globalSettings, env).     threadPool = new TestThreadPool("ADLdapUserSearchSessionFactoryTests"). }
false;public;0;4;;@After public void shutdown() {     terminate(threadPool). }
false;public;0;57;;@AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/35738") public void testUserSearchWithActiveDirectory() throws Exception {     String groupSearchBase = "DC=ad,DC=test,DC=elasticsearch,DC=com".     String userSearchBase = "CN=Users,DC=ad,DC=test,DC=elasticsearch,DC=com".     Settings settings = Settings.builder().put(LdapTestCase.buildLdapSettings(new String[] { ActiveDirectorySessionFactoryTests.AD_LDAP_URL }, Strings.EMPTY_ARRAY, groupSearchBase, LdapSearchScope.SUB_TREE, null, true)).put("user_search.base_dn", userSearchBase).put("bind_dn", "ironman@ad.test.elasticsearch.com").put("bind_password", ActiveDirectorySessionFactoryTests.PASSWORD).put("user_search.filter", "(cn={0})").put("user_search.pool.enabled", randomBoolean()).put("follow_referrals", ActiveDirectorySessionFactoryTests.FOLLOW_REFERRALS).build().     Settings.Builder builder = Settings.builder().put(globalSettings).     settings.keySet().forEach(k -> {         builder.copy("xpack.security.authc.realms.ad-as-ldap-test." + k, k, settings).     }).     Settings fullSettings = builder.build().     sslService = new SSLService(fullSettings, TestEnvironment.newEnvironment(fullSettings)).     RealmConfig config = new RealmConfig(new RealmConfig.RealmIdentifier("ad", "ad-as-ldap-test"), globalSettings, TestEnvironment.newEnvironment(globalSettings), new ThreadContext(globalSettings)).     LdapUserSearchSessionFactory sessionFactory = getLdapUserSearchSessionFactory(config, sslService, threadPool).     String user = "Bruce Banner".     try {         // auth         try (LdapSession ldap = session(sessionFactory, user, new SecureString(ActiveDirectorySessionFactoryTests.PASSWORD))) {             assertConnectionCanReconnect(ldap.getConnection()).             List<String> groups = groups(ldap).             assertThat(groups, containsInAnyOrder(containsString("Avengers"), containsString("SHIELD"), containsString("Geniuses"), containsString("Philanthropists"))).         }         // lookup         try (LdapSession ldap = unauthenticatedSession(sessionFactory, user)) {             assertConnectionCanReconnect(ldap.getConnection()).             List<String> groups = groups(ldap).             assertThat(groups, containsInAnyOrder(containsString("Avengers"), containsString("SHIELD"), containsString("Geniuses"), containsString("Philanthropists"))).         }     } finally {         sessionFactory.close().     } }
false;protected;0;4;;@Override protected boolean enableWarningsCheck() {     return false. }
false;private;3;5;;private LdapSession session(SessionFactory factory, String username, SecureString password) {     PlainActionFuture<LdapSession> future = new PlainActionFuture<>().     factory.session(username, password, future).     return future.actionGet(). }
false;private;1;6;;private List<String> groups(LdapSession ldapSession) {     Objects.requireNonNull(ldapSession).     PlainActionFuture<List<String>> future = new PlainActionFuture<>().     ldapSession.groups(future).     return future.actionGet(). }
false;private;2;5;;private LdapSession unauthenticatedSession(SessionFactory factory, String username) {     PlainActionFuture<LdapSession> future = new PlainActionFuture<>().     factory.unauthenticatedSession(username, future).     return future.actionGet(). }
