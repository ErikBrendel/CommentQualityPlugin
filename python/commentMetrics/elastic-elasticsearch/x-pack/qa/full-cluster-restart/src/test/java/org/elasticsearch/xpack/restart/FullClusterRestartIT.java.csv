# id;timestamp;commentText;codeText;commentWords;codeWords
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1531179852;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = toMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = toMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = toMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,to,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,to,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,to,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1531729807;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = toMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = toMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = toMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,to,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,to,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,to,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1532685069;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1533319589;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1533323914;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1534203100;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1534434117;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1535965276;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", oldClusterVersion.onOrAfter(Version.V_6_3_0))__        if (runningAgainstOldCluster) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (oldClusterVersion.onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,old,cluster,version,on,or,after,version,if,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1536828374;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1540486836;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1541171529;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1543368857;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1543374981;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1543436373;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1543514303;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544035746;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544058328;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544060707;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544295436;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544491368;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"_doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544519590;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"_doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544575397;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"_doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1544648252;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1545155131;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1546454912;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1546630609;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1548704803;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1549404388;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1549439027;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", "/_xpack/rollup/job/rollup-job-test")__            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", "/_xpack/rollup/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,rollup,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,rollup,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1549608646;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                if (getOldClusterVersion().onOrAfter(Version.V_7_0_0)) {_                    bulk.append("{\"index\":{\"_index\":\"rollup-docs\"}}\n")__                } else {_                    bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                }_                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", getRollupEndpoint() + "/job/rollup-job-test")___            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", getRollupEndpoint() + "/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,if,get,old,cluster,version,on,or,after,version,bulk,append,index,rollup,docs,n,else,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,get,rollup,endpoint,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,get,rollup,endpoint,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testRollupAfterRestart() throws Exception;1550504256;Tests that a RollUp job created on a old cluster is correctly restarted after the upgrade.;public void testRollupAfterRestart() throws Exception {_        assumeTrue("Rollup can be tested with 6.3.0 and onwards", getOldClusterVersion().onOrAfter(Version.V_6_3_0))__        if (isRunningAgainstOldCluster()) {_            final int numDocs = 59__            final int year = randomIntBetween(1970, 2018)___            _            final StringBuilder bulk = new StringBuilder()__            for (int i = 0_ i < numDocs_ i++) {_                if (getOldClusterVersion().onOrAfter(Version.V_7_0_0)) {_                    bulk.append("{\"index\":{\"_index\":\"rollup-docs\"}}\n")__                } else {_                    bulk.append("{\"index\":{\"_index\":\"rollup-docs\",\"_type\":\"doc\"}}\n")__                }_                String date = String.format(Locale.ROOT, "%04d-01-01T00:%02d:00Z", year, i)__                bulk.append("{\"timestamp\":\"").append(date).append("\",\"value\":").append(i).append("}\n")__            }_            bulk.append("\r\n")___            final Request bulkRequest = new Request("POST", "/_bulk")__            bulkRequest.setJsonEntity(bulk.toString())__            client().performRequest(bulkRequest)___            _            final Request createRollupJobRequest = new Request("PUT", getRollupEndpoint() + "/job/rollup-job-test")___            createRollupJobRequest.setJsonEntity("{"_                    + "\"index_pattern\":\"rollup-*\","_                    + "\"rollup_index\":\"results-rollup\","_                    + "\"cron\":\"*/30 * * * * ?\","_                    + "\"page_size\":100,"_                    + "\"groups\":{"_                    + "    \"date_histogram\":{"_                    + "        \"field\":\"timestamp\","_                    + "        \"interval\":\"5m\""_                    + "      }"_                    + "},"_                    + "\"metrics\":["_                    + "    {\"field\":\"value\",\"metrics\":[\"min\",\"max\",\"sum\"]}"_                    + "]"_                    + "}")___            Map<String, Object> createRollupJobResponse = entityAsMap(client().performRequest(createRollupJobRequest))__            assertThat(createRollupJobResponse.get("acknowledged"), equalTo(Boolean.TRUE))___            _            final Request startRollupJobRequest = new Request("POST", getRollupEndpoint() + "/job/rollup-job-test/_start")__            Map<String, Object> startRollupJobResponse = entityAsMap(client().performRequest(startRollupJobRequest))__            assertThat(startRollupJobResponse.get("started"), equalTo(Boolean.TRUE))___            assertRollUpJob("rollup-job-test")___        } else {__            final Request clusterHealthRequest = new Request("GET", "/_cluster/health")__            clusterHealthRequest.addParameter("wait_for_status", "yellow")__            clusterHealthRequest.addParameter("wait_for_no_relocating_shards", "true")__            if (getOldClusterVersion().onOrAfter(Version.V_6_2_0)) {_                clusterHealthRequest.addParameter("wait_for_no_initializing_shards", "true")__            }_            Map<String, Object> clusterHealthResponse = entityAsMap(client().performRequest(clusterHealthRequest))__            assertThat(clusterHealthResponse.get("timed_out"), equalTo(Boolean.FALSE))___            assertRollUpJob("rollup-job-test")__        }_    };tests,that,a,roll,up,job,created,on,a,old,cluster,is,correctly,restarted,after,the,upgrade;public,void,test,rollup,after,restart,throws,exception,assume,true,rollup,can,be,tested,with,6,3,0,and,onwards,get,old,cluster,version,on,or,after,version,if,is,running,against,old,cluster,final,int,num,docs,59,final,int,year,random,int,between,1970,2018,final,string,builder,bulk,new,string,builder,for,int,i,0,i,num,docs,i,if,get,old,cluster,version,on,or,after,version,bulk,append,index,rollup,docs,n,else,bulk,append,index,rollup,docs,doc,n,string,date,string,format,locale,root,04d,01,01t00,02d,00z,year,i,bulk,append,timestamp,append,date,append,value,append,i,append,n,bulk,append,r,n,final,request,bulk,request,new,request,post,bulk,request,set,json,entity,bulk,to,string,client,perform,request,bulk,request,final,request,create,rollup,job,request,new,request,put,get,rollup,endpoint,job,rollup,job,test,create,rollup,job,request,set,json,entity,rollup,results,rollup,cron,30,100,groups,field,timestamp,interval,5m,metrics,field,value,metrics,min,max,sum,map,string,object,create,rollup,job,response,entity,as,map,client,perform,request,create,rollup,job,request,assert,that,create,rollup,job,response,get,acknowledged,equal,to,boolean,true,final,request,start,rollup,job,request,new,request,post,get,rollup,endpoint,job,rollup,job,test,map,string,object,start,rollup,job,response,entity,as,map,client,perform,request,start,rollup,job,request,assert,that,start,rollup,job,response,get,started,equal,to,boolean,true,assert,roll,up,job,rollup,job,test,else,final,request,cluster,health,request,new,request,get,health,cluster,health,request,add,parameter,yellow,cluster,health,request,add,parameter,true,if,get,old,cluster,version,on,or,after,version,cluster,health,request,add,parameter,true,map,string,object,cluster,health,response,entity,as,map,client,perform,request,cluster,health,request,assert,that,cluster,health,response,get,equal,to,boolean,false,assert,roll,up,job,rollup,job,test
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1524684173;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            client().performRequest("PUT", docLocation, singletonMap("refresh", "true"),_                    new StringEntity(doc, ContentType.APPLICATION_JSON))__        }__        assertThat(toStr(client().performRequest("GET", docLocation)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,client,perform,request,put,doc,location,singleton,map,refresh,true,new,string,entity,doc,content,type,assert,that,to,str,client,perform,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1525859433;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            client().performRequest("PUT", docLocation, singletonMap("refresh", "true"),_                    new StringEntity(doc, ContentType.APPLICATION_JSON))__        }__        assertThat(toStr(client().performRequest("GET", docLocation)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,client,perform,request,put,doc,location,singleton,map,refresh,true,new,string,entity,doc,content,type,assert,that,to,str,client,perform,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1528762805;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            client().performRequest("PUT", docLocation, singletonMap("refresh", "true"),_                    new StringEntity(doc, ContentType.APPLICATION_JSON))__        }__        assertThat(toStr(client().performRequest("GET", docLocation)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,client,perform,request,put,doc,location,singleton,map,refresh,true,new,string,entity,doc,content,type,assert,that,to,str,client,perform,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1531179852;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            client().performRequest("PUT", docLocation, singletonMap("refresh", "true"),_                    new StringEntity(doc, ContentType.APPLICATION_JSON))__        }__        assertThat(toStr(client().performRequest("GET", docLocation)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,client,perform,request,put,doc,location,singleton,map,refresh,true,new,string,entity,doc,content,type,assert,that,to,str,client,perform,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1531729807;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            client().performRequest("PUT", docLocation, singletonMap("refresh", "true"),_                    new StringEntity(doc, ContentType.APPLICATION_JSON))__        }__        assertThat(toStr(client().performRequest("GET", docLocation)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,client,perform,request,put,doc,location,singleton,map,refresh,true,new,string,entity,doc,content,type,assert,that,to,str,client,perform,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1532685069;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1533319589;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1533323914;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1534203100;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1534434117;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1535965276;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (runningAgainstOldCluster) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1536828374;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1540486836;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1541171529;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1543368857;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1543374981;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1543436373;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1543514303;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544035746;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544058328;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544060707;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544295436;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544491368;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/_doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544519590;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/_doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544575397;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/_doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        assertThat(toStr(client().performRequest(new Request("GET", docLocation))), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,assert,that,to,str,client,perform,request,new,request,get,doc,location,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1544648252;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1545155131;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1546454912;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1546630609;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1548704803;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1549404388;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1549439027;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,doc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1549608646;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/" + type + "/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        if (getOldClusterVersion().before(Version.V_6_7_0)) {_            getRequest.setOptions(expectWarnings(RestGetAction.TYPES_DEPRECATION_MESSAGE))__        }_        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,type,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,if,get,old,cluster,version,before,version,get,request,set,options,expect,warnings,rest,get,action,assert,that,to,str,client,perform,request,get,request,contains,string,doc
FullClusterRestartIT -> public void testSingleDoc() throws IOException;1550504256;Tests that a single document survives. Super basic smoke test.;public void testSingleDoc() throws IOException {_        String docLocation = "/testsingledoc/_doc/1"__        String doc = "{\"test\": \"test\"}"___        if (isRunningAgainstOldCluster()) {_            Request createDoc = new Request("PUT", docLocation)__            createDoc.addParameter("refresh", "true")__            createDoc.setJsonEntity(doc)__            client().performRequest(createDoc)__        }__        Request getRequest = new Request("GET", docLocation)__        assertThat(toStr(client().performRequest(getRequest)), containsString(doc))__    };tests,that,a,single,document,survives,super,basic,smoke,test;public,void,test,single,doc,throws,ioexception,string,doc,location,testsingledoc,1,string,doc,test,test,if,is,running,against,old,cluster,request,create,doc,new,request,put,doc,location,create,doc,add,parameter,refresh,true,create,doc,set,json,entity,doc,client,perform,request,create,doc,request,get,request,new,request,get,doc,location,assert,that,to,str,client,perform,request,get,request,contains,string,doc
