commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@ParametersFactory public static Iterable<Object[]> parameters() throws Exception {     return ESClientYamlSuiteTestCase.createParameters(). }
false;public;0;43;;@Before public void startWatcher() throws Exception {     // delete the watcher history to not clutter with entries from other test     getAdminExecutionContext().callApi("indices.delete", Collections.singletonMap("index", ".watcher-history-*"), emptyList(), emptyMap()).     // create one document in this index, so we can test in the YAML tests, that the index cannot be accessed     Request request = new Request("PUT", "/index_not_allowed_to_read/_doc/1").     request.setJsonEntity("{\"foo\":\"bar\"}").     adminClient().performRequest(request).     assertBusy(() -> {         ClientYamlTestResponse response = getAdminExecutionContext().callApi("watcher.stats", emptyMap(), emptyList(), emptyMap()).         String state = (String) response.evaluate("stats.0.watcher_state").         switch(state) {             case "stopped":                 ClientYamlTestResponse startResponse = getAdminExecutionContext().callApi("watcher.start", emptyMap(), emptyList(), emptyMap()).                 boolean isAcknowledged = (boolean) startResponse.evaluate("acknowledged").                 assertThat(isAcknowledged, is(true)).                 throw new AssertionError("waiting until stopped state reached started state").             case "stopping":                 throw new AssertionError("waiting until stopping state reached stopped state to start again").             case "starting":                 throw new AssertionError("waiting until starting state reached started state").             case "started":                 // all good here, we are done                 break.             default:                 throw new AssertionError("unknown state[" + state + "]").         }     }).     assertBusy(() -> {         for (String template : WatcherIndexTemplateRegistryField.TEMPLATE_NAMES) {             ClientYamlTestResponse templateExistsResponse = getAdminExecutionContext().callApi("indices.exists_template", singletonMap("name", template), emptyList(), emptyMap()).             assertThat(templateExistsResponse.getStatusCode(), is(200)).         }     }). }
false;public;0;26;;@After public void stopWatcher() throws Exception {     assertBusy(() -> {         ClientYamlTestResponse response = getAdminExecutionContext().callApi("watcher.stats", emptyMap(), emptyList(), emptyMap()).         String state = (String) response.evaluate("stats.0.watcher_state").         switch(state) {             case "stopped":                 // all good here, we are done                 break.             case "stopping":                 throw new AssertionError("waiting until stopping state reached stopped state").             case "starting":                 throw new AssertionError("waiting until starting state reached started state to stop").             case "started":                 ClientYamlTestResponse stopResponse = getAdminExecutionContext().callApi("watcher.stop", emptyMap(), emptyList(), emptyMap()).                 boolean isAcknowledged = (boolean) stopResponse.evaluate("acknowledged").                 assertThat(isAcknowledged, is(true)).                 throw new AssertionError("waiting until started state reached stopped state").             default:                 throw new AssertionError("unknown state[" + state + "]").         }     }). }
false;protected;0;7;;@Override protected Settings restClientSettings() {     String token = basicAuthHeaderValue("watcher_manager", new SecureString("x-pack-test-password".toCharArray())).     return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).build(). }
false;protected;0;7;;@Override protected Settings restAdminSettings() {     String token = basicAuthHeaderValue(TEST_ADMIN_USERNAME, new SecureString(TEST_ADMIN_PASSWORD.toCharArray())).     return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).build(). }
