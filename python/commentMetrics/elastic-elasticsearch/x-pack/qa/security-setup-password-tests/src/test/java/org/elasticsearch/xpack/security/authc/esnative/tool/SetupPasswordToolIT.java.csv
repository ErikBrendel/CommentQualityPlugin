commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected Settings restClientSettings() {     String token = basicAuthHeaderValue("test_admin", new SecureString("x-pack-test-password".toCharArray())).     return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", token).build(). }
false;public;0;68;;@SuppressWarnings("unchecked") public void testSetupPasswordToolAutoSetup() throws Exception {     final String testConfigDir = System.getProperty("tests.config.dir").     logger.info("--> CONF: {}", testConfigDir).     final Path configPath = PathUtils.get(testConfigDir).     setSystemPropsForTool(configPath).     Response nodesResponse = client().performRequest(new Request("GET", "/_nodes/http")).     Map<String, Object> nodesMap = entityAsMap(nodesResponse).     Map<String, Object> nodes = (Map<String, Object>) nodesMap.get("nodes").     Map<String, Object> firstNode = (Map<String, Object>) nodes.entrySet().iterator().next().getValue().     Map<String, Object> firstNodeHttp = (Map<String, Object>) firstNode.get("http").     String nodePublishAddress = (String) firstNodeHttp.get("publish_address").     final int lastColonIndex = nodePublishAddress.lastIndexOf(':').     InetAddress actualPublishAddress = InetAddresses.forString(nodePublishAddress.substring(0, lastColonIndex)).     InetAddress expectedPublishAddress = new NetworkService(Collections.emptyList()).resolvePublishHostAddresses(Strings.EMPTY_ARRAY).     final int port = Integer.valueOf(nodePublishAddress.substring(lastColonIndex + 1)).     List<String> lines = Files.readAllLines(configPath.resolve("elasticsearch.yml")).     lines = lines.stream().filter(s -> s.startsWith("http.port") == false && s.startsWith("http.publish_port") == false).collect(Collectors.toList()).     lines.add(randomFrom("http.port", "http.publish_port") + ": " + port).     if (expectedPublishAddress.equals(actualPublishAddress) == false) {         lines.add("http.publish_address: " + InetAddresses.toAddrString(actualPublishAddress)).     }     Files.write(configPath.resolve("elasticsearch.yml"), lines, StandardCharsets.UTF_8, StandardOpenOption.TRUNCATE_EXISTING).     MockTerminal mockTerminal = new MockTerminal().     SetupPasswordTool tool = new SetupPasswordTool().     final int status.     if (randomBoolean()) {         // answer yes to continue prompt         mockTerminal.addTextInput("y").         status = tool.main(new String[] { "auto" }, mockTerminal).     } else {         status = tool.main(new String[] { "auto", "--batch" }, mockTerminal).     }     assertEquals(0, status).     String output = mockTerminal.getOutput().     logger.info("CLI TOOL OUTPUT:\n{}", output).     String[] outputLines = output.split("\\n").     Map<String, String> userPasswordMap = new HashMap<>().     Arrays.asList(outputLines).forEach(line -> {         if (line.startsWith("PASSWORD ")) {             String[] pieces = line.split(" ").             String user = pieces[1].             String password = pieces[pieces.length - 1].             logger.info("user [{}] password [{}]", user, password).             userPasswordMap.put(user, password).         }     }).     assertEquals(6, userPasswordMap.size()).     userPasswordMap.entrySet().forEach(entry -> {         final String basicHeader = "Basic " + Base64.getEncoder().encodeToString((entry.getKey() + ":" + entry.getValue()).getBytes(StandardCharsets.UTF_8)).         try {             Request request = new Request("GET", "/_security/_authenticate").             RequestOptions.Builder options = request.getOptions().toBuilder().             options.addHeader("Authorization", basicHeader).             request.setOptions(options).             Map<String, Object> userInfoMap = entityAsMap(client().performRequest(request)).             assertEquals(entry.getKey(), userInfoMap.get("username")).         } catch (IOException e) {             throw new UncheckedIOException(e).         }     }). }
false;private;1;5;;@SuppressForbidden(reason = "need to set sys props for CLI tool") private void setSystemPropsForTool(Path configPath) {     System.setProperty("es.path.conf", configPath.toString()).     System.setProperty("es.path.home", configPath.getParent().toString()). }
