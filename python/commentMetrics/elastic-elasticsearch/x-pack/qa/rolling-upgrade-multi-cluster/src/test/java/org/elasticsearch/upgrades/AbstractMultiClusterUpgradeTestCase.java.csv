commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean preserveClusterUponCompletion() {     return true. }
false;public,static;1;14;;public static UpgradeState parse(String value) {     switch(value) {         case "none":             return NONE.         case "one_third":             return ONE_THIRD.         case "two_third":             return TWO_THIRD.         case "all":             return ALL.         default:             throw new AssertionError("unknown cluster type: " + value).     } }
false;public,static;1;10;;public static ClusterName parse(String value) {     switch(value) {         case "leader":             return LEADER.         case "follower":             return FOLLOWER.         default:             throw new AssertionError("unknown cluster type: " + value).     } }
false;public;0;32;;@Before public void initClientsAndConfigureClusters() throws IOException {     String leaderHost = System.getProperty("tests.leader_host").     if (leaderHost == null) {         throw new AssertionError("leader host is missing").     }     if (initialized) {         return.     }     String followerHost = System.getProperty("tests.follower_host").     if (clusterName == ClusterName.LEADER) {         leaderClient = buildClient(leaderHost).         if (followerHost != null) {             followerClient = buildClient(followerHost).         }     } else if (clusterName == ClusterName.FOLLOWER) {         if (followerHost == null) {             throw new AssertionError("follower host is missing").         }         leaderClient = buildClient(leaderHost).         followerClient = buildClient(followerHost).     } else {         throw new AssertionError("unknown cluster name: " + clusterName).     }     configureLeaderRemoteClusters().     configureFollowerRemoteClusters().     initialized = true. }
false;private;0;14;;private void configureLeaderRemoteClusters() throws IOException {     String leaderRemoteClusterSeed = System.getProperty("tests.leader_remote_cluster_seed").     if (leaderRemoteClusterSeed != null) {         logger.info("Configuring leader remote cluster [{}]", leaderRemoteClusterSeed).         Request request = new Request("PUT", "/_cluster/settings").         request.setJsonEntity("{\"persistent\": {\"cluster.remote.leader.seeds\": \"" + leaderRemoteClusterSeed + "\"}}").         assertThat(leaderClient.performRequest(request).getStatusLine().getStatusCode(), equalTo(200)).         if (followerClient != null) {             assertThat(followerClient.performRequest(request).getStatusLine().getStatusCode(), equalTo(200)).         }     } else {         logger.info("No leader remote cluster seed found.").     } }
false;private;0;12;;private void configureFollowerRemoteClusters() throws IOException {     String followerRemoteClusterSeed = System.getProperty("tests.follower_remote_cluster_seed").     if (followerRemoteClusterSeed != null) {         logger.info("Configuring follower remote cluster [{}]", followerRemoteClusterSeed).         Request request = new Request("PUT", "/_cluster/settings").         request.setJsonEntity("{\"persistent\": {\"cluster.remote.follower.seeds\": \"" + followerRemoteClusterSeed + "\"}}").         assertThat(leaderClient.performRequest(request).getStatusLine().getStatusCode(), equalTo(200)).         assertThat(followerClient.performRequest(request).getStatusLine().getStatusCode(), equalTo(200)).     } else {         logger.info("No follower remote cluster seed found.").     } }
false;public,static;0;9;;@AfterClass public static void destroyClients() throws IOException {     try {         IOUtils.close(leaderClient, followerClient).     } finally {         leaderClient = null.         followerClient = null.     } }
false;protected,static;0;3;;protected static RestClient leaderClient() {     return leaderClient. }
false;protected,static;0;3;;protected static RestClient followerClient() {     return followerClient. }
false;private;1;6;;private RestClient buildClient(final String url) throws IOException {     int portSeparator = url.lastIndexOf(':').     HttpHost httpHost = new HttpHost(url.substring(0, portSeparator), Integer.parseInt(url.substring(portSeparator + 1)), getProtocol()).     return buildClient(restAdminSettings(), new HttpHost[] { httpHost }). }
false;protected,static;1;3;;protected static Map<?, ?> toMap(Response response) throws IOException {     return XContentHelper.convertToMap(JsonXContent.jsonXContent, EntityUtils.toString(response.getEntity()), false). }
