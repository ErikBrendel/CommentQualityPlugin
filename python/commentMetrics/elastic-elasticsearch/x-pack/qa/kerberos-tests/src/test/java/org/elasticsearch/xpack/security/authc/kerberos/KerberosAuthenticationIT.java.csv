# id;timestamp;commentText;codeText;commentWords;codeWords
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1532456624;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_xpack/security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,security,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1533063033;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_xpack/security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,security,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1533143718;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_xpack/security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,security,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1533641732;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_xpack/security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,security,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1537806831;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_xpack/security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,security,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1544519590;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
KerberosAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1549439027;Creates simple mapping that maps the users from 'kerberos' realm to_the 'kerb_test' role.;@Before_    public void setupRoleMapping() throws IOException {_        final String json = Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent()).startObject()_                        .array("roles", new String[] { "kerb_test" })_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("realm.name", TEST_KERBEROS_REALM_NAME).endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject())___        final Request request = new Request("POST", "/_security/role_mapping/kerberosrolemapping")__        request.setJsonEntity(json)__        final Response response = adminClient().performRequest(request)__        assertOK(response)__    };creates,simple,mapping,that,maps,the,users,from,kerberos,realm,to,the,role;before,public,void,setup,role,mapping,throws,ioexception,final,string,json,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,realm,name,end,object,end,object,end,array,end,object,end,object,final,request,request,new,request,post,kerberosrolemapping,request,set,json,entity,json,final,response,response,admin,client,perform,request,request,assert,ok,response
