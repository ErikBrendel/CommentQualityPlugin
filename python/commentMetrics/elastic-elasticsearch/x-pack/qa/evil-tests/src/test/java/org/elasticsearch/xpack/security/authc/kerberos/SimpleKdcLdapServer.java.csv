# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleKdcLdapServer -> public synchronized void stop() throws PrivilegedActionException;1536964057;Stop Simple Kdc Server__@throws PrivilegedActionException when privileged action threw exception;public synchronized void stop() throws PrivilegedActionException {_        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {__            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Void run() throws Exception {_                if (simpleKdc != null) {_                    try {_                        simpleKdc.stop()__                    } catch (KrbException e) {_                        throw ExceptionsHelper.convertToRuntime(e)__                    } finally {_                        System.setProperty("sun.security.krb5.debug", Boolean.toString(krb5DebugBackupConfigValue))__                    }_                }__                if (ldapServer != null) {_                    ldapServer.shutDown(true)__                }_                return null__            }_        })__        logger.info("SimpleKdcServer stoppped.")__    };stop,simple,kdc,server,throws,privileged,action,exception,when,privileged,action,threw,exception;public,synchronized,void,stop,throws,privileged,action,exception,access,controller,do,privileged,new,privileged,exception,action,void,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,void,run,throws,exception,if,simple,kdc,null,try,simple,kdc,stop,catch,krb,exception,e,throw,exceptions,helper,convert,to,runtime,e,finally,system,set,property,sun,security,krb5,debug,boolean,to,string,krb5debug,backup,config,value,if,ldap,server,null,ldap,server,shut,down,true,return,null,logger,info,simple,kdc,server,stoppped
SimpleKdcLdapServer -> public synchronized void stop() throws PrivilegedActionException;1540847035;Stop Simple Kdc Server__@throws PrivilegedActionException when privileged action threw exception;public synchronized void stop() throws PrivilegedActionException {_        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {__            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Void run() throws Exception {_                if (simpleKdc != null) {_                    try {_                        simpleKdc.stop()__                    } catch (KrbException e) {_                        throw ExceptionsHelper.convertToRuntime(e)__                    } finally {_                        System.setProperty("sun.security.krb5.debug", Boolean.toString(krb5DebugBackupConfigValue))__                    }_                }__                if (ldapServer != null) {_                    ldapServer.shutDown(true)__                }_                return null__            }_        })__        logger.info("SimpleKdcServer stoppped.")__    };stop,simple,kdc,server,throws,privileged,action,exception,when,privileged,action,threw,exception;public,synchronized,void,stop,throws,privileged,action,exception,access,controller,do,privileged,new,privileged,exception,action,void,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,void,run,throws,exception,if,simple,kdc,null,try,simple,kdc,stop,catch,krb,exception,e,throw,exceptions,helper,convert,to,runtime,e,finally,system,set,property,sun,security,krb5,debug,boolean,to,string,krb5debug,backup,config,value,if,ldap,server,null,ldap,server,shut,down,true,return,null,logger,info,simple,kdc,server,stoppped
SimpleKdcLdapServer -> public synchronized void stop() throws PrivilegedActionException;1543988689;Stop Simple Kdc Server__@throws PrivilegedActionException when privileged action threw exception;public synchronized void stop() throws PrivilegedActionException {_        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {__            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Void run() throws Exception {_                if (simpleKdc != null) {_                    try {_                        simpleKdc.stop()__                    } catch (KrbException e) {_                        throw ExceptionsHelper.convertToRuntime(e)__                    } finally {_                        System.setProperty("sun.security.krb5.debug", Boolean.toString(krb5DebugBackupConfigValue))__                    }_                }__                if (ldapServer != null) {_                    ldapServer.shutDown(true)__                }_                return null__            }_        })__        logger.info("SimpleKdcServer stoppped.")__    };stop,simple,kdc,server,throws,privileged,action,exception,when,privileged,action,threw,exception;public,synchronized,void,stop,throws,privileged,action,exception,access,controller,do,privileged,new,privileged,exception,action,void,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,void,run,throws,exception,if,simple,kdc,null,try,simple,kdc,stop,catch,krb,exception,e,throw,exceptions,helper,convert,to,runtime,e,finally,system,set,property,sun,security,krb5,debug,boolean,to,string,krb5debug,backup,config,value,if,ldap,server,null,ldap,server,shut,down,true,return,null,logger,info,simple,kdc,server,stoppped
SimpleKdcLdapServer -> public synchronized void stop() throws PrivilegedActionException;1551076713;Stop Simple Kdc Server__@throws PrivilegedActionException when privileged action threw exception;public synchronized void stop() throws PrivilegedActionException {_        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {__            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Void run() throws Exception {_                if (simpleKdc != null) {_                    try {_                        simpleKdc.stop()__                    } catch (KrbException e) {_                        throw ExceptionsHelper.convertToRuntime(e)__                    } finally {_                        System.setProperty("sun.security.krb5.debug", Boolean.toString(krb5DebugBackupConfigValue))__                    }_                }__                if (ldapServer != null) {_                    ldapServer.shutDown(true)__                }_                return null__            }_        })__        logger.info("SimpleKdcServer stoppped.")__    };stop,simple,kdc,server,throws,privileged,action,exception,when,privileged,action,threw,exception;public,synchronized,void,stop,throws,privileged,action,exception,access,controller,do,privileged,new,privileged,exception,action,void,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,void,run,throws,exception,if,simple,kdc,null,try,simple,kdc,stop,catch,krb,exception,e,throw,exceptions,helper,convert,to,runtime,e,finally,system,set,property,sun,security,krb5,debug,boolean,to,string,krb5debug,backup,config,value,if,ldap,server,null,ldap,server,shut,down,true,return,null,logger,info,simple,kdc,server,stoppped
SimpleKdcLdapServer -> public synchronized void createPrincipal(final String principal, final String password) throws Exception;1536964057;Creates a principal in the KDC with the specified user and password.__@param principal principal name, do not include the domain._@param password password._@throws Exception thrown if the principal could not be created.;public synchronized void createPrincipal(final String principal, final String password) throws Exception {_        simpleKdc.createPrincipal(principal, password)__    };creates,a,principal,in,the,kdc,with,the,specified,user,and,password,param,principal,principal,name,do,not,include,the,domain,param,password,password,throws,exception,thrown,if,the,principal,could,not,be,created;public,synchronized,void,create,principal,final,string,principal,final,string,password,throws,exception,simple,kdc,create,principal,principal,password
SimpleKdcLdapServer -> public synchronized void createPrincipal(final String principal, final String password) throws Exception;1540847035;Creates a principal in the KDC with the specified user and password.__@param principal principal name, do not include the domain._@param password password._@throws Exception thrown if the principal could not be created.;public synchronized void createPrincipal(final String principal, final String password) throws Exception {_        simpleKdc.createPrincipal(principal, password)__    };creates,a,principal,in,the,kdc,with,the,specified,user,and,password,param,principal,principal,name,do,not,include,the,domain,param,password,password,throws,exception,thrown,if,the,principal,could,not,be,created;public,synchronized,void,create,principal,final,string,principal,final,string,password,throws,exception,simple,kdc,create,principal,principal,password
SimpleKdcLdapServer -> public synchronized void createPrincipal(final String principal, final String password) throws Exception;1543988689;Creates a principal in the KDC with the specified user and password.__@param principal principal name, do not include the domain._@param password password._@throws Exception thrown if the principal could not be created.;public synchronized void createPrincipal(final String principal, final String password) throws Exception {_        simpleKdc.createPrincipal(principal, password)__    };creates,a,principal,in,the,kdc,with,the,specified,user,and,password,param,principal,principal,name,do,not,include,the,domain,param,password,password,throws,exception,thrown,if,the,principal,could,not,be,created;public,synchronized,void,create,principal,final,string,principal,final,string,password,throws,exception,simple,kdc,create,principal,principal,password
SimpleKdcLdapServer -> public synchronized void createPrincipal(final String principal, final String password) throws Exception;1551076713;Creates a principal in the KDC with the specified user and password.__@param principal principal name, do not include the domain._@param password password._@throws Exception thrown if the principal could not be created.;public synchronized void createPrincipal(final String principal, final String password) throws Exception {_        simpleKdc.createPrincipal(principal, password)__    };creates,a,principal,in,the,kdc,with,the,specified,user,and,password,param,principal,principal,name,do,not,include,the,domain,param,password,password,throws,exception,thrown,if,the,principal,could,not,be,created;public,synchronized,void,create,principal,final,string,principal,final,string,password,throws,exception,simple,kdc,create,principal,principal,password
SimpleKdcLdapServer -> public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception;1536964057;Constructor for SimpleKdcLdapServer, creates instance of Kdc server and ldap_backend server. Also initializes and starts them with provided configuration._<p>_To stop the KDC and ldap server use {@link #stop()}__@param workDir Base directory for server, used to locate kdc.conf,_backend.conf and kdc.ldiff_@param orgName Org name for base dn_@param domainName domain name for base dn_@param ldiff for ldap directory._@throws Exception when KDC or Ldap server initialization fails;public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception {_        this.workDir = workDir__        this.realm = domainName.toUpperCase(Locale.ROOT) + "." + orgName.toUpperCase(Locale.ROOT)__        this.baseDn = "dc=" + domainName + ",dc=" + orgName__        this.ldiff = ldiff__        this.krb5DebugBackupConfigValue = AccessController.doPrivileged(new PrivilegedExceptionAction<Boolean>() {_            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Boolean run() throws Exception {_                boolean oldDebugSetting = Boolean.parseBoolean(System.getProperty("sun.security.krb5.debug"))__                System.setProperty("sun.security.krb5.debug", Boolean.TRUE.toString())__                return oldDebugSetting__            }_        })___        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {_            @Override_            public Void run() throws Exception {_                init()__                return null__            }_        })__        logger.info("SimpleKdcLdapServer started.")__    };constructor,for,simple,kdc,ldap,server,creates,instance,of,kdc,server,and,ldap,backend,server,also,initializes,and,starts,them,with,provided,configuration,p,to,stop,the,kdc,and,ldap,server,use,link,stop,param,work,dir,base,directory,for,server,used,to,locate,kdc,conf,backend,conf,and,kdc,ldiff,param,org,name,org,name,for,base,dn,param,domain,name,domain,name,for,base,dn,param,ldiff,for,ldap,directory,throws,exception,when,kdc,or,ldap,server,initialization,fails;public,simple,kdc,ldap,server,final,path,work,dir,final,string,org,name,final,string,domain,name,final,path,ldiff,throws,exception,this,work,dir,work,dir,this,realm,domain,name,to,upper,case,locale,root,org,name,to,upper,case,locale,root,this,base,dn,dc,domain,name,dc,org,name,this,ldiff,ldiff,this,krb5debug,backup,config,value,access,controller,do,privileged,new,privileged,exception,action,boolean,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,boolean,run,throws,exception,boolean,old,debug,setting,boolean,parse,boolean,system,get,property,sun,security,krb5,debug,system,set,property,sun,security,krb5,debug,boolean,true,to,string,return,old,debug,setting,access,controller,do,privileged,new,privileged,exception,action,void,override,public,void,run,throws,exception,init,return,null,logger,info,simple,kdc,ldap,server,started
SimpleKdcLdapServer -> public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception;1540847035;Constructor for SimpleKdcLdapServer, creates instance of Kdc server and ldap_backend server. Also initializes and starts them with provided configuration._<p>_To stop the KDC and ldap server use {@link #stop()}__@param workDir Base directory for server, used to locate kdc.conf,_backend.conf and kdc.ldiff_@param orgName Org name for base dn_@param domainName domain name for base dn_@param ldiff for ldap directory._@throws Exception when KDC or Ldap server initialization fails;public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception {_        this.workDir = workDir__        this.realm = domainName.toUpperCase(Locale.ROOT) + "." + orgName.toUpperCase(Locale.ROOT)__        this.baseDn = "dc=" + domainName + ",dc=" + orgName__        this.ldiff = ldiff__        this.krb5DebugBackupConfigValue = AccessController.doPrivileged(new PrivilegedExceptionAction<Boolean>() {_            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Boolean run() throws Exception {_                boolean oldDebugSetting = Boolean.parseBoolean(System.getProperty("sun.security.krb5.debug"))__                System.setProperty("sun.security.krb5.debug", Boolean.TRUE.toString())__                return oldDebugSetting__            }_        })___        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {_            @Override_            public Void run() throws Exception {_                init()__                return null__            }_        })__        logger.info("SimpleKdcLdapServer started.")__    };constructor,for,simple,kdc,ldap,server,creates,instance,of,kdc,server,and,ldap,backend,server,also,initializes,and,starts,them,with,provided,configuration,p,to,stop,the,kdc,and,ldap,server,use,link,stop,param,work,dir,base,directory,for,server,used,to,locate,kdc,conf,backend,conf,and,kdc,ldiff,param,org,name,org,name,for,base,dn,param,domain,name,domain,name,for,base,dn,param,ldiff,for,ldap,directory,throws,exception,when,kdc,or,ldap,server,initialization,fails;public,simple,kdc,ldap,server,final,path,work,dir,final,string,org,name,final,string,domain,name,final,path,ldiff,throws,exception,this,work,dir,work,dir,this,realm,domain,name,to,upper,case,locale,root,org,name,to,upper,case,locale,root,this,base,dn,dc,domain,name,dc,org,name,this,ldiff,ldiff,this,krb5debug,backup,config,value,access,controller,do,privileged,new,privileged,exception,action,boolean,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,boolean,run,throws,exception,boolean,old,debug,setting,boolean,parse,boolean,system,get,property,sun,security,krb5,debug,system,set,property,sun,security,krb5,debug,boolean,true,to,string,return,old,debug,setting,access,controller,do,privileged,new,privileged,exception,action,void,override,public,void,run,throws,exception,init,return,null,logger,info,simple,kdc,ldap,server,started
SimpleKdcLdapServer -> public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception;1543988689;Constructor for SimpleKdcLdapServer, creates instance of Kdc server and ldap_backend server. Also initializes and starts them with provided configuration._<p>_To stop the KDC and ldap server use {@link #stop()}__@param workDir Base directory for server, used to locate kdc.conf,_backend.conf and kdc.ldiff_@param orgName Org name for base dn_@param domainName domain name for base dn_@param ldiff for ldap directory._@throws Exception when KDC or Ldap server initialization fails;public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception {_        this.workDir = workDir__        this.realm = domainName.toUpperCase(Locale.ROOT) + "." + orgName.toUpperCase(Locale.ROOT)__        this.baseDn = "dc=" + domainName + ",dc=" + orgName__        this.ldiff = ldiff__        this.krb5DebugBackupConfigValue = AccessController.doPrivileged(new PrivilegedExceptionAction<Boolean>() {_            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Boolean run() throws Exception {_                boolean oldDebugSetting = Boolean.parseBoolean(System.getProperty("sun.security.krb5.debug"))__                System.setProperty("sun.security.krb5.debug", Boolean.TRUE.toString())__                return oldDebugSetting__            }_        })___        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {_            @Override_            public Void run() throws Exception {_                init()__                return null__            }_        })__        logger.info("SimpleKdcLdapServer started.")__    };constructor,for,simple,kdc,ldap,server,creates,instance,of,kdc,server,and,ldap,backend,server,also,initializes,and,starts,them,with,provided,configuration,p,to,stop,the,kdc,and,ldap,server,use,link,stop,param,work,dir,base,directory,for,server,used,to,locate,kdc,conf,backend,conf,and,kdc,ldiff,param,org,name,org,name,for,base,dn,param,domain,name,domain,name,for,base,dn,param,ldiff,for,ldap,directory,throws,exception,when,kdc,or,ldap,server,initialization,fails;public,simple,kdc,ldap,server,final,path,work,dir,final,string,org,name,final,string,domain,name,final,path,ldiff,throws,exception,this,work,dir,work,dir,this,realm,domain,name,to,upper,case,locale,root,org,name,to,upper,case,locale,root,this,base,dn,dc,domain,name,dc,org,name,this,ldiff,ldiff,this,krb5debug,backup,config,value,access,controller,do,privileged,new,privileged,exception,action,boolean,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,boolean,run,throws,exception,boolean,old,debug,setting,boolean,parse,boolean,system,get,property,sun,security,krb5,debug,system,set,property,sun,security,krb5,debug,boolean,true,to,string,return,old,debug,setting,access,controller,do,privileged,new,privileged,exception,action,void,override,public,void,run,throws,exception,init,return,null,logger,info,simple,kdc,ldap,server,started
SimpleKdcLdapServer -> public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception;1551076713;Constructor for SimpleKdcLdapServer, creates instance of Kdc server and ldap_backend server. Also initializes and starts them with provided configuration._<p>_To stop the KDC and ldap server use {@link #stop()}__@param workDir Base directory for server, used to locate kdc.conf,_backend.conf and kdc.ldiff_@param orgName Org name for base dn_@param domainName domain name for base dn_@param ldiff for ldap directory._@throws Exception when KDC or Ldap server initialization fails;public SimpleKdcLdapServer(final Path workDir, final String orgName, final String domainName, final Path ldiff) throws Exception {_        this.workDir = workDir__        this.realm = domainName.toUpperCase(Locale.ROOT) + "." + orgName.toUpperCase(Locale.ROOT)__        this.baseDn = "dc=" + domainName + ",dc=" + orgName__        this.ldiff = ldiff__        this.krb5DebugBackupConfigValue = AccessController.doPrivileged(new PrivilegedExceptionAction<Boolean>() {_            @Override_            @SuppressForbidden(reason = "set or clear system property krb5 debug in kerberos tests")_            public Boolean run() throws Exception {_                boolean oldDebugSetting = Boolean.parseBoolean(System.getProperty("sun.security.krb5.debug"))__                System.setProperty("sun.security.krb5.debug", Boolean.TRUE.toString())__                return oldDebugSetting__            }_        })___        AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {_            @Override_            public Void run() throws Exception {_                if (ESTestCase.awaitBusy(() -> init()) == false) {_                    throw new IllegalStateException("could not initialize SimpleKdcLdapServer")__                }_                return null__            }_        })__        logger.info("SimpleKdcLdapServer started.")__    };constructor,for,simple,kdc,ldap,server,creates,instance,of,kdc,server,and,ldap,backend,server,also,initializes,and,starts,them,with,provided,configuration,p,to,stop,the,kdc,and,ldap,server,use,link,stop,param,work,dir,base,directory,for,server,used,to,locate,kdc,conf,backend,conf,and,kdc,ldiff,param,org,name,org,name,for,base,dn,param,domain,name,domain,name,for,base,dn,param,ldiff,for,ldap,directory,throws,exception,when,kdc,or,ldap,server,initialization,fails;public,simple,kdc,ldap,server,final,path,work,dir,final,string,org,name,final,string,domain,name,final,path,ldiff,throws,exception,this,work,dir,work,dir,this,realm,domain,name,to,upper,case,locale,root,org,name,to,upper,case,locale,root,this,base,dn,dc,domain,name,dc,org,name,this,ldiff,ldiff,this,krb5debug,backup,config,value,access,controller,do,privileged,new,privileged,exception,action,boolean,override,suppress,forbidden,reason,set,or,clear,system,property,krb5,debug,in,kerberos,tests,public,boolean,run,throws,exception,boolean,old,debug,setting,boolean,parse,boolean,system,get,property,sun,security,krb5,debug,system,set,property,sun,security,krb5,debug,boolean,true,to,string,return,old,debug,setting,access,controller,do,privileged,new,privileged,exception,action,void,override,public,void,run,throws,exception,if,estest,case,await,busy,init,false,throw,new,illegal,state,exception,could,not,initialize,simple,kdc,ldap,server,return,null,logger,info,simple,kdc,ldap,server,started
SimpleKdcLdapServer -> @SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")     public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception;1536964057;Creates multiple principals in the KDC and adds them to a keytab file.__@param keytabFile keytab file to add the created principals. If keytab file_exists and then always appends to it._@param principals principals to add to the KDC, do not include the domain._@throws Exception thrown if the principals or the keytab file could not be_created.;@SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")_    public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception {_        simpleKdc.createPrincipals(principals)__        for (String principal : principals) {_            simpleKdc.getKadmin().exportKeytab(keytabFile.toFile(), principal)__        }_    };creates,multiple,principals,in,the,kdc,and,adds,them,to,a,keytab,file,param,keytab,file,keytab,file,to,add,the,created,principals,if,keytab,file,exists,and,then,always,appends,to,it,param,principals,principals,to,add,to,the,kdc,do,not,include,the,domain,throws,exception,thrown,if,the,principals,or,the,keytab,file,could,not,be,created;suppress,forbidden,reason,uses,apache,kdc,which,requires,usage,of,java,io,file,in,order,to,create,a,simple,kdc,server,public,synchronized,void,create,principal,final,path,keytab,file,final,string,principals,throws,exception,simple,kdc,create,principals,principals,for,string,principal,principals,simple,kdc,get,kadmin,export,keytab,keytab,file,to,file,principal
SimpleKdcLdapServer -> @SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")     public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception;1540847035;Creates multiple principals in the KDC and adds them to a keytab file.__@param keytabFile keytab file to add the created principals. If keytab file_exists and then always appends to it._@param principals principals to add to the KDC, do not include the domain._@throws Exception thrown if the principals or the keytab file could not be_created.;@SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")_    public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception {_        simpleKdc.createPrincipals(principals)__        for (String principal : principals) {_            simpleKdc.getKadmin().exportKeytab(keytabFile.toFile(), principal)__        }_    };creates,multiple,principals,in,the,kdc,and,adds,them,to,a,keytab,file,param,keytab,file,keytab,file,to,add,the,created,principals,if,keytab,file,exists,and,then,always,appends,to,it,param,principals,principals,to,add,to,the,kdc,do,not,include,the,domain,throws,exception,thrown,if,the,principals,or,the,keytab,file,could,not,be,created;suppress,forbidden,reason,uses,apache,kdc,which,requires,usage,of,java,io,file,in,order,to,create,a,simple,kdc,server,public,synchronized,void,create,principal,final,path,keytab,file,final,string,principals,throws,exception,simple,kdc,create,principals,principals,for,string,principal,principals,simple,kdc,get,kadmin,export,keytab,keytab,file,to,file,principal
SimpleKdcLdapServer -> @SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")     public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception;1543988689;Creates multiple principals in the KDC and adds them to a keytab file.__@param keytabFile keytab file to add the created principals. If keytab file_exists and then always appends to it._@param principals principals to add to the KDC, do not include the domain._@throws Exception thrown if the principals or the keytab file could not be_created.;@SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")_    public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception {_        simpleKdc.createPrincipals(principals)__        for (String principal : principals) {_            simpleKdc.getKadmin().exportKeytab(keytabFile.toFile(), principal)__        }_    };creates,multiple,principals,in,the,kdc,and,adds,them,to,a,keytab,file,param,keytab,file,keytab,file,to,add,the,created,principals,if,keytab,file,exists,and,then,always,appends,to,it,param,principals,principals,to,add,to,the,kdc,do,not,include,the,domain,throws,exception,thrown,if,the,principals,or,the,keytab,file,could,not,be,created;suppress,forbidden,reason,uses,apache,kdc,which,requires,usage,of,java,io,file,in,order,to,create,a,simple,kdc,server,public,synchronized,void,create,principal,final,path,keytab,file,final,string,principals,throws,exception,simple,kdc,create,principals,principals,for,string,principal,principals,simple,kdc,get,kadmin,export,keytab,keytab,file,to,file,principal
SimpleKdcLdapServer -> @SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")     public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception;1551076713;Creates multiple principals in the KDC and adds them to a keytab file.__@param keytabFile keytab file to add the created principals. If keytab file_exists and then always appends to it._@param principals principals to add to the KDC, do not include the domain._@throws Exception thrown if the principals or the keytab file could not be_created.;@SuppressForbidden(reason = "Uses Apache Kdc which requires usage of java.io.File in order to create a SimpleKdcServer")_    public synchronized void createPrincipal(final Path keytabFile, final String... principals) throws Exception {_        simpleKdc.createPrincipals(principals)__        for (String principal : principals) {_            simpleKdc.getKadmin().exportKeytab(keytabFile.toFile(), principal)__        }_    };creates,multiple,principals,in,the,kdc,and,adds,them,to,a,keytab,file,param,keytab,file,keytab,file,to,add,the,created,principals,if,keytab,file,exists,and,then,always,appends,to,it,param,principals,principals,to,add,to,the,kdc,do,not,include,the,domain,throws,exception,thrown,if,the,principals,or,the,keytab,file,could,not,be,created;suppress,forbidden,reason,uses,apache,kdc,which,requires,usage,of,java,io,file,in,order,to,create,a,simple,kdc,server,public,synchronized,void,create,principal,final,path,keytab,file,final,string,principals,throws,exception,simple,kdc,create,principals,principals,for,string,principal,principals,simple,kdc,get,kadmin,export,keytab,keytab,file,to,file,principal
