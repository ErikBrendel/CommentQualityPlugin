commented;modifiers;parameterAmount;loc;comment;code
false;public;0;55;;public void testOutOfMemoryErrorWhileTriggeredIsRethrownAndIsUncaught() throws InterruptedException {     final AtomicReference<Throwable> maybeFatal = new AtomicReference<>().     final CountDownLatch uncaughtLatuch = new CountDownLatch(1).     final Thread.UncaughtExceptionHandler uncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler().     try {         /*              * We want to test that the out of memory error thrown from the scheduler engine goes uncaught on another thread. this gives us              * confidence that an error thrown during a triggered event will lead to the node being torn down.              */         final AtomicReference<Thread> maybeThread = new AtomicReference<>().         Thread.setDefaultUncaughtExceptionHandler((t, e) -> {             maybeFatal.set(e).             maybeThread.set(Thread.currentThread()).             uncaughtLatuch.countDown().         }).         final Logger mockLogger = mock(Logger.class).         final SchedulerEngine engine = new SchedulerEngine(Settings.EMPTY, Clock.systemUTC(), mockLogger).         try {             final AtomicBoolean trigger = new AtomicBoolean().             engine.register(event -> {                 if (trigger.compareAndSet(false, true)) {                     throw new OutOfMemoryError("640K ought to be enough for anybody").                 } else {                     fail("listener invoked twice").                 }             }).             final CountDownLatch schedulerLatch = new CountDownLatch(1).             engine.add(new SchedulerEngine.Job(getTestName(), (startTime, now) -> {                 if (schedulerLatch.getCount() == 1) {                     schedulerLatch.countDown().                     return 0.                 } else {                     throw new AssertionError("nextScheduledTimeAfter invoked more than the expected number of times").                 }             })).             uncaughtLatuch.await().             assertTrue(trigger.get()).             assertNotNull(maybeFatal.get()).             assertThat(maybeFatal.get(), instanceOf(OutOfMemoryError.class)).             assertThat(maybeFatal.get(), hasToString(containsString("640K ought to be enough for anybody"))).             assertNotNull(maybeThread.get()).             // the error should be rethrown on another thread             assertThat(maybeThread.get(), not(equalTo(Thread.currentThread()))).             schedulerLatch.await().             // we never logged anything             verifyNoMoreInteractions(mockLogger).         } finally {             engine.stop().         }     } finally {         // restore the uncaught exception handler         Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler).     } }
