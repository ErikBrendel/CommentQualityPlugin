commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testKerbTicketGeneratedForDifferentServerFailsValidation() throws Exception {     createPrincipalKeyTab(workDir, "differentServer").     // Client login and init token preparation     final String clientUserName = randomFrom(clientUserNames).     try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()), principalName("differentServer"), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {         final String base64KerbToken = spnegoClient.getBase64EncodedTokenForSpnegoHeader().         assertThat(base64KerbToken, is(notNullValue())).         final Environment env = TestEnvironment.newEnvironment(globalSettings).         final Path keytabPath = getKeytabPath(env).         final PlainActionFuture<Tuple<String, String>> future = new PlainActionFuture<>().         kerberosTicketValidator.validateTicket(Base64.getDecoder().decode(base64KerbToken), keytabPath, true, future).         final GSSException gssException = expectThrows(GSSException.class, () -> unwrapExpectedExceptionFromFutureAndThrow(future)).         assertThat(gssException.getMajor(), equalTo(GSSException.FAILURE)).     } }
false;public;1;4;;@Override public void onResponse(Tuple<String, String> response) {     fail("expected exception to be thrown of type GSSException"). }
false;public;1;7;;@Override public void onFailure(Exception e) {     assertThat(exceptionHandled, is(false)).     assertThat(e, instanceOf(GSSException.class)).     assertThat(((GSSException) e).getMajor(), equalTo(GSSException.DEFECTIVE_TOKEN)).     exceptionHandled = true. }
false;public;0;23;;public void testInvalidKerbTicketFailsValidation() throws Exception {     final String base64KerbToken = Base64.getEncoder().encodeToString(randomByteArrayOfLength(5)).     final Environment env = TestEnvironment.newEnvironment(globalSettings).     final Path keytabPath = getKeytabPath(env).     kerberosTicketValidator.validateTicket(Base64.getDecoder().decode(base64KerbToken), keytabPath, true, new ActionListener<Tuple<String, String>>() {          boolean exceptionHandled = false.          @Override         public void onResponse(Tuple<String, String> response) {             fail("expected exception to be thrown of type GSSException").         }          @Override         public void onFailure(Exception e) {             assertThat(exceptionHandled, is(false)).             assertThat(e, instanceOf(GSSException.class)).             assertThat(((GSSException) e).getMajor(), equalTo(GSSException.DEFECTIVE_TOKEN)).             exceptionHandled = true.         }     }). }
false;public;0;19;;public void testWhenKeyTabWithInvalidContentFailsValidation() throws LoginException, GSSException, IOException, PrivilegedActionException {     // Client login and init token preparation     final String clientUserName = randomFrom(clientUserNames).     try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), new SecureString("pwd".toCharArray()), principalName(randomFrom(serviceUserNames)), randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {         final String base64KerbToken = spnegoClient.getBase64EncodedTokenForSpnegoHeader().         assertThat(base64KerbToken, is(notNullValue())).         final Path ktabPath = KerberosRealmTestCase.writeKeyTab(workDir.resolve("invalid.keytab"), "not - a - valid - key - tab").         settings = KerberosRealmTestCase.buildKerberosRealmSettings(REALM_NAME, ktabPath.toString()).         final Environment env = TestEnvironment.newEnvironment(globalSettings).         final Path keytabPath = getKeytabPath(env).         final PlainActionFuture<Tuple<String, String>> future = new PlainActionFuture<>().         kerberosTicketValidator.validateTicket(Base64.getDecoder().decode(base64KerbToken), keytabPath, true, future).         final GSSException gssException = expectThrows(GSSException.class, () -> unwrapExpectedExceptionFromFutureAndThrow(future)).         assertThat(gssException.getMajor(), equalTo(GSSException.FAILURE)).     } }
false;public;0;23;;public void testValidKebrerosTicket() throws PrivilegedActionException, GSSException, LoginException {     // Client login and init token preparation     final String clientUserName = randomFrom(clientUserNames).     final SecureString password = new SecureString("pwd".toCharArray()).     final String servicePrincipalName = principalName(randomFrom(serviceUserNames)).     try (SpnegoClient spnegoClient = new SpnegoClient(principalName(clientUserName), password, servicePrincipalName, randomFrom(KerberosTicketValidator.SUPPORTED_OIDS))) {         final String base64KerbToken = spnegoClient.getBase64EncodedTokenForSpnegoHeader().         assertThat(base64KerbToken, is(notNullValue())).         final Environment env = TestEnvironment.newEnvironment(globalSettings).         final Path keytabPath = getKeytabPath(env).         final PlainActionFuture<Tuple<String, String>> future = new PlainActionFuture<>().         kerberosTicketValidator.validateTicket(Base64.getDecoder().decode(base64KerbToken), keytabPath, true, future).         assertThat(future.actionGet(), is(notNullValue())).         assertThat(future.actionGet().v1(), equalTo(principalName(clientUserName))).         assertThat(future.actionGet().v2(), is(notNullValue())).         final String outToken = spnegoClient.handleResponse(future.actionGet().v2()).         assertThat(outToken, is(nullValue())).         assertThat(spnegoClient.isEstablished(), is(true)).     } }
false;private;1;11;;private void unwrapExpectedExceptionFromFutureAndThrow(PlainActionFuture<Tuple<String, String>> future) throws Throwable {     try {         future.actionGet().     } catch (Throwable t) {         Throwable throwThis = t.         while (throwThis instanceof UncategorizedExecutionException || throwThis instanceof ExecutionException) {             throwThis = throwThis.getCause().         }         throw throwThis.     } }
