# id;timestamp;commentText;codeText;commentWords;codeWords
SpnegoClient -> public void close() throws LoginException, GSSException, PrivilegedActionException;1536964057;Spnego Client after usage needs to be closed in order to logout from_{@link LoginContext} and dispose {@link GSSContext};public void close() throws LoginException, GSSException, PrivilegedActionException {_        if (loginContext != null) {_            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                loginContext.logout()__                return null__            })__        }_        if (gssContext != null) {_            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                gssContext.dispose()__                return null__            })__        }_    };spnego,client,after,usage,needs,to,be,closed,in,order,to,logout,from,link,login,context,and,dispose,link,gsscontext;public,void,close,throws,login,exception,gssexception,privileged,action,exception,if,login,context,null,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,if,gss,context,null,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null
SpnegoClient -> public void close() throws LoginException, GSSException, PrivilegedActionException;1539615817;Spnego Client after usage needs to be closed in order to logout from_{@link LoginContext} and dispose {@link GSSContext};public void close() throws LoginException, GSSException, PrivilegedActionException {_        if (loginContext != null) {_            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                loginContext.logout()__                return null__            })__        }_        if (gssContext != null) {_            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                gssContext.dispose()__                return null__            })__        }_    };spnego,client,after,usage,needs,to,be,closed,in,order,to,logout,from,link,login,context,and,dispose,link,gsscontext;public,void,close,throws,login,exception,gssexception,privileged,action,exception,if,login,context,null,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,if,gss,context,null,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null
SpnegoClient -> public void close() throws LoginException, GSSException, PrivilegedActionException;1543372183;Spnego Client after usage needs to be closed in order to logout from_{@link LoginContext} and dispose {@link GSSContext};public void close() throws LoginException, GSSException, PrivilegedActionException {_        if (loginContext != null) {_            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                loginContext.logout()__                return null__            })__        }_        if (gssContext != null) {_            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {_                gssContext.dispose()__                return null__            })__        }_    };spnego,client,after,usage,needs,to,be,closed,in,order,to,logout,from,link,login,context,and,dispose,link,gsscontext;public,void,close,throws,login,exception,gssexception,privileged,action,exception,if,login,context,null,access,controller,do,privileged,privileged,exception,action,void,login,context,logout,return,null,if,gss,context,null,access,controller,do,privileged,privileged,exception,action,void,gss,context,dispose,return,null
SpnegoClient -> boolean isEstablished();1536964057;@return {@code true} If the gss security context was established;boolean isEstablished() {_        return gssContext.isEstablished()__    };return,code,true,if,the,gss,security,context,was,established;boolean,is,established,return,gss,context,is,established
SpnegoClient -> boolean isEstablished();1539615817;@return {@code true} If the gss security context was established;boolean isEstablished() {_        return gssContext.isEstablished()__    };return,code,true,if,the,gss,security,context,was,established;boolean,is,established,return,gss,context,is,established
SpnegoClient -> boolean isEstablished();1543372183;@return {@code true} If the gss security context was established;boolean isEstablished() {_        return gssContext.isEstablished()__    };return,code,true,if,the,gss,security,context,was,established;boolean,is,established,return,gss,context,is,established
SpnegoClient -> private static LoginContext loginUsingPassword(final String principal, final SecureString password) throws LoginException;1536964057;Performs authentication using provided principal name and password for client__@param principal Principal name_@param password {@link SecureString}_@return authenticated {@link LoginContext} instance. Note: This needs to be_closed {@link LoginContext#logout()} after usage._@throws LoginException thrown if problem with login configuration or when login fails;private static LoginContext loginUsingPassword(final String principal, final SecureString password) throws LoginException {_        final Set<Principal> principals = Collections.singleton(new KerberosPrincipal(principal))___        final Subject subject = new Subject(false, principals, Collections.emptySet(), Collections.emptySet())___        final Configuration conf = new PasswordJaasConf(principal)__        final CallbackHandler callback = new KrbCallbackHandler(principal, password)__        final LoginContext loginContext = new LoginContext(CRED_CONF_NAME, subject, callback, conf)__        loginContext.login()__        return loginContext__    };performs,authentication,using,provided,principal,name,and,password,for,client,param,principal,principal,name,param,password,link,secure,string,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,link,login,context,logout,after,usage,throws,login,exception,thrown,if,problem,with,login,configuration,or,when,login,fails;private,static,login,context,login,using,password,final,string,principal,final,secure,string,password,throws,login,exception,final,set,principal,principals,collections,singleton,new,kerberos,principal,principal,final,subject,subject,new,subject,false,principals,collections,empty,set,collections,empty,set,final,configuration,conf,new,password,jaas,conf,principal,final,callback,handler,callback,new,krb,callback,handler,principal,password,final,login,context,login,context,new,login,context,subject,callback,conf,login,context,login,return,login,context
SpnegoClient -> private static LoginContext loginUsingPassword(final String principal, final SecureString password) throws LoginException;1539615817;Performs authentication using provided principal name and password for client__@param principal Principal name_@param password {@link SecureString}_@return authenticated {@link LoginContext} instance. Note: This needs to be_closed {@link LoginContext#logout()} after usage._@throws LoginException thrown if problem with login configuration or when login fails;private static LoginContext loginUsingPassword(final String principal, final SecureString password) throws LoginException {_        final Set<Principal> principals = Collections.singleton(new KerberosPrincipal(principal))___        final Subject subject = new Subject(false, principals, Collections.emptySet(), Collections.emptySet())___        final Configuration conf = new PasswordJaasConf(principal)__        final CallbackHandler callback = new KrbCallbackHandler(principal, password)__        final LoginContext loginContext = new LoginContext(CRED_CONF_NAME, subject, callback, conf)__        loginContext.login()__        return loginContext__    };performs,authentication,using,provided,principal,name,and,password,for,client,param,principal,principal,name,param,password,link,secure,string,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,link,login,context,logout,after,usage,throws,login,exception,thrown,if,problem,with,login,configuration,or,when,login,fails;private,static,login,context,login,using,password,final,string,principal,final,secure,string,password,throws,login,exception,final,set,principal,principals,collections,singleton,new,kerberos,principal,principal,final,subject,subject,new,subject,false,principals,collections,empty,set,collections,empty,set,final,configuration,conf,new,password,jaas,conf,principal,final,callback,handler,callback,new,krb,callback,handler,principal,password,final,login,context,login,context,new,login,context,subject,callback,conf,login,context,login,return,login,context
SpnegoClient -> private static LoginContext loginUsingPassword(final String principal, final SecureString password) throws LoginException;1543372183;Performs authentication using provided principal name and password for client__@param principal Principal name_@param password {@link SecureString}_@return authenticated {@link LoginContext} instance. Note: This needs to be_closed {@link LoginContext#logout()} after usage._@throws LoginException thrown if problem with login configuration or when login fails;private static LoginContext loginUsingPassword(final String principal, final SecureString password) throws LoginException {_        final Set<Principal> principals = Collections.singleton(new KerberosPrincipal(principal))___        final Subject subject = new Subject(false, principals, Collections.emptySet(), Collections.emptySet())___        final Configuration conf = new PasswordJaasConf(principal)__        final CallbackHandler callback = new KrbCallbackHandler(principal, password)__        final LoginContext loginContext = new LoginContext(CRED_CONF_NAME, subject, callback, conf)__        loginContext.login()__        return loginContext__    };performs,authentication,using,provided,principal,name,and,password,for,client,param,principal,principal,name,param,password,link,secure,string,return,authenticated,link,login,context,instance,note,this,needs,to,be,closed,link,login,context,logout,after,usage,throws,login,exception,thrown,if,problem,with,login,configuration,or,when,login,fails;private,static,login,context,login,using,password,final,string,principal,final,secure,string,password,throws,login,exception,final,set,principal,principals,collections,singleton,new,kerberos,principal,principal,final,subject,subject,new,subject,false,principals,collections,empty,set,collections,empty,set,final,configuration,conf,new,password,jaas,conf,principal,final,callback,handler,callback,new,krb,callback,handler,principal,password,final,login,context,login,context,new,login,context,subject,callback,conf,login,context,login,return,login,context
SpnegoClient -> String getBase64EncodedTokenForSpnegoHeader() throws PrivilegedActionException;1536964057;GSSContext initiator side handling, initiates context establishment and returns the_base64 encoded token to be sent to server.__@return Base64 encoded token_@throws PrivilegedActionException when privileged action threw exception;String getBase64EncodedTokenForSpnegoHeader() throws PrivilegedActionException {_        final byte[] outToken = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.initSecContext(new byte[0], 0, 0))__        return Base64.getEncoder().encodeToString(outToken)__    };gsscontext,initiator,side,handling,initiates,context,establishment,and,returns,the,base64,encoded,token,to,be,sent,to,server,return,base64,encoded,token,throws,privileged,action,exception,when,privileged,action,threw,exception;string,get,base64encoded,token,for,spnego,header,throws,privileged,action,exception,final,byte,out,token,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,byte,gss,context,init,sec,context,new,byte,0,0,0,return,base64,get,encoder,encode,to,string,out,token
SpnegoClient -> String getBase64EncodedTokenForSpnegoHeader() throws PrivilegedActionException;1539615817;GSSContext initiator side handling, initiates context establishment and returns the_base64 encoded token to be sent to server.__@return Base64 encoded token_@throws PrivilegedActionException when privileged action threw exception;String getBase64EncodedTokenForSpnegoHeader() throws PrivilegedActionException {_        final byte[] outToken = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.initSecContext(new byte[0], 0, 0))__        return Base64.getEncoder().encodeToString(outToken)__    };gsscontext,initiator,side,handling,initiates,context,establishment,and,returns,the,base64,encoded,token,to,be,sent,to,server,return,base64,encoded,token,throws,privileged,action,exception,when,privileged,action,threw,exception;string,get,base64encoded,token,for,spnego,header,throws,privileged,action,exception,final,byte,out,token,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,byte,gss,context,init,sec,context,new,byte,0,0,0,return,base64,get,encoder,encode,to,string,out,token
SpnegoClient -> String getBase64EncodedTokenForSpnegoHeader() throws PrivilegedActionException;1543372183;GSSContext initiator side handling, initiates context establishment and returns the_base64 encoded token to be sent to server.__@return Base64 encoded token_@throws PrivilegedActionException when privileged action threw exception;String getBase64EncodedTokenForSpnegoHeader() throws PrivilegedActionException {_        final byte[] outToken = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.initSecContext(new byte[0], 0, 0))__        return Base64.getEncoder().encodeToString(outToken)__    };gsscontext,initiator,side,handling,initiates,context,establishment,and,returns,the,base64,encoded,token,to,be,sent,to,server,return,base64,encoded,token,throws,privileged,action,exception,when,privileged,action,threw,exception;string,get,base64encoded,token,for,spnego,header,throws,privileged,action,exception,final,byte,out,token,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,byte,gss,context,init,sec,context,new,byte,0,0,0,return,base64,get,encoder,encode,to,string,out,token
SpnegoClient -> String handleResponse(final String base64Token) throws PrivilegedActionException;1536964057;Handles server response and returns new token if any to be sent to server.__@param base64Token inToken received from server passed to initSecContext for_gss negotiation_@return Base64 encoded token to be sent to server. May return {@code null} if_nothing to be sent._@throws PrivilegedActionException when privileged action threw exception;String handleResponse(final String base64Token) throws PrivilegedActionException {_        if (gssContext.isEstablished()) {_            throw new IllegalStateException("GSS Context has already been established")__        }_        final byte[] token = Base64.getDecoder().decode(base64Token)__        final byte[] outToken = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.initSecContext(token, 0, token.length))__        if (outToken == null || outToken.length == 0) {_            return null__        }_        return Base64.getEncoder().encodeToString(outToken)__    };handles,server,response,and,returns,new,token,if,any,to,be,sent,to,server,param,base64token,in,token,received,from,server,passed,to,init,sec,context,for,gss,negotiation,return,base64,encoded,token,to,be,sent,to,server,may,return,code,null,if,nothing,to,be,sent,throws,privileged,action,exception,when,privileged,action,threw,exception;string,handle,response,final,string,base64token,throws,privileged,action,exception,if,gss,context,is,established,throw,new,illegal,state,exception,gss,context,has,already,been,established,final,byte,token,base64,get,decoder,decode,base64token,final,byte,out,token,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,byte,gss,context,init,sec,context,token,0,token,length,if,out,token,null,out,token,length,0,return,null,return,base64,get,encoder,encode,to,string,out,token
SpnegoClient -> String handleResponse(final String base64Token) throws PrivilegedActionException;1539615817;Handles server response and returns new token if any to be sent to server.__@param base64Token inToken received from server passed to initSecContext for_gss negotiation_@return Base64 encoded token to be sent to server. May return {@code null} if_nothing to be sent._@throws PrivilegedActionException when privileged action threw exception;String handleResponse(final String base64Token) throws PrivilegedActionException {_        if (gssContext.isEstablished()) {_            throw new IllegalStateException("GSS Context has already been established")__        }_        final byte[] token = Base64.getDecoder().decode(base64Token)__        final byte[] outToken = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.initSecContext(token, 0, token.length))__        if (outToken == null || outToken.length == 0) {_            return null__        }_        return Base64.getEncoder().encodeToString(outToken)__    };handles,server,response,and,returns,new,token,if,any,to,be,sent,to,server,param,base64token,in,token,received,from,server,passed,to,init,sec,context,for,gss,negotiation,return,base64,encoded,token,to,be,sent,to,server,may,return,code,null,if,nothing,to,be,sent,throws,privileged,action,exception,when,privileged,action,threw,exception;string,handle,response,final,string,base64token,throws,privileged,action,exception,if,gss,context,is,established,throw,new,illegal,state,exception,gss,context,has,already,been,established,final,byte,token,base64,get,decoder,decode,base64token,final,byte,out,token,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,byte,gss,context,init,sec,context,token,0,token,length,if,out,token,null,out,token,length,0,return,null,return,base64,get,encoder,encode,to,string,out,token
SpnegoClient -> String handleResponse(final String base64Token) throws PrivilegedActionException;1543372183;Handles server response and returns new token if any to be sent to server.__@param base64Token inToken received from server passed to initSecContext for_gss negotiation_@return Base64 encoded token to be sent to server. May return {@code null} if_nothing to be sent._@throws PrivilegedActionException when privileged action threw exception;String handleResponse(final String base64Token) throws PrivilegedActionException {_        if (gssContext.isEstablished()) {_            throw new IllegalStateException("GSS Context has already been established")__        }_        final byte[] token = Base64.getDecoder().decode(base64Token)__        final byte[] outToken = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                (PrivilegedExceptionAction<byte[]>) () -> gssContext.initSecContext(token, 0, token.length))__        if (outToken == null || outToken.length == 0) {_            return null__        }_        return Base64.getEncoder().encodeToString(outToken)__    };handles,server,response,and,returns,new,token,if,any,to,be,sent,to,server,param,base64token,in,token,received,from,server,passed,to,init,sec,context,for,gss,negotiation,return,base64,encoded,token,to,be,sent,to,server,may,return,code,null,if,nothing,to,be,sent,throws,privileged,action,exception,when,privileged,action,threw,exception;string,handle,response,final,string,base64token,throws,privileged,action,exception,if,gss,context,is,established,throw,new,illegal,state,exception,gss,context,has,already,been,established,final,byte,token,base64,get,decoder,decode,base64token,final,byte,out,token,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,byte,gss,context,init,sec,context,token,0,token,length,if,out,token,null,out,token,length,0,return,null,return,base64,get,encoder,encode,to,string,out,token
SpnegoClient -> SpnegoClient(final String userPrincipalName, final SecureString password, final String servicePrincipalName)             throws PrivilegedActionException, GSSException;1536964057;Creates SpengoClient to interact with given service principal<br>_Use {@link #close()} to logout {@link LoginContext} and dispose_{@link GSSContext} after usage._@param userPrincipalName User principal name for login as client_@param password password for client_@param servicePrincipalName Service principal name with whom this client_interacts with._@throws PrivilegedActionException when privileged action threw exception_@throws GSSException thrown when GSS API error occurs;SpnegoClient(final String userPrincipalName, final SecureString password, final String servicePrincipalName)_            throws PrivilegedActionException, GSSException {_        String oldUseSubjectCredsOnlyFlag = null__        try {_            oldUseSubjectCredsOnlyFlag = getAndSetUseSubjectCredsOnlySystemProperty("true")__            LOGGER.info("SpnegoClient with userPrincipalName : {}", userPrincipalName)__            final GSSName gssUserPrincipalName = gssManager.createName(userPrincipalName, GSSName.NT_USER_NAME)__            final GSSName gssServicePrincipalName = gssManager.createName(servicePrincipalName, GSSName.NT_USER_NAME)__            loginContext = AccessController_                    .doPrivileged((PrivilegedExceptionAction<LoginContext>) () -> loginUsingPassword(userPrincipalName, password))__            final GSSCredential userCreds = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                    (PrivilegedExceptionAction<GSSCredential>) () -> gssManager.createCredential(gssUserPrincipalName,_                            GSSCredential.DEFAULT_LIFETIME, KerberosTicketValidator.SPNEGO_OID, GSSCredential.INITIATE_ONLY))__            gssContext = gssManager.createContext(gssServicePrincipalName.canonicalize(KerberosTicketValidator.SPNEGO_OID),_                    KerberosTicketValidator.SPNEGO_OID, userCreds, GSSCredential.DEFAULT_LIFETIME)__            gssContext.requestMutualAuth(true)__        } catch (PrivilegedActionException pve) {_            LOGGER.error("privileged action exception, with root cause", pve.getException())__            throw pve__        } finally {_            getAndSetUseSubjectCredsOnlySystemProperty(oldUseSubjectCredsOnlyFlag)__        }_    };creates,spengo,client,to,interact,with,given,service,principal,br,use,link,close,to,logout,link,login,context,and,dispose,link,gsscontext,after,usage,param,user,principal,name,user,principal,name,for,login,as,client,param,password,password,for,client,param,service,principal,name,service,principal,name,with,whom,this,client,interacts,with,throws,privileged,action,exception,when,privileged,action,threw,exception,throws,gssexception,thrown,when,gss,api,error,occurs;spnego,client,final,string,user,principal,name,final,secure,string,password,final,string,service,principal,name,throws,privileged,action,exception,gssexception,string,old,use,subject,creds,only,flag,null,try,old,use,subject,creds,only,flag,get,and,set,use,subject,creds,only,system,property,true,logger,info,spnego,client,with,user,principal,name,user,principal,name,final,gssname,gss,user,principal,name,gss,manager,create,name,user,principal,name,gssname,final,gssname,gss,service,principal,name,gss,manager,create,name,service,principal,name,gssname,login,context,access,controller,do,privileged,privileged,exception,action,login,context,login,using,password,user,principal,name,password,final,gsscredential,user,creds,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,gsscredential,gss,manager,create,credential,gss,user,principal,name,gsscredential,kerberos,ticket,validator,gsscredential,gss,context,gss,manager,create,context,gss,service,principal,name,canonicalize,kerberos,ticket,validator,kerberos,ticket,validator,user,creds,gsscredential,gss,context,request,mutual,auth,true,catch,privileged,action,exception,pve,logger,error,privileged,action,exception,with,root,cause,pve,get,exception,throw,pve,finally,get,and,set,use,subject,creds,only,system,property,old,use,subject,creds,only,flag
SpnegoClient -> SpnegoClient(final String userPrincipalName, final SecureString password, final String servicePrincipalName)             throws PrivilegedActionException, GSSException;1539615817;Creates SpengoClient to interact with given service principal<br>_Use {@link #close()} to logout {@link LoginContext} and dispose_{@link GSSContext} after usage._@param userPrincipalName User principal name for login as client_@param password password for client_@param servicePrincipalName Service principal name with whom this client_interacts with._@throws PrivilegedActionException when privileged action threw exception_@throws GSSException thrown when GSS API error occurs;SpnegoClient(final String userPrincipalName, final SecureString password, final String servicePrincipalName)_            throws PrivilegedActionException, GSSException {_        String oldUseSubjectCredsOnlyFlag = null__        try {_            oldUseSubjectCredsOnlyFlag = getAndSetUseSubjectCredsOnlySystemProperty("true")__            LOGGER.info("SpnegoClient with userPrincipalName : {}", userPrincipalName)__            final GSSName gssUserPrincipalName = gssManager.createName(userPrincipalName, GSSName.NT_USER_NAME)__            final GSSName gssServicePrincipalName = gssManager.createName(servicePrincipalName, GSSName.NT_USER_NAME)__            loginContext = AccessController_                    .doPrivileged((PrivilegedExceptionAction<LoginContext>) () -> loginUsingPassword(userPrincipalName, password))__            final GSSCredential userCreds = KerberosTestCase.doAsWrapper(loginContext.getSubject(),_                    (PrivilegedExceptionAction<GSSCredential>) () -> gssManager.createCredential(gssUserPrincipalName,_                            GSSCredential.DEFAULT_LIFETIME, KerberosTicketValidator.SPNEGO_OID, GSSCredential.INITIATE_ONLY))__            gssContext = gssManager.createContext(gssServicePrincipalName.canonicalize(KerberosTicketValidator.SPNEGO_OID),_                    KerberosTicketValidator.SPNEGO_OID, userCreds, GSSCredential.DEFAULT_LIFETIME)__            gssContext.requestMutualAuth(true)__        } catch (PrivilegedActionException pve) {_            LOGGER.error("privileged action exception, with root cause", pve.getException())__            throw pve__        } finally {_            getAndSetUseSubjectCredsOnlySystemProperty(oldUseSubjectCredsOnlyFlag)__        }_    };creates,spengo,client,to,interact,with,given,service,principal,br,use,link,close,to,logout,link,login,context,and,dispose,link,gsscontext,after,usage,param,user,principal,name,user,principal,name,for,login,as,client,param,password,password,for,client,param,service,principal,name,service,principal,name,with,whom,this,client,interacts,with,throws,privileged,action,exception,when,privileged,action,threw,exception,throws,gssexception,thrown,when,gss,api,error,occurs;spnego,client,final,string,user,principal,name,final,secure,string,password,final,string,service,principal,name,throws,privileged,action,exception,gssexception,string,old,use,subject,creds,only,flag,null,try,old,use,subject,creds,only,flag,get,and,set,use,subject,creds,only,system,property,true,logger,info,spnego,client,with,user,principal,name,user,principal,name,final,gssname,gss,user,principal,name,gss,manager,create,name,user,principal,name,gssname,final,gssname,gss,service,principal,name,gss,manager,create,name,service,principal,name,gssname,login,context,access,controller,do,privileged,privileged,exception,action,login,context,login,using,password,user,principal,name,password,final,gsscredential,user,creds,kerberos,test,case,do,as,wrapper,login,context,get,subject,privileged,exception,action,gsscredential,gss,manager,create,credential,gss,user,principal,name,gsscredential,kerberos,ticket,validator,gsscredential,gss,context,gss,manager,create,context,gss,service,principal,name,canonicalize,kerberos,ticket,validator,kerberos,ticket,validator,user,creds,gsscredential,gss,context,request,mutual,auth,true,catch,privileged,action,exception,pve,logger,error,privileged,action,exception,with,root,cause,pve,get,exception,throw,pve,finally,get,and,set,use,subject,creds,only,system,property,old,use,subject,creds,only,flag
