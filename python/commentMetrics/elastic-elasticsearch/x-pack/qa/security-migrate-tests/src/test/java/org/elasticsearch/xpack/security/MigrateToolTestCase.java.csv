commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;25;;private static Client startClient(Path tempDir, TransportAddress... transportAddresses) {     logger.info("--> Starting Elasticsearch Java TransportClient {}, {}", transportAddresses, tempDir).     Settings clientSettings = Settings.builder().put("cluster.name", "qa_migrate_tests_" + counter.getAndIncrement()).put("client.transport.ignore_cluster_name", true).put("path.home", tempDir).put(SecurityField.USER_SETTING.getKey(), "transport_user:x-pack-test-password").build().     TransportClient client = new PreBuiltXPackTransportClient(clientSettings).addTransportAddresses(transportAddresses).     Exception clientException = null.     try {         logger.info("--> Elasticsearch Java TransportClient started").         ClusterHealthResponse health = client.admin().cluster().prepareHealth().get().         logger.info("--> connected to [{}] cluster which is running [{}] node(s).", health.getClusterName(), health.getNumberOfNodes()).     } catch (Exception e) {         clientException = e.     }     assumeNoException("Sounds like your cluster is not running at " + clusterAddresses, clientException).     return client. }
false;private,static;0;19;;private static Client startClient() throws UnknownHostException {     String[] stringAddresses = clusterAddresses.split(",").     TransportAddress[] transportAddresses = new TransportAddress[stringAddresses.length].     int i = 0.     for (String stringAddress : stringAddresses) {         int lastColon = stringAddress.lastIndexOf(":").         if (lastColon == -1) {             throw new IllegalArgumentException("address [" + clusterAddresses + "] not valid").         }         String ip = stringAddress.substring(0, lastColon).         String port = stringAddress.substring(lastColon + 1).         try {             transportAddresses[i++] = new TransportAddress(InetAddress.getByName(ip), Integer.valueOf(port)).         } catch (NumberFormatException e) {             throw new IllegalArgumentException("port is not valid, expected number but was [" + port + "]").         }     }     return startClient(createTempDir(), transportAddresses). }
false;public,static;0;11;;public static Client getClient() {     if (client == null) {         try {             client = startClient().         } catch (UnknownHostException e) {             logger.error("could not start the client", e).         }         assertThat(client, notNullValue()).     }     return client. }
false;public,static;0;3;;public static String getHttpURL() {     return clusterHttpAddresses. }
false;public,static;0;8;;@BeforeClass public static void initializeSettings() throws UnknownHostException {     clusterAddresses = System.getProperty(TESTS_CLUSTER).     clusterHttpAddresses = System.getProperty(TESTS_HTTP_CLUSTER).     if (clusterAddresses == null || clusterAddresses.isEmpty()) {         throw new UnknownHostException("unable to get a cluster address").     } }
false;public,static;0;7;;@AfterClass public static void stopTransportClient() {     if (client != null) {         client.close().         client = null.     } }
false;public;0;4;;@Before public void defineIndexName() {     doClean(). }
false;public;0;4;;@After public void cleanIndex() {     doClean(). }
false;private;0;9;;private void doClean() {     if (client != null) {         try {             client.admin().indices().prepareDelete("_all").get().         } catch (Exception e) {         // We ignore this cleanup exception         }     } }
