commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;26;;private static Client startClient(Path tempDir, TransportAddress... transportAddresses) {     Settings.Builder builder = Settings.builder().put("node.name", "qa_xpack_smoke_client_" + counter.getAndIncrement()).put("client.transport.ignore_cluster_name", true).put("xpack.security.enabled", false).put(Environment.PATH_HOME_SETTING.getKey(), tempDir).     TransportClient client = new PreBuiltXPackTransportClient(builder.build()).addTransportAddresses(transportAddresses).     logger.info("--> Elasticsearch Java TransportClient started").     Exception clientException = null.     try {         ClusterHealthResponse health = client.admin().cluster().prepareHealth().get().         logger.info("--> connected to [{}] cluster which is running [{}] node(s).", health.getClusterName(), health.getNumberOfNodes()).     } catch (Exception e) {         logger.error("Error getting cluster health", e).         clientException = e.     }     assumeNoException("Sounds like your cluster is not running at " + clusterAddresses, clientException).     return client. }
false;private,static;0;12;;private static Client startClient() throws IOException {     String[] stringAddresses = clusterAddresses.split(",").     TransportAddress[] transportAddresses = new TransportAddress[stringAddresses.length].     int i = 0.     for (String stringAddress : stringAddresses) {         URL url = new URL("http://" + stringAddress).         InetAddress inetAddress = InetAddress.getByName(url.getHost()).         transportAddresses[i++] = new TransportAddress(new InetSocketAddress(inetAddress, url.getPort())).     }     return startClient(createTempDir(), transportAddresses). }
false;public,static;0;11;;public static Client getClient() {     if (client == null) {         try {             client = startClient().         } catch (IOException e) {             logger.error("can not start the client", e).         }         assertThat(client, notNullValue()).     }     return client. }
false;public,static;0;7;;@BeforeClass public static void initializeSettings() {     clusterAddresses = System.getProperty(TESTS_CLUSTER).     if (clusterAddresses == null || clusterAddresses.isEmpty()) {         fail("Must specify " + TESTS_CLUSTER + " for smoke client test").     } }
false;public,static;0;7;;@AfterClass public static void stopTransportClient() {     if (client != null) {         client.close().         client = null.     } }
false;public;0;6;;@Before public void defineIndexName() {     doClean().     index = "qa-xpack-smoke-test-client-" + randomAsciiOfLength(10).toLowerCase(Locale.getDefault()). }
false;public;0;4;;@After public void cleanIndex() {     doClean(). }
false;private;0;9;;private void doClean() {     if (client != null) {         try {             client.admin().indices().prepareDelete(index).get().         } catch (Exception e) {         // We ignore this cleanup exception         }     } }
