commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected Collection<String> templatesToWaitFor() {     return Stream.concat(XPackRestTestHelper.ML_POST_V660_TEMPLATES.stream(), super.templatesToWaitFor().stream()).collect(Collectors.toSet()). }
true;public;0;16;/**  * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results  * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade  */ ;/**  * The purpose of this test is to ensure that when a job is open through a rolling upgrade we upgrade the results  * index mappings when it is assigned to an upgraded node even if no other ML endpoint is called after the upgrade  */ public void testMappingsUpgrade() throws Exception {     switch(CLUSTER_TYPE) {         case OLD:             createAndOpenTestJob().             break.         case MIXED:             // We don't know whether the job is on an old or upgraded node, so cannot assert that the mappings have been upgraded             break.         case UPGRADED:             assertUpgradedMappings().             break.         default:             throw new UnsupportedOperationException("Unknown cluster type [" + CLUSTER_TYPE + "]").     } }
false;private;0;21;;private void createAndOpenTestJob() throws IOException {     Detector.Builder d = new Detector.Builder("metric", "responsetime").     d.setByFieldName("airline").     AnalysisConfig.Builder analysisConfig = new AnalysisConfig.Builder(Collections.singletonList(d.build())).     analysisConfig.setBucketSpan(TimeValue.timeValueMinutes(10)).     Job.Builder job = new Job.Builder(JOB_ID).     job.setAnalysisConfig(analysisConfig).     job.setDataDescription(new DataDescription.Builder()).     // Use a custom index because other rolling upgrade tests meddle with the shared index     job.setResultsIndexName("mappings-upgrade-test").     Request putJob = new Request("PUT", "_ml/anomaly_detectors/" + JOB_ID).     putJob.setJsonEntity(Strings.toString(job.build())).     Response response = client().performRequest(putJob).     assertEquals(200, response.getStatusLine().getStatusCode()).     Request openJob = new Request("POST", "_ml/anomaly_detectors/" + JOB_ID + "/_open").     response = client().performRequest(openJob).     assertEquals(200, response.getStatusLine().getStatusCode()). }
false;private;0;32;;@SuppressWarnings("unchecked") private void assertUpgradedMappings() throws Exception {     assertBusy(() -> {         Request getMappings = new Request("GET", AnomalyDetectorsIndex.resultsWriteAlias(JOB_ID) + "/_mappings").         Response response = client().performRequest(getMappings).         Map<String, Object> responseLevel = entityAsMap(response).         assertNotNull(responseLevel).         Map<String, Object> indexLevel = null.         // so navigating to the next level of the tree must account for both cases         for (Map.Entry<String, Object> entry : responseLevel.entrySet()) {             if (entry.getKey().startsWith(".ml-anomalies-") && entry.getKey().contains("mappings-upgrade-test")) {                 indexLevel = (Map<String, Object>) entry.getValue().                 break.             }         }         assertNotNull(indexLevel).         Map<String, Object> mappingsLevel = (Map<String, Object>) indexLevel.get("mappings").         assertNotNull(mappingsLevel).         Map<String, Object> metaLevel = (Map<String, Object>) mappingsLevel.get("_meta").         assertEquals(Collections.singletonMap("version", Version.CURRENT.toString()), metaLevel).         Map<String, Object> propertiesLevel = (Map<String, Object>) mappingsLevel.get("properties").         assertNotNull(propertiesLevel).         // TODO: as the years go by, the field we assert on here should be changed         // to the most recent field we've added that is NOT of type "keyword"         Map<String, Object> fieldLevel = (Map<String, Object>) propertiesLevel.get("multi_bucket_impact").         assertEquals(Collections.singletonMap("type", "double"), fieldLevel).     }). }
