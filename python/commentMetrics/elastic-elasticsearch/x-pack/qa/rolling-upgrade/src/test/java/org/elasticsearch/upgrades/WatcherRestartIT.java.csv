commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testWatcherRestart() throws Exception {     client().performRequest(new Request("POST", "/_watcher/_stop")).     ensureWatcherStopped().     client().performRequest(new Request("POST", "/_watcher/_start")).     ensureWatcherStarted(). }
false;private;0;10;;private void ensureWatcherStopped() throws Exception {     assertBusy(() -> {         Response stats = client().performRequest(new Request("GET", "_watcher/stats")).         String responseBody = EntityUtils.toString(stats.getEntity(), StandardCharsets.UTF_8).         assertThat(responseBody, containsString("\"watcher_state\":\"stopped\"")).         assertThat(responseBody, not(containsString("\"watcher_state\":\"starting\""))).         assertThat(responseBody, not(containsString("\"watcher_state\":\"started\""))).         assertThat(responseBody, not(containsString("\"watcher_state\":\"stopping\""))).     }). }
false;private;0;10;;private void ensureWatcherStarted() throws Exception {     assertBusy(() -> {         Response response = client().performRequest(new Request("GET", "_watcher/stats")).         String responseBody = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8).         assertThat(responseBody, containsString("\"watcher_state\":\"started\"")).         assertThat(responseBody, not(containsString("\"watcher_state\":\"starting\""))).         assertThat(responseBody, not(containsString("\"watcher_state\":\"stopping\""))).         assertThat(responseBody, not(containsString("\"watcher_state\":\"stopped\""))).     }). }
