commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean preserveIndicesUponCompletion() {     return true. }
false;protected;0;4;;@Override protected boolean preserveReposUponCompletion() {     return true. }
false;protected;0;4;;@Override protected boolean preserveTemplatesUponCompletion() {     return true. }
false;protected;0;4;;@Override protected boolean preserveRollupJobsUponCompletion() {     return true. }
false;protected;0;4;;@Override protected boolean preserveILMPoliciesUponCompletion() {     return true. }
false;public,static;1;12;;public static ClusterType parse(String value) {     switch(value) {         case "old_cluster":             return OLD.         case "mixed_cluster":             return MIXED.         case "upgraded_cluster":             return UPGRADED.         default:             throw new AssertionError("unknown cluster type: " + value).     } }
false;protected;0;6;;@Override protected Settings restClientSettings() {     return Settings.builder().put(ThreadContext.PREFIX + ".Authorization", BASIC_AUTH_VALUE).build(). }
false;protected;0;3;;protected Collection<String> templatesToWaitFor() {     return Collections.singletonList("security-index-template"). }
false;public;0;20;;@Before public void setupForTests() throws Exception {     awaitBusy(() -> {         boolean success = true.         for (String template : templatesToWaitFor()) {             try {                 final Request headRequest = new Request("HEAD", "_template/" + template).                 headRequest.setOptions(allowTypesRemovalWarnings()).                 final boolean exists = adminClient().performRequest(headRequest).getStatusLine().getStatusCode() == 200.                 success &= exists.                 logger.debug("template [{}] exists [{}]", template, exists).             } catch (IOException e) {                 logger.warn("error calling template api", e).             }         }         return success.     }). }
