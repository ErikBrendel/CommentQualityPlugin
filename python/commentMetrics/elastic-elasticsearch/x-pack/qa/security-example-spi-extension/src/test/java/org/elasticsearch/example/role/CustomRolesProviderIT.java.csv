commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected Settings externalClusterClientSettings() {     return Settings.builder().put(ThreadContext.PREFIX + "." + CustomRealm.USER_HEADER, CustomRealm.KNOWN_USER).put(ThreadContext.PREFIX + "." + CustomRealm.PW_HEADER, CustomRealm.KNOWN_PW.toString()).put(NetworkModule.TRANSPORT_TYPE_KEY, "security4").build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Collections.singleton(XPackClientPlugin.class). }
false;public;1;4;;public void setupTestUser(String role) {     SecurityClient securityClient = new SecurityClient(client()).     securityClient.preparePutUser(TEST_USER, TEST_PWD.toCharArray(), Hasher.BCRYPT, role).get(). }
false;public;0;8;;public void testAuthorizedCustomRoleSucceeds() throws Exception {     setupTestUser(ROLE_B).     // roleB has all permissions on index "foo", so creating "foo" should succeed     Request request = new Request("PUT", "/" + INDEX).     request.setOptions(AUTH_OPTIONS).     Response response = getRestClient().performRequest(request).     assertThat(response.getStatusLine().getStatusCode(), is(200)). }
false;public;0;16;;public void testFirstResolvedRoleTakesPrecedence() throws Exception {     // the first custom roles provider has set ROLE_A to only have read permission on the index,     // the second custom roles provider has set ROLE_A to have all permissions, but since     // the first custom role provider appears first in order, it should take precedence and deny     // permission to create the index     setupTestUser(ROLE_A).     // roleB has all permissions on index "foo", so creating "foo" should succeed     try {         Request request = new Request("PUT", "/" + INDEX).         request.setOptions(AUTH_OPTIONS).         getRestClient().performRequest(request).         fail(ROLE_A + " should not be authorized to create index " + INDEX).     } catch (ResponseException e) {         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(403)).     } }
false;public;0;12;;public void testUnresolvedRoleDoesntSucceed() throws Exception {     setupTestUser("unknown").     // roleB has all permissions on index "foo", so creating "foo" should succeed     try {         Request request = new Request("PUT", "/" + INDEX).         request.setOptions(AUTH_OPTIONS).         getRestClient().performRequest(request).         fail(ROLE_A + " should not be authorized to create index " + INDEX).     } catch (ResponseException e) {         assertThat(e.getResponse().getStatusLine().getStatusCode(), is(403)).     } }
