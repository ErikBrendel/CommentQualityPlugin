# id;timestamp;commentText;codeText;commentWords;codeWords
SamlAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1524684173;This is a simple mapping that maps the "thor" user in the "shibboleth" realm to the "kibana_users" role._We could do something more complex, but we have unit tests for role-mapping - this is just to verify that_the mapping runs OK in a real environment.;@Before_    public void setupRoleMapping() throws IOException {_        final StringEntity json = new StringEntity(Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent())_                        .startObject()_                        .array("roles", new String[] { "kibana_user"} )_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("username", "thor").endObject().endObject()_                        .startObject().startObject("field").field("realm.name", "shibboleth").endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject()), ContentType.APPLICATION_JSON)___        final Response response = adminClient().performRequest("PUT", "/_xpack/security/role_mapping/thor-kibana", emptyMap(), json)__        assertOK(response)__    };this,is,a,simple,mapping,that,maps,the,thor,user,in,the,shibboleth,realm,to,the,role,we,could,do,something,more,complex,but,we,have,unit,tests,for,role,mapping,this,is,just,to,verify,that,the,mapping,runs,ok,in,a,real,environment;before,public,void,setup,role,mapping,throws,ioexception,final,string,entity,json,new,string,entity,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,username,thor,end,object,end,object,start,object,start,object,field,field,realm,name,shibboleth,end,object,end,object,end,array,end,object,end,object,content,type,final,response,response,admin,client,perform,request,put,security,thor,kibana,empty,map,json,assert,ok,response
SamlAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1527622193;This is a simple mapping that maps the "thor" user in the "shibboleth" realm to the "kibana_users" role._We could do something more complex, but we have unit tests for role-mapping - this is just to verify that_the mapping runs OK in a real environment.;@Before_    public void setupRoleMapping() throws IOException {_        final StringEntity json = new StringEntity(Strings _                .toString(XContentBuilder.builder(XContentType.JSON.xContent())_                        .startObject()_                        .array("roles", new String[] { "kibana_user"} )_                        .field("enabled", true)_                        .startObject("rules")_                        .startArray("all")_                        .startObject().startObject("field").field("username", "thor").endObject().endObject()_                        .startObject().startObject("field").field("realm.name", "shibboleth").endObject().endObject()_                        .endArray() _                        .endObject() _                        .endObject()), ContentType.APPLICATION_JSON)___        final Response response = adminClient().performRequest("PUT", "/_xpack/security/role_mapping/thor-kibana", emptyMap(), json)__        assertOK(response)__    };this,is,a,simple,mapping,that,maps,the,thor,user,in,the,shibboleth,realm,to,the,role,we,could,do,something,more,complex,but,we,have,unit,tests,for,role,mapping,this,is,just,to,verify,that,the,mapping,runs,ok,in,a,real,environment;before,public,void,setup,role,mapping,throws,ioexception,final,string,entity,json,new,string,entity,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,username,thor,end,object,end,object,start,object,start,object,field,field,realm,name,shibboleth,end,object,end,object,end,array,end,object,end,object,content,type,final,response,response,admin,client,perform,request,put,security,thor,kibana,empty,map,json,assert,ok,response
SamlAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1535383145;This is a simple mapping that maps the "thor" user in the "shibboleth" realm to the "kibana_users" role._We could do something more complex, but we have unit tests for role-mapping - this is just to verify that_the mapping runs OK in a real environment.;@Before_    public void setupRoleMapping() throws IOException {_        Request request = new Request("PUT", "/_xpack/security/role_mapping/thor-kibana")__        request.setJsonEntity(Strings.toString(XContentBuilder.builder(XContentType.JSON.xContent())_                .startObject()_                    .array("roles", new String[] { "kibana_user"} )_                    .field("enabled", true)_                    .startObject("rules")_                        .startArray("all")_                            .startObject().startObject("field").field("username", "thor").endObject().endObject()_                            .startObject().startObject("field").field("realm.name", "shibboleth").endObject().endObject()_                        .endArray() _                    .endObject() _                .endObject()))__        adminClient().performRequest(request)__    };this,is,a,simple,mapping,that,maps,the,thor,user,in,the,shibboleth,realm,to,the,role,we,could,do,something,more,complex,but,we,have,unit,tests,for,role,mapping,this,is,just,to,verify,that,the,mapping,runs,ok,in,a,real,environment;before,public,void,setup,role,mapping,throws,ioexception,request,request,new,request,put,security,thor,kibana,request,set,json,entity,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,username,thor,end,object,end,object,start,object,start,object,field,field,realm,name,shibboleth,end,object,end,object,end,array,end,object,end,object,admin,client,perform,request,request
SamlAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1535723122;This is a simple mapping that maps the "thor" user in the "shibboleth" realm to the "kibana_users" role._We could do something more complex, but we have unit tests for role-mapping - this is just to verify that_the mapping runs OK in a real environment.;@Before_    public void setupRoleMapping() throws IOException {_        Request request = new Request("PUT", "/_xpack/security/role_mapping/thor-kibana")__        request.setJsonEntity(Strings.toString(XContentBuilder.builder(XContentType.JSON.xContent())_                .startObject()_                    .array("roles", new String[] { "kibana_user"} )_                    .field("enabled", true)_                    .startObject("rules")_                        .startArray("all")_                            .startObject().startObject("field").field("username", "thor").endObject().endObject()_                            .startObject().startObject("field").field("realm.name", "shibboleth").endObject().endObject()_                        .endArray() _                    .endObject() _                .endObject()))__        adminClient().performRequest(request)__    };this,is,a,simple,mapping,that,maps,the,thor,user,in,the,shibboleth,realm,to,the,role,we,could,do,something,more,complex,but,we,have,unit,tests,for,role,mapping,this,is,just,to,verify,that,the,mapping,runs,ok,in,a,real,environment;before,public,void,setup,role,mapping,throws,ioexception,request,request,new,request,put,security,thor,kibana,request,set,json,entity,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,username,thor,end,object,end,object,start,object,start,object,field,field,realm,name,shibboleth,end,object,end,object,end,array,end,object,end,object,admin,client,perform,request,request
SamlAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1539815831;This is a simple mapping that maps the "thor" user in the "shibboleth" realm to the "kibana_users" role._We could do something more complex, but we have unit tests for role-mapping - this is just to verify that_the mapping runs OK in a real environment.;@Before_    public void setupRoleMapping() throws IOException {_        Request request = new Request("PUT", "/_xpack/security/role_mapping/thor-kibana")__        request.setJsonEntity(Strings.toString(XContentBuilder.builder(XContentType.JSON.xContent())_                .startObject()_                    .array("roles", new String[] { "kibana_user"} )_                    .field("enabled", true)_                    .startObject("rules")_                        .startArray("all")_                            .startObject().startObject("field").field("username", "thor").endObject().endObject()_                            .startObject().startObject("field").field("realm.name", "shibboleth").endObject().endObject()_                        .endArray() _                    .endObject() _                .endObject()))__        adminClient().performRequest(request)__    };this,is,a,simple,mapping,that,maps,the,thor,user,in,the,shibboleth,realm,to,the,role,we,could,do,something,more,complex,but,we,have,unit,tests,for,role,mapping,this,is,just,to,verify,that,the,mapping,runs,ok,in,a,real,environment;before,public,void,setup,role,mapping,throws,ioexception,request,request,new,request,put,security,thor,kibana,request,set,json,entity,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,username,thor,end,object,end,object,start,object,start,object,field,field,realm,name,shibboleth,end,object,end,object,end,array,end,object,end,object,admin,client,perform,request,request
SamlAuthenticationIT -> @Before     public void setupRoleMapping() throws IOException;1544519590;This is a simple mapping that maps the "thor" user in the "shibboleth" realm to the "kibana_users" role._We could do something more complex, but we have unit tests for role-mapping - this is just to verify that_the mapping runs OK in a real environment.;@Before_    public void setupRoleMapping() throws IOException {_        Request request = new Request("PUT", "/_security/role_mapping/thor-kibana")__        request.setJsonEntity(Strings.toString(XContentBuilder.builder(XContentType.JSON.xContent())_                .startObject()_                    .array("roles", new String[] { "kibana_user"} )_                    .field("enabled", true)_                    .startObject("rules")_                        .startArray("all")_                            .startObject().startObject("field").field("username", "thor").endObject().endObject()_                            .startObject().startObject("field").field("realm.name", "shibboleth").endObject().endObject()_                        .endArray() _                    .endObject() _                .endObject()))__        adminClient().performRequest(request)__    };this,is,a,simple,mapping,that,maps,the,thor,user,in,the,shibboleth,realm,to,the,role,we,could,do,something,more,complex,but,we,have,unit,tests,for,role,mapping,this,is,just,to,verify,that,the,mapping,runs,ok,in,a,real,environment;before,public,void,setup,role,mapping,throws,ioexception,request,request,new,request,put,thor,kibana,request,set,json,entity,strings,to,string,xcontent,builder,builder,xcontent,type,json,x,content,start,object,array,roles,new,string,field,enabled,true,start,object,rules,start,array,all,start,object,start,object,field,field,username,thor,end,object,end,object,start,object,start,object,field,field,realm,name,shibboleth,end,object,end,object,end,array,end,object,end,object,admin,client,perform,request,request
SamlAuthenticationIT -> private HttpHandler wrapFailures(HttpHandler handler);1524684173;Wraps a {@code HttpHandler} in a {@code try-catch} block that returns a_500 server error if an exception or an {@link AssertionError} occurs.;private HttpHandler wrapFailures(HttpHandler handler) {_        return http -> {_            try {_                handler.handle(http)__            } catch (AssertionError | Exception e) {_                logger.warn(new ParameterizedMessage("Failure while handling {}", http.getRequestURI()), e)__                http.getResponseHeaders().add("x-test-failure", e.toString())__                http.sendResponseHeaders(500, 0)__                http.close()__                throw e__            }_        }__    };wraps,a,code,http,handler,in,a,code,try,catch,block,that,returns,a,500,server,error,if,an,exception,or,an,link,assertion,error,occurs;private,http,handler,wrap,failures,http,handler,handler,return,http,try,handler,handle,http,catch,assertion,error,exception,e,logger,warn,new,parameterized,message,failure,while,handling,http,get,request,uri,e,http,get,response,headers,add,x,test,failure,e,to,string,http,send,response,headers,500,0,http,close,throw,e
SamlAuthenticationIT -> private HttpHandler wrapFailures(HttpHandler handler);1527622193;Wraps a {@code HttpHandler} in a {@code try-catch} block that returns a_500 server error if an exception or an {@link AssertionError} occurs.;private HttpHandler wrapFailures(HttpHandler handler) {_        return http -> {_            try {_                handler.handle(http)__            } catch (AssertionError | Exception e) {_                logger.warn(new ParameterizedMessage("Failure while handling {}", http.getRequestURI()), e)__                http.getResponseHeaders().add("x-test-failure", e.toString())__                http.sendResponseHeaders(500, 0)__                http.close()__                throw e__            }_        }__    };wraps,a,code,http,handler,in,a,code,try,catch,block,that,returns,a,500,server,error,if,an,exception,or,an,link,assertion,error,occurs;private,http,handler,wrap,failures,http,handler,handler,return,http,try,handler,handle,http,catch,assertion,error,exception,e,logger,warn,new,parameterized,message,failure,while,handling,http,get,request,uri,e,http,get,response,headers,add,x,test,failure,e,to,string,http,send,response,headers,500,0,http,close,throw,e
SamlAuthenticationIT -> private HttpHandler wrapFailures(HttpHandler handler);1535383145;Wraps a {@code HttpHandler} in a {@code try-catch} block that returns a_500 server error if an exception or an {@link AssertionError} occurs.;private HttpHandler wrapFailures(HttpHandler handler) {_        return http -> {_            try {_                handler.handle(http)__            } catch (AssertionError | Exception e) {_                logger.warn(new ParameterizedMessage("Failure while handling {}", http.getRequestURI()), e)__                http.getResponseHeaders().add("x-test-failure", e.toString())__                http.sendResponseHeaders(500, 0)__                http.close()__                throw e__            }_        }__    };wraps,a,code,http,handler,in,a,code,try,catch,block,that,returns,a,500,server,error,if,an,exception,or,an,link,assertion,error,occurs;private,http,handler,wrap,failures,http,handler,handler,return,http,try,handler,handle,http,catch,assertion,error,exception,e,logger,warn,new,parameterized,message,failure,while,handling,http,get,request,uri,e,http,get,response,headers,add,x,test,failure,e,to,string,http,send,response,headers,500,0,http,close,throw,e
SamlAuthenticationIT -> private HttpHandler wrapFailures(HttpHandler handler);1535723122;Wraps a {@code HttpHandler} in a {@code try-catch} block that returns a_500 server error if an exception or an {@link AssertionError} occurs.;private HttpHandler wrapFailures(HttpHandler handler) {_        return http -> {_            try {_                handler.handle(http)__            } catch (AssertionError | Exception e) {_                logger.warn(new ParameterizedMessage("Failure while handling {}", http.getRequestURI()), e)__                http.getResponseHeaders().add("x-test-failure", e.toString())__                http.sendResponseHeaders(500, 0)__                http.close()__                throw e__            }_        }__    };wraps,a,code,http,handler,in,a,code,try,catch,block,that,returns,a,500,server,error,if,an,exception,or,an,link,assertion,error,occurs;private,http,handler,wrap,failures,http,handler,handler,return,http,try,handler,handle,http,catch,assertion,error,exception,e,logger,warn,new,parameterized,message,failure,while,handling,http,get,request,uri,e,http,get,response,headers,add,x,test,failure,e,to,string,http,send,response,headers,500,0,http,close,throw,e
SamlAuthenticationIT -> private HttpHandler wrapFailures(HttpHandler handler);1539815831;Wraps a {@code HttpHandler} in a {@code try-catch} block that returns a_500 server error if an exception or an {@link AssertionError} occurs.;private HttpHandler wrapFailures(HttpHandler handler) {_        return http -> {_            try {_                handler.handle(http)__            } catch (AssertionError | Exception e) {_                logger.warn(new ParameterizedMessage("Failure while handling {}", http.getRequestURI()), e)__                http.getResponseHeaders().add("x-test-failure", e.toString())__                http.sendResponseHeaders(500, 0)__                http.close()__                throw e__            }_        }__    };wraps,a,code,http,handler,in,a,code,try,catch,block,that,returns,a,500,server,error,if,an,exception,or,an,link,assertion,error,occurs;private,http,handler,wrap,failures,http,handler,handler,return,http,try,handler,handle,http,catch,assertion,error,exception,e,logger,warn,new,parameterized,message,failure,while,handling,http,get,request,uri,e,http,get,response,headers,add,x,test,failure,e,to,string,http,send,response,headers,500,0,http,close,throw,e
SamlAuthenticationIT -> private HttpHandler wrapFailures(HttpHandler handler);1544519590;Wraps a {@code HttpHandler} in a {@code try-catch} block that returns a_500 server error if an exception or an {@link AssertionError} occurs.;private HttpHandler wrapFailures(HttpHandler handler) {_        return http -> {_            try {_                handler.handle(http)__            } catch (AssertionError | Exception e) {_                logger.warn(new ParameterizedMessage("Failure while handling {}", http.getRequestURI()), e)__                http.getResponseHeaders().add("x-test-failure", e.toString())__                http.sendResponseHeaders(500, 0)__                http.close()__                throw e__            }_        }__    };wraps,a,code,http,handler,in,a,code,try,catch,block,that,returns,a,500,server,error,if,an,exception,or,an,link,assertion,error,occurs;private,http,handler,wrap,failures,http,handler,handler,return,http,try,handler,handle,http,catch,assertion,error,exception,e,logger,warn,new,parameterized,message,failure,while,handling,http,get,request,uri,e,http,get,response,headers,add,x,test,failure,e,to,string,http,send,response,headers,500,0,http,close,throw,e
SamlAuthenticationIT -> private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)             throws IOException;1524684173;Submits a SAML assertion to the ACS URI.__@param acs  The URI to the Service Provider's Assertion-Consumer-Service._@param saml The (deflated + base64 encoded) {@code SAMLResponse} parameter to post the ACS;private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)_            throws IOException {_        assertThat("SAML submission target", acs, notNullValue())__        assertThat(acs.getPath(), equalTo(SP_ACS_PATH))__        assertThat("SAML submission content", saml, notNullValue())___        _        _        final HttpPost form = new HttpPost(getUrl(SP_ACS_PATH))__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair(SAML_RESPONSE_FIELD, saml))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context, response -> {_            assertHttpOk(response.getStatusLine())__            return parseResponseAsMap(response.getEntity())__        })__    };submits,a,saml,assertion,to,the,acs,uri,param,acs,the,uri,to,the,service,provider,s,assertion,consumer,service,param,saml,the,deflated,base64,encoded,code,samlresponse,parameter,to,post,the,acs;private,map,string,object,submit,saml,response,basic,http,context,context,closeable,http,client,client,uri,acs,string,saml,throws,ioexception,assert,that,saml,submission,target,acs,not,null,value,assert,that,acs,get,path,equal,to,assert,that,saml,submission,content,saml,not,null,value,final,http,post,form,new,http,post,get,url,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,saml,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,assert,http,ok,response,get,status,line,return,parse,response,as,map,response,get,entity
SamlAuthenticationIT -> private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)             throws IOException;1527622193;Submits a SAML assertion to the ACS URI.__@param acs  The URI to the Service Provider's Assertion-Consumer-Service._@param saml The (deflated + base64 encoded) {@code SAMLResponse} parameter to post the ACS;private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)_            throws IOException {_        assertThat("SAML submission target", acs, notNullValue())__        assertThat(acs.getPath(), equalTo(SP_ACS_PATH))__        assertThat("SAML submission content", saml, notNullValue())___        _        _        final HttpPost form = new HttpPost(getUrl(SP_ACS_PATH))__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair(SAML_RESPONSE_FIELD, saml))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context, response -> {_            assertHttpOk(response.getStatusLine())__            return parseResponseAsMap(response.getEntity())__        })__    };submits,a,saml,assertion,to,the,acs,uri,param,acs,the,uri,to,the,service,provider,s,assertion,consumer,service,param,saml,the,deflated,base64,encoded,code,samlresponse,parameter,to,post,the,acs;private,map,string,object,submit,saml,response,basic,http,context,context,closeable,http,client,client,uri,acs,string,saml,throws,ioexception,assert,that,saml,submission,target,acs,not,null,value,assert,that,acs,get,path,equal,to,assert,that,saml,submission,content,saml,not,null,value,final,http,post,form,new,http,post,get,url,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,saml,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,assert,http,ok,response,get,status,line,return,parse,response,as,map,response,get,entity
SamlAuthenticationIT -> private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)             throws IOException;1535383145;Submits a SAML assertion to the ACS URI.__@param acs  The URI to the Service Provider's Assertion-Consumer-Service._@param saml The (deflated + base64 encoded) {@code SAMLResponse} parameter to post the ACS;private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)_            throws IOException {_        assertThat("SAML submission target", acs, notNullValue())__        assertThat(acs.getPath(), equalTo(SP_ACS_PATH))__        assertThat("SAML submission content", saml, notNullValue())___        _        _        final HttpPost form = new HttpPost(getUrl(SP_ACS_PATH))__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair(SAML_RESPONSE_FIELD, saml))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context, response -> {_            assertHttpOk(response.getStatusLine())__            return parseResponseAsMap(response.getEntity())__        })__    };submits,a,saml,assertion,to,the,acs,uri,param,acs,the,uri,to,the,service,provider,s,assertion,consumer,service,param,saml,the,deflated,base64,encoded,code,samlresponse,parameter,to,post,the,acs;private,map,string,object,submit,saml,response,basic,http,context,context,closeable,http,client,client,uri,acs,string,saml,throws,ioexception,assert,that,saml,submission,target,acs,not,null,value,assert,that,acs,get,path,equal,to,assert,that,saml,submission,content,saml,not,null,value,final,http,post,form,new,http,post,get,url,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,saml,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,assert,http,ok,response,get,status,line,return,parse,response,as,map,response,get,entity
SamlAuthenticationIT -> private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException;1524684173;Submits a Shibboleth login form to the provided URI.__@return A URI to which the "consent form" should be submitted.;private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException {_        final HttpPost form = new HttpPost(formUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("j_username", "Thor"))__        params.add(new BasicNameValuePair("j_password", "NickFuryHeartsES"))__        params.add(new BasicNameValuePair("_eventId_proceed", ""))__        form.setEntity(new UrlEncodedFormEntity(params))___        final String redirect = execute(client, form, context, response -> {_            assertThat(response.getStatusLine().getStatusCode(), equalTo(302))__            return response.getFirstHeader("Location").getValue()__        })__        assertThat(redirect, startsWith("/"))___        String target = execute(client, new HttpGet(formUri.resolve(redirect)), context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })__        assertThat("Cannot find form target", target, Matchers.notNullValue())__        return formUri.resolve(target)__    };submits,a,shibboleth,login,form,to,the,provided,uri,return,a,uri,to,which,the,consent,form,should,be,submitted;private,uri,submit,login,form,closeable,http,client,client,basic,http,context,context,uri,form,uri,throws,ioexception,final,http,post,form,new,http,post,form,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,thor,params,add,new,basic,name,value,pair,nick,fury,hearts,es,params,add,new,basic,name,value,pair,form,set,entity,new,url,encoded,form,entity,params,final,string,redirect,execute,client,form,context,response,assert,that,response,get,status,line,get,status,code,equal,to,302,return,response,get,first,header,location,get,value,assert,that,redirect,starts,with,string,target,execute,client,new,http,get,form,uri,resolve,redirect,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,return,form,uri,resolve,target
SamlAuthenticationIT -> private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException;1527622193;Submits a Shibboleth login form to the provided URI.__@return A URI to which the "consent form" should be submitted.;private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException {_        final HttpPost form = new HttpPost(formUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("j_username", "Thor"))__        params.add(new BasicNameValuePair("j_password", "NickFuryHeartsES"))__        params.add(new BasicNameValuePair("_eventId_proceed", ""))__        form.setEntity(new UrlEncodedFormEntity(params))___        final String redirect = execute(client, form, context, response -> {_            assertThat(response.getStatusLine().getStatusCode(), equalTo(302))__            return response.getFirstHeader("Location").getValue()__        })__        assertThat(redirect, startsWith("/"))___        String target = execute(client, new HttpGet(formUri.resolve(redirect)), context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })__        assertThat("Cannot find form target", target, Matchers.notNullValue())__        return formUri.resolve(target)__    };submits,a,shibboleth,login,form,to,the,provided,uri,return,a,uri,to,which,the,consent,form,should,be,submitted;private,uri,submit,login,form,closeable,http,client,client,basic,http,context,context,uri,form,uri,throws,ioexception,final,http,post,form,new,http,post,form,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,thor,params,add,new,basic,name,value,pair,nick,fury,hearts,es,params,add,new,basic,name,value,pair,form,set,entity,new,url,encoded,form,entity,params,final,string,redirect,execute,client,form,context,response,assert,that,response,get,status,line,get,status,code,equal,to,302,return,response,get,first,header,location,get,value,assert,that,redirect,starts,with,string,target,execute,client,new,http,get,form,uri,resolve,redirect,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,return,form,uri,resolve,target
SamlAuthenticationIT -> private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException;1535383145;Submits a Shibboleth login form to the provided URI.__@return A URI to which the "consent form" should be submitted.;private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException {_        final HttpPost form = new HttpPost(formUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("j_username", "Thor"))__        params.add(new BasicNameValuePair("j_password", "NickFuryHeartsES"))__        params.add(new BasicNameValuePair("_eventId_proceed", ""))__        form.setEntity(new UrlEncodedFormEntity(params))___        final String redirect = execute(client, form, context, response -> {_            assertThat(response.getStatusLine().getStatusCode(), equalTo(302))__            return response.getFirstHeader("Location").getValue()__        })__        assertThat(redirect, startsWith("/"))___        String target = execute(client, new HttpGet(formUri.resolve(redirect)), context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })__        assertThat("Cannot find form target", target, Matchers.notNullValue())__        return formUri.resolve(target)__    };submits,a,shibboleth,login,form,to,the,provided,uri,return,a,uri,to,which,the,consent,form,should,be,submitted;private,uri,submit,login,form,closeable,http,client,client,basic,http,context,context,uri,form,uri,throws,ioexception,final,http,post,form,new,http,post,form,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,thor,params,add,new,basic,name,value,pair,nick,fury,hearts,es,params,add,new,basic,name,value,pair,form,set,entity,new,url,encoded,form,entity,params,final,string,redirect,execute,client,form,context,response,assert,that,response,get,status,line,get,status,code,equal,to,302,return,response,get,first,header,location,get,value,assert,that,redirect,starts,with,string,target,execute,client,new,http,get,form,uri,resolve,redirect,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,return,form,uri,resolve,target
SamlAuthenticationIT -> private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException;1535723122;Submits a Shibboleth login form to the provided URI.__@return A URI to which the "consent form" should be submitted.;private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException {_        final HttpPost form = new HttpPost(formUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("j_username", "Thor"))__        params.add(new BasicNameValuePair("j_password", "NickFuryHeartsES"))__        params.add(new BasicNameValuePair("_eventId_proceed", ""))__        form.setEntity(new UrlEncodedFormEntity(params))___        final String redirect = execute(client, form, context, response -> {_            assertThat(response.getStatusLine().getStatusCode(), equalTo(302))__            return response.getFirstHeader("Location").getValue()__        })__        assertThat(redirect, startsWith("/"))___        String target = execute(client, new HttpGet(formUri.resolve(redirect)), context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })__        assertThat("Cannot find form target", target, Matchers.notNullValue())__        return formUri.resolve(target)__    };submits,a,shibboleth,login,form,to,the,provided,uri,return,a,uri,to,which,the,consent,form,should,be,submitted;private,uri,submit,login,form,closeable,http,client,client,basic,http,context,context,uri,form,uri,throws,ioexception,final,http,post,form,new,http,post,form,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,thor,params,add,new,basic,name,value,pair,nick,fury,hearts,es,params,add,new,basic,name,value,pair,form,set,entity,new,url,encoded,form,entity,params,final,string,redirect,execute,client,form,context,response,assert,that,response,get,status,line,get,status,code,equal,to,302,return,response,get,first,header,location,get,value,assert,that,redirect,starts,with,string,target,execute,client,new,http,get,form,uri,resolve,redirect,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,return,form,uri,resolve,target
SamlAuthenticationIT -> private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException;1539815831;Submits a Shibboleth login form to the provided URI.__@return A URI to which the "consent form" should be submitted.;private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException {_        final HttpPost form = new HttpPost(formUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("j_username", "Thor"))__        params.add(new BasicNameValuePair("j_password", "NickFuryHeartsES"))__        params.add(new BasicNameValuePair("_eventId_proceed", ""))__        form.setEntity(new UrlEncodedFormEntity(params))___        final String redirect = execute(client, form, context, response -> {_            assertThat(response.getStatusLine().getStatusCode(), equalTo(302))__            return response.getFirstHeader("Location").getValue()__        })__        assertThat(redirect, startsWith("/"))___        String target = execute(client, new HttpGet(formUri.resolve(redirect)), context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })__        assertThat("Cannot find form target", target, Matchers.notNullValue())__        return formUri.resolve(target)__    };submits,a,shibboleth,login,form,to,the,provided,uri,return,a,uri,to,which,the,consent,form,should,be,submitted;private,uri,submit,login,form,closeable,http,client,client,basic,http,context,context,uri,form,uri,throws,ioexception,final,http,post,form,new,http,post,form,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,thor,params,add,new,basic,name,value,pair,nick,fury,hearts,es,params,add,new,basic,name,value,pair,form,set,entity,new,url,encoded,form,entity,params,final,string,redirect,execute,client,form,context,response,assert,that,response,get,status,line,get,status,code,equal,to,302,return,response,get,first,header,location,get,value,assert,that,redirect,starts,with,string,target,execute,client,new,http,get,form,uri,resolve,redirect,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,return,form,uri,resolve,target
SamlAuthenticationIT -> private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException;1544519590;Submits a Shibboleth login form to the provided URI.__@return A URI to which the "consent form" should be submitted.;private URI submitLoginForm(CloseableHttpClient client, BasicHttpContext context, URI formUri) throws IOException {_        final HttpPost form = new HttpPost(formUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("j_username", "Thor"))__        params.add(new BasicNameValuePair("j_password", "NickFuryHeartsES"))__        params.add(new BasicNameValuePair("_eventId_proceed", ""))__        form.setEntity(new UrlEncodedFormEntity(params))___        final String redirect = execute(client, form, context, response -> {_            assertThat(response.getStatusLine().getStatusCode(), equalTo(302))__            return response.getFirstHeader("Location").getValue()__        })__        assertThat(redirect, startsWith("/"))___        String target = execute(client, new HttpGet(formUri.resolve(redirect)), context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })__        assertThat("Cannot find form target", target, Matchers.notNullValue())__        return formUri.resolve(target)__    };submits,a,shibboleth,login,form,to,the,provided,uri,return,a,uri,to,which,the,consent,form,should,be,submitted;private,uri,submit,login,form,closeable,http,client,client,basic,http,context,context,uri,form,uri,throws,ioexception,final,http,post,form,new,http,post,form,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,thor,params,add,new,basic,name,value,pair,nick,fury,hearts,es,params,add,new,basic,name,value,pair,form,set,entity,new,url,encoded,form,entity,params,final,string,redirect,execute,client,form,context,response,assert,that,response,get,status,line,get,status,code,equal,to,302,return,response,get,first,header,location,get,value,assert,that,redirect,starts,with,string,target,execute,client,new,http,get,form,uri,resolve,redirect,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,return,form,uri,resolve,target
SamlAuthenticationIT -> private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException;1524684173;Finds the target URL and {@code SAMLResponse} for the HTML form from the provided content.;private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException {_        final List<String> lines = Streams.readAllLines(content)__        return new Tuple<>(_                toUri(htmlDecode(findLine(lines, "<form action=\"([^\"]+)\""))),_                findLine(lines, "name=\"" + SAML_RESPONSE_FIELD + "\" value=\"([^\"]+)\"")_        )__    };finds,the,target,url,and,code,samlresponse,for,the,html,form,from,the,provided,content;private,tuple,uri,string,parse,saml,submission,form,input,stream,content,throws,ioexception,final,list,string,lines,streams,read,all,lines,content,return,new,tuple,to,uri,html,decode,find,line,lines,form,action,find,line,lines,name,value
SamlAuthenticationIT -> private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException;1527622193;Finds the target URL and {@code SAMLResponse} for the HTML form from the provided content.;private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException {_        final List<String> lines = Streams.readAllLines(content)__        return new Tuple<>(_                toUri(htmlDecode(findLine(lines, "<form action=\"([^\"]+)\""))),_                findLine(lines, "name=\"" + SAML_RESPONSE_FIELD + "\" value=\"([^\"]+)\"")_        )__    };finds,the,target,url,and,code,samlresponse,for,the,html,form,from,the,provided,content;private,tuple,uri,string,parse,saml,submission,form,input,stream,content,throws,ioexception,final,list,string,lines,streams,read,all,lines,content,return,new,tuple,to,uri,html,decode,find,line,lines,form,action,find,line,lines,name,value
SamlAuthenticationIT -> private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException;1535383145;Finds the target URL and {@code SAMLResponse} for the HTML form from the provided content.;private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException {_        final List<String> lines = Streams.readAllLines(content)__        return new Tuple<>(_                toUri(htmlDecode(findLine(lines, "<form action=\"([^\"]+)\""))),_                findLine(lines, "name=\"" + SAML_RESPONSE_FIELD + "\" value=\"([^\"]+)\"")_        )__    };finds,the,target,url,and,code,samlresponse,for,the,html,form,from,the,provided,content;private,tuple,uri,string,parse,saml,submission,form,input,stream,content,throws,ioexception,final,list,string,lines,streams,read,all,lines,content,return,new,tuple,to,uri,html,decode,find,line,lines,form,action,find,line,lines,name,value
SamlAuthenticationIT -> private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException;1535723122;Finds the target URL and {@code SAMLResponse} for the HTML form from the provided content.;private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException {_        final List<String> lines = Streams.readAllLines(content)__        return new Tuple<>(_                toUri(htmlDecode(findLine(lines, "<form action=\"([^\"]+)\""))),_                findLine(lines, "name=\"" + SAML_RESPONSE_FIELD + "\" value=\"([^\"]+)\"")_        )__    };finds,the,target,url,and,code,samlresponse,for,the,html,form,from,the,provided,content;private,tuple,uri,string,parse,saml,submission,form,input,stream,content,throws,ioexception,final,list,string,lines,streams,read,all,lines,content,return,new,tuple,to,uri,html,decode,find,line,lines,form,action,find,line,lines,name,value
SamlAuthenticationIT -> private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException;1539815831;Finds the target URL and {@code SAMLResponse} for the HTML form from the provided content.;private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException {_        final List<String> lines = Streams.readAllLines(content)__        return new Tuple<>(_                toUri(htmlDecode(findLine(lines, "<form action=\"([^\"]+)\""))),_                findLine(lines, "name=\"" + SAML_RESPONSE_FIELD + "\" value=\"([^\"]+)\"")_        )__    };finds,the,target,url,and,code,samlresponse,for,the,html,form,from,the,provided,content;private,tuple,uri,string,parse,saml,submission,form,input,stream,content,throws,ioexception,final,list,string,lines,streams,read,all,lines,content,return,new,tuple,to,uri,html,decode,find,line,lines,form,action,find,line,lines,name,value
SamlAuthenticationIT -> private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException;1544519590;Finds the target URL and {@code SAMLResponse} for the HTML form from the provided content.;private Tuple<URI, String> parseSamlSubmissionForm(InputStream content) throws IOException {_        final List<String> lines = Streams.readAllLines(content)__        return new Tuple<>(_                toUri(htmlDecode(findLine(lines, "<form action=\"([^\"]+)\""))),_                findLine(lines, "name=\"" + SAML_RESPONSE_FIELD + "\" value=\"([^\"]+)\"")_        )__    };finds,the,target,url,and,code,samlresponse,for,the,html,form,from,the,provided,content;private,tuple,uri,string,parse,saml,submission,form,input,stream,content,throws,ioexception,final,list,string,lines,streams,read,all,lines,content,return,new,tuple,to,uri,html,decode,find,line,lines,form,action,find,line,lines,name,value
SamlAuthenticationIT -> private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException;1524684173;Submits a Shibboleth consent form to the provided URI._The consent form is a step that Shibboleth inserts into the login flow to confirm that the user is willing to send their_personal details to the application (SP) that they are logging in to.__@return A tuple of ( URI to SP's Assertion-Consumer-Service, SAMLResponse to post to the service );private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException {_        final HttpPost form = new HttpPost(consentUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("_shib_idp_consentOptions", "_shib_idp_globalConsent"))__        params.add(new BasicNameValuePair("_eventId_proceed", "Accept"))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context,_                response -> parseSamlSubmissionForm(response.getEntity().getContent()))__    };submits,a,shibboleth,consent,form,to,the,provided,uri,the,consent,form,is,a,step,that,shibboleth,inserts,into,the,login,flow,to,confirm,that,the,user,is,willing,to,send,their,personal,details,to,the,application,sp,that,they,are,logging,in,to,return,a,tuple,of,uri,to,sp,s,assertion,consumer,service,samlresponse,to,post,to,the,service;private,tuple,uri,string,submit,consent,form,basic,http,context,context,closeable,http,client,client,uri,consent,uri,throws,ioexception,final,http,post,form,new,http,post,consent,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,params,add,new,basic,name,value,pair,accept,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,parse,saml,submission,form,response,get,entity,get,content
SamlAuthenticationIT -> private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException;1527622193;Submits a Shibboleth consent form to the provided URI._The consent form is a step that Shibboleth inserts into the login flow to confirm that the user is willing to send their_personal details to the application (SP) that they are logging in to.__@return A tuple of ( URI to SP's Assertion-Consumer-Service, SAMLResponse to post to the service );private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException {_        final HttpPost form = new HttpPost(consentUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("_shib_idp_consentOptions", "_shib_idp_globalConsent"))__        params.add(new BasicNameValuePair("_eventId_proceed", "Accept"))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context,_                response -> parseSamlSubmissionForm(response.getEntity().getContent()))__    };submits,a,shibboleth,consent,form,to,the,provided,uri,the,consent,form,is,a,step,that,shibboleth,inserts,into,the,login,flow,to,confirm,that,the,user,is,willing,to,send,their,personal,details,to,the,application,sp,that,they,are,logging,in,to,return,a,tuple,of,uri,to,sp,s,assertion,consumer,service,samlresponse,to,post,to,the,service;private,tuple,uri,string,submit,consent,form,basic,http,context,context,closeable,http,client,client,uri,consent,uri,throws,ioexception,final,http,post,form,new,http,post,consent,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,params,add,new,basic,name,value,pair,accept,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,parse,saml,submission,form,response,get,entity,get,content
SamlAuthenticationIT -> private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException;1535383145;Submits a Shibboleth consent form to the provided URI._The consent form is a step that Shibboleth inserts into the login flow to confirm that the user is willing to send their_personal details to the application (SP) that they are logging in to.__@return A tuple of ( URI to SP's Assertion-Consumer-Service, SAMLResponse to post to the service );private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException {_        final HttpPost form = new HttpPost(consentUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("_shib_idp_consentOptions", "_shib_idp_globalConsent"))__        params.add(new BasicNameValuePair("_eventId_proceed", "Accept"))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context,_                response -> parseSamlSubmissionForm(response.getEntity().getContent()))__    };submits,a,shibboleth,consent,form,to,the,provided,uri,the,consent,form,is,a,step,that,shibboleth,inserts,into,the,login,flow,to,confirm,that,the,user,is,willing,to,send,their,personal,details,to,the,application,sp,that,they,are,logging,in,to,return,a,tuple,of,uri,to,sp,s,assertion,consumer,service,samlresponse,to,post,to,the,service;private,tuple,uri,string,submit,consent,form,basic,http,context,context,closeable,http,client,client,uri,consent,uri,throws,ioexception,final,http,post,form,new,http,post,consent,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,params,add,new,basic,name,value,pair,accept,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,parse,saml,submission,form,response,get,entity,get,content
SamlAuthenticationIT -> private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException;1535723122;Submits a Shibboleth consent form to the provided URI._The consent form is a step that Shibboleth inserts into the login flow to confirm that the user is willing to send their_personal details to the application (SP) that they are logging in to.__@return A tuple of ( URI to SP's Assertion-Consumer-Service, SAMLResponse to post to the service );private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException {_        final HttpPost form = new HttpPost(consentUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("_shib_idp_consentOptions", "_shib_idp_globalConsent"))__        params.add(new BasicNameValuePair("_eventId_proceed", "Accept"))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context,_            response -> parseSamlSubmissionForm(response.getEntity().getContent()))__    };submits,a,shibboleth,consent,form,to,the,provided,uri,the,consent,form,is,a,step,that,shibboleth,inserts,into,the,login,flow,to,confirm,that,the,user,is,willing,to,send,their,personal,details,to,the,application,sp,that,they,are,logging,in,to,return,a,tuple,of,uri,to,sp,s,assertion,consumer,service,samlresponse,to,post,to,the,service;private,tuple,uri,string,submit,consent,form,basic,http,context,context,closeable,http,client,client,uri,consent,uri,throws,ioexception,final,http,post,form,new,http,post,consent,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,params,add,new,basic,name,value,pair,accept,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,parse,saml,submission,form,response,get,entity,get,content
SamlAuthenticationIT -> private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException;1539815831;Submits a Shibboleth consent form to the provided URI._The consent form is a step that Shibboleth inserts into the login flow to confirm that the user is willing to send their_personal details to the application (SP) that they are logging in to.__@return A tuple of ( URI to SP's Assertion-Consumer-Service, SAMLResponse to post to the service );private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException {_        final HttpPost form = new HttpPost(consentUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("_shib_idp_consentOptions", "_shib_idp_globalConsent"))__        params.add(new BasicNameValuePair("_eventId_proceed", "Accept"))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context,_            response -> parseSamlSubmissionForm(response.getEntity().getContent()))__    };submits,a,shibboleth,consent,form,to,the,provided,uri,the,consent,form,is,a,step,that,shibboleth,inserts,into,the,login,flow,to,confirm,that,the,user,is,willing,to,send,their,personal,details,to,the,application,sp,that,they,are,logging,in,to,return,a,tuple,of,uri,to,sp,s,assertion,consumer,service,samlresponse,to,post,to,the,service;private,tuple,uri,string,submit,consent,form,basic,http,context,context,closeable,http,client,client,uri,consent,uri,throws,ioexception,final,http,post,form,new,http,post,consent,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,params,add,new,basic,name,value,pair,accept,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,parse,saml,submission,form,response,get,entity,get,content
SamlAuthenticationIT -> private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException;1544519590;Submits a Shibboleth consent form to the provided URI._The consent form is a step that Shibboleth inserts into the login flow to confirm that the user is willing to send their_personal details to the application (SP) that they are logging in to.__@return A tuple of ( URI to SP's Assertion-Consumer-Service, SAMLResponse to post to the service );private Tuple<URI, String> submitConsentForm(BasicHttpContext context, CloseableHttpClient client, URI consentUri) throws IOException {_        final HttpPost form = new HttpPost(consentUri)__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair("_shib_idp_consentOptions", "_shib_idp_globalConsent"))__        params.add(new BasicNameValuePair("_eventId_proceed", "Accept"))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context,_            response -> parseSamlSubmissionForm(response.getEntity().getContent()))__    };submits,a,shibboleth,consent,form,to,the,provided,uri,the,consent,form,is,a,step,that,shibboleth,inserts,into,the,login,flow,to,confirm,that,the,user,is,willing,to,send,their,personal,details,to,the,application,sp,that,they,are,logging,in,to,return,a,tuple,of,uri,to,sp,s,assertion,consumer,service,samlresponse,to,post,to,the,service;private,tuple,uri,string,submit,consent,form,basic,http,context,context,closeable,http,client,client,uri,consent,uri,throws,ioexception,final,http,post,form,new,http,post,consent,uri,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,params,add,new,basic,name,value,pair,accept,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,parse,saml,submission,form,response,get,entity,get,content
SamlAuthenticationIT -> @Before     public void setupNativeUser() throws IOException;1535723122;Create a native user for "thor" that is used for user-lookup (authorizing realms);@Before_    public void setupNativeUser() throws IOException {_        final Map<String, Object> body = MapBuilder.<String, Object>newMapBuilder()_            .put("roles", Collections.singletonList("kibana_dashboard_only_user"))_            .put("full_name", "Thor Son of Odin")_            .put("password", randomAlphaOfLengthBetween(8, 16))_            .put("metadata", Collections.singletonMap("is_native", true))_            .map()__        final Response response = adminClient().performRequest(buildRequest("PUT", "/_xpack/security/user/thor", body))__        assertOK(response)__    };create,a,native,user,for,thor,that,is,used,for,user,lookup,authorizing,realms;before,public,void,setup,native,user,throws,ioexception,final,map,string,object,body,map,builder,string,object,new,map,builder,put,roles,collections,singleton,list,put,thor,son,of,odin,put,password,random,alpha,of,length,between,8,16,put,metadata,collections,singleton,map,true,map,final,response,response,admin,client,perform,request,build,request,put,security,user,thor,body,assert,ok,response
SamlAuthenticationIT -> @Before     public void setupNativeUser() throws IOException;1539815831;Create a native user for "thor" that is used for user-lookup (authorizing realms);@Before_    public void setupNativeUser() throws IOException {_        final Map<String, Object> body = MapBuilder.<String, Object>newMapBuilder()_            .put("roles", Collections.singletonList("kibana_dashboard_only_user"))_            .put("full_name", "Thor Son of Odin")_            .put("password", randomAlphaOfLengthBetween(8, 16))_            .put("metadata", Collections.singletonMap("is_native", true))_            .map()__        final Response response = adminClient().performRequest(buildRequest("PUT", "/_xpack/security/user/thor", body))__        assertOK(response)__    };create,a,native,user,for,thor,that,is,used,for,user,lookup,authorizing,realms;before,public,void,setup,native,user,throws,ioexception,final,map,string,object,body,map,builder,string,object,new,map,builder,put,roles,collections,singleton,list,put,thor,son,of,odin,put,password,random,alpha,of,length,between,8,16,put,metadata,collections,singleton,map,true,map,final,response,response,admin,client,perform,request,build,request,put,security,user,thor,body,assert,ok,response
SamlAuthenticationIT -> @Before     public void setupNativeUser() throws IOException;1544519590;Create a native user for "thor" that is used for user-lookup (authorizing realms);@Before_    public void setupNativeUser() throws IOException {_        final Map<String, Object> body = MapBuilder.<String, Object>newMapBuilder()_            .put("roles", Collections.singletonList("kibana_dashboard_only_user"))_            .put("full_name", "Thor Son of Odin")_            .put("password", randomAlphaOfLengthBetween(8, 16))_            .put("metadata", Collections.singletonMap("is_native", true))_            .map()__        final Response response = adminClient().performRequest(buildRequest("PUT", "/_security/user/thor", body))__        assertOK(response)__    };create,a,native,user,for,thor,that,is,used,for,user,lookup,authorizing,realms;before,public,void,setup,native,user,throws,ioexception,final,map,string,object,body,map,builder,string,object,new,map,builder,put,roles,collections,singleton,list,put,thor,son,of,odin,put,password,random,alpha,of,length,between,8,16,put,metadata,collections,singleton,map,true,map,final,response,response,admin,client,perform,request,build,request,put,user,thor,body,assert,ok,response
SamlAuthenticationIT -> private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException;1524684173;Navigates to the login page on the local (in memory) HTTP UI.__@return A URI to which the "login form" should be submitted.;private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException {_        HttpGet login = new HttpGet(getUrl(SP_LOGIN_PATH))__        String target = execute(client, login, context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })___        assertThat("Cannot find form target", target, Matchers.notNullValue())__        assertThat("Target must be an absolute path", target, startsWith("/"))__        final Object host = context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST)__        assertThat(host, instanceOf(HttpHost.class))___        final String uri = ((HttpHost) host).toURI() + target__        return toUri(uri)__    };navigates,to,the,login,page,on,the,local,in,memory,http,ui,return,a,uri,to,which,the,login,form,should,be,submitted;private,uri,go,to,login,page,closeable,http,client,client,basic,http,context,context,throws,ioexception,http,get,login,new,http,get,get,url,string,target,execute,client,login,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,assert,that,target,must,be,an,absolute,path,target,starts,with,final,object,host,context,get,attribute,http,core,context,assert,that,host,instance,of,http,host,class,final,string,uri,http,host,host,to,uri,target,return,to,uri,uri
SamlAuthenticationIT -> private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException;1527622193;Navigates to the login page on the local (in memory) HTTP UI.__@return A URI to which the "login form" should be submitted.;private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException {_        HttpGet login = new HttpGet(getUrl(SP_LOGIN_PATH))__        String target = execute(client, login, context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })___        assertThat("Cannot find form target", target, Matchers.notNullValue())__        assertThat("Target must be an absolute path", target, startsWith("/"))__        final Object host = context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST)__        assertThat(host, instanceOf(HttpHost.class))___        final String uri = ((HttpHost) host).toURI() + target__        return toUri(uri)__    };navigates,to,the,login,page,on,the,local,in,memory,http,ui,return,a,uri,to,which,the,login,form,should,be,submitted;private,uri,go,to,login,page,closeable,http,client,client,basic,http,context,context,throws,ioexception,http,get,login,new,http,get,get,url,string,target,execute,client,login,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,assert,that,target,must,be,an,absolute,path,target,starts,with,final,object,host,context,get,attribute,http,core,context,assert,that,host,instance,of,http,host,class,final,string,uri,http,host,host,to,uri,target,return,to,uri,uri
SamlAuthenticationIT -> private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException;1535383145;Navigates to the login page on the local (in memory) HTTP UI.__@return A URI to which the "login form" should be submitted.;private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException {_        HttpGet login = new HttpGet(getUrl(SP_LOGIN_PATH))__        String target = execute(client, login, context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })___        assertThat("Cannot find form target", target, Matchers.notNullValue())__        assertThat("Target must be an absolute path", target, startsWith("/"))__        final Object host = context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST)__        assertThat(host, instanceOf(HttpHost.class))___        final String uri = ((HttpHost) host).toURI() + target__        return toUri(uri)__    };navigates,to,the,login,page,on,the,local,in,memory,http,ui,return,a,uri,to,which,the,login,form,should,be,submitted;private,uri,go,to,login,page,closeable,http,client,client,basic,http,context,context,throws,ioexception,http,get,login,new,http,get,get,url,string,target,execute,client,login,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,assert,that,target,must,be,an,absolute,path,target,starts,with,final,object,host,context,get,attribute,http,core,context,assert,that,host,instance,of,http,host,class,final,string,uri,http,host,host,to,uri,target,return,to,uri,uri
SamlAuthenticationIT -> private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException;1535723122;Navigates to the login page on the local (in memory) HTTP UI.__@return A URI to which the "login form" should be submitted.;private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException {_        HttpGet login = new HttpGet(getUrl(SP_LOGIN_PATH))__        String target = execute(client, login, context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })___        assertThat("Cannot find form target", target, Matchers.notNullValue())__        assertThat("Target must be an absolute path", target, startsWith("/"))__        final Object host = context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST)__        assertThat(host, instanceOf(HttpHost.class))___        final String uri = ((HttpHost) host).toURI() + target__        return toUri(uri)__    };navigates,to,the,login,page,on,the,local,in,memory,http,ui,return,a,uri,to,which,the,login,form,should,be,submitted;private,uri,go,to,login,page,closeable,http,client,client,basic,http,context,context,throws,ioexception,http,get,login,new,http,get,get,url,string,target,execute,client,login,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,assert,that,target,must,be,an,absolute,path,target,starts,with,final,object,host,context,get,attribute,http,core,context,assert,that,host,instance,of,http,host,class,final,string,uri,http,host,host,to,uri,target,return,to,uri,uri
SamlAuthenticationIT -> private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException;1539815831;Navigates to the login page on the local (in memory) HTTP UI.__@return A URI to which the "login form" should be submitted.;private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException {_        HttpGet login = new HttpGet(getUrl(SP_LOGIN_PATH))__        String target = execute(client, login, context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })___        assertThat("Cannot find form target", target, Matchers.notNullValue())__        assertThat("Target must be an absolute path", target, startsWith("/"))__        final Object host = context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST)__        assertThat(host, instanceOf(HttpHost.class))___        final String uri = ((HttpHost) host).toURI() + target__        return toUri(uri)__    };navigates,to,the,login,page,on,the,local,in,memory,http,ui,return,a,uri,to,which,the,login,form,should,be,submitted;private,uri,go,to,login,page,closeable,http,client,client,basic,http,context,context,throws,ioexception,http,get,login,new,http,get,get,url,string,target,execute,client,login,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,assert,that,target,must,be,an,absolute,path,target,starts,with,final,object,host,context,get,attribute,http,core,context,assert,that,host,instance,of,http,host,class,final,string,uri,http,host,host,to,uri,target,return,to,uri,uri
SamlAuthenticationIT -> private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException;1544519590;Navigates to the login page on the local (in memory) HTTP UI.__@return A URI to which the "login form" should be submitted.;private URI goToLoginPage(CloseableHttpClient client, BasicHttpContext context) throws IOException {_        HttpGet login = new HttpGet(getUrl(SP_LOGIN_PATH))__        String target = execute(client, login, context, response -> {_            assertHttpOk(response.getStatusLine())__            return getFormTarget(response.getEntity().getContent())__        })___        assertThat("Cannot find form target", target, Matchers.notNullValue())__        assertThat("Target must be an absolute path", target, startsWith("/"))__        final Object host = context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST)__        assertThat(host, instanceOf(HttpHost.class))___        final String uri = ((HttpHost) host).toURI() + target__        return toUri(uri)__    };navigates,to,the,login,page,on,the,local,in,memory,http,ui,return,a,uri,to,which,the,login,form,should,be,submitted;private,uri,go,to,login,page,closeable,http,client,client,basic,http,context,context,throws,ioexception,http,get,login,new,http,get,get,url,string,target,execute,client,login,context,response,assert,http,ok,response,get,status,line,return,get,form,target,response,get,entity,get,content,assert,that,cannot,find,form,target,target,matchers,not,null,value,assert,that,target,must,be,an,absolute,path,target,starts,with,final,object,host,context,get,attribute,http,core,context,assert,that,host,instance,of,http,host,class,final,string,uri,http,host,host,to,uri,target,return,to,uri,uri
SamlAuthenticationIT -> private void httpLogin(HttpExchange http) throws IOException;1524684173;Provides the "login" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to find the login page for the IdP, and then_sends a redirect to that page.;private void httpLogin(HttpExchange http) throws IOException {_        final Response prepare = client().performRequest("POST", "/_xpack/security/saml/prepare",_                emptyMap(), new StringEntity("{}", ContentType.APPLICATION_JSON), kibanaAuth())__        assertOK(prepare)__        final Map<String, Object> body = parseResponseAsMap(prepare.getEntity())__        logger.info("Created SAML authentication request {}", body)__        http.getResponseHeaders().add("Set-Cookie", REQUEST_ID_COOKIE + "=" + body.get("id"))__        http.getResponseHeaders().add("Location", (String) body.get("redirect"))__        http.sendResponseHeaders(302, 0)__        http.close()__    };provides,the,login,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,find,the,login,page,for,the,id,p,and,then,sends,a,redirect,to,that,page;private,void,http,login,http,exchange,http,throws,ioexception,final,response,prepare,client,perform,request,post,security,saml,prepare,empty,map,new,string,entity,content,type,kibana,auth,assert,ok,prepare,final,map,string,object,body,parse,response,as,map,prepare,get,entity,logger,info,created,saml,authentication,request,body,http,get,response,headers,add,set,cookie,body,get,id,http,get,response,headers,add,location,string,body,get,redirect,http,send,response,headers,302,0,http,close
SamlAuthenticationIT -> private void httpLogin(HttpExchange http) throws IOException;1527622193;Provides the "login" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to find the login page for the IdP, and then_sends a redirect to that page.;private void httpLogin(HttpExchange http) throws IOException {_        final Response prepare = client().performRequest("POST", "/_xpack/security/saml/prepare",_                emptyMap(), new StringEntity("{}", ContentType.APPLICATION_JSON), kibanaAuth())__        assertOK(prepare)__        final Map<String, Object> body = parseResponseAsMap(prepare.getEntity())__        logger.info("Created SAML authentication request {}", body)__        http.getResponseHeaders().add("Set-Cookie", REQUEST_ID_COOKIE + "=" + body.get("id"))__        http.getResponseHeaders().add("Location", (String) body.get("redirect"))__        http.sendResponseHeaders(302, 0)__        http.close()__    };provides,the,login,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,find,the,login,page,for,the,id,p,and,then,sends,a,redirect,to,that,page;private,void,http,login,http,exchange,http,throws,ioexception,final,response,prepare,client,perform,request,post,security,saml,prepare,empty,map,new,string,entity,content,type,kibana,auth,assert,ok,prepare,final,map,string,object,body,parse,response,as,map,prepare,get,entity,logger,info,created,saml,authentication,request,body,http,get,response,headers,add,set,cookie,body,get,id,http,get,response,headers,add,location,string,body,get,redirect,http,send,response,headers,302,0,http,close
SamlAuthenticationIT -> private void httpLogin(HttpExchange http) throws IOException;1535383145;Provides the "login" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to find the login page for the IdP, and then_sends a redirect to that page.;private void httpLogin(HttpExchange http) throws IOException {_        Request request = new Request("POST", "/_xpack/security/saml/prepare")__        request.setJsonEntity("{}")__        kibanaAuth(request)__        final Map<String, Object> body = entityAsMap(client().performRequest(request))__        logger.info("Created SAML authentication request {}", body)__        http.getResponseHeaders().add("Set-Cookie", REQUEST_ID_COOKIE + "=" + body.get("id"))__        http.getResponseHeaders().add("Location", (String) body.get("redirect"))__        http.sendResponseHeaders(302, 0)__        http.close()__    };provides,the,login,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,find,the,login,page,for,the,id,p,and,then,sends,a,redirect,to,that,page;private,void,http,login,http,exchange,http,throws,ioexception,request,request,new,request,post,security,saml,prepare,request,set,json,entity,kibana,auth,request,final,map,string,object,body,entity,as,map,client,perform,request,request,logger,info,created,saml,authentication,request,body,http,get,response,headers,add,set,cookie,body,get,id,http,get,response,headers,add,location,string,body,get,redirect,http,send,response,headers,302,0,http,close
SamlAuthenticationIT -> private void httpLogin(HttpExchange http) throws IOException;1535723122;Provides the "login" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to find the login page for the IdP, and then_sends a redirect to that page.;private void httpLogin(HttpExchange http) throws IOException {_        final Map<String, String> body = Collections.singletonMap("acs", this.acs.toString())__        Request request = buildRequest("POST", "/_xpack/security/saml/prepare", body, kibanaAuth())__        final Response prepare = client().performRequest(request)__        assertOK(prepare)__        final Map<String, Object> responseBody = parseResponseAsMap(prepare.getEntity())__        logger.info("Created SAML authentication request {}", responseBody)__        http.getResponseHeaders().add("Set-Cookie", REQUEST_ID_COOKIE + "=" + responseBody.get("id"))__        http.getResponseHeaders().add("Location", (String) responseBody.get("redirect"))__        http.sendResponseHeaders(302, 0)__        http.close()__    };provides,the,login,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,find,the,login,page,for,the,id,p,and,then,sends,a,redirect,to,that,page;private,void,http,login,http,exchange,http,throws,ioexception,final,map,string,string,body,collections,singleton,map,acs,this,acs,to,string,request,request,build,request,post,security,saml,prepare,body,kibana,auth,final,response,prepare,client,perform,request,request,assert,ok,prepare,final,map,string,object,response,body,parse,response,as,map,prepare,get,entity,logger,info,created,saml,authentication,request,response,body,http,get,response,headers,add,set,cookie,response,body,get,id,http,get,response,headers,add,location,string,response,body,get,redirect,http,send,response,headers,302,0,http,close
SamlAuthenticationIT -> private void httpLogin(HttpExchange http) throws IOException;1539815831;Provides the "login" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to find the login page for the IdP, and then_sends a redirect to that page.;private void httpLogin(HttpExchange http) throws IOException {_        final Map<String, String> body = Collections.singletonMap("acs", this.acs.toString())__        Request request = buildRequest("POST", "/_xpack/security/saml/prepare", body, kibanaAuth())__        final Response prepare = client().performRequest(request)__        assertOK(prepare)__        final Map<String, Object> responseBody = parseResponseAsMap(prepare.getEntity())__        logger.info("Created SAML authentication request {}", responseBody)__        http.getResponseHeaders().add("Set-Cookie", REQUEST_ID_COOKIE + "=" + responseBody.get("id"))__        http.getResponseHeaders().add("Location", (String) responseBody.get("redirect"))__        http.sendResponseHeaders(302, 0)__        http.close()__    };provides,the,login,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,find,the,login,page,for,the,id,p,and,then,sends,a,redirect,to,that,page;private,void,http,login,http,exchange,http,throws,ioexception,final,map,string,string,body,collections,singleton,map,acs,this,acs,to,string,request,request,build,request,post,security,saml,prepare,body,kibana,auth,final,response,prepare,client,perform,request,request,assert,ok,prepare,final,map,string,object,response,body,parse,response,as,map,prepare,get,entity,logger,info,created,saml,authentication,request,response,body,http,get,response,headers,add,set,cookie,response,body,get,id,http,get,response,headers,add,location,string,response,body,get,redirect,http,send,response,headers,302,0,http,close
SamlAuthenticationIT -> private void httpLogin(HttpExchange http) throws IOException;1544519590;Provides the "login" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to find the login page for the IdP, and then_sends a redirect to that page.;private void httpLogin(HttpExchange http) throws IOException {_        final Map<String, String> body = Collections.singletonMap("acs", this.acs.toString())__        Request request = buildRequest("POST", "/_security/saml/prepare", body, kibanaAuth())__        final Response prepare = client().performRequest(request)__        assertOK(prepare)__        final Map<String, Object> responseBody = parseResponseAsMap(prepare.getEntity())__        logger.info("Created SAML authentication request {}", responseBody)__        http.getResponseHeaders().add("Set-Cookie", REQUEST_ID_COOKIE + "=" + responseBody.get("id"))__        http.getResponseHeaders().add("Location", (String) responseBody.get("redirect"))__        http.sendResponseHeaders(302, 0)__        http.close()__    };provides,the,login,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,find,the,login,page,for,the,id,p,and,then,sends,a,redirect,to,that,page;private,void,http,login,http,exchange,http,throws,ioexception,final,map,string,string,body,collections,singleton,map,acs,this,acs,to,string,request,request,build,request,post,saml,prepare,body,kibana,auth,final,response,prepare,client,perform,request,request,assert,ok,prepare,final,map,string,object,response,body,parse,response,as,map,prepare,get,entity,logger,info,created,saml,authentication,request,response,body,http,get,response,headers,add,set,cookie,response,body,get,id,http,get,response,headers,add,location,string,response,body,get,redirect,http,send,response,headers,302,0,http,close
SamlAuthenticationIT -> private void verifyElasticsearchAccessTokenForRoleMapping(String accessToken) throws IOException;1535723122;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles if the user was created from Role-Mapping;private void verifyElasticsearchAccessTokenForRoleMapping(String accessToken) throws IOException {_        final Map<String, Object> map = callAuthenticateApiUsingAccessToken(accessToken)__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Odinson"))__        assertSingletonList(map.get("roles"), "kibana_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertSingletonList(metadata.get("saml_uid"), "thor")__        assertSingletonList(metadata.get("saml(urn:oid:0.9.2342.19200300.100.1.1)"), "thor")__        assertSingletonList(metadata.get("saml_displayName"), "Thor Odinson")__        assertSingletonList(metadata.get("saml(urn:oid:2.5.4.3)"), "Thor Odinson")__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles,if,the,user,was,created,from,role,mapping;private,void,verify,elasticsearch,access,token,for,role,mapping,string,access,token,throws,ioexception,final,map,string,object,map,call,authenticate,api,using,access,token,access,token,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,odinson,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,singleton,list,metadata,get,thor,assert,singleton,list,metadata,get,saml,urn,oid,0,9,2342,19200300,100,1,1,thor,assert,singleton,list,metadata,get,thor,odinson,assert,singleton,list,metadata,get,saml,urn,oid,2,5,4,3,thor,odinson
SamlAuthenticationIT -> private void verifyElasticsearchAccessTokenForRoleMapping(String accessToken) throws IOException;1539815831;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles if the user was created from Role-Mapping;private void verifyElasticsearchAccessTokenForRoleMapping(String accessToken) throws IOException {_        final Map<String, Object> map = callAuthenticateApiUsingAccessToken(accessToken)__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Odinson"))__        assertSingletonList(map.get("roles"), "kibana_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertSingletonList(metadata.get("saml_uid"), "thor")__        assertSingletonList(metadata.get("saml(urn:oid:0.9.2342.19200300.100.1.1)"), "thor")__        assertSingletonList(metadata.get("saml_displayName"), "Thor Odinson")__        assertSingletonList(metadata.get("saml(urn:oid:2.5.4.3)"), "Thor Odinson")__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles,if,the,user,was,created,from,role,mapping;private,void,verify,elasticsearch,access,token,for,role,mapping,string,access,token,throws,ioexception,final,map,string,object,map,call,authenticate,api,using,access,token,access,token,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,odinson,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,singleton,list,metadata,get,thor,assert,singleton,list,metadata,get,saml,urn,oid,0,9,2342,19200300,100,1,1,thor,assert,singleton,list,metadata,get,thor,odinson,assert,singleton,list,metadata,get,saml,urn,oid,2,5,4,3,thor,odinson
SamlAuthenticationIT -> private void verifyElasticsearchAccessTokenForRoleMapping(String accessToken) throws IOException;1544519590;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles if the user was created from Role-Mapping;private void verifyElasticsearchAccessTokenForRoleMapping(String accessToken) throws IOException {_        final Map<String, Object> map = callAuthenticateApiUsingAccessToken(accessToken)__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Odinson"))__        assertSingletonList(map.get("roles"), "kibana_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertSingletonList(metadata.get("saml_uid"), "thor")__        assertSingletonList(metadata.get("saml(urn:oid:0.9.2342.19200300.100.1.1)"), "thor")__        assertSingletonList(metadata.get("saml_displayName"), "Thor Odinson")__        assertSingletonList(metadata.get("saml(urn:oid:2.5.4.3)"), "Thor Odinson")__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles,if,the,user,was,created,from,role,mapping;private,void,verify,elasticsearch,access,token,for,role,mapping,string,access,token,throws,ioexception,final,map,string,object,map,call,authenticate,api,using,access,token,access,token,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,odinson,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,singleton,list,metadata,get,thor,assert,singleton,list,metadata,get,saml,urn,oid,0,9,2342,19200300,100,1,1,thor,assert,singleton,list,metadata,get,thor,odinson,assert,singleton,list,metadata,get,saml,urn,oid,2,5,4,3,thor,odinson
SamlAuthenticationIT -> public void testLoginUserWithSamlRoleMapping() throws Exception;1535723122;Tests that a user can login via a SAML idp:_It uses:_<ul>_<li>A real IdP (Shibboleth, running locally)</li>_<li>A fake UI, running in this JVM, that roughly mimic Kibana (see {@link #httpLogin}, {@link #httpAcs})</li>_<li>A fake web browser (apache http client)</li>_</ul>_It takes the following steps:_<ol>_<li>Requests a "login" on the local UI</li>_<li>Walks through the login process at the IdP</li>_<li>Receives a JSON response from the local UI that has a Bearer token</li>_<li>Uses that token to verify the user details</li>_</ol>;public void testLoginUserWithSamlRoleMapping() throws Exception {_        _        final Tuple<String, String> authTokens = loginViaSaml("http://localhost:54321" + SP_ACS_PATH_1)__        verifyElasticsearchAccessTokenForRoleMapping(authTokens.v1())__        final String accessToken = verifyElasticsearchRefreshToken(authTokens.v2())__        verifyElasticsearchAccessTokenForRoleMapping(accessToken)__    };tests,that,a,user,can,login,via,a,saml,idp,it,uses,ul,li,a,real,id,p,shibboleth,running,locally,li,li,a,fake,ui,running,in,this,jvm,that,roughly,mimic,kibana,see,link,http,login,link,http,acs,li,li,a,fake,web,browser,apache,http,client,li,ul,it,takes,the,following,steps,ol,li,requests,a,login,on,the,local,ui,li,li,walks,through,the,login,process,at,the,id,p,li,li,receives,a,json,response,from,the,local,ui,that,has,a,bearer,token,li,li,uses,that,token,to,verify,the,user,details,li,ol;public,void,test,login,user,with,saml,role,mapping,throws,exception,final,tuple,string,string,auth,tokens,login,via,saml,http,localhost,54321,verify,elasticsearch,access,token,for,role,mapping,auth,tokens,v1,final,string,access,token,verify,elasticsearch,refresh,token,auth,tokens,v2,verify,elasticsearch,access,token,for,role,mapping,access,token
SamlAuthenticationIT -> public void testLoginUserWithSamlRoleMapping() throws Exception;1539815831;Tests that a user can login via a SAML idp:_It uses:_<ul>_<li>A real IdP (Shibboleth, running locally)</li>_<li>A fake UI, running in this JVM, that roughly mimic Kibana (see {@link #httpLogin}, {@link #httpAcs})</li>_<li>A fake web browser (apache http client)</li>_</ul>_It takes the following steps:_<ol>_<li>Requests a "login" on the local UI</li>_<li>Walks through the login process at the IdP</li>_<li>Receives a JSON response from the local UI that has a Bearer token</li>_<li>Uses that token to verify the user details</li>_</ol>;public void testLoginUserWithSamlRoleMapping() throws Exception {_        _        final Tuple<String, String> authTokens = loginViaSaml("http://localhost:54321" + SP_ACS_PATH_1)__        verifyElasticsearchAccessTokenForRoleMapping(authTokens.v1())__        final String accessToken = verifyElasticsearchRefreshToken(authTokens.v2())__        verifyElasticsearchAccessTokenForRoleMapping(accessToken)__    };tests,that,a,user,can,login,via,a,saml,idp,it,uses,ul,li,a,real,id,p,shibboleth,running,locally,li,li,a,fake,ui,running,in,this,jvm,that,roughly,mimic,kibana,see,link,http,login,link,http,acs,li,li,a,fake,web,browser,apache,http,client,li,ul,it,takes,the,following,steps,ol,li,requests,a,login,on,the,local,ui,li,li,walks,through,the,login,process,at,the,id,p,li,li,receives,a,json,response,from,the,local,ui,that,has,a,bearer,token,li,li,uses,that,token,to,verify,the,user,details,li,ol;public,void,test,login,user,with,saml,role,mapping,throws,exception,final,tuple,string,string,auth,tokens,login,via,saml,http,localhost,54321,verify,elasticsearch,access,token,for,role,mapping,auth,tokens,v1,final,string,access,token,verify,elasticsearch,refresh,token,auth,tokens,v2,verify,elasticsearch,access,token,for,role,mapping,access,token
SamlAuthenticationIT -> public void testLoginUserWithSamlRoleMapping() throws Exception;1544519590;Tests that a user can login via a SAML idp:_It uses:_<ul>_<li>A real IdP (Shibboleth, running locally)</li>_<li>A fake UI, running in this JVM, that roughly mimic Kibana (see {@link #httpLogin}, {@link #httpAcs})</li>_<li>A fake web browser (apache http client)</li>_</ul>_It takes the following steps:_<ol>_<li>Requests a "login" on the local UI</li>_<li>Walks through the login process at the IdP</li>_<li>Receives a JSON response from the local UI that has a Bearer token</li>_<li>Uses that token to verify the user details</li>_</ol>;public void testLoginUserWithSamlRoleMapping() throws Exception {_        _        final Tuple<String, String> authTokens = loginViaSaml("http://localhost:54321" + SP_ACS_PATH_1)__        verifyElasticsearchAccessTokenForRoleMapping(authTokens.v1())__        final String accessToken = verifyElasticsearchRefreshToken(authTokens.v2())__        verifyElasticsearchAccessTokenForRoleMapping(accessToken)__    };tests,that,a,user,can,login,via,a,saml,idp,it,uses,ul,li,a,real,id,p,shibboleth,running,locally,li,li,a,fake,ui,running,in,this,jvm,that,roughly,mimic,kibana,see,link,http,login,link,http,acs,li,li,a,fake,web,browser,apache,http,client,li,ul,it,takes,the,following,steps,ol,li,requests,a,login,on,the,local,ui,li,li,walks,through,the,login,process,at,the,id,p,li,li,receives,a,json,response,from,the,local,ui,that,has,a,bearer,token,li,li,uses,that,token,to,verify,the,user,details,li,ol;public,void,test,login,user,with,saml,role,mapping,throws,exception,final,tuple,string,string,auth,tokens,login,via,saml,http,localhost,54321,verify,elasticsearch,access,token,for,role,mapping,auth,tokens,v1,final,string,access,token,verify,elasticsearch,refresh,token,auth,tokens,v2,verify,elasticsearch,access,token,for,role,mapping,access,token
SamlAuthenticationIT -> @Before     public void setKibanaPassword() throws IOException;1524684173;We perform all requests to Elasticsearch as the "kibana" user, as this is the user that will be used_in a typical SAML deployment (where Kibana is providing the UI for the SAML Web SSO interactions)._Before we can use the Kibana user, we need to set its password to something we know.;@Before_    public void setKibanaPassword() throws IOException {_        final HttpEntity json = new StringEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }", ContentType.APPLICATION_JSON)__        final Response response = adminClient().performRequest("PUT", "/_xpack/security/user/kibana/_password", emptyMap(), json)__        assertOK(response)__    };we,perform,all,requests,to,elasticsearch,as,the,kibana,user,as,this,is,the,user,that,will,be,used,in,a,typical,saml,deployment,where,kibana,is,providing,the,ui,for,the,saml,web,sso,interactions,before,we,can,use,the,kibana,user,we,need,to,set,its,password,to,something,we,know;before,public,void,set,kibana,password,throws,ioexception,final,http,entity,json,new,string,entity,password,content,type,final,response,response,admin,client,perform,request,put,security,user,kibana,empty,map,json,assert,ok,response
SamlAuthenticationIT -> @Before     public void setKibanaPassword() throws IOException;1527622193;We perform all requests to Elasticsearch as the "kibana" user, as this is the user that will be used_in a typical SAML deployment (where Kibana is providing the UI for the SAML Web SSO interactions)._Before we can use the Kibana user, we need to set its password to something we know.;@Before_    public void setKibanaPassword() throws IOException {_        final HttpEntity json = new StringEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }", ContentType.APPLICATION_JSON)__        final Response response = adminClient().performRequest("PUT", "/_xpack/security/user/kibana/_password", emptyMap(), json)__        assertOK(response)__    };we,perform,all,requests,to,elasticsearch,as,the,kibana,user,as,this,is,the,user,that,will,be,used,in,a,typical,saml,deployment,where,kibana,is,providing,the,ui,for,the,saml,web,sso,interactions,before,we,can,use,the,kibana,user,we,need,to,set,its,password,to,something,we,know;before,public,void,set,kibana,password,throws,ioexception,final,http,entity,json,new,string,entity,password,content,type,final,response,response,admin,client,perform,request,put,security,user,kibana,empty,map,json,assert,ok,response
SamlAuthenticationIT -> @Before     public void setKibanaPassword() throws IOException;1535383145;We perform all requests to Elasticsearch as the "kibana" user, as this is the user that will be used_in a typical SAML deployment (where Kibana is providing the UI for the SAML Web SSO interactions)._Before we can use the Kibana user, we need to set its password to something we know.;@Before_    public void setKibanaPassword() throws IOException {_        Request request = new Request("PUT", "/_xpack/security/user/kibana/_password")__        request.setJsonEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }")__        adminClient().performRequest(request)__    };we,perform,all,requests,to,elasticsearch,as,the,kibana,user,as,this,is,the,user,that,will,be,used,in,a,typical,saml,deployment,where,kibana,is,providing,the,ui,for,the,saml,web,sso,interactions,before,we,can,use,the,kibana,user,we,need,to,set,its,password,to,something,we,know;before,public,void,set,kibana,password,throws,ioexception,request,request,new,request,put,security,user,kibana,request,set,json,entity,password,admin,client,perform,request,request
SamlAuthenticationIT -> @Before     public void setKibanaPassword() throws IOException;1535723122;We perform all requests to Elasticsearch as the "kibana" user, as this is the user that will be used_in a typical SAML deployment (where Kibana is providing the UI for the SAML Web SSO interactions)._Before we can use the Kibana user, we need to set its password to something we know.;@Before_    public void setKibanaPassword() throws IOException {_        Request request = new Request("PUT", "/_xpack/security/user/kibana/_password")__        request.setJsonEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }")__        adminClient().performRequest(request)__    };we,perform,all,requests,to,elasticsearch,as,the,kibana,user,as,this,is,the,user,that,will,be,used,in,a,typical,saml,deployment,where,kibana,is,providing,the,ui,for,the,saml,web,sso,interactions,before,we,can,use,the,kibana,user,we,need,to,set,its,password,to,something,we,know;before,public,void,set,kibana,password,throws,ioexception,request,request,new,request,put,security,user,kibana,request,set,json,entity,password,admin,client,perform,request,request
SamlAuthenticationIT -> @Before     public void setKibanaPassword() throws IOException;1539815831;We perform all requests to Elasticsearch as the "kibana" user, as this is the user that will be used_in a typical SAML deployment (where Kibana is providing the UI for the SAML Web SSO interactions)._Before we can use the Kibana user, we need to set its password to something we know.;@Before_    public void setKibanaPassword() throws IOException {_        Request request = new Request("PUT", "/_xpack/security/user/kibana/_password")__        request.setJsonEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }")__        adminClient().performRequest(request)__    };we,perform,all,requests,to,elasticsearch,as,the,kibana,user,as,this,is,the,user,that,will,be,used,in,a,typical,saml,deployment,where,kibana,is,providing,the,ui,for,the,saml,web,sso,interactions,before,we,can,use,the,kibana,user,we,need,to,set,its,password,to,something,we,know;before,public,void,set,kibana,password,throws,ioexception,request,request,new,request,put,security,user,kibana,request,set,json,entity,password,admin,client,perform,request,request
SamlAuthenticationIT -> @Before     public void setKibanaPassword() throws IOException;1544519590;We perform all requests to Elasticsearch as the "kibana" user, as this is the user that will be used_in a typical SAML deployment (where Kibana is providing the UI for the SAML Web SSO interactions)._Before we can use the Kibana user, we need to set its password to something we know.;@Before_    public void setKibanaPassword() throws IOException {_        Request request = new Request("PUT", "/_security/user/kibana/_password")__        request.setJsonEntity("{ \"password\" : \"" + KIBANA_PASSWORD + "\" }")__        adminClient().performRequest(request)__    };we,perform,all,requests,to,elasticsearch,as,the,kibana,user,as,this,is,the,user,that,will,be,used,in,a,typical,saml,deployment,where,kibana,is,providing,the,ui,for,the,saml,web,sso,interactions,before,we,can,use,the,kibana,user,we,need,to,set,its,password,to,something,we,know;before,public,void,set,kibana,password,throws,ioexception,request,request,new,request,put,user,kibana,request,set,json,entity,password,admin,client,perform,request,request
SamlAuthenticationIT -> public void testLoginUser() throws Exception;1524684173;Tests that a user can login via a SAML idp:_It uses:_<ul>_<li>A real IdP (Shibboleth, running locally)</li>_<li>A fake UI, running in this JVM, that roughly mimic Kibana (see {@link #httpLogin}, {@link #httpAcs})</li>_<li>A fake web browser (apache http client)</li>_</ul>_It takes the following steps:_<ol>_<li>Requests a "login" on the local UI</li>_<li>Walks through the login process at the IdP</li>_<li>Receives a JSON response from the local UI that has a Bearer token</li>_<li>Uses that token to verify the user details</li>_</ol>;public void testLoginUser() throws Exception {_        final BasicHttpContext context = new BasicHttpContext()__        try (CloseableHttpClient client = getHttpClient()) {_            final URI loginUri = goToLoginPage(client, context)__            final URI consentUri = submitLoginForm(client, context, loginUri)__            final Tuple<URI, String> tuple = submitConsentForm(context, client, consentUri)__            final Map<String, Object> result = submitSamlResponse(context, client, tuple.v1(), tuple.v2())__            assertThat(result.get("username"), equalTo("thor"))___            final Object expiresIn = result.get("expires_in")__            assertThat(expiresIn, instanceOf(Number.class))__            assertThat(((Number) expiresIn).longValue(), greaterThan(TimeValue.timeValueMinutes(15).seconds()))___            final Object accessToken = result.get("access_token")__            assertThat(accessToken, notNullValue())__            assertThat(accessToken, instanceOf(String.class))__            verifyElasticsearchAccessToken((String) accessToken)___            final Object refreshToken = result.get("refresh_token")__            assertThat(refreshToken, notNullValue())__            assertThat(refreshToken, instanceOf(String.class))__            verifyElasticsearchRefreshToken((String) refreshToken)__        }_    };tests,that,a,user,can,login,via,a,saml,idp,it,uses,ul,li,a,real,id,p,shibboleth,running,locally,li,li,a,fake,ui,running,in,this,jvm,that,roughly,mimic,kibana,see,link,http,login,link,http,acs,li,li,a,fake,web,browser,apache,http,client,li,ul,it,takes,the,following,steps,ol,li,requests,a,login,on,the,local,ui,li,li,walks,through,the,login,process,at,the,id,p,li,li,receives,a,json,response,from,the,local,ui,that,has,a,bearer,token,li,li,uses,that,token,to,verify,the,user,details,li,ol;public,void,test,login,user,throws,exception,final,basic,http,context,context,new,basic,http,context,try,closeable,http,client,client,get,http,client,final,uri,login,uri,go,to,login,page,client,context,final,uri,consent,uri,submit,login,form,client,context,login,uri,final,tuple,uri,string,tuple,submit,consent,form,context,client,consent,uri,final,map,string,object,result,submit,saml,response,context,client,tuple,v1,tuple,v2,assert,that,result,get,username,equal,to,thor,final,object,expires,in,result,get,assert,that,expires,in,instance,of,number,class,assert,that,number,expires,in,long,value,greater,than,time,value,time,value,minutes,15,seconds,final,object,access,token,result,get,assert,that,access,token,not,null,value,assert,that,access,token,instance,of,string,class,verify,elasticsearch,access,token,string,access,token,final,object,refresh,token,result,get,assert,that,refresh,token,not,null,value,assert,that,refresh,token,instance,of,string,class,verify,elasticsearch,refresh,token,string,refresh,token
SamlAuthenticationIT -> public void testLoginUser() throws Exception;1527622193;Tests that a user can login via a SAML idp:_It uses:_<ul>_<li>A real IdP (Shibboleth, running locally)</li>_<li>A fake UI, running in this JVM, that roughly mimic Kibana (see {@link #httpLogin}, {@link #httpAcs})</li>_<li>A fake web browser (apache http client)</li>_</ul>_It takes the following steps:_<ol>_<li>Requests a "login" on the local UI</li>_<li>Walks through the login process at the IdP</li>_<li>Receives a JSON response from the local UI that has a Bearer token</li>_<li>Uses that token to verify the user details</li>_</ol>;public void testLoginUser() throws Exception {_        final BasicHttpContext context = new BasicHttpContext()__        try (CloseableHttpClient client = getHttpClient()) {_            final URI loginUri = goToLoginPage(client, context)__            final URI consentUri = submitLoginForm(client, context, loginUri)__            final Tuple<URI, String> tuple = submitConsentForm(context, client, consentUri)__            final Map<String, Object> result = submitSamlResponse(context, client, tuple.v1(), tuple.v2())__            assertThat(result.get("username"), equalTo("thor"))___            final Object expiresIn = result.get("expires_in")__            assertThat(expiresIn, instanceOf(Number.class))__            assertThat(((Number) expiresIn).longValue(), greaterThan(TimeValue.timeValueMinutes(15).seconds()))___            final Object accessToken = result.get("access_token")__            assertThat(accessToken, notNullValue())__            assertThat(accessToken, instanceOf(String.class))__            verifyElasticsearchAccessToken((String) accessToken)___            final Object refreshToken = result.get("refresh_token")__            assertThat(refreshToken, notNullValue())__            assertThat(refreshToken, instanceOf(String.class))__            verifyElasticsearchRefreshToken((String) refreshToken)__        }_    };tests,that,a,user,can,login,via,a,saml,idp,it,uses,ul,li,a,real,id,p,shibboleth,running,locally,li,li,a,fake,ui,running,in,this,jvm,that,roughly,mimic,kibana,see,link,http,login,link,http,acs,li,li,a,fake,web,browser,apache,http,client,li,ul,it,takes,the,following,steps,ol,li,requests,a,login,on,the,local,ui,li,li,walks,through,the,login,process,at,the,id,p,li,li,receives,a,json,response,from,the,local,ui,that,has,a,bearer,token,li,li,uses,that,token,to,verify,the,user,details,li,ol;public,void,test,login,user,throws,exception,final,basic,http,context,context,new,basic,http,context,try,closeable,http,client,client,get,http,client,final,uri,login,uri,go,to,login,page,client,context,final,uri,consent,uri,submit,login,form,client,context,login,uri,final,tuple,uri,string,tuple,submit,consent,form,context,client,consent,uri,final,map,string,object,result,submit,saml,response,context,client,tuple,v1,tuple,v2,assert,that,result,get,username,equal,to,thor,final,object,expires,in,result,get,assert,that,expires,in,instance,of,number,class,assert,that,number,expires,in,long,value,greater,than,time,value,time,value,minutes,15,seconds,final,object,access,token,result,get,assert,that,access,token,not,null,value,assert,that,access,token,instance,of,string,class,verify,elasticsearch,access,token,string,access,token,final,object,refresh,token,result,get,assert,that,refresh,token,not,null,value,assert,that,refresh,token,instance,of,string,class,verify,elasticsearch,refresh,token,string,refresh,token
SamlAuthenticationIT -> public void testLoginUser() throws Exception;1535383145;Tests that a user can login via a SAML idp:_It uses:_<ul>_<li>A real IdP (Shibboleth, running locally)</li>_<li>A fake UI, running in this JVM, that roughly mimic Kibana (see {@link #httpLogin}, {@link #httpAcs})</li>_<li>A fake web browser (apache http client)</li>_</ul>_It takes the following steps:_<ol>_<li>Requests a "login" on the local UI</li>_<li>Walks through the login process at the IdP</li>_<li>Receives a JSON response from the local UI that has a Bearer token</li>_<li>Uses that token to verify the user details</li>_</ol>;public void testLoginUser() throws Exception {_        final BasicHttpContext context = new BasicHttpContext()__        try (CloseableHttpClient client = getHttpClient()) {_            final URI loginUri = goToLoginPage(client, context)__            final URI consentUri = submitLoginForm(client, context, loginUri)__            final Tuple<URI, String> tuple = submitConsentForm(context, client, consentUri)__            final Map<String, Object> result = submitSamlResponse(context, client, tuple.v1(), tuple.v2())__            assertThat(result.get("username"), equalTo("thor"))___            final Object expiresIn = result.get("expires_in")__            assertThat(expiresIn, instanceOf(Number.class))__            assertThat(((Number) expiresIn).longValue(), greaterThan(TimeValue.timeValueMinutes(15).seconds()))___            final Object accessToken = result.get("access_token")__            assertThat(accessToken, notNullValue())__            assertThat(accessToken, instanceOf(String.class))__            verifyElasticsearchAccessToken((String) accessToken)___            final Object refreshToken = result.get("refresh_token")__            assertThat(refreshToken, notNullValue())__            assertThat(refreshToken, instanceOf(String.class))__            verifyElasticsearchRefreshToken((String) refreshToken)__        }_    };tests,that,a,user,can,login,via,a,saml,idp,it,uses,ul,li,a,real,id,p,shibboleth,running,locally,li,li,a,fake,ui,running,in,this,jvm,that,roughly,mimic,kibana,see,link,http,login,link,http,acs,li,li,a,fake,web,browser,apache,http,client,li,ul,it,takes,the,following,steps,ol,li,requests,a,login,on,the,local,ui,li,li,walks,through,the,login,process,at,the,id,p,li,li,receives,a,json,response,from,the,local,ui,that,has,a,bearer,token,li,li,uses,that,token,to,verify,the,user,details,li,ol;public,void,test,login,user,throws,exception,final,basic,http,context,context,new,basic,http,context,try,closeable,http,client,client,get,http,client,final,uri,login,uri,go,to,login,page,client,context,final,uri,consent,uri,submit,login,form,client,context,login,uri,final,tuple,uri,string,tuple,submit,consent,form,context,client,consent,uri,final,map,string,object,result,submit,saml,response,context,client,tuple,v1,tuple,v2,assert,that,result,get,username,equal,to,thor,final,object,expires,in,result,get,assert,that,expires,in,instance,of,number,class,assert,that,number,expires,in,long,value,greater,than,time,value,time,value,minutes,15,seconds,final,object,access,token,result,get,assert,that,access,token,not,null,value,assert,that,access,token,instance,of,string,class,verify,elasticsearch,access,token,string,access,token,final,object,refresh,token,result,get,assert,that,refresh,token,not,null,value,assert,that,refresh,token,instance,of,string,class,verify,elasticsearch,refresh,token,string,refresh,token
SamlAuthenticationIT -> private void verifyElasticsearchRefreshToken(String refreshToken) throws IOException;1524684173;Verifies that the provided "Refresh Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_can be used to get a new valid access token and refresh token.;private void verifyElasticsearchRefreshToken(String refreshToken) throws IOException {_        final String body = "{ \"grant_type\":\"refresh_token\", \"refresh_token\":\"" + refreshToken + "\" }"__        final Response response = client().performRequest("POST", "/_xpack/security/oauth2/token",_                emptyMap(), new StringEntity(body, ContentType.APPLICATION_JSON), kibanaAuth())__        assertOK(response)___        final Map<String, Object> result = parseResponseAsMap(response.getEntity())__        final Object newRefreshToken = result.get("refresh_token")__        assertThat(newRefreshToken, notNullValue())__        assertThat(newRefreshToken, instanceOf(String.class))___        final Object accessToken = result.get("access_token")__        assertThat(accessToken, notNullValue())__        assertThat(accessToken, instanceOf(String.class))__        verifyElasticsearchAccessToken((String) accessToken)__    };verifies,that,the,provided,refresh,token,see,link,org,elasticsearch,xpack,security,authc,token,service,can,be,used,to,get,a,new,valid,access,token,and,refresh,token;private,void,verify,elasticsearch,refresh,token,string,refresh,token,throws,ioexception,final,string,body,refresh,token,final,response,response,client,perform,request,post,security,oauth2,token,empty,map,new,string,entity,body,content,type,kibana,auth,assert,ok,response,final,map,string,object,result,parse,response,as,map,response,get,entity,final,object,new,refresh,token,result,get,assert,that,new,refresh,token,not,null,value,assert,that,new,refresh,token,instance,of,string,class,final,object,access,token,result,get,assert,that,access,token,not,null,value,assert,that,access,token,instance,of,string,class,verify,elasticsearch,access,token,string,access,token
SamlAuthenticationIT -> private void verifyElasticsearchRefreshToken(String refreshToken) throws IOException;1527622193;Verifies that the provided "Refresh Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_can be used to get a new valid access token and refresh token.;private void verifyElasticsearchRefreshToken(String refreshToken) throws IOException {_        final String body = "{ \"grant_type\":\"refresh_token\", \"refresh_token\":\"" + refreshToken + "\" }"__        final Response response = client().performRequest("POST", "/_xpack/security/oauth2/token",_                emptyMap(), new StringEntity(body, ContentType.APPLICATION_JSON), kibanaAuth())__        assertOK(response)___        final Map<String, Object> result = parseResponseAsMap(response.getEntity())__        final Object newRefreshToken = result.get("refresh_token")__        assertThat(newRefreshToken, notNullValue())__        assertThat(newRefreshToken, instanceOf(String.class))___        final Object accessToken = result.get("access_token")__        assertThat(accessToken, notNullValue())__        assertThat(accessToken, instanceOf(String.class))__        verifyElasticsearchAccessToken((String) accessToken)__    };verifies,that,the,provided,refresh,token,see,link,org,elasticsearch,xpack,security,authc,token,service,can,be,used,to,get,a,new,valid,access,token,and,refresh,token;private,void,verify,elasticsearch,refresh,token,string,refresh,token,throws,ioexception,final,string,body,refresh,token,final,response,response,client,perform,request,post,security,oauth2,token,empty,map,new,string,entity,body,content,type,kibana,auth,assert,ok,response,final,map,string,object,result,parse,response,as,map,response,get,entity,final,object,new,refresh,token,result,get,assert,that,new,refresh,token,not,null,value,assert,that,new,refresh,token,instance,of,string,class,final,object,access,token,result,get,assert,that,access,token,not,null,value,assert,that,access,token,instance,of,string,class,verify,elasticsearch,access,token,string,access,token
SamlAuthenticationIT -> private void verifyElasticsearchRefreshToken(String refreshToken) throws IOException;1535383145;Verifies that the provided "Refresh Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_can be used to get a new valid access token and refresh token.;private void verifyElasticsearchRefreshToken(String refreshToken) throws IOException {_        Request request = new Request("POST", "/_xpack/security/oauth2/token")__        request.setJsonEntity("{ \"grant_type\":\"refresh_token\", \"refresh_token\":\"" + refreshToken + "\" }")__        kibanaAuth(request)___        final Map<String, Object> result = entityAsMap(client().performRequest(request))__        final Object newRefreshToken = result.get("refresh_token")__        assertThat(newRefreshToken, notNullValue())__        assertThat(newRefreshToken, instanceOf(String.class))___        final Object accessToken = result.get("access_token")__        assertThat(accessToken, notNullValue())__        assertThat(accessToken, instanceOf(String.class))__        verifyElasticsearchAccessToken((String) accessToken)__    };verifies,that,the,provided,refresh,token,see,link,org,elasticsearch,xpack,security,authc,token,service,can,be,used,to,get,a,new,valid,access,token,and,refresh,token;private,void,verify,elasticsearch,refresh,token,string,refresh,token,throws,ioexception,request,request,new,request,post,security,oauth2,token,request,set,json,entity,refresh,token,kibana,auth,request,final,map,string,object,result,entity,as,map,client,perform,request,request,final,object,new,refresh,token,result,get,assert,that,new,refresh,token,not,null,value,assert,that,new,refresh,token,instance,of,string,class,final,object,access,token,result,get,assert,that,access,token,not,null,value,assert,that,access,token,instance,of,string,class,verify,elasticsearch,access,token,string,access,token
SamlAuthenticationIT -> private String getFormTarget(InputStream content) throws IOException;1524684173;Finds the target URL for the HTML form within the provided content.;private String getFormTarget(InputStream content) throws IOException {_        _        return findLine(Streams.readAllLines(content), "<form action=\"([^\"]+)\"")__    };finds,the,target,url,for,the,html,form,within,the,provided,content;private,string,get,form,target,input,stream,content,throws,ioexception,return,find,line,streams,read,all,lines,content,form,action
SamlAuthenticationIT -> private String getFormTarget(InputStream content) throws IOException;1527622193;Finds the target URL for the HTML form within the provided content.;private String getFormTarget(InputStream content) throws IOException {_        _        return findLine(Streams.readAllLines(content), "<form action=\"([^\"]+)\"")__    };finds,the,target,url,for,the,html,form,within,the,provided,content;private,string,get,form,target,input,stream,content,throws,ioexception,return,find,line,streams,read,all,lines,content,form,action
SamlAuthenticationIT -> private String getFormTarget(InputStream content) throws IOException;1535383145;Finds the target URL for the HTML form within the provided content.;private String getFormTarget(InputStream content) throws IOException {_        _        return findLine(Streams.readAllLines(content), "<form action=\"([^\"]+)\"")__    };finds,the,target,url,for,the,html,form,within,the,provided,content;private,string,get,form,target,input,stream,content,throws,ioexception,return,find,line,streams,read,all,lines,content,form,action
SamlAuthenticationIT -> private String getFormTarget(InputStream content) throws IOException;1535723122;Finds the target URL for the HTML form within the provided content.;private String getFormTarget(InputStream content) throws IOException {_        _        return findLine(Streams.readAllLines(content), "<form action=\"([^\"]+)\"")__    };finds,the,target,url,for,the,html,form,within,the,provided,content;private,string,get,form,target,input,stream,content,throws,ioexception,return,find,line,streams,read,all,lines,content,form,action
SamlAuthenticationIT -> private String getFormTarget(InputStream content) throws IOException;1539815831;Finds the target URL for the HTML form within the provided content.;private String getFormTarget(InputStream content) throws IOException {_        _        return findLine(Streams.readAllLines(content), "<form action=\"([^\"]+)\"")__    };finds,the,target,url,for,the,html,form,within,the,provided,content;private,string,get,form,target,input,stream,content,throws,ioexception,return,find,line,streams,read,all,lines,content,form,action
SamlAuthenticationIT -> private String getFormTarget(InputStream content) throws IOException;1544519590;Finds the target URL for the HTML form within the provided content.;private String getFormTarget(InputStream content) throws IOException {_        _        return findLine(Streams.readAllLines(content), "<form action=\"([^\"]+)\"")__    };finds,the,target,url,for,the,html,form,within,the,provided,content;private,string,get,form,target,input,stream,content,throws,ioexception,return,find,line,streams,read,all,lines,content,form,action
SamlAuthenticationIT -> private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)         throws IOException;1535723122;Submits a SAML assertion to the ACS URI.__@param acs  The URI to the Service Provider's Assertion-Consumer-Service._@param saml The (deflated + base64 encoded) {@code SAMLResponse} parameter to post the ACS;private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)_        throws IOException {_        assertThat("SAML submission target", acs, notNullValue())__        assertThat(acs, equalTo(this.acs))__        assertThat("SAML submission content", saml, notNullValue())___        _        _        final HttpPost form = new HttpPost(getUrl(this.acs.getPath()))__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair(SAML_RESPONSE_FIELD, saml))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context, response -> {_            assertHttpOk(response.getStatusLine())__            return parseResponseAsMap(response.getEntity())__        })__    };submits,a,saml,assertion,to,the,acs,uri,param,acs,the,uri,to,the,service,provider,s,assertion,consumer,service,param,saml,the,deflated,base64,encoded,code,samlresponse,parameter,to,post,the,acs;private,map,string,object,submit,saml,response,basic,http,context,context,closeable,http,client,client,uri,acs,string,saml,throws,ioexception,assert,that,saml,submission,target,acs,not,null,value,assert,that,acs,equal,to,this,acs,assert,that,saml,submission,content,saml,not,null,value,final,http,post,form,new,http,post,get,url,this,acs,get,path,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,saml,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,assert,http,ok,response,get,status,line,return,parse,response,as,map,response,get,entity
SamlAuthenticationIT -> private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)         throws IOException;1539815831;Submits a SAML assertion to the ACS URI.__@param acs  The URI to the Service Provider's Assertion-Consumer-Service._@param saml The (deflated + base64 encoded) {@code SAMLResponse} parameter to post the ACS;private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)_        throws IOException {_        assertThat("SAML submission target", acs, notNullValue())__        assertThat(acs, equalTo(this.acs))__        assertThat("SAML submission content", saml, notNullValue())___        _        _        final HttpPost form = new HttpPost(getUrl(this.acs.getPath()))__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair(SAML_RESPONSE_FIELD, saml))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context, response -> {_            assertHttpOk(response.getStatusLine())__            return parseResponseAsMap(response.getEntity())__        })__    };submits,a,saml,assertion,to,the,acs,uri,param,acs,the,uri,to,the,service,provider,s,assertion,consumer,service,param,saml,the,deflated,base64,encoded,code,samlresponse,parameter,to,post,the,acs;private,map,string,object,submit,saml,response,basic,http,context,context,closeable,http,client,client,uri,acs,string,saml,throws,ioexception,assert,that,saml,submission,target,acs,not,null,value,assert,that,acs,equal,to,this,acs,assert,that,saml,submission,content,saml,not,null,value,final,http,post,form,new,http,post,get,url,this,acs,get,path,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,saml,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,assert,http,ok,response,get,status,line,return,parse,response,as,map,response,get,entity
SamlAuthenticationIT -> private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)         throws IOException;1544519590;Submits a SAML assertion to the ACS URI.__@param acs  The URI to the Service Provider's Assertion-Consumer-Service._@param saml The (deflated + base64 encoded) {@code SAMLResponse} parameter to post the ACS;private Map<String, Object> submitSamlResponse(BasicHttpContext context, CloseableHttpClient client, URI acs, String saml)_        throws IOException {_        assertThat("SAML submission target", acs, notNullValue())__        assertThat(acs, equalTo(this.acs))__        assertThat("SAML submission content", saml, notNullValue())___        _        _        final HttpPost form = new HttpPost(getUrl(this.acs.getPath()))__        List<NameValuePair> params = new ArrayList<>()__        params.add(new BasicNameValuePair(SAML_RESPONSE_FIELD, saml))__        form.setEntity(new UrlEncodedFormEntity(params))___        return execute(client, form, context, response -> {_            assertHttpOk(response.getStatusLine())__            return parseResponseAsMap(response.getEntity())__        })__    };submits,a,saml,assertion,to,the,acs,uri,param,acs,the,uri,to,the,service,provider,s,assertion,consumer,service,param,saml,the,deflated,base64,encoded,code,samlresponse,parameter,to,post,the,acs;private,map,string,object,submit,saml,response,basic,http,context,context,closeable,http,client,client,uri,acs,string,saml,throws,ioexception,assert,that,saml,submission,target,acs,not,null,value,assert,that,acs,equal,to,this,acs,assert,that,saml,submission,content,saml,not,null,value,final,http,post,form,new,http,post,get,url,this,acs,get,path,list,name,value,pair,params,new,array,list,params,add,new,basic,name,value,pair,saml,form,set,entity,new,url,encoded,form,entity,params,return,execute,client,form,context,response,assert,http,ok,response,get,status,line,return,parse,response,as,map,response,get,entity
SamlAuthenticationIT -> private void verifyElasticsearchAccessToken(String accessToken) throws IOException;1524684173;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles.;private void verifyElasticsearchAccessToken(String accessToken) throws IOException {_        final BasicHeader authorization = new BasicHeader("Authorization", "Bearer " + accessToken)__        final Response response = client().performRequest("GET", "/_xpack/security/_authenticate", authorization)__        assertOK(response)__        final Map<String, Object> map = parseResponseAsMap(response.getEntity())__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Odinson"))__        assertSingletonList(map.get("roles"), "kibana_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertSingletonList(metadata.get("saml_uid"), "thor")__        assertSingletonList(metadata.get("saml(urn:oid:0.9.2342.19200300.100.1.1)"), "thor")__        assertSingletonList(metadata.get("saml_displayName"), "Thor Odinson")__        assertSingletonList(metadata.get("saml(urn:oid:2.5.4.3)"), "Thor Odinson")__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles;private,void,verify,elasticsearch,access,token,string,access,token,throws,ioexception,final,basic,header,authorization,new,basic,header,authorization,bearer,access,token,final,response,response,client,perform,request,get,security,authorization,assert,ok,response,final,map,string,object,map,parse,response,as,map,response,get,entity,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,odinson,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,singleton,list,metadata,get,thor,assert,singleton,list,metadata,get,saml,urn,oid,0,9,2342,19200300,100,1,1,thor,assert,singleton,list,metadata,get,thor,odinson,assert,singleton,list,metadata,get,saml,urn,oid,2,5,4,3,thor,odinson
SamlAuthenticationIT -> private void verifyElasticsearchAccessToken(String accessToken) throws IOException;1527622193;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles.;private void verifyElasticsearchAccessToken(String accessToken) throws IOException {_        final BasicHeader authorization = new BasicHeader("Authorization", "Bearer " + accessToken)__        final Response response = client().performRequest("GET", "/_xpack/security/_authenticate", authorization)__        assertOK(response)__        final Map<String, Object> map = parseResponseAsMap(response.getEntity())__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Odinson"))__        assertSingletonList(map.get("roles"), "kibana_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertSingletonList(metadata.get("saml_uid"), "thor")__        assertSingletonList(metadata.get("saml(urn:oid:0.9.2342.19200300.100.1.1)"), "thor")__        assertSingletonList(metadata.get("saml_displayName"), "Thor Odinson")__        assertSingletonList(metadata.get("saml(urn:oid:2.5.4.3)"), "Thor Odinson")__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles;private,void,verify,elasticsearch,access,token,string,access,token,throws,ioexception,final,basic,header,authorization,new,basic,header,authorization,bearer,access,token,final,response,response,client,perform,request,get,security,authorization,assert,ok,response,final,map,string,object,map,parse,response,as,map,response,get,entity,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,odinson,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,singleton,list,metadata,get,thor,assert,singleton,list,metadata,get,saml,urn,oid,0,9,2342,19200300,100,1,1,thor,assert,singleton,list,metadata,get,thor,odinson,assert,singleton,list,metadata,get,saml,urn,oid,2,5,4,3,thor,odinson
SamlAuthenticationIT -> private void verifyElasticsearchAccessToken(String accessToken) throws IOException;1535383145;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles.;private void verifyElasticsearchAccessToken(String accessToken) throws IOException {_        Request request = new Request("GET", "/_xpack/security/_authenticate")__        RequestOptions.Builder options = request.getOptions().toBuilder()__        options.addHeader("Authorization", "Bearer " + accessToken)__        request.setOptions(options)__        final Map<String, Object> map = entityAsMap(client().performRequest(request))__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Odinson"))__        assertSingletonList(map.get("roles"), "kibana_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertSingletonList(metadata.get("saml_uid"), "thor")__        assertSingletonList(metadata.get("saml(urn:oid:0.9.2342.19200300.100.1.1)"), "thor")__        assertSingletonList(metadata.get("saml_displayName"), "Thor Odinson")__        assertSingletonList(metadata.get("saml(urn:oid:2.5.4.3)"), "Thor Odinson")__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles;private,void,verify,elasticsearch,access,token,string,access,token,throws,ioexception,request,request,new,request,get,security,request,options,builder,options,request,get,options,to,builder,options,add,header,authorization,bearer,access,token,request,set,options,options,final,map,string,object,map,entity,as,map,client,perform,request,request,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,odinson,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,singleton,list,metadata,get,thor,assert,singleton,list,metadata,get,saml,urn,oid,0,9,2342,19200300,100,1,1,thor,assert,singleton,list,metadata,get,thor,odinson,assert,singleton,list,metadata,get,saml,urn,oid,2,5,4,3,thor,odinson
SamlAuthenticationIT -> private void httpAcs(HttpExchange http) throws IOException;1524684173;Provides the "Assertion-Consumer-Service" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to perform a SAML login, and just_forwards the JSON response back to the client.;private void httpAcs(HttpExchange http) throws IOException {_        final Response saml = samlAuthenticate(http)__        assertOK(saml)__        final byte[] content = Streams.copyToString(new InputStreamReader(saml.getEntity().getContent())).getBytes()__        http.getResponseHeaders().add("Content-Type", "application/json")__        http.sendResponseHeaders(200, content.length)__        http.getResponseBody().write(content)__        http.close()__    };provides,the,assertion,consumer,service,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,perform,a,saml,login,and,just,forwards,the,json,response,back,to,the,client;private,void,http,acs,http,exchange,http,throws,ioexception,final,response,saml,saml,authenticate,http,assert,ok,saml,final,byte,content,streams,copy,to,string,new,input,stream,reader,saml,get,entity,get,content,get,bytes,http,get,response,headers,add,content,type,application,json,http,send,response,headers,200,content,length,http,get,response,body,write,content,http,close
SamlAuthenticationIT -> private void httpAcs(HttpExchange http) throws IOException;1527622193;Provides the "Assertion-Consumer-Service" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to perform a SAML login, and just_forwards the JSON response back to the client.;private void httpAcs(HttpExchange http) throws IOException {_        final Response saml = samlAuthenticate(http)__        assertOK(saml)__        final byte[] content = Streams.copyToString(new InputStreamReader(saml.getEntity().getContent())).getBytes()__        http.getResponseHeaders().add("Content-Type", "application/json")__        http.sendResponseHeaders(200, content.length)__        http.getResponseBody().write(content)__        http.close()__    };provides,the,assertion,consumer,service,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,perform,a,saml,login,and,just,forwards,the,json,response,back,to,the,client;private,void,http,acs,http,exchange,http,throws,ioexception,final,response,saml,saml,authenticate,http,assert,ok,saml,final,byte,content,streams,copy,to,string,new,input,stream,reader,saml,get,entity,get,content,get,bytes,http,get,response,headers,add,content,type,application,json,http,send,response,headers,200,content,length,http,get,response,body,write,content,http,close
SamlAuthenticationIT -> private void httpAcs(HttpExchange http) throws IOException;1535383145;Provides the "Assertion-Consumer-Service" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to perform a SAML login, and just_forwards the JSON response back to the client.;private void httpAcs(HttpExchange http) throws IOException {_        final Response saml = samlAuthenticate(http)__        assertOK(saml)__        final byte[] content = Streams.copyToString(new InputStreamReader(saml.getEntity().getContent())).getBytes()__        http.getResponseHeaders().add("Content-Type", "application/json")__        http.sendResponseHeaders(200, content.length)__        http.getResponseBody().write(content)__        http.close()__    };provides,the,assertion,consumer,service,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,perform,a,saml,login,and,just,forwards,the,json,response,back,to,the,client;private,void,http,acs,http,exchange,http,throws,ioexception,final,response,saml,saml,authenticate,http,assert,ok,saml,final,byte,content,streams,copy,to,string,new,input,stream,reader,saml,get,entity,get,content,get,bytes,http,get,response,headers,add,content,type,application,json,http,send,response,headers,200,content,length,http,get,response,body,write,content,http,close
SamlAuthenticationIT -> private void httpAcs(HttpExchange http) throws IOException;1535723122;Provides the "Assertion-Consumer-Service" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to perform a SAML login, and just_forwards the JSON response back to the client.;private void httpAcs(HttpExchange http) throws IOException {_        final Response saml = samlAuthenticate(http)__        assertOK(saml)__        final byte[] content = Streams.copyToString(new InputStreamReader(saml.getEntity().getContent())).getBytes()__        http.getResponseHeaders().add("Content-Type", "application/json")__        http.sendResponseHeaders(200, content.length)__        http.getResponseBody().write(content)__        http.close()__    };provides,the,assertion,consumer,service,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,perform,a,saml,login,and,just,forwards,the,json,response,back,to,the,client;private,void,http,acs,http,exchange,http,throws,ioexception,final,response,saml,saml,authenticate,http,assert,ok,saml,final,byte,content,streams,copy,to,string,new,input,stream,reader,saml,get,entity,get,content,get,bytes,http,get,response,headers,add,content,type,application,json,http,send,response,headers,200,content,length,http,get,response,body,write,content,http,close
SamlAuthenticationIT -> private void httpAcs(HttpExchange http) throws IOException;1539815831;Provides the "Assertion-Consumer-Service" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to perform a SAML login, and just_forwards the JSON response back to the client.;private void httpAcs(HttpExchange http) throws IOException {_        final Response saml = samlAuthenticate(http)__        assertOK(saml)__        final byte[] content = Streams.copyToString(new InputStreamReader(saml.getEntity().getContent())).getBytes()__        http.getResponseHeaders().add("Content-Type", "application/json")__        http.sendResponseHeaders(200, content.length)__        http.getResponseBody().write(content)__        http.close()__    };provides,the,assertion,consumer,service,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,perform,a,saml,login,and,just,forwards,the,json,response,back,to,the,client;private,void,http,acs,http,exchange,http,throws,ioexception,final,response,saml,saml,authenticate,http,assert,ok,saml,final,byte,content,streams,copy,to,string,new,input,stream,reader,saml,get,entity,get,content,get,bytes,http,get,response,headers,add,content,type,application,json,http,send,response,headers,200,content,length,http,get,response,body,write,content,http,close
SamlAuthenticationIT -> private void httpAcs(HttpExchange http) throws IOException;1544519590;Provides the "Assertion-Consumer-Service" handler for the fake WebApp._This interacts with Elasticsearch (using the rest client) to perform a SAML login, and just_forwards the JSON response back to the client.;private void httpAcs(HttpExchange http) throws IOException {_        final Response saml = samlAuthenticate(http)__        assertOK(saml)__        final byte[] content = Streams.copyToString(new InputStreamReader(saml.getEntity().getContent())).getBytes()__        http.getResponseHeaders().add("Content-Type", "application/json")__        http.sendResponseHeaders(200, content.length)__        http.getResponseBody().write(content)__        http.close()__    };provides,the,assertion,consumer,service,handler,for,the,fake,web,app,this,interacts,with,elasticsearch,using,the,rest,client,to,perform,a,saml,login,and,just,forwards,the,json,response,back,to,the,client;private,void,http,acs,http,exchange,http,throws,ioexception,final,response,saml,saml,authenticate,http,assert,ok,saml,final,byte,content,streams,copy,to,string,new,input,stream,reader,saml,get,entity,get,content,get,bytes,http,get,response,headers,add,content,type,application,json,http,send,response,headers,200,content,length,http,get,response,body,write,content,http,close
SamlAuthenticationIT -> private void verifyElasticsearchAccessTokenForAuthorizingRealms(String accessToken) throws IOException;1535723122;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles if the user was retrieved from the native realm;private void verifyElasticsearchAccessTokenForAuthorizingRealms(String accessToken) throws IOException {_        final Map<String, Object> map = callAuthenticateApiUsingAccessToken(accessToken)__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Son of Odin"))__        assertSingletonList(map.get("roles"), "kibana_dashboard_only_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertThat(metadata.get("is_native"), equalTo(true))__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles,if,the,user,was,retrieved,from,the,native,realm;private,void,verify,elasticsearch,access,token,for,authorizing,realms,string,access,token,throws,ioexception,final,map,string,object,map,call,authenticate,api,using,access,token,access,token,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,son,of,odin,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,that,metadata,get,equal,to,true
SamlAuthenticationIT -> private void verifyElasticsearchAccessTokenForAuthorizingRealms(String accessToken) throws IOException;1539815831;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles if the user was retrieved from the native realm;private void verifyElasticsearchAccessTokenForAuthorizingRealms(String accessToken) throws IOException {_        final Map<String, Object> map = callAuthenticateApiUsingAccessToken(accessToken)__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Son of Odin"))__        assertSingletonList(map.get("roles"), "kibana_dashboard_only_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertThat(metadata.get("is_native"), equalTo(true))__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles,if,the,user,was,retrieved,from,the,native,realm;private,void,verify,elasticsearch,access,token,for,authorizing,realms,string,access,token,throws,ioexception,final,map,string,object,map,call,authenticate,api,using,access,token,access,token,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,son,of,odin,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,that,metadata,get,equal,to,true
SamlAuthenticationIT -> private void verifyElasticsearchAccessTokenForAuthorizingRealms(String accessToken) throws IOException;1544519590;Verifies that the provided "Access Token" (see {@link org.elasticsearch.xpack.security.authc.TokenService})_is for the expected user with the expected name and roles if the user was retrieved from the native realm;private void verifyElasticsearchAccessTokenForAuthorizingRealms(String accessToken) throws IOException {_        final Map<String, Object> map = callAuthenticateApiUsingAccessToken(accessToken)__        assertThat(map.get("username"), equalTo("thor"))__        assertThat(map.get("full_name"), equalTo("Thor Son of Odin"))__        assertSingletonList(map.get("roles"), "kibana_dashboard_only_user")___        assertThat(map.get("metadata"), instanceOf(Map.class))__        final Map<?, ?> metadata = (Map<?, ?>) map.get("metadata")__        assertThat(metadata.get("is_native"), equalTo(true))__    };verifies,that,the,provided,access,token,see,link,org,elasticsearch,xpack,security,authc,token,service,is,for,the,expected,user,with,the,expected,name,and,roles,if,the,user,was,retrieved,from,the,native,realm;private,void,verify,elasticsearch,access,token,for,authorizing,realms,string,access,token,throws,ioexception,final,map,string,object,map,call,authenticate,api,using,access,token,access,token,assert,that,map,get,username,equal,to,thor,assert,that,map,get,equal,to,thor,son,of,odin,assert,singleton,list,map,get,roles,assert,that,map,get,metadata,instance,of,map,class,final,map,metadata,map,map,get,metadata,assert,that,metadata,get,equal,to,true
