commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testNonExistentFile() throws Exception {     Path path = createTempDir().resolve("dne").     FileAttributesChecker checker = new FileAttributesChecker(path).     MockTerminal terminal = new MockTerminal().     checker.check(terminal).     assertTrue(terminal.getOutput(), terminal.getOutput().isEmpty()). }
false;public;0;10;;public void testNoPosix() throws Exception {     Configuration conf = Configuration.unix().toBuilder().setAttributeViews("basic").build().     try (FileSystem fs = Jimfs.newFileSystem(conf)) {         Path path = fs.getPath("temp").         FileAttributesChecker checker = new FileAttributesChecker(path).         MockTerminal terminal = new MockTerminal().         checker.check(terminal).         assertTrue(terminal.getOutput(), terminal.getOutput().isEmpty()).     } }
false;public;0;12;;public void testNoChanges() throws Exception {     Configuration conf = Configuration.unix().toBuilder().setAttributeViews("posix").build().     try (FileSystem fs = Jimfs.newFileSystem(conf)) {         Path path = fs.getPath("temp").         Files.createFile(path).         FileAttributesChecker checker = new FileAttributesChecker(path).         MockTerminal terminal = new MockTerminal().         checker.check(terminal).         assertTrue(terminal.getOutput(), terminal.getOutput().isEmpty()).     } }
false;public;0;21;;public void testPermissionsChanged() throws Exception {     Configuration conf = Configuration.unix().toBuilder().setAttributeViews("posix").build().     try (FileSystem fs = Jimfs.newFileSystem(conf)) {         Path path = fs.getPath("temp").         Files.createFile(path).         PosixFileAttributeView attrs = Files.getFileAttributeView(path, PosixFileAttributeView.class).         Set<PosixFilePermission> perms = new HashSet<>(attrs.readAttributes().permissions()).         perms.remove(PosixFilePermission.GROUP_READ).         attrs.setPermissions(perms).         FileAttributesChecker checker = new FileAttributesChecker(path).         perms.add(PosixFilePermission.GROUP_READ).         attrs.setPermissions(perms).         MockTerminal terminal = new MockTerminal().         checker.check(terminal).         String output = terminal.getOutput().         assertTrue(output, output.contains("permissions of [" + path + "] have changed")).     } }
false;public;0;17;;public void testOwnerChanged() throws Exception {     Configuration conf = Configuration.unix().toBuilder().setAttributeViews("posix").build().     try (FileSystem fs = Jimfs.newFileSystem(conf)) {         Path path = fs.getPath("temp").         Files.createFile(path).         FileAttributesChecker checker = new FileAttributesChecker(path).         UserPrincipal newOwner = fs.getUserPrincipalLookupService().lookupPrincipalByName("randomuser").         PosixFileAttributeView attrs = Files.getFileAttributeView(path, PosixFileAttributeView.class).         attrs.setOwner(newOwner).         MockTerminal terminal = new MockTerminal().         checker.check(terminal).         String output = terminal.getOutput().         assertTrue(output, output.contains("Owner of file [" + path + "] used to be")).     } }
false;public;0;17;;public void testGroupChanged() throws Exception {     Configuration conf = Configuration.unix().toBuilder().setAttributeViews("posix").build().     try (FileSystem fs = Jimfs.newFileSystem(conf)) {         Path path = fs.getPath("temp").         Files.createFile(path).         FileAttributesChecker checker = new FileAttributesChecker(path).         GroupPrincipal newGroup = fs.getUserPrincipalLookupService().lookupPrincipalByGroupName("randomgroup").         PosixFileAttributeView attrs = Files.getFileAttributeView(path, PosixFileAttributeView.class).         attrs.setGroup(newGroup).         MockTerminal terminal = new MockTerminal().         checker.check(terminal).         String output = terminal.getOutput().         assertTrue(output, output.contains("Group of file [" + path + "] used to be")).     } }
