# id;timestamp;commentText;codeText;commentWords;codeWords
UsersToolTests -> void assertRole(String role, String... users) throws IOException;1524684173;checks the role has the given users, or that the role does not exist if not users are passed.;void assertRole(String role, String... users) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            if (role.equals(roleUsers[0]) == false) {_                continue__            }_            if (users.length == 0) {_                fail("Found role " + role + " in users_roles file with users [" + roleUsers[1] + "]")__            }_            List<String> gotUsers = Arrays.asList(roleUsers[1].split(","))__            for (String user : users) {_                if (gotUsers.contains(user) == false) {_                    fail("Expected users [" + Arrays.toString(users) + "] for role " + role +_                         " but found [" + gotUsers.toString() + "]")__                }_            }_            return__        }_        if (users.length != 0) {_            fail("Could not find role " + role + " in users_roles file:\n" + lines.toString())__        }_    };checks,the,role,has,the,given,users,or,that,the,role,does,not,exist,if,not,users,are,passed;void,assert,role,string,role,string,users,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,if,role,equals,role,users,0,false,continue,if,users,length,0,fail,found,role,role,in,file,with,users,role,users,1,list,string,got,users,arrays,as,list,role,users,1,split,for,string,user,users,if,got,users,contains,user,false,fail,expected,users,arrays,to,string,users,for,role,role,but,found,got,users,to,string,return,if,users,length,0,fail,could,not,find,role,role,in,file,n,lines,to,string
UsersToolTests -> void assertRole(String role, String... users) throws IOException;1525248068;checks the role has the given users, or that the role does not exist if not users are passed.;void assertRole(String role, String... users) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            if (role.equals(roleUsers[0]) == false) {_                continue__            }_            if (users.length == 0) {_                fail("Found role " + role + " in users_roles file with users [" + roleUsers[1] + "]")__            }_            List<String> gotUsers = Arrays.asList(roleUsers[1].split(","))__            for (String user : users) {_                if (gotUsers.contains(user) == false) {_                    fail("Expected users [" + Arrays.toString(users) + "] for role " + role +_                         " but found [" + gotUsers.toString() + "]")__                }_            }_            return__        }_        if (users.length != 0) {_            fail("Could not find role " + role + " in users_roles file:\n" + lines.toString())__        }_    };checks,the,role,has,the,given,users,or,that,the,role,does,not,exist,if,not,users,are,passed;void,assert,role,string,role,string,users,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,if,role,equals,role,users,0,false,continue,if,users,length,0,fail,found,role,role,in,file,with,users,role,users,1,list,string,got,users,arrays,as,list,role,users,1,split,for,string,user,users,if,got,users,contains,user,false,fail,expected,users,arrays,to,string,users,for,role,role,but,found,got,users,to,string,return,if,users,length,0,fail,could,not,find,role,role,in,file,n,lines,to,string
UsersToolTests -> void assertRole(String role, String... users) throws IOException;1528762805;checks the role has the given users, or that the role does not exist if not users are passed.;void assertRole(String role, String... users) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            if (role.equals(roleUsers[0]) == false) {_                continue__            }_            if (users.length == 0) {_                fail("Found role " + role + " in users_roles file with users [" + roleUsers[1] + "]")__            }_            List<String> gotUsers = Arrays.asList(roleUsers[1].split(","))__            for (String user : users) {_                if (gotUsers.contains(user) == false) {_                    fail("Expected users [" + Arrays.toString(users) + "] for role " + role +_                         " but found [" + gotUsers.toString() + "]")__                }_            }_            return__        }_        if (users.length != 0) {_            fail("Could not find role " + role + " in users_roles file:\n" + lines.toString())__        }_    };checks,the,role,has,the,given,users,or,that,the,role,does,not,exist,if,not,users,are,passed;void,assert,role,string,role,string,users,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,if,role,equals,role,users,0,false,continue,if,users,length,0,fail,found,role,role,in,file,with,users,role,users,1,list,string,got,users,arrays,as,list,role,users,1,split,for,string,user,users,if,got,users,contains,user,false,fail,expected,users,arrays,to,string,users,for,role,role,but,found,got,users,to,string,return,if,users,length,0,fail,could,not,find,role,role,in,file,n,lines,to,string
UsersToolTests -> void assertRole(String role, String... users) throws IOException;1531179852;checks the role has the given users, or that the role does not exist if not users are passed.;void assertRole(String role, String... users) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            if (role.equals(roleUsers[0]) == false) {_                continue__            }_            if (users.length == 0) {_                fail("Found role " + role + " in users_roles file with users [" + roleUsers[1] + "]")__            }_            List<String> gotUsers = Arrays.asList(roleUsers[1].split(","))__            for (String user : users) {_                if (gotUsers.contains(user) == false) {_                    fail("Expected users [" + Arrays.toString(users) + "] for role " + role +_                         " but found [" + gotUsers.toString() + "]")__                }_            }_            return__        }_        if (users.length != 0) {_            fail("Could not find role " + role + " in users_roles file:\n" + lines.toString())__        }_    };checks,the,role,has,the,given,users,or,that,the,role,does,not,exist,if,not,users,are,passed;void,assert,role,string,role,string,users,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,if,role,equals,role,users,0,false,continue,if,users,length,0,fail,found,role,role,in,file,with,users,role,users,1,list,string,got,users,arrays,as,list,role,users,1,split,for,string,user,users,if,got,users,contains,user,false,fail,expected,users,arrays,to,string,users,for,role,role,but,found,got,users,to,string,return,if,users,length,0,fail,could,not,find,role,role,in,file,n,lines,to,string
UsersToolTests -> void assertRole(String role, String... users) throws IOException;1541476610;checks the role has the given users, or that the role does not exist if not users are passed.;void assertRole(String role, String... users) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            if (role.equals(roleUsers[0]) == false) {_                continue__            }_            if (users.length == 0) {_                fail("Found role " + role + " in users_roles file with users [" + roleUsers[1] + "]")__            }_            List<String> gotUsers = Arrays.asList(roleUsers[1].split(","))__            for (String user : users) {_                if (gotUsers.contains(user) == false) {_                    fail("Expected users [" + Arrays.toString(users) + "] for role " + role +_                         " but found [" + gotUsers.toString() + "]")__                }_            }_            return__        }_        if (users.length != 0) {_            fail("Could not find role " + role + " in users_roles file:\n" + lines.toString())__        }_    };checks,the,role,has,the,given,users,or,that,the,role,does,not,exist,if,not,users,are,passed;void,assert,role,string,role,string,users,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,if,role,equals,role,users,0,false,continue,if,users,length,0,fail,found,role,role,in,file,with,users,role,users,1,list,string,got,users,arrays,as,list,role,users,1,split,for,string,user,users,if,got,users,contains,user,false,fail,expected,users,arrays,to,string,users,for,role,role,but,found,got,users,to,string,return,if,users,length,0,fail,could,not,find,role,role,in,file,n,lines,to,string
UsersToolTests -> void assertNoUser(String username) throws IOException;1524684173;Checks the user does not exist in the users or users_roles files;void assertNoUser(String username) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            assertNotEquals(username, usernameHash[0])__        }_        lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            String[] users = roleUsers[1].split(",")__            for (String user : users) {_                assertNotEquals(user, username)__            }_        }__    };checks,the,user,does,not,exist,in,the,users,or,files;void,assert,no,user,string,username,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,assert,not,equals,username,username,hash,0,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,string,users,role,users,1,split,for,string,user,users,assert,not,equals,user,username
UsersToolTests -> void assertNoUser(String username) throws IOException;1525248068;Checks the user does not exist in the users or users_roles files;void assertNoUser(String username) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            assertNotEquals(username, usernameHash[0])__        }_        lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            String[] users = roleUsers[1].split(",")__            for (String user : users) {_                assertNotEquals(user, username)__            }_        }__    };checks,the,user,does,not,exist,in,the,users,or,files;void,assert,no,user,string,username,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,assert,not,equals,username,username,hash,0,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,string,users,role,users,1,split,for,string,user,users,assert,not,equals,user,username
UsersToolTests -> void assertNoUser(String username) throws IOException;1528762805;Checks the user does not exist in the users or users_roles files;void assertNoUser(String username) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            assertNotEquals(username, usernameHash[0])__        }_        lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            String[] users = roleUsers[1].split(",")__            for (String user : users) {_                assertNotEquals(user, username)__            }_        }__    };checks,the,user,does,not,exist,in,the,users,or,files;void,assert,no,user,string,username,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,assert,not,equals,username,username,hash,0,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,string,users,role,users,1,split,for,string,user,users,assert,not,equals,user,username
UsersToolTests -> void assertNoUser(String username) throws IOException;1531179852;Checks the user does not exist in the users or users_roles files;void assertNoUser(String username) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            assertNotEquals(username, usernameHash[0])__        }_        lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            String[] users = roleUsers[1].split(",")__            for (String user : users) {_                assertNotEquals(user, username)__            }_        }__    };checks,the,user,does,not,exist,in,the,users,or,files;void,assert,no,user,string,username,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,assert,not,equals,username,username,hash,0,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,string,users,role,users,1,split,for,string,user,users,assert,not,equals,user,username
UsersToolTests -> void assertNoUser(String username) throws IOException;1541476610;Checks the user does not exist in the users or users_roles files;void assertNoUser(String username) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            assertNotEquals(username, usernameHash[0])__        }_        lines = Files.readAllLines(confDir.resolve("users_roles"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] roleUsers = line.split(":", 2)__            if (roleUsers.length != 2) {_                fail("Corrupted users_roles file, line: " + line)__            }_            String[] users = roleUsers[1].split(",")__            for (String user : users) {_                assertNotEquals(user, username)__            }_        }__    };checks,the,user,does,not,exist,in,the,users,or,files;void,assert,no,user,string,username,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,assert,not,equals,username,username,hash,0,lines,files,read,all,lines,conf,dir,resolve,standard,charsets,for,string,line,lines,string,role,users,line,split,2,if,role,users,length,2,fail,corrupted,file,line,line,string,users,role,users,1,split,for,string,user,users,assert,not,equals,user,username
UsersToolTests -> void assertUser(String username, String password) throws IOException;1524684173;checks the user exists with the given password;void assertUser(String username, String password) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            if (username.equals(usernameHash[0]) == false) {_                continue__            }_            String gotHash = usernameHash[1]__            SecureString expectedHash = new SecureString(password)__            assertTrue("Expected hash " + expectedHash + " for password " + password + " but got " + gotHash,_                       Hasher.BCRYPT.verify(expectedHash, gotHash.toCharArray()))__            return__        }_        fail("Could not find username " + username + " in users file:\n" + lines.toString())__    };checks,the,user,exists,with,the,given,password;void,assert,user,string,username,string,password,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,if,username,equals,username,hash,0,false,continue,string,got,hash,username,hash,1,secure,string,expected,hash,new,secure,string,password,assert,true,expected,hash,expected,hash,for,password,password,but,got,got,hash,hasher,bcrypt,verify,expected,hash,got,hash,to,char,array,return,fail,could,not,find,username,username,in,users,file,n,lines,to,string
UsersToolTests -> void assertUser(String username, String password) throws IOException;1525248068;checks the user exists with the given password;void assertUser(String username, String password) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            if (username.equals(usernameHash[0]) == false) {_                continue__            }_            String gotHash = usernameHash[1]__            SecureString expectedHash = new SecureString(password)__            assertTrue("Expected hash " + expectedHash + " for password " + password + " but got " + gotHash,_                       Hasher.BCRYPT.verify(expectedHash, gotHash.toCharArray()))__            return__        }_        fail("Could not find username " + username + " in users file:\n" + lines.toString())__    };checks,the,user,exists,with,the,given,password;void,assert,user,string,username,string,password,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,if,username,equals,username,hash,0,false,continue,string,got,hash,username,hash,1,secure,string,expected,hash,new,secure,string,password,assert,true,expected,hash,expected,hash,for,password,password,but,got,got,hash,hasher,bcrypt,verify,expected,hash,got,hash,to,char,array,return,fail,could,not,find,username,username,in,users,file,n,lines,to,string
UsersToolTests -> void assertUser(String username, String password) throws IOException;1528762805;checks the user exists with the given password;void assertUser(String username, String password) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            if (username.equals(usernameHash[0]) == false) {_                continue__            }_            String gotHash = usernameHash[1]__            SecureString expectedHash = new SecureString(password)__            assertTrue("Expected hash " + expectedHash + " for password " + password + " but got " + gotHash,_                       Hasher.BCRYPT.verify(expectedHash, gotHash.toCharArray()))__            return__        }_        fail("Could not find username " + username + " in users file:\n" + lines.toString())__    };checks,the,user,exists,with,the,given,password;void,assert,user,string,username,string,password,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,if,username,equals,username,hash,0,false,continue,string,got,hash,username,hash,1,secure,string,expected,hash,new,secure,string,password,assert,true,expected,hash,expected,hash,for,password,password,but,got,got,hash,hasher,bcrypt,verify,expected,hash,got,hash,to,char,array,return,fail,could,not,find,username,username,in,users,file,n,lines,to,string
UsersToolTests -> void assertUser(String username, String password) throws IOException;1531179852;checks the user exists with the given password;void assertUser(String username, String password) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            if (username.equals(usernameHash[0]) == false) {_                continue__            }_            String gotHash = usernameHash[1]__            SecureString expectedHash = new SecureString(password.toCharArray())__            _            Hasher bcryptHasher = Hasher.resolve("bcrypt")__            assertTrue("Could not validate password for user", bcryptHasher.verify(expectedHash, gotHash.toCharArray()))__            return__        }_        fail("Could not find username " + username + " in users file:\n" + lines.toString())__    };checks,the,user,exists,with,the,given,password;void,assert,user,string,username,string,password,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,if,username,equals,username,hash,0,false,continue,string,got,hash,username,hash,1,secure,string,expected,hash,new,secure,string,password,to,char,array,hasher,bcrypt,hasher,hasher,resolve,bcrypt,assert,true,could,not,validate,password,for,user,bcrypt,hasher,verify,expected,hash,got,hash,to,char,array,return,fail,could,not,find,username,username,in,users,file,n,lines,to,string
UsersToolTests -> void assertUser(String username, String password) throws IOException;1541476610;checks the user exists with the given password;void assertUser(String username, String password) throws IOException {_        List<String> lines = Files.readAllLines(confDir.resolve("users"), StandardCharsets.UTF_8)__        for (String line : lines) {_            String[] usernameHash = line.split(":", 2)__            if (usernameHash.length != 2) {_                fail("Corrupted users file, line: " + line)__            }_            if (username.equals(usernameHash[0]) == false) {_                continue__            }_            String gotHash = usernameHash[1]__            SecureString expectedHash = new SecureString(password.toCharArray())__            _            Hasher bcryptHasher = Hasher.resolve("bcrypt")__            assertTrue("Could not validate password for user", bcryptHasher.verify(expectedHash, gotHash.toCharArray()))__            return__        }_        fail("Could not find username " + username + " in users file:\n" + lines.toString())__    };checks,the,user,exists,with,the,given,password;void,assert,user,string,username,string,password,throws,ioexception,list,string,lines,files,read,all,lines,conf,dir,resolve,users,standard,charsets,for,string,line,lines,string,username,hash,line,split,2,if,username,hash,length,2,fail,corrupted,users,file,line,line,if,username,equals,username,hash,0,false,continue,string,got,hash,username,hash,1,secure,string,expected,hash,new,secure,string,password,to,char,array,hasher,bcrypt,hasher,hasher,resolve,bcrypt,assert,true,could,not,validate,password,for,user,bcrypt,hasher,verify,expected,hash,got,hash,to,char,array,return,fail,could,not,find,username,username,in,users,file,n,lines,to,string
