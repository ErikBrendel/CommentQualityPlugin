commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@After public void cleanExporters() throws Exception {     Request request = new Request("PUT", "/_cluster/settings").     request.setJsonEntity(Strings.toString(jsonBuilder().startObject().startObject("transient").nullField("xpack.monitoring.exporters.*").endObject().endObject())).     adminClient().performRequest(request).     adminClient().performRequest(new Request("DELETE", "/.watch*")). }
false;public;0;15;;public void testThatLocalExporterAddsWatches() throws Exception {     String watchId = createMonitoringWatch().     Request request = new Request("PUT", "/_cluster/settings").     request.setJsonEntity(Strings.toString(jsonBuilder().startObject().startObject("transient").field("xpack.monitoring.exporters.my_local_exporter.type", "local").field("xpack.monitoring.exporters.my_local_exporter.cluster_alerts.management.enabled", true).endObject().endObject())).     adminClient().performRequest(request).     assertTotalWatchCount(ClusterAlertsUtil.WATCH_IDS.length).     assertMonitoringWatchHasBeenOverWritten(watchId). }
false;public;0;17;;public void testThatHttpExporterAddsWatches() throws Exception {     String watchId = createMonitoringWatch().     String httpHost = getHttpHost().     Request request = new Request("PUT", "/_cluster/settings").     request.setJsonEntity(Strings.toString(jsonBuilder().startObject().startObject("transient").field("xpack.monitoring.exporters.my_http_exporter.type", "http").field("xpack.monitoring.exporters.my_http_exporter.host", httpHost).field("xpack.monitoring.exporters.my_http_exporter.cluster_alerts.management.enabled", true).endObject().endObject())).     adminClient().performRequest(request).     assertTotalWatchCount(ClusterAlertsUtil.WATCH_IDS.length).     assertMonitoringWatchHasBeenOverWritten(watchId). }
false;private;1;5;;private void assertMonitoringWatchHasBeenOverWritten(String watchId) throws Exception {     ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_watcher/watch/" + watchId))).     String interval = path.evaluate("watch.trigger.schedule.interval").     assertThat(interval, is("1m")). }
false;private;1;8;;private void assertTotalWatchCount(int expectedWatches) throws Exception {     assertBusy(() -> {         assertOK(client().performRequest(new Request("POST", "/.watches/_refresh"))).         ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("POST", "/.watches/_count"))).         int count = path.evaluate("count").         assertThat(count, is(expectedWatches)).     }). }
false;private;0;12;;private String createMonitoringWatch() throws Exception {     String clusterUUID = getClusterUUID().     String watchId = clusterUUID + "_kibana_version_mismatch".     Request request = new Request("PUT", "/_watcher/watch/" + watchId).     request.setJsonEntity(WatchSourceBuilders.watchBuilder().trigger(TriggerBuilders.schedule(new IntervalSchedule(new IntervalSchedule.Interval(1000, MINUTES)))).input(simpleInput()).addAction("logme", ActionBuilders.loggingAction("foo")).buildAsBytes(XContentType.JSON).utf8ToString()).     client().performRequest(request).     return watchId. }
false;private;0;6;;private String getClusterUUID() throws Exception {     Response response = client().performRequest(new Request("GET", "/_cluster/state/metadata")).     ObjectPath objectPath = ObjectPath.createFromResponse(response).     String clusterUUID = objectPath.evaluate("metadata.cluster_uuid").     return clusterUUID. }
false;public;0;8;;public String getHttpHost() throws IOException {     ObjectPath path = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_cluster/state"))).     String masterNodeId = path.evaluate("master_node").     ObjectPath nodesPath = ObjectPath.createFromResponse(client().performRequest(new Request("GET", "/_nodes"))).     String httpHost = nodesPath.evaluate("nodes." + masterNodeId + ".http.publish_address").     return httpHost. }
