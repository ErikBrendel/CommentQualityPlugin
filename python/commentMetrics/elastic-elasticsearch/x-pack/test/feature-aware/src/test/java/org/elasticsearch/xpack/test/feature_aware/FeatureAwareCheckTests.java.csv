commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testClusterStateCustomViolation() throws IOException {     runCustomViolationTest(ClusterStateCustomViolation.class, getClass(), ClusterState.Custom.class, XPackPlugin.XPackClusterStateCustom.class). }
false;public;0;3;;public void testClusterStateCustom() throws IOException {     runCustomTest(XPackClusterStateCustom.class, getClass(), ClusterState.Custom.class, XPackPlugin.XPackClusterStateCustom.class). }
false;public;0;8;;public void testClusterStateCustomMarkerInterface() throws IOException {     // marker interfaces do not implement the marker interface but should not fail the feature aware check     runCustomTest(XPackPlugin.XPackClusterStateCustom.class, XPackPlugin.class, ClusterState.Custom.class, XPackPlugin.XPackClusterStateCustom.class). }
false;public;0;3;;public void testMetaDataCustomViolation() throws IOException {     runCustomViolationTest(MetaDataCustomViolation.class, getClass(), MetaData.Custom.class, XPackPlugin.XPackMetaDataCustom.class). }
false;public;0;3;;public void testMetaDataCustom() throws IOException {     runCustomTest(XPackMetaDataCustom.class, getClass(), MetaData.Custom.class, XPackPlugin.XPackMetaDataCustom.class). }
false;public;0;8;;public void testMetaDataCustomMarkerInterface() throws IOException {     // marker interfaces do not implement the marker interface but should not fail the feature aware check     runCustomTest(XPackPlugin.XPackMetaDataCustom.class, XPackPlugin.class, MetaData.Custom.class, XPackPlugin.XPackMetaDataCustom.class). }
false;public;0;7;;public void testPersistentTaskParamsViolation() throws IOException {     runCustomViolationTest(PersistentTaskParamsViolation.class, getClass(), PersistentTaskParams.class, XPackPlugin.XPackPersistentTaskParams.class). }
false;public;0;3;;public void testPersistentTaskParams() throws IOException {     runCustomTest(XPackPersistentTaskParams.class, getClass(), PersistentTaskParams.class, XPackPlugin.XPackPersistentTaskParams.class). }
false;public;0;8;;public void testPersistentTaskParamsMarkerInterface() throws IOException {     // marker interfaces do not implement the marker interface but should not fail the feature aware check     runCustomTest(XPackPlugin.XPackPersistentTaskParams.class, XPackPlugin.class, PersistentTaskParams.class, XPackPlugin.XPackPersistentTaskParams.class). }
false;public;1;4;;@Override public Diff<ClusterState.Custom> diff(ClusterState.Custom previousState) {     return null. }
false;public;0;4;;@Override public String getWriteableName() {     return writeableName. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public;1;4;;@Override public void writeTo(final StreamOutput out) throws IOException { }
false;public;2;4;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     return builder. }
false;public;0;4;;@Override public EnumSet<MetaData.XContentContext> context() {     return MetaData.ALL_CONTEXTS. }
false;public;1;4;;@Override public Diff<MetaData.Custom> diff(MetaData.Custom previousState) {     return null. }
false;public;0;4;;@Override public String getWriteableName() {     return writeableName. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public;1;4;;@Override public void writeTo(final StreamOutput out) throws IOException { }
false;public;2;4;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     return builder. }
false;public;0;4;;@Override public String getWriteableName() {     return writeableName. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public;1;4;;@Override public void writeTo(final StreamOutput out) throws IOException { }
false;public;2;4;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     return builder. }
false;public;1;7;;@Override public void accept(final org.elasticsearch.xpack.test.feature_aware.FeatureAwareCheck.FeatureAwareViolation featureAwareViolation) {     called.set(true).     assertThat(featureAwareViolation.name, equalTo(name)).     assertThat(featureAwareViolation.interfaceName, equalTo(interfaceName)).     assertThat(featureAwareViolation.expectedInterfaceName, equalTo(expectedInterfaceName)). }
true;private;4;7;/**  * Runs a test on an actual class implementing a custom interface and not the expected marker interface.  *  * @param clazz                  the custom implementation  * @param outerClazz             the outer class to load the custom implementation relative to  * @param interfaceClazz         the custom  * @param expectedInterfaceClazz the marker interface  * @throws IOException if an I/O error occurs reading the class  */ ;/**  * Runs a test on an actual class implementing a custom interface and not the expected marker interface.  *  * @param clazz                  the custom implementation  * @param outerClazz             the outer class to load the custom implementation relative to  * @param interfaceClazz         the custom  * @param expectedInterfaceClazz the marker interface  * @throws IOException if an I/O error occurs reading the class  */ private void runCustomViolationTest(final Class<? extends ClusterState.FeatureAware> clazz, final Class<?> outerClazz, final Class<? extends ClusterState.FeatureAware> interfaceClazz, final Class<? extends ClusterState.FeatureAware> expectedInterfaceClazz) throws IOException {     runTest(clazz, outerClazz, interfaceClazz, expectedInterfaceClazz, true). }
true;private;4;7;/**  * Runs a test on an actual class implementing a custom interface and the expected marker interface.  *  * @param clazz                  the custom implementation  * @param outerClazz             the outer class to load the custom implementation relative to  * @param interfaceClazz         the custom  * @param expectedInterfaceClazz the marker interface  * @throws IOException if an I/O error occurs reading the class  */ ;/**  * Runs a test on an actual class implementing a custom interface and the expected marker interface.  *  * @param clazz                  the custom implementation  * @param outerClazz             the outer class to load the custom implementation relative to  * @param interfaceClazz         the custom  * @param expectedInterfaceClazz the marker interface  * @throws IOException if an I/O error occurs reading the class  */ private void runCustomTest(final Class<? extends ClusterState.FeatureAware> clazz, final Class<?> outerClazz, final Class<? extends ClusterState.FeatureAware> interfaceClazz, final Class<? extends ClusterState.FeatureAware> expectedInterfaceClazz) throws IOException {     runTest(clazz, outerClazz, interfaceClazz, expectedInterfaceClazz, false). }
true;private;5;15;/**  * Runs a test on an actual class implementing a custom interface and should implement the expected marker interface if and only if  * the specified violation parameter is false.  *  * @param clazz                  the custom implementation  * @param outerClazz             the outer class to load the custom implementation relative to  * @param interfaceClazz         the custom  * @param expectedInterfaceClazz the marker interface  * @param violation              whether or not the actual class is expected to fail the feature aware check  * @throws IOException if an I/O error occurs reading the class  */ ;/**  * Runs a test on an actual class implementing a custom interface and should implement the expected marker interface if and only if  * the specified violation parameter is false.  *  * @param clazz                  the custom implementation  * @param outerClazz             the outer class to load the custom implementation relative to  * @param interfaceClazz         the custom  * @param expectedInterfaceClazz the marker interface  * @param violation              whether or not the actual class is expected to fail the feature aware check  * @throws IOException if an I/O error occurs reading the class  */ private void runTest(final Class<? extends ClusterState.FeatureAware> clazz, final Class<?> outerClazz, final Class<? extends ClusterState.FeatureAware> interfaceClazz, final Class<? extends ClusterState.FeatureAware> expectedInterfaceClazz, final boolean violation) throws IOException {     final String name = clazz.getName().     final FeatureAwareViolationConsumer callback = new FeatureAwareViolationConsumer(FeatureAwareCheck.formatClassName(clazz), FeatureAwareCheck.formatClassName(interfaceClazz), FeatureAwareCheck.formatClassName(expectedInterfaceClazz)).     FeatureAwareCheck.checkClass(outerClazz.getResourceAsStream(name.substring(1 + name.lastIndexOf(".")) + ".class"), callback).     assertThat(callback.called.get(), equalTo(violation)). }
