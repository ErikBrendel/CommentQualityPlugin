commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
false;public;1;4;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     return IndexLifecycleRunner.removePolicyForIndexes(indices, currentState, failedIndexes). }
false;public;2;4;;@Override public void onFailure(String source, Exception e) {     listener.onFailure(e). }
false;protected;1;4;;@Override protected Response newResponse(boolean acknowledged) {     return new Response(failedIndexes). }
false;protected;3;24;;@Override protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) throws Exception {     final Index[] indices = indexNameExpressionResolver.concreteIndices(state, request.indicesOptions(), request.indices()).     clusterService.submitStateUpdateTask("remove-lifecycle-for-index", new AckedClusterStateUpdateTask<Response>(request, listener) {          private final List<String> failedIndexes = new ArrayList<>().          @Override         public ClusterState execute(ClusterState currentState) throws Exception {             return IndexLifecycleRunner.removePolicyForIndexes(indices, currentState, failedIndexes).         }          @Override         public void onFailure(String source, Exception e) {             listener.onFailure(e).         }          @Override         protected Response newResponse(boolean acknowledged) {             return new Response(failedIndexes).         }     }). }
