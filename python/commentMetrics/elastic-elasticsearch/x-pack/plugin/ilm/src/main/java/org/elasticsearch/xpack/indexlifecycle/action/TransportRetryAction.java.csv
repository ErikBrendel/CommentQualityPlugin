commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;public;1;4;;@Override public ClusterState execute(ClusterState currentState) {     return indexLifecycleService.moveClusterStateToFailedStep(currentState, request.indices()). }
false;public;3;15;;@Override public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {     for (String index : request.indices()) {         IndexMetaData idxMeta = newState.metaData().index(index).         LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(idxMeta).         StepKey retryStep = new StepKey(lifecycleState.getPhase(), lifecycleState.getAction(), lifecycleState.getStep()).         if (idxMeta == null) {             // The index has somehow been deleted - there shouldn't be any opportunity for this to happen, but just in case.             logger.debug("index [" + index + "] has been deleted after moving to step [" + lifecycleState.getStep() + "], skipping async action check").             return.         }         indexLifecycleService.maybeRunAsyncAction(newState, idxMeta, retryStep).     } }
false;protected;1;4;;@Override protected Response newResponse(boolean acknowledged) {     return new Response(acknowledged). }
false;protected;3;31;;@Override protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) {     clusterService.submitStateUpdateTask("ilm-re-run", new AckedClusterStateUpdateTask<Response>(request, listener) {          @Override         public ClusterState execute(ClusterState currentState) {             return indexLifecycleService.moveClusterStateToFailedStep(currentState, request.indices()).         }          @Override         public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {             for (String index : request.indices()) {                 IndexMetaData idxMeta = newState.metaData().index(index).                 LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(idxMeta).                 StepKey retryStep = new StepKey(lifecycleState.getPhase(), lifecycleState.getAction(), lifecycleState.getStep()).                 if (idxMeta == null) {                     // The index has somehow been deleted - there shouldn't be any opportunity for this to happen, but just in case.                     logger.debug("index [" + index + "] has been deleted after moving to step [" + lifecycleState.getStep() + "], skipping async action check").                     return.                 }                 indexLifecycleService.maybeRunAsyncAction(newState, idxMeta, retryStep).             }         }          @Override         protected Response newResponse(boolean acknowledged) {             return new Response(acknowledged).         }     }). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
