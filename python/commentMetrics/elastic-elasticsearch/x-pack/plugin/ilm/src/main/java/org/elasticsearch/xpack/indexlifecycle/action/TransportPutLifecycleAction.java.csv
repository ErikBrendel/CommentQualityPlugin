commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;protected;1;4;;@Override protected Response newResponse(boolean acknowledged) {     return new Response(acknowledged). }
false;public;1;24;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     ClusterState.Builder newState = ClusterState.builder(currentState).     IndexLifecycleMetadata currentMetadata = currentState.metaData().custom(IndexLifecycleMetadata.TYPE).     if (currentMetadata == null) {         // first time using index-lifecycle feature, bootstrap metadata         currentMetadata = IndexLifecycleMetadata.EMPTY.     }     LifecyclePolicyMetadata existingPolicyMetadata = currentMetadata.getPolicyMetadatas().get(request.getPolicy().getName()).     long nextVersion = (existingPolicyMetadata == null) ? 1L : existingPolicyMetadata.getVersion() + 1L.     SortedMap<String, LifecyclePolicyMetadata> newPolicies = new TreeMap<>(currentMetadata.getPolicyMetadatas()).     LifecyclePolicyMetadata lifecyclePolicyMetadata = new LifecyclePolicyMetadata(request.getPolicy(), filteredHeaders, nextVersion, Instant.now().toEpochMilli()).     LifecyclePolicyMetadata oldPolicy = newPolicies.put(lifecyclePolicyMetadata.getName(), lifecyclePolicyMetadata).     if (oldPolicy == null) {         logger.info("adding index lifecycle policy [{}]", request.getPolicy().getName()).     } else {         logger.info("updating index lifecycle policy [{}]", request.getPolicy().getName()).     }     IndexLifecycleMetadata newMetadata = new IndexLifecycleMetadata(newPolicies, currentMetadata.getOperationMode()).     newState.metaData(MetaData.builder(currentState.getMetaData()).putCustom(IndexLifecycleMetadata.TYPE, newMetadata).build()).     return newState.build(). }
false;protected;3;43;;@Override protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) {     // headers from the thread context stored by the AuthenticationService to be shared between the     // REST layer and the Transport layer here must be accessed within this thread and not in the     // cluster state thread in the ClusterStateUpdateTask below since that thread does not share the     // same context, and therefore does not have access to the appropriate security headers.     Map<String, String> filteredHeaders = threadPool.getThreadContext().getHeaders().entrySet().stream().filter(e -> ClientHelper.SECURITY_HEADER_FILTERS.contains(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)).     LifecyclePolicy.validatePolicyName(request.getPolicy().getName()).     clusterService.submitStateUpdateTask("put-lifecycle-" + request.getPolicy().getName(), new AckedClusterStateUpdateTask<Response>(request, listener) {          @Override         protected Response newResponse(boolean acknowledged) {             return new Response(acknowledged).         }          @Override         public ClusterState execute(ClusterState currentState) throws Exception {             ClusterState.Builder newState = ClusterState.builder(currentState).             IndexLifecycleMetadata currentMetadata = currentState.metaData().custom(IndexLifecycleMetadata.TYPE).             if (currentMetadata == null) {                 // first time using index-lifecycle feature, bootstrap metadata                 currentMetadata = IndexLifecycleMetadata.EMPTY.             }             LifecyclePolicyMetadata existingPolicyMetadata = currentMetadata.getPolicyMetadatas().get(request.getPolicy().getName()).             long nextVersion = (existingPolicyMetadata == null) ? 1L : existingPolicyMetadata.getVersion() + 1L.             SortedMap<String, LifecyclePolicyMetadata> newPolicies = new TreeMap<>(currentMetadata.getPolicyMetadatas()).             LifecyclePolicyMetadata lifecyclePolicyMetadata = new LifecyclePolicyMetadata(request.getPolicy(), filteredHeaders, nextVersion, Instant.now().toEpochMilli()).             LifecyclePolicyMetadata oldPolicy = newPolicies.put(lifecyclePolicyMetadata.getName(), lifecyclePolicyMetadata).             if (oldPolicy == null) {                 logger.info("adding index lifecycle policy [{}]", request.getPolicy().getName()).             } else {                 logger.info("updating index lifecycle policy [{}]", request.getPolicy().getName()).             }             IndexLifecycleMetadata newMetadata = new IndexLifecycleMetadata(newPolicies, currentMetadata.getOperationMode()).             newState.metaData(MetaData.builder(currentState.getMetaData()).putCustom(IndexLifecycleMetadata.TYPE, newMetadata).build()).             return newState.build().         }     }). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
