commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.SAME. }
false;protected;0;4;;@Override protected Response newResponse() {     return new Response(). }
false;protected;1;4;;@Override protected Response newResponse(boolean acknowledged) {     return new Response(acknowledged). }
false;public;1;26;;@Override public ClusterState execute(ClusterState currentState) {     Spliterator<ObjectCursor<IndexMetaData>> indicesIt = currentState.metaData().indices().values().spliterator().     String policyToDelete = request.getPolicyName().     List<String> indicesUsingPolicy = StreamSupport.stream(indicesIt, false).map(idxMeta -> idxMeta.value).filter((idxMeta) -> LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings()).equals(policyToDelete)).map((idxMeta) -> idxMeta.getIndex().getName()).collect(Collectors.toList()).     if (indicesUsingPolicy.isEmpty() == false) {         throw new IllegalArgumentException("Cannot delete policy [" + request.getPolicyName() + "]. It is in use by one or more indices: " + indicesUsingPolicy).     }     ClusterState.Builder newState = ClusterState.builder(currentState).     IndexLifecycleMetadata currentMetadata = currentState.metaData().custom(IndexLifecycleMetadata.TYPE).     if (currentMetadata == null || currentMetadata.getPolicyMetadatas().containsKey(request.getPolicyName()) == false) {         throw new ResourceNotFoundException("Lifecycle policy not found: {}", request.getPolicyName()).     }     SortedMap<String, LifecyclePolicyMetadata> newPolicies = new TreeMap<>(currentMetadata.getPolicyMetadatas()).     newPolicies.remove(request.getPolicyName()).     IndexLifecycleMetadata newMetadata = new IndexLifecycleMetadata(newPolicies, currentMetadata.getOperationMode()).     newState.metaData(MetaData.builder(currentState.getMetaData()).putCustom(IndexLifecycleMetadata.TYPE, newMetadata).build()).     return newState.build(). }
false;protected;3;37;;@Override protected void masterOperation(Request request, ClusterState state, ActionListener<Response> listener) throws Exception {     clusterService.submitStateUpdateTask("delete-lifecycle-" + request.getPolicyName(), new AckedClusterStateUpdateTask<Response>(request, listener) {          @Override         protected Response newResponse(boolean acknowledged) {             return new Response(acknowledged).         }          @Override         public ClusterState execute(ClusterState currentState) {             Spliterator<ObjectCursor<IndexMetaData>> indicesIt = currentState.metaData().indices().values().spliterator().             String policyToDelete = request.getPolicyName().             List<String> indicesUsingPolicy = StreamSupport.stream(indicesIt, false).map(idxMeta -> idxMeta.value).filter((idxMeta) -> LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings()).equals(policyToDelete)).map((idxMeta) -> idxMeta.getIndex().getName()).collect(Collectors.toList()).             if (indicesUsingPolicy.isEmpty() == false) {                 throw new IllegalArgumentException("Cannot delete policy [" + request.getPolicyName() + "]. It is in use by one or more indices: " + indicesUsingPolicy).             }             ClusterState.Builder newState = ClusterState.builder(currentState).             IndexLifecycleMetadata currentMetadata = currentState.metaData().custom(IndexLifecycleMetadata.TYPE).             if (currentMetadata == null || currentMetadata.getPolicyMetadatas().containsKey(request.getPolicyName()) == false) {                 throw new ResourceNotFoundException("Lifecycle policy not found: {}", request.getPolicyName()).             }             SortedMap<String, LifecyclePolicyMetadata> newPolicies = new TreeMap<>(currentMetadata.getPolicyMetadatas()).             newPolicies.remove(request.getPolicyName()).             IndexLifecycleMetadata newMetadata = new IndexLifecycleMetadata(newPolicies, currentMetadata.getOperationMode()).             newState.metaData(MetaData.builder(currentState.getMetaData()).putCustom(IndexLifecycleMetadata.TYPE, newMetadata).build()).             return newState.build().         }     }). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(Request request, ClusterState state) {     return state.blocks().globalBlockedException(ClusterBlockLevel.METADATA_WRITE). }
