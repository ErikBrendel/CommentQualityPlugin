commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ExplainLifecycleResponse newResponse() {     return new ExplainLifecycleResponse(). }
false;protected;0;5;;@Override protected String executor() {     // very lightweight operation, no need to fork     return ThreadPool.Names.SAME. }
false;protected;2;5;;@Override protected ClusterBlockException checkBlock(ExplainLifecycleRequest request, ClusterState state) {     return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA_READ, indexNameExpressionResolver.concreteIndexNames(state, request)). }
false;protected;4;48;;@Override protected void doMasterOperation(ExplainLifecycleRequest request, String[] concreteIndices, ClusterState state, ActionListener<ExplainLifecycleResponse> listener) {     Map<String, IndexLifecycleExplainResponse> indexReponses = new HashMap<>().     for (String index : concreteIndices) {         IndexMetaData idxMetadata = state.metaData().index(index).         Settings idxSettings = idxMetadata.getSettings().         LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(idxMetadata).         String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxSettings).         String currentPhase = lifecycleState.getPhase().         String stepInfo = lifecycleState.getStepInfo().         BytesArray stepInfoBytes = null.         if (stepInfo != null) {             stepInfoBytes = new BytesArray(stepInfo).         }         // parse existing phase steps from the phase definition in the index settings         String phaseDef = lifecycleState.getPhaseDefinition().         PhaseExecutionInfo phaseExecutionInfo = null.         if (Strings.isNullOrEmpty(phaseDef) == false) {             try (XContentParser parser = JsonXContent.jsonXContent.createParser(xContentRegistry, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, phaseDef)) {                 phaseExecutionInfo = PhaseExecutionInfo.parse(parser, currentPhase).             } catch (IOException e) {                 listener.onFailure(new ElasticsearchParseException("failed to parse phase definition for index [" + index + "]", e)).                 return.             }         }         final IndexLifecycleExplainResponse indexResponse.         if (Strings.hasLength(policyName)) {             indexResponse = IndexLifecycleExplainResponse.newManagedIndexResponse(index, policyName, lifecycleState.getLifecycleDate(), lifecycleState.getPhase(), lifecycleState.getAction(), lifecycleState.getStep(), lifecycleState.getFailedStep(), lifecycleState.getPhaseTime(), lifecycleState.getActionTime(), lifecycleState.getStepTime(), stepInfoBytes, phaseExecutionInfo).         } else {             indexResponse = IndexLifecycleExplainResponse.newUnmanagedIndexResponse(index).         }         indexReponses.put(indexResponse.getIndex(), indexResponse).     }     listener.onResponse(new ExplainLifecycleResponse(indexReponses)). }
