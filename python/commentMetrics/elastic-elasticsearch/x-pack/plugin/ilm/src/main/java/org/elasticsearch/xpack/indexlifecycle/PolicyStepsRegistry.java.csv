# id;timestamp;commentText;codeText;commentWords;codeWords
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1534567515;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1534899572;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1536172520;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1536187065;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1536359545;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1536464455;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> @Nullable     public Step getStep(final Index index, final Step.StepKey stepKey);1537228800;returns the {@link Step} that matches the index name and_stepkey specified. This is used by {@link ClusterState}_readers that know the current policy and step by name_as String values in the cluster state._@param index the index to get the step for_@param stepKey the key to the requested {@link Step}_@return the step for the given stepkey or null if the step was not found;@Nullable_    public Step getStep(final Index index, final Step.StepKey stepKey) {_        if (ErrorStep.NAME.equals(stepKey.getName())) {_            return new ErrorStep(new Step.StepKey(stepKey.getPhase(), stepKey.getAction(), ErrorStep.NAME))__        }__        if (indexPhaseSteps.get(index) == null) {_            return null__        }__        if (logger.isTraceEnabled()) {_            logger.trace("[{}]: retrieving step [{}], found: [{}]\nall steps for this phase: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null),_                indexPhaseSteps.get(index))__        } else if (logger.isDebugEnabled()) {_            logger.debug("[{}]: retrieving step [{}], found: [{}]", index, stepKey,_                indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null))__        }_        assert indexPhaseSteps.get(index).stream().allMatch(step -> step.getKey().getPhase().equals(stepKey.getPhase())) :_            "expected all steps for [" + index + "] to be in phase [" + stepKey.getPhase() +_                "] but they were not, steps: " + indexPhaseSteps.get(index)__        return indexPhaseSteps.get(index).stream().filter(step -> step.getKey().equals(stepKey)).findFirst().orElse(null)__    };returns,the,link,step,that,matches,the,index,name,and,stepkey,specified,this,is,used,by,link,cluster,state,readers,that,know,the,current,policy,and,step,by,name,as,string,values,in,the,cluster,state,param,index,the,index,to,get,the,step,for,param,step,key,the,key,to,the,requested,link,step,return,the,step,for,the,given,stepkey,or,null,if,the,step,was,not,found;nullable,public,step,get,step,final,index,index,final,step,step,key,step,key,if,error,step,name,equals,step,key,get,name,return,new,error,step,new,step,step,key,step,key,get,phase,step,key,get,action,error,step,name,if,index,phase,steps,get,index,null,return,null,if,logger,is,trace,enabled,logger,trace,retrieving,step,found,nall,steps,for,this,phase,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,index,phase,steps,get,index,else,if,logger,is,debug,enabled,logger,debug,retrieving,step,found,index,step,key,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null,assert,index,phase,steps,get,index,stream,all,match,step,step,get,key,get,phase,equals,step,key,get,phase,expected,all,steps,for,index,to,be,in,phase,step,key,get,phase,but,they,were,not,steps,index,phase,steps,get,index,return,index,phase,steps,get,index,stream,filter,step,step,get,key,equals,step,key,find,first,or,else,null
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1534567515;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1534899572;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1536172520;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1536187065;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1536359545;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1536464455;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public void removeIndices(List<Index> indices);1537228800;Remove phase step lists for indices that have been deleted_@param indices a list of indices that have been deleted;public void removeIndices(List<Index> indices) {_        indices.forEach(index -> {_            logger.trace("removing cached phase steps for deleted index [{}]", index.getName())__            indexPhaseSteps.remove(index)__        })__    };remove,phase,step,lists,for,indices,that,have,been,deleted,param,indices,a,list,of,indices,that,have,been,deleted;public,void,remove,indices,list,index,indices,indices,for,each,index,logger,trace,removing,cached,phase,steps,for,deleted,index,index,get,name,index,phase,steps,remove,index
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1534567515;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1534899572;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1536172520;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1536187065;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1536359545;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1536464455;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1537228800;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1537312077;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1537390248;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1538532170;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
PolicyStepsRegistry -> public boolean stepExists(final String policy, final Step.StepKey stepKey);1538662915;Given a policy and stepkey, return true if a step exists, false otherwise;public boolean stepExists(final String policy, final Step.StepKey stepKey) {_        Map<Step.StepKey, Step> steps = stepMap.get(policy)__        if (steps == null) {_            return false__        } else {_            return steps.containsKey(stepKey)__        }_    };given,a,policy,and,stepkey,return,true,if,a,step,exists,false,otherwise;public,boolean,step,exists,final,string,policy,final,step,step,key,step,key,map,step,step,key,step,steps,step,map,get,policy,if,steps,null,return,false,else,return,steps,contains,key,step,key
