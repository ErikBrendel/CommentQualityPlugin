# id;timestamp;commentText;codeText;commentWords;codeWords
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1533229511;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1533843546;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1534567515;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1534859274;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1534899572;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1535053815;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1535405127;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1535700584;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1536172520;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1536187065;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1536359545;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1537312077;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(idxMeta.getSettings())__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,idx,meta,get,settings,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1537390248;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                lifecycleRunner.runPolicy(policyName, idxMeta, clusterState, fromClusterStateChange)__                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,lifecycle,runner,run,policy,policy,name,idx,meta,cluster,state,from,cluster,state,change,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1538532170;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1540833492;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1541009836;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1541092975;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1542051179;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1548261991;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
IndexLifecycleService -> void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange);1550784264;executes the policy execution on the appropriate indices by running cluster-state tasks per index.__If stopping ILM was requested, and it is safe to stop, this will also be done here_when possible after no policies are executed.__@param clusterState the current cluster state_@param fromClusterStateChange whether things are triggered from the cluster-state-listener or the scheduler;void triggerPolicies(ClusterState clusterState, boolean fromClusterStateChange) {_        IndexLifecycleMetadata currentMetadata = clusterState.metaData().custom(IndexLifecycleMetadata.TYPE)___        if (currentMetadata == null) {_            return__        }__        OperationMode currentMode = currentMetadata.getOperationMode()___        if (OperationMode.STOPPED.equals(currentMode)) {_            return__        }__        boolean safeToStop = true_ __        _        _        _        for (ObjectCursor<IndexMetaData> cursor : clusterState.metaData().indices().values()) {_            IndexMetaData idxMeta = cursor.value__            String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(idxMeta.getSettings())__            if (Strings.isNullOrEmpty(policyName) == false) {_                StepKey stepKey = IndexLifecycleRunner.getCurrentStepKey(LifecycleExecutionState.fromIndexMetadata(idxMeta))__                if (OperationMode.STOPPING == currentMode && stepKey != null_                        && IGNORE_ACTIONS_MAINTENANCE_REQUESTED.contains(stepKey.getAction()) == false) {_                    logger.info("skipping policy [" + policyName + "] for index [" + idxMeta.getIndex().getName()_                        + "]. stopping Index Lifecycle execution")__                    continue__                }_                if (fromClusterStateChange) {_                    lifecycleRunner.runPolicyAfterStateChange(policyName, idxMeta)__                } else {_                    lifecycleRunner.runPeriodicStep(policyName, idxMeta)__                }_                safeToStop = false_ _            }_        }_        if (safeToStop && OperationMode.STOPPING == currentMode) {_            submitOperationModeUpdate(OperationMode.STOPPED)__        }_    };executes,the,policy,execution,on,the,appropriate,indices,by,running,cluster,state,tasks,per,index,if,stopping,ilm,was,requested,and,it,is,safe,to,stop,this,will,also,be,done,here,when,possible,after,no,policies,are,executed,param,cluster,state,the,current,cluster,state,param,from,cluster,state,change,whether,things,are,triggered,from,the,cluster,state,listener,or,the,scheduler;void,trigger,policies,cluster,state,cluster,state,boolean,from,cluster,state,change,index,lifecycle,metadata,current,metadata,cluster,state,meta,data,custom,index,lifecycle,metadata,type,if,current,metadata,null,return,operation,mode,current,mode,current,metadata,get,operation,mode,if,operation,mode,stopped,equals,current,mode,return,boolean,safe,to,stop,true,for,object,cursor,index,meta,data,cursor,cluster,state,meta,data,indices,values,index,meta,data,idx,meta,cursor,value,string,policy,name,lifecycle,settings,get,idx,meta,get,settings,if,strings,is,null,or,empty,policy,name,false,step,key,step,key,index,lifecycle,runner,get,current,step,key,lifecycle,execution,state,from,index,metadata,idx,meta,if,operation,mode,stopping,current,mode,step,key,null,contains,step,key,get,action,false,logger,info,skipping,policy,policy,name,for,index,idx,meta,get,index,get,name,stopping,index,lifecycle,execution,continue,if,from,cluster,state,change,lifecycle,runner,run,policy,after,state,change,policy,name,idx,meta,else,lifecycle,runner,run,periodic,step,policy,name,idx,meta,safe,to,stop,false,if,safe,to,stop,operation,mode,stopping,current,mode,submit,operation,mode,update,operation,mode,stopped
