commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String name() {     return XPackField.INDEX_LIFECYCLE. }
false;public;0;4;;@Override public String description() {     return "Index lifecycle management for the Elastic Stack". }
false;public;0;4;;@Override public boolean available() {     return licenseState != null && licenseState.isIndexLifecycleAllowed(). }
false;public;0;4;;@Override public boolean enabled() {     return enabled. }
false;public;0;4;;@Override public Map<String, Object> nativeCodeInfo() {     return null. }
false;public;1;28;;@Override public void usage(ActionListener<XPackFeatureSet.Usage> listener) {     MetaData metaData = clusterService.state().metaData().     IndexLifecycleMetadata lifecycleMetadata = metaData.custom(IndexLifecycleMetadata.TYPE).     if (enabled() && lifecycleMetadata != null) {         Map<String, Integer> policyUsage = new HashMap<>().         metaData.indices().forEach(entry -> {             String policyName = LifecycleSettings.LIFECYCLE_NAME_SETTING.get(entry.value.getSettings()).             Integer indicesManaged = policyUsage.get(policyName).             if (indicesManaged == null) {                 indicesManaged = 1.             } else {                 indicesManaged = indicesManaged + 1.             }             policyUsage.put(policyName, indicesManaged).         }).         List<PolicyStats> policyStats = lifecycleMetadata.getPolicies().values().stream().map(policy -> {             Map<String, PhaseStats> phaseStats = policy.getPhases().values().stream().map(phase -> {                 String[] actionNames = phase.getActions().keySet().toArray(new String[phase.getActions().size()]).                 return new Tuple<String, PhaseStats>(phase.getName(), new PhaseStats(phase.getMinimumAge(), actionNames)).             }).collect(Collectors.toMap(Tuple::v1, Tuple::v2)).             return new PolicyStats(phaseStats, policyUsage.getOrDefault(policy.getName(), 0)).         }).collect(Collectors.toList()).         listener.onResponse(new IndexLifecycleFeatureSetUsage(available(), enabled(), policyStats)).     } else {         listener.onResponse(new IndexLifecycleFeatureSetUsage(available(), enabled())).     } }
