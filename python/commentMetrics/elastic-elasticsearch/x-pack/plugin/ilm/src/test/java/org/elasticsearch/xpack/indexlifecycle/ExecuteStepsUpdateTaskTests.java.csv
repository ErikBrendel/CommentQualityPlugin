commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Before public void prepareState() throws IOException {     client = Mockito.mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     firstStep = new MockClusterStateActionStep(firstStepKey, secondStepKey).     secondStep = new MockClusterStateWaitStep(secondStepKey, thirdStepKey).     secondStep.setWillComplete(true).     allClusterSecondStep = new MockClusterStateWaitStep(secondStepKey, TerminalPolicyStep.KEY).     allClusterSecondStep.setWillComplete(true).     thirdStep = new MockStep(thirdStepKey, null).     mixedPolicyName = randomAlphaOfLengthBetween(5, 10).     allClusterPolicyName = randomAlphaOfLengthBetween(1, 4).     invalidPolicyName = randomAlphaOfLength(11).     Phase mixedPhase = new Phase("first_phase", TimeValue.ZERO, Collections.singletonMap(MockAction.NAME, new MockAction(Arrays.asList(firstStep, secondStep, thirdStep)))).     Phase allClusterPhase = new Phase("first_phase", TimeValue.ZERO, Collections.singletonMap(MockAction.NAME, new MockAction(Arrays.asList(firstStep, allClusterSecondStep)))).     Phase invalidPhase = new Phase("invalid_phase", TimeValue.ZERO, Collections.singletonMap(MockAction.NAME, new MockAction(Arrays.asList(new MockClusterStateActionStep(firstStepKey, invalidStepKey))))).     LifecyclePolicy mixedPolicy = newTestLifecyclePolicy(mixedPolicyName, Collections.singletonMap(mixedPhase.getName(), mixedPhase)).     LifecyclePolicy allClusterPolicy = newTestLifecyclePolicy(allClusterPolicyName, Collections.singletonMap(allClusterPhase.getName(), allClusterPhase)).     LifecyclePolicy invalidPolicy = newTestLifecyclePolicy(invalidPolicyName, Collections.singletonMap(invalidPhase.getName(), invalidPhase)).     Map<String, LifecyclePolicyMetadata> policyMap = new HashMap<>().     policyMap.put(mixedPolicyName, new LifecyclePolicyMetadata(mixedPolicy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())).     policyMap.put(allClusterPolicyName, new LifecyclePolicyMetadata(allClusterPolicy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())).     policyMap.put(invalidPolicyName, new LifecyclePolicyMetadata(invalidPolicy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())).     policyStepsRegistry = new PolicyStepsRegistry(NamedXContentRegistry.EMPTY, client).     indexName = randomAlphaOfLength(5).     lifecycleMetadata = new IndexLifecycleMetadata(policyMap, OperationMode.RUNNING).     indexMetaData = setupIndexPolicy(mixedPolicyName). }
false;private;1;28;;private IndexMetaData setupIndexPolicy(String policyName) {     // Reset the index to use the "allClusterPolicyName"     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhase("new").     lifecycleState.setAction("init").     lifecycleState.setStep("init").     IndexMetaData indexMetadata = IndexMetaData.builder(indexName).settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME, policyName)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     index = indexMetadata.getIndex().     MetaData metaData = MetaData.builder().persistentSettings(settings(Version.CURRENT).build()).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata).put(IndexMetaData.builder(indexMetadata)).build().     String nodeId = randomAlphaOfLength(10).     DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT).put(Node.NODE_MASTER_SETTING.getKey(), true).build(), new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId).     clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     policyStepsRegistry.update(clusterState).     return indexMetadata. }
false;public;0;7;;public void testNeverExecuteNonClusterStateStep() throws IOException {     setStateToKey(thirdStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, thirdStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     assertThat(task.execute(clusterState), sameInstance(clusterState)). }
false;public;0;17;;public void testSuccessThenFailureUnsetNextKey() throws IOException {     secondStep.setWillComplete(false).     setStateToKey(firstStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, firstStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(currentStepKey, equalTo(secondStepKey)).     assertThat(firstStep.getExecuteCount(), equalTo(1L)).     assertThat(secondStep.getExecuteCount(), equalTo(1L)).     assertThat(task.getNextStepKey(), nullValue()).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepInfo(), nullValue()). }
false;public;0;15;;public void testExecuteUntilFirstNonClusterStateStep() throws IOException {     setStateToKey(secondStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, secondStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(currentStepKey, equalTo(thirdStepKey)).     assertThat(firstStep.getExecuteCount(), equalTo(0L)).     assertThat(secondStep.getExecuteCount(), equalTo(1L)).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepInfo(), nullValue()). }
false;public;0;21;;public void testExecuteInvalidStartStep() throws IOException {     // Unset the index's phase/action/step to simulate starting from scratch     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder(LifecycleExecutionState.fromIndexMetadata(clusterState.getMetaData().index(index))).     lifecycleState.setPhase(null).     lifecycleState.setAction(null).     lifecycleState.setStep(null).     clusterState = ClusterState.builder(clusterState).metaData(MetaData.builder(clusterState.getMetaData()).put(IndexMetaData.builder(clusterState.getMetaData().index(index)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()))).build().     policyStepsRegistry.update(clusterState).     Step invalidStep = new MockClusterStateActionStep(firstStepKey, secondStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(invalidPolicyName, index, invalidStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     assertSame(newState, clusterState). }
false;public;0;16;;public void testExecuteIncompleteWaitStepNoInfo() throws IOException {     secondStep.setWillComplete(false).     setStateToKey(secondStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, secondStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(currentStepKey, equalTo(secondStepKey)).     assertThat(firstStep.getExecuteCount(), equalTo(0L)).     assertThat(secondStep.getExecuteCount(), equalTo(1L)).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepInfo(), nullValue()). }
false;public;0;18;;public void testExecuteIncompleteWaitStepWithInfo() throws IOException {     secondStep.setWillComplete(false).     RandomStepInfo stepInfo = new RandomStepInfo(() -> randomAlphaOfLength(10)).     secondStep.expectedInfo(stepInfo).     setStateToKey(secondStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, secondStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(currentStepKey, equalTo(secondStepKey)).     assertThat(firstStep.getExecuteCount(), equalTo(0L)).     assertThat(secondStep.getExecuteCount(), equalTo(1L)).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepInfo(), equalTo(stepInfo.toString())). }
false;public;0;12;;public void testOnFailure() throws IOException {     setStateToKey(secondStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, secondStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     Exception expectedException = new RuntimeException().     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> task.onFailure(randomAlphaOfLength(10), expectedException)).     assertEquals("policy [" + mixedPolicyName + "] for index [" + index.getName() + "] failed on step [" + startStep.getKey() + "].", exception.getMessage()).     assertSame(expectedException, exception.getCause()). }
false;public;0;19;;public void testClusterActionStepThrowsException() throws IOException {     RuntimeException thrownException = new RuntimeException("error").     firstStep.setException(thrownException).     setStateToKey(firstStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, firstStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(currentStepKey, equalTo(new StepKey(firstStepKey.getPhase(), firstStepKey.getAction(), ErrorStep.NAME))).     assertThat(firstStep.getExecuteCount(), equalTo(1L)).     assertThat(secondStep.getExecuteCount(), equalTo(0L)).     assertNull(task.getNextStepKey()).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepInfo(), containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\"")). }
false;public;0;19;;public void testClusterWaitStepThrowsException() throws IOException {     RuntimeException thrownException = new RuntimeException("error").     secondStep.setException(thrownException).     setStateToKey(firstStepKey).     Step startStep = policyStepsRegistry.getStep(indexMetaData, firstStepKey).     long now = randomNonNegativeLong().     ExecuteStepsUpdateTask task = new ExecuteStepsUpdateTask(mixedPolicyName, index, startStep, policyStepsRegistry, null, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey currentStepKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(currentStepKey, equalTo(new StepKey(firstStepKey.getPhase(), firstStepKey.getAction(), ErrorStep.NAME))).     assertThat(firstStep.getExecuteCount(), equalTo(1L)).     assertThat(secondStep.getExecuteCount(), equalTo(1L)).     assertThat(task.getNextStepKey(), equalTo(thirdStepKey)).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepInfo(), containsString("{\"type\":\"runtime_exception\",\"reason\":\"error\",\"stack_trace\":\"")). }
false;private;1;12;;private void setStateToKey(StepKey stepKey) throws IOException {     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder(LifecycleExecutionState.fromIndexMetadata(clusterState.getMetaData().index(index))).     lifecycleState.setPhase(stepKey.getPhase()).     lifecycleState.setAction(stepKey.getAction()).     lifecycleState.setStep(stepKey.getName()).     clusterState = ClusterState.builder(clusterState).metaData(MetaData.builder(clusterState.getMetaData()).put(IndexMetaData.builder(clusterState.getMetaData().index(index)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()))).build().     policyStepsRegistry.update(clusterState). }
