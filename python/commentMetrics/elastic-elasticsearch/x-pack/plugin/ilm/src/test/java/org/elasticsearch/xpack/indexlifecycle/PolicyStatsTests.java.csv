commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected PolicyStats createTestInstance() {     return randomPolicyStats(). }
false;static;0;9;;static PolicyStats randomPolicyStats() {     Map<String, PhaseStats> phaseStats = new HashMap<>().     int size = randomIntBetween(0, 10).     for (int i = 0. i < size. i++) {         phaseStats.put(randomAlphaOfLength(10), PhaseStatsTests.randomPhaseStats()).     }     int numberIndicesManaged = randomIntBetween(0, 1000).     return new PolicyStats(phaseStats, numberIndicesManaged). }
false;protected;1;17;;@Override protected PolicyStats mutateInstance(PolicyStats instance) throws IOException {     Map<String, PhaseStats> phaseStats = instance.getPhaseStats().     int numberIndicesManaged = instance.getIndicesManaged().     switch(between(0, 1)) {         case 0:             phaseStats = new HashMap<>(phaseStats).             phaseStats.put(randomAlphaOfLength(11), PhaseStatsTests.randomPhaseStats()).             break.         case 1:             numberIndicesManaged += randomIntBetween(1, 10).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new PolicyStats(phaseStats, numberIndicesManaged). }
false;protected;0;4;;@Override protected Reader<PolicyStats> instanceReader() {     return PolicyStats::new. }
