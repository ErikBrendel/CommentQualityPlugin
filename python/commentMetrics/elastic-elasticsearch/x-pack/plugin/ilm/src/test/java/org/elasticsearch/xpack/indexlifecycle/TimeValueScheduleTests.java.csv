commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TimeValueSchedule createRandomInstance() {     return new TimeValueSchedule(createRandomTimeValue()). }
false;private;0;3;;private TimeValue createRandomTimeValue() {     return new TimeValue(randomLongBetween(1, 10000), randomFrom(TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS, TimeUnit.DAYS)). }
false;public;0;7;;@Before public void setUpStartAndInterval() {     // start with random epoch between 1/1/1970 and 31/12/2035 so that start is not     // so large such that (start + interval) > Long.MAX     start = randomLongBetween(0, 2082672000000L).     interval = createRandomTimeValue(). }
false;public;0;7;;public void testHashcodeAndEquals() {     for (int i = 0. i < 20. i++) {         EqualsHashCodeTestUtils.checkEqualsAndHashCode(createRandomInstance(), instance -> new TimeValueSchedule(instance.getInterval()), instance -> new TimeValueSchedule(randomValueOtherThan(instance.getInterval(), () -> createRandomTimeValue()))).     } }
false;public;0;6;;public void testNextScheduledTimeFirstTriggerNotReached() {     long triggerTime = start + interval.millis().     long now = start + randomLongBetween(0, interval.millis() - 1).     TimeValueSchedule schedule = new TimeValueSchedule(interval).     assertEquals(triggerTime, schedule.nextScheduledTimeAfter(start, now)). }
false;public;0;6;;public void testNextScheduledTimeAtFirstInterval() {     long triggerTime = start + 2 * interval.millis().     long now = start + interval.millis().     TimeValueSchedule schedule = new TimeValueSchedule(interval).     assertEquals(triggerTime, schedule.nextScheduledTimeAfter(start, now)). }
false;public;0;5;;public void testNextScheduledTimeAtStartTime() {     long triggerTime = start + interval.millis().     TimeValueSchedule schedule = new TimeValueSchedule(interval).     assertEquals(triggerTime, schedule.nextScheduledTimeAfter(start, start)). }
false;public;0;8;;public void testNextScheduledTimeAfterFirstTrigger() {     long numberIntervalsPassed = randomLongBetween(0, 10000).     long triggerTime = start + (numberIntervalsPassed + 1) * interval.millis().     long now = start + randomLongBetween(numberIntervalsPassed * interval.millis(), (numberIntervalsPassed + 1) * interval.millis() - 1).     TimeValueSchedule schedule = new TimeValueSchedule(interval).     assertEquals(triggerTime, schedule.nextScheduledTimeAfter(start, now)). }
false;public;0;4;;public void testInvalidInterval() {     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> new TimeValueSchedule(new TimeValue(0))).     assertEquals("interval must be greater than 0 milliseconds", exception.getMessage()). }
