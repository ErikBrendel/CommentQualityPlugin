commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected PhaseStats createTestInstance() {     return randomPhaseStats(). }
false;static;0;5;;static PhaseStats randomPhaseStats() {     TimeValue minimumAge = TimeValue.parseTimeValue(randomTimeValue(0, 1000000000, "s", "m", "h", "d"), "test_after").     String[] actionNames = generateRandomStringArray(10, 20, false).     return new PhaseStats(minimumAge, actionNames). }
false;protected;1;18;;@Override protected PhaseStats mutateInstance(PhaseStats instance) throws IOException {     TimeValue minimumAge = instance.getAfter().     String[] actionNames = instance.getActionNames().     switch(between(0, 1)) {         case 0:             minimumAge = randomValueOtherThan(minimumAge, () -> TimeValue.parseTimeValue(randomTimeValue(0, 1000000000, "s", "m", "h", "d"), "test_after")).             break.         case 1:             actionNames = Arrays.copyOf(actionNames, actionNames.length + 1).             actionNames[actionNames.length - 1] = randomAlphaOfLengthBetween(10, 20).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new PhaseStats(minimumAge, actionNames). }
false;protected;0;4;;@Override protected Reader<PhaseStats> instanceReader() {     return PhaseStats::new. }
