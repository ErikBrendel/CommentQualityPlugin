commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Before public void setupClusterState() {     policy = randomAlphaOfLength(10).     LifecyclePolicy lifecyclePolicy = LifecyclePolicyTests.randomTestLifecyclePolicy(policy).     IndexMetaData indexMetadata = IndexMetaData.builder(randomAlphaOfLength(5)).settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME, policy)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     index = indexMetadata.getIndex().     IndexLifecycleMetadata ilmMeta = new IndexLifecycleMetadata(Collections.singletonMap(policy, new LifecyclePolicyMetadata(lifecyclePolicy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())), OperationMode.RUNNING).     MetaData metaData = MetaData.builder().persistentSettings(settings(Version.CURRENT).build()).put(IndexMetaData.builder(indexMetadata)).putCustom(IndexLifecycleMetadata.TYPE, ilmMeta).build().     clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).build(). }
false;public;0;25;;public void testExecuteSuccessfullyMoved() throws IOException {     StepKey currentStepKey = new StepKey("current-phase", "current-action", "current-name").     long now = randomNonNegativeLong().     Exception cause = new ElasticsearchException("THIS IS AN EXPECTED CAUSE").     setStateToKey(currentStepKey).     MoveToErrorStepUpdateTask task = new MoveToErrorStepUpdateTask(index, policy, currentStepKey, cause, () -> now).     ClusterState newState = task.execute(clusterState).     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(newState.getMetaData().index(index)).     StepKey actualKey = IndexLifecycleRunner.getCurrentStepKey(lifecycleState).     assertThat(actualKey, equalTo(new StepKey(currentStepKey.getPhase(), currentStepKey.getAction(), ErrorStep.NAME))).     assertThat(lifecycleState.getFailedStep(), equalTo(currentStepKey.getName())).     assertThat(lifecycleState.getPhaseTime(), nullValue()).     assertThat(lifecycleState.getActionTime(), nullValue()).     assertThat(lifecycleState.getStepTime(), equalTo(now)).     XContentBuilder causeXContentBuilder = JsonXContent.contentBuilder().     causeXContentBuilder.startObject().     ElasticsearchException.generateThrowableXContent(causeXContentBuilder, ToXContent.EMPTY_PARAMS, cause).     causeXContentBuilder.endObject().     String expectedCauseValue = BytesReference.bytes(causeXContentBuilder).utf8ToString().     assertThat(lifecycleState.getStepInfo(), containsString("{\"type\":\"exception\",\"reason\":\"THIS IS AN EXPECTED CAUSE\",\"stack_trace\":\"")). }
false;public;0;10;;public void testExecuteNoopDifferentStep() throws IOException {     StepKey currentStepKey = new StepKey("current-phase", "current-action", "current-name").     StepKey notCurrentStepKey = new StepKey("not-current", "not-current", "not-current").     long now = randomNonNegativeLong().     Exception cause = new ElasticsearchException("THIS IS AN EXPECTED CAUSE").     setStateToKey(notCurrentStepKey).     MoveToErrorStepUpdateTask task = new MoveToErrorStepUpdateTask(index, policy, currentStepKey, cause, () -> now).     ClusterState newState = task.execute(clusterState).     assertThat(newState, sameInstance(clusterState)). }
false;public;0;10;;public void testExecuteNoopDifferentPolicy() throws IOException {     StepKey currentStepKey = new StepKey("current-phase", "current-action", "current-name").     long now = randomNonNegativeLong().     Exception cause = new ElasticsearchException("THIS IS AN EXPECTED CAUSE").     setStateToKey(currentStepKey).     setStatePolicy("not-" + policy).     MoveToErrorStepUpdateTask task = new MoveToErrorStepUpdateTask(index, policy, currentStepKey, cause, () -> now).     ClusterState newState = task.execute(clusterState).     assertThat(newState, sameInstance(clusterState)). }
false;public;0;15;;public void testOnFailure() {     StepKey currentStepKey = new StepKey("current-phase", "current-action", "current-name").     long now = randomNonNegativeLong().     Exception cause = new ElasticsearchException("THIS IS AN EXPECTED CAUSE").     setStateToKey(currentStepKey).     MoveToErrorStepUpdateTask task = new MoveToErrorStepUpdateTask(index, policy, currentStepKey, cause, () -> now).     Exception expectedException = new RuntimeException().     ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> task.onFailure(randomAlphaOfLength(10), expectedException)).     assertEquals("policy [" + policy + "] for index [" + index.getName() + "] failed trying to move from step [" + currentStepKey + "] to the ERROR step.", exception.getMessage()).     assertSame(expectedException, exception.getCause()). }
false;private;1;7;;private void setStatePolicy(String policy) {     clusterState = ClusterState.builder(clusterState).metaData(MetaData.builder(clusterState.metaData()).updateSettings(Settings.builder().put(LifecycleSettings.LIFECYCLE_NAME, policy).build(), index.getName())).build(). }
false;private;1;12;;private void setStateToKey(StepKey stepKey) {     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder(LifecycleExecutionState.fromIndexMetadata(clusterState.metaData().index(index))).     lifecycleState.setPhase(stepKey.getPhase()).     lifecycleState.setAction(stepKey.getAction()).     lifecycleState.setStep(stepKey.getName()).     clusterState = ClusterState.builder(clusterState).metaData(MetaData.builder(clusterState.getMetaData()).put(IndexMetaData.builder(clusterState.getMetaData().index(index)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()))).build(). }
