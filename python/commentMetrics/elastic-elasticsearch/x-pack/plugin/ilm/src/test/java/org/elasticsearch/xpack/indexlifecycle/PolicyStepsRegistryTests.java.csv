commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private IndexMetaData emptyMetaData(Index index) {     return IndexMetaData.builder(index.getName()).settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build(). }
false;public;0;8;;public void testGetFirstStep() {     String policyName = randomAlphaOfLengthBetween(2, 10).     Step expectedFirstStep = new MockStep(MOCK_STEP_KEY, null).     Map<String, Step> firstStepMap = Collections.singletonMap(policyName, expectedFirstStep).     PolicyStepsRegistry registry = new PolicyStepsRegistry(null, firstStepMap, null, NamedXContentRegistry.EMPTY, null).     Step actualFirstStep = registry.getFirstStep(policyName).     assertThat(actualFirstStep, sameInstance(expectedFirstStep)). }
false;public;0;8;;public void testGetFirstStepUnknownPolicy() {     String policyName = randomAlphaOfLengthBetween(2, 10).     Step expectedFirstStep = new MockStep(MOCK_STEP_KEY, null).     Map<String, Step> firstStepMap = Collections.singletonMap(policyName, expectedFirstStep).     PolicyStepsRegistry registry = new PolicyStepsRegistry(null, firstStepMap, null, NamedXContentRegistry.EMPTY, null).     Step actualFirstStep = registry.getFirstStep(policyName + "unknown").     assertNull(actualFirstStep). }
false;public;0;28;;public void testGetStep() {     Client client = mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     LifecyclePolicy policy = LifecyclePolicyTests.randomTimeseriesLifecyclePolicyWithAllPhases("policy").     LifecyclePolicyMetadata policyMetadata = new LifecyclePolicyMetadata(policy, Collections.emptyMap(), 1, randomNonNegativeLong()).     String phaseName = randomFrom(policy.getPhases().keySet()).     Phase phase = policy.getPhases().get(phaseName).     PhaseExecutionInfo pei = new PhaseExecutionInfo(policy.getName(), phase, 1, randomNonNegativeLong()).     String phaseJson = Strings.toString(pei).     LifecycleAction action = randomFrom(phase.getActions().values()).     Step step = randomFrom(action.toSteps(client, phaseName, MOCK_STEP_KEY)).     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhaseDefinition(phaseJson).     IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0).put("index.version.created", Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME, "policy").build()).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()).build().     SortedMap<String, LifecyclePolicyMetadata> metas = new TreeMap<>().     metas.put("policy", policyMetadata).     PolicyStepsRegistry registry = new PolicyStepsRegistry(metas, null, null, REGISTRY, client).     Step actualStep = registry.getStep(indexMetaData, step.getKey()).     assertThat(actualStep.getKey(), equalTo(step.getKey())). }
false;public;0;9;;public void testGetStepErrorStep() {     Step.StepKey errorStepKey = new Step.StepKey(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), ErrorStep.NAME).     Step expectedStep = new ErrorStep(errorStepKey).     Index index = new Index("test", "uuid").     Map<Index, List<Step>> indexSteps = Collections.singletonMap(index, Collections.singletonList(expectedStep)).     PolicyStepsRegistry registry = new PolicyStepsRegistry(null, null, null, NamedXContentRegistry.EMPTY, null).     Step actualStep = registry.getStep(emptyMetaData(index), errorStepKey).     assertThat(actualStep, equalTo(expectedStep)). }
false;public;0;8;;public void testGetStepUnknownPolicy() {     PolicyStepsRegistry registry = new PolicyStepsRegistry(null, null, null, NamedXContentRegistry.EMPTY, null).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> registry.getStep(emptyMetaData(new Index("test", "uuid")), MOCK_STEP_KEY)).     assertThat(e.getMessage(), containsString("failed to retrieve step {\"phase\":\"mock\",\"action\":\"mock\",\"name\":\"mock\"}" + " as index [test] has no policy")). }
false;public;0;19;;public void testGetStepForIndexWithNoPhaseGetsInitializationStep() {     Client client = mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     LifecyclePolicy policy = LifecyclePolicyTests.randomTimeseriesLifecyclePolicy("policy").     LifecyclePolicyMetadata policyMetadata = new LifecyclePolicyMetadata(policy, Collections.emptyMap(), 1, randomNonNegativeLong()).     IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0).put("index.version.created", Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME, "policy").build()).build().     SortedMap<String, LifecyclePolicyMetadata> metas = new TreeMap<>().     metas.put("policy", policyMetadata).     PolicyStepsRegistry registry = new PolicyStepsRegistry(metas, null, null, REGISTRY, client).     Step step = registry.getStep(indexMetaData, InitializePolicyContextStep.KEY).     assertNotNull(step). }
false;public;0;29;;public void testGetStepUnknownStepKey() {     Client client = mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     LifecyclePolicy policy = LifecyclePolicyTests.randomTimeseriesLifecyclePolicyWithAllPhases("policy").     LifecyclePolicyMetadata policyMetadata = new LifecyclePolicyMetadata(policy, Collections.emptyMap(), 1, randomNonNegativeLong()).     String phaseName = randomFrom(policy.getPhases().keySet()).     Phase phase = policy.getPhases().get(phaseName).     PhaseExecutionInfo pei = new PhaseExecutionInfo(policy.getName(), phase, 1, randomNonNegativeLong()).     String phaseJson = Strings.toString(pei).     LifecycleAction action = randomFrom(phase.getActions().values()).     Step step = randomFrom(action.toSteps(client, phaseName, MOCK_STEP_KEY)).     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhaseDefinition(phaseJson).     IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0).put("index.version.created", Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME, "policy").build()).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()).build().     SortedMap<String, LifecyclePolicyMetadata> metas = new TreeMap<>().     metas.put("policy", policyMetadata).     PolicyStepsRegistry registry = new PolicyStepsRegistry(metas, null, null, REGISTRY, client).     Step actualStep = registry.getStep(indexMetaData, new Step.StepKey(step.getKey().getPhase(), step.getKey().getAction(), step.getKey().getName() + "-bad")).     assertNull(actualStep). }
false;public;0;93;;public void testUpdateFromNothingToSomethingToNothing() throws Exception {     Index index = new Index("test", "uuid").     Client client = mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     String policyName = randomAlphaOfLength(5).     LifecyclePolicy newPolicy = LifecyclePolicyTests.randomTestLifecyclePolicy(policyName).     logger.info("--> policy: {}", newPolicy).     List<Step> policySteps = newPolicy.toSteps(client).     Map<String, String> headers = new HashMap<>().     if (randomBoolean()) {         headers.put(randomAlphaOfLength(10), randomAlphaOfLength(10)).         headers.put(randomAlphaOfLength(10), randomAlphaOfLength(10)).     }     Map<String, LifecyclePolicyMetadata> policyMap = Collections.singletonMap(newPolicy.getName(), new LifecyclePolicyMetadata(newPolicy, headers, randomNonNegativeLong(), randomNonNegativeLong())).     IndexLifecycleMetadata lifecycleMetadata = new IndexLifecycleMetadata(policyMap, OperationMode.RUNNING).     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhase("new").     MetaData metaData = MetaData.builder().persistentSettings(settings(Version.CURRENT).build()).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata).put(IndexMetaData.builder("test").settings(Settings.builder().put("index.uuid", "uuid").put("index.number_of_shards", 1).put("index.number_of_replicas", 0).put("index.version.created", Version.CURRENT.id).put(LifecycleSettings.LIFECYCLE_NAME, policyName)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap())).build().     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         builder.startObject().         metaData.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().         logger.info("--> metadata: {}", Strings.toString(builder)).     }     String nodeId = randomAlphaOfLength(10).     DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT).put(Node.NODE_MASTER_SETTING.getKey(), true).build(), new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId).     ClusterState currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     // start with empty registry     PolicyStepsRegistry registry = new PolicyStepsRegistry(NamedXContentRegistry.EMPTY, client).     // add new policy     registry.update(currentState).     assertThat(registry.getFirstStep(newPolicy.getName()), equalTo(policySteps.get(0))).     assertThat(registry.getLifecyclePolicyMap().size(), equalTo(1)).     assertNotNull(registry.getLifecyclePolicyMap().get(newPolicy.getName())).     assertThat(registry.getLifecyclePolicyMap().get(newPolicy.getName()).getHeaders(), equalTo(headers)).     assertThat(registry.getFirstStepMap().size(), equalTo(1)).     assertThat(registry.getStepMap().size(), equalTo(1)).     Map<Step.StepKey, Step> registeredStepsForPolicy = registry.getStepMap().get(newPolicy.getName()).     assertThat(registeredStepsForPolicy.size(), equalTo(policySteps.size())).     for (Step step : policySteps) {         LifecycleExecutionState.Builder newIndexState = LifecycleExecutionState.builder().         newIndexState.setPhase(step.getKey().getPhase()).         currentState = ClusterState.builder(currentState).metaData(MetaData.builder(currentState.metaData()).put(IndexMetaData.builder(currentState.metaData().index("test")).settings(Settings.builder().put(currentState.metaData().index("test").getSettings())).putCustom(ILM_CUSTOM_METADATA_KEY, newIndexState.build().asMap()))).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().         registry.update(currentState).         assertThat(registeredStepsForPolicy.get(step.getKey()), equalTo(step)).         assertThat(registry.getStep(metaData.index(index), step.getKey()), equalTo(step)).     }     Map<String, LifecyclePolicyMetadata> registryPolicyMap = registry.getLifecyclePolicyMap().     Map<String, Step> registryFirstStepMap = registry.getFirstStepMap().     Map<String, Map<Step.StepKey, Step>> registryStepMap = registry.getStepMap().     registry.update(currentState).     assertThat(registry.getLifecyclePolicyMap(), equalTo(registryPolicyMap)).     assertThat(registry.getFirstStepMap(), equalTo(registryFirstStepMap)).     assertThat(registry.getStepMap(), equalTo(registryStepMap)).     // remove policy     lifecycleMetadata = new IndexLifecycleMetadata(Collections.emptyMap(), OperationMode.RUNNING).     currentState = ClusterState.builder(currentState).metaData(MetaData.builder(metaData).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata)).build().     registry.update(currentState).     assertTrue(registry.getLifecyclePolicyMap().isEmpty()).     assertTrue(registry.getFirstStepMap().isEmpty()).     assertTrue(registry.getStepMap().isEmpty()). }
false;public;0;39;;public void testUpdateChangedPolicy() {     Client client = mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     String policyName = randomAlphaOfLengthBetween(5, 10).     LifecyclePolicy newPolicy = LifecyclePolicyTests.randomTestLifecyclePolicy(policyName).     Map<String, String> headers = new HashMap<>().     if (randomBoolean()) {         headers.put(randomAlphaOfLength(10), randomAlphaOfLength(10)).         headers.put(randomAlphaOfLength(10), randomAlphaOfLength(10)).     }     Map<String, LifecyclePolicyMetadata> policyMap = Collections.singletonMap(newPolicy.getName(), new LifecyclePolicyMetadata(newPolicy, headers, randomNonNegativeLong(), randomNonNegativeLong())).     IndexLifecycleMetadata lifecycleMetadata = new IndexLifecycleMetadata(policyMap, OperationMode.RUNNING).     MetaData metaData = MetaData.builder().persistentSettings(settings(Version.CURRENT).build()).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata).build().     String nodeId = randomAlphaOfLength(10).     DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT).put(Node.NODE_MASTER_SETTING.getKey(), true).build(), new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId).     ClusterState currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     PolicyStepsRegistry registry = new PolicyStepsRegistry(NamedXContentRegistry.EMPTY, client).     // add new policy     registry.update(currentState).     // swap out policy     newPolicy = LifecyclePolicyTests.randomTestLifecyclePolicy(policyName).     lifecycleMetadata = new IndexLifecycleMetadata(Collections.singletonMap(policyName, new LifecyclePolicyMetadata(newPolicy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())), OperationMode.RUNNING).     currentState = ClusterState.builder(currentState).metaData(MetaData.builder(metaData).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata)).build().     registry.update(currentState). // TODO(talevy): assert changes... right now we do not support updates to policies. will require internal cleanup }
false;public;0;100;;public void testUpdatePolicyButNoPhaseChangeIndexStepsDontChange() throws Exception {     Index index = new Index("test", "uuid").     Client client = mock(Client.class).     Mockito.when(client.settings()).thenReturn(Settings.EMPTY).     String policyName = randomAlphaOfLength(5).     Map<String, LifecycleAction> actions = new HashMap<>().     actions.put("shrink", new ShrinkAction(1)).     Map<String, Phase> phases = new HashMap<>().     Phase warmPhase = new Phase("warm", TimeValue.ZERO, actions).     PhaseExecutionInfo pei = new PhaseExecutionInfo(policyName, warmPhase, 1, randomNonNegativeLong()).     String phaseJson = Strings.toString(pei).     phases.put("warm", new Phase("warm", TimeValue.ZERO, actions)).     LifecyclePolicy newPolicy = new LifecyclePolicy(policyName, phases).     // Modify the policy     actions = new HashMap<>().     actions.put("shrink", new ShrinkAction(2)).     phases = new HashMap<>().     phases.put("warm", new Phase("warm", TimeValue.ZERO, actions)).     LifecyclePolicy updatedPolicy = new LifecyclePolicy(policyName, phases).     logger.info("--> policy: {}", newPolicy).     logger.info("--> updated policy: {}", updatedPolicy).     List<Step> policySteps = newPolicy.toSteps(client).     Map<String, String> headers = new HashMap<>().     if (randomBoolean()) {         headers.put(randomAlphaOfLength(10), randomAlphaOfLength(10)).         headers.put(randomAlphaOfLength(10), randomAlphaOfLength(10)).     }     Map<String, LifecyclePolicyMetadata> policyMap = Collections.singletonMap(newPolicy.getName(), new LifecyclePolicyMetadata(newPolicy, headers, randomNonNegativeLong(), randomNonNegativeLong())).     IndexLifecycleMetadata lifecycleMetadata = new IndexLifecycleMetadata(policyMap, OperationMode.RUNNING).     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhase("warm").     lifecycleState.setPhaseDefinition(phaseJson).     MetaData metaData = MetaData.builder().persistentSettings(settings(Version.CURRENT).build()).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata).put(IndexMetaData.builder("test").settings(Settings.builder().put("index.uuid", "uuid").put("index.number_of_shards", 1).put("index.number_of_replicas", 0).put("index.version.created", Version.CURRENT.id).put(LifecycleSettings.LIFECYCLE_NAME, policyName)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap())).build().     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         builder.startObject().         metaData.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().         logger.info("--> metadata: {}", Strings.toString(builder)).     }     String nodeId = randomAlphaOfLength(10).     DiscoveryNode masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT).put(Node.NODE_MASTER_SETTING.getKey(), true).build(), new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId).     ClusterState currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     // start with empty registry     PolicyStepsRegistry registry = new PolicyStepsRegistry(REGISTRY, client).     // add new policy     registry.update(currentState).     Map<Step.StepKey, Step> registeredStepsForPolicy = registry.getStepMap().get(newPolicy.getName()).     Step shrinkStep = registeredStepsForPolicy.entrySet().stream().filter(e -> e.getKey().getPhase().equals("warm") && e.getKey().getName().equals("shrink")).findFirst().get().getValue().     Step gotStep = registry.getStep(metaData.index(index), shrinkStep.getKey()).     assertThat(((ShrinkStep) shrinkStep).getNumberOfShards(), equalTo(1)).     assertThat(((ShrinkStep) gotStep).getNumberOfShards(), equalTo(1)).     // Update the policy with the new policy, but keep the phase the same     policyMap = Collections.singletonMap(updatedPolicy.getName(), new LifecyclePolicyMetadata(updatedPolicy, headers, randomNonNegativeLong(), randomNonNegativeLong())).     lifecycleMetadata = new IndexLifecycleMetadata(policyMap, OperationMode.RUNNING).     metaData = MetaData.builder(metaData).putCustom(IndexLifecycleMetadata.TYPE, lifecycleMetadata).build().     try (XContentBuilder builder = JsonXContent.contentBuilder()) {         builder.startObject().         metaData.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().         logger.info("--> metadata: {}", Strings.toString(builder)).     }     currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).build().     // Update the policies     registry.update(currentState).     registeredStepsForPolicy = registry.getStepMap().get(newPolicy.getName()).     shrinkStep = registeredStepsForPolicy.entrySet().stream().filter(e -> e.getKey().getPhase().equals("warm") && e.getKey().getName().equals("shrink")).findFirst().get().getValue().     gotStep = registry.getStep(metaData.index(index), shrinkStep.getKey()).     assertThat(((ShrinkStep) shrinkStep).getNumberOfShards(), equalTo(2)).     assertThat(((ShrinkStep) gotStep).getNumberOfShards(), equalTo(1)). }
