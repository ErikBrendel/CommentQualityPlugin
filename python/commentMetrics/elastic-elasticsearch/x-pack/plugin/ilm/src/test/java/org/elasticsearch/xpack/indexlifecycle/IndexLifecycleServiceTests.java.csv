commented;modifiers;parameterAmount;loc;comment;code
false;public;0;35;;@Before public void prepareServices() {     nodeId = randomAlphaOfLength(10).     ExecutorService executorService = mock(ExecutorService.class).     clusterService = mock(ClusterService.class).     masterNode = DiscoveryNode.createLocal(settings(Version.CURRENT).put(NODE_MASTER_SETTING.getKey(), true).build(), new TransportAddress(TransportAddress.META_ADDRESS, 9300), nodeId).     now = randomNonNegativeLong().     Clock clock = Clock.fixed(Instant.ofEpochMilli(now), ZoneId.of(randomFrom(ZoneId.getAvailableZoneIds()))).     doAnswer(invocationOnMock -> null).when(clusterService).addListener(any()).     doAnswer(invocationOnMock -> {         Runnable runnable = (Runnable) invocationOnMock.getArguments()[0].         runnable.run().         return null.     }).when(executorService).execute(any()).     Settings settings = Settings.builder().put(LifecycleSettings.LIFECYCLE_POLL_INTERVAL, "1s").build().     when(clusterService.getClusterSettings()).thenReturn(new ClusterSettings(settings, Collections.singleton(LifecycleSettings.LIFECYCLE_POLL_INTERVAL_SETTING))).     when(clusterService.lifecycleState()).thenReturn(State.STARTED).     Client client = mock(Client.class).     AdminClient adminClient = mock(AdminClient.class).     indicesClient = mock(IndicesAdminClient.class).     when(client.admin()).thenReturn(adminClient).     when(adminClient.indices()).thenReturn(indicesClient).     when(client.settings()).thenReturn(Settings.EMPTY).     threadPool = new TestThreadPool("test").     indexLifecycleService = new IndexLifecycleService(Settings.EMPTY, client, clusterService, threadPool, clock, () -> now, null).     Mockito.verify(clusterService).addListener(indexLifecycleService).     Mockito.verify(clusterService).addStateApplier(indexLifecycleService). }
false;public;0;6;;@After public void cleanup() {     when(clusterService.lifecycleState()).thenReturn(randomFrom(State.STOPPED, State.CLOSED)).     indexLifecycleService.close().     threadPool.shutdownNow(). }
false;public;0;30;;public void testStoppedModeSkip() {     String policyName = randomAlphaOfLengthBetween(1, 20).     IndexLifecycleRunnerTests.MockClusterStateActionStep mockStep = new IndexLifecycleRunnerTests.MockClusterStateActionStep(randomStepKey(), randomStepKey()).     MockAction mockAction = new MockAction(Collections.singletonList(mockStep)).     Phase phase = new Phase("phase", TimeValue.ZERO, Collections.singletonMap("action", mockAction)).     LifecyclePolicy policy = newTestLifecyclePolicy(policyName, Collections.singletonMap(phase.getName(), phase)).     SortedMap<String, LifecyclePolicyMetadata> policyMap = new TreeMap<>().     policyMap.put(policyName, new LifecyclePolicyMetadata(policy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())).     Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     IndexMetaData indexMetadata = IndexMetaData.builder(index.getName()).settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), policyName)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     ImmutableOpenMap.Builder<String, IndexMetaData> indices = ImmutableOpenMap.<String, IndexMetaData>builder().fPut(index.getName(), indexMetadata).     MetaData metaData = MetaData.builder().putCustom(IndexLifecycleMetadata.TYPE, new IndexLifecycleMetadata(policyMap, OperationMode.STOPPED)).indices(indices.build()).persistentSettings(settings(Version.CURRENT).build()).build().     ClusterState currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     ClusterChangedEvent event = new ClusterChangedEvent("_source", currentState, ClusterState.EMPTY_STATE).     indexLifecycleService.applyClusterState(event).     indexLifecycleService.triggerPolicies(currentState, randomBoolean()).     assertThat(mockStep.getExecuteCount(), equalTo(0L)). }
false;public;0;42;;public void testRequestedStopOnShrink() {     Step.StepKey mockShrinkStep = new Step.StepKey(randomAlphaOfLength(4), ShrinkAction.NAME, randomAlphaOfLength(5)).     String policyName = randomAlphaOfLengthBetween(1, 20).     IndexLifecycleRunnerTests.MockClusterStateActionStep mockStep = new IndexLifecycleRunnerTests.MockClusterStateActionStep(mockShrinkStep, randomStepKey()).     MockAction mockAction = new MockAction(Collections.singletonList(mockStep)).     Phase phase = new Phase("phase", TimeValue.ZERO, Collections.singletonMap("action", mockAction)).     LifecyclePolicy policy = newTestLifecyclePolicy(policyName, Collections.singletonMap(phase.getName(), phase)).     SortedMap<String, LifecyclePolicyMetadata> policyMap = new TreeMap<>().     policyMap.put(policyName, new LifecyclePolicyMetadata(policy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())).     Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhase(mockShrinkStep.getPhase()).     lifecycleState.setAction(mockShrinkStep.getAction()).     lifecycleState.setStep(mockShrinkStep.getName()).     IndexMetaData indexMetadata = IndexMetaData.builder(index.getName()).settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), policyName)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     ImmutableOpenMap.Builder<String, IndexMetaData> indices = ImmutableOpenMap.<String, IndexMetaData>builder().fPut(index.getName(), indexMetadata).     MetaData metaData = MetaData.builder().putCustom(IndexLifecycleMetadata.TYPE, new IndexLifecycleMetadata(policyMap, OperationMode.STOPPING)).indices(indices.build()).persistentSettings(settings(Version.CURRENT).build()).build().     ClusterState currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     ClusterChangedEvent event = new ClusterChangedEvent("_source", currentState, ClusterState.EMPTY_STATE).     SetOnce<Boolean> executedShrink = new SetOnce<>().     doAnswer(invocationOnMock -> {         executedShrink.set(true).         return null.     }).when(clusterService).submitStateUpdateTask(anyString(), any(ExecuteStepsUpdateTask.class)).     indexLifecycleService.applyClusterState(event).     indexLifecycleService.triggerPolicies(currentState, true).     assertTrue(executedShrink.get()). }
false;public;0;53;;public void testRequestedStopOnSafeAction() {     String policyName = randomAlphaOfLengthBetween(1, 20).     Step.StepKey currentStepKey = randomStepKey().     IndexLifecycleRunnerTests.MockClusterStateActionStep mockStep = new IndexLifecycleRunnerTests.MockClusterStateActionStep(currentStepKey, randomStepKey()).     MockAction mockAction = new MockAction(Collections.singletonList(mockStep)).     Phase phase = new Phase("phase", TimeValue.ZERO, Collections.singletonMap("action", mockAction)).     LifecyclePolicy policy = newTestLifecyclePolicy(policyName, Collections.singletonMap(phase.getName(), phase)).     SortedMap<String, LifecyclePolicyMetadata> policyMap = new TreeMap<>().     policyMap.put(policyName, new LifecyclePolicyMetadata(policy, Collections.emptyMap(), randomNonNegativeLong(), randomNonNegativeLong())).     Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     LifecycleExecutionState.Builder lifecycleState = LifecycleExecutionState.builder().     lifecycleState.setPhase(currentStepKey.getPhase()).     lifecycleState.setAction(currentStepKey.getAction()).     lifecycleState.setStep(currentStepKey.getName()).     IndexMetaData indexMetadata = IndexMetaData.builder(index.getName()).settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_NAME_SETTING.getKey(), policyName)).putCustom(ILM_CUSTOM_METADATA_KEY, lifecycleState.build().asMap()).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     ImmutableOpenMap.Builder<String, IndexMetaData> indices = ImmutableOpenMap.<String, IndexMetaData>builder().fPut(index.getName(), indexMetadata).     MetaData metaData = MetaData.builder().putCustom(IndexLifecycleMetadata.TYPE, new IndexLifecycleMetadata(policyMap, OperationMode.STOPPING)).indices(indices.build()).persistentSettings(settings(Version.CURRENT).build()).build().     ClusterState currentState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).nodes(DiscoveryNodes.builder().localNodeId(nodeId).masterNodeId(nodeId).add(masterNode).build()).build().     ClusterChangedEvent event = new ClusterChangedEvent("_source", currentState, ClusterState.EMPTY_STATE).     SetOnce<Boolean> ranPolicy = new SetOnce<>().     SetOnce<Boolean> moveToMaintenance = new SetOnce<>().     doAnswer(invocationOnMock -> {         ranPolicy.set(true).         throw new AssertionError("invalid invocation").     }).when(clusterService).submitStateUpdateTask(anyString(), any(ExecuteStepsUpdateTask.class)).     doAnswer(invocationOnMock -> {         OperationModeUpdateTask task = (OperationModeUpdateTask) invocationOnMock.getArguments()[1].         assertThat(task.getOperationMode(), equalTo(OperationMode.STOPPED)).         moveToMaintenance.set(true).         return null.     }).when(clusterService).submitStateUpdateTask(anyString(), any(OperationModeUpdateTask.class)).     indexLifecycleService.applyClusterState(event).     indexLifecycleService.triggerPolicies(currentState, randomBoolean()).     assertNull(ranPolicy.get()).     assertTrue(moveToMaintenance.get()). }
false;public;0;6;;public void testTriggeredDifferentJob() {     Mockito.reset(clusterService).     SchedulerEngine.Event schedulerEvent = new SchedulerEngine.Event("foo", randomLong(), randomLong()).     indexLifecycleService.triggered(schedulerEvent).     Mockito.verifyZeroInteractions(indicesClient, clusterService). }
