# id;timestamp;commentText;codeText;commentWords;codeWords
ChangePolicyforIndexIT -> public void testChangePolicyForIndex() throws Exception;1541011769;This test aims to prove that an index will finish the current phase on an_existing definition when the policy is changed for that index, and that_after completing the current phase the new policy will be used for_subsequent phases.__The test creates two policies, one with a hot phase requiring 1 document_to rollover and a warm phase with an impossible allocation action. The_second policy has a rollover action requiring 1000 document and a warm_phase that moves the index to known nodes that will succeed. An index is_created with the fiorst policy set and the test ensures the policy is in_the rollover step. It then changes the policy for the index to the second_policy. It indexes a single document and checks that the index moves past_the hot phase and through the warm phasee (proving the hot phase_definition from the first policy was used) and then checks the allocation_settings from the second policy are set ont he index (proving the second_policy was used for the warm phase);public void testChangePolicyForIndex() throws Exception {_        String indexName = "test-000001"__        _        Map<String, Phase> phases1 = new HashMap<>()__        phases1.put("hot", new Phase("hot", TimeValue.ZERO, singletonMap(RolloverAction.NAME, new RolloverAction(null, null, 1L))))__        phases1.put("warm", new Phase("warm", TimeValue.ZERO,_                singletonMap(AllocateAction.NAME, new AllocateAction(1, singletonMap("_name", "foobarbaz"), null, null))))__        LifecyclePolicy lifecyclePolicy1 = new LifecyclePolicy("policy_1", phases1)__        Map<String, Phase> phases2 = new HashMap<>()__        phases2.put("hot", new Phase("hot", TimeValue.ZERO, singletonMap(RolloverAction.NAME, new RolloverAction(null, null, 1000L))))__        phases2.put("warm", new Phase("warm", TimeValue.ZERO,_                singletonMap(AllocateAction.NAME, new AllocateAction(1, singletonMap("_name", "node-1,node-2"), null, null))))__        LifecyclePolicy lifecyclePolicy2 = new LifecyclePolicy("policy_1", phases2)__        _        XContentBuilder builder1 = jsonBuilder()__        lifecyclePolicy1.toXContent(builder1, null)__        final StringEntity entity1 = new StringEntity("{ \"policy\":" + Strings.toString(builder1) + "}", ContentType.APPLICATION_JSON)__        Request request1 = new Request("PUT", "_ilm/policy/" + "policy_1")__        request1.setEntity(entity1)__        assertOK(client().performRequest(request1))__        XContentBuilder builder2 = jsonBuilder()__        lifecyclePolicy2.toXContent(builder2, null)__        final StringEntity entity2 = new StringEntity("{ \"policy\":" + Strings.toString(builder2) + "}", ContentType.APPLICATION_JSON)__        Request request2 = new Request("PUT", "_ilm/policy/" + "policy_2")__        request2.setEntity(entity2)__        assertOK(client().performRequest(request2))___        _        Settings settings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 4)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put("index.routing.allocation.include._name", "node-0")_                .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, "alias").put(LifecycleSettings.LIFECYCLE_NAME, "policy_1").build()__        Request createIndexRequest = new Request("PUT", "/" + indexName)__        createIndexRequest.setJsonEntity(_                "{\n \"settings\": " + Strings.toString(settings) + ", \"aliases\" : { \"alias\": { \"is_write_index\": true } } }")__        client().performRequest(createIndexRequest)__        _        ensureGreen(indexName)___        _        assertBusy(() -> assertStep(indexName, new StepKey("hot", RolloverAction.NAME, RolloverStep.NAME)))___        _        Request changePolicyRequest = new Request("PUT", "/" + indexName + "/_settings")__        final StringEntity changePolicyEntity = new StringEntity("{ \"index.lifecycle.name\": \"policy_2\" }",_                ContentType.APPLICATION_JSON)__        changePolicyRequest.setEntity(changePolicyEntity)__        assertOK(client().performRequest(changePolicyRequest))___        _        assertBusy(() -> assertStep(indexName, new StepKey("hot", RolloverAction.NAME, RolloverStep.NAME)))___        _        XContentBuilder document = jsonBuilder().startObject()__        document.field("foo", "bar")__        document.endObject()__        final Request request = new Request("POST", "/" + indexName + "/_doc/1")__        request.setJsonEntity(Strings.toString(document))__        assertOK(client().performRequest(request))___        _        assertBusy(() -> assertStep(indexName, TerminalPolicyStep.KEY))___        _        Request getSettingsRequest = new Request("GET", "/" + indexName + "/_settings")__        Response getSettingsResponse = client().performRequest(getSettingsRequest)__        assertOK(getSettingsResponse)__        Map<String, Object> getSettingsResponseMap = entityAsMap(getSettingsResponse)__        @SuppressWarnings("unchecked")_        Map<String, Object> indexSettings = (Map<String, Object>) ((Map<String, Object>) getSettingsResponseMap.get(indexName))_                .get("settings")__        @SuppressWarnings("unchecked")_        Map<String, Object> routingSettings = (Map<String, Object>) ((Map<String, Object>) indexSettings.get("index")).get("routing")__        @SuppressWarnings("unchecked")_        String includesAllocation = (String) ((Map<String, Object>) ((Map<String, Object>) routingSettings.get("allocation"))_                .get("include")).get("_name")__        assertEquals("node-1,node-2", includesAllocation)__    };this,test,aims,to,prove,that,an,index,will,finish,the,current,phase,on,an,existing,definition,when,the,policy,is,changed,for,that,index,and,that,after,completing,the,current,phase,the,new,policy,will,be,used,for,subsequent,phases,the,test,creates,two,policies,one,with,a,hot,phase,requiring,1,document,to,rollover,and,a,warm,phase,with,an,impossible,allocation,action,the,second,policy,has,a,rollover,action,requiring,1000,document,and,a,warm,phase,that,moves,the,index,to,known,nodes,that,will,succeed,an,index,is,created,with,the,fiorst,policy,set,and,the,test,ensures,the,policy,is,in,the,rollover,step,it,then,changes,the,policy,for,the,index,to,the,second,policy,it,indexes,a,single,document,and,checks,that,the,index,moves,past,the,hot,phase,and,through,the,warm,phasee,proving,the,hot,phase,definition,from,the,first,policy,was,used,and,then,checks,the,allocation,settings,from,the,second,policy,are,set,ont,he,index,proving,the,second,policy,was,used,for,the,warm,phase;public,void,test,change,policy,for,index,throws,exception,string,index,name,test,000001,map,string,phase,phases1,new,hash,map,phases1,put,hot,new,phase,hot,time,value,zero,singleton,map,rollover,action,name,new,rollover,action,null,null,1l,phases1,put,warm,new,phase,warm,time,value,zero,singleton,map,allocate,action,name,new,allocate,action,1,singleton,map,foobarbaz,null,null,lifecycle,policy,lifecycle,policy1,new,lifecycle,policy,phases1,map,string,phase,phases2,new,hash,map,phases2,put,hot,new,phase,hot,time,value,zero,singleton,map,rollover,action,name,new,rollover,action,null,null,1000l,phases2,put,warm,new,phase,warm,time,value,zero,singleton,map,allocate,action,name,new,allocate,action,1,singleton,map,node,1,node,2,null,null,lifecycle,policy,lifecycle,policy2,new,lifecycle,policy,phases2,xcontent,builder,builder1,json,builder,lifecycle,policy1,to,xcontent,builder1,null,final,string,entity,entity1,new,string,entity,policy,strings,to,string,builder1,content,type,request,request1,new,request,put,policy,request1,set,entity,entity1,assert,ok,client,perform,request,request1,xcontent,builder,builder2,json,builder,lifecycle,policy2,to,xcontent,builder2,null,final,string,entity,entity2,new,string,entity,policy,strings,to,string,builder2,content,type,request,request2,new,request,put,policy,request2,set,entity,entity2,assert,ok,client,perform,request,request2,settings,settings,settings,builder,put,index,meta,data,4,put,index,meta,data,0,put,index,routing,allocation,include,node,0,put,rollover,action,alias,put,lifecycle,settings,build,request,create,index,request,new,request,put,index,name,create,index,request,set,json,entity,n,settings,strings,to,string,settings,aliases,alias,true,client,perform,request,create,index,request,ensure,green,index,name,assert,busy,assert,step,index,name,new,step,key,hot,rollover,action,name,rollover,step,name,request,change,policy,request,new,request,put,index,name,final,string,entity,change,policy,entity,new,string,entity,index,lifecycle,name,content,type,change,policy,request,set,entity,change,policy,entity,assert,ok,client,perform,request,change,policy,request,assert,busy,assert,step,index,name,new,step,key,hot,rollover,action,name,rollover,step,name,xcontent,builder,document,json,builder,start,object,document,field,foo,bar,document,end,object,final,request,request,new,request,post,index,name,1,request,set,json,entity,strings,to,string,document,assert,ok,client,perform,request,request,assert,busy,assert,step,index,name,terminal,policy,step,key,request,get,settings,request,new,request,get,index,name,response,get,settings,response,client,perform,request,get,settings,request,assert,ok,get,settings,response,map,string,object,get,settings,response,map,entity,as,map,get,settings,response,suppress,warnings,unchecked,map,string,object,index,settings,map,string,object,map,string,object,get,settings,response,map,get,index,name,get,settings,suppress,warnings,unchecked,map,string,object,routing,settings,map,string,object,map,string,object,index,settings,get,index,get,routing,suppress,warnings,unchecked,string,includes,allocation,string,map,string,object,map,string,object,routing,settings,get,allocation,get,include,get,assert,equals,node,1,node,2,includes,allocation
ChangePolicyforIndexIT -> public void testChangePolicyForIndex() throws Exception;1542327091;This test aims to prove that an index will finish the current phase on an_existing definition when the policy is changed for that index, and that_after completing the current phase the new policy will be used for_subsequent phases.__The test creates two policies, one with a hot phase requiring 1 document_to rollover and a warm phase with an impossible allocation action. The_second policy has a rollover action requiring 1000 document and a warm_phase that moves the index to known nodes that will succeed. An index is_created with the fiorst policy set and the test ensures the policy is in_the rollover step. It then changes the policy for the index to the second_policy. It indexes a single document and checks that the index moves past_the hot phase and through the warm phasee (proving the hot phase_definition from the first policy was used) and then checks the allocation_settings from the second policy are set ont he index (proving the second_policy was used for the warm phase);public void testChangePolicyForIndex() throws Exception {_        String indexName = "test-000001"__        _        Map<String, Phase> phases1 = new HashMap<>()__        phases1.put("hot", new Phase("hot", TimeValue.ZERO, singletonMap(RolloverAction.NAME, new RolloverAction(null, null, 1L))))__        phases1.put("warm", new Phase("warm", TimeValue.ZERO,_                singletonMap(AllocateAction.NAME, new AllocateAction(1, singletonMap("_name", "foobarbaz"), null, null))))__        LifecyclePolicy lifecyclePolicy1 = new LifecyclePolicy("policy_1", phases1)__        Map<String, Phase> phases2 = new HashMap<>()__        phases2.put("hot", new Phase("hot", TimeValue.ZERO, singletonMap(RolloverAction.NAME, new RolloverAction(null, null, 1000L))))__        phases2.put("warm", new Phase("warm", TimeValue.ZERO,_                singletonMap(AllocateAction.NAME, new AllocateAction(1, singletonMap("_name", "node-1,node-2"), null, null))))__        LifecyclePolicy lifecyclePolicy2 = new LifecyclePolicy("policy_1", phases2)__        _        XContentBuilder builder1 = jsonBuilder()__        lifecyclePolicy1.toXContent(builder1, null)__        final StringEntity entity1 = new StringEntity("{ \"policy\":" + Strings.toString(builder1) + "}", ContentType.APPLICATION_JSON)__        Request request1 = new Request("PUT", "_ilm/policy/" + "policy_1")__        request1.setEntity(entity1)__        assertOK(client().performRequest(request1))__        XContentBuilder builder2 = jsonBuilder()__        lifecyclePolicy2.toXContent(builder2, null)__        final StringEntity entity2 = new StringEntity("{ \"policy\":" + Strings.toString(builder2) + "}", ContentType.APPLICATION_JSON)__        Request request2 = new Request("PUT", "_ilm/policy/" + "policy_2")__        request2.setEntity(entity2)__        assertOK(client().performRequest(request2))___        _        Settings settings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 4)_                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put("index.routing.allocation.include._name", "node-0")_                .put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, "alias").put(LifecycleSettings.LIFECYCLE_NAME, "policy_1").build()__        Request createIndexRequest = new Request("PUT", "/" + indexName)__        createIndexRequest.setJsonEntity(_                "{\n \"settings\": " + Strings.toString(settings) + ", \"aliases\" : { \"alias\": { \"is_write_index\": true } } }")__        client().performRequest(createIndexRequest)__        _        ensureGreen(indexName)___        _        assertBusy(() -> assertStep(indexName, new StepKey("hot", RolloverAction.NAME, WaitForRolloverReadyStep.NAME)))___        _        Request changePolicyRequest = new Request("PUT", "/" + indexName + "/_settings")__        final StringEntity changePolicyEntity = new StringEntity("{ \"index.lifecycle.name\": \"policy_2\" }",_                ContentType.APPLICATION_JSON)__        changePolicyRequest.setEntity(changePolicyEntity)__        assertOK(client().performRequest(changePolicyRequest))___        _        assertBusy(() -> assertStep(indexName, new StepKey("hot", RolloverAction.NAME, WaitForRolloverReadyStep.NAME)))___        _        XContentBuilder document = jsonBuilder().startObject()__        document.field("foo", "bar")__        document.endObject()__        final Request request = new Request("POST", "/" + indexName + "/_doc/1")__        request.setJsonEntity(Strings.toString(document))__        assertOK(client().performRequest(request))___        _        assertBusy(() -> assertStep(indexName, TerminalPolicyStep.KEY))___        _        Request getSettingsRequest = new Request("GET", "/" + indexName + "/_settings")__        Response getSettingsResponse = client().performRequest(getSettingsRequest)__        assertOK(getSettingsResponse)__        Map<String, Object> getSettingsResponseMap = entityAsMap(getSettingsResponse)__        @SuppressWarnings("unchecked")_        Map<String, Object> indexSettings = (Map<String, Object>) ((Map<String, Object>) getSettingsResponseMap.get(indexName))_                .get("settings")__        @SuppressWarnings("unchecked")_        Map<String, Object> routingSettings = (Map<String, Object>) ((Map<String, Object>) indexSettings.get("index")).get("routing")__        @SuppressWarnings("unchecked")_        String includesAllocation = (String) ((Map<String, Object>) ((Map<String, Object>) routingSettings.get("allocation"))_                .get("include")).get("_name")__        assertEquals("node-1,node-2", includesAllocation)__    };this,test,aims,to,prove,that,an,index,will,finish,the,current,phase,on,an,existing,definition,when,the,policy,is,changed,for,that,index,and,that,after,completing,the,current,phase,the,new,policy,will,be,used,for,subsequent,phases,the,test,creates,two,policies,one,with,a,hot,phase,requiring,1,document,to,rollover,and,a,warm,phase,with,an,impossible,allocation,action,the,second,policy,has,a,rollover,action,requiring,1000,document,and,a,warm,phase,that,moves,the,index,to,known,nodes,that,will,succeed,an,index,is,created,with,the,fiorst,policy,set,and,the,test,ensures,the,policy,is,in,the,rollover,step,it,then,changes,the,policy,for,the,index,to,the,second,policy,it,indexes,a,single,document,and,checks,that,the,index,moves,past,the,hot,phase,and,through,the,warm,phasee,proving,the,hot,phase,definition,from,the,first,policy,was,used,and,then,checks,the,allocation,settings,from,the,second,policy,are,set,ont,he,index,proving,the,second,policy,was,used,for,the,warm,phase;public,void,test,change,policy,for,index,throws,exception,string,index,name,test,000001,map,string,phase,phases1,new,hash,map,phases1,put,hot,new,phase,hot,time,value,zero,singleton,map,rollover,action,name,new,rollover,action,null,null,1l,phases1,put,warm,new,phase,warm,time,value,zero,singleton,map,allocate,action,name,new,allocate,action,1,singleton,map,foobarbaz,null,null,lifecycle,policy,lifecycle,policy1,new,lifecycle,policy,phases1,map,string,phase,phases2,new,hash,map,phases2,put,hot,new,phase,hot,time,value,zero,singleton,map,rollover,action,name,new,rollover,action,null,null,1000l,phases2,put,warm,new,phase,warm,time,value,zero,singleton,map,allocate,action,name,new,allocate,action,1,singleton,map,node,1,node,2,null,null,lifecycle,policy,lifecycle,policy2,new,lifecycle,policy,phases2,xcontent,builder,builder1,json,builder,lifecycle,policy1,to,xcontent,builder1,null,final,string,entity,entity1,new,string,entity,policy,strings,to,string,builder1,content,type,request,request1,new,request,put,policy,request1,set,entity,entity1,assert,ok,client,perform,request,request1,xcontent,builder,builder2,json,builder,lifecycle,policy2,to,xcontent,builder2,null,final,string,entity,entity2,new,string,entity,policy,strings,to,string,builder2,content,type,request,request2,new,request,put,policy,request2,set,entity,entity2,assert,ok,client,perform,request,request2,settings,settings,settings,builder,put,index,meta,data,4,put,index,meta,data,0,put,index,routing,allocation,include,node,0,put,rollover,action,alias,put,lifecycle,settings,build,request,create,index,request,new,request,put,index,name,create,index,request,set,json,entity,n,settings,strings,to,string,settings,aliases,alias,true,client,perform,request,create,index,request,ensure,green,index,name,assert,busy,assert,step,index,name,new,step,key,hot,rollover,action,name,wait,for,rollover,ready,step,name,request,change,policy,request,new,request,put,index,name,final,string,entity,change,policy,entity,new,string,entity,index,lifecycle,name,content,type,change,policy,request,set,entity,change,policy,entity,assert,ok,client,perform,request,change,policy,request,assert,busy,assert,step,index,name,new,step,key,hot,rollover,action,name,wait,for,rollover,ready,step,name,xcontent,builder,document,json,builder,start,object,document,field,foo,bar,document,end,object,final,request,request,new,request,post,index,name,1,request,set,json,entity,strings,to,string,document,assert,ok,client,perform,request,request,assert,busy,assert,step,index,name,terminal,policy,step,key,request,get,settings,request,new,request,get,index,name,response,get,settings,response,client,perform,request,get,settings,request,assert,ok,get,settings,response,map,string,object,get,settings,response,map,entity,as,map,get,settings,response,suppress,warnings,unchecked,map,string,object,index,settings,map,string,object,map,string,object,get,settings,response,map,get,index,name,get,settings,suppress,warnings,unchecked,map,string,object,routing,settings,map,string,object,map,string,object,index,settings,get,index,get,routing,suppress,warnings,unchecked,string,includes,allocation,string,map,string,object,map,string,object,routing,settings,get,allocation,get,include,get,assert,equals,node,1,node,2,includes,allocation
