# id;timestamp;commentText;codeText;commentWords;codeWords
PermissionsIT -> @SuppressWarnings("unchecked")     public void testCanManageIndexWithNoPermissions() throws Exception;1534879673;This tests the awkward behavior where an admin can have permissions to create a policy,_but then not have permissions to operate on an index that was later associated with that policy by another_user;@SuppressWarnings("unchecked")_    public void testCanManageIndexWithNoPermissions() throws Exception {_        createIndexAsAdmin("not-ilm", indexSettingsWithPolicy, "")__        Request request = new Request("GET", "/not-ilm/_ilm/explain")__        _        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request))__        assertThat(exception.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.FORBIDDEN.getStatus()))___        assertBusy(() -> {_            Response response = adminClient().performRequest(request)__            assertOK(response)__            try (InputStream is = response.getEntity().getContent()) {_                Map<String, Object> mapResponse = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true)__                Map<String, Object> indexExplain = (Map<String, Object>) ((Map<String, Object>) mapResponse.get("indices")).get("not-ilm")__                assertThat(indexExplain.get("managed"), equalTo(true))__                assertThat(indexExplain.get("step"), equalTo("ERROR"))__                assertThat(indexExplain.get("failed_step"), equalTo("readonly"))__                Map<String, String> stepInfo = (Map<String, String>) indexExplain.get("step_info")__                assertThat(stepInfo.get("type"), equalTo("security_exception"))__                assertThat(stepInfo.get("reason"), equalTo("action [indices:admin/settings/update] is unauthorized for user [test_ilm]"))__            }_        })__    };this,tests,the,awkward,behavior,where,an,admin,can,have,permissions,to,create,a,policy,but,then,not,have,permissions,to,operate,on,an,index,that,was,later,associated,with,that,policy,by,another,user;suppress,warnings,unchecked,public,void,test,can,manage,index,with,no,permissions,throws,exception,create,index,as,admin,not,ilm,index,settings,with,policy,request,request,new,request,get,not,ilm,explain,response,exception,exception,expect,throws,response,exception,class,client,perform,request,request,assert,that,exception,get,response,get,status,line,get,status,code,equal,to,rest,status,forbidden,get,status,assert,busy,response,response,admin,client,perform,request,request,assert,ok,response,try,input,stream,is,response,get,entity,get,content,map,string,object,map,response,xcontent,helper,convert,to,map,xcontent,type,json,x,content,is,true,map,string,object,index,explain,map,string,object,map,string,object,map,response,get,indices,get,not,ilm,assert,that,index,explain,get,managed,equal,to,true,assert,that,index,explain,get,step,equal,to,error,assert,that,index,explain,get,equal,to,readonly,map,string,string,step,info,map,string,string,index,explain,get,assert,that,step,info,get,type,equal,to,assert,that,step,info,get,reason,equal,to,action,indices,admin,settings,update,is,unauthorized,for,user
PermissionsIT -> @SuppressWarnings("unchecked")     public void testCanManageIndexWithNoPermissions() throws Exception;1537892161;This tests the awkward behavior where an admin can have permissions to create a policy,_but then not have permissions to operate on an index that was later associated with that policy by another_user;@SuppressWarnings("unchecked")_    public void testCanManageIndexWithNoPermissions() throws Exception {_        createIndexAsAdmin("not-ilm", indexSettingsWithPolicy, "")__        Request request = new Request("GET", "/not-ilm/_ilm/explain")__        _        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request))__        assertThat(exception.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.FORBIDDEN.getStatus()))___        assertBusy(() -> {_            Response response = adminClient().performRequest(request)__            assertOK(response)__            try (InputStream is = response.getEntity().getContent()) {_                Map<String, Object> mapResponse = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true)__                Map<String, Object> indexExplain = (Map<String, Object>) ((Map<String, Object>) mapResponse.get("indices")).get("not-ilm")__                assertThat(indexExplain.get("managed"), equalTo(true))__                assertThat(indexExplain.get("step"), equalTo("ERROR"))__                assertThat(indexExplain.get("failed_step"), equalTo("delete"))__                Map<String, String> stepInfo = (Map<String, String>) indexExplain.get("step_info")__                assertThat(stepInfo.get("type"), equalTo("security_exception"))__                assertThat(stepInfo.get("reason"), equalTo("action [indices:admin/delete] is unauthorized for user [test_ilm]"))__            }_        })__    };this,tests,the,awkward,behavior,where,an,admin,can,have,permissions,to,create,a,policy,but,then,not,have,permissions,to,operate,on,an,index,that,was,later,associated,with,that,policy,by,another,user;suppress,warnings,unchecked,public,void,test,can,manage,index,with,no,permissions,throws,exception,create,index,as,admin,not,ilm,index,settings,with,policy,request,request,new,request,get,not,ilm,explain,response,exception,exception,expect,throws,response,exception,class,client,perform,request,request,assert,that,exception,get,response,get,status,line,get,status,code,equal,to,rest,status,forbidden,get,status,assert,busy,response,response,admin,client,perform,request,request,assert,ok,response,try,input,stream,is,response,get,entity,get,content,map,string,object,map,response,xcontent,helper,convert,to,map,xcontent,type,json,x,content,is,true,map,string,object,index,explain,map,string,object,map,string,object,map,response,get,indices,get,not,ilm,assert,that,index,explain,get,managed,equal,to,true,assert,that,index,explain,get,step,equal,to,error,assert,that,index,explain,get,equal,to,delete,map,string,string,step,info,map,string,string,index,explain,get,assert,that,step,info,get,type,equal,to,assert,that,step,info,get,reason,equal,to,action,indices,admin,delete,is,unauthorized,for,user
PermissionsIT -> @SuppressWarnings("unchecked")     public void testCanManageIndexWithNoPermissions() throws Exception;1540941545;This tests the awkward behavior where an admin can have permissions to create a policy,_but then not have permissions to operate on an index that was later associated with that policy by another_user;@SuppressWarnings("unchecked")_    public void testCanManageIndexWithNoPermissions() throws Exception {_        createIndexAsAdmin("not-ilm", indexSettingsWithPolicy, "")__        Request request = new Request("GET", "/not-ilm/_ilm/explain")__        _        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request))__        assertThat(exception.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.FORBIDDEN.getStatus()))___        assertBusy(() -> {_            Response response = adminClient().performRequest(request)__            assertOK(response)__            try (InputStream is = response.getEntity().getContent()) {_                Map<String, Object> mapResponse = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true)__                Map<String, Object> indexExplain = (Map<String, Object>) ((Map<String, Object>) mapResponse.get("indices")).get("not-ilm")__                assertThat(indexExplain.get("managed"), equalTo(true))__                assertThat(indexExplain.get("step"), equalTo("ERROR"))__                assertThat(indexExplain.get("failed_step"), equalTo("delete"))__                Map<String, String> stepInfo = (Map<String, String>) indexExplain.get("step_info")__                assertThat(stepInfo.get("type"), equalTo("security_exception"))__                assertThat(stepInfo.get("reason"), equalTo("action [indices:admin/delete] is unauthorized for user [test_ilm]"))__            }_        })__    };this,tests,the,awkward,behavior,where,an,admin,can,have,permissions,to,create,a,policy,but,then,not,have,permissions,to,operate,on,an,index,that,was,later,associated,with,that,policy,by,another,user;suppress,warnings,unchecked,public,void,test,can,manage,index,with,no,permissions,throws,exception,create,index,as,admin,not,ilm,index,settings,with,policy,request,request,new,request,get,not,ilm,explain,response,exception,exception,expect,throws,response,exception,class,client,perform,request,request,assert,that,exception,get,response,get,status,line,get,status,code,equal,to,rest,status,forbidden,get,status,assert,busy,response,response,admin,client,perform,request,request,assert,ok,response,try,input,stream,is,response,get,entity,get,content,map,string,object,map,response,xcontent,helper,convert,to,map,xcontent,type,json,x,content,is,true,map,string,object,index,explain,map,string,object,map,string,object,map,response,get,indices,get,not,ilm,assert,that,index,explain,get,managed,equal,to,true,assert,that,index,explain,get,step,equal,to,error,assert,that,index,explain,get,equal,to,delete,map,string,string,step,info,map,string,string,index,explain,get,assert,that,step,info,get,type,equal,to,assert,that,step,info,get,reason,equal,to,action,indices,admin,delete,is,unauthorized,for,user
PermissionsIT -> @SuppressWarnings("unchecked")     public void testCanManageIndexWithNoPermissions() throws Exception;1544717493;This tests the awkward behavior where an admin can have permissions to create a policy,_but then not have permissions to operate on an index that was later associated with that policy by another_user;@SuppressWarnings("unchecked")_    public void testCanManageIndexWithNoPermissions() throws Exception {_        createIndexAsAdmin("not-ilm", indexSettingsWithPolicy, "")__        Request request = new Request("GET", "/not-ilm/_ilm/explain")__        _        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request))__        assertThat(exception.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.FORBIDDEN.getStatus()))___        assertBusy(() -> {_            Response response = adminClient().performRequest(request)__            assertOK(response)__            try (InputStream is = response.getEntity().getContent()) {_                Map<String, Object> mapResponse = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true)__                Map<String, Object> indexExplain = (Map<String, Object>) ((Map<String, Object>) mapResponse.get("indices")).get("not-ilm")__                assertThat(indexExplain.get("managed"), equalTo(true))__                assertThat(indexExplain.get("step"), equalTo("ERROR"))__                assertThat(indexExplain.get("failed_step"), equalTo("delete"))__                Map<String, String> stepInfo = (Map<String, String>) indexExplain.get("step_info")__                assertThat(stepInfo.get("type"), equalTo("security_exception"))__                assertThat(stepInfo.get("reason"), equalTo("action [indices:admin/delete] is unauthorized for user [test_ilm]"))__            }_        })__    };this,tests,the,awkward,behavior,where,an,admin,can,have,permissions,to,create,a,policy,but,then,not,have,permissions,to,operate,on,an,index,that,was,later,associated,with,that,policy,by,another,user;suppress,warnings,unchecked,public,void,test,can,manage,index,with,no,permissions,throws,exception,create,index,as,admin,not,ilm,index,settings,with,policy,request,request,new,request,get,not,ilm,explain,response,exception,exception,expect,throws,response,exception,class,client,perform,request,request,assert,that,exception,get,response,get,status,line,get,status,code,equal,to,rest,status,forbidden,get,status,assert,busy,response,response,admin,client,perform,request,request,assert,ok,response,try,input,stream,is,response,get,entity,get,content,map,string,object,map,response,xcontent,helper,convert,to,map,xcontent,type,json,x,content,is,true,map,string,object,index,explain,map,string,object,map,string,object,map,response,get,indices,get,not,ilm,assert,that,index,explain,get,managed,equal,to,true,assert,that,index,explain,get,step,equal,to,error,assert,that,index,explain,get,equal,to,delete,map,string,string,step,info,map,string,string,index,explain,get,assert,that,step,info,get,type,equal,to,assert,that,step,info,get,reason,equal,to,action,indices,admin,delete,is,unauthorized,for,user
PermissionsIT -> @SuppressWarnings("unchecked")     public void testCanManageIndexWithNoPermissions() throws Exception;1549079172;This tests the awkward behavior where an admin can have permissions to create a policy,_but then not have permissions to operate on an index that was later associated with that policy by another_user;@SuppressWarnings("unchecked")_    public void testCanManageIndexWithNoPermissions() throws Exception {_        createIndexAsAdmin("not-ilm", indexSettingsWithPolicy, "")__        Request request = new Request("GET", "/not-ilm/_ilm/explain")__        _        ResponseException exception = expectThrows(ResponseException.class, () -> client().performRequest(request))__        assertThat(exception.getResponse().getStatusLine().getStatusCode(), equalTo(RestStatus.FORBIDDEN.getStatus()))___        assertBusy(() -> {_            Response response = adminClient().performRequest(request)__            assertOK(response)__            try (InputStream is = response.getEntity().getContent()) {_                Map<String, Object> mapResponse = XContentHelper.convertToMap(XContentType.JSON.xContent(), is, true)__                Map<String, Object> indexExplain = (Map<String, Object>) ((Map<String, Object>) mapResponse.get("indices")).get("not-ilm")__                assertThat(indexExplain.get("managed"), equalTo(true))__                assertThat(indexExplain.get("step"), equalTo("ERROR"))__                assertThat(indexExplain.get("failed_step"), equalTo("wait-for-shard-history-leases"))__                Map<String, String> stepInfo = (Map<String, String>) indexExplain.get("step_info")__                assertThat(stepInfo.get("type"), equalTo("security_exception"))__                assertThat(stepInfo.get("reason"), equalTo("action [indices:monitor/stats] is unauthorized for user [test_ilm]"))__            }_        })__    };this,tests,the,awkward,behavior,where,an,admin,can,have,permissions,to,create,a,policy,but,then,not,have,permissions,to,operate,on,an,index,that,was,later,associated,with,that,policy,by,another,user;suppress,warnings,unchecked,public,void,test,can,manage,index,with,no,permissions,throws,exception,create,index,as,admin,not,ilm,index,settings,with,policy,request,request,new,request,get,not,ilm,explain,response,exception,exception,expect,throws,response,exception,class,client,perform,request,request,assert,that,exception,get,response,get,status,line,get,status,code,equal,to,rest,status,forbidden,get,status,assert,busy,response,response,admin,client,perform,request,request,assert,ok,response,try,input,stream,is,response,get,entity,get,content,map,string,object,map,response,xcontent,helper,convert,to,map,xcontent,type,json,x,content,is,true,map,string,object,index,explain,map,string,object,map,string,object,map,response,get,indices,get,not,ilm,assert,that,index,explain,get,managed,equal,to,true,assert,that,index,explain,get,step,equal,to,error,assert,that,index,explain,get,equal,to,wait,for,shard,history,leases,map,string,string,step,info,map,string,string,index,explain,get,assert,that,step,info,get,type,equal,to,assert,that,step,info,get,reason,equal,to,action,indices,monitor,stats,is,unauthorized,for,user
PermissionsIT -> public void testCanManageIndexAndPolicyDifferentUsers() throws Exception;1534879673;Tests that a policy that simply deletes an index after 0s succeeds when an index_with user `test_admin` is created referencing a policy created by `test_ilm` when both_users have read/write permissions on the the index. The goal is to verify that one_does not need to be the same user who created both the policy and the index to have the_index be properly managed by ILM.;public void testCanManageIndexAndPolicyDifferentUsers() throws Exception {_        String index = "ilm-00001"__        createIndexAsAdmin(index, indexSettingsWithPolicy, "")__        assertBusy(() -> assertFalse(indexExists(index)))__    };tests,that,a,policy,that,simply,deletes,an,index,after,0s,succeeds,when,an,index,with,user,is,created,referencing,a,policy,created,by,when,both,users,have,read,write,permissions,on,the,the,index,the,goal,is,to,verify,that,one,does,not,need,to,be,the,same,user,who,created,both,the,policy,and,the,index,to,have,the,index,be,properly,managed,by,ilm;public,void,test,can,manage,index,and,policy,different,users,throws,exception,string,index,ilm,00001,create,index,as,admin,index,index,settings,with,policy,assert,busy,assert,false,index,exists,index
PermissionsIT -> public void testCanManageIndexAndPolicyDifferentUsers() throws Exception;1537892161;Tests that a policy that simply deletes an index after 0s succeeds when an index_with user `test_admin` is created referencing a policy created by `test_ilm` when both_users have read/write permissions on the the index. The goal is to verify that one_does not need to be the same user who created both the policy and the index to have the_index be properly managed by ILM.;public void testCanManageIndexAndPolicyDifferentUsers() throws Exception {_        String index = "ilm-00001"__        createIndexAsAdmin(index, indexSettingsWithPolicy, "")__        assertBusy(() -> assertFalse(indexExists(index)))__    };tests,that,a,policy,that,simply,deletes,an,index,after,0s,succeeds,when,an,index,with,user,is,created,referencing,a,policy,created,by,when,both,users,have,read,write,permissions,on,the,the,index,the,goal,is,to,verify,that,one,does,not,need,to,be,the,same,user,who,created,both,the,policy,and,the,index,to,have,the,index,be,properly,managed,by,ilm;public,void,test,can,manage,index,and,policy,different,users,throws,exception,string,index,ilm,00001,create,index,as,admin,index,index,settings,with,policy,assert,busy,assert,false,index,exists,index
PermissionsIT -> public void testCanManageIndexAndPolicyDifferentUsers() throws Exception;1540941545;Tests that a policy that simply deletes an index after 0s succeeds when an index_with user `test_admin` is created referencing a policy created by `test_ilm` when both_users have read/write permissions on the the index. The goal is to verify that one_does not need to be the same user who created both the policy and the index to have the_index be properly managed by ILM.;public void testCanManageIndexAndPolicyDifferentUsers() throws Exception {_        String index = "ilm-00001"__        createIndexAsAdmin(index, indexSettingsWithPolicy, "")__        assertBusy(() -> assertFalse(indexExists(index)))__    };tests,that,a,policy,that,simply,deletes,an,index,after,0s,succeeds,when,an,index,with,user,is,created,referencing,a,policy,created,by,when,both,users,have,read,write,permissions,on,the,the,index,the,goal,is,to,verify,that,one,does,not,need,to,be,the,same,user,who,created,both,the,policy,and,the,index,to,have,the,index,be,properly,managed,by,ilm;public,void,test,can,manage,index,and,policy,different,users,throws,exception,string,index,ilm,00001,create,index,as,admin,index,index,settings,with,policy,assert,busy,assert,false,index,exists,index
PermissionsIT -> public void testCanManageIndexAndPolicyDifferentUsers() throws Exception;1544717493;Tests that a policy that simply deletes an index after 0s succeeds when an index_with user `test_admin` is created referencing a policy created by `test_ilm` when both_users have read/write permissions on the the index. The goal is to verify that one_does not need to be the same user who created both the policy and the index to have the_index be properly managed by ILM.;public void testCanManageIndexAndPolicyDifferentUsers() throws Exception {_        String index = "ilm-00001"__        createIndexAsAdmin(index, indexSettingsWithPolicy, "")__        assertBusy(() -> assertFalse(indexExists(index)))__    };tests,that,a,policy,that,simply,deletes,an,index,after,0s,succeeds,when,an,index,with,user,is,created,referencing,a,policy,created,by,when,both,users,have,read,write,permissions,on,the,the,index,the,goal,is,to,verify,that,one,does,not,need,to,be,the,same,user,who,created,both,the,policy,and,the,index,to,have,the,index,be,properly,managed,by,ilm;public,void,test,can,manage,index,and,policy,different,users,throws,exception,string,index,ilm,00001,create,index,as,admin,index,index,settings,with,policy,assert,busy,assert,false,index,exists,index
PermissionsIT -> public void testCanManageIndexAndPolicyDifferentUsers() throws Exception;1549079172;Tests that a policy that simply deletes an index after 0s succeeds when an index_with user `test_admin` is created referencing a policy created by `test_ilm` when both_users have read/write permissions on the the index. The goal is to verify that one_does not need to be the same user who created both the policy and the index to have the_index be properly managed by ILM.;public void testCanManageIndexAndPolicyDifferentUsers() throws Exception {_        String index = "ilm-00001"__        createIndexAsAdmin(index, indexSettingsWithPolicy, "")__        assertBusy(() -> assertFalse(indexExists(index)))__    };tests,that,a,policy,that,simply,deletes,an,index,after,0s,succeeds,when,an,index,with,user,is,created,referencing,a,policy,created,by,when,both,users,have,read,write,permissions,on,the,the,index,the,goal,is,to,verify,that,one,does,not,need,to,be,the,same,user,who,created,both,the,policy,and,the,index,to,have,the,index,be,properly,managed,by,ilm;public,void,test,can,manage,index,and,policy,different,users,throws,exception,string,index,ilm,00001,create,index,as,admin,index,index,settings,with,policy,assert,busy,assert,false,index,exists,index
