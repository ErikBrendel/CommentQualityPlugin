commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testSerializationV64OrLater() throws IOException {     final HasPrivilegesRequest original = randomRequest().     final Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_4_0, Version.CURRENT).     final HasPrivilegesRequest copy = serializeAndDeserialize(original, version).     assertThat(copy.username(), equalTo(original.username())).     assertThat(copy.clusterPrivileges(), equalTo(original.clusterPrivileges())).     assertThat(copy.indexPrivileges(), equalTo(original.indexPrivileges())).     assertThat(copy.applicationPrivileges(), equalTo(original.applicationPrivileges())). }
false;public;0;9;;public void testSerializationV63() throws IOException {     final HasPrivilegesRequest original = randomRequest().     final HasPrivilegesRequest copy = serializeAndDeserialize(original, Version.V_6_3_0).     assertThat(copy.username(), equalTo(original.username())).     assertThat(copy.clusterPrivileges(), equalTo(original.clusterPrivileges())).     assertThat(copy.indexPrivileges(), equalTo(original.indexPrivileges())).     assertThat(copy.applicationPrivileges(), nullValue()). }
false;public;0;8;;public void testValidateNullPrivileges() {     final HasPrivilegesRequest request = new HasPrivilegesRequest().     final ActionRequestValidationException exception = request.validate().     assertThat(exception, notNullValue()).     assertThat(exception.validationErrors(), hasItem("clusterPrivileges must not be null")).     assertThat(exception.validationErrors(), hasItem("indexPrivileges must not be null")).     assertThat(exception.validationErrors(), hasItem("applicationPrivileges must not be null")). }
false;public;0;9;;public void testValidateEmptyPrivileges() {     final HasPrivilegesRequest request = new HasPrivilegesRequest().     request.clusterPrivileges(new String[0]).     request.indexPrivileges(new IndicesPrivileges[0]).     request.applicationPrivileges(new ApplicationResourcePrivileges[0]).     final ActionRequestValidationException exception = request.validate().     assertThat(exception, notNullValue()).     assertThat(exception.validationErrors(), hasItem("must specify at least one privilege")). }
false;public;0;11;;public void testValidateNoWildcardApplicationPrivileges() {     final HasPrivilegesRequest request = new HasPrivilegesRequest().     request.clusterPrivileges(new String[0]).     request.indexPrivileges(new IndicesPrivileges[0]).     request.applicationPrivileges(new ApplicationResourcePrivileges[] { ApplicationResourcePrivileges.builder().privileges("read").application("*").resources("item/1").build() }).     final ActionRequestValidationException exception = request.validate().     assertThat(exception, notNullValue()).     assertThat(exception.validationErrors(), hasItem("Application names may not contain '*' (found '*')")). }
false;private;2;12;;private HasPrivilegesRequest serializeAndDeserialize(HasPrivilegesRequest original, Version version) throws IOException {     final BytesStreamOutput out = new BytesStreamOutput().     out.setVersion(version).     original.writeTo(out).     final HasPrivilegesRequest copy = new HasPrivilegesRequest().     final StreamInput in = out.bytes().streamInput().     in.setVersion(version).     copy.readFrom(in).     assertThat(in.read(), equalTo(-1)).     return copy. }
false;private;0;29;;private HasPrivilegesRequest randomRequest() {     final HasPrivilegesRequest request = new HasPrivilegesRequest().     request.username(randomAlphaOfLength(8)).     final List<String> clusterPrivileges = randomSubsetOf(Arrays.asList(ClusterPrivilege.MONITOR, ClusterPrivilege.MANAGE, ClusterPrivilege.MANAGE_ML, ClusterPrivilege.MANAGE_SECURITY, ClusterPrivilege.MANAGE_PIPELINE, ClusterPrivilege.ALL)).stream().flatMap(p -> p.name().stream()).collect(Collectors.toList()).     request.clusterPrivileges(clusterPrivileges.toArray(Strings.EMPTY_ARRAY)).     IndicesPrivileges[] indicesPrivileges = new IndicesPrivileges[randomInt(5)].     for (int i = 0. i < indicesPrivileges.length. i++) {         indicesPrivileges[i] = IndicesPrivileges.builder().privileges(randomFrom("read", "write", "create", "delete", "all")).indices(randomAlphaOfLengthBetween(2, 8) + (randomBoolean() ? "*" : "")).build().     }     request.indexPrivileges(indicesPrivileges).     final ApplicationResourcePrivileges[] appPrivileges = new ApplicationResourcePrivileges[randomInt(5)].     for (int i = 0. i < appPrivileges.length. i++) {         appPrivileges[i] = ApplicationResourcePrivileges.builder().application(randomAlphaOfLengthBetween(3, 8)).resources(randomAlphaOfLengthBetween(5, 7) + (randomBoolean() ? "*" : "")).privileges(generateRandomStringArray(6, 7, false, false)).build().     }     request.applicationPrivileges(appPrivileges).     return request. }
