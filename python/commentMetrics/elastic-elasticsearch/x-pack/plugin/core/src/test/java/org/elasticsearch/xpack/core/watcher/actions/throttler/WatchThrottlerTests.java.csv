commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testThrottleDueToAck() throws Exception {     PeriodThrottler periodThrottler = mock(PeriodThrottler.class).     AckThrottler ackThrottler = mock(AckThrottler.class).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     when(periodThrottler.throttle("_action", ctx)).thenReturn(Throttler.Result.NO).     Throttler.Result expectedResult = Throttler.Result.throttle(Throttler.Type.ACK, "_reason").     when(ackThrottler.throttle("_action", ctx)).thenReturn(expectedResult).     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isWatcherAllowed()).thenReturn(true).     ActionThrottler throttler = new ActionThrottler(periodThrottler, ackThrottler, licenseState).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result, is(expectedResult)). }
false;public;0;14;;public void testThrottleDueToPeriod() throws Exception {     PeriodThrottler periodThrottler = mock(PeriodThrottler.class).     AckThrottler ackThrottler = mock(AckThrottler.class).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     Throttler.Result expectedResult = Throttler.Result.throttle(Throttler.Type.PERIOD, "_reason").     when(periodThrottler.throttle("_action", ctx)).thenReturn(expectedResult).     when(ackThrottler.throttle("_action", ctx)).thenReturn(Throttler.Result.NO).     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isWatcherAllowed()).thenReturn(true).     ActionThrottler throttler = new ActionThrottler(periodThrottler, ackThrottler, licenseState).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result, is(expectedResult)). }
false;public;0;16;;public void testThrottleDueAckAndPeriod() throws Exception {     PeriodThrottler periodThrottler = mock(PeriodThrottler.class).     AckThrottler ackThrottler = mock(AckThrottler.class).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     Throttler.Result periodResult = Throttler.Result.throttle(Throttler.Type.PERIOD, "_reason_period").     when(periodThrottler.throttle("_action", ctx)).thenReturn(periodResult).     Throttler.Result ackResult = Throttler.Result.throttle(Throttler.Type.ACK, "_reason_ack").     when(ackThrottler.throttle("_action", ctx)).thenReturn(ackResult).     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isWatcherAllowed()).thenReturn(true).     ActionThrottler throttler = new ActionThrottler(periodThrottler, ackThrottler, licenseState).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     // we always check the period first... so the result will come for the period throttler     assertThat(result, is(periodResult)). }
false;public;0;13;;public void testNoThrottle() throws Exception {     PeriodThrottler periodThrottler = mock(PeriodThrottler.class).     AckThrottler ackThrottler = mock(AckThrottler.class).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     when(periodThrottler.throttle("_action", ctx)).thenReturn(Throttler.Result.NO).     when(ackThrottler.throttle("_action", ctx)).thenReturn(Throttler.Result.NO).     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isWatcherAllowed()).thenReturn(true).     ActionThrottler throttler = new ActionThrottler(periodThrottler, ackThrottler, licenseState).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result, is(Throttler.Result.NO)). }
false;public;0;12;;public void testWithoutPeriod() throws Exception {     AckThrottler ackThrottler = mock(AckThrottler.class).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     Throttler.Result ackResult = mock(Throttler.Result.class).     when(ackThrottler.throttle("_action", ctx)).thenReturn(ackResult).     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isWatcherAllowed()).thenReturn(true).     ActionThrottler throttler = new ActionThrottler(null, ackThrottler, licenseState).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result, sameInstance(ackResult)). }
false;public;0;13;;public void testThatRestrictedLicenseReturnsCorrectResult() throws Exception {     AckThrottler ackThrottler = mock(AckThrottler.class).     WatchExecutionContext ctx = mock(WatchExecutionContext.class).     Throttler.Result ackResult = mock(Throttler.Result.class).     when(ackThrottler.throttle("_action", ctx)).thenReturn(ackResult).     XPackLicenseState licenseState = mock(XPackLicenseState.class).     when(licenseState.isWatcherAllowed()).thenReturn(false).     ActionThrottler throttler = new ActionThrottler(null, ackThrottler, licenseState).     Throttler.Result result = throttler.throttle("_action", ctx).     assertThat(result, notNullValue()).     assertThat(result.reason(), is("watcher license does not allow action execution")).     assertThat(result.type(), is(Throttler.Type.LICENSE)). }
