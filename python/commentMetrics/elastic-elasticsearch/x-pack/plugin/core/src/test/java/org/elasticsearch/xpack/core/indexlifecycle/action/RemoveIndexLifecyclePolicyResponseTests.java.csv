commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Response createBlankInstance() {     return new Response(). }
false;protected;0;5;;@Override protected Response createTestInstance() {     List<String> failedIndexes = Arrays.asList(generateRandomStringArray(20, 20, false)).     return new Response(failedIndexes). }
false;protected;1;6;;@Override protected Response mutateInstance(Response instance) throws IOException {     List<String> failedIndices = randomValueOtherThan(instance.getFailedIndexes(), () -> Arrays.asList(generateRandomStringArray(20, 20, false))).     return new Response(failedIndices). }
false;protected;1;4;;@Override protected Response doParseInstance(XContentParser parser) throws IOException {     return Response.PARSER.apply(parser, null). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;4;;public void testNullFailedIndices() {     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> new Response((List<String>) null)).     assertEquals("failed_indexes cannot be null", exception.getMessage()). }
false;public;0;14;;public void testHasFailures() {     Response response = new Response(new ArrayList<>()).     assertFalse(response.hasFailures()).     assertEquals(Collections.emptyList(), response.getFailedIndexes()).     int size = randomIntBetween(1, 10).     List<String> failedIndexes = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         failedIndexes.add(randomAlphaOfLength(20)).     }     response = new Response(failedIndexes).     assertTrue(response.hasFailures()).     assertEquals(failedIndexes, response.getFailedIndexes()). }
