commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Request doParseInstance(XContentParser parser) {     return Request.parseRequest(null, parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;protected;0;11;;@Override protected Request createTestInstance() {     Request request = new Request(randomAlphaOfLengthBetween(1, 20)).     if (randomBoolean()) {         request.setDuration(TimeValue.timeValueSeconds(randomIntBetween(1, 1_000_000)).getStringRep()).     }     if (randomBoolean()) {         request.setExpiresIn(TimeValue.timeValueSeconds(randomIntBetween(0, 1_000_000)).getStringRep()).     }     return request. }
false;protected;0;4;;@Override protected Writeable.Reader<Request> instanceReader() {     return Request::new. }
false;public;0;4;;public void testSetDuration_GivenZero() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setDuration("0")).     assertThat(e.getMessage(), equalTo("[duration] must be positive: [0ms]")). }
false;public;0;4;;public void testSetDuration_GivenNegative() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setDuration("-1s")).     assertThat(e.getMessage(), equalTo("[duration] must be positive: [-1]")). }
false;public;0;5;;public void testSetExpiresIn_GivenZero() {     Request request = new Request().     request.setExpiresIn("0").     assertThat(request.getExpiresIn(), equalTo(TimeValue.ZERO)). }
false;public;0;4;;public void testSetExpiresIn_GivenNegative() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setExpiresIn("-1s")).     assertThat(e.getMessage(), equalTo("[expires_in] must be non-negative: [-1]")). }
