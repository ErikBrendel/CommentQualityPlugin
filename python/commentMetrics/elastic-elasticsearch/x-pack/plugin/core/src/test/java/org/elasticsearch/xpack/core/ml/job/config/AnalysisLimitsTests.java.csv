commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AnalysisLimits createTestInstance() {     return createRandomized(). }
false;public,static;0;4;;public static AnalysisLimits createRandomized() {     return new AnalysisLimits(randomBoolean() ? (long) randomIntBetween(1, 1000000) : null, randomBoolean() ? randomNonNegativeLong() : null). }
false;protected;0;4;;@Override protected Writeable.Reader<AnalysisLimits> instanceReader() {     return AnalysisLimits::new. }
false;protected;1;4;;@Override protected AnalysisLimits doParseInstance(XContentParser parser) {     return AnalysisLimits.STRICT_PARSER.apply(parser, null). }
false;public;0;8;;public void testParseModelMemoryLimitGivenNegativeNumber() throws IOException {     String json = "{\"model_memory_limit\": -1}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     XContentParseException e = expectThrows(XContentParseException.class, () -> AnalysisLimits.STRICT_PARSER.apply(parser, null)).     assertThat(e.getCause(), notNullValue()).     assertThat(e.getCause().getMessage(), containsString("model_memory_limit must be at least 1 MiB. Value = -1")). }
false;public;0;8;;public void testParseModelMemoryLimitGivenZero() throws IOException {     String json = "{\"model_memory_limit\": 0}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     XContentParseException e = expectThrows(XContentParseException.class, () -> AnalysisLimits.STRICT_PARSER.apply(parser, null)).     assertThat(e.getCause(), notNullValue()).     assertThat(e.getCause().getMessage(), containsString("model_memory_limit must be at least 1 MiB. Value = 0")). }
false;public;0;9;;public void testParseModelMemoryLimitGivenPositiveNumber() throws IOException {     String json = "{\"model_memory_limit\": 2048}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     AnalysisLimits limits = AnalysisLimits.STRICT_PARSER.apply(parser, null).     assertThat(limits.getModelMemoryLimit(), equalTo(2048L)). }
false;public;0;10;;public void testParseModelMemoryLimitGivenNegativeString() throws IOException {     String json = "{\"model_memory_limit\":\"-4MB\"}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     XContentParseException e = expectThrows(XContentParseException.class, () -> AnalysisLimits.STRICT_PARSER.apply(parser, null)).     // the root cause is wrapped in an intermediate ElasticsearchParseException     assertThat(e.getCause(), instanceOf(ElasticsearchParseException.class)).     assertThat(e.getCause().getCause(), instanceOf(IllegalArgumentException.class)).     assertThat(e.getCause().getCause().getMessage(), containsString("Values less than -1 bytes are not supported: -4mb")). }
false;public;0;8;;public void testParseModelMemoryLimitGivenZeroString() throws IOException {     String json = "{\"model_memory_limit\":\"0MB\"}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     XContentParseException e = expectThrows(XContentParseException.class, () -> AnalysisLimits.STRICT_PARSER.apply(parser, null)).     assertThat(e.getCause(), notNullValue()).     assertThat(e.getCause().getMessage(), containsString("model_memory_limit must be at least 1 MiB. Value = 0")). }
false;public;0;8;;public void testParseModelMemoryLimitGivenLessThanOneMBString() throws IOException {     String json = "{\"model_memory_limit\":\"1000Kb\"}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     XContentParseException e = expectThrows(XContentParseException.class, () -> AnalysisLimits.STRICT_PARSER.apply(parser, null)).     assertThat(e.getCause(), notNullValue()).     assertThat(e.getCause().getMessage(), containsString("model_memory_limit must be at least 1 MiB. Value = 0")). }
false;public;0;9;;public void testParseModelMemoryLimitGivenStringMultipleOfMBs() throws IOException {     String json = "{\"model_memory_limit\":\"4g\"}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     AnalysisLimits limits = AnalysisLimits.STRICT_PARSER.apply(parser, null).     assertThat(limits.getModelMemoryLimit(), equalTo(4096L)). }
false;public;0;9;;public void testParseModelMemoryLimitGivenStringNonMultipleOfMBs() throws IOException {     String json = "{\"model_memory_limit\":\"1300kb\"}".     XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     AnalysisLimits limits = AnalysisLimits.STRICT_PARSER.apply(parser, null).     assertThat(limits.getModelMemoryLimit(), equalTo(1L)). }
false;public;0;4;;public void testModelMemoryDefault() {     AnalysisLimits limits = new AnalysisLimits(randomNonNegativeLong()).     assertThat(limits.getModelMemoryLimit(), equalTo(AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB)). }
false;public;0;8;;public void testEquals_GivenEqual() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(10L, 20L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(10L, 20L).     assertTrue(analysisLimits1.equals(analysisLimits1)).     assertTrue(analysisLimits1.equals(analysisLimits2)).     assertTrue(analysisLimits2.equals(analysisLimits1)). }
false;public;0;7;;public void testEquals_GivenDifferentModelMemoryLimit() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(10L, 20L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(11L, 20L).     assertFalse(analysisLimits1.equals(analysisLimits2)).     assertFalse(analysisLimits2.equals(analysisLimits1)). }
false;public;0;7;;public void testEquals_GivenDifferentCategorizationExamplesLimit() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(10L, 20L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(10L, 21L).     assertFalse(analysisLimits1.equals(analysisLimits2)).     assertFalse(analysisLimits2.equals(analysisLimits1)). }
false;public;0;6;;public void testHashCode_GivenEqual() {     AnalysisLimits analysisLimits1 = new AnalysisLimits(5555L, 3L).     AnalysisLimits analysisLimits2 = new AnalysisLimits(5555L, 3L).     assertEquals(analysisLimits1.hashCode(), analysisLimits2.hashCode()). }
false;public;0;6;;public void testVerify_GivenNegativeCategorizationExamplesLimit() {     ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> new AnalysisLimits(1L, -1L)).     String errorMessage = Messages.getMessage(Messages.JOB_CONFIG_FIELD_VALUE_TOO_LOW, AnalysisLimits.CATEGORIZATION_EXAMPLES_LIMIT, 0, -1L).     assertEquals(errorMessage, e.getMessage()). }
false;public;0;5;;public void testVerify_GivenValid() {     new AnalysisLimits(null, 1L).     new AnalysisLimits(1L, null).     new AnalysisLimits(1L, 1L). }
false;protected;1;32;;@Override protected AnalysisLimits mutateInstance(AnalysisLimits instance) throws IOException {     Long memoryModelLimit = instance.getModelMemoryLimit().     Long categorizationExamplesLimit = instance.getCategorizationExamplesLimit().     switch(between(0, 1)) {         case 0:             if (memoryModelLimit == null) {                 memoryModelLimit = randomNonNegativeLong().             } else {                 if (randomBoolean()) {                     memoryModelLimit = null.                 } else {                     memoryModelLimit += between(1, 10000).                 }             }             break.         case 1:             if (categorizationExamplesLimit == null) {                 categorizationExamplesLimit = randomNonNegativeLong().             } else {                 if (randomBoolean()) {                     categorizationExamplesLimit = null.                 } else {                     categorizationExamplesLimit += between(1, 10000).                 }             }             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new AnalysisLimits(memoryModelLimit, categorizationExamplesLimit). }
