commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() throws Exception {     scriptService = mock(ScriptService.class). }
false;public;0;4;;@Override public String execute() {     return "rendered_text". }
false;public;0;40;;public void testTemplating() throws Exception {     User user = new User("_username", new String[] { "role1", "role2" }, "_full_name", "_email", Collections.singletonMap("key", "value"), true).     TemplateScript.Factory compiledTemplate = templateParams -> new TemplateScript(templateParams) {          @Override         public String execute() {             return "rendered_text".         }     }.     when(scriptService.compile(any(Script.class), eq(TemplateScript.CONTEXT))).thenReturn(compiledTemplate).     XContentBuilder builder = jsonBuilder().     String query = Strings.toString(new TermQueryBuilder("field", "{{_user.username}}").toXContent(builder, ToXContent.EMPTY_PARAMS)).     Script script = new Script(ScriptType.INLINE, "mustache", query, Collections.singletonMap("custom", "value")).     builder = jsonBuilder().startObject().field("template").     script.toXContent(builder, ToXContent.EMPTY_PARAMS).     String querySource = Strings.toString(builder.endObject()).     SecurityQueryTemplateEvaluator.evaluateTemplate(querySource, scriptService, user).     ArgumentCaptor<Script> argument = ArgumentCaptor.forClass(Script.class).     verify(scriptService).compile(argument.capture(), eq(TemplateScript.CONTEXT)).     Script usedScript = argument.getValue().     assertThat(usedScript.getIdOrCode(), equalTo(script.getIdOrCode())).     assertThat(usedScript.getType(), equalTo(script.getType())).     assertThat(usedScript.getLang(), equalTo("mustache")).     assertThat(usedScript.getOptions(), equalTo(script.getOptions())).     assertThat(usedScript.getParams().size(), equalTo(2)).     assertThat(usedScript.getParams().get("custom"), equalTo("value")).     Map<String, Object> userModel = new HashMap<>().     userModel.put("username", user.principal()).     userModel.put("full_name", user.fullName()).     userModel.put("email", user.email()).     userModel.put("roles", Arrays.asList(user.roles())).     userModel.put("metadata", user.metadata()).     assertThat(usedScript.getParams().get("_user"), equalTo(userModel)). }
false;public;0;7;;public void testSkipTemplating() throws Exception {     XContentBuilder builder = jsonBuilder().     String querySource = Strings.toString(new TermQueryBuilder("field", "value").toXContent(builder, ToXContent.EMPTY_PARAMS)).     String result = SecurityQueryTemplateEvaluator.evaluateTemplate(querySource, scriptService, null).     assertThat(result, sameInstance(querySource)).     verifyZeroInteractions(scriptService). }
