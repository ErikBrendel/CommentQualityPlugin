commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testValidOrdinals() {     assertThat(IndexerState.STARTED.ordinal(), equalTo(0)).     assertThat(IndexerState.INDEXING.ordinal(), equalTo(1)).     assertThat(IndexerState.STOPPING.ordinal(), equalTo(2)).     assertThat(IndexerState.STOPPED.ordinal(), equalTo(3)).     assertThat(IndexerState.ABORTING.ordinal(), equalTo(4)). }
false;public;0;36;;public void testwriteTo() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         IndexerState.STARTED.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(0)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         IndexerState.INDEXING.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(1)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         IndexerState.STOPPING.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(2)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         IndexerState.STOPPED.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(3)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         IndexerState.ABORTING.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(in.readVInt(), equalTo(4)).         }     } }
false;public;0;32;;public void testReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(0).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(IndexerState.fromStream(in), equalTo(IndexerState.STARTED)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(1).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(IndexerState.fromStream(in), equalTo(IndexerState.INDEXING)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(2).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(IndexerState.fromStream(in), equalTo(IndexerState.STOPPING)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(3).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(IndexerState.fromStream(in), equalTo(IndexerState.STOPPED)).         }     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(4).         try (StreamInput in = out.bytes().streamInput()) {             assertThat(IndexerState.fromStream(in), equalTo(IndexerState.ABORTING)).         }     } }
false;public;0;12;;public void testInvalidReadFrom() throws Exception {     try (BytesStreamOutput out = new BytesStreamOutput()) {         out.writeVInt(randomIntBetween(3, Integer.MAX_VALUE)).         try (StreamInput in = out.bytes().streamInput()) {             IndexerState.fromStream(in).             fail("Expected IOException").         } catch (IOException e) {             assertThat(e.getMessage(), containsString("Unknown IndexerState ordinal [")).         }     } }
