commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testBuilder() {     ResourcePrivileges instance = createInstance().     ResourcePrivileges expected = new ResourcePrivileges("*", mapBuilder().put("read", true).put("write", false).map()).     assertThat(instance, equalTo(expected)). }
false;public;0;11;;public void testWhenSamePrivilegeExists() {     ResourcePrivileges.Builder builder = ResourcePrivileges.builder("*").addPrivilege("read", true).     Map<String, Boolean> mapWhereReadIsAllowed = mapBuilder().put("read", true).map().     builder.addPrivileges(mapWhereReadIsAllowed).     assertThat(builder.build().isAllowed("read"), is(true)).     Map<String, Boolean> mapWhereReadIsDenied = mapBuilder().put("read", false).map().     builder.addPrivileges(mapWhereReadIsDenied).     assertThat(builder.build().isAllowed("read"), is(false)). }
false;public;0;10;;public void testEqualsHashCode() {     ResourcePrivileges instance = createInstance().     EqualsHashCodeTestUtils.checkEqualsAndHashCode(instance, (original) -> {         return ResourcePrivileges.builder(original.getResource()).addPrivileges(original.getPrivileges()).build().     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(instance, (original) -> {         return ResourcePrivileges.builder(original.getResource()).addPrivileges(original.getPrivileges()).build().     }, ResourcePrivilegesTests::mutateTestItem). }
false;private;0;5;;private ResourcePrivileges createInstance() {     ResourcePrivileges instance = ResourcePrivileges.builder("*").addPrivilege("read", true).addPrivileges(Collections.singletonMap("write", false)).build().     return instance. }
false;private,static;1;10;;private static ResourcePrivileges mutateTestItem(ResourcePrivileges original) {     switch(randomIntBetween(0, 1)) {         case 0:             return ResourcePrivileges.builder(randomAlphaOfLength(6)).addPrivileges(original.getPrivileges()).build().         case 1:             return ResourcePrivileges.builder(original.getResource()).addPrivileges(Collections.emptyMap()).build().         default:             return ResourcePrivileges.builder(randomAlphaOfLength(6)).addPrivileges(Collections.emptyMap()).build().     } }
false;private,static;0;3;;private static MapBuilder<String, Boolean> mapBuilder() {     return MapBuilder.newMapBuilder(). }
