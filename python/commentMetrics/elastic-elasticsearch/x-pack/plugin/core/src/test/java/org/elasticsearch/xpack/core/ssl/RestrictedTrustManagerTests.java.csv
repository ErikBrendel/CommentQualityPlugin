commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {     try {         String fileName = file.getFileName().toString().         if (fileName.endsWith(".crt")) {             certificates.put(fileName.replace(".crt", "/self"), CertParsingUtils.readX509Certificates(Collections.singletonList(file))).         }         return FileVisitResult.CONTINUE.     } catch (CertificateException e) {         throw new IOException("Failed to read X.509 Certificate from: " + file.toAbsolutePath().toString()).     } }
false;public;2;13;;@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {     try {         String fileName = file.getFileName().toString().         if (fileName.endsWith(".crt")) {             certificates.put(fileName.replace(".crt", "/ca"), CertParsingUtils.readX509Certificates(Collections.singletonList(file))).         }         return FileVisitResult.CONTINUE.     } catch (CertificateException e) {         throw new IOException("Failed to read X.509 Certificate from: " + file.toAbsolutePath().toString()).     } }
false;public;0;47;;@Before public void readCertificates() throws GeneralSecurityException, IOException {     Certificate[] caCert = CertParsingUtils.readCertificates(Collections.singletonList(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca.crt"))).     baseTrustManager = CertParsingUtils.trustManager(caCert).     certificates = new HashMap<>().     Files.walkFileTree(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/self-signed"), new SimpleFileVisitor<Path>() {          @Override         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {             try {                 String fileName = file.getFileName().toString().                 if (fileName.endsWith(".crt")) {                     certificates.put(fileName.replace(".crt", "/self"), CertParsingUtils.readX509Certificates(Collections.singletonList(file))).                 }                 return FileVisitResult.CONTINUE.             } catch (CertificateException e) {                 throw new IOException("Failed to read X.509 Certificate from: " + file.toAbsolutePath().toString()).             }         }     }).     Files.walkFileTree(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/nodes/ca-signed"), new SimpleFileVisitor<Path>() {          @Override         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {             try {                 String fileName = file.getFileName().toString().                 if (fileName.endsWith(".crt")) {                     certificates.put(fileName.replace(".crt", "/ca"), CertParsingUtils.readX509Certificates(Collections.singletonList(file))).                 }                 return FileVisitResult.CONTINUE.             } catch (CertificateException e) {                 throw new IOException("Failed to read X.509 Certificate from: " + file.toAbsolutePath().toString()).             }         }     }).     numberOfClusters = scaledRandomIntBetween(2, 8).     numberOfNodes = scaledRandomIntBetween(2, 8). }
false;public;0;10;;public void testTrustsExplicitCertificateName() throws Exception {     final int trustedCluster = randomIntBetween(1, numberOfClusters).     final List<String> trustedNames = new ArrayList<>(numberOfNodes).     for (int node = 1. node <= numberOfNodes. node++) {         trustedNames.add("node" + node + ".cluster" + trustedCluster + ".elasticsearch").     }     final CertificateTrustRestrictions restrictions = new CertificateTrustRestrictions(trustedNames).     final RestrictedTrustManager trustManager = new RestrictedTrustManager(baseTrustManager, restrictions).     assertSingleClusterIsTrusted(trustedCluster, trustManager, trustedNames). }
false;public;0;7;;public void testTrustsWildcardCertificateName() throws Exception {     final int trustedCluster = randomIntBetween(1, numberOfClusters).     final List<String> trustedNames = Collections.singletonList("*.cluster" + trustedCluster + ".elasticsearch").     final CertificateTrustRestrictions restrictions = new CertificateTrustRestrictions(trustedNames).     final RestrictedTrustManager trustManager = new RestrictedTrustManager(baseTrustManager, restrictions).     assertSingleClusterIsTrusted(trustedCluster, trustManager, trustedNames). }
false;public;0;17;;public void testTrustWithRegexCertificateName() throws Exception {     final int trustedNode = randomIntBetween(1, numberOfNodes).     final List<String> trustedNames = Collections.singletonList("/node" + trustedNode + ".cluster[0-9].elasticsearch/").     final CertificateTrustRestrictions restrictions = new CertificateTrustRestrictions(trustedNames).     final RestrictedTrustManager trustManager = new RestrictedTrustManager(baseTrustManager, restrictions).     for (int cluster = 1. cluster <= numberOfClusters. cluster++) {         for (int node = 1. node <= numberOfNodes. node++) {             if (node == trustedNode) {                 assertTrusted(trustManager, "n" + node + ".c1/ca").             } else {                 assertNotTrusted(trustManager, "n" + node + ".c" + cluster + "/ca", trustedNames).             }         }     } }
false;public;0;11;;public void testThatDelegateTrustManagerIsRespected() throws Exception {     final CertificateTrustRestrictions restrictions = new CertificateTrustRestrictions(Collections.singletonList("*.elasticsearch")).     final RestrictedTrustManager trustManager = new RestrictedTrustManager(baseTrustManager, restrictions).     for (String cert : certificates.keySet()) {         if (cert.endsWith("/ca")) {             assertTrusted(trustManager, cert).         } else {             assertNotValid(trustManager, cert, "PKIX path building failed.*").         }     } }
false;private;3;13;;private void assertSingleClusterIsTrusted(int trustedCluster, RestrictedTrustManager trustManager, List<String> trustedNames) throws Exception {     for (int cluster = 1. cluster <= numberOfClusters. cluster++) {         for (int node = 1. node <= numberOfNodes. node++) {             final String certAlias = "n" + node + ".c" + cluster + "/ca".             if (cluster == trustedCluster) {                 assertTrusted(trustManager, certAlias).             } else {                 assertNotTrusted(trustManager, certAlias, trustedNames).             }         }     } }
false;private;2;9;;private void assertTrusted(RestrictedTrustManager trustManager, String certAlias) throws Exception {     final X509Certificate[] chain = Objects.requireNonNull(this.certificates.get(certAlias)).     try {         trustManager.checkClientTrusted(chain, "ignore").     // pass     } catch (CertificateException e) {         Assert.fail("Certificate " + describe(chain) + " is not trusted - " + e).     } }
false;private;3;4;;private void assertNotTrusted(RestrictedTrustManager trustManager, String certAlias, List<String> trustedNames) throws Exception {     final String expectedError = ".* does not match the trusted names \\[.*" + Pattern.quote(trustedNames.get(0)) + ".*".     assertNotValid(trustManager, certAlias, expectedError). }
false;public;1;4;;@Override public void describeTo(Description description) {     description.appendText("matches pattern ").appendText(expectedError). }
false;protected;1;4;;@Override protected boolean matchesSafely(String item) {     return item.matches(expectedError). }
false;private;3;19;;private void assertNotValid(RestrictedTrustManager trustManager, String certAlias, String expectedError) throws Exception {     final X509Certificate[] chain = Objects.requireNonNull(this.certificates.get(certAlias)).     try {         trustManager.checkClientTrusted(chain, "ignore").         Assert.fail("Certificate " + describe(chain) + " is trusted but shouldn't be").     } catch (CertificateException e) {         assertThat(e.getMessage(), new TypeSafeMatcher<String>() {              @Override             public void describeTo(Description description) {                 description.appendText("matches pattern ").appendText(expectedError).             }              @Override             protected boolean matchesSafely(String item) {                 return item.matches(expectedError).             }         }).     } }
false;private;1;3;;private String describe(X509Certificate[] cert) {     return Arrays.stream(cert).map(c -> c.getSubjectDN().getName()).collect(Collectors.joining(", ")). }
