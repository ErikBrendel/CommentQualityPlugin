commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static RollupJobConfig randomRollupJobConfig(final Random random) {     return randomRollupJobConfig(random, randomAsciiAlphanumOfLengthBetween(random, 5, 20)). }
false;public,static;2;3;;public static RollupJobConfig randomRollupJobConfig(final Random random, final String id) {     return randomRollupJobConfig(random, id, randomAsciiAlphanumOfLengthBetween(random, 5, 20)). }
false;public,static;3;3;;public static RollupJobConfig randomRollupJobConfig(final Random random, final String id, final String indexPattern) {     return randomRollupJobConfig(random, id, indexPattern, "rollup_" + indexPattern). }
false;public,static;4;11;;public static RollupJobConfig randomRollupJobConfig(final Random random, final String id, final String indexPattern, final String rollupIndex) {     final String cron = randomCron().     final int pageSize = randomIntBetween(random, 1, 10).     final TimeValue timeout = random.nextBoolean() ? null : randomTimeout(random).     final GroupConfig groups = randomGroupConfig(random).     final List<MetricConfig> metrics = random.nextBoolean() ? null : randomMetricsConfigs(random).     return new RollupJobConfig(id, indexPattern, rollupIndex, cron, pageSize, groups, metrics, timeout). }
false;public,static;1;6;;public static GroupConfig randomGroupConfig(final Random random) {     DateHistogramGroupConfig dateHistogram = randomDateHistogramGroupConfig(random).     HistogramGroupConfig histogram = random.nextBoolean() ? randomHistogramGroupConfig(random) : null.     TermsGroupConfig terms = random.nextBoolean() ? randomTermsGroupConfig(random) : null.     return new GroupConfig(dateHistogram, histogram, terms). }
false;public,static;1;7;;public static DateHistogramGroupConfig randomDateHistogramGroupConfig(final Random random) {     final String field = randomField(random).     final DateHistogramInterval interval = randomInterval().     final DateHistogramInterval delay = random.nextBoolean() ? randomInterval() : null.     String timezone = random.nextBoolean() ? randomZone().getId() : null.     return new DateHistogramGroupConfig(field, interval, delay, timezone). }
false;public,static;0;5;;public static List<String> getFields() {     return IntStream.range(0, ESTestCase.randomIntBetween(1, 10)).mapToObj(n -> ESTestCase.randomAlphaOfLengthBetween(5, 10)).collect(Collectors.toList()). }
false;public,static;0;9;;public static String randomCron() {     return // second     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(0, 59))) + " " + // minute     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(0, 59))) + " " + // hour     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(0, 23))) + " " + // day of month     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(1, 31))) + " " + // month     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(1, 12))) + // day of week     " ?" + " " + // year     (ESTestCase.randomBoolean() ? "*" : String.valueOf(ESTestCase.randomIntBetween(1970, 2199))). }
false;public,static;1;3;;public static HistogramGroupConfig randomHistogramGroupConfig(final Random random) {     return new HistogramGroupConfig(randomInterval(random), randomFields(random)). }
false;public,static;1;8;;public static List<MetricConfig> randomMetricsConfigs(final Random random) {     final int numMetrics = randomIntBetween(random, 1, 10).     final List<MetricConfig> metrics = new ArrayList<>(numMetrics).     for (int i = 0. i < numMetrics. i++) {         metrics.add(randomMetricConfig(random)).     }     return Collections.unmodifiableList(metrics). }
false;public,static;1;23;;public static MetricConfig randomMetricConfig(final Random random) {     // large names so we don't accidentally collide     final String field = randomAsciiAlphanumOfLengthBetween(random, 15, 25).     final List<String> metrics = new ArrayList<>().     if (random.nextBoolean()) {         metrics.add("min").     }     if (random.nextBoolean()) {         metrics.add("max").     }     if (random.nextBoolean()) {         metrics.add("sum").     }     if (random.nextBoolean()) {         metrics.add("avg").     }     if (random.nextBoolean()) {         metrics.add("value_count").     }     if (metrics.size() == 0) {         metrics.add("min").     }     return new MetricConfig(field, Collections.unmodifiableList(metrics)). }
false;public,static;1;3;;public static TermsGroupConfig randomTermsGroupConfig(final Random random) {     return new TermsGroupConfig(randomFields(random)). }
false;private,static;1;8;;private static String[] randomFields(final Random random) {     final int numFields = randomIntBetween(random, 1, 10).     final String[] fields = new String[numFields].     for (int i = 0. i < numFields. i++) {         fields[i] = randomField(random).     }     return fields. }
false;public,static;1;3;;public static String randomField(final Random random) {     return randomAsciiAlphanumOfLengthBetween(random, 5, 10). }
false;private,static;0;3;;private static String randomPositiveTimeValue() {     return ESTestCase.randomIntBetween(1, 1000) + ESTestCase.randomFrom(TIME_SUFFIXES). }
false;public,static;0;3;;public static DateHistogramInterval randomInterval() {     return new DateHistogramInterval(randomPositiveTimeValue()). }
false;private,static;1;3;;private static long randomInterval(final Random random) {     return RandomNumbers.randomLongBetween(random, 1L, Long.MAX_VALUE). }
false;public,static;1;4;;public static TimeValue randomTimeout(final Random random) {     return new TimeValue(randomIntBetween(random, 0, 60), randomFrom(random, Arrays.asList(TimeUnit.MILLISECONDS, TimeUnit.SECONDS, TimeUnit.MINUTES))). }
