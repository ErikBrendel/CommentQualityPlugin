commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Request createTestInstance() {     return new Request(DatafeedParamsTests.createDatafeedParams()). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;protected;0;4;;@Override protected Request createBlankInstance() {     return new Request(). }
false;protected;1;4;;@Override protected Request doParseInstance(XContentParser parser) {     return Request.parseRequest(null, parser). }
false;public;0;14;;public void testParseDateOrThrow() {     assertEquals(0L, StartDatafeedAction.DatafeedParams.parseDateOrThrow("0", StartDatafeedAction.START_TIME, () -> System.currentTimeMillis())).     assertEquals(0L, StartDatafeedAction.DatafeedParams.parseDateOrThrow("1970-01-01T00:00:00Z", StartDatafeedAction.START_TIME, () -> System.currentTimeMillis())).     assertThat(StartDatafeedAction.DatafeedParams.parseDateOrThrow("now", StartDatafeedAction.START_TIME, () -> 123456789L), equalTo(123456789L)).     Exception e = expectThrows(ElasticsearchParseException.class, () -> StartDatafeedAction.DatafeedParams.parseDateOrThrow("not-a-date", StartDatafeedAction.START_TIME, () -> System.currentTimeMillis())).     assertEquals("Query param [start] with value [not-a-date] cannot be parsed as a date or converted to a number (epoch).", e.getMessage()). }
