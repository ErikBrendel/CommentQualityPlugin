commented;modifiers;parameterAmount;loc;comment;code
false;static;0;3;;static SetPriorityAction randomInstance() {     return new SetPriorityAction(randomIntBetween(2, Integer.MAX_VALUE - 1)). }
false;protected;1;4;;@Override protected SetPriorityAction doParseInstance(XContentParser parser) {     return SetPriorityAction.parse(parser). }
false;protected;0;4;;@Override protected SetPriorityAction createTestInstance() {     return new SetPriorityAction(priority). }
false;protected;0;4;;@Override protected Reader<SetPriorityAction> instanceReader() {     return SetPriorityAction::new. }
false;public;0;4;;public void testNonPositivePriority() {     Exception e = expectThrows(Exception.class, () -> new SetPriorityAction(randomIntBetween(-100, -1))).     assertThat(e.getMessage(), equalTo("[priority] must be 0 or greater")). }
false;public;0;4;;public void testNullPriorityAllowed() {     SetPriorityAction nullPriority = new SetPriorityAction((Integer) null).     assertNull(nullPriority.recoveryPriority). }
false;public;0;15;;public void testToSteps() {     SetPriorityAction action = createTestInstance().     String phase = randomAlphaOfLengthBetween(1, 10).     StepKey nextStepKey = new StepKey(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10)).     List<Step> steps = action.toSteps(null, phase, nextStepKey).     assertNotNull(steps).     assertEquals(1, steps.size()).     StepKey expectedFirstStepKey = new StepKey(phase, SetPriorityAction.NAME, SetPriorityAction.NAME).     UpdateSettingsStep firstStep = (UpdateSettingsStep) steps.get(0).     assertThat(firstStep.getKey(), equalTo(expectedFirstStepKey)).     assertThat(firstStep.getNextStepKey(), equalTo(nextStepKey)).     assertThat(firstStep.getSettings().size(), equalTo(1)).     assertEquals(priority, (long) IndexMetaData.INDEX_PRIORITY_SETTING.get(firstStep.getSettings())). }
false;public;0;16;;public void testNullPriorityStep() {     SetPriorityAction action = new SetPriorityAction((Integer) null).     String phase = randomAlphaOfLengthBetween(1, 10).     StepKey nextStepKey = new StepKey(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10)).     List<Step> steps = action.toSteps(null, phase, nextStepKey).     assertNotNull(steps).     assertEquals(1, steps.size()).     StepKey expectedFirstStepKey = new StepKey(phase, SetPriorityAction.NAME, SetPriorityAction.NAME).     UpdateSettingsStep firstStep = (UpdateSettingsStep) steps.get(0).     assertThat(firstStep.getKey(), equalTo(expectedFirstStepKey)).     assertThat(firstStep.getNextStepKey(), equalTo(nextStepKey)).     assertThat(firstStep.getSettings().size(), equalTo(1)).     assertThat(IndexMetaData.INDEX_PRIORITY_SETTING.get(firstStep.getSettings()), equalTo(IndexMetaData.INDEX_PRIORITY_SETTING.getDefault(firstStep.getSettings()))). }
false;public;0;3;;public void testEqualsAndHashCode() {     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createTestInstance(), this::copy, this::notCopy). }
false;;1;3;;SetPriorityAction copy(SetPriorityAction setPriorityAction) {     return new SetPriorityAction(setPriorityAction.recoveryPriority). }
false;;1;3;;SetPriorityAction notCopy(SetPriorityAction setPriorityAction) {     return new SetPriorityAction(setPriorityAction.recoveryPriority + 1). }
