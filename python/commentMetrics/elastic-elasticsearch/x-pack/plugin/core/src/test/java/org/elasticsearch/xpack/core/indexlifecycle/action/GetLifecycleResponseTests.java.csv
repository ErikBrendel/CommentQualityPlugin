commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected Response createTestInstance() {     String randomPrefix = randomAlphaOfLength(5).     List<LifecyclePolicyResponseItem> responseItems = new ArrayList<>().     for (int i = 0. i < randomIntBetween(0, 2). i++) {         responseItems.add(new LifecyclePolicyResponseItem(randomTestLifecyclePolicy(randomPrefix + i), randomNonNegativeLong(), randomAlphaOfLength(8))).     }     return new Response(responseItems). }
false;protected;0;4;;@Override protected Response createBlankInstance() {     return new Response(). }
false;protected;0;5;;protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Arrays.asList(new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new), new NamedWriteableRegistry.Entry(LifecycleType.class, TestLifecycleType.TYPE, in -> TestLifecycleType.INSTANCE))). }
false;protected;1;16;;@Override protected Response mutateInstance(Response response) {     List<LifecyclePolicyResponseItem> responseItems = new ArrayList<>(response.getPolicies()).     if (responseItems.size() > 0) {         if (randomBoolean()) {             responseItems.add(new LifecyclePolicyResponseItem(randomTestLifecyclePolicy(randomAlphaOfLength(5)), randomNonNegativeLong(), randomAlphaOfLength(4))).         } else {             responseItems.remove(0).         }     } else {         responseItems.add(new LifecyclePolicyResponseItem(randomTestLifecyclePolicy(randomAlphaOfLength(2)), randomNonNegativeLong(), randomAlphaOfLength(4))).     }     return new Response(responseItems). }
