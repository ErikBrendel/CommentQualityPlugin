# id;timestamp;commentText;codeText;commentWords;codeWords
MockWebServer -> @Override     public void close();1524684173;Closes down the webserver. Also tries to stop all the currently sleeping requests first by counting down their respective_latches.;@Override_    public void close() {_        logger.debug("[{}:{}] Counting down all latches before terminating executor", getHostName(), getPort())__        latches.forEach(CountDownLatch::countDown)___        if (server.getExecutor() instanceof ExecutorService) {_            try {_                terminate((ExecutorService) server.getExecutor())__            } catch (InterruptedException e) {_            }_        }_        server.stop(0)__    };closes,down,the,webserver,also,tries,to,stop,all,the,currently,sleeping,requests,first,by,counting,down,their,respective,latches;override,public,void,close,logger,debug,counting,down,all,latches,before,terminating,executor,get,host,name,get,port,latches,for,each,count,down,latch,count,down,if,server,get,executor,instanceof,executor,service,try,terminate,executor,service,server,get,executor,catch,interrupted,exception,e,server,stop,0
MockWebServer -> @Override     public void close();1539615817;Closes down the webserver. Also tries to stop all the currently sleeping requests first by counting down their respective_latches.;@Override_    public void close() {_        logger.debug("[{}:{}] Counting down all latches before terminating executor", getHostName(), getPort())__        latches.forEach(CountDownLatch::countDown)___        if (server.getExecutor() instanceof ExecutorService) {_            try {_                terminate((ExecutorService) server.getExecutor())__            } catch (InterruptedException e) {_            }_        }_        server.stop(0)__    };closes,down,the,webserver,also,tries,to,stop,all,the,currently,sleeping,requests,first,by,counting,down,their,respective,latches;override,public,void,close,logger,debug,counting,down,all,latches,before,terminating,executor,get,host,name,get,port,latches,for,each,count,down,latch,count,down,if,server,get,executor,instanceof,executor,service,try,terminate,executor,service,server,get,executor,catch,interrupted,exception,e,server,stop,0
MockWebServer -> @Override     public void close();1539815831;Closes down the webserver. Also tries to stop all the currently sleeping requests first by counting down their respective_latches.;@Override_    public void close() {_        logger.debug("[{}:{}] Counting down all latches before terminating executor", getHostName(), getPort())__        latches.forEach(CountDownLatch::countDown)___        if (server.getExecutor() instanceof ExecutorService) {_            terminate((ExecutorService) server.getExecutor())__        }_        server.stop(0)__    };closes,down,the,webserver,also,tries,to,stop,all,the,currently,sleeping,requests,first,by,counting,down,their,respective,latches;override,public,void,close,logger,debug,counting,down,all,latches,before,terminating,executor,get,host,name,get,port,latches,for,each,count,down,latch,count,down,if,server,get,executor,instanceof,executor,service,terminate,executor,service,server,get,executor,server,stop,0
MockWebServer -> public void enqueue(MockResponse response);1524684173;Adds a response to the response queue that is used when a request comes in_Note: Every response is only processed once_@param response The created mock response;public void enqueue(MockResponse response) {_        if (logger.isTraceEnabled()) {_            logger.trace("[{}:{}] Enqueueing response [{}], status [{}] body [{}]", getHostName(), getPort(), responses.size(),_                    response.getStatusCode(), getStartOfBody(response))__        }_        responses.add(response)__    };adds,a,response,to,the,response,queue,that,is,used,when,a,request,comes,in,note,every,response,is,only,processed,once,param,response,the,created,mock,response;public,void,enqueue,mock,response,response,if,logger,is,trace,enabled,logger,trace,enqueueing,response,status,body,get,host,name,get,port,responses,size,response,get,status,code,get,start,of,body,response,responses,add,response
MockWebServer -> public void enqueue(MockResponse response);1539615817;Adds a response to the response queue that is used when a request comes in_Note: Every response is only processed once_@param response The created mock response;public void enqueue(MockResponse response) {_        if (logger.isTraceEnabled()) {_            logger.trace("[{}:{}] Enqueueing response [{}], status [{}] body [{}]", getHostName(), getPort(), responses.size(),_                    response.getStatusCode(), getStartOfBody(response))__        }_        responses.add(response)__    };adds,a,response,to,the,response,queue,that,is,used,when,a,request,comes,in,note,every,response,is,only,processed,once,param,response,the,created,mock,response;public,void,enqueue,mock,response,response,if,logger,is,trace,enabled,logger,trace,enqueueing,response,status,body,get,host,name,get,port,responses,size,response,get,status,code,get,start,of,body,response,responses,add,response
MockWebServer -> public void enqueue(MockResponse response);1539815831;Adds a response to the response queue that is used when a request comes in_Note: Every response is only processed once_@param response The created mock response;public void enqueue(MockResponse response) {_        if (logger.isTraceEnabled()) {_            logger.trace("[{}:{}] Enqueueing response [{}], status [{}] body [{}]", getHostName(), getPort(), responses.size(),_                    response.getStatusCode(), getStartOfBody(response))__        }_        responses.add(response)__    };adds,a,response,to,the,response,queue,that,is,used,when,a,request,comes,in,note,every,response,is,only,processed,once,param,response,the,created,mock,response;public,void,enqueue,mock,response,response,if,logger,is,trace,enabled,logger,trace,enqueueing,response,status,body,get,host,name,get,port,responses,size,response,get,status,code,get,start,of,body,response,responses,add,response
MockWebServer -> public List<MockRequest> requests();1524684173;@return The requests that have been made to this mock web server;public List<MockRequest> requests() {_        return new ArrayList<>(requests)__    };return,the,requests,that,have,been,made,to,this,mock,web,server;public,list,mock,request,requests,return,new,array,list,requests
MockWebServer -> public List<MockRequest> requests();1539615817;@return The requests that have been made to this mock web server;public List<MockRequest> requests() {_        return new ArrayList<>(requests)__    };return,the,requests,that,have,been,made,to,this,mock,web,server;public,list,mock,request,requests,return,new,array,list,requests
MockWebServer -> public List<MockRequest> requests();1539815831;@return The requests that have been made to this mock web server;public List<MockRequest> requests() {_        return new ArrayList<>(requests)__    };return,the,requests,that,have,been,made,to,this,mock,web,server;public,list,mock,request,requests,return,new,array,list,requests
MockWebServer -> public MockRequest takeRequest();1524684173;Removes the first request in the list of requests and returns it to the caller._This can be used as a queue if you are sure the order of your requests.;public MockRequest takeRequest() {_        return requests.poll()__    };removes,the,first,request,in,the,list,of,requests,and,returns,it,to,the,caller,this,can,be,used,as,a,queue,if,you,are,sure,the,order,of,your,requests;public,mock,request,take,request,return,requests,poll
MockWebServer -> public MockRequest takeRequest();1539615817;Removes the first request in the list of requests and returns it to the caller._This can be used as a queue if you are sure the order of your requests.;public MockRequest takeRequest() {_        return requests.poll()__    };removes,the,first,request,in,the,list,of,requests,and,returns,it,to,the,caller,this,can,be,used,as,a,queue,if,you,are,sure,the,order,of,your,requests;public,mock,request,take,request,return,requests,poll
MockWebServer -> public MockRequest takeRequest();1539815831;Removes the first request in the list of requests and returns it to the caller._This can be used as a queue if you are sure the order of your requests.;public MockRequest takeRequest() {_        return requests.poll()__    };removes,the,first,request,in,the,list,of,requests,and,returns,it,to,the,caller,this,can,be,used,as,a,queue,if,you,are,sure,the,order,of,your,requests;public,mock,request,take,request,return,requests,poll
MockWebServer -> public MockWebServer(SSLContext sslContext, boolean needClientAuth);1524684173;Instantiates a webserver with https_@param sslContext The SSL context to be used for encryption_@param needClientAuth Should clientAuth be used, which requires a client side certificate;public MockWebServer(SSLContext sslContext, boolean needClientAuth) {_        this.needClientAuth = needClientAuth__        this.logger = ESLoggerFactory.getLogger(this.getClass())__        this.sslContext = sslContext__    };instantiates,a,webserver,with,https,param,ssl,context,the,ssl,context,to,be,used,for,encryption,param,need,client,auth,should,client,auth,be,used,which,requires,a,client,side,certificate;public,mock,web,server,sslcontext,ssl,context,boolean,need,client,auth,this,need,client,auth,need,client,auth,this,logger,eslogger,factory,get,logger,this,get,class,this,ssl,context,ssl,context
MockWebServer -> public MockWebServer(SSLContext sslContext, boolean needClientAuth);1539615817;Instantiates a webserver with https_@param sslContext The SSL context to be used for encryption_@param needClientAuth Should clientAuth be used, which requires a client side certificate;public MockWebServer(SSLContext sslContext, boolean needClientAuth) {_        this.needClientAuth = needClientAuth__        this.logger = LogManager.getLogger(this.getClass())__        this.sslContext = sslContext__    };instantiates,a,webserver,with,https,param,ssl,context,the,ssl,context,to,be,used,for,encryption,param,need,client,auth,should,client,auth,be,used,which,requires,a,client,side,certificate;public,mock,web,server,sslcontext,ssl,context,boolean,need,client,auth,this,need,client,auth,need,client,auth,this,logger,log,manager,get,logger,this,get,class,this,ssl,context,ssl,context
MockWebServer -> public MockWebServer(SSLContext sslContext, boolean needClientAuth);1539815831;Instantiates a webserver with https_@param sslContext The SSL context to be used for encryption_@param needClientAuth Should clientAuth be used, which requires a client side certificate;public MockWebServer(SSLContext sslContext, boolean needClientAuth) {_        this.needClientAuth = needClientAuth__        this.logger = LogManager.getLogger(this.getClass())__        this.sslContext = sslContext__    };instantiates,a,webserver,with,https,param,ssl,context,the,ssl,context,to,be,used,for,encryption,param,need,client,auth,should,client,auth,be,used,which,requires,a,client,side,certificate;public,mock,web,server,sslcontext,ssl,context,boolean,need,client,auth,this,need,client,auth,need,client,auth,this,logger,log,manager,get,logger,this,get,class,this,ssl,context,ssl,context
MockWebServer -> public boolean hasMoreRequests();1524684173;A utility method to peek into the requests and find out if #MockWebServer.takeRequests will not throw an out of bound exception_@return true if more requests are available, false otherwise;public boolean hasMoreRequests() {_        return requests.isEmpty() == false__    };a,utility,method,to,peek,into,the,requests,and,find,out,if,mock,web,server,take,requests,will,not,throw,an,out,of,bound,exception,return,true,if,more,requests,are,available,false,otherwise;public,boolean,has,more,requests,return,requests,is,empty,false
MockWebServer -> public boolean hasMoreRequests();1539615817;A utility method to peek into the requests and find out if #MockWebServer.takeRequests will not throw an out of bound exception_@return true if more requests are available, false otherwise;public boolean hasMoreRequests() {_        return requests.isEmpty() == false__    };a,utility,method,to,peek,into,the,requests,and,find,out,if,mock,web,server,take,requests,will,not,throw,an,out,of,bound,exception,return,true,if,more,requests,are,available,false,otherwise;public,boolean,has,more,requests,return,requests,is,empty,false
MockWebServer -> public boolean hasMoreRequests();1539815831;A utility method to peek into the requests and find out if #MockWebServer.takeRequests will not throw an out of bound exception_@return true if more requests are available, false otherwise;public boolean hasMoreRequests() {_        return requests.isEmpty() == false__    };a,utility,method,to,peek,into,the,requests,and,find,out,if,mock,web,server,take,requests,will,not,throw,an,out,of,bound,exception,return,true,if,more,requests,are,available,false,otherwise;public,boolean,has,more,requests,return,requests,is,empty,false
MockWebServer -> public String getHostName();1524684173;@return The hostname the server is bound to.;public String getHostName() {_        return hostname__    };return,the,hostname,the,server,is,bound,to;public,string,get,host,name,return,hostname
MockWebServer -> public String getHostName();1539615817;@return The hostname the server is bound to.;public String getHostName() {_        return hostname__    };return,the,hostname,the,server,is,bound,to;public,string,get,host,name,return,hostname
MockWebServer -> public String getHostName();1539815831;@return The hostname the server is bound to.;public String getHostName() {_        return hostname__    };return,the,hostname,the,server,is,bound,to;public,string,get,host,name,return,hostname
MockWebServer -> public MockWebServer();1524684173;Instantiates a webserver without https;public MockWebServer() {_        this(null, false)__    };instantiates,a,webserver,without,https;public,mock,web,server,this,null,false
MockWebServer -> public MockWebServer();1539615817;Instantiates a webserver without https;public MockWebServer() {_        this(null, false)__    };instantiates,a,webserver,without,https;public,mock,web,server,this,null,false
MockWebServer -> public MockWebServer();1539815831;Instantiates a webserver without https;public MockWebServer() {_        this(null, false)__    };instantiates,a,webserver,without,https;public,mock,web,server,this,null,false
MockWebServer -> public void start() throws IOException;1524684173;Starts the webserver and binds it to an arbitrary ephemeral port_The webserver will be able to serve requests once this method returns__@throws IOException in case of a binding or other I/O errors;public void start() throws IOException {_        InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0)__        if (sslContext != null) {_            HttpsServer httpsServer = MockHttpServer.createHttps(address, 0)__            httpsServer.setHttpsConfigurator(new CustomHttpsConfigurator(sslContext, needClientAuth))__            server = httpsServer__        } else {_            server = MockHttpServer.createHttp(address, 0)__        }__        server.start()__        _        _        this.hostname = server.getAddress().getHostString()__        this.port = server.getAddress().getPort()__        server.createContext("/", s -> {_            try {_                MockResponse response = responses.poll()__                MockRequest request = createRequest(s)__                requests.add(request)___                if (logger.isDebugEnabled()) {_                    logger.debug("[{}:{}] incoming HTTP request [{} {}], returning status [{}] body [{}]", getHostName(), getPort(),_                            s.getRequestMethod(), s.getRequestURI(), response.getStatusCode(), getStartOfBody(response))__                }__                sleepIfNeeded(response.getBeforeReplyDelay())___                s.getResponseHeaders().putAll(response.getHeaders().headers)___                if (Strings.isEmpty(response.getBody())) {_                    s.sendResponseHeaders(response.getStatusCode(), 0)__                } else {_                    byte[] responseAsBytes = response.getBody().getBytes(StandardCharsets.UTF_8)__                    s.sendResponseHeaders(response.getStatusCode(), responseAsBytes.length)__                    sleepIfNeeded(response.getBodyDelay())__                    if ("HEAD".equals(request.getMethod()) == false) {_                        try (OutputStream responseBody = s.getResponseBody()) {_                            responseBody.write(responseAsBytes)__                        }_                    }_                }_            } catch (Exception e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to respond to request [{} {}]",_                        s.getRequestMethod(), s.getRequestURI()), e)__            } finally {_                s.close()__            }__        })__        logger.info("bound HTTP mock server to [{}:{}]", getHostName(), getPort())__    };starts,the,webserver,and,binds,it,to,an,arbitrary,ephemeral,port,the,webserver,will,be,able,to,serve,requests,once,this,method,returns,throws,ioexception,in,case,of,a,binding,or,other,i,o,errors;public,void,start,throws,ioexception,inet,socket,address,address,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,if,ssl,context,null,https,server,https,server,mock,http,server,create,https,address,0,https,server,set,https,configurator,new,custom,https,configurator,ssl,context,need,client,auth,server,https,server,else,server,mock,http,server,create,http,address,0,server,start,this,hostname,server,get,address,get,host,string,this,port,server,get,address,get,port,server,create,context,s,try,mock,response,response,responses,poll,mock,request,request,create,request,s,requests,add,request,if,logger,is,debug,enabled,logger,debug,incoming,http,request,returning,status,body,get,host,name,get,port,s,get,request,method,s,get,request,uri,response,get,status,code,get,start,of,body,response,sleep,if,needed,response,get,before,reply,delay,s,get,response,headers,put,all,response,get,headers,headers,if,strings,is,empty,response,get,body,s,send,response,headers,response,get,status,code,0,else,byte,response,as,bytes,response,get,body,get,bytes,standard,charsets,s,send,response,headers,response,get,status,code,response,as,bytes,length,sleep,if,needed,response,get,body,delay,if,head,equals,request,get,method,false,try,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,respond,to,request,s,get,request,method,s,get,request,uri,e,finally,s,close,logger,info,bound,http,mock,server,to,get,host,name,get,port
MockWebServer -> public void start() throws IOException;1539615817;Starts the webserver and binds it to an arbitrary ephemeral port_The webserver will be able to serve requests once this method returns__@throws IOException in case of a binding or other I/O errors;public void start() throws IOException {_        InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0)__        if (sslContext != null) {_            HttpsServer httpsServer = MockHttpServer.createHttps(address, 0)__            httpsServer.setHttpsConfigurator(new CustomHttpsConfigurator(sslContext, needClientAuth))__            server = httpsServer__        } else {_            server = MockHttpServer.createHttp(address, 0)__        }__        server.start()__        _        _        this.hostname = server.getAddress().getHostString()__        this.port = server.getAddress().getPort()__        server.createContext("/", s -> {_            try {_                MockResponse response = responses.poll()__                MockRequest request = createRequest(s)__                requests.add(request)___                if (logger.isDebugEnabled()) {_                    logger.debug("[{}:{}] incoming HTTP request [{} {}], returning status [{}] body [{}]", getHostName(), getPort(),_                            s.getRequestMethod(), s.getRequestURI(), response.getStatusCode(), getStartOfBody(response))__                }__                sleepIfNeeded(response.getBeforeReplyDelay())___                s.getResponseHeaders().putAll(response.getHeaders().headers)___                if (Strings.isEmpty(response.getBody())) {_                    s.sendResponseHeaders(response.getStatusCode(), 0)__                } else {_                    byte[] responseAsBytes = response.getBody().getBytes(StandardCharsets.UTF_8)__                    s.sendResponseHeaders(response.getStatusCode(), responseAsBytes.length)__                    sleepIfNeeded(response.getBodyDelay())__                    if ("HEAD".equals(request.getMethod()) == false) {_                        try (OutputStream responseBody = s.getResponseBody()) {_                            responseBody.write(responseAsBytes)__                        }_                    }_                }_            } catch (Exception e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to respond to request [{} {}]",_                        s.getRequestMethod(), s.getRequestURI()), e)__            } finally {_                s.close()__            }__        })__        logger.info("bound HTTP mock server to [{}:{}]", getHostName(), getPort())__    };starts,the,webserver,and,binds,it,to,an,arbitrary,ephemeral,port,the,webserver,will,be,able,to,serve,requests,once,this,method,returns,throws,ioexception,in,case,of,a,binding,or,other,i,o,errors;public,void,start,throws,ioexception,inet,socket,address,address,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,if,ssl,context,null,https,server,https,server,mock,http,server,create,https,address,0,https,server,set,https,configurator,new,custom,https,configurator,ssl,context,need,client,auth,server,https,server,else,server,mock,http,server,create,http,address,0,server,start,this,hostname,server,get,address,get,host,string,this,port,server,get,address,get,port,server,create,context,s,try,mock,response,response,responses,poll,mock,request,request,create,request,s,requests,add,request,if,logger,is,debug,enabled,logger,debug,incoming,http,request,returning,status,body,get,host,name,get,port,s,get,request,method,s,get,request,uri,response,get,status,code,get,start,of,body,response,sleep,if,needed,response,get,before,reply,delay,s,get,response,headers,put,all,response,get,headers,headers,if,strings,is,empty,response,get,body,s,send,response,headers,response,get,status,code,0,else,byte,response,as,bytes,response,get,body,get,bytes,standard,charsets,s,send,response,headers,response,get,status,code,response,as,bytes,length,sleep,if,needed,response,get,body,delay,if,head,equals,request,get,method,false,try,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,respond,to,request,s,get,request,method,s,get,request,uri,e,finally,s,close,logger,info,bound,http,mock,server,to,get,host,name,get,port
MockWebServer -> public void start() throws IOException;1539815831;Starts the webserver and binds it to an arbitrary ephemeral port_The webserver will be able to serve requests once this method returns__@throws IOException in case of a binding or other I/O errors;public void start() throws IOException {_        InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress().getHostAddress(), 0)__        if (sslContext != null) {_            HttpsServer httpsServer = MockHttpServer.createHttps(address, 0)__            httpsServer.setHttpsConfigurator(new CustomHttpsConfigurator(sslContext, needClientAuth))__            server = httpsServer__        } else {_            server = MockHttpServer.createHttp(address, 0)__        }__        server.start()__        _        _        this.hostname = server.getAddress().getHostString()__        this.port = server.getAddress().getPort()__        server.createContext("/", s -> {_            try {_                MockResponse response = responses.poll()__                MockRequest request = createRequest(s)__                requests.add(request)___                if (logger.isDebugEnabled()) {_                    logger.debug("[{}:{}] incoming HTTP request [{} {}], returning status [{}] body [{}]", getHostName(), getPort(),_                            s.getRequestMethod(), s.getRequestURI(), response.getStatusCode(), getStartOfBody(response))__                }__                sleepIfNeeded(response.getBeforeReplyDelay())___                s.getResponseHeaders().putAll(response.getHeaders().headers)___                if (Strings.isEmpty(response.getBody())) {_                    s.sendResponseHeaders(response.getStatusCode(), 0)__                } else {_                    byte[] responseAsBytes = response.getBody().getBytes(StandardCharsets.UTF_8)__                    s.sendResponseHeaders(response.getStatusCode(), responseAsBytes.length)__                    sleepIfNeeded(response.getBodyDelay())__                    if ("HEAD".equals(request.getMethod()) == false) {_                        try (OutputStream responseBody = s.getResponseBody()) {_                            responseBody.write(responseAsBytes)__                        }_                    }_                }_            } catch (Exception e) {_                logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to respond to request [{} {}]",_                        s.getRequestMethod(), s.getRequestURI()), e)__            } finally {_                s.close()__            }__        })__        logger.info("bound HTTP mock server to [{}:{}]", getHostName(), getPort())__    };starts,the,webserver,and,binds,it,to,an,arbitrary,ephemeral,port,the,webserver,will,be,able,to,serve,requests,once,this,method,returns,throws,ioexception,in,case,of,a,binding,or,other,i,o,errors;public,void,start,throws,ioexception,inet,socket,address,address,new,inet,socket,address,inet,address,get,loopback,address,get,host,address,0,if,ssl,context,null,https,server,https,server,mock,http,server,create,https,address,0,https,server,set,https,configurator,new,custom,https,configurator,ssl,context,need,client,auth,server,https,server,else,server,mock,http,server,create,http,address,0,server,start,this,hostname,server,get,address,get,host,string,this,port,server,get,address,get,port,server,create,context,s,try,mock,response,response,responses,poll,mock,request,request,create,request,s,requests,add,request,if,logger,is,debug,enabled,logger,debug,incoming,http,request,returning,status,body,get,host,name,get,port,s,get,request,method,s,get,request,uri,response,get,status,code,get,start,of,body,response,sleep,if,needed,response,get,before,reply,delay,s,get,response,headers,put,all,response,get,headers,headers,if,strings,is,empty,response,get,body,s,send,response,headers,response,get,status,code,0,else,byte,response,as,bytes,response,get,body,get,bytes,standard,charsets,s,send,response,headers,response,get,status,code,response,as,bytes,length,sleep,if,needed,response,get,body,delay,if,head,equals,request,get,method,false,try,output,stream,response,body,s,get,response,body,response,body,write,response,as,bytes,catch,exception,e,logger,error,supplier,new,parameterized,message,failed,to,respond,to,request,s,get,request,method,s,get,request,uri,e,finally,s,close,logger,info,bound,http,mock,server,to,get,host,name,get,port
MockWebServer -> private String getStartOfBody(MockResponse response);1524684173;Helper method to return the first 20 chars of a request's body_@param response The MockResponse to inspect_@return Returns the first 20 chars or an empty string if the response body is not configured;private String getStartOfBody(MockResponse response) {_        if (Strings.isEmpty(response.getBody())) {_            return ""__        }_        int length = Math.min(20, response.getBody().length())__        return response.getBody().substring(0, length).replaceAll("\n", "")__    };helper,method,to,return,the,first,20,chars,of,a,request,s,body,param,response,the,mock,response,to,inspect,return,returns,the,first,20,chars,or,an,empty,string,if,the,response,body,is,not,configured;private,string,get,start,of,body,mock,response,response,if,strings,is,empty,response,get,body,return,int,length,math,min,20,response,get,body,length,return,response,get,body,substring,0,length,replace,all,n
MockWebServer -> private String getStartOfBody(MockResponse response);1539615817;Helper method to return the first 20 chars of a request's body_@param response The MockResponse to inspect_@return Returns the first 20 chars or an empty string if the response body is not configured;private String getStartOfBody(MockResponse response) {_        if (Strings.isEmpty(response.getBody())) {_            return ""__        }_        int length = Math.min(20, response.getBody().length())__        return response.getBody().substring(0, length).replaceAll("\n", "")__    };helper,method,to,return,the,first,20,chars,of,a,request,s,body,param,response,the,mock,response,to,inspect,return,returns,the,first,20,chars,or,an,empty,string,if,the,response,body,is,not,configured;private,string,get,start,of,body,mock,response,response,if,strings,is,empty,response,get,body,return,int,length,math,min,20,response,get,body,length,return,response,get,body,substring,0,length,replace,all,n
MockWebServer -> private String getStartOfBody(MockResponse response);1539815831;Helper method to return the first 20 chars of a request's body_@param response The MockResponse to inspect_@return Returns the first 20 chars or an empty string if the response body is not configured;private String getStartOfBody(MockResponse response) {_        if (Strings.isEmpty(response.getBody())) {_            return ""__        }_        int length = Math.min(20, response.getBody().length())__        return response.getBody().substring(0, length).replaceAll("\n", "")__    };helper,method,to,return,the,first,20,chars,of,a,request,s,body,param,response,the,mock,response,to,inspect,return,returns,the,first,20,chars,or,an,empty,string,if,the,response,body,is,not,configured;private,string,get,start,of,body,mock,response,response,if,strings,is,empty,response,get,body,return,int,length,math,min,20,response,get,body,length,return,response,get,body,substring,0,length,replace,all,n
MockWebServer -> private void sleepIfNeeded(TimeValue timeValue) throws InterruptedException;1524684173;Sleep the specified amount of time, if the time value is not null;private void sleepIfNeeded(TimeValue timeValue) throws InterruptedException {_        if (timeValue == null) {_            return__        }__        CountDownLatch latch = new CountDownLatch(1)__        latches.add(latch)__        try {_            latch.await(timeValue.millis(), TimeUnit.MILLISECONDS)__        } finally {_            latches.remove(latch)__        }_    };sleep,the,specified,amount,of,time,if,the,time,value,is,not,null;private,void,sleep,if,needed,time,value,time,value,throws,interrupted,exception,if,time,value,null,return,count,down,latch,latch,new,count,down,latch,1,latches,add,latch,try,latch,await,time,value,millis,time,unit,milliseconds,finally,latches,remove,latch
MockWebServer -> private void sleepIfNeeded(TimeValue timeValue) throws InterruptedException;1539615817;Sleep the specified amount of time, if the time value is not null;private void sleepIfNeeded(TimeValue timeValue) throws InterruptedException {_        if (timeValue == null) {_            return__        }__        CountDownLatch latch = new CountDownLatch(1)__        latches.add(latch)__        try {_            latch.await(timeValue.millis(), TimeUnit.MILLISECONDS)__        } finally {_            latches.remove(latch)__        }_    };sleep,the,specified,amount,of,time,if,the,time,value,is,not,null;private,void,sleep,if,needed,time,value,time,value,throws,interrupted,exception,if,time,value,null,return,count,down,latch,latch,new,count,down,latch,1,latches,add,latch,try,latch,await,time,value,millis,time,unit,milliseconds,finally,latches,remove,latch
MockWebServer -> private void sleepIfNeeded(TimeValue timeValue) throws InterruptedException;1539815831;Sleep the specified amount of time, if the time value is not null;private void sleepIfNeeded(TimeValue timeValue) throws InterruptedException {_        if (timeValue == null) {_            return__        }__        CountDownLatch latch = new CountDownLatch(1)__        latches.add(latch)__        try {_            latch.await(timeValue.millis(), TimeUnit.MILLISECONDS)__        } finally {_            latches.remove(latch)__        }_    };sleep,the,specified,amount,of,time,if,the,time,value,is,not,null;private,void,sleep,if,needed,time,value,time,value,throws,interrupted,exception,if,time,value,null,return,count,down,latch,latch,new,count,down,latch,1,latches,add,latch,try,latch,await,time,value,millis,time,unit,milliseconds,finally,latches,remove,latch
MockWebServer -> private MockRequest createRequest(HttpExchange exchange) throws IOException;1524684173;Creates a MockRequest from an incoming HTTP request, that can later be checked in your test assertions;private MockRequest createRequest(HttpExchange exchange) throws IOException {_        MockRequest request = new MockRequest(exchange.getRequestMethod(), exchange.getRequestURI(), exchange.getRequestHeaders())__        if (exchange.getRequestBody() != null) {_            String body = Streams.copyToString(new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8))__            if (Strings.isEmpty(body) == false) {_                request.setBody(body)__            }_        }_        return request__    };creates,a,mock,request,from,an,incoming,http,request,that,can,later,be,checked,in,your,test,assertions;private,mock,request,create,request,http,exchange,exchange,throws,ioexception,mock,request,request,new,mock,request,exchange,get,request,method,exchange,get,request,uri,exchange,get,request,headers,if,exchange,get,request,body,null,string,body,streams,copy,to,string,new,input,stream,reader,exchange,get,request,body,standard,charsets,if,strings,is,empty,body,false,request,set,body,body,return,request
MockWebServer -> private MockRequest createRequest(HttpExchange exchange) throws IOException;1539615817;Creates a MockRequest from an incoming HTTP request, that can later be checked in your test assertions;private MockRequest createRequest(HttpExchange exchange) throws IOException {_        MockRequest request = new MockRequest(exchange.getRequestMethod(), exchange.getRequestURI(), exchange.getRequestHeaders())__        if (exchange.getRequestBody() != null) {_            String body = Streams.copyToString(new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8))__            if (Strings.isEmpty(body) == false) {_                request.setBody(body)__            }_        }_        return request__    };creates,a,mock,request,from,an,incoming,http,request,that,can,later,be,checked,in,your,test,assertions;private,mock,request,create,request,http,exchange,exchange,throws,ioexception,mock,request,request,new,mock,request,exchange,get,request,method,exchange,get,request,uri,exchange,get,request,headers,if,exchange,get,request,body,null,string,body,streams,copy,to,string,new,input,stream,reader,exchange,get,request,body,standard,charsets,if,strings,is,empty,body,false,request,set,body,body,return,request
MockWebServer -> private MockRequest createRequest(HttpExchange exchange) throws IOException;1539815831;Creates a MockRequest from an incoming HTTP request, that can later be checked in your test assertions;private MockRequest createRequest(HttpExchange exchange) throws IOException {_        MockRequest request = new MockRequest(exchange.getRequestMethod(), exchange.getRequestURI(), exchange.getRequestHeaders())__        if (exchange.getRequestBody() != null) {_            String body = Streams.copyToString(new InputStreamReader(exchange.getRequestBody(), StandardCharsets.UTF_8))__            if (Strings.isEmpty(body) == false) {_                request.setBody(body)__            }_        }_        return request__    };creates,a,mock,request,from,an,incoming,http,request,that,can,later,be,checked,in,your,test,assertions;private,mock,request,create,request,http,exchange,exchange,throws,ioexception,mock,request,request,new,mock,request,exchange,get,request,method,exchange,get,request,uri,exchange,get,request,headers,if,exchange,get,request,body,null,string,body,streams,copy,to,string,new,input,stream,reader,exchange,get,request,body,standard,charsets,if,strings,is,empty,body,false,request,set,body,body,return,request
MockWebServer -> public int getPort();1524684173;@return The tcp port that the server is bound to;public int getPort() {_        return port__    };return,the,tcp,port,that,the,server,is,bound,to;public,int,get,port,return,port
MockWebServer -> public int getPort();1539615817;@return The tcp port that the server is bound to;public int getPort() {_        return port__    };return,the,tcp,port,that,the,server,is,bound,to;public,int,get,port,return,port
MockWebServer -> public int getPort();1539815831;@return The tcp port that the server is bound to;public int getPort() {_        return port__    };return,the,tcp,port,that,the,server,is,bound,to;public,int,get,port,return,port
