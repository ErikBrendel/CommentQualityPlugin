commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testSerialization() throws IOException {     final GetUserPrivilegesResponse original = randomResponse().     final BytesStreamOutput out = new BytesStreamOutput().     original.writeTo(out).     final GetUserPrivilegesResponse copy = new GetUserPrivilegesResponse().     final NamedWriteableRegistry registry = new NamedWriteableRegistry(new XPackClientPlugin(Settings.EMPTY).getNamedWriteables()).     StreamInput in = new NamedWriteableAwareStreamInput(ByteBufferStreamInput.wrap(BytesReference.toBytes(out.bytes())), registry).     copy.readFrom(in).     assertThat(copy.getClusterPrivileges(), equalTo(original.getClusterPrivileges())).     assertThat(copy.getConditionalClusterPrivileges(), equalTo(original.getConditionalClusterPrivileges())).     assertThat(sorted(copy.getIndexPrivileges()), equalTo(sorted(original.getIndexPrivileges()))).     assertThat(copy.getApplicationPrivileges(), equalTo(original.getApplicationPrivileges())).     assertThat(copy.getRunAs(), equalTo(original.getRunAs())). }
false;public;1;15;;@Override public GetUserPrivilegesResponse mutate(GetUserPrivilegesResponse original) {     final int random = randomIntBetween(1, 0b11111).     final Set<String> cluster = maybeMutate(random, 0, original.getClusterPrivileges(), () -> randomAlphaOfLength(5)).     final Set<ConditionalClusterPrivilege> conditionalCluster = maybeMutate(random, 1, original.getConditionalClusterPrivileges(), () -> new ManageApplicationPrivileges(randomStringSet(3))).     final Set<GetUserPrivilegesResponse.Indices> index = maybeMutate(random, 2, original.getIndexPrivileges(), () -> new GetUserPrivilegesResponse.Indices(randomStringSet(1), randomStringSet(1), emptySet(), emptySet(), randomBoolean())).     final Set<ApplicationResourcePrivileges> application = maybeMutate(random, 3, original.getApplicationPrivileges(), () -> ApplicationResourcePrivileges.builder().resources(generateRandomStringArray(3, 3, false, false)).application(randomAlphaOfLength(5)).privileges(generateRandomStringArray(3, 5, false, false)).build()).     final Set<String> runAs = maybeMutate(random, 4, original.getRunAs(), () -> randomAlphaOfLength(8)).     return new GetUserPrivilegesResponse(cluster, conditionalCluster, index, application, runAs). }
false;private;4;10;;private <T> Set<T> maybeMutate(int random, int index, Set<T> original, Supplier<T> supplier) {     if ((random & (1 << index)) == 0) {         return original.     }     if (original.isEmpty()) {         return Collections.singleton(supplier.get()).     } else {         return emptySet().     } }
false;public;0;40;;public void testEqualsAndHashCode() throws IOException {     final GetUserPrivilegesResponse response = randomResponse().     final EqualsHashCodeTestUtils.CopyFunction<GetUserPrivilegesResponse> copy = original -> new GetUserPrivilegesResponse(original.getClusterPrivileges(), original.getConditionalClusterPrivileges(), original.getIndexPrivileges(), original.getApplicationPrivileges(), original.getRunAs()).     final EqualsHashCodeTestUtils.MutateFunction<GetUserPrivilegesResponse> mutate = new EqualsHashCodeTestUtils.MutateFunction<GetUserPrivilegesResponse>() {          @Override         public GetUserPrivilegesResponse mutate(GetUserPrivilegesResponse original) {             final int random = randomIntBetween(1, 0b11111).             final Set<String> cluster = maybeMutate(random, 0, original.getClusterPrivileges(), () -> randomAlphaOfLength(5)).             final Set<ConditionalClusterPrivilege> conditionalCluster = maybeMutate(random, 1, original.getConditionalClusterPrivileges(), () -> new ManageApplicationPrivileges(randomStringSet(3))).             final Set<GetUserPrivilegesResponse.Indices> index = maybeMutate(random, 2, original.getIndexPrivileges(), () -> new GetUserPrivilegesResponse.Indices(randomStringSet(1), randomStringSet(1), emptySet(), emptySet(), randomBoolean())).             final Set<ApplicationResourcePrivileges> application = maybeMutate(random, 3, original.getApplicationPrivileges(), () -> ApplicationResourcePrivileges.builder().resources(generateRandomStringArray(3, 3, false, false)).application(randomAlphaOfLength(5)).privileges(generateRandomStringArray(3, 5, false, false)).build()).             final Set<String> runAs = maybeMutate(random, 4, original.getRunAs(), () -> randomAlphaOfLength(8)).             return new GetUserPrivilegesResponse(cluster, conditionalCluster, index, application, runAs).         }          private <T> Set<T> maybeMutate(int random, int index, Set<T> original, Supplier<T> supplier) {             if ((random & (1 << index)) == 0) {                 return original.             }             if (original.isEmpty()) {                 return Collections.singleton(supplier.get()).             } else {                 return emptySet().             }         }     }.     EqualsHashCodeTestUtils.checkEqualsAndHashCode(response, copy, mutate). }
false;private;0;20;;private GetUserPrivilegesResponse randomResponse() {     final Set<String> cluster = randomStringSet(5).     final Set<ConditionalClusterPrivilege> conditionalCluster = Sets.newHashSet(randomArray(3, ConditionalClusterPrivilege[]::new, () -> new ManageApplicationPrivileges(randomStringSet(3)))).     final Set<GetUserPrivilegesResponse.Indices> index = Sets.newHashSet(randomArray(5, GetUserPrivilegesResponse.Indices[]::new, () -> new GetUserPrivilegesResponse.Indices(randomStringSet(6), randomStringSet(8), Sets.newHashSet(randomArray(3, FieldGrantExcludeGroup[]::new, () -> new FieldGrantExcludeGroup(generateRandomStringArray(3, 5, false, false), generateRandomStringArray(3, 5, false, false)))), randomStringSet(3).stream().map(BytesArray::new).collect(Collectors.toSet()), randomBoolean()))).     final Set<ApplicationResourcePrivileges> application = Sets.newHashSet(randomArray(5, ApplicationResourcePrivileges[]::new, () -> ApplicationResourcePrivileges.builder().resources(generateRandomStringArray(3, 3, false, false)).application(randomAlphaOfLength(5)).privileges(generateRandomStringArray(3, 5, false, false)).build())).     final Set<String> runAs = randomStringSet(3).     return new GetUserPrivilegesResponse(cluster, conditionalCluster, index, application, runAs). }
false;private;1;26;;private List<GetUserPrivilegesResponse.Indices> sorted(Collection<GetUserPrivilegesResponse.Indices> indices) {     final ArrayList<GetUserPrivilegesResponse.Indices> list = CollectionUtils.iterableAsArrayList(indices).     Collections.sort(list, (a, b) -> {         int cmp = compareCollection(a.getIndices(), b.getIndices(), String::compareTo).         if (cmp != 0) {             return cmp.         }         cmp = compareCollection(a.getPrivileges(), b.getPrivileges(), String::compareTo).         if (cmp != 0) {             return cmp.         }         cmp = compareCollection(a.getQueries(), b.getQueries(), BytesReference::compareTo).         if (cmp != 0) {             return cmp.         }         cmp = compareCollection(a.getFieldSecurity(), b.getFieldSecurity(), (f1, f2) -> {             int c = compareCollection(Arrays.asList(f1.getGrantedFields()), Arrays.asList(f2.getGrantedFields()), String::compareTo).             if (c == 0) {                 c = compareCollection(Arrays.asList(f1.getExcludedFields()), Arrays.asList(f2.getExcludedFields()), String::compareTo).             }             return c.         }).         return cmp.     }).     return list. }
false;private;3;15;;private <T> int compareCollection(Collection<T> a, Collection<T> b, Comparator<T> comparator) {     int cmp = Integer.compare(a.size(), b.size()).     if (cmp != 0) {         return cmp.     }     Iterator<T> i1 = a.iterator().     Iterator<T> i2 = b.iterator().     while (i1.hasNext()) {         cmp = comparator.compare(i1.next(), i2.next()).         if (cmp != 0) {             return cmp.         }     }     return cmp. }
false;private;1;3;;private HashSet<String> randomStringSet(int maxSize) {     return Sets.newHashSet(generateRandomStringArray(maxSize, randomIntBetween(3, 6), false, false)). }
