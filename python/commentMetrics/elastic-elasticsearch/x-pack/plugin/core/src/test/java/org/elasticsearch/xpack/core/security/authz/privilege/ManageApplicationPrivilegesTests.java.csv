commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testSerialization() throws Exception {     final ManageApplicationPrivileges original = buildPrivileges().     try (BytesStreamOutput out = new BytesStreamOutput()) {         original.writeTo(out).         final NamedWriteableRegistry registry = new NamedWriteableRegistry(new XPackClientPlugin(Settings.EMPTY).getNamedWriteables()).         try (StreamInput in = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), registry)) {             final ManageApplicationPrivileges copy = ManageApplicationPrivileges.createFrom(in).             assertThat(copy, equalTo(original)).             assertThat(original, equalTo(copy)).         }     } }
false;public;0;24;;public void testGenerateAndParseXContent() throws Exception {     final XContent xContent = randomFrom(XContentType.values()).xContent().     try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {         final XContentBuilder builder = new XContentBuilder(xContent, out).         final ManageApplicationPrivileges original = buildPrivileges().         builder.startObject().         original.toXContent(builder, ToXContent.EMPTY_PARAMS).         builder.endObject().         builder.flush().         final byte[] bytes = out.toByteArray().         try (XContentParser parser = xContent.createParser(NamedXContentRegistry.EMPTY, THROW_UNSUPPORTED_OPERATION, bytes)) {             assertThat(parser.nextToken(), equalTo(XContentParser.Token.START_OBJECT)).             // ManageApplicationPrivileges.parse requires that the parser be positioned on the "manage" field.             assertThat(parser.nextToken(), equalTo(XContentParser.Token.FIELD_NAME)).             final ManageApplicationPrivileges clone = ManageApplicationPrivileges.parse(parser).             assertThat(parser.nextToken(), equalTo(XContentParser.Token.END_OBJECT)).             assertThat(clone, equalTo(original)).             assertThat(original, equalTo(clone)).         }     } }
false;public;0;7;;public void testEqualsAndHashCode() {     final int applicationNameLength = randomIntBetween(4, 7).     final ManageApplicationPrivileges privileges = buildPrivileges(applicationNameLength).     final EqualsHashCodeTestUtils.MutateFunction<ManageApplicationPrivileges> mutate = orig -> buildPrivileges(applicationNameLength + randomIntBetween(1, 3)).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(privileges, this::clone, mutate). }
false;public;0;11;;public void testPrivilege() {     final ManageApplicationPrivileges privileges = buildPrivileges().     assertThat(privileges.getPrivilege(), instanceOf(ClusterPrivilege.class)).     for (String actionName : Arrays.asList(GetPrivilegesAction.NAME, PutPrivilegesAction.NAME, DeletePrivilegesAction.NAME)) {         assertThat(privileges.getPrivilege().predicate(), predicateMatches(actionName)).     }     for (String actionName : Arrays.asList(GetUsersAction.NAME, PutRoleAction.NAME, DeleteRoleMappingAction.NAME, HasPrivilegesAction.NAME)) {         assertThat(privileges.getPrivilege().predicate(), not(predicateMatches(actionName))).     } }
false;public;0;28;;public void testRequestPredicate() {     final ManageApplicationPrivileges kibanaAndLogstash = new ManageApplicationPrivileges(Sets.newHashSet("kibana-*", "logstash")).     final ManageApplicationPrivileges cloudAndSwiftype = new ManageApplicationPrivileges(Sets.newHashSet("cloud-*", "swiftype")).     final Predicate<TransportRequest> kibanaAndLogstashPredicate = kibanaAndLogstash.getRequestPredicate().     final Predicate<TransportRequest> cloudAndSwiftypePredicate = cloudAndSwiftype.getRequestPredicate().     assertThat(kibanaAndLogstashPredicate, notNullValue()).     assertThat(cloudAndSwiftypePredicate, notNullValue()).     final GetPrivilegesRequest getKibana1 = new GetPrivilegesRequest().     getKibana1.application("kibana-1").     assertThat(kibanaAndLogstashPredicate, predicateMatches(getKibana1)).     assertThat(cloudAndSwiftypePredicate, not(predicateMatches(getKibana1))).     final DeletePrivilegesRequest deleteLogstash = new DeletePrivilegesRequest("logstash", new String[] { "all" }).     assertThat(kibanaAndLogstashPredicate, predicateMatches(deleteLogstash)).     assertThat(cloudAndSwiftypePredicate, not(predicateMatches(deleteLogstash))).     final PutPrivilegesRequest putKibana = new PutPrivilegesRequest().     final List<ApplicationPrivilegeDescriptor> kibanaPrivileges = new ArrayList<>().     for (int i = randomIntBetween(2, 6). i > 0. i--) {         kibanaPrivileges.add(new ApplicationPrivilegeDescriptor("kibana-" + i, randomAlphaOfLengthBetween(3, 6).toLowerCase(Locale.ROOT), Collections.emptySet(), Collections.emptyMap())).     }     putKibana.setPrivileges(kibanaPrivileges).     assertThat(kibanaAndLogstashPredicate, predicateMatches(putKibana)).     assertThat(cloudAndSwiftypePredicate, not(predicateMatches(putKibana))). }
false;public;0;13;;public void testSecurityForGetAllApplicationPrivileges() {     final GetPrivilegesRequest getAll = new GetPrivilegesRequest().     getAll.application(null).     getAll.privileges(new String[0]).     assertThat(getAll.validate(), nullValue()).     final ManageApplicationPrivileges kibanaOnly = new ManageApplicationPrivileges(Sets.newHashSet("kibana-*")).     final ManageApplicationPrivileges allApps = new ManageApplicationPrivileges(Sets.newHashSet("*")).     assertThat(kibanaOnly.getRequestPredicate(), not(predicateMatches(getAll))).     assertThat(allApps.getRequestPredicate(), predicateMatches(getAll)). }
false;private;1;3;;private ManageApplicationPrivileges clone(ManageApplicationPrivileges original) {     return new ManageApplicationPrivileges(new LinkedHashSet<>(original.getApplicationNames())). }
false;private;0;3;;private ManageApplicationPrivileges buildPrivileges() {     return buildPrivileges(randomIntBetween(4, 7)). }
false;static;1;4;;static ManageApplicationPrivileges buildPrivileges(int applicationNameLength) {     Set<String> applicationNames = Sets.newHashSet(Arrays.asList(generateRandomStringArray(5, applicationNameLength, false, false))).     return new ManageApplicationPrivileges(applicationNames). }
