commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;16;;public static QueryConfig randomQueryConfig() {     QueryBuilder queryBuilder = randomBoolean() ? new MatchAllQueryBuilder() : new MatchNoneQueryBuilder().     LinkedHashMap<String, Object> source = null.     try (XContentBuilder xContentBuilder = XContentFactory.jsonBuilder()) {         XContentBuilder content = queryBuilder.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS).         source = (LinkedHashMap<String, Object>) XContentHelper.convertToMap(BytesReference.bytes(content), true, XContentType.JSON).v2().     } catch (IOException e) {         // should not happen         fail("failed to create random query config").     }     return new QueryConfig(source, queryBuilder). }
false;public,static;0;9;;public static QueryConfig randomInvalidQueryConfig() {     // create something broken but with a source     LinkedHashMap<String, Object> source = new LinkedHashMap<>().     for (String key : randomUnique(() -> randomAlphaOfLengthBetween(1, 20), randomIntBetween(1, 10))) {         source.put(key, randomAlphaOfLengthBetween(1, 20)).     }     return new QueryConfig(source, null). }
false;public;0;4;;@Before public void setRandomFeatures() {     lenient = randomBoolean(). }
false;protected;1;4;;@Override protected QueryConfig doParseInstance(XContentParser parser) throws IOException {     return QueryConfig.fromXContent(parser, lenient). }
false;protected;0;4;;@Override protected QueryConfig createTestInstance() {     return lenient ? randomBoolean() ? randomQueryConfig() : randomInvalidQueryConfig() : randomQueryConfig(). }
false;protected;0;4;;@Override protected Reader<QueryConfig> instanceReader() {     return QueryConfig::new. }
false;public;0;9;;public void testValidQueryParsing() throws IOException {     QueryBuilder query = new MatchQueryBuilder("key", "value").     String source = query.toString().     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         QueryConfig queryConfig = QueryConfig.fromXContent(parser, true).         assertEquals(query, queryConfig.getQuery()).         assertTrue(queryConfig.isValid()).     } }
false;public;0;14;;public void testFailOnStrictPassOnLenient() throws IOException {     String source = "{\"query_element_does_not_exist\" : {}}".     // lenient, passes but reports invalid     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         QueryConfig query = QueryConfig.fromXContent(parser, true).         assertFalse(query.isValid()).     }     // strict throws     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         expectThrows(ParsingException.class, () -> QueryConfig.fromXContent(parser, false)).     } }
false;public;0;14;;public void testFailOnEmptyQuery() throws IOException {     String source = "".     // lenient, passes but reports invalid     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         QueryConfig query = QueryConfig.fromXContent(parser, true).         assertFalse(query.isValid()).     }     // strict throws     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         expectThrows(IllegalArgumentException.class, () -> QueryConfig.fromXContent(parser, false)).     } }
false;public;0;14;;public void testFailOnEmptyQueryClause() throws IOException {     String source = "{}".     // lenient, passes but reports invalid     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         QueryConfig query = QueryConfig.fromXContent(parser, true).         assertFalse(query.isValid()).     }     // strict throws     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         expectThrows(IllegalArgumentException.class, () -> QueryConfig.fromXContent(parser, false)).     } }
false;public;0;8;;public void testDeprecation() throws IOException {     String source = "{\"" + MockDeprecatedQueryBuilder.NAME + "\" : {}}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, source)) {         QueryConfig query = QueryConfig.fromXContent(parser, false).         assertTrue(query.isValid()).         assertWarnings(MockDeprecatedQueryBuilder.DEPRECATION_MESSAGE).     } }
