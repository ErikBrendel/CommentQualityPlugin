commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;public void testAcquireReleaseReset() throws IOException {     IOUtils.close(engine, store).     final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED).     try (Store store = createStore()) {         CountingRefreshListener listener = new CountingRefreshListener().         EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, listener, null, globalCheckpoint::get, new NoneCircuitBreakerService()).         try (InternalEngine engine = createEngine(config)) {             int numDocs = Math.min(10, addDocuments(globalCheckpoint, engine)).             engine.flushAndClose().             listener.reset().             try (FrozenEngine frozenEngine = new FrozenEngine(engine.engineConfig)) {                 assertFalse(frozenEngine.isReaderOpen()).                 Engine.Searcher searcher = frozenEngine.acquireSearcher("test").                 assertEquals(config.getShardId(), ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(searcher.getDirectoryReader()).shardId()).                 assertTrue(frozenEngine.isReaderOpen()).                 TopDocs search = searcher.searcher().search(new MatchAllDocsQuery(), numDocs).                 assertEquals(search.scoreDocs.length, numDocs).                 assertEquals(1, listener.afterRefresh.get()).                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).release().                 assertFalse(frozenEngine.isReaderOpen()).                 assertEquals(1, listener.afterRefresh.get()).                 expectThrows(AlreadyClosedException.class, () -> searcher.searcher().search(new MatchAllDocsQuery(), numDocs)).                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).reset().                 assertEquals(2, listener.afterRefresh.get()).                 search = searcher.searcher().search(new MatchAllDocsQuery(), numDocs).                 assertEquals(search.scoreDocs.length, numDocs).                 searcher.close().             }         }     } }
false;public;0;35;;public void testAcquireReleaseResetTwoSearchers() throws IOException {     IOUtils.close(engine, store).     final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED).     try (Store store = createStore()) {         CountingRefreshListener listener = new CountingRefreshListener().         EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, listener, null, globalCheckpoint::get, new NoneCircuitBreakerService()).         try (InternalEngine engine = createEngine(config)) {             int numDocs = Math.min(10, addDocuments(globalCheckpoint, engine)).             engine.flushAndClose().             listener.reset().             try (FrozenEngine frozenEngine = new FrozenEngine(engine.engineConfig)) {                 assertFalse(frozenEngine.isReaderOpen()).                 Engine.Searcher searcher1 = frozenEngine.acquireSearcher("test").                 assertTrue(frozenEngine.isReaderOpen()).                 TopDocs search = searcher1.searcher().search(new MatchAllDocsQuery(), numDocs).                 assertEquals(search.scoreDocs.length, numDocs).                 assertEquals(1, listener.afterRefresh.get()).                 FrozenEngine.unwrapLazyReader(searcher1.getDirectoryReader()).release().                 Engine.Searcher searcher2 = frozenEngine.acquireSearcher("test").                 search = searcher2.searcher().search(new MatchAllDocsQuery(), numDocs).                 assertEquals(search.scoreDocs.length, numDocs).                 assertTrue(frozenEngine.isReaderOpen()).                 assertEquals(2, listener.afterRefresh.get()).                 expectThrows(AlreadyClosedException.class, () -> searcher1.searcher().search(new MatchAllDocsQuery(), numDocs)).                 FrozenEngine.unwrapLazyReader(searcher1.getDirectoryReader()).reset().                 assertEquals(2, listener.afterRefresh.get()).                 search = searcher1.searcher().search(new MatchAllDocsQuery(), numDocs).                 assertEquals(search.scoreDocs.length, numDocs).                 searcher1.close().                 searcher2.close().             }         }     } }
false;public;0;29;;public void testSegmentStats() throws IOException {     IOUtils.close(engine, store).     final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED).     try (Store store = createStore()) {         CountingRefreshListener listener = new CountingRefreshListener().         EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, listener, null, globalCheckpoint::get, new NoneCircuitBreakerService()).         try (InternalEngine engine = createEngine(config)) {             addDocuments(globalCheckpoint, engine).             engine.flushAndClose().             listener.reset().             try (FrozenEngine frozenEngine = new FrozenEngine(engine.engineConfig)) {                 Engine.Searcher searcher = frozenEngine.acquireSearcher("test").                 SegmentsStats segmentsStats = frozenEngine.segmentsStats(randomBoolean()).                 assertEquals(frozenEngine.segments(randomBoolean()).size(), segmentsStats.getCount()).                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).release().                 assertEquals(1, listener.afterRefresh.get()).                 segmentsStats = frozenEngine.segmentsStats(randomBoolean()).                 assertEquals(0, segmentsStats.getCount()).                 assertEquals(1, listener.afterRefresh.get()).                 assertFalse(frozenEngine.isReaderOpen()).                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).reset().                 segmentsStats = frozenEngine.segmentsStats(randomBoolean()).                 assertEquals(frozenEngine.segments(randomBoolean()).size(), segmentsStats.getCount()).                 searcher.close().             }         }     } }
false;public;0;34;;public void testCircuitBreakerAccounting() throws IOException {     IOUtils.close(engine, store).     final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED).     try (Store store = createStore()) {         CountingRefreshListener listener = new CountingRefreshListener().         EngineConfig config = config(defaultSettings, store, createTempDir(), // we don't merge we want no background merges to happen to ensure we have consistent breaker stats         NoMergePolicy.INSTANCE, null, listener, null, globalCheckpoint::get, new HierarchyCircuitBreakerService(defaultSettings.getSettings(), new ClusterSettings(defaultSettings.getNodeSettings(), ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))).         CircuitBreaker breaker = config.getCircuitBreakerService().getBreaker(CircuitBreaker.ACCOUNTING).         long expectedUse.         try (InternalEngine engine = createEngine(config)) {             addDocuments(globalCheckpoint, engine).             // first flush to make sure we have a commit that we open in the frozen engine blow.             engine.flush(false, true).             // pull the reader to account for RAM in the breaker.             engine.refresh("test").             expectedUse = breaker.getUsed().         }         assertTrue(expectedUse > 0).         assertEquals(0, breaker.getUsed()).         listener.reset().         try (FrozenEngine frozenEngine = new FrozenEngine(config)) {             Engine.Searcher searcher = frozenEngine.acquireSearcher("test").             assertEquals(expectedUse, breaker.getUsed()).             FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).release().             assertEquals(1, listener.afterRefresh.get()).             assertEquals(0, breaker.getUsed()).             assertFalse(frozenEngine.isReaderOpen()).             FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).reset().             assertEquals(expectedUse, breaker.getUsed()).             searcher.close().             assertEquals(0, breaker.getUsed()).         }     } }
false;private;2;16;;private int addDocuments(AtomicLong globalCheckpoint, InternalEngine engine) throws IOException {     int numDocs = scaledRandomIntBetween(10, 1000).     int numDocsAdded = 0.     for (int i = 0. i < numDocs. i++) {         numDocsAdded++.         ParsedDocument doc = testParsedDocument(Integer.toString(i), null, testDocument(), new BytesArray("{}"), null).         engine.index(new Engine.Index(newUid(doc), doc, i, primaryTerm.get(), 1, null, Engine.Operation.Origin.REPLICA, System.nanoTime(), -1, false, SequenceNumbers.UNASSIGNED_SEQ_NO, 0)).         if (rarely()) {             engine.flush().         }         globalCheckpoint.set(engine.getLocalCheckpoint()).     }     engine.syncTranslog().     return numDocsAdded. }
false;public;0;51;;public void testSearchConcurrently() throws IOException, InterruptedException {     // even though we don't want this to be searched concurrently we better make sure we release all resources etc.     IOUtils.close(engine, store).     final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED).     try (Store store = createStore()) {         EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, null, null, globalCheckpoint::get, new HierarchyCircuitBreakerService(defaultSettings.getSettings(), new ClusterSettings(defaultSettings.getNodeSettings(), ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))).         CircuitBreaker breaker = config.getCircuitBreakerService().getBreaker(CircuitBreaker.ACCOUNTING).         try (InternalEngine engine = createEngine(config)) {             int numDocsAdded = addDocuments(globalCheckpoint, engine).             engine.flushAndClose().             int numIters = randomIntBetween(100, 1000).             try (FrozenEngine frozenEngine = new FrozenEngine(engine.engineConfig)) {                 int numThreads = randomIntBetween(2, 4).                 Thread[] threads = new Thread[numThreads].                 CyclicBarrier barrier = new CyclicBarrier(numThreads).                 CountDownLatch latch = new CountDownLatch(numThreads).                 for (int i = 0. i < numThreads. i++) {                     threads[i] = new Thread(() -> {                         try (Engine.Searcher searcher = frozenEngine.acquireSearcher("test")) {                             barrier.await().                             FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).release().                             for (int j = 0. j < numIters. j++) {                                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).reset().                                 assertTrue(frozenEngine.isReaderOpen()).                                 TopDocs search = searcher.searcher().search(new MatchAllDocsQuery(), Math.min(10, numDocsAdded)).                                 assertEquals(search.scoreDocs.length, Math.min(10, numDocsAdded)).                                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).release().                             }                             if (randomBoolean()) {                                 FrozenEngine.unwrapLazyReader(searcher.getDirectoryReader()).reset().                             }                         } catch (Exception e) {                             throw new AssertionError(e).                         } finally {                             latch.countDown().                         }                     }).                     threads[i].start().                 }                 latch.await().                 for (Thread t : threads) {                     t.join().                 }                 assertFalse(frozenEngine.isReaderOpen()).                 assertEquals(0, breaker.getUsed()).             }         }     } }
false;private,static;1;18;;private static void checkOverrideMethods(Class<?> clazz) throws NoSuchMethodException, SecurityException {     final Class<?> superClazz = clazz.getSuperclass().     for (Method m : superClazz.getMethods()) {         final int mods = m.getModifiers().         if (Modifier.isStatic(mods) || Modifier.isAbstract(mods) || Modifier.isFinal(mods) || m.isSynthetic() || m.getName().equals("attributes") || m.getName().equals("getStats")) {             continue.         }         // The point of these checks is to ensure that methods from the super class         // are overwritten to make sure we never miss a method from FilterLeafReader / FilterDirectoryReader         final Method subM = clazz.getMethod(m.getName(), m.getParameterTypes()).         if (subM.getDeclaringClass() == superClazz && m.getDeclaringClass() != Object.class && m.getDeclaringClass() == subM.getDeclaringClass()) {             fail(clazz + " doesn't override" + m + " although it has been declared by it's superclass").         }     } }
true;public;0;4;// here we make sure we catch any change to their super classes FilterLeafReader / FilterDirectoryReader ;// here we make sure we catch any change to their super classes FilterLeafReader / FilterDirectoryReader public void testOverrideMethods() throws Exception {     checkOverrideMethods(FrozenEngine.LazyDirectoryReader.class).     checkOverrideMethods(FrozenEngine.LazyLeafReader.class). }
false;public;0;4;;@Override public void beforeRefresh() {     beforeRefresh.incrementAndGet(). }
false;public;1;5;;@Override public void afterRefresh(boolean didRefresh) {     afterRefresh.incrementAndGet().     assertEquals(beforeRefresh.get(), afterRefresh.get()). }
false;;0;4;;void reset() {     afterRefresh.set(0).     beforeRefresh.set(0). }
false;public;0;36;;public void testCanMatch() throws IOException {     IOUtils.close(engine, store).     final AtomicLong globalCheckpoint = new AtomicLong(SequenceNumbers.NO_OPS_PERFORMED).     try (Store store = createStore()) {         CountingRefreshListener listener = new CountingRefreshListener().         EngineConfig config = config(defaultSettings, store, createTempDir(), newMergePolicy(), null, listener, null, globalCheckpoint::get, new NoneCircuitBreakerService()).         try (InternalEngine engine = createEngine(config)) {             addDocuments(globalCheckpoint, engine).             engine.flushAndClose().             listener.reset().             try (FrozenEngine frozenEngine = new FrozenEngine(engine.engineConfig)) {                 DirectoryReader reader.                 try (Engine.Searcher searcher = frozenEngine.acquireSearcher("can_match")) {                     assertNotNull(ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(searcher.getDirectoryReader())).                     assertEquals(config.getShardId(), ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(searcher.getDirectoryReader()).shardId()).                     reader = searcher.getDirectoryReader().                     assertNotEquals(reader, Matchers.instanceOf(FrozenEngine.LazyDirectoryReader.class)).                     assertEquals(0, listener.afterRefresh.get()).                     DirectoryReader unwrap = FilterDirectoryReader.unwrap(searcher.getDirectoryReader()).                     assertThat(unwrap, Matchers.instanceOf(RewriteCachingDirectoryReader.class)).                     assertNotNull(ElasticsearchDirectoryReader.getElasticsearchDirectoryReader(searcher.getDirectoryReader())).                 }                 try (Engine.Searcher searcher = frozenEngine.acquireSearcher("can_match")) {                     assertSame(reader, searcher.getDirectoryReader()).                     assertNotEquals(reader, Matchers.instanceOf(FrozenEngine.LazyDirectoryReader.class)).                     assertEquals(0, listener.afterRefresh.get()).                     DirectoryReader unwrap = FilterDirectoryReader.unwrap(searcher.getDirectoryReader()).                     assertThat(unwrap, Matchers.instanceOf(RewriteCachingDirectoryReader.class)).                 }             }         }     } }
