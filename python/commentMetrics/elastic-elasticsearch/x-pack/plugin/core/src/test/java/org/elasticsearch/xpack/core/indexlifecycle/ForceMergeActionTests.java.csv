commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected ForceMergeAction doParseInstance(XContentParser parser) {     return ForceMergeAction.parse(parser). }
false;protected;0;4;;@Override protected ForceMergeAction createTestInstance() {     return randomInstance(). }
false;static;0;3;;static ForceMergeAction randomInstance() {     return new ForceMergeAction(randomIntBetween(1, 100)). }
false;protected;1;6;;@Override protected ForceMergeAction mutateInstance(ForceMergeAction instance) {     int maxNumSegments = instance.getMaxNumSegments().     maxNumSegments = maxNumSegments + randomIntBetween(1, 10).     return new ForceMergeAction(maxNumSegments). }
false;protected;0;4;;@Override protected Reader<ForceMergeAction> instanceReader() {     return ForceMergeAction::new. }
false;public;0;7;;public void testMissingMaxNumSegments() throws IOException {     BytesReference emptyObject = BytesReference.bytes(JsonXContent.contentBuilder().startObject().endObject()).     XContentParser parser = XContentHelper.createParser(null, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, emptyObject, XContentType.JSON).     Exception e = expectThrows(IllegalArgumentException.class, () -> ForceMergeAction.parse(parser)).     assertThat(e.getMessage(), equalTo("Required [max_num_segments]")). }
false;public;0;4;;public void testInvalidNegativeSegmentNumber() {     Exception r = expectThrows(IllegalArgumentException.class, () -> new ForceMergeAction(randomIntBetween(-10, 0))).     assertThat(r.getMessage(), equalTo("[max_num_segments] must be a positive integer")). }
false;public;0;18;;public void testToSteps() {     ForceMergeAction instance = createTestInstance().     String phase = randomAlphaOfLength(5).     StepKey nextStepKey = new StepKey(randomAlphaOfLength(10), randomAlphaOfLength(10), randomAlphaOfLength(10)).     List<Step> steps = instance.toSteps(null, phase, nextStepKey).     assertNotNull(steps).     assertEquals(3, steps.size()).     UpdateSettingsStep firstStep = (UpdateSettingsStep) steps.get(0).     ForceMergeStep secondStep = (ForceMergeStep) steps.get(1).     SegmentCountStep thirdStep = (SegmentCountStep) steps.get(2).     assertThat(firstStep.getKey(), equalTo(new StepKey(phase, ForceMergeAction.NAME, ReadOnlyAction.NAME))).     assertThat(firstStep.getNextStepKey(), equalTo(new StepKey(phase, ForceMergeAction.NAME, ForceMergeStep.NAME))).     assertTrue(IndexMetaData.INDEX_BLOCKS_WRITE_SETTING.get(firstStep.getSettings())).     assertThat(secondStep.getKey(), equalTo(new StepKey(phase, ForceMergeAction.NAME, ForceMergeStep.NAME))).     assertThat(secondStep.getNextStepKey(), equalTo(thirdStep.getKey())).     assertThat(thirdStep.getKey(), equalTo(new StepKey(phase, ForceMergeAction.NAME, SegmentCountStep.NAME))).     assertThat(thirdStep.getNextStepKey(), equalTo(nextStepKey)). }
