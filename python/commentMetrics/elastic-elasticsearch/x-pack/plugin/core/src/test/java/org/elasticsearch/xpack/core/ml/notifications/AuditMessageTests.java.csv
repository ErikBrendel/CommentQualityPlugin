commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setStartTime() {     startMillis = System.currentTimeMillis(). }
false;public;0;7;;public void testNewInfo() {     AuditMessage info = AuditMessage.newInfo("foo", "some info", "some_node").     assertEquals("foo", info.getJobId()).     assertEquals("some info", info.getMessage()).     assertEquals(Level.INFO, info.getLevel()).     assertDateBetweenStartAndNow(info.getTimestamp()). }
false;public;0;7;;public void testNewWarning() {     AuditMessage warning = AuditMessage.newWarning("bar", "some warning", "some_node").     assertEquals("bar", warning.getJobId()).     assertEquals("some warning", warning.getMessage()).     assertEquals(Level.WARNING, warning.getLevel()).     assertDateBetweenStartAndNow(warning.getTimestamp()). }
false;public;0;7;;public void testNewError() {     AuditMessage error = AuditMessage.newError("foo", "some error", "some_node").     assertEquals("foo", error.getJobId()).     assertEquals("some error", error.getMessage()).     assertEquals(Level.ERROR, error.getLevel()).     assertDateBetweenStartAndNow(error.getTimestamp()). }
false;public;0;7;;public void testNewActivity() {     AuditMessage error = AuditMessage.newActivity("foo", "some error", "some_node").     assertEquals("foo", error.getJobId()).     assertEquals("some error", error.getMessage()).     assertEquals(Level.ACTIVITY, error.getLevel()).     assertDateBetweenStartAndNow(error.getTimestamp()). }
false;private;1;5;;private void assertDateBetweenStartAndNow(Date timestamp) {     long timestampMillis = timestamp.getTime().     assertTrue(timestampMillis >= startMillis).     assertTrue(timestampMillis <= System.currentTimeMillis()). }
false;protected;1;4;;@Override protected AuditMessage doParseInstance(XContentParser parser) {     return AuditMessage.PARSER.apply(parser, null). }
false;protected;0;5;;@Override protected AuditMessage createTestInstance() {     return new AuditMessage(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 200), randomFrom(Level.values()), randomAlphaOfLengthBetween(1, 20)). }
false;protected;0;4;;@Override protected Reader<AuditMessage> instanceReader() {     return AuditMessage::new. }
