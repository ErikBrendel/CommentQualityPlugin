commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected CreateApiKeyResponse doParseInstance(XContentParser parser) throws IOException {     return CreateApiKeyResponse.fromXContent(parser). }
false;protected;0;8;;@Override protected CreateApiKeyResponse createTestInstance() {     final String name = randomAlphaOfLengthBetween(1, 256).     final SecureString key = new SecureString(UUIDs.randomBase64UUID().toCharArray()).     final Instant expiration = randomBoolean() ? Instant.now().plus(7L, ChronoUnit.DAYS) : null.     final String id = randomAlphaOfLength(100).     return new CreateApiKeyResponse(name, id, key, expiration). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;10;;public void testSerialization() throws IOException {     final CreateApiKeyResponse response = createTestInstance().     try (BytesStreamOutput out = new BytesStreamOutput()) {         response.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             CreateApiKeyResponse serialized = new CreateApiKeyResponse(in).             assertThat(serialized, equalTo(response)).         }     } }
false;public;0;10;;public void testEqualsHashCode() {     CreateApiKeyResponse createApiKeyResponse = createTestInstance().     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createApiKeyResponse, (original) -> {         return new CreateApiKeyResponse(original.getName(), original.getId(), original.getKey(), original.getExpiration()).     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(createApiKeyResponse, (original) -> {         return new CreateApiKeyResponse(original.getName(), original.getId(), original.getKey(), original.getExpiration()).     }, CreateApiKeyResponseTests::mutateTestItem). }
false;private,static;1;15;;private static CreateApiKeyResponse mutateTestItem(CreateApiKeyResponse original) {     switch(randomIntBetween(0, 3)) {         case 0:             return new CreateApiKeyResponse(randomAlphaOfLength(5), original.getId(), original.getKey(), original.getExpiration()).         case 1:             return new CreateApiKeyResponse(original.getName(), randomAlphaOfLength(5), original.getKey(), original.getExpiration()).         case 2:             return new CreateApiKeyResponse(original.getName(), original.getId(), new SecureString(UUIDs.randomBase64UUID().toCharArray()), original.getExpiration()).         case 3:             return new CreateApiKeyResponse(original.getName(), original.getId(), original.getKey(), Instant.now()).         default:             return new CreateApiKeyResponse(randomAlphaOfLength(5), original.getId(), original.getKey(), original.getExpiration()).     } }
