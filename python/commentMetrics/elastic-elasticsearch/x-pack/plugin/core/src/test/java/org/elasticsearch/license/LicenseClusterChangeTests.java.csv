commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     licenseState = new TestUtils.AssertingLicenseState().     setInitialState(null, licenseState, Settings.EMPTY).     licenseService.start(). }
false;public;0;4;;@After public void teardown() {     licenseService.stop(). }
false;public;0;9;;public void testNotificationOnNewLicense() throws Exception {     ClusterState oldState = ClusterState.builder(new ClusterName("a")).build().     final License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(24)).     MetaData metaData = MetaData.builder().putCustom(LicensesMetaData.TYPE, new LicensesMetaData(license, null)).build().     ClusterState newState = ClusterState.builder(new ClusterName("a")).metaData(metaData).build().     licenseService.clusterChanged(new ClusterChangedEvent("simulated", newState, oldState)).     assertThat(licenseState.activeUpdates.size(), equalTo(1)).     assertTrue(licenseState.activeUpdates.get(0)). }
false;public;0;8;;public void testNoNotificationOnExistingLicense() throws Exception {     final License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(24)).     MetaData metaData = MetaData.builder().putCustom(LicensesMetaData.TYPE, new LicensesMetaData(license, null)).build().     ClusterState newState = ClusterState.builder(new ClusterName("a")).metaData(metaData).build().     ClusterState oldState = ClusterState.builder(newState).build().     licenseService.clusterChanged(new ClusterChangedEvent("simulated", newState, oldState)).     assertThat(licenseState.activeUpdates.size(), equalTo(0)). }
false;public;0;23;;public void testSelfGeneratedLicenseGeneration() throws Exception {     DiscoveryNode master = new DiscoveryNode("b", buildNewFakeTransportAddress(), emptyMap(), emptySet(), Version.CURRENT).     ClusterState oldState = ClusterState.builder(new ClusterName("a")).nodes(DiscoveryNodes.builder().masterNodeId(master.getId()).add(master)).build().     when(discoveryNodes.isLocalNodeElectedMaster()).thenReturn(true).     ClusterState newState = ClusterState.builder(oldState).nodes(discoveryNodes).build().     licenseService.clusterChanged(new ClusterChangedEvent("simulated", newState, oldState)).     ArgumentCaptor<ClusterStateUpdateTask> stateUpdater = ArgumentCaptor.forClass(ClusterStateUpdateTask.class).     verify(clusterService, times(1)).submitStateUpdateTask(any(), stateUpdater.capture()).     ClusterState stateWithLicense = stateUpdater.getValue().execute(newState).     LicensesMetaData licenseMetaData = stateWithLicense.metaData().custom(LicensesMetaData.TYPE).     assertNotNull(licenseMetaData).     assertNotNull(licenseMetaData.getLicense()).     assertEquals(licenseType, licenseMetaData.getLicense().type()).     long expiration.     if (licenseType.equals("basic")) {         expiration = LicenseService.BASIC_SELF_GENERATED_LICENSE_EXPIRATION_MILLIS.     } else {         expiration = LicenseService.NON_BASIC_SELF_GENERATED_LICENSE_DURATION.millis() + clock.millis().     }     assertEquals(expiration, licenseMetaData.getLicense().expiryDate()). }
