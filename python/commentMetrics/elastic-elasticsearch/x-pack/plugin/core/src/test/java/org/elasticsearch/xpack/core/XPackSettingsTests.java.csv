commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testDefaultSSLCiphers() throws Exception {     assertThat(XPackSettings.DEFAULT_CIPHERS, hasItem("TLS_RSA_WITH_AES_128_CBC_SHA")).     final boolean useAES256 = Cipher.getMaxAllowedKeyLength("AES") > 128.     if (useAES256) {         logger.info("AES 256 is available").         assertThat(XPackSettings.DEFAULT_CIPHERS, hasItem("TLS_RSA_WITH_AES_256_CBC_SHA")).     } else {         logger.info("AES 256 is not available").         assertThat(XPackSettings.DEFAULT_CIPHERS, not(hasItem("TLS_RSA_WITH_AES_256_CBC_SHA"))).     } }
false;public;0;16;;public void testPasswordHashingAlgorithmSettingValidation() {     final boolean isPBKDF2Available = isSecretkeyFactoryAlgoAvailable("PBKDF2WithHMACSHA512").     final String pbkdf2Algo = randomFrom("PBKDF2_10000", "PBKDF2").     final Settings settings = Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), pbkdf2Algo).build().     if (isPBKDF2Available) {         assertEquals(pbkdf2Algo, XPackSettings.PASSWORD_HASHING_ALGORITHM.get(settings)).     } else {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> XPackSettings.PASSWORD_HASHING_ALGORITHM.get(settings)).         assertThat(e.getMessage(), containsString("Support for PBKDF2WithHMACSHA512 must be available")).     }     final String bcryptAlgo = randomFrom("BCRYPT", "BCRYPT11").     assertEquals(bcryptAlgo, XPackSettings.PASSWORD_HASHING_ALGORITHM.get(Settings.builder().put(XPackSettings.PASSWORD_HASHING_ALGORITHM.getKey(), bcryptAlgo).build())). }
false;public;0;4;;public void testDefaultSupportedProtocolsWithTLSv13() throws Exception {     assumeTrue("current JVM does not support TLSv1.3", supportTLSv13()).     assertThat(XPackSettings.DEFAULT_SUPPORTED_PROTOCOLS, contains("TLSv1.3", "TLSv1.2", "TLSv1.1")). }
false;public;0;4;;public void testDefaultSupportedProtocolsWithoutTLSv13() throws Exception {     assumeFalse("current JVM supports TLSv1.3", supportTLSv13()).     assertThat(XPackSettings.DEFAULT_SUPPORTED_PROTOCOLS, contains("TLSv1.2", "TLSv1.1")). }
false;private;1;8;;private boolean isSecretkeyFactoryAlgoAvailable(String algorithmId) {     try {         SecretKeyFactory.getInstance(algorithmId).         return true.     } catch (NoSuchAlgorithmException e) {         return false.     } }
false;private;0;8;;private boolean supportTLSv13() {     try {         SSLContext.getInstance("TLSv1.3").         return true.     } catch (NoSuchAlgorithmException e) {         return false.     } }
