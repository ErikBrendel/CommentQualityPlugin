commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     client = Mockito.mock(Client.class). }
false;public;0;7;;@Override public ShrinkSetAliasStep createRandomInstance() {     StepKey stepKey = randomStepKey().     StepKey nextStepKey = randomStepKey().     String shrunkIndexPrefix = randomAlphaOfLength(10).     return new ShrinkSetAliasStep(stepKey, nextStepKey, client, shrunkIndexPrefix). }
false;public;1;20;;@Override public ShrinkSetAliasStep mutateInstance(ShrinkSetAliasStep instance) {     StepKey key = instance.getKey().     StepKey nextKey = instance.getNextStepKey().     String shrunkIndexPrefix = instance.getShrunkIndexPrefix().     switch(between(0, 2)) {         case 0:             key = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 1:             nextKey = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 2:             shrunkIndexPrefix += randomAlphaOfLength(5).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new ShrinkSetAliasStep(key, nextKey, instance.getClient(), shrunkIndexPrefix). }
false;public;1;4;;@Override public ShrinkSetAliasStep copyInstance(ShrinkSetAliasStep instance) {     return new ShrinkSetAliasStep(instance.getKey(), instance.getNextStepKey(), instance.getClient(), instance.getShrunkIndexPrefix()). }
false;public;1;9;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     IndicesAliasesRequest request = (IndicesAliasesRequest) invocation.getArguments()[0].     assertThat(request.getAliasActions(), equalTo(expectedAliasActions)).     @SuppressWarnings("unchecked")     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].     listener.onResponse(new AcknowledgedResponse(true)).     return null. }
false;public;1;4;;@Override public void onResponse(boolean complete) {     actionCompleted.set(complete). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new AssertionError("Unexpected method call", e). }
false;public;0;67;;public void testPerformAction() {     IndexMetaData.Builder indexMetaDataBuilder = IndexMetaData.builder(randomAlphaOfLength(10)).settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).     AliasMetaData.Builder aliasBuilder = AliasMetaData.builder(randomAlphaOfLengthBetween(3, 10)).     if (randomBoolean()) {         aliasBuilder.routing(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         aliasBuilder.searchRouting(randomAlphaOfLengthBetween(3, 10)).     }     if (randomBoolean()) {         aliasBuilder.indexRouting(randomAlphaOfLengthBetween(3, 10)).     }     String aliasMetaDataFilter = randomBoolean() ? null : "{\"term\":{\"year\":2016}}".     aliasBuilder.filter(aliasMetaDataFilter).     aliasBuilder.writeIndex(randomBoolean()).     AliasMetaData aliasMetaData = aliasBuilder.build().     IndexMetaData indexMetaData = indexMetaDataBuilder.putAlias(aliasMetaData).build().     ShrinkSetAliasStep step = createRandomInstance().     String sourceIndex = indexMetaData.getIndex().getName().     String shrunkenIndex = step.getShrunkIndexPrefix() + sourceIndex.     List<AliasActions> expectedAliasActions = Arrays.asList(IndicesAliasesRequest.AliasActions.removeIndex().index(sourceIndex), IndicesAliasesRequest.AliasActions.add().index(shrunkenIndex).alias(sourceIndex), IndicesAliasesRequest.AliasActions.add().index(shrunkenIndex).alias(aliasMetaData.alias()).searchRouting(aliasMetaData.searchRouting()).indexRouting(aliasMetaData.indexRouting()).filter(aliasMetaDataFilter).writeIndex(null)).     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             IndicesAliasesRequest request = (IndicesAliasesRequest) invocation.getArguments()[0].             assertThat(request.getAliasActions(), equalTo(expectedAliasActions)).             @SuppressWarnings("unchecked")             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].             listener.onResponse(new AcknowledgedResponse(true)).             return null.         }     }).when(indicesClient).aliases(Mockito.any(), Mockito.any()).     SetOnce<Boolean> actionCompleted = new SetOnce<>().     step.performAction(indexMetaData, null, null, new Listener() {          @Override         public void onResponse(boolean complete) {             actionCompleted.set(complete).         }          @Override         public void onFailure(Exception e) {             throw new AssertionError("Unexpected method call", e).         }     }).     assertTrue(actionCompleted.get()).     Mockito.verify(client, Mockito.only()).admin().     Mockito.verify(adminClient, Mockito.only()).indices().     Mockito.verify(indicesClient, Mockito.only()).aliases(Mockito.any(), Mockito.any()). }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     @SuppressWarnings("unchecked")     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].     listener.onFailure(exception).     return null. }
false;public;1;4;;@Override public void onResponse(boolean complete) {     throw new AssertionError("Unexpected method call"). }
false;public;1;5;;@Override public void onFailure(Exception e) {     assertSame(exception, e).     exceptionThrown.set(true). }
false;public;0;44;;public void testPerformActionFailure() {     IndexMetaData indexMetaData = IndexMetaData.builder(randomAlphaOfLength(10)).settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     Exception exception = new RuntimeException().     ShrinkSetAliasStep step = createRandomInstance().     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             @SuppressWarnings("unchecked")             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].             listener.onFailure(exception).             return null.         }     }).when(indicesClient).aliases(Mockito.any(), Mockito.any()).     SetOnce<Boolean> exceptionThrown = new SetOnce<>().     step.performAction(indexMetaData, null, null, new Listener() {          @Override         public void onResponse(boolean complete) {             throw new AssertionError("Unexpected method call").         }          @Override         public void onFailure(Exception e) {             assertSame(exception, e).             exceptionThrown.set(true).         }     }).     assertEquals(true, exceptionThrown.get()).     Mockito.verify(client, Mockito.only()).admin().     Mockito.verify(adminClient, Mockito.only()).indices().     Mockito.verify(indicesClient, Mockito.only()).aliases(Mockito.any(), Mockito.any()). }
