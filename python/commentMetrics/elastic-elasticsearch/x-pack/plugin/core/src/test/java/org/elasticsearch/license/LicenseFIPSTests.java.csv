commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;public void testFIPSCheckWithAllowedLicense() throws Exception {     License newLicense = TestUtils.generateSignedLicense(randomFrom("trial", "platinum"), TimeValue.timeValueHours(24L)).     PutLicenseRequest request = new PutLicenseRequest().     request.acknowledge(true).     request.license(newLicense).     Settings settings = Settings.builder().put("xpack.security.enabled", true).put("xpack.security.transport.ssl.enabled", true).put("xpack.security.fips_mode.enabled", randomBoolean()).build().     XPackLicenseState licenseState = new XPackLicenseState(settings).     setInitialState(null, licenseState, settings).     licenseService.start().     PlainActionFuture<PutLicenseResponse> responseFuture = new PlainActionFuture<>().     licenseService.registerLicense(request, responseFuture).     verify(clusterService).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)). }
false;public;0;32;;public void testFIPSCheckWithoutAllowedLicense() throws Exception {     License newLicense = TestUtils.generateSignedLicense(randomFrom("gold", "standard"), TimeValue.timeValueHours(24L)).     PutLicenseRequest request = new PutLicenseRequest().     request.acknowledge(true).     request.license(newLicense).     Settings settings = Settings.builder().put("xpack.security.enabled", true).put("xpack.security.transport.ssl.enabled", true).put("xpack.security.fips_mode.enabled", true).build().     XPackLicenseState licenseState = new XPackLicenseState(settings).     setInitialState(null, licenseState, settings).     licenseService.start().     PlainActionFuture<PutLicenseResponse> responseFuture = new PlainActionFuture<>().     IllegalStateException e = expectThrows(IllegalStateException.class, () -> licenseService.registerLicense(request, responseFuture)).     assertThat(e.getMessage(), containsString("Cannot install a [" + newLicense.operationMode() + "] license unless FIPS mode is disabled")).     licenseService.stop().     settings = Settings.builder().put("xpack.security.enabled", true).put("xpack.security.transport.ssl.enabled", true).put("xpack.security.fips_mode.enabled", false).build().     licenseState = new XPackLicenseState(settings).     setInitialState(null, licenseState, settings).     licenseService.start().     licenseService.registerLicense(request, responseFuture).     verify(clusterService).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)). }
