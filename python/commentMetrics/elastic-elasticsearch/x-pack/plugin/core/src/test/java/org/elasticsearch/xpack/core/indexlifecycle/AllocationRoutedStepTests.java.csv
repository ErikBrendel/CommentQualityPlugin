# id;timestamp;commentText;codeText;commentWords;codeWords
AllocationRoutedStepTests -> public void testExecuteReplicasNotAllocatedOnSingleNode();1533753809;this  tests the scenario where__PUT index__"settings": {_"number_of_replicas": 0,_"number_of_shards": 1____PUT index/_settings__"number_of_replicas": 1,_"index.routing.allocation.include._name": "{node-name}";public void testExecuteReplicasNotAllocatedOnSingleNode() {_        Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20))__        Map<String, String> requires = Collections.singletonMap("_name", "node1")__        Settings.Builder existingSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT.id)_            .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID())__        Settings.Builder expectedSettings = Settings.builder()__        Settings.Builder node1Settings = Settings.builder()__        Settings.Builder node2Settings = Settings.builder()__        requires.forEach((k, v) -> {_            expectedSettings.put(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING.getKey() + k, v)__        })___        IndexRoutingTable.Builder indexRoutingTable = IndexRoutingTable.builder(index)_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), "node1", true, ShardRoutingState.STARTED))_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), null, null, false, ShardRoutingState.UNASSIGNED,_                new UnassignedInfo(Reason.REPLICA_ADDED, "no attempt")))___        AllocationRoutedStep step = createRandomInstance()__        assertAllocateStatus(index, 1, 1, step, existingSettings, node1Settings, node2Settings, indexRoutingTable,_            new ClusterStateWaitStep.Result(false, new AllocationRoutedStep.Info(1, -1, false)))__    };this,tests,the,scenario,where,put,index,settings,0,1,put,index,1,index,routing,allocation,include,node,name;public,void,test,execute,replicas,not,allocated,on,single,node,index,index,new,index,random,alpha,of,length,between,1,20,random,alpha,of,length,between,1,20,map,string,string,requires,collections,singleton,map,node1,settings,builder,existing,settings,settings,builder,put,index,meta,data,version,current,id,put,index,meta,data,index,get,uuid,settings,builder,expected,settings,settings,builder,settings,builder,node1settings,settings,builder,settings,builder,node2settings,settings,builder,requires,for,each,k,v,expected,settings,put,index,meta,data,get,key,k,v,index,routing,table,builder,index,routing,table,index,routing,table,builder,index,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,node1,true,shard,routing,state,started,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,null,null,false,shard,routing,state,unassigned,new,unassigned,info,reason,no,attempt,allocation,routed,step,step,create,random,instance,assert,allocate,status,index,1,1,step,existing,settings,node1settings,node2settings,index,routing,table,new,cluster,state,wait,step,result,false,new,allocation,routed,step,info,1,1,false
AllocationRoutedStepTests -> public void testExecuteReplicasNotAllocatedOnSingleNode();1536322011;this  tests the scenario where__PUT index__"settings": {_"number_of_replicas": 0,_"number_of_shards": 1____PUT index/_settings__"number_of_replicas": 1,_"index.routing.allocation.include._name": "{node-name}";public void testExecuteReplicasNotAllocatedOnSingleNode() {_        Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20))__        Map<String, String> requires = Collections.singletonMap("_name", "node1")__        Settings.Builder existingSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT.id)_            .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID())__        Settings.Builder expectedSettings = Settings.builder()__        Settings.Builder node1Settings = Settings.builder()__        Settings.Builder node2Settings = Settings.builder()__        requires.forEach((k, v) -> {_            expectedSettings.put(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING.getKey() + k, v)__        })___        IndexRoutingTable.Builder indexRoutingTable = IndexRoutingTable.builder(index)_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), "node1", true, ShardRoutingState.STARTED))_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), null, null, false, ShardRoutingState.UNASSIGNED,_                new UnassignedInfo(Reason.REPLICA_ADDED, "no attempt")))___        AllocationRoutedStep step = createRandomInstance()__        assertAllocateStatus(index, 1, 1, step, existingSettings, node1Settings, node2Settings, indexRoutingTable,_            new ClusterStateWaitStep.Result(false, new AllocationRoutedStep.Info(1, -1, false)))__    };this,tests,the,scenario,where,put,index,settings,0,1,put,index,1,index,routing,allocation,include,node,name;public,void,test,execute,replicas,not,allocated,on,single,node,index,index,new,index,random,alpha,of,length,between,1,20,random,alpha,of,length,between,1,20,map,string,string,requires,collections,singleton,map,node1,settings,builder,existing,settings,settings,builder,put,index,meta,data,version,current,id,put,index,meta,data,index,get,uuid,settings,builder,expected,settings,settings,builder,settings,builder,node1settings,settings,builder,settings,builder,node2settings,settings,builder,requires,for,each,k,v,expected,settings,put,index,meta,data,get,key,k,v,index,routing,table,builder,index,routing,table,index,routing,table,builder,index,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,node1,true,shard,routing,state,started,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,null,null,false,shard,routing,state,unassigned,new,unassigned,info,reason,no,attempt,allocation,routed,step,step,create,random,instance,assert,allocate,status,index,1,1,step,existing,settings,node1settings,node2settings,index,routing,table,new,cluster,state,wait,step,result,false,new,allocation,routed,step,info,1,1,false
AllocationRoutedStepTests -> public void testExecuteReplicasNotAllocatedOnSingleNode();1541444579;this  tests the scenario where__PUT index__"settings": {_"number_of_replicas": 0,_"number_of_shards": 1____PUT index/_settings__"number_of_replicas": 1,_"index.routing.allocation.include._name": "{node-name}";public void testExecuteReplicasNotAllocatedOnSingleNode() {_        Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20))__        Map<String, String> requires = Collections.singletonMap("_name", "node1")__        Settings.Builder existingSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT.id)_            .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID())__        Settings.Builder expectedSettings = Settings.builder()__        Settings.Builder node1Settings = Settings.builder()__        Settings.Builder node2Settings = Settings.builder()__        requires.forEach((k, v) -> {_            expectedSettings.put(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING.getKey() + k, v)__        })___        IndexRoutingTable.Builder indexRoutingTable = IndexRoutingTable.builder(index)_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), "node1", true, ShardRoutingState.STARTED))_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), null, null, false, ShardRoutingState.UNASSIGNED,_                new UnassignedInfo(Reason.REPLICA_ADDED, "no attempt")))___        AllocationRoutedStep step = createRandomInstance()__        assertAllocateStatus(index, 1, 1, step, existingSettings, node1Settings, node2Settings, indexRoutingTable,_            new ClusterStateWaitStep.Result(false, new AllocationRoutedStep.Info(1, -1, false)))__    };this,tests,the,scenario,where,put,index,settings,0,1,put,index,1,index,routing,allocation,include,node,name;public,void,test,execute,replicas,not,allocated,on,single,node,index,index,new,index,random,alpha,of,length,between,1,20,random,alpha,of,length,between,1,20,map,string,string,requires,collections,singleton,map,node1,settings,builder,existing,settings,settings,builder,put,index,meta,data,version,current,id,put,index,meta,data,index,get,uuid,settings,builder,expected,settings,settings,builder,settings,builder,node1settings,settings,builder,settings,builder,node2settings,settings,builder,requires,for,each,k,v,expected,settings,put,index,meta,data,get,key,k,v,index,routing,table,builder,index,routing,table,index,routing,table,builder,index,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,node1,true,shard,routing,state,started,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,null,null,false,shard,routing,state,unassigned,new,unassigned,info,reason,no,attempt,allocation,routed,step,step,create,random,instance,assert,allocate,status,index,1,1,step,existing,settings,node1settings,node2settings,index,routing,table,new,cluster,state,wait,step,result,false,new,allocation,routed,step,info,1,1,false
AllocationRoutedStepTests -> public void testExecuteReplicasNotAllocatedOnSingleNode();1541622261;this  tests the scenario where__PUT index__"settings": {_"number_of_replicas": 0,_"number_of_shards": 1____PUT index/_settings__"number_of_replicas": 1,_"index.routing.allocation.include._name": "{node-name}";public void testExecuteReplicasNotAllocatedOnSingleNode() {_        Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20))__        Map<String, String> requires = Collections.singletonMap("_name", "node1")__        Settings.Builder existingSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT.id)_            .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID())__        Settings.Builder expectedSettings = Settings.builder()__        Settings.Builder node1Settings = Settings.builder()__        Settings.Builder node2Settings = Settings.builder()__        requires.forEach((k, v) -> {_            expectedSettings.put(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING.getKey() + k, v)__        })___        IndexRoutingTable.Builder indexRoutingTable = IndexRoutingTable.builder(index)_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), "node1", true, ShardRoutingState.STARTED))_            .addShard(TestShardRouting.newShardRouting(new ShardId(index, 0), null, null, false, ShardRoutingState.UNASSIGNED,_                new UnassignedInfo(Reason.REPLICA_ADDED, "no attempt")))___        AllocationRoutedStep step = createRandomInstance()__        assertAllocateStatus(index, 1, 1, step, existingSettings, node1Settings, node2Settings, indexRoutingTable,_            new ClusterStateWaitStep.Result(false, new AllocationRoutedStep.Info(1, -1, false)))__    };this,tests,the,scenario,where,put,index,settings,0,1,put,index,1,index,routing,allocation,include,node,name;public,void,test,execute,replicas,not,allocated,on,single,node,index,index,new,index,random,alpha,of,length,between,1,20,random,alpha,of,length,between,1,20,map,string,string,requires,collections,singleton,map,node1,settings,builder,existing,settings,settings,builder,put,index,meta,data,version,current,id,put,index,meta,data,index,get,uuid,settings,builder,expected,settings,settings,builder,settings,builder,node1settings,settings,builder,settings,builder,node2settings,settings,builder,requires,for,each,k,v,expected,settings,put,index,meta,data,get,key,k,v,index,routing,table,builder,index,routing,table,index,routing,table,builder,index,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,node1,true,shard,routing,state,started,add,shard,test,shard,routing,new,shard,routing,new,shard,id,index,0,null,null,false,shard,routing,state,unassigned,new,unassigned,info,reason,no,attempt,allocation,routed,step,step,create,random,instance,assert,allocate,status,index,1,1,step,existing,settings,node1settings,node2settings,index,routing,table,new,cluster,state,wait,step,result,false,new,allocation,routed,step,info,1,1,false
