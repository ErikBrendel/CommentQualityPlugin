commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testDefaultConstructor() {     ModelSizeStats stats = new ModelSizeStats.Builder("foo").build().     assertEquals(0, stats.getModelBytes()).     assertEquals(0, stats.getTotalByFieldCount()).     assertEquals(0, stats.getTotalOverFieldCount()).     assertEquals(0, stats.getTotalPartitionFieldCount()).     assertEquals(0, stats.getBucketAllocationFailuresCount()).     assertEquals(MemoryStatus.OK, stats.getMemoryStatus()). }
false;public;0;7;;public void testSetMemoryStatus_GivenNull() {     ModelSizeStats.Builder stats = new ModelSizeStats.Builder("foo").     NullPointerException ex = expectThrows(NullPointerException.class, () -> stats.setMemoryStatus(null)).     assertEquals("[memory_status] must not be null", ex.getMessage()). }
false;public;0;7;;public void testSetMemoryStatus_GivenSoftLimit() {     ModelSizeStats.Builder stats = new ModelSizeStats.Builder("foo").     stats.setMemoryStatus(MemoryStatus.SOFT_LIMIT).     assertEquals(MemoryStatus.SOFT_LIMIT, stats.build().getMemoryStatus()). }
false;protected;0;4;;@Override protected ModelSizeStats createTestInstance() {     return createRandomized(). }
false;public,static;0;28;;public static ModelSizeStats createRandomized() {     ModelSizeStats.Builder stats = new ModelSizeStats.Builder("foo").     if (randomBoolean()) {         stats.setBucketAllocationFailuresCount(randomNonNegativeLong()).     }     if (randomBoolean()) {         stats.setModelBytes(randomNonNegativeLong()).     }     if (randomBoolean()) {         stats.setTotalByFieldCount(randomNonNegativeLong()).     }     if (randomBoolean()) {         stats.setTotalOverFieldCount(randomNonNegativeLong()).     }     if (randomBoolean()) {         stats.setTotalPartitionFieldCount(randomNonNegativeLong()).     }     if (randomBoolean()) {         stats.setLogTime(new Date(TimeValue.parseTimeValue(randomTimeValue(), "test").millis())).     }     if (randomBoolean()) {         stats.setTimestamp(new Date(TimeValue.parseTimeValue(randomTimeValue(), "test").millis())).     }     if (randomBoolean()) {         stats.setMemoryStatus(randomFrom(MemoryStatus.values())).     }     return stats.build(). }
false;protected;0;4;;@Override protected Reader<ModelSizeStats> instanceReader() {     return ModelSizeStats::new. }
false;protected;1;4;;@Override protected ModelSizeStats doParseInstance(XContentParser parser) {     return ModelSizeStats.STRICT_PARSER.apply(parser, null).build(). }
false;public;0;4;;public void testId() {     ModelSizeStats stats = new ModelSizeStats.Builder("job-foo").setLogTime(new Date(100)).build().     assertEquals("job-foo_model_size_stats_100", stats.getId()). }
false;public;0;9;;public void testStrictParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> ModelSizeStats.STRICT_PARSER.apply(parser, null)).         assertThat(e.getMessage(), containsString("unknown field [foo]")).     } }
false;public;0;6;;public void testLenientParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         ModelSizeStats.LENIENT_PARSER.apply(parser, null).     } }
