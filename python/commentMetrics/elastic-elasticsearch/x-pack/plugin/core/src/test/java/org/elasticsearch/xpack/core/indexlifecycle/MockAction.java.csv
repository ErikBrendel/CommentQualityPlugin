commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static MockAction parse(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.endObject().     return builder. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;3;;public List<Step> getSteps() {     return steps. }
false;public;0;4;;@Override public boolean isSafeAction() {     return safe. }
false;public;3;4;;@Override public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {     return new ArrayList<>(steps). }
false;public;1;4;;@Override public List<StepKey> toStepKeys(String phase) {     return steps.stream().map(Step::getKey).collect(Collectors.toList()). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeList(steps.stream().map(MockStep::new).collect(Collectors.toList())).     out.writeBoolean(safe). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(steps, safe). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     MockAction other = (MockAction) obj.     return Objects.equals(steps, other.steps) && Objects.equals(safe, other.safe). }
