commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;protected;1;7;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("node.data", true).put(LicenseService.SELF_GENERATED_LICENSE_TYPE.getKey(), "basic").build(). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(LocalStateCompositeXPackPlugin.class, Netty4Plugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return Arrays.asList(XPackClientPlugin.class, Netty4Plugin.class). }
false;public;0;58;;public void testStartBasicLicense() throws Exception {     LicensingClient licensingClient = new LicensingClient(client()).     License license = TestUtils.generateSignedLicense("trial", License.VERSION_CURRENT, -1, TimeValue.timeValueHours(24)).     licensingClient.preparePutLicense(license).get().     assertBusy(() -> {         GetLicenseResponse getLicenseResponse = licensingClient.prepareGetLicense().get().         assertEquals("trial", getLicenseResponse.license().type()).     }).     // Testing that you can start a basic license when you have no license     if (randomBoolean()) {         licensingClient.prepareDeleteLicense().get().         assertNull(licensingClient.prepareGetLicense().get().license()).     }     RestClient restClient = getRestClient().     Response response = restClient.performRequest(new Request("GET", "/_license/basic_status")).     String body = Streams.copyToString(new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8)).     assertEquals(200, response.getStatusLine().getStatusCode()).     assertEquals("{\"eligible_to_start_basic\":true}", body).     Request ackRequest = new Request("POST", "/_license/start_basic").     ackRequest.addParameter("acknowledge", "true").     Response response2 = restClient.performRequest(ackRequest).     String body2 = Streams.copyToString(new InputStreamReader(response2.getEntity().getContent(), StandardCharsets.UTF_8)).     assertEquals(200, response2.getStatusLine().getStatusCode()).     assertTrue(body2.contains("\"acknowledged\":true")).     assertTrue(body2.contains("\"basic_was_started\":true")).     assertBusy(() -> {         GetLicenseResponse currentLicense = licensingClient.prepareGetLicense().get().         assertEquals("basic", currentLicense.license().type()).     }).     long expirationMillis = licensingClient.prepareGetLicense().get().license().expiryDate().     assertEquals(LicenseService.BASIC_SELF_GENERATED_LICENSE_EXPIRATION_MILLIS, expirationMillis).     Response response3 = restClient.performRequest(new Request("GET", "/_license")).     String body3 = Streams.copyToString(new InputStreamReader(response3.getEntity().getContent(), StandardCharsets.UTF_8)).     assertTrue(body3.contains("\"type\" : \"basic\"")).     assertFalse(body3.contains("expiry_date")).     assertFalse(body3.contains("expiry_date_in_millis")).     Response response4 = restClient.performRequest(new Request("GET", "/_license/basic_status")).     String body4 = Streams.copyToString(new InputStreamReader(response4.getEntity().getContent(), StandardCharsets.UTF_8)).     assertEquals(200, response3.getStatusLine().getStatusCode()).     assertEquals("{\"eligible_to_start_basic\":false}", body4).     ResponseException ex = expectThrows(ResponseException.class, () -> restClient.performRequest(new Request("POST", "/_license/start_basic"))).     Response response5 = ex.getResponse().     String body5 = Streams.copyToString(new InputStreamReader(response5.getEntity().getContent(), StandardCharsets.UTF_8)).     assertEquals(403, response5.getStatusLine().getStatusCode()).     assertTrue(body5.contains("\"basic_was_started\":false")).     assertTrue(body5.contains("\"acknowledged\":true")).     assertTrue(body5.contains("\"error_message\":\"Operation failed: Current license is basic.\"")). }
false;public;0;19;;public void testUnacknowledgedStartBasicLicense() throws Exception {     LicensingClient licensingClient = new LicensingClient(client()).     License license = TestUtils.generateSignedLicense("trial", License.VERSION_CURRENT, -1, TimeValue.timeValueHours(24)).     licensingClient.preparePutLicense(license).get().     assertBusy(() -> {         GetLicenseResponse getLicenseResponse = licensingClient.prepareGetLicense().get().         assertEquals("trial", getLicenseResponse.license().type()).     }).     Response response2 = getRestClient().performRequest(new Request("POST", "/_license/start_basic")).     String body2 = Streams.copyToString(new InputStreamReader(response2.getEntity().getContent(), StandardCharsets.UTF_8)).     assertEquals(200, response2.getStatusLine().getStatusCode()).     assertTrue(body2.contains("\"acknowledged\":false")).     assertTrue(body2.contains("\"basic_was_started\":false")).     assertTrue(body2.contains("\"error_message\":\"Operation failed: Needs acknowledgement.\"")).     assertTrue(body2.contains("\"message\":\"This license update requires acknowledgement. To acknowledge the license, " + "please read the following messages and call /start_basic again, this time with the \\\"acknowledge=true\\\"")). }
