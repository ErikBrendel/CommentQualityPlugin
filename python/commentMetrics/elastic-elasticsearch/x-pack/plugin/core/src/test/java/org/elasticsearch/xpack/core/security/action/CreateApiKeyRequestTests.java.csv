commented;modifiers;parameterAmount;loc;comment;code
false;public;0;53;;public void testNameValidation() {     final String name = randomAlphaOfLengthBetween(1, 256).     CreateApiKeyRequest request = new CreateApiKeyRequest().     ActionRequestValidationException ve = request.validate().     assertNotNull(ve).     assertThat(ve.validationErrors().size(), is(1)).     assertThat(ve.validationErrors().get(0), containsString("name is required")).     request.setName(name).     ve = request.validate().     assertNull(ve).     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> request.setName("")).     assertThat(e.getMessage(), containsString("name must not be null or empty")).     e = expectThrows(IllegalArgumentException.class, () -> request.setName(null)).     assertThat(e.getMessage(), containsString("name must not be null or empty")).     request.setName(randomAlphaOfLength(257)).     ve = request.validate().     assertNotNull(ve).     assertThat(ve.validationErrors().size(), is(1)).     assertThat(ve.validationErrors().get(0), containsString("name may not be more than 256 characters long")).     request.setName(" leading space").     ve = request.validate().     assertNotNull(ve).     assertThat(ve.validationErrors().size(), is(1)).     assertThat(ve.validationErrors().get(0), containsString("name may not begin or end with whitespace")).     request.setName("trailing space ").     ve = request.validate().     assertNotNull(ve).     assertThat(ve.validationErrors().size(), is(1)).     assertThat(ve.validationErrors().get(0), containsString("name may not begin or end with whitespace")).     request.setName(" leading and trailing space ").     ve = request.validate().     assertNotNull(ve).     assertThat(ve.validationErrors().size(), is(1)).     assertThat(ve.validationErrors().get(0), containsString("name may not begin or end with whitespace")).     request.setName("inner space").     ve = request.validate().     assertNull(ve).     request.setName("_foo").     ve = request.validate().     assertNotNull(ve).     assertThat(ve.validationErrors().size(), is(1)).     assertThat(ve.validationErrors().get(0), containsString("name may not begin with an underscore")). }
false;public;0;33;;public void testSerialization() throws IOException {     final String name = randomAlphaOfLengthBetween(1, 256).     final TimeValue expiration = randomBoolean() ? null : TimeValue.parseTimeValue(randomTimeValue(), "test serialization of create api key").     final WriteRequest.RefreshPolicy refreshPolicy = randomFrom(WriteRequest.RefreshPolicy.values()).     final int numDescriptors = randomIntBetween(0, 4).     final List<RoleDescriptor> descriptorList = new ArrayList<>().     for (int i = 0. i < numDescriptors. i++) {         descriptorList.add(new RoleDescriptor("role_" + i, new String[] { "all" }, null, null)).     }     final CreateApiKeyRequest request = new CreateApiKeyRequest().     request.setName(name).     request.setExpiration(expiration).     if (refreshPolicy != request.getRefreshPolicy() || randomBoolean()) {         request.setRefreshPolicy(refreshPolicy).     }     if (descriptorList.isEmpty() == false || randomBoolean()) {         request.setRoleDescriptors(descriptorList).     }     try (BytesStreamOutput out = new BytesStreamOutput()) {         request.writeTo(out).         try (StreamInput in = out.bytes().streamInput()) {             final CreateApiKeyRequest serialized = new CreateApiKeyRequest(in).             assertEquals(name, serialized.getName()).             assertEquals(expiration, serialized.getExpiration()).             assertEquals(refreshPolicy, serialized.getRefreshPolicy()).             assertEquals(descriptorList, serialized.getRoleDescriptors()).         }     } }
