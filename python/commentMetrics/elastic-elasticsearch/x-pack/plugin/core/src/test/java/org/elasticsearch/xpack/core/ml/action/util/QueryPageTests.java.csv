commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected QueryPage<Influencer> createTestInstance() {     int hitCount = randomIntBetween(0, 10).     ArrayList<Influencer> hits = new ArrayList<>().     for (int i = 0. i < hitCount. i++) {         hits.add(new Influencer(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20), new Date(), randomNonNegativeLong())).     }     return new QueryPage<>(hits, hitCount, new ParseField("test")). }
false;protected;0;4;;@Override protected Reader<QueryPage<Influencer>> instanceReader() {     return (in) -> new QueryPage<>(in, Influencer::new). }
false;protected;1;19;;@Override protected QueryPage<Influencer> mutateInstance(QueryPage<Influencer> instance) throws IOException {     ParseField resultsField = instance.getResultsField().     List<Influencer> page = instance.results().     long count = instance.count().     switch(between(0, 1)) {         case 0:             page = new ArrayList<>(page).             page.add(new Influencer(randomAlphaOfLengthBetween(10, 20), randomAlphaOfLengthBetween(10, 20), randomAlphaOfLengthBetween(10, 20), new Date(randomNonNegativeLong()), randomNonNegativeLong())).             break.         case 1:             count += between(1, 20).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new QueryPage<>(page, count, resultsField). }
