commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setuo() throws Exception {     license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(12)).     schedule = LicenseService.nextLicenseCheck(license). }
false;public;0;5;;public void testEnabledLicenseSchedule() throws Exception {     int expiryDuration = (int) (license.expiryDate() - license.issueDate()).     long triggeredTime = license.issueDate() + between(0, expiryDuration).     assertThat(schedule.nextScheduledTimeAfter(license.issueDate(), triggeredTime), equalTo(license.expiryDate())). }
false;public;0;6;;public void testGraceLicenseSchedule() throws Exception {     long triggeredTime = license.expiryDate() + between(1, ((int) LicenseService.GRACE_PERIOD_DURATION.getMillis())).     assertThat(schedule.nextScheduledTimeAfter(license.issueDate(), triggeredTime), equalTo(license.expiryDate() + LicenseService.GRACE_PERIOD_DURATION.getMillis())). }
false;public;0;6;;public void testExpiredLicenseSchedule() throws Exception {     long triggeredTime = license.expiryDate() + LicenseService.GRACE_PERIOD_DURATION.getMillis() + randomIntBetween(1, 1000).     assertThat(schedule.nextScheduledTimeAfter(license.issueDate(), triggeredTime), equalTo(-1L)). }
false;public;0;5;;public void testInvalidLicenseSchedule() throws Exception {     long triggeredTime = license.issueDate() - randomIntBetween(1, 1000).     assertThat(schedule.nextScheduledTimeAfter(triggeredTime, triggeredTime), equalTo(license.issueDate())). }
