commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testGetMessage_WithFormatStrings() {     String formattedMessage = DataFrameMessages.getMessage(DataFrameMessages.REST_STOP_TRANSFORM_WAIT_FOR_COMPLETION_TIMEOUT, "30s", "my_transform").     assertEquals("Timed out after [30s] while waiting for data frame transform [my_transform] to stop", formattedMessage). }
false;public;0;16;;public void testMessageProperFormat() throws IllegalArgumentException, IllegalAccessException {     Field[] declaredFields = DataFrameMessages.class.getFields().     int checkedMessages = 0.     for (Field field : declaredFields) {         int modifiers = field.getModifiers().         if (java.lang.reflect.Modifier.isStatic(modifiers) && java.lang.reflect.Modifier.isFinal(modifiers) && field.getType().isAssignableFrom(String.class)) {             assertSingleMessage((String) field.get(DataFrameMessages.class)).             ++checkedMessages.         }     }     assertTrue(checkedMessages > 0).     logger.info("Checked {} messages", checkedMessages). }
false;public;0;5;;public void testAssertSingleMessage() {     expectThrows(RuntimeException.class, () -> innerAssertSingleMessage("missing zero position {1} {1}")).     expectThrows(RuntimeException.class, () -> innerAssertSingleMessage("incomplete {}")).     expectThrows(RuntimeException.class, () -> innerAssertSingleMessage("count from 1 {1}")). }
false;private;1;9;;private void assertSingleMessage(String message) {     // nicely encapsulate parsing errors thrown by MessageFormat itself     try {         innerAssertSingleMessage(message).     } catch (Exception e) {         fail(e.getMessage()).     } }
false;private;1;16;;private void innerAssertSingleMessage(String message) {     MessageFormat messageWithNoArguments = new MessageFormat(message, Locale.ROOT).     int numberOfArguments = messageWithNoArguments.getFormats().length.     List<String> args = new ArrayList<>().     for (int i = 0. i < numberOfArguments. ++i) {         args.add(randomAlphaOfLength(5)).     }     String properFormatedMessage = new MessageFormat(message, Locale.ROOT).format(args.toArray(new String[0])).     for (String arg : args) {         if (properFormatedMessage.contains(arg) == false) {             throw new RuntimeException("Message check: [" + message + "] failed, missing argument").         }     } }
