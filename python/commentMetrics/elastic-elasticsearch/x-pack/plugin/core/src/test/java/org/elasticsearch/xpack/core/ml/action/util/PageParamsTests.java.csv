commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected PageParams doParseInstance(XContentParser parser) {     return PageParams.PARSER.apply(parser, null). }
false;protected;0;6;;@Override protected PageParams createTestInstance() {     int from = randomInt(10000).     int size = randomInt(10000).     return new PageParams(from, size). }
false;protected;0;4;;@Override protected Reader<PageParams> instanceReader() {     return PageParams::new. }
false;public;0;4;;public void testValidate_GivenFromIsMinusOne() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new PageParams(-1, 100)).     assertEquals("Parameter [from] cannot be < 0", e.getMessage()). }
false;public;0;4;;public void testValidate_GivenFromIsMinusTen() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new PageParams(-10, 100)).     assertEquals("Parameter [from] cannot be < 0", e.getMessage()). }
false;public;0;4;;public void testValidate_GivenSizeIsMinusOne() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new PageParams(0, -1)).     assertEquals("Parameter [size] cannot be < 0", e.getMessage()). }
false;public;0;4;;public void testValidate_GivenSizeIsMinusHundred() {     IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new PageParams(0, -100)).     assertEquals("Parameter [size] cannot be < 0", e.getMessage()). }
false;protected;1;17;;@Override protected PageParams mutateInstance(PageParams instance) {     int from = instance.getFrom().     int size = instance.getSize().     int amountToAdd = between(1, 20).     switch(between(0, 1)) {         case 0:             from += amountToAdd.             break.         case 1:             size += amountToAdd.             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new PageParams(from, size). }
