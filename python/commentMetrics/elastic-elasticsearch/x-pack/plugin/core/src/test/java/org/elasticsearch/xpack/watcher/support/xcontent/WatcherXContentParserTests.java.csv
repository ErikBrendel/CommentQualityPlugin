commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;public void testThatRedactedSecretsThrowException() throws Exception {     String fieldName = randomAlphaOfLength(10).     try (XContentBuilder builder = jsonBuilder()) {         builder.startObject().field(fieldName, "::es_redacted::").endObject().         try (XContentParser xContentParser = XContentType.JSON.xContent().createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, Strings.toString(builder))) {             xContentParser.nextToken().             xContentParser.nextToken().             assertThat(xContentParser.currentName(), is(fieldName)).             xContentParser.nextToken().             assertThat(xContentParser.currentToken(), is(XContentParser.Token.VALUE_STRING)).             ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC).             WatcherXContentParser parser = new WatcherXContentParser(xContentParser, now, null, false).             ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> WatcherXContentParser.secretOrNull(parser)).             assertThat(e.getMessage(), is("found redacted password in field [" + fieldName + "]")).         }     } }
