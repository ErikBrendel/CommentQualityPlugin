commented;modifiers;parameterAmount;loc;comment;code
false;static;0;7;;static IndexLifecycleExplainResponse randomIndexExplainResponse() {     if (frequently()) {         return randomManagedIndexExplainResponse().     } else {         return randomUnmanagedIndexExplainResponse().     } }
false;private,static;0;3;;private static IndexLifecycleExplainResponse randomUnmanagedIndexExplainResponse() {     return IndexLifecycleExplainResponse.newUnmanagedIndexResponse(randomAlphaOfLength(10)). }
false;private,static;0;15;;private static IndexLifecycleExplainResponse randomManagedIndexExplainResponse() {     boolean stepNull = randomBoolean().     return IndexLifecycleExplainResponse.newManagedIndexResponse(randomAlphaOfLength(10), randomAlphaOfLength(10), randomBoolean() ? null : randomNonNegativeLong(), stepNull ? null : randomAlphaOfLength(10), stepNull ? null : randomAlphaOfLength(10), stepNull ? null : randomAlphaOfLength(10), randomBoolean() ? null : randomAlphaOfLength(10), stepNull ? null : randomNonNegativeLong(), stepNull ? null : randomNonNegativeLong(), stepNull ? null : randomNonNegativeLong(), randomBoolean() ? null : new BytesArray(new RandomStepInfo(() -> randomAlphaOfLength(10)).toString()), randomBoolean() ? null : PhaseExecutionInfoTests.randomPhaseExecutionInfo("")). }
false;public;0;18;;public void testInvalidStepDetails() {     final int numNull = randomIntBetween(1, 3).     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> IndexLifecycleExplainResponse.newManagedIndexResponse(randomAlphaOfLength(10), randomAlphaOfLength(10), randomBoolean() ? null : randomNonNegativeLong(), (numNull == 1) ? null : randomAlphaOfLength(10), (numNull == 2) ? null : randomAlphaOfLength(10), (numNull == 3) ? null : randomAlphaOfLength(10), randomBoolean() ? null : randomAlphaOfLength(10), randomBoolean() ? null : randomNonNegativeLong(), randomBoolean() ? null : randomNonNegativeLong(), randomBoolean() ? null : randomNonNegativeLong(), randomBoolean() ? null : new BytesArray(new RandomStepInfo(() -> randomAlphaOfLength(10)).toString()), randomBoolean() ? null : PhaseExecutionInfoTests.randomPhaseExecutionInfo(""))).     assertThat(exception.getMessage(), startsWith("managed index response must have complete step details")).     assertThat(exception.getMessage(), containsString("=null")). }
false;protected;0;4;;@Override protected IndexLifecycleExplainResponse createTestInstance() {     return randomIndexExplainResponse(). }
false;protected;0;4;;@Override protected Reader<IndexLifecycleExplainResponse> instanceReader() {     return IndexLifecycleExplainResponse::new. }
false;protected;1;4;;@Override protected IndexLifecycleExplainResponse doParseInstance(XContentParser parser) throws IOException {     return IndexLifecycleExplainResponse.PARSER.apply(parser, null). }
false;protected;1;80;;@Override protected IndexLifecycleExplainResponse mutateInstance(IndexLifecycleExplainResponse instance) throws IOException {     String index = instance.getIndex().     String policy = instance.getPolicyName().     String phase = instance.getPhase().     String action = instance.getAction().     String step = instance.getStep().     String failedStep = instance.getFailedStep().     Long policyTime = instance.getLifecycleDate().     Long phaseTime = instance.getPhaseTime().     Long actionTime = instance.getActionTime().     Long stepTime = instance.getStepTime().     boolean managed = instance.managedByILM().     BytesReference stepInfo = instance.getStepInfo().     PhaseExecutionInfo phaseExecutionInfo = instance.getPhaseExecutionInfo().     if (managed) {         switch(between(0, 10)) {             case 0:                 index = index + randomAlphaOfLengthBetween(1, 5).                 break.             case 1:                 policy = policy + randomAlphaOfLengthBetween(1, 5).                 break.             case 2:                 phase = randomAlphaOfLengthBetween(1, 5).                 action = randomAlphaOfLengthBetween(1, 5).                 step = randomAlphaOfLengthBetween(1, 5).                 break.             case 3:                 phaseTime = randomValueOtherThan(phaseTime, () -> randomLongBetween(0, 100000)).                 break.             case 4:                 actionTime = randomValueOtherThan(actionTime, () -> randomLongBetween(0, 100000)).                 break.             case 5:                 stepTime = randomValueOtherThan(stepTime, () -> randomLongBetween(0, 100000)).                 break.             case 6:                 if (Strings.hasLength(failedStep) == false) {                     failedStep = randomAlphaOfLength(10).                 } else if (randomBoolean()) {                     failedStep = failedStep + randomAlphaOfLengthBetween(1, 5).                 } else {                     failedStep = null.                 }                 break.             case 7:                 policyTime = randomValueOtherThan(policyTime, () -> randomLongBetween(0, 100000)).                 break.             case 8:                 if (Strings.hasLength(stepInfo) == false) {                     stepInfo = new BytesArray(randomByteArrayOfLength(100)).                 } else if (randomBoolean()) {                     stepInfo = randomValueOtherThan(stepInfo, () -> new BytesArray(new RandomStepInfo(() -> randomAlphaOfLength(10)).toString())).                 } else {                     stepInfo = null.                 }                 break.             case 9:                 phaseExecutionInfo = randomValueOtherThan(phaseExecutionInfo, () -> PhaseExecutionInfoTests.randomPhaseExecutionInfo("")).                 break.             case 10:                 return IndexLifecycleExplainResponse.newUnmanagedIndexResponse(index).             default:                 throw new AssertionError("Illegal randomisation branch").         }         return IndexLifecycleExplainResponse.newManagedIndexResponse(index, policy, policyTime, phase, action, step, failedStep, phaseTime, actionTime, stepTime, stepInfo, phaseExecutionInfo).     } else {         switch(between(0, 1)) {             case 0:                 return IndexLifecycleExplainResponse.newUnmanagedIndexResponse(index + randomAlphaOfLengthBetween(1, 5)).             case 1:                 return randomManagedIndexExplainResponse().             default:                 throw new AssertionError("Illegal randomisation branch").         }     } }
false;protected;0;4;;protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Arrays.asList(new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new))). }
false;protected;0;6;;@Override protected NamedXContentRegistry xContentRegistry() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables()).     entries.add(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(MockAction.NAME), MockAction::parse)).     return new NamedXContentRegistry(entries). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(key, value).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(key, value). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     RandomStepInfo other = (RandomStepInfo) obj.     return Objects.equals(key, other.key) && Objects.equals(value, other.value). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
