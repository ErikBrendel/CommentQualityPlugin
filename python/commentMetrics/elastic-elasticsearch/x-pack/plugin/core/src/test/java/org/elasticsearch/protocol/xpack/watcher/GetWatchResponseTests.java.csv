commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String[] getShuffleFieldsExceptions() {     return SHUFFLE_FIELDS_EXCEPTION. }
false;protected;0;4;;@Override protected ToXContent.Params getToXContentParams() {     return new ToXContent.MapParams(Collections.singletonMap("hide_headers", "false")). }
false;protected;0;4;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     return f -> f.contains("watch") || f.contains("actions") || f.contains("headers"). }
false;protected;2;29;;@Override protected void assertEqualInstances(GetWatchResponse expectedInstance, GetWatchResponse newInstance) {     if (expectedInstance.isFound() && expectedInstance.getSource().getContentType() != newInstance.getSource().getContentType()) {         /**          * The {@link GetWatchResponse#getContentType()} depends on the content type that          * was used to serialize the main object so we use the same content type than the          * <code>expectedInstance</code> to translate the watch of the <code>newInstance</code>.          */         XContent from = XContentFactory.xContent(newInstance.getSource().getContentType()).         XContent to = XContentFactory.xContent(expectedInstance.getSource().getContentType()).         final BytesReference newSource.         // It is safe to use EMPTY here because this never uses namedObject         try (InputStream stream = newInstance.getSource().getBytes().streamInput().             XContentParser parser = XContentFactory.xContent(from.type()).createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION, stream)) {             parser.nextToken().             XContentBuilder builder = XContentFactory.contentBuilder(to.type()).             builder.copyCurrentStructure(parser).             newSource = BytesReference.bytes(builder).         } catch (IOException e) {             throw new AssertionError(e).         }         newInstance = new GetWatchResponse(newInstance.getId(), newInstance.getVersion(), newInstance.getSeqNo(), newInstance.getPrimaryTerm(), newInstance.getStatus(), new XContentSource(newSource, expectedInstance.getSource().getContentType())).     }     super.assertEqualInstances(expectedInstance, newInstance). }
false;protected;0;4;;@Override protected GetWatchResponse createBlankInstance() {     return new GetWatchResponse(). }
false;protected;0;13;;@Override protected GetWatchResponse createTestInstance() {     String id = randomAlphaOfLength(10).     if (rarely()) {         return new GetWatchResponse(id).     }     long version = randomLongBetween(0, 10).     long seqNo = randomNonNegativeLong().     long primaryTerm = randomLongBetween(1, 2000).     WatchStatus status = randomWatchStatus().     BytesReference source = simpleWatch().     return new GetWatchResponse(id, version, seqNo, primaryTerm, status, new XContentSource(source, XContentType.JSON)). }
false;private,static;0;22;;private static BytesReference simpleWatch() {     try {         XContentBuilder builder = XContentBuilder.builder(XContentType.JSON.xContent()).         builder.startObject().startObject("trigger").startObject("schedule").field("interval", "10h").endObject().endObject().startObject("input").startObject("none").endObject().endObject().startObject("actions").startObject("logme").field("text", "{{ctx.payload}}").endObject().endObject().endObject().         return BytesReference.bytes(builder).     } catch (IOException e) {         throw new AssertionError(e).     } }
false;private,static;0;28;;private static WatchStatus randomWatchStatus() {     long version = randomLongBetween(-1, Long.MAX_VALUE).     WatchStatus.State state = new WatchStatus.State(randomBoolean(), DateUtils.nowWithMillisResolution()).     ExecutionState executionState = randomFrom(ExecutionState.values()).     ZonedDateTime lastChecked = rarely() ? null : DateUtils.nowWithMillisResolution().     ZonedDateTime lastMetCondition = rarely() ? null : DateUtils.nowWithMillisResolution().     int size = randomIntBetween(0, 5).     Map<String, ActionStatus> actionMap = new HashMap<>().     for (int i = 0. i < size. i++) {         ActionStatus.AckStatus ack = new ActionStatus.AckStatus(DateUtils.nowWithMillisResolution(), randomFrom(ActionStatus.AckStatus.State.values())).         ActionStatus actionStatus = new ActionStatus(ack, randomBoolean() ? null : randomExecution(), randomBoolean() ? null : randomExecution(), randomBoolean() ? null : randomThrottle()).         actionMap.put(randomAlphaOfLength(10), actionStatus).     }     Map<String, String> headers = new HashMap<>().     int headerSize = randomIntBetween(0, 5).     for (int i = 0. i < headerSize. i++) {         headers.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(1, 10)).     }     return new WatchStatus(version, state, executionState, lastChecked, lastMetCondition, actionMap, headers). }
false;private,static;0;3;;private static ActionStatus.Throttle randomThrottle() {     return new ActionStatus.Throttle(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20)). }
false;private,static;0;9;;private static ActionStatus.Execution randomExecution() {     if (randomBoolean()) {         return null.     } else if (randomBoolean()) {         return ActionStatus.Execution.failure(DateUtils.nowWithMillisResolution(), randomAlphaOfLengthBetween(10, 20)).     } else {         return ActionStatus.Execution.successful(DateUtils.nowWithMillisResolution()).     } }
false;public;1;4;;@Override public org.elasticsearch.client.watcher.GetWatchResponse doHlrcParseInstance(XContentParser parser) throws IOException {     return org.elasticsearch.client.watcher.GetWatchResponse.fromXContent(parser). }
false;public;1;9;;@Override public GetWatchResponse convertHlrcToInternal(org.elasticsearch.client.watcher.GetWatchResponse instance) {     if (instance.isFound()) {         return new GetWatchResponse(instance.getId(), instance.getVersion(), instance.getSeqNo(), instance.getPrimaryTerm(), convertHlrcToInternal(instance.getStatus()), new XContentSource(instance.getSource(), instance.getContentType())).     } else {         return new GetWatchResponse(instance.getId()).     } }
false;private,static;1;11;;private static WatchStatus convertHlrcToInternal(org.elasticsearch.client.watcher.WatchStatus status) {     final Map<String, ActionStatus> actions = new HashMap<>().     for (Map.Entry<String, org.elasticsearch.client.watcher.ActionStatus> entry : status.getActions().entrySet()) {         actions.put(entry.getKey(), convertHlrcToInternal(entry.getValue())).     }     return new WatchStatus(status.version(), convertHlrcToInternal(status.state()), status.getExecutionState() == null ? null : convertHlrcToInternal(status.getExecutionState()), status.lastChecked(), status.lastMetCondition(), actions, status.getHeaders()). }
false;private,static;1;7;;private static ActionStatus convertHlrcToInternal(org.elasticsearch.client.watcher.ActionStatus actionStatus) {     return new ActionStatus(convertHlrcToInternal(actionStatus.ackStatus()), actionStatus.lastExecution() == null ? null : convertHlrcToInternal(actionStatus.lastExecution()), actionStatus.lastSuccessfulExecution() == null ? null : convertHlrcToInternal(actionStatus.lastSuccessfulExecution()), actionStatus.lastThrottle() == null ? null : convertHlrcToInternal(actionStatus.lastThrottle())). }
false;private,static;1;3;;private static ActionStatus.AckStatus convertHlrcToInternal(org.elasticsearch.client.watcher.ActionStatus.AckStatus ackStatus) {     return new ActionStatus.AckStatus(ackStatus.timestamp(), convertHlrcToInternal(ackStatus.state())). }
false;private,static;1;3;;private static ActionStatus.AckStatus.State convertHlrcToInternal(org.elasticsearch.client.watcher.ActionStatus.AckStatus.State state) {     return ActionStatus.AckStatus.State.valueOf(state.name()). }
false;private,static;1;3;;private static WatchStatus.State convertHlrcToInternal(org.elasticsearch.client.watcher.WatchStatus.State state) {     return new WatchStatus.State(state.isActive(), state.getTimestamp()). }
false;private,static;1;3;;private static ExecutionState convertHlrcToInternal(org.elasticsearch.client.watcher.ExecutionState executionState) {     return ExecutionState.valueOf(executionState.name()). }
false;private,static;1;7;;private static ActionStatus.Execution convertHlrcToInternal(org.elasticsearch.client.watcher.ActionStatus.Execution execution) {     if (execution.successful()) {         return ActionStatus.Execution.successful(execution.timestamp()).     } else {         return ActionStatus.Execution.failure(execution.timestamp(), execution.reason()).     } }
false;private,static;1;3;;private static ActionStatus.Throttle convertHlrcToInternal(org.elasticsearch.client.watcher.ActionStatus.Throttle throttle) {     return new ActionStatus.Throttle(throttle.timestamp(), throttle.reason()). }
