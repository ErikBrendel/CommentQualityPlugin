commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected Settings nodeSettings(int nodeOrdinal) {     return nodeSettingsBuilder(nodeOrdinal).build(). }
false;protected;0;4;;@Override protected boolean addMockHttpTransport() {     // enable http     return false. }
false;private;1;6;;private Settings.Builder nodeSettingsBuilder(int nodeOrdinal) {     return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put("node.data", true).put("resource.reload.interval.high", // for license mode file watcher     "500ms"). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> nodePlugins() {     return Arrays.asList(LocalStateCompositeXPackPlugin.class, CommonAnalysisPlugin.class, Netty4Plugin.class). }
false;protected;0;4;;@Override protected Collection<Class<? extends Plugin>> transportClientPlugins() {     return nodePlugins(). }
false;public;0;35;;public void testClusterRestartWithLicense() throws Exception {     wipeAllLicenses().     int numNodes = randomIntBetween(1, 5).     logger.info("--> starting {} node(s)", numNodes).     internalCluster().startNodes(numNodes).     ensureGreen().     logger.info("--> put signed license").     LicensingClient licensingClient = new LicensingClient(client()).     License license = TestUtils.generateSignedLicense(TimeValue.timeValueMinutes(1)).     putLicense(license).     assertThat(licensingClient.prepareGetLicense().get().license(), equalTo(license)).     assertOperationMode(license.operationMode()).     logger.info("--> restart all nodes").     internalCluster().fullRestart().     ensureYellow().     licensingClient = new LicensingClient(client()).     logger.info("--> get and check signed license").     assertThat(licensingClient.prepareGetLicense().get().license(), equalTo(license)).     logger.info("--> remove licenses").     licensingClient.prepareDeleteLicense().get().     assertOperationMode(License.OperationMode.MISSING).     logger.info("--> restart all nodes").     internalCluster().fullRestart().     licensingClient = new LicensingClient(client()).     ensureYellow().     assertThat(licensingClient.prepareGetLicense().get().license(), nullValue()).     assertOperationMode(License.OperationMode.MISSING).     wipeAllLicenses(). }
false;public;0;20;;public void testCloudInternalLicense() throws Exception {     wipeAllLicenses().     int numNodes = randomIntBetween(1, 5).     logger.info("--> starting {} node(s)", numNodes).     internalCluster().startNodes(numNodes).     ensureGreen().     logger.info("--> put signed license").     LicensingClient licensingClient = new LicensingClient(client()).     License license = TestUtils.generateSignedLicense("cloud_internal", License.VERSION_CURRENT, System.currentTimeMillis(), TimeValue.timeValueMinutes(1)).     putLicense(license).     assertThat(licensingClient.prepareGetLicense().get().license(), equalTo(license)).     assertOperationMode(License.OperationMode.PLATINUM).     writeCloudInternalMode("gold").     assertOperationMode(License.OperationMode.GOLD).     writeCloudInternalMode("basic").     assertOperationMode(License.OperationMode.BASIC). }
false;public;0;11;;public void testClusterRestartWhileEnabled() throws Exception {     wipeAllLicenses().     internalCluster().startNode().     ensureGreen().     assertLicenseActive(true).     logger.info("--> restart node").     internalCluster().fullRestart().     ensureYellow().     logger.info("--> await node for enabled").     assertLicenseActive(true). }
false;public;0;13;;public void testClusterRestartWhileGrace() throws Exception {     wipeAllLicenses().     internalCluster().startNode().     assertLicenseActive(true).     putLicense(TestUtils.generateSignedLicense(TimeValue.timeValueMillis(0))).     ensureGreen().     assertLicenseActive(true).     logger.info("--> restart node").     internalCluster().fullRestart().     ensureYellow().     logger.info("--> await node for grace_period").     assertLicenseActive(true). }
false;public;0;13;;public void testClusterRestartWhileExpired() throws Exception {     wipeAllLicenses().     internalCluster().startNode().     ensureGreen().     assertLicenseActive(true).     putLicense(TestUtils.generateExpiredNonBasicLicense(System.currentTimeMillis() - LicenseService.GRACE_PERIOD_DURATION.getMillis())).     assertLicenseActive(false).     logger.info("--> restart node").     internalCluster().fullRestart().     ensureYellow().     logger.info("--> await node for disabled").     assertLicenseActive(false). }
false;public;0;21;;public void testClusterRestartWithOldSignature() throws Exception {     assumeFalse("Can't run in a FIPS JVM. We can't generate old licenses since PBEWithSHA1AndDESede is not available", inFipsJvm()).     wipeAllLicenses().     internalCluster().startNode().     ensureGreen().     assertLicenseActive(true).     putLicense(TestUtils.generateSignedLicenseOldSignature()).     LicensingClient licensingClient = new LicensingClient(client()).     assertThat(licensingClient.prepareGetLicense().get().license().version(), equalTo(License.VERSION_START_DATE)).     logger.info("--> restart node").     // restart so that license is updated     internalCluster().fullRestart().     ensureYellow().     logger.info("--> await node for enabled").     assertLicenseActive(true).     licensingClient = new LicensingClient(client()).     // license updated     assertThat(licensingClient.prepareGetLicense().get().license().version(), equalTo(License.VERSION_CURRENT)).     // restart once more and verify updated license is active     internalCluster().fullRestart().     ensureYellow().     logger.info("--> await node for enabled").     assertLicenseActive(true). }
false;private;1;11;;private void assertOperationMode(License.OperationMode operationMode) throws InterruptedException {     boolean success = awaitBusy(() -> {         for (XPackLicenseState licenseState : internalCluster().getDataNodeInstances(XPackLicenseState.class)) {             if (licenseState.getOperationMode() == operationMode) {                 return true.             }         }         return false.     }).     assertTrue(success). }
false;private;1;7;;private void writeCloudInternalMode(String mode) throws Exception {     for (Environment environment : internalCluster().getDataOrMasterNodeInstances(Environment.class)) {         Path licenseModePath = XPackPlugin.resolveConfigFile(environment, "license_mode").         Files.createDirectories(licenseModePath.getParent()).         Files.write(licenseModePath, mode.getBytes(StandardCharsets.UTF_8)).     } }
