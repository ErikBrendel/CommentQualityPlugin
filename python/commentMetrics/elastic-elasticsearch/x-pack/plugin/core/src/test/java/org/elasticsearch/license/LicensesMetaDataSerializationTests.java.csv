commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testXContentSerializationOneSignedLicense() throws Exception {     License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(2)).     LicensesMetaData licensesMetaData = new LicensesMetaData(license, null).     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     builder.startObject("licenses").     licensesMetaData.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     builder.endObject().     LicensesMetaData licensesMetaDataFromXContent = getLicensesMetaDataFromXContent(createParser(builder)).     assertThat(licensesMetaDataFromXContent.getLicense(), equalTo(license)).     assertNull(licensesMetaDataFromXContent.getMostRecentTrialVersion()). }
false;public;0;13;;public void testXContentSerializationOneSignedLicenseWithUsedTrial() throws Exception {     License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(2)).     LicensesMetaData licensesMetaData = new LicensesMetaData(license, Version.CURRENT).     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     builder.startObject("licenses").     licensesMetaData.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     builder.endObject().     LicensesMetaData licensesMetaDataFromXContent = getLicensesMetaDataFromXContent(createParser(builder)).     assertThat(licensesMetaDataFromXContent.getLicense(), equalTo(license)).     assertEquals(licensesMetaDataFromXContent.getMostRecentTrialVersion(), Version.CURRENT). }
false;public;0;26;;public void testLicenseMetadataParsingDoesNotSwallowOtherMetaData() throws Exception {     // makes sure LicensePlugin is registered in Custom MetaData     new Licensing(Settings.EMPTY).     License license = TestUtils.generateSignedLicense(TimeValue.timeValueHours(2)).     LicensesMetaData licensesMetaData = new LicensesMetaData(license, Version.CURRENT).     RepositoryMetaData repositoryMetaData = new RepositoryMetaData("repo", "fs", Settings.EMPTY).     RepositoriesMetaData repositoriesMetaData = new RepositoriesMetaData(Collections.singletonList(repositoryMetaData)).     final MetaData.Builder metaDataBuilder = MetaData.builder().     if (randomBoolean()) {         // random order of insertion         metaDataBuilder.putCustom(licensesMetaData.getWriteableName(), licensesMetaData).         metaDataBuilder.putCustom(repositoriesMetaData.getWriteableName(), repositoriesMetaData).     } else {         metaDataBuilder.putCustom(repositoriesMetaData.getWriteableName(), repositoriesMetaData).         metaDataBuilder.putCustom(licensesMetaData.getWriteableName(), licensesMetaData).     }     // serialize metadata     XContentBuilder builder = XContentFactory.jsonBuilder().     Params params = new ToXContent.MapParams(Collections.singletonMap(MetaData.CONTEXT_MODE_PARAM, MetaData.CONTEXT_MODE_GATEWAY)).     builder.startObject().     builder = metaDataBuilder.build().toXContent(builder, params).     builder.endObject().     // deserialize metadata again     MetaData metaData = MetaData.Builder.fromXContent(createParser(builder)).     // check that custom metadata still present     assertThat(metaData.custom(licensesMetaData.getWriteableName()), notNullValue()).     assertThat(metaData.custom(repositoriesMetaData.getWriteableName()), notNullValue()). }
false;public;0;21;;public void testXContentSerializationOneTrial() throws Exception {     long issueDate = System.currentTimeMillis().     License.Builder specBuilder = License.builder().uid(UUID.randomUUID().toString()).issuedTo("customer").maxNodes(5).issueDate(issueDate).type(randomBoolean() ? "trial" : "basic").expiryDate(issueDate + TimeValue.timeValueHours(2).getMillis()).     final License trialLicense = SelfGeneratedLicense.create(specBuilder, License.VERSION_CURRENT).     LicensesMetaData licensesMetaData = new LicensesMetaData(trialLicense, Version.CURRENT).     XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     builder.startObject("licenses").     licensesMetaData.toXContent(builder, ToXContent.EMPTY_PARAMS).     builder.endObject().     builder.endObject().     LicensesMetaData licensesMetaDataFromXContent = getLicensesMetaDataFromXContent(createParser(builder)).     assertThat(licensesMetaDataFromXContent.getLicense(), equalTo(trialLicense)).     assertEquals(licensesMetaDataFromXContent.getMostRecentTrialVersion(), Version.CURRENT). }
false;public;0;10;;public void testLicenseTombstoneFromXContext() throws Exception {     final XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     builder.startObject("licenses").     builder.nullField("license").     builder.endObject().     builder.endObject().     LicensesMetaData metaDataFromXContent = getLicensesMetaDataFromXContent(createParser(builder)).     assertThat(metaDataFromXContent.getLicense(), equalTo(LicensesMetaData.LICENSE_TOMBSTONE)). }
false;public;0;12;;public void testLicenseTombstoneWithUsedTrialFromXContext() throws Exception {     final XContentBuilder builder = XContentFactory.jsonBuilder().     builder.startObject().     builder.startObject("licenses").     builder.nullField("license").     builder.field("trial_license", Version.CURRENT.toString()).     builder.endObject().     builder.endObject().     LicensesMetaData metaDataFromXContent = getLicensesMetaDataFromXContent(createParser(builder)).     assertThat(metaDataFromXContent.getLicense(), equalTo(LicensesMetaData.LICENSE_TOMBSTONE)).     assertEquals(metaDataFromXContent.getMostRecentTrialVersion(), Version.CURRENT). }
false;private,static;1;8;;private static LicensesMetaData getLicensesMetaDataFromXContent(XContentParser parser) throws Exception {     // consume null     parser.nextToken().     // consume "licenses"     parser.nextToken().     LicensesMetaData licensesMetaDataFromXContent = LicensesMetaData.fromXContent(parser).     // consume endObject     parser.nextToken().     assertThat(parser.nextToken(), nullValue()).     return licensesMetaDataFromXContent. }
false;protected;0;7;;@Override protected NamedXContentRegistry xContentRegistry() {     return new NamedXContentRegistry(Stream.concat(new Licensing(Settings.EMPTY).getNamedXContent().stream(), ClusterModule.getNamedXWriteables().stream()).collect(Collectors.toList())). }
