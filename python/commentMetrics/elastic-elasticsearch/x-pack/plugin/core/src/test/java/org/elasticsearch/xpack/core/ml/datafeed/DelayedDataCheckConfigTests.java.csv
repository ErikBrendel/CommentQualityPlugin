commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected DelayedDataCheckConfig createTestInstance() {     return createRandomizedConfig(100). }
false;protected;0;4;;@Override protected Writeable.Reader<DelayedDataCheckConfig> instanceReader() {     return DelayedDataCheckConfig::new. }
false;protected;1;4;;@Override protected DelayedDataCheckConfig doParseInstance(XContentParser parser) {     return DelayedDataCheckConfig.STRICT_PARSER.apply(parser, null). }
false;public;0;4;;public void testConstructor() {     expectThrows(IllegalArgumentException.class, () -> new DelayedDataCheckConfig(true, TimeValue.MINUS_ONE)).     expectThrows(IllegalArgumentException.class, () -> new DelayedDataCheckConfig(true, TimeValue.timeValueHours(25))). }
false;public;0;5;;public void testEnabledDelayedDataCheckConfig() {     DelayedDataCheckConfig delayedDataCheckConfig = DelayedDataCheckConfig.enabledDelayedDataCheckConfig(TimeValue.timeValueHours(5)).     assertThat(delayedDataCheckConfig.isEnabled(), equalTo(true)).     assertThat(delayedDataCheckConfig.getCheckWindow(), equalTo(TimeValue.timeValueHours(5))). }
false;public;0;5;;public void testDisabledDelayedDataCheckConfig() {     DelayedDataCheckConfig delayedDataCheckConfig = DelayedDataCheckConfig.disabledDelayedDataCheckConfig().     assertThat(delayedDataCheckConfig.isEnabled(), equalTo(false)).     assertThat(delayedDataCheckConfig.getCheckWindow(), equalTo(null)). }
false;public;0;5;;public void testDefaultDelayedDataCheckConfig() {     DelayedDataCheckConfig delayedDataCheckConfig = DelayedDataCheckConfig.defaultDelayedDataCheckConfig().     assertThat(delayedDataCheckConfig.isEnabled(), equalTo(true)).     assertThat(delayedDataCheckConfig.getCheckWindow(), is(nullValue())). }
false;public,static;1;9;;public static DelayedDataCheckConfig createRandomizedConfig(long bucketSpanMillis) {     boolean enabled = randomBoolean().     TimeValue timeWindow = null.     if (enabled || randomBoolean()) {         // time span is required to be at least 1 millis, so we use a custom method to generate a time value here         timeWindow = new TimeValue(randomLongBetween(bucketSpanMillis, bucketSpanMillis * 2)).     }     return new DelayedDataCheckConfig(enabled, timeWindow). }
false;protected;1;26;;@Override protected DelayedDataCheckConfig mutateInstance(DelayedDataCheckConfig instance) throws IOException {     boolean enabled = instance.isEnabled().     TimeValue timeWindow = instance.getCheckWindow().     switch(between(0, 1)) {         case 0:             enabled = !enabled.             if (randomBoolean()) {                 timeWindow = TimeValue.timeValueMillis(randomLongBetween(1, 1000)).             } else {                 timeWindow = null.             }             break.         case 1:             if (timeWindow == null) {                 timeWindow = TimeValue.timeValueMillis(randomLongBetween(1, 1000)).             } else {                 timeWindow = new TimeValue(timeWindow.getMillis() + between(10, 100)).             }             enabled = true.             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new DelayedDataCheckConfig(enabled, timeWindow). }
