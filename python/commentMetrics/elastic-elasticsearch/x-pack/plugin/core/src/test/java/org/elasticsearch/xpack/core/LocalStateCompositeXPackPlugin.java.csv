commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;4;// Get around all the setOnce nonsense in the plugin ;// Get around all the setOnce nonsense in the plugin @Override protected SSLService getSslService() {     return sslService. }
false;protected;1;4;;@Override protected void setSslService(SSLService sslService) {     this.sslService = sslService. }
false;protected;0;4;;@Override protected LicenseService getLicenseService() {     return licenseService. }
false;protected;1;4;;@Override protected void setLicenseService(LicenseService licenseService) {     this.licenseService = licenseService. }
false;protected;0;4;;@Override protected XPackLicenseState getLicenseState() {     return licenseState. }
false;protected;1;4;;@Override protected void setLicenseState(XPackLicenseState licenseState) {     this.licenseState = licenseState. }
false;public;0;9;;@Override public Collection<Module> createGuiceModules() {     ArrayList<Module> modules = new ArrayList<>().     modules.addAll(super.createGuiceModules()).     filterPlugins(Plugin.class).stream().forEach(p -> modules.addAll(p.createGuiceModules())).     return modules. }
false;public;9;15;;@Override public Collection<Object> createComponents(Client client, ClusterService clusterService, ThreadPool threadPool, ResourceWatcherService resourceWatcherService, ScriptService scriptService, NamedXContentRegistry xContentRegistry, Environment environment, NodeEnvironment nodeEnvironment, NamedWriteableRegistry namedWriteableRegistry) {     List<Object> components = new ArrayList<>().     components.addAll(super.createComponents(client, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry, environment, nodeEnvironment, namedWriteableRegistry)).     filterPlugins(Plugin.class).stream().forEach(p -> components.addAll(p.createComponents(client, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry, environment, nodeEnvironment, namedWriteableRegistry))).     return components. }
false;public;0;7;;@Override public Collection<String> getRestHeaders() {     List<String> headers = new ArrayList<>().     headers.addAll(super.getRestHeaders()).     filterPlugins(ActionPlugin.class).stream().forEach(p -> headers.addAll(p.getRestHeaders())).     return headers. }
false;public;0;10;;@Override public List<Setting<?>> getSettings() {     ArrayList<Setting<?>> settings = new ArrayList<>().     settings.addAll(super.getSettings()).     filterPlugins(Plugin.class).stream().forEach(p -> settings.addAll(p.getSettings())).     return settings. }
false;public;0;9;;@Override public List<String> getSettingsFilter() {     List<String> filters = new ArrayList<>().     filters.addAll(super.getSettingsFilter()).     filterPlugins(Plugin.class).stream().forEach(p -> filters.addAll(p.getSettingsFilter())).     return filters. }
false;public;0;9;;@Override public List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> getActions() {     List<ActionHandler<? extends ActionRequest, ? extends ActionResponse>> actions = new ArrayList<>().     actions.addAll(super.getActions()).     filterPlugins(ActionPlugin.class).stream().forEach(p -> actions.addAll(p.getActions())).     return actions. }
false;public;0;9;;@Override public List<ActionFilter> getActionFilters() {     List<ActionFilter> filters = new ArrayList<>().     filters.addAll(super.getActionFilters()).     filterPlugins(ActionPlugin.class).stream().forEach(p -> filters.addAll(p.getActionFilters())).     return filters. }
false;public;7;14;;@Override public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings, IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver, Supplier<DiscoveryNodes> nodesInCluster) {     List<RestHandler> handlers = new ArrayList<>().     handlers.addAll(super.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster)).     filterPlugins(ActionPlugin.class).stream().forEach(p -> handlers.addAll(p.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster))).     return handlers. }
false;public;0;9;;@Override public List<NamedWriteableRegistry.Entry> getNamedWriteables() {     List<NamedWriteableRegistry.Entry> entries = new ArrayList<>().     entries.addAll(super.getNamedWriteables()).     for (Plugin p : plugins) {         entries.addAll(p.getNamedWriteables()).     }     return entries. }
false;public;0;9;;@Override public List<NamedXContentRegistry.Entry> getNamedXContent() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>().     entries.addAll(super.getNamedXContent()).     for (Plugin p : plugins) {         entries.addAll(p.getNamedXContent()).     }     return entries. }
false;public;0;9;;// End of the XPackPlugin overrides @Override public Settings additionalSettings() {     Settings.Builder builder = Settings.builder().     builder.put(super.additionalSettings()).     filterPlugins(Plugin.class).stream().forEach(p -> builder.put(p.additionalSettings())).     return builder.build(). }
false;public;0;7;;@Override public List<ScriptContext<?>> getContexts() {     List<ScriptContext<?>> contexts = new ArrayList<>().     contexts.addAll(super.getContexts()).     filterPlugins(ScriptPlugin.class).stream().forEach(p -> contexts.addAll(p.getContexts())).     return contexts. }
false;public;1;6;;@Override public Map<String, Processor.Factory> getProcessors(Processor.Parameters parameters) {     Map<String, Processor.Factory> processors = new HashMap<>().     filterPlugins(IngestPlugin.class).stream().forEach(p -> processors.putAll(p.getProcessors(parameters))).     return processors. }
false;public;2;7;;@Override public List<TransportInterceptor> getTransportInterceptors(NamedWriteableRegistry namedWriteableRegistry, ThreadContext threadContext) {     List<TransportInterceptor> interceptors = new ArrayList<>().     filterPlugins(NetworkPlugin.class).stream().forEach(p -> interceptors.addAll(p.getTransportInterceptors(namedWriteableRegistry, threadContext))).     return interceptors. }
false;public;6;13;;@Override public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedWriteableRegistry namedWriteableRegistry, NetworkService networkService) {     Map<String, Supplier<Transport>> transports = new HashMap<>().     transports.putAll(super.getTransports(settings, threadPool, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, networkService)).     filterPlugins(NetworkPlugin.class).stream().forEach(p -> transports.putAll(p.getTransports(settings, threadPool, pageCacheRecycler, circuitBreakerService, namedWriteableRegistry, networkService))).     return transports. }
false;public;8;12;;@Override public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays, PageCacheRecycler pageCacheRecycler, CircuitBreakerService circuitBreakerService, NamedXContentRegistry xContentRegistry, NetworkService networkService, HttpServerTransport.Dispatcher dispatcher) {     Map<String, Supplier<HttpServerTransport>> transports = new HashMap<>().     filterPlugins(NetworkPlugin.class).stream().forEach(p -> transports.putAll(p.getHttpTransports(settings, threadPool, bigArrays, pageCacheRecycler, circuitBreakerService, xContentRegistry, networkService, dispatcher))).     return transports. }
false;public;0;6;;@Override public List<BootstrapCheck> getBootstrapChecks() {     List<BootstrapCheck> checks = new ArrayList<>().     filterPlugins(Plugin.class).stream().forEach(p -> checks.addAll(p.getBootstrapChecks())).     return Collections.unmodifiableList(checks). }
false;public;1;15;;@Override public UnaryOperator<RestHandler> getRestHandlerWrapper(ThreadContext threadContext) {     // There can be only one.     List<UnaryOperator<RestHandler>> items = filterPlugins(ActionPlugin.class).stream().map(p -> p.getRestHandlerWrapper(threadContext)).filter(Objects::nonNull).collect(Collectors.toList()).     if (items.size() > 1) {         throw new UnsupportedOperationException("Only the security ActionPlugin should override this").     } else if (items.size() == 1) {         return items.get(0).     } else {         return null.     } }
false;public;1;6;;@Override public List<ExecutorBuilder<?>> getExecutorBuilders(final Settings settings) {     List<ExecutorBuilder<?>> builders = new ArrayList<>().     filterPlugins(Plugin.class).stream().forEach(p -> builders.addAll(p.getExecutorBuilders(settings))).     return builders. }
false;public;0;9;;@Override public UnaryOperator<Map<String, IndexTemplateMetaData>> getIndexTemplateMetaDataUpgrader() {     return templates -> {         for (Plugin p : plugins) {             templates = p.getIndexTemplateMetaDataUpgrader().apply(templates).         }         return templates.     }. }
false;public;0;6;;@Override public Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> getTokenizers() {     Map<String, AnalysisModule.AnalysisProvider<TokenizerFactory>> tokenizers = new HashMap<>().     filterPlugins(AnalysisPlugin.class).stream().forEach(p -> tokenizers.putAll(p.getTokenizers())).     return tokenizers. }
false;public;1;5;;@Override public void onIndexModule(IndexModule indexModule) {     super.onIndexModule(indexModule).     filterPlugins(Plugin.class).stream().forEach(p -> p.onIndexModule(indexModule)). }
false;public;0;13;;@Override public Function<String, Predicate<String>> getFieldFilter() {     List<Function<String, Predicate<String>>> items = filterPlugins(MapperPlugin.class).stream().map(p -> p.getFieldFilter()).collect(Collectors.toList()).     if (items.size() > 1) {         throw new UnsupportedOperationException("Only the security MapperPlugin should override this").     } else if (items.size() == 1) {         return items.get(0).     } else {         // return the same default from MapperPlugin         return MapperPlugin.NOOP_FIELD_FILTER.     } }
false;public;0;13;;@Override public BiConsumer<DiscoveryNode, ClusterState> getJoinValidator() {     // There can be only one.     List<BiConsumer<DiscoveryNode, ClusterState>> items = filterPlugins(DiscoveryPlugin.class).stream().map(p -> p.getJoinValidator()).collect(Collectors.toList()).     if (items.size() > 1) {         throw new UnsupportedOperationException("Only the security DiscoveryPlugin should override this").     } else if (items.size() == 1) {         return items.get(0).     } else {         return null.     } }
false;public;4;10;;@Override public List<PersistentTasksExecutor<?>> getPersistentTasksExecutor(ClusterService clusterService, ThreadPool threadPool, Client client, SettingsModule settingsModule) {     return filterPlugins(PersistentTaskPlugin.class).stream().map(p -> p.getPersistentTasksExecutor(clusterService, threadPool, client, settingsModule)).flatMap(List::stream).collect(toList()). }
false;public;2;6;;@Override public Map<String, Repository.Factory> getRepositories(Environment env, NamedXContentRegistry namedXContentRegistry) {     HashMap<String, Repository.Factory> repositories = new HashMap<>(super.getRepositories(env, namedXContentRegistry)).     filterPlugins(RepositoryPlugin.class).forEach(r -> repositories.putAll(r.getRepositories(env, namedXContentRegistry))).     return repositories. }
false;public;2;7;;@Override public Map<String, Repository.Factory> getInternalRepositories(Environment env, NamedXContentRegistry namedXContentRegistry) {     HashMap<String, Repository.Factory> internalRepositories = new HashMap<>(super.getInternalRepositories(env, namedXContentRegistry)).     filterPlugins(RepositoryPlugin.class).forEach(r -> internalRepositories.putAll(r.getInternalRepositories(env, namedXContentRegistry))).     return internalRepositories. }
false;public;0;4;;@Override public void close() throws IOException {     IOUtils.close(plugins). }
false;public;1;13;;@Override public Optional<EngineFactory> getEngineFactory(IndexSettings indexSettings) {     List<Optional<EngineFactory>> enginePlugins = filterPlugins(EnginePlugin.class).stream().map(p -> p.getEngineFactory(indexSettings)).collect(Collectors.toList()).     if (enginePlugins.size() == 0) {         return Optional.empty().     } else if (enginePlugins.size() == 1) {         return enginePlugins.stream().findFirst().get().     } else {         throw new IllegalStateException("Only one EngineFactory plugin allowed").     } }
false;public;0;5;;@Override public Collection<MappingRequestValidator> mappingRequestValidators() {     return filterPlugins(ActionPlugin.class).stream().flatMap(p -> p.mappingRequestValidators().stream()).collect(Collectors.toList()). }
false;private;1;4;;private <T> List<T> filterPlugins(Class<T> type) {     return plugins.stream().filter(x -> type.isAssignableFrom(x.getClass())).map(p -> ((T) p)).collect(Collectors.toList()). }
