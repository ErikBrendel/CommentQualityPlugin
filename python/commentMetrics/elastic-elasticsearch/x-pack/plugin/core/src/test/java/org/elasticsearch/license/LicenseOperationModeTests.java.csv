commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testResolveTrial() {     // assert 1.x BWC     assertResolve(OperationMode.TRIAL, "nONE", "DEv", "deveLopment").     // assert expected (2.x+) variant     assertResolve(OperationMode.TRIAL, "tRiAl", "trial"). }
false;public;0;4;;public void testResolveBasic() {     // assert expected (2.x+) variant (note: no 1.x variant of BASIC)     assertResolve(OperationMode.BASIC, "bAsIc", "basic"). }
false;public;0;4;;public void testResolveStandard() {     // assert expected (2.x+) variant (note: no 1.x variant of STANDARD)     assertResolve(OperationMode.STANDARD, "StAnDARd", "standard"). }
false;public;0;4;;public void testResolveGold() {     // assert expected (2.x+) variant (note: no different 1.x variant of GOLD)     assertResolve(OperationMode.GOLD, "SiLvEr", "gOlD", "silver", "gold"). }
false;public;0;6;;public void testResolvePlatinum() {     // assert 1.x BWC     assertResolve(OperationMode.PLATINUM, "iNtErNaL").     // assert expected (2.x+) variant     assertResolve(OperationMode.PLATINUM, "PlAtINum", "platinum"). }
false;public;0;16;;public void testResolveUnknown() {     // 'enterprise' is a type that exists in cloud but should be rejected under normal operation     // See https://github.com/elastic/x-plugins/issues/3371     String[] types = { "unknown", "fake", "enterprise" }.     for (String type : types) {         try {             OperationMode.resolve(type).             fail(String.format(Locale.ROOT, "[%s] should not be recognized as an operation mode", type)).         } catch (IllegalArgumentException e) {             assertThat(e.getMessage(), equalTo("unknown type [" + type + "]")).         }     } }
false;private,static;2;5;;private static void assertResolve(OperationMode expected, String... types) {     for (String type : types) {         assertThat(OperationMode.resolve(type), equalTo(expected)).     } }
