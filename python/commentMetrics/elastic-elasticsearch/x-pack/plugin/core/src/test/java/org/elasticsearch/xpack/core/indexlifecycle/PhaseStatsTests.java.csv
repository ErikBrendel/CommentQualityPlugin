commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected PhaseStats createTestInstance() {     return createRandomInstance(). }
false;public,static;0;5;;public static PhaseStats createRandomInstance() {     TimeValue after = TimeValue.parseTimeValue(randomTimeValue(), "phase_stats_tests").     String[] actionNames = randomArray(0, 20, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 20)).     return new PhaseStats(after, actionNames). }
false;protected;1;17;;@Override protected PhaseStats mutateInstance(PhaseStats instance) throws IOException {     TimeValue after = instance.getAfter().     String[] actionNames = instance.getActionNames().     switch(between(0, 1)) {         case 0:             after = randomValueOtherThan(after, () -> TimeValue.parseTimeValue(randomPositiveTimeValue(), "rollover_action_test")).             break.         case 1:             actionNames = randomValueOtherThanMany(a -> Arrays.equals(a, instance.getActionNames()), () -> randomArray(0, 20, size -> new String[size], () -> randomAlphaOfLengthBetween(1, 20))).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new PhaseStats(after, actionNames). }
false;protected;0;4;;@Override protected Reader<PhaseStats> instanceReader() {     return PhaseStats::new. }
