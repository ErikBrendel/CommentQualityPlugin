commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;13;;@Override protected RuleScope createTestInstance() {     RuleScope.Builder scope = RuleScope.builder().     int count = randomIntBetween(0, 3).     for (int i = 0. i < count. ++i) {         if (randomBoolean()) {             scope.include(randomAlphaOfLength(20), randomAlphaOfLength(20)).         } else {             scope.exclude(randomAlphaOfLength(20), randomAlphaOfLength(20)).         }     }     return scope.build(). }
false;protected;0;4;;@Override protected Writeable.Reader<RuleScope> instanceReader() {     return RuleScope::new. }
false;public;0;6;;public void testValidate_GivenEmpty() {     RuleScope scope = RuleScope.builder().build().     assertThat(scope.isEmpty(), is(true)).     scope.validate(Sets.newHashSet("a", "b")). }
false;public;0;10;;public void testValidate_GivenMultipleValidFields() {     RuleScope scope = RuleScope.builder().include("foo", "filter1").exclude("bar", "filter2").include("foobar", "filter3").build().     assertThat(scope.isEmpty(), is(false)).     scope.validate(Sets.newHashSet("foo", "bar", "foobar")). }
false;public;0;10;;public void testValidate_GivenNoAvailableFieldsForScope() {     RuleScope scope = RuleScope.builder().include("foo", "filter1").build().     assertThat(scope.isEmpty(), is(false)).     ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> scope.validate(Collections.emptySet())).     assertThat(e.getMessage(), equalTo("Invalid detector rule: scope field 'foo' is invalid. " + "detector has no available fields for scoping")). }
false;public;0;12;;public void testValidate_GivenMultipleFieldsIncludingInvalid() {     RuleScope scope = RuleScope.builder().include("foo", "filter1").exclude("bar", "filter2").include("foobar", "filter3").build().     assertThat(scope.isEmpty(), is(false)).     ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> scope.validate(Sets.newHashSet("foo", "foobar"))).     assertThat(e.getMessage(), equalTo("Invalid detector rule: scope field 'bar' is invalid. select from [foo, foobar]")). }
false;public;0;3;;public void testGetReferencedFilters_GivenEmpty() {     assertThat(RuleScope.builder().build().getReferencedFilters().isEmpty(), is(true)). }
false;public;0;8;;public void testGetReferencedFilters_GivenMultipleFields() {     RuleScope scope = RuleScope.builder().include("foo", "filter1").exclude("bar", "filter2").include("foobar", "filter3").build().     assertThat(scope.getReferencedFilters(), contains("filter1", "filter2", "filter3")). }
