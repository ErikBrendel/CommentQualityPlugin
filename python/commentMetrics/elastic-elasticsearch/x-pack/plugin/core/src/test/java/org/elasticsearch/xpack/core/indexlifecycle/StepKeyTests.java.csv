commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public StepKey createTestInstance() {     return new StepKey(randomAlphaOfLength(10), randomAlphaOfLength(10), randomAlphaOfLength(10)). }
false;protected;0;4;;@Override protected Writeable.Reader<StepKey> instanceReader() {     return StepKey::new. }
false;protected;1;4;;@Override protected StepKey doParseInstance(XContentParser parser) {     return StepKey.parse(parser). }
false;public;1;22;;@Override public StepKey mutateInstance(StepKey instance) {     String phase = instance.getPhase().     String action = instance.getAction().     String step = instance.getName().     switch(between(0, 2)) {         case 0:             phase += randomAlphaOfLength(5).             break.         case 1:             action += randomAlphaOfLength(5).             break.         case 2:             step += randomAlphaOfLength(5).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new StepKey(phase, action, step). }
