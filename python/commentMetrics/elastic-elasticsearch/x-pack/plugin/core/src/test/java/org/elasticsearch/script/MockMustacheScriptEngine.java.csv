commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public ScriptEngine getScriptEngine(Settings settings, Collection<ScriptContext<?>> contexts) {     return new MockMustacheScriptEngine(). }
false;protected;0;4;;@Override protected Map<String, Function<Map<String, Object>, Object>> pluginScripts() {     return Collections.emptyMap(). }
false;public;0;4;;@Override public String getType() {     return NAME. }
false;public;0;4;;@Override public String execute() {     return script. }
false;public;4;16;;@Override public <T> T compile(String name, String script, ScriptContext<T> context, Map<String, String> params) {     if (script.contains("{{") && script.contains("}}")) {         throw new IllegalArgumentException("Fix your test to not rely on mustache").     }     if (context.instanceClazz.equals(TemplateScript.class) == false) {         throw new IllegalArgumentException("mock mustache only understands template scripts, not [" + context.name + "]").     }     return context.factoryClazz.cast((TemplateScript.Factory) vars -> new TemplateScript(vars) {          @Override         public String execute() {             return script.         }     }). }
