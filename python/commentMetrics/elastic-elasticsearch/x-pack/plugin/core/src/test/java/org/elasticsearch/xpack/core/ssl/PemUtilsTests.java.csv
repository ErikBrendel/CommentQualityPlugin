commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void testReadPKCS8RsaKey() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/rsa_key_pkcs8_plain.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadPKCS8RsaKeyWithBagAttrs() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode_with_bagattrs.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadPKCS8DsaKey() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/dsa_key_pkcs8_plain.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadPKCS8EcKey() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/ec_key_pkcs8_plain.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadEncryptedPKCS8Key() throws Exception {     assumeFalse("Can't run in a FIPS JVM, PBE KeySpec is not available", inFipsJvm()).     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/key_pkcs8_encrypted" + ".pem"), "testnode"::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;9;;public void testReadDESEncryptedPKCS1Key() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem"), "testnode"::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;12;;public void testReadAESEncryptedPKCS1Key() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     String bits = randomFrom("128", "192", "256").     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-aes" + bits + ".pem"), "testnode"::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadPKCS1RsaKey() throws Exception {     Key key = getKeyFromKeystore("RSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode-unprotected.pem"), "testnode"::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadOpenSslDsaKey() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/dsa_key_openssl_plain.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadOpenSslDsaKeyWithParams() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/dsa_key_openssl_plain_with_params.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadEncryptedOpenSslDsaKey() throws Exception {     Key key = getKeyFromKeystore("DSA").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/dsa_key_openssl_encrypted.pem"), "testnode"::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadOpenSslEcKey() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/ec_key_openssl_plain.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadOpenSslEcKeyWithParams() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/ec_key_openssl_plain_with_params.pem"), ""::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;11;;public void testReadEncryptedOpenSslEcKey() throws Exception {     Key key = getKeyFromKeystore("EC").     assertThat(key, notNullValue()).     assertThat(key, instanceOf(PrivateKey.class)).     PrivateKey privateKey = PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/ec_key_openssl_encrypted.pem"), "testnode"::toCharArray).     assertThat(privateKey, notNullValue()).     assertThat(privateKey, equalTo(key)). }
false;public;0;6;;public void testReadUnsupportedKey() {     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/key_unsupported.pem"), "testnode"::toCharArray)).     assertThat(e.getMessage(), containsString("File did not contain a supported key format")). }
false;public;0;6;;public void testReadUnsupportedPemFile() {     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt"), "testnode"::toCharArray)).     assertThat(e.getMessage(), containsString("File did not contain a supported key format")). }
false;public;0;7;;public void testReadCorruptedKey() {     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/corrupted_key_pkcs8_plain.pem"), "testnode"::toCharArray)).     assertThat(e.getMessage(), containsString("Error parsing Private Key from")).     assertThat(e.getCause().getMessage(), containsString("Malformed PEM file, PEM footer is invalid or missing")). }
false;public;0;6;;public void testReadEmptyFile() {     IllegalStateException e = expectThrows(IllegalStateException.class, () -> PemUtils.readPrivateKey(getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/empty.pem"), "testnode"::toCharArray)).     assertThat(e.getMessage(), containsString("File is empty")). }
false;private;1;8;;private Key getKeyFromKeystore(String algo) throws Exception {     Path keystorePath = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks").     try (InputStream in = Files.newInputStream(keystorePath)) {         KeyStore keyStore = KeyStore.getInstance("jks").         keyStore.load(in, "testnode".toCharArray()).         return keyStore.getKey("testnode_" + algo, "testnode".toCharArray()).     } }
