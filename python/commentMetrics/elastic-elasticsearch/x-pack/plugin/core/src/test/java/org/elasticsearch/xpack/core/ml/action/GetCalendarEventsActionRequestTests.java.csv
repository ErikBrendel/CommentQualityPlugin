commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;18;;@Override protected GetCalendarEventsAction.Request createTestInstance() {     String id = randomAlphaOfLengthBetween(1, 20).     GetCalendarEventsAction.Request request = new GetCalendarEventsAction.Request(id).     if (randomBoolean()) {         request.setStart(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         request.setEnd(randomAlphaOfLengthBetween(1, 20)).     }     if (randomBoolean()) {         request.setJobId(randomAlphaOfLength(8)).     }     if (randomBoolean()) {         request.setPageParams(new PageParams(randomIntBetween(0, 10), randomIntBetween(1, 10))).     }     return request. }
false;protected;0;4;;@Override protected GetCalendarEventsAction.Request createBlankInstance() {     return new GetCalendarEventsAction.Request(). }
false;protected;1;4;;@Override protected GetCalendarEventsAction.Request doParseInstance(XContentParser parser) {     return GetCalendarEventsAction.Request.parseRequest(null, parser). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return false. }
false;public;0;12;;public void testValidate() {     GetCalendarEventsAction.Request request = new GetCalendarEventsAction.Request("cal-name").     request.setJobId("foo").     ActionRequestValidationException validationException = request.validate().     assertNotNull(validationException).     assertEquals("Validation Failed: 1: If job_id is used calendar_id must be '_all'.", validationException.getMessage()).     request = new GetCalendarEventsAction.Request("_all").     request.setJobId("foo").     assertNull(request.validate()). }
