commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testThatSSLConfigurationHasCorrectDefaults() {     SSLConfiguration globalConfig = new SSLConfiguration(Settings.EMPTY).     assertThat(globalConfig.keyConfig(), sameInstance(KeyConfig.NONE)).     assertThat(globalConfig.trustConfig(), is(not((globalConfig.keyConfig())))).     assertThat(globalConfig.trustConfig(), instanceOf(DefaultJDKTrustConfig.class)).     assertThat(globalConfig.supportedProtocols(), equalTo(XPackSettings.DEFAULT_SUPPORTED_PROTOCOLS)).     assertThat(globalConfig.supportedProtocols(), not(hasItem("TLSv1"))). }
false;public;0;21;;public void testThatOnlyKeystoreInSettingsSetsTruststoreSettings() {     final String path = getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.jks").toString().     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "testnode").     Settings settings = Settings.builder().put("keystore.path", path).setSecureSettings(secureSettings).build().     // Pass settings in as component settings     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStorePath, is(equalTo(path))).     assertThat(ksKeyInfo.keyStorePassword, is(equalTo("testnode"))).     assertThat(ksKeyInfo.keyStoreType, is(equalTo("jks"))).     assertThat(ksKeyInfo.keyPassword, is(equalTo(ksKeyInfo.keyStorePassword))).     assertThat(ksKeyInfo.keyStoreAlgorithm, is(KeyManagerFactory.getDefaultAlgorithm())).     assertThat(sslConfiguration.trustConfig(), is(instanceOf(CombiningTrustConfig.class))).     assertCombiningTrustConfigContainsCorrectIssuers(sslConfiguration). }
false;public;0;13;;public void testKeystorePassword() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "password").     Settings settings = Settings.builder().put("keystore.path", "path").setSecureSettings(secureSettings).build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStorePassword, is(equalTo("password"))).     assertThat(ksKeyInfo.keyPassword, is(equalTo("password"))). }
false;public;0;13;;public void testKeystorePasswordBackcompat() {     Settings settings = Settings.builder().put("keystore.path", "path").put("keystore.password", "password").build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStorePassword, is(equalTo("password"))).     assertThat(ksKeyInfo.keyPassword, is(equalTo("password"))).     assertSettingDeprecationsAndWarnings(new Setting<?>[] { SSLConfiguration.SETTINGS_PARSER.x509KeyPair.legacyKeystorePassword }). }
false;public;0;14;;public void testKeystoreKeyPassword() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "password").     secureSettings.setString("keystore.secure_key_password", "keypass").     Settings settings = Settings.builder().put("keystore.path", "path").setSecureSettings(secureSettings).build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStorePassword, is(equalTo("password"))).     assertThat(ksKeyInfo.keyPassword, is(equalTo("keypass"))). }
false;public;0;16;;public void testKeystoreKeyPasswordBackcompat() {     Settings settings = Settings.builder().put("keystore.path", "path").put("keystore.password", "password").put("keystore.key_password", "keypass").build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStorePassword, is(equalTo("password"))).     assertThat(ksKeyInfo.keyPassword, is(equalTo("keypass"))).     assertSettingDeprecationsAndWarnings(new Setting<?>[] { SSLConfiguration.SETTINGS_PARSER.x509KeyPair.legacyKeystorePassword, SSLConfiguration.SETTINGS_PARSER.x509KeyPair.legacyKeystoreKeyPassword }). }
false;public;0;13;;public void testInferKeystoreTypeFromJksFile() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "password").     secureSettings.setString("keystore.secure_key_password", "keypass").     Settings settings = Settings.builder().put("keystore.path", "xpack/tls/path.jks").setSecureSettings(secureSettings).build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStoreType, is(equalTo("jks"))). }
false;public;0;14;;public void testInferKeystoreTypeFromPkcs12File() {     final String ext = randomFrom("p12", "pfx", "pkcs12").     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "password").     secureSettings.setString("keystore.secure_key_password", "keypass").     Settings settings = Settings.builder().put("keystore.path", "xpack/tls/path." + ext).setSecureSettings(secureSettings).build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStoreType, is(equalTo("PKCS12"))). }
false;public;0;13;;public void testInferKeystoreTypeFromUnrecognised() {     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "password").     secureSettings.setString("keystore.secure_key_password", "keypass").     Settings settings = Settings.builder().put("keystore.path", "xpack/tls/path.foo").setSecureSettings(secureSettings).build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStoreType, is(equalTo("jks"))). }
false;public;0;16;;public void testExplicitKeystoreType() {     final String ext = randomFrom("p12", "jks").     final String type = randomAlphaOfLengthBetween(2, 8).     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("keystore.secure_password", "password").     secureSettings.setString("keystore.secure_key_password", "keypass").     Settings settings = Settings.builder().put("keystore.path", "xpack/tls/path." + ext).put("keystore.type", type).setSecureSettings(secureSettings).build().     SSLConfiguration sslConfiguration = new SSLConfiguration(settings).     assertThat(sslConfiguration.keyConfig(), instanceOf(StoreKeyConfig.class)).     StoreKeyConfig ksKeyInfo = (StoreKeyConfig) sslConfiguration.keyConfig().     assertThat(ksKeyInfo.keyStoreType, is(equalTo(type))). }
false;public;0;8;;public void testThatEmptySettingsAreEqual() {     SSLConfiguration sslConfiguration = new SSLConfiguration(Settings.EMPTY).     SSLConfiguration sslConfiguration1 = new SSLConfiguration(Settings.EMPTY).     assertThat(sslConfiguration.equals(sslConfiguration1), is(equalTo(true))).     assertThat(sslConfiguration1.equals(sslConfiguration), is(equalTo(true))).     assertThat(sslConfiguration.equals(sslConfiguration), is(equalTo(true))).     assertThat(sslConfiguration1.equals(sslConfiguration1), is(equalTo(true))). }
false;public;0;12;;public void testThatSettingsWithDifferentKeystoresAreNotEqual() {     SSLConfiguration sslConfiguration = new SSLConfiguration(Settings.builder().put("keystore.path", "path").build()).     SSLConfiguration sslConfiguration1 = new SSLConfiguration(Settings.builder().put("keystore.path", "path1").build()).     assertThat(sslConfiguration.equals(sslConfiguration1), is(equalTo(false))).     assertThat(sslConfiguration1.equals(sslConfiguration), is(equalTo(false))).     assertThat(sslConfiguration.equals(sslConfiguration), is(equalTo(true))).     assertThat(sslConfiguration1.equals(sslConfiguration1), is(equalTo(true))). }
false;public;0;12;;public void testThatSettingsWithDifferentTruststoresAreNotEqual() {     SSLConfiguration sslConfiguration = new SSLConfiguration(Settings.builder().put("truststore.path", "/trust").build()).     SSLConfiguration sslConfiguration1 = new SSLConfiguration(Settings.builder().put("truststore.path", "/truststore").build()).     assertThat(sslConfiguration.equals(sslConfiguration1), is(equalTo(false))).     assertThat(sslConfiguration1.equals(sslConfiguration), is(equalTo(false))).     assertThat(sslConfiguration.equals(sslConfiguration), is(equalTo(true))).     assertThat(sslConfiguration1.equals(sslConfiguration1), is(equalTo(true))). }
false;public;0;5;;public void testThatEmptySettingsHaveSameHashCode() {     SSLConfiguration sslConfiguration = new SSLConfiguration(Settings.EMPTY).     SSLConfiguration sslConfiguration1 = new SSLConfiguration(Settings.EMPTY).     assertThat(sslConfiguration.hashCode(), is(equalTo(sslConfiguration1.hashCode()))). }
false;public;0;9;;public void testThatSettingsWithDifferentKeystoresHaveDifferentHashCode() {     SSLConfiguration sslConfiguration = new SSLConfiguration(Settings.builder().put("keystore.path", "path").build()).     SSLConfiguration sslConfiguration1 = new SSLConfiguration(Settings.builder().put("keystore.path", "path1").build()).     assertThat(sslConfiguration.hashCode(), is(not(equalTo(sslConfiguration1.hashCode())))). }
false;public;0;9;;public void testThatSettingsWithDifferentTruststoresHaveDifferentHashCode() {     SSLConfiguration sslConfiguration = new SSLConfiguration(Settings.builder().put("truststore.path", "/trust").build()).     SSLConfiguration sslConfiguration1 = new SSLConfiguration(Settings.builder().put("truststore.path", "/truststore").build()).     assertThat(sslConfiguration.hashCode(), is(not(equalTo(sslConfiguration1.hashCode())))). }
false;public;0;19;;public void testPEMFile() {     Environment env = randomBoolean() ? null : TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("secure_key_passphrase", "testnode").     Settings settings = Settings.builder().put("key", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem")).put("certificate", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt")).setSecureSettings(secureSettings).build().     SSLConfiguration config = new SSLConfiguration(settings).     assertThat(config.keyConfig(), instanceOf(PEMKeyConfig.class)).     PEMKeyConfig keyConfig = (PEMKeyConfig) config.keyConfig().     KeyManager keyManager = keyConfig.createKeyManager(env).     assertNotNull(keyManager).     assertThat(config.trustConfig(), instanceOf(CombiningTrustConfig.class)).     assertCombiningTrustConfigContainsCorrectIssuers(config). }
false;public;0;20;;public void testPEMFileBackcompat() {     Environment env = randomBoolean() ? null : TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     Settings settings = Settings.builder().put("key", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem")).put("key_passphrase", "testnode").put("certificate", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt")).build().     SSLConfiguration config = new SSLConfiguration(settings).     assertThat(config.keyConfig(), instanceOf(PEMKeyConfig.class)).     PEMKeyConfig keyConfig = (PEMKeyConfig) config.keyConfig().     KeyManager keyManager = keyConfig.createKeyManager(env).     assertNotNull(keyManager).     assertThat(config.trustConfig(), instanceOf(CombiningTrustConfig.class)).     assertCombiningTrustConfigContainsCorrectIssuers(config).     assertSettingDeprecationsAndWarnings(new Setting<?>[] { SSLConfiguration.SETTINGS_PARSER.x509KeyPair.legacyKeyPassword }). }
false;public;0;24;;public void testPEMKeyAndTrustFiles() {     Environment env = randomBoolean() ? null : TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     MockSecureSettings secureSettings = new MockSecureSettings().     secureSettings.setString("secure_key_passphrase", "testnode").     Settings settings = Settings.builder().put("key", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem")).put("certificate", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt")).putList("certificate_authorities", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").toString(), getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient.crt").toString()).setSecureSettings(secureSettings).build().     SSLConfiguration config = new SSLConfiguration(settings).     assertThat(config.keyConfig(), instanceOf(PEMKeyConfig.class)).     PEMKeyConfig keyConfig = (PEMKeyConfig) config.keyConfig().     KeyManager keyManager = keyConfig.createKeyManager(env).     assertNotNull(keyManager).     assertThat(config.trustConfig(), not(sameInstance(keyConfig))).     assertThat(config.trustConfig(), instanceOf(PEMTrustConfig.class)).     TrustManager trustManager = keyConfig.createTrustManager(env).     assertNotNull(trustManager). }
false;public;0;23;;public void testPEMKeyAndTrustFilesBackcompat() {     Environment env = randomBoolean() ? null : TestEnvironment.newEnvironment(Settings.builder().put("path.home", createTempDir()).build()).     Settings settings = Settings.builder().put("key", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem")).put("key_passphrase", "testnode").put("certificate", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt")).putList("certificate_authorities", getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt").toString(), getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient.crt").toString()).build().     SSLConfiguration config = new SSLConfiguration(settings).     assertThat(config.keyConfig(), instanceOf(PEMKeyConfig.class)).     PEMKeyConfig keyConfig = (PEMKeyConfig) config.keyConfig().     KeyManager keyManager = keyConfig.createKeyManager(env).     assertNotNull(keyManager).     assertThat(config.trustConfig(), not(sameInstance(keyConfig))).     assertThat(config.trustConfig(), instanceOf(PEMTrustConfig.class)).     TrustManager trustManager = keyConfig.createTrustManager(env).     assertNotNull(trustManager).     assertSettingDeprecationsAndWarnings(new Setting<?>[] { SSLConfiguration.SETTINGS_PARSER.x509KeyPair.legacyKeyPassword }). }
false;private;1;9;;private void assertCombiningTrustConfigContainsCorrectIssuers(SSLConfiguration sslConfiguration) {     X509Certificate[] trustConfAcceptedIssuers = sslConfiguration.trustConfig().createTrustManager(null).getAcceptedIssuers().     X509Certificate[] keyConfAcceptedIssuers = sslConfiguration.keyConfig().createTrustManager(null).getAcceptedIssuers().     X509Certificate[] defaultAcceptedIssuers = new DefaultJDKTrustConfig(null).createTrustManager(null).getAcceptedIssuers().     assertEquals(keyConfAcceptedIssuers.length + defaultAcceptedIssuers.length, trustConfAcceptedIssuers.length).     assertThat(Arrays.asList(keyConfAcceptedIssuers), everyItem(isIn(trustConfAcceptedIssuers))).     assertThat(Arrays.asList(defaultAcceptedIssuers), everyItem(isIn(trustConfAcceptedIssuers))). }
