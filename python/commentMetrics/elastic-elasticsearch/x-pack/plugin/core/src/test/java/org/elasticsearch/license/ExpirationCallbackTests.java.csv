commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;public void testPostExpirationDelay() throws Exception {     TimeValue expiryDuration = TimeValue.timeValueSeconds(randomIntBetween(5, 10)).     TimeValue min = TimeValue.timeValueSeconds(1).     TimeValue max = TimeValue.timeValueSeconds(4).     TimeValue frequency = TimeValue.timeValueSeconds(1).     NoopPostExpirationCallback post = new NoopPostExpirationCallback(min, max, frequency).     long now = System.currentTimeMillis().     long expiryDate = now + expiryDuration.getMillis().     assertThat(post.delay(expiryDate, now), // before license expiry     equalTo(TimeValue.timeValueMillis(expiryDuration.getMillis() + min.getMillis()))).     // on license expiry     assertThat(post.delay(expiryDate, expiryDate), equalTo(min)).     int latestValidTriggerDelay = (int) (expiryDuration.getMillis() + max.getMillis()).     int earliestValidTriggerDelay = (int) (expiryDuration.getMillis() + min.getMillis()).     assertExpirationCallbackDelay(post, expiryDuration.millis(), latestValidTriggerDelay, earliestValidTriggerDelay). }
false;public;0;13;;public void testPreExpirationDelay() throws Exception {     TimeValue expiryDuration = TimeValue.timeValueSeconds(randomIntBetween(5, 10)).     TimeValue min = TimeValue.timeValueSeconds(1).     TimeValue max = TimeValue.timeValueSeconds(4).     TimeValue frequency = TimeValue.timeValueSeconds(1).     NoopPreExpirationCallback pre = new NoopPreExpirationCallback(min, max, frequency).     long now = System.currentTimeMillis().     long expiryDate = now + expiryDuration.getMillis().     // on license expiry     assertThat(pre.delay(expiryDate, expiryDate), nullValue()).     int latestValidTriggerDelay = (int) (expiryDuration.getMillis() - min.getMillis()).     int earliestValidTriggerDelay = (int) (expiryDuration.getMillis() - max.getMillis()).     assertExpirationCallbackDelay(pre, expiryDuration.millis(), latestValidTriggerDelay, earliestValidTriggerDelay). }
false;public;0;9;;public void testPostExpirationWithNullMax() throws Exception {     int postExpirySeconds = randomIntBetween(5, 10).     TimeValue postExpiryDuration = TimeValue.timeValueSeconds(postExpirySeconds).     TimeValue min = TimeValue.timeValueSeconds(postExpirySeconds - randomIntBetween(1, 3)).     final ExpirationCallback.Post post = new NoopPostExpirationCallback(min, null, timeValueMillis(10)).     long now = System.currentTimeMillis().     assertThat(post.delay(now - postExpiryDuration.millis(), now), equalTo(TimeValue.timeValueMillis(0))). }
false;public;0;9;;public void testPreExpirationWithNullMin() throws Exception {     int expirySeconds = randomIntBetween(5, 10).     TimeValue expiryDuration = TimeValue.timeValueSeconds(expirySeconds).     TimeValue max = TimeValue.timeValueSeconds(expirySeconds + randomIntBetween(1, 10)).     final ExpirationCallback.Pre pre = new NoopPreExpirationCallback(null, max, timeValueMillis(10)).     long now = System.currentTimeMillis().     assertThat(pre.delay(expiryDuration.millis() + now, now), equalTo(TimeValue.timeValueMillis(0))). }
false;public;0;10;;public void testPreExpirationScheduleTime() throws Exception {     TimeValue expiryDuration = TimeValue.timeValueSeconds(randomIntBetween(5, 10)).     TimeValue min = TimeValue.timeValueSeconds(1).     TimeValue max = TimeValue.timeValueSeconds(4).     TimeValue frequency = TimeValue.timeValueSeconds(1).     NoopPreExpirationCallback pre = new NoopPreExpirationCallback(min, max, frequency).     int latestValidTriggerDelay = (int) (expiryDuration.getMillis() - min.getMillis()).     int earliestValidTriggerDelay = (int) (expiryDuration.getMillis() - max.getMillis()).     assertExpirationCallbackScheduleTime(pre, expiryDuration.millis(), latestValidTriggerDelay, earliestValidTriggerDelay). }
false;public;0;10;;public void testPostExpirationScheduleTime() throws Exception {     TimeValue expiryDuration = TimeValue.timeValueSeconds(randomIntBetween(5, 10)).     TimeValue min = TimeValue.timeValueSeconds(1).     TimeValue max = TimeValue.timeValueSeconds(4).     TimeValue frequency = TimeValue.timeValueSeconds(1).     NoopPostExpirationCallback pre = new NoopPostExpirationCallback(min, max, frequency).     int latestValidTriggerDelay = (int) (expiryDuration.getMillis() + max.getMillis()).     int earliestValidTriggerDelay = (int) (expiryDuration.getMillis() + min.getMillis()).     assertExpirationCallbackScheduleTime(pre, expiryDuration.millis(), latestValidTriggerDelay, earliestValidTriggerDelay). }
false;private;4;18;;private void assertExpirationCallbackDelay(ExpirationCallback expirationCallback, long expiryDuration, int latestValidTriggerDelay, int earliestValidTriggerDelay) {     long now = System.currentTimeMillis().     long expiryDate = now + expiryDuration.     // bounds     assertThat(expirationCallback.delay(expiryDate, now + earliestValidTriggerDelay), equalTo(TimeValue.timeValueMillis(0))).     assertThat(expirationCallback.delay(expiryDate, now + latestValidTriggerDelay), equalTo(TimeValue.timeValueMillis(0))).     // in match     assertThat(expirationCallback.delay(expiryDate, now + randomIntBetween(earliestValidTriggerDelay, latestValidTriggerDelay)), equalTo(TimeValue.timeValueMillis(0))).     // out of bounds     int deltaBeforeEarliestMatch = between(1, earliestValidTriggerDelay).     assertThat(expirationCallback.delay(expiryDate, now + deltaBeforeEarliestMatch), equalTo(TimeValue.timeValueMillis(earliestValidTriggerDelay - deltaBeforeEarliestMatch))).     // after expiry and after max     int deltaAfterLatestMatch = between(latestValidTriggerDelay + 1, Integer.MAX_VALUE).     assertThat(expirationCallback.delay(expiryDate, expiryDate + deltaAfterLatestMatch), nullValue()). }
false;public;4;26;;public void assertExpirationCallbackScheduleTime(ExpirationCallback expirationCallback, long expiryDuration, int latestValidTriggerDelay, int earliestValidTriggerDelay) {     long now = System.currentTimeMillis().     long expiryDate = now + expiryDuration.     int validTriggerInterval = between(earliestValidTriggerDelay, latestValidTriggerDelay).     assertThat(expirationCallback.nextScheduledTimeForExpiry(expiryDate, now + validTriggerInterval, now + validTriggerInterval), equalTo(now + validTriggerInterval)).     assertThat(expirationCallback.nextScheduledTimeForExpiry(expiryDate, now, now + validTriggerInterval), equalTo(now + validTriggerInterval + expirationCallback.getFrequency())).     int deltaBeforeEarliestMatch = between(1, earliestValidTriggerDelay - 1).     assertThat(expirationCallback.nextScheduledTimeForExpiry(expiryDate, now, now + deltaBeforeEarliestMatch), equalTo(now + deltaBeforeEarliestMatch + expirationCallback.delay(expiryDate, now + deltaBeforeEarliestMatch).getMillis())).     assertThat(expirationCallback.nextScheduledTimeForExpiry(expiryDate, now + deltaBeforeEarliestMatch, now + deltaBeforeEarliestMatch), equalTo(now + deltaBeforeEarliestMatch + expirationCallback.delay(expiryDate, now + deltaBeforeEarliestMatch).getMillis())).     // after expiry and after max     int deltaAfterLatestMatch = between(latestValidTriggerDelay + 1, Integer.MAX_VALUE).     assertThat(expirationCallback.nextScheduledTimeForExpiry(expiryDate, now, now + deltaAfterLatestMatch), equalTo(-1L)).     assertThat(expirationCallback.nextScheduledTimeForExpiry(expiryDate, now + deltaAfterLatestMatch, now + deltaAfterLatestMatch), equalTo(-1L)). }
false;public;1;2;;@Override public void on(License license) { }
false;public;1;2;;@Override public void on(License license) { }
