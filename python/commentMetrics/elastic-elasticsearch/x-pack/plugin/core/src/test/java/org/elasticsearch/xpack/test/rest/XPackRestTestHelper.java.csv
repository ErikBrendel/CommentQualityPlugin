# id;timestamp;commentText;codeText;commentWords;codeWords
XPackRestTestHelper -> public static void waitForPendingTasks(RestClient adminClient) throws Exception;1524684173;Waits for pending tasks to complete;public static void waitForPendingTasks(RestClient adminClient) throws Exception {_        ESTestCase.assertBusy(() -> {_            try {_                Response response = adminClient.performRequest("GET", "/_cat/tasks",_                        Collections.singletonMap("detailed", "true"))__                _                _                _                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {_                    try (BufferedReader responseReader = new BufferedReader(_                            new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {_                        int activeTasks = 0__                        String line__                        StringBuilder tasksListString = new StringBuilder()__                        while ((line = responseReader.readLine()) != null) {_                            if (line.startsWith(ListTasksAction.NAME) == false) {_                                activeTasks++__                                tasksListString.append(line)__                                tasksListString.append('\n')__                            }_                        }_                        assertEquals(activeTasks + " active tasks found:\n" + tasksListString, 0, activeTasks)__                    }_                }_            } catch (IOException e) {_                throw new AssertionError("Error getting active tasks list", e)__            }_        })__    };waits,for,pending,tasks,to,complete;public,static,void,wait,for,pending,tasks,rest,client,admin,client,throws,exception,estest,case,assert,busy,try,response,response,admin,client,perform,request,get,tasks,collections,singleton,map,detailed,true,if,response,get,status,line,get,status,code,http,status,try,buffered,reader,response,reader,new,buffered,reader,new,input,stream,reader,response,get,entity,get,content,standard,charsets,int,active,tasks,0,string,line,string,builder,tasks,list,string,new,string,builder,while,line,response,reader,read,line,null,if,line,starts,with,list,tasks,action,name,false,active,tasks,tasks,list,string,append,line,tasks,list,string,append,n,assert,equals,active,tasks,active,tasks,found,n,tasks,list,string,0,active,tasks,catch,ioexception,e,throw,new,assertion,error,error,getting,active,tasks,list,e
XPackRestTestHelper -> public static void waitForPendingTasks(RestClient adminClient) throws Exception;1532434432;Waits for pending tasks to complete;public static void waitForPendingTasks(RestClient adminClient) throws Exception {_        ESTestCase.assertBusy(() -> {_            try {_                Request request = new Request("GET", "/_cat/tasks")__                request.addParameter("detailed", "true")__                Response response = adminClient.performRequest(request)__                _                _                _                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {_                    try (BufferedReader responseReader = new BufferedReader(_                            new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {_                        int activeTasks = 0__                        String line__                        StringBuilder tasksListString = new StringBuilder()__                        while ((line = responseReader.readLine()) != null) {_                            if (line.startsWith(ListTasksAction.NAME) == false) {_                                activeTasks++__                                tasksListString.append(line)__                                tasksListString.append('\n')__                            }_                        }_                        assertEquals(activeTasks + " active tasks found:\n" + tasksListString, 0, activeTasks)__                    }_                }_            } catch (IOException e) {_                throw new AssertionError("Error getting active tasks list", e)__            }_        })__    };waits,for,pending,tasks,to,complete;public,static,void,wait,for,pending,tasks,rest,client,admin,client,throws,exception,estest,case,assert,busy,try,request,request,new,request,get,tasks,request,add,parameter,detailed,true,response,response,admin,client,perform,request,request,if,response,get,status,line,get,status,code,http,status,try,buffered,reader,response,reader,new,buffered,reader,new,input,stream,reader,response,get,entity,get,content,standard,charsets,int,active,tasks,0,string,line,string,builder,tasks,list,string,new,string,builder,while,line,response,reader,read,line,null,if,line,starts,with,list,tasks,action,name,false,active,tasks,tasks,list,string,append,line,tasks,list,string,append,n,assert,equals,active,tasks,active,tasks,found,n,tasks,list,string,0,active,tasks,catch,ioexception,e,throw,new,assertion,error,error,getting,active,tasks,list,e
XPackRestTestHelper -> public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException;1545155131;For each template name wait for the template to be created and_for the template version to be equal to the master node version.__@param client            The rest client_@param templateNames     Names of the templates to wait for_@throws InterruptedException If the wait is interrupted;public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    String string = EntityUtils.toString(client.performRequest(new Request("GET", "/_template/" + template)).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };for,each,template,name,wait,for,the,template,to,be,created,and,for,the,template,version,to,be,equal,to,the,master,node,version,param,client,the,rest,client,param,template,names,names,of,the,templates,to,wait,for,throws,interrupted,exception,if,the,wait,is,interrupted;public,static,void,wait,for,templates,rest,client,client,list,string,template,names,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,for,string,template,template,names,estest,case,await,busy,map,response,try,string,string,entity,utils,to,string,client,perform,request,new,request,get,template,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException;1547843554;For each template name wait for the template to be created and_for the template version to be equal to the master node version.__@param client            The rest client_@param templateNames     Names of the templates to wait for_@throws InterruptedException If the wait is interrupted;public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    String string = EntityUtils.toString(client.performRequest(new Request("GET", "/_template/" + template)).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };for,each,template,name,wait,for,the,template,to,be,created,and,for,the,template,version,to,be,equal,to,the,master,node,version,param,client,the,rest,client,param,template,names,names,of,the,templates,to,wait,for,throws,interrupted,exception,if,the,wait,is,interrupted;public,static,void,wait,for,templates,rest,client,client,list,string,template,names,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,for,string,template,template,names,estest,case,await,busy,map,response,try,string,string,entity,utils,to,string,client,perform,request,new,request,get,template,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException;1549390073;For each template name wait for the template to be created and_for the template version to be equal to the master node version.__@param client            The rest client_@param templateNames     Names of the templates to wait for_@throws InterruptedException If the wait is interrupted;public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    final Request getRequest = new Request("GET", "_template/" + template)__                    getRequest.setOptions(ESRestTestCase.allowTypeRemovalWarnings())__                    String string = EntityUtils.toString(client.performRequest(getRequest).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };for,each,template,name,wait,for,the,template,to,be,created,and,for,the,template,version,to,be,equal,to,the,master,node,version,param,client,the,rest,client,param,template,names,names,of,the,templates,to,wait,for,throws,interrupted,exception,if,the,wait,is,interrupted;public,static,void,wait,for,templates,rest,client,client,list,string,template,names,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,for,string,template,template,names,estest,case,await,busy,map,response,try,final,request,get,request,new,request,get,template,get,request,set,options,esrest,test,case,allow,type,removal,warnings,string,string,entity,utils,to,string,client,perform,request,get,request,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException;1550083218;For each template name wait for the template to be created and_for the template version to be equal to the master node version.__@param client            The rest client_@param templateNames     Names of the templates to wait for_@throws InterruptedException If the wait is interrupted;public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    final Request getRequest = new Request("GET", "_template/" + template)__                    getRequest.setOptions(allowTypesRemovalWarnings())__                    String string = EntityUtils.toString(client.performRequest(getRequest).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };for,each,template,name,wait,for,the,template,to,be,created,and,for,the,template,version,to,be,equal,to,the,master,node,version,param,client,the,rest,client,param,template,names,names,of,the,templates,to,wait,for,throws,interrupted,exception,if,the,wait,is,interrupted;public,static,void,wait,for,templates,rest,client,client,list,string,template,names,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,for,string,template,template,names,estest,case,await,busy,map,response,try,final,request,get,request,new,request,get,template,get,request,set,options,allow,types,removal,warnings,string,string,entity,utils,to,string,client,perform,request,get,request,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException;1550504256;For each template name wait for the template to be created and_for the template version to be equal to the master node version.__@param client            The rest client_@param templateNames     Names of the templates to wait for_@throws InterruptedException If the wait is interrupted;public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    final Request getRequest = new Request("GET", "_template/" + template)__                    getRequest.setOptions(allowTypesRemovalWarnings())__                    String string = EntityUtils.toString(client.performRequest(getRequest).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };for,each,template,name,wait,for,the,template,to,be,created,and,for,the,template,version,to,be,equal,to,the,master,node,version,param,client,the,rest,client,param,template,names,names,of,the,templates,to,wait,for,throws,interrupted,exception,if,the,wait,is,interrupted;public,static,void,wait,for,templates,rest,client,client,list,string,template,names,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,for,string,template,template,names,estest,case,await,busy,map,response,try,final,request,get,request,new,request,get,template,get,request,set,options,allow,types,removal,warnings,string,string,entity,utils,to,string,client,perform,request,get,request,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForMlTemplates(RestClient client) throws InterruptedException;1524684173;Waits for the Machine Learning templates to be created_and check the version is up to date;public static void waitForMlTemplates(RestClient client) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                response = EntityUtils_                        .toString(client.performRequest("GET", "/_cat/nodes", singletonMap("h", "master,version")).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        final List<String> templateNames = Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                AnomalyDetectorsIndex.jobStateIndexName(), AnomalyDetectorsIndex.jobResultsIndexPrefix())__        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    String string = EntityUtils.toString(client.performRequest("GET", "/_template/" + template).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };waits,for,the,machine,learning,templates,to,be,created,and,check,the,version,is,up,to,date;public,static,void,wait,for,ml,templates,rest,client,client,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,response,entity,utils,to,string,client,perform,request,get,nodes,singleton,map,h,master,version,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,final,list,string,template,names,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,template,names,estest,case,await,busy,map,response,try,string,string,entity,utils,to,string,client,perform,request,get,template,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForMlTemplates(RestClient client) throws InterruptedException;1532434432;Waits for the Machine Learning templates to be created_and check the version is up to date;public static void waitForMlTemplates(RestClient client) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        final List<String> templateNames = Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                AnomalyDetectorsIndex.jobStateIndexName(), AnomalyDetectorsIndex.jobResultsIndexPrefix())__        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    String string = EntityUtils.toString(client.performRequest(new Request("GET", "/_template/" + template)).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };waits,for,the,machine,learning,templates,to,be,created,and,check,the,version,is,up,to,date;public,static,void,wait,for,ml,templates,rest,client,client,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,final,list,string,template,names,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,template,names,estest,case,await,busy,map,response,try,string,string,entity,utils,to,string,client,perform,request,new,request,get,template,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForMlTemplates(RestClient client) throws InterruptedException;1537202470;Waits for the Machine Learning templates to be created_and check the version is up to date;public static void waitForMlTemplates(RestClient client) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        final List<String> templateNames = Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                AnomalyDetectorsIndex.jobStateIndexName(), AnomalyDetectorsIndex.jobResultsIndexPrefix())__        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    String string = EntityUtils.toString(client.performRequest(new Request("GET", "/_template/" + template)).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };waits,for,the,machine,learning,templates,to,be,created,and,check,the,version,is,up,to,date;public,static,void,wait,for,ml,templates,rest,client,client,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,final,list,string,template,names,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,template,names,estest,case,await,busy,map,response,try,string,string,entity,utils,to,string,client,perform,request,new,request,get,template,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
XPackRestTestHelper -> public static void waitForMlTemplates(RestClient client) throws InterruptedException;1540238977;Waits for the Machine Learning templates to be created_and check the version is up to date;public static void waitForMlTemplates(RestClient client) throws InterruptedException {_        AtomicReference<Version> masterNodeVersion = new AtomicReference<>()__        ESTestCase.awaitBusy(() -> {_            String response__            try {_                Request request = new Request("GET", "/_cat/nodes")__                request.addParameter("h", "master,version")__                response = EntityUtils.toString(client.performRequest(request).getEntity())__            } catch (IOException e) {_                throw new RuntimeException(e)__            }_            for (String line : response.split("\n")) {_                if (line.startsWith("*")) {_                    masterNodeVersion.set(Version.fromString(line.substring(2).trim()))__                    return true__                }_            }_            return false__        })___        final List<String> templateNames = Arrays.asList(AuditorField.NOTIFICATIONS_INDEX, MlMetaIndex.INDEX_NAME,_                AnomalyDetectorsIndex.jobStateIndexName(), AnomalyDetectorsIndex.jobResultsIndexPrefix())__        for (String template : templateNames) {_            ESTestCase.awaitBusy(() -> {_                Map<?, ?> response__                try {_                    String string = EntityUtils.toString(client.performRequest(new Request("GET", "/_template/" + template)).getEntity())__                    response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false)__                } catch (ResponseException e) {_                    if (e.getResponse().getStatusLine().getStatusCode() == 404) {_                        return false__                    }_                    throw new RuntimeException(e)__                } catch (IOException e) {_                    throw new RuntimeException(e)__                }_                Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template)__                return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get())__            })__        }_    };waits,for,the,machine,learning,templates,to,be,created,and,check,the,version,is,up,to,date;public,static,void,wait,for,ml,templates,rest,client,client,throws,interrupted,exception,atomic,reference,version,master,node,version,new,atomic,reference,estest,case,await,busy,string,response,try,request,request,new,request,get,nodes,request,add,parameter,h,master,version,response,entity,utils,to,string,client,perform,request,request,get,entity,catch,ioexception,e,throw,new,runtime,exception,e,for,string,line,response,split,n,if,line,starts,with,master,node,version,set,version,from,string,line,substring,2,trim,return,true,return,false,final,list,string,template,names,arrays,as,list,auditor,field,ml,meta,index,anomaly,detectors,index,job,state,index,name,anomaly,detectors,index,job,results,index,prefix,for,string,template,template,names,estest,case,await,busy,map,response,try,string,string,entity,utils,to,string,client,perform,request,new,request,get,template,get,entity,response,xcontent,helper,convert,to,map,json,xcontent,json,xcontent,string,false,catch,response,exception,e,if,e,get,response,get,status,line,get,status,code,404,return,false,throw,new,runtime,exception,e,catch,ioexception,e,throw,new,runtime,exception,e,map,template,definition,map,response,get,template,return,version,from,id,integer,template,definition,get,version,equals,master,node,version,get
