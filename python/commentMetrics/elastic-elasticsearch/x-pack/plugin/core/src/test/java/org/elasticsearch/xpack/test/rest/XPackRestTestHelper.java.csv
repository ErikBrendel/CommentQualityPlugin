commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;41;/**  * For each template name wait for the template to be created and  * for the template version to be equal to the master node version.  *  * @param client            The rest client  * @param templateNames     Names of the templates to wait for  * @throws InterruptedException If the wait is interrupted  */ ;/**  * For each template name wait for the template to be created and  * for the template version to be equal to the master node version.  *  * @param client            The rest client  * @param templateNames     Names of the templates to wait for  * @throws InterruptedException If the wait is interrupted  */ public static void waitForTemplates(RestClient client, List<String> templateNames) throws InterruptedException {     AtomicReference<Version> masterNodeVersion = new AtomicReference<>().     ESTestCase.awaitBusy(() -> {         String response.         try {             Request request = new Request("GET", "/_cat/nodes").             request.addParameter("h", "master,version").             response = EntityUtils.toString(client.performRequest(request).getEntity()).         } catch (IOException e) {             throw new RuntimeException(e).         }         for (String line : response.split("\n")) {             if (line.startsWith("*")) {                 masterNodeVersion.set(Version.fromString(line.substring(2).trim())).                 return true.             }         }         return false.     }).     for (String template : templateNames) {         ESTestCase.awaitBusy(() -> {             Map<?, ?> response.             try {                 final Request getRequest = new Request("GET", "_template/" + template).                 getRequest.setOptions(allowTypesRemovalWarnings()).                 String string = EntityUtils.toString(client.performRequest(getRequest).getEntity()).                 response = XContentHelper.convertToMap(JsonXContent.jsonXContent, string, false).             } catch (ResponseException e) {                 if (e.getResponse().getStatusLine().getStatusCode() == 404) {                     return false.                 }                 throw new RuntimeException(e).             } catch (IOException e) {                 throw new RuntimeException(e).             }             Map<?, ?> templateDefinition = (Map<?, ?>) response.get(template).             return Version.fromId((Integer) templateDefinition.get("version")).equals(masterNodeVersion.get()).         }).     } }
