commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static MlFilter createTestFilter() {     return new MlFilterTests().createTestInstance(). }
false;protected;0;4;;@Override protected MlFilter createTestInstance() {     return createRandom(). }
false;public,static;0;3;;public static MlFilter createRandom() {     return createRandom(randomValidFilterId()). }
false;public,static;0;4;;public static String randomValidFilterId() {     CodepointSetGenerator generator = new CodepointSetGenerator("abcdefghijklmnopqrstuvwxyz".toCharArray()).     return generator.ofCodePointsLength(random(), 10, 10). }
false;public,static;1;13;;public static MlFilter createRandom(String filterId) {     String description = null.     if (randomBoolean()) {         description = randomAlphaOfLength(20).     }     int size = randomInt(10).     TreeSet<String> items = new TreeSet<>().     for (int i = 0. i < size. i++) {         items.add(randomAlphaOfLengthBetween(1, 20)).     }     return MlFilter.builder(filterId).setDescription(description).setItems(items).build(). }
false;protected;0;4;;@Override protected Reader<MlFilter> instanceReader() {     return MlFilter::new. }
false;protected;1;4;;@Override protected MlFilter doParseInstance(XContentParser parser) {     return MlFilter.STRICT_PARSER.apply(parser, null).build(). }
false;public;0;4;;public void testNullId() {     Exception ex = expectThrows(IllegalArgumentException.class, () -> MlFilter.builder(null).build()).     assertEquals("[filter_id] must not be null.", ex.getMessage()). }
false;public;0;5;;public void testNullItems() {     Exception ex = expectThrows(IllegalArgumentException.class, () -> MlFilter.builder(randomValidFilterId()).setItems((SortedSet<String>) null).build()).     assertEquals("[items] must not be null.", ex.getMessage()). }
false;public;0;3;;public void testDocumentId() {     assertThat(MlFilter.documentId("foo"), equalTo("filter_foo")). }
false;public;0;9;;public void testStrictParser() throws IOException {     String json = "{\"filter_id\":\"filter_1\", \"items\": [], \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> MlFilter.STRICT_PARSER.apply(parser, null)).         assertThat(e.getMessage(), containsString("unknown field [foo]")).     } }
false;public;0;6;;public void testLenientParser() throws IOException {     String json = "{\"filter_id\":\"filter_1\", \"items\": [], \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         MlFilter.LENIENT_PARSER.apply(parser, null).     } }
false;public;0;4;;public void testInvalidId() {     ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> MlFilter.builder("Invalid id").build()).     assertThat(e.getMessage(), startsWith("Invalid filter_id. 'Invalid id' can contain lowercase")). }
false;public;0;9;;public void testTooManyItems() {     List<String> items = new ArrayList<>(10001).     for (int i = 0. i < 10001. ++i) {         items.add("item_" + i).     }     ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> MlFilter.builder("huge").setItems(items).build()).     assertThat(e.getMessage(), startsWith("Filter [huge] contains too many items")). }
false;public;0;10;;public void testGivenItemsAreMaxAllowed() {     List<String> items = new ArrayList<>(10000).     for (int i = 0. i < 10000. ++i) {         items.add("item_" + i).     }     MlFilter hugeFilter = MlFilter.builder("huge").setItems(items).build().     assertThat(hugeFilter.getItems().size(), equalTo(items.size())). }
false;public;0;4;;public void testItemsAreSorted() {     MlFilter filter = MlFilter.builder("foo").setItems("c", "b", "a").build().     assertThat(filter.getItems(), contains("a", "b", "c")). }
false;public;0;4;;public void testGetItemsReturnsUnmodifiable() {     MlFilter filter = MlFilter.builder("foo").setItems("c", "b", "a").build().     expectThrows(UnsupportedOperationException.class, () -> filter.getItems().add("x")). }
