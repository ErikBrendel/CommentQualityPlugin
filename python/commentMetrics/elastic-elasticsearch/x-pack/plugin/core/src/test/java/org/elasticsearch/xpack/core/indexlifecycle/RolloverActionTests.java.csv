commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected RolloverAction doParseInstance(XContentParser parser) throws IOException {     return RolloverAction.parse(parser). }
false;protected;0;4;;@Override protected RolloverAction createTestInstance() {     return randomInstance(). }
false;static;0;9;;static RolloverAction randomInstance() {     ByteSizeUnit maxSizeUnit = randomFrom(ByteSizeUnit.values()).     ByteSizeValue maxSize = randomBoolean() ? null : new ByteSizeValue(randomNonNegativeLong() / maxSizeUnit.toBytes(1), maxSizeUnit).     Long maxDocs = randomBoolean() ? null : randomNonNegativeLong().     TimeValue maxAge = (maxDocs == null && maxSize == null || randomBoolean()) ? TimeValue.parseTimeValue(randomPositiveTimeValue(), "rollover_action_test") : null.     return new RolloverAction(maxSize, maxAge, maxDocs). }
false;protected;0;4;;@Override protected Reader<RolloverAction> instanceReader() {     return RolloverAction::new. }
false;protected;1;24;;@Override protected RolloverAction mutateInstance(RolloverAction instance) throws IOException {     ByteSizeValue maxSize = instance.getMaxSize().     TimeValue maxAge = instance.getMaxAge().     Long maxDocs = instance.getMaxDocs().     switch(between(0, 2)) {         case 0:             maxSize = randomValueOtherThan(maxSize, () -> {                 ByteSizeUnit maxSizeUnit = randomFrom(ByteSizeUnit.values()).                 return new ByteSizeValue(randomNonNegativeLong() / maxSizeUnit.toBytes(1), maxSizeUnit).             }).             break.         case 1:             maxAge = randomValueOtherThan(maxAge, () -> TimeValue.parseTimeValue(randomPositiveTimeValue(), "rollover_action_test")).             break.         case 2:             maxDocs = maxDocs == null ? randomNonNegativeLong() : maxDocs + 1.             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new RolloverAction(maxSize, maxAge, maxDocs). }
false;public;0;5;;public void testNoConditions() {     IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> new RolloverAction(null, null, null)).     assertEquals("At least one rollover condition must be set.", exception.getMessage()). }
false;public;0;28;;public void testToSteps() {     RolloverAction action = createTestInstance().     String phase = randomAlphaOfLengthBetween(1, 10).     StepKey nextStepKey = new StepKey(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10)).     List<Step> steps = action.toSteps(null, phase, nextStepKey).     assertNotNull(steps).     assertEquals(4, steps.size()).     StepKey expectedFirstStepKey = new StepKey(phase, RolloverAction.NAME, WaitForRolloverReadyStep.NAME).     StepKey expectedSecondStepKey = new StepKey(phase, RolloverAction.NAME, RolloverStep.NAME).     StepKey expectedThirdStepKey = new StepKey(phase, RolloverAction.NAME, UpdateRolloverLifecycleDateStep.NAME).     StepKey expectedFourthStepKey = new StepKey(phase, RolloverAction.NAME, RolloverAction.INDEXING_COMPLETE_STEP_NAME).     WaitForRolloverReadyStep firstStep = (WaitForRolloverReadyStep) steps.get(0).     RolloverStep secondStep = (RolloverStep) steps.get(1).     UpdateRolloverLifecycleDateStep thirdStep = (UpdateRolloverLifecycleDateStep) steps.get(2).     UpdateSettingsStep fourthStep = (UpdateSettingsStep) steps.get(3).     assertEquals(expectedFirstStepKey, firstStep.getKey()).     assertEquals(expectedSecondStepKey, secondStep.getKey()).     assertEquals(expectedThirdStepKey, thirdStep.getKey()).     assertEquals(expectedFourthStepKey, fourthStep.getKey()).     assertEquals(secondStep.getKey(), firstStep.getNextStepKey()).     assertEquals(thirdStep.getKey(), secondStep.getNextStepKey()).     assertEquals(fourthStep.getKey(), thirdStep.getNextStepKey()).     assertEquals(action.getMaxSize(), firstStep.getMaxSize()).     assertEquals(action.getMaxAge(), firstStep.getMaxAge()).     assertEquals(action.getMaxDocs(), firstStep.getMaxDocs()).     assertEquals(nextStepKey, fourthStep.getNextStepKey()). }
