commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected WaitForNoFollowersStep createRandomInstance() {     Step.StepKey stepKey = randomStepKey().     Step.StepKey nextStepKey = randomStepKey().     return new WaitForNoFollowersStep(stepKey, nextStepKey, mock(Client.class)). }
false;protected;1;13;;@Override protected WaitForNoFollowersStep mutateInstance(WaitForNoFollowersStep instance) {     Step.StepKey key = instance.getKey().     Step.StepKey nextKey = instance.getNextStepKey().     if (randomBoolean()) {         key = new Step.StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).     } else {         nextKey = new Step.StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).     }     return new WaitForNoFollowersStep(key, nextKey, instance.getClient()). }
false;protected;1;4;;@Override protected WaitForNoFollowersStep copyInstance(WaitForNoFollowersStep instance) {     return new WaitForNoFollowersStep(instance.getKey(), instance.getNextStepKey(), instance.getClient()). }
false;public;2;5;;@Override public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {     conditionMetHolder.set(conditionMet).     stepInfoHolder.set(infomationContext). }
false;public;1;4;;@Override public void onFailure(Exception e) {     fail("onFailure should not be called in this test, called with exception: " + e.getMessage()). }
false;public;0;32;;public void testConditionMet() {     WaitForNoFollowersStep step = createRandomInstance().     String indexName = randomAlphaOfLengthBetween(5, 10).     int numberOfShards = randomIntBetween(1, 100).     final IndexMetaData indexMetaData = IndexMetaData.builder(indexName).settings(settings(Version.CURRENT)).numberOfShards(numberOfShards).numberOfReplicas(randomIntBetween(1, 10)).build().     mockIndexStatsCall(step.getClient(), indexName, randomIndexStats(false, numberOfShards)).     final SetOnce<Boolean> conditionMetHolder = new SetOnce<>().     final SetOnce<ToXContentObject> stepInfoHolder = new SetOnce<>().     step.evaluateCondition(indexMetaData, new AsyncWaitStep.Listener() {          @Override         public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {             conditionMetHolder.set(conditionMet).             stepInfoHolder.set(infomationContext).         }          @Override         public void onFailure(Exception e) {             fail("onFailure should not be called in this test, called with exception: " + e.getMessage()).         }     }).     assertTrue(conditionMetHolder.get()).     assertNull(stepInfoHolder.get()). }
false;public;2;5;;@Override public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {     conditionMetHolder.set(conditionMet).     stepInfoHolder.set(infomationContext). }
false;public;1;4;;@Override public void onFailure(Exception e) {     fail("onFailure should not be called in this test, called with exception: " + e.getMessage()). }
false;public;0;33;;public void testConditionNotMet() {     WaitForNoFollowersStep step = createRandomInstance().     String indexName = randomAlphaOfLengthBetween(5, 10).     int numberOfShards = randomIntBetween(1, 100).     final IndexMetaData indexMetaData = IndexMetaData.builder(indexName).settings(settings(Version.CURRENT)).numberOfShards(numberOfShards).numberOfReplicas(randomIntBetween(1, 10)).build().     mockIndexStatsCall(step.getClient(), indexName, randomIndexStats(true, numberOfShards)).     final SetOnce<Boolean> conditionMetHolder = new SetOnce<>().     final SetOnce<ToXContentObject> stepInfoHolder = new SetOnce<>().     step.evaluateCondition(indexMetaData, new AsyncWaitStep.Listener() {          @Override         public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {             conditionMetHolder.set(conditionMet).             stepInfoHolder.set(infomationContext).         }          @Override         public void onFailure(Exception e) {             fail("onFailure should not be called in this test, called with exception: " + e.getMessage()).         }     }).     assertFalse(conditionMetHolder.get()).     assertThat(Strings.toString(stepInfoHolder.get()), containsString("this index is a leader index. waiting for all following indices to cease following before proceeding")). }
false;public;2;5;;@Override public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {     fail("onResponse should not be called in this test, called with conditionMet: " + conditionMet + " and stepInfo: " + Strings.toString(infomationContext)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     exceptionHolder.set(e). }
false;public;0;42;;public void testFailure() {     WaitForNoFollowersStep step = createRandomInstance().     String indexName = randomAlphaOfLengthBetween(5, 10).     int numberOfShards = randomIntBetween(1, 100).     IndexMetaData indexMetaData = IndexMetaData.builder(indexName).settings(settings(Version.CURRENT)).numberOfShards(numberOfShards).numberOfReplicas(randomIntBetween(1, 10)).build().     final Exception expectedException = new RuntimeException(randomAlphaOfLength(5)).     Client client = step.getClient().     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<IndicesStatsResponse> listener = (ActionListener<IndicesStatsResponse>) invocationOnMock.getArguments()[1].         listener.onFailure(expectedException).         return null.     }).when(indicesClient).stats(any(), any()).     final SetOnce<Exception> exceptionHolder = new SetOnce<>().     step.evaluateCondition(indexMetaData, new AsyncWaitStep.Listener() {          @Override         public void onResponse(boolean conditionMet, ToXContentObject infomationContext) {             fail("onResponse should not be called in this test, called with conditionMet: " + conditionMet + " and stepInfo: " + Strings.toString(infomationContext)).         }          @Override         public void onFailure(Exception e) {             exceptionHolder.set(e).         }     }).     assertThat(exceptionHolder.get(), equalTo(expectedException)). }
false;private;3;21;;private void mockIndexStatsCall(Client client, String expectedIndexName, IndexStats indexStats) {     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(invocationOnMock -> {         IndicesStatsRequest request = (IndicesStatsRequest) invocationOnMock.getArguments()[0].         assertThat(request.indices().length, equalTo(1)).         assertThat(request.indices()[0], equalTo(expectedIndexName)).         @SuppressWarnings("unchecked")         ActionListener<IndicesStatsResponse> listener = (ActionListener<IndicesStatsResponse>) invocationOnMock.getArguments()[1].         // Trying to create a real IndicesStatsResponse requires setting up a ShardRouting, so just mock it         IndicesStatsResponse response = mock(IndicesStatsResponse.class).         when(response.getIndex(expectedIndexName)).thenReturn(indexStats).         listener.onResponse(response).         return null.     }).when(indicesClient).stats(any(), any()). }
false;private;2;7;;private IndexStats randomIndexStats(boolean isLeaderIndex, int numOfShards) {     ShardStats[] shardStats = new ShardStats[numOfShards].     for (int i = 0. i < numOfShards. i++) {         shardStats[i] = randomShardStats(isLeaderIndex).     }     return new IndexStats(randomAlphaOfLength(5), randomAlphaOfLength(10), shardStats). }
false;private;1;9;;private ShardStats randomShardStats(boolean isLeaderIndex) {     return new ShardStats(null, mockShardPath(), null, null, null, randomRetentionLeaseStats(isLeaderIndex)). }
false;private;1;11;;private RetentionLeaseStats randomRetentionLeaseStats(boolean isLeaderIndex) {     int numOfLeases = randomIntBetween(1, 10).     ArrayList<RetentionLease> leases = new ArrayList<>().     for (int i = 0. i < numOfLeases. i++) {         leases.add(new RetentionLease(randomAlphaOfLength(5), randomNonNegativeLong(), randomNonNegativeLong(), isLeaderIndex ? CCR_LEASE_KEY : randomAlphaOfLength(5))).     }     return new RetentionLeaseStats(new RetentionLeases(randomLongBetween(1, Long.MAX_VALUE), randomLongBetween(1, Long.MAX_VALUE), leases)). }
false;private;0;24;;private ShardPath mockShardPath() {     // Mock paths in a way that pass ShardPath constructor assertions     final int shardId = randomIntBetween(0, 10).     final Path getFileNameShardId = mock(Path.class).     when(getFileNameShardId.toString()).thenReturn(Integer.toString(shardId)).     final String shardUuid = randomAlphaOfLength(5).     final Path getFileNameShardUuid = mock(Path.class).     when(getFileNameShardUuid.toString()).thenReturn(shardUuid).     final Path getParent = mock(Path.class).     when(getParent.getFileName()).thenReturn(getFileNameShardUuid).     final Path path = mock(Path.class).     when(path.getParent()).thenReturn(getParent).     when(path.getFileName()).thenReturn(getFileNameShardId).     // Mock paths for ShardPath#getRootDataPath()     final Path getParentOfParent = mock(Path.class).     when(getParent.getParent()).thenReturn(getParentOfParent).     when(getParentOfParent.getParent()).thenReturn(mock(Path.class)).     return new ShardPath(false, path, path, new ShardId(randomAlphaOfLength(5), shardUuid, shardId)). }
