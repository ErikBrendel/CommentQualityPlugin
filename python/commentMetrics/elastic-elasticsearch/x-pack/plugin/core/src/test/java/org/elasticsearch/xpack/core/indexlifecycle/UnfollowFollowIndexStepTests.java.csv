commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;4;;@Override protected UnfollowFollowIndexStep newInstance(Step.StepKey key, Step.StepKey nextKey, Client client) {     return new UnfollowFollowIndexStep(key, nextKey, client). }
false;public;1;4;;@Override public void onResponse(boolean complete) {     completed[0] = complete. }
false;public;1;4;;@Override public void onFailure(Exception e) {     failure[0] = e. }
false;public;0;40;;public void testUnFollow() {     IndexMetaData indexMetadata = IndexMetaData.builder("follower-index").settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE, "true")).putCustom(CCR_METADATA_KEY, Collections.emptyMap()).numberOfShards(1).numberOfReplicas(0).build().     Client client = Mockito.mock(Client.class).     AdminClient adminClient = Mockito.mock(AdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(invocation -> {         UnfollowAction.Request request = (UnfollowAction.Request) invocation.getArguments()[1].         assertThat(request.getFollowerIndex(), equalTo("follower-index")).         @SuppressWarnings("unchecked")         ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[2].         listener.onResponse(new AcknowledgedResponse(true)).         return null.     }).when(client).execute(Mockito.same(UnfollowAction.INSTANCE), Mockito.any(), Mockito.any()).     Boolean[] completed = new Boolean[1].     Exception[] failure = new Exception[1].     UnfollowFollowIndexStep step = new UnfollowFollowIndexStep(randomStepKey(), randomStepKey(), client).     step.performAction(indexMetadata, null, null, new AsyncActionStep.Listener() {          @Override         public void onResponse(boolean complete) {             completed[0] = complete.         }          @Override         public void onFailure(Exception e) {             failure[0] = e.         }     }).     assertThat(completed[0], is(true)).     assertThat(failure[0], nullValue()). }
false;public;1;4;;@Override public void onResponse(boolean complete) {     completed[0] = complete. }
false;public;1;4;;@Override public void onFailure(Exception e) {     failure[0] = e. }
false;public;0;41;;public void testUnFollowUnfollowFailed() {     IndexMetaData indexMetadata = IndexMetaData.builder("follower-index").settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE, "true")).putCustom(CCR_METADATA_KEY, Collections.emptyMap()).numberOfShards(1).numberOfReplicas(0).build().     Client client = Mockito.mock(Client.class).     AdminClient adminClient = Mockito.mock(AdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     // Mock unfollow api call:     Exception error = new RuntimeException().     Mockito.doAnswer(invocation -> {         UnfollowAction.Request request = (UnfollowAction.Request) invocation.getArguments()[1].         assertThat(request.getFollowerIndex(), equalTo("follower-index")).         ActionListener listener = (ActionListener) invocation.getArguments()[2].         listener.onFailure(error).         return null.     }).when(client).execute(Mockito.same(UnfollowAction.INSTANCE), Mockito.any(), Mockito.any()).     Boolean[] completed = new Boolean[1].     Exception[] failure = new Exception[1].     UnfollowFollowIndexStep step = new UnfollowFollowIndexStep(randomStepKey(), randomStepKey(), client).     step.performAction(indexMetadata, null, null, new AsyncActionStep.Listener() {          @Override         public void onResponse(boolean complete) {             completed[0] = complete.         }          @Override         public void onFailure(Exception e) {             failure[0] = e.         }     }).     assertThat(completed[0], nullValue()).     assertThat(failure[0], sameInstance(error)). }
false;public;1;4;;@Override public void onResponse(boolean complete) {     completed.set(complete). }
false;public;1;4;;@Override public void onFailure(Exception e) {     failure.set(e). }
false;public;0;42;;public void testFailureToReleaseRetentionLeases() {     IndexMetaData indexMetadata = IndexMetaData.builder("follower-index").settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE, "true")).putCustom(CCR_METADATA_KEY, Collections.emptyMap()).numberOfShards(1).numberOfReplicas(0).build().     Client client = Mockito.mock(Client.class).     AdminClient adminClient = Mockito.mock(AdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     // Mock unfollow api call:     ElasticsearchException error = new ElasticsearchException("text exception").     error.addMetadata("es.failed_to_remove_retention_leases", randomAlphaOfLength(10)).     Mockito.doAnswer(invocation -> {         UnfollowAction.Request request = (UnfollowAction.Request) invocation.getArguments()[1].         assertThat(request.getFollowerIndex(), equalTo("follower-index")).         ActionListener listener = (ActionListener) invocation.getArguments()[2].         listener.onFailure(error).         return null.     }).when(client).execute(Mockito.same(UnfollowAction.INSTANCE), Mockito.any(), Mockito.any()).     AtomicBoolean completed = new AtomicBoolean(false).     AtomicReference<Exception> failure = new AtomicReference<>().     UnfollowFollowIndexStep step = new UnfollowFollowIndexStep(randomStepKey(), randomStepKey(), client).     step.performAction(indexMetadata, null, null, new AsyncActionStep.Listener() {          @Override         public void onResponse(boolean complete) {             completed.set(complete).         }          @Override         public void onFailure(Exception e) {             failure.set(e).         }     }).     assertThat(completed.get(), equalTo(true)).     assertThat(failure.get(), nullValue()). }
