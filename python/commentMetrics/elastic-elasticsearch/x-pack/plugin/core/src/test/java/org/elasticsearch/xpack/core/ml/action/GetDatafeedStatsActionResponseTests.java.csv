commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;26;;@Override protected Response createTestInstance() {     final Response result.     int listSize = randomInt(10).     List<Response.DatafeedStats> datafeedStatsList = new ArrayList<>(listSize).     for (int j = 0. j < listSize. j++) {         String datafeedId = randomAlphaOfLength(10).         DatafeedState datafeedState = randomFrom(DatafeedState.values()).         DiscoveryNode node = null.         if (randomBoolean()) {             node = new DiscoveryNode("_id", new TransportAddress(InetAddress.getLoopbackAddress(), 9300), Version.CURRENT).         }         String explanation = null.         if (randomBoolean()) {             explanation = randomAlphaOfLength(3).         }         Response.DatafeedStats datafeedStats = new Response.DatafeedStats(datafeedId, datafeedState, node, explanation).         datafeedStatsList.add(datafeedStats).     }     result = new Response(new QueryPage<>(datafeedStatsList, datafeedStatsList.size(), DatafeedConfig.RESULTS_FIELD)).     return result. }
false;protected;0;4;;@Override protected Response createBlankInstance() {     return new Response(). }
false;public;0;40;;@SuppressWarnings("unchecked") public void testDatafeedStatsToXContent() throws IOException {     Map<String, String> attributes = new HashMap<>().     attributes.put("ml.enabled", "true").     attributes.put("ml.max_open_jobs", "5").     attributes.put("non-ml-attribute", "should be filtered out").     TransportAddress transportAddress = new TransportAddress(TransportAddress.META_ADDRESS, 9000).     DiscoveryNode node = new DiscoveryNode("df-node-name", "df-node-id", transportAddress, attributes, EnumSet.noneOf(DiscoveryNode.Role.class), Version.CURRENT).     Response.DatafeedStats stats = new Response.DatafeedStats("df-id", DatafeedState.STARTED, node, null).     XContentType xContentType = randomFrom(XContentType.values()).     BytesReference bytes.     try (XContentBuilder builder = XContentBuilder.builder(xContentType.xContent())) {         stats.toXContent(builder, ToXContent.EMPTY_PARAMS).         bytes = BytesReference.bytes(builder).     }     Map<String, Object> dfStatsMap = XContentHelper.convertToMap(bytes, randomBoolean(), xContentType).v2().     assertThat(dfStatsMap.size(), is(equalTo(3))).     assertThat(dfStatsMap, hasEntry("datafeed_id", "df-id")).     assertThat(dfStatsMap, hasEntry("state", "started")).     assertThat(dfStatsMap, hasKey("node")).     Map<String, Object> nodeMap = (Map<String, Object>) dfStatsMap.get("node").     assertThat(nodeMap, hasEntry("id", "df-node-id")).     assertThat(nodeMap, hasEntry("name", "df-node-name")).     assertThat(nodeMap, hasKey("ephemeral_id")).     assertThat(nodeMap, hasKey("transport_address")).     assertThat(nodeMap, hasKey("attributes")).     Map<String, Object> nodeAttributes = (Map<String, Object>) nodeMap.get("attributes").     assertThat(nodeAttributes.size(), is(equalTo(2))).     assertThat(nodeAttributes, hasEntry("ml.enabled", "true")).     assertThat(nodeAttributes, hasEntry("ml.max_open_jobs", "5")). }
