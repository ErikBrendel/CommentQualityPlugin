commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void clearMlMetadata() throws IOException {     deleteAllDatafeeds().     deleteAllJobs(). // indices will be deleted by the ESRestTestCase class }
false;private;0;29;;@SuppressWarnings("unchecked") private void deleteAllDatafeeds() throws IOException {     final Request datafeedsRequest = new Request("GET", "/_ml/datafeeds").     datafeedsRequest.addParameter("filter_path", "datafeeds").     final Response datafeedsResponse = adminClient.performRequest(datafeedsRequest).     final List<Map<String, Object>> datafeeds = (List<Map<String, Object>>) XContentMapValues.extractValue("datafeeds", ESRestTestCase.entityAsMap(datafeedsResponse)).     if (datafeeds == null) {         return.     }     try {         adminClient.performRequest(new Request("POST", "/_ml/datafeeds/_all/_stop")).     } catch (Exception e1) {         logger.warn("failed to stop all datafeeds. Forcing stop", e1).         try {             adminClient.performRequest(new Request("POST", "/_ml/datafeeds/_all/_stop?force=true")).         } catch (Exception e2) {             logger.warn("Force-closing all data feeds failed", e2).         }         throw new RuntimeException("Had to resort to force-stopping datafeeds, something went wrong?", e1).     }     for (Map<String, Object> datafeed : datafeeds) {         String datafeedId = (String) datafeed.get("datafeed_id").         adminClient.performRequest(new Request("DELETE", "/_ml/datafeeds/" + datafeedId)).     } }
false;private;0;29;;private void deleteAllJobs() throws IOException {     final Request jobsRequest = new Request("GET", "/_ml/anomaly_detectors").     jobsRequest.addParameter("filter_path", "jobs").     final Response response = adminClient.performRequest(jobsRequest).     @SuppressWarnings("unchecked")     final List<Map<String, Object>> jobConfigs = (List<Map<String, Object>>) XContentMapValues.extractValue("jobs", ESRestTestCase.entityAsMap(response)).     if (jobConfigs == null) {         return.     }     try {         adminClient.performRequest(new Request("POST", "/_ml/anomaly_detectors/_all/_close")).     } catch (Exception e1) {         logger.warn("failed to close all jobs. Forcing closed", e1).         try {             adminClient.performRequest(new Request("POST", "/_ml/anomaly_detectors/_all/_close?force=true")).         } catch (Exception e2) {             logger.warn("Force-closing all jobs failed", e2).         }         throw new RuntimeException("Had to resort to force-closing jobs, something went wrong?", e1).     }     for (Map<String, Object> jobConfig : jobConfigs) {         String jobId = (String) jobConfig.get("job_id").         adminClient.performRequest(new Request("DELETE", "/_ml/anomaly_detectors/" + jobId)).     } }
