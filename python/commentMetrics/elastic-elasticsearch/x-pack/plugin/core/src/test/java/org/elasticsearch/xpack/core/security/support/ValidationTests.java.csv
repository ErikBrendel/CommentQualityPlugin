commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void testUsernameValid() throws Exception {     int length = randomIntBetween(Validation.MIN_NAME_LENGTH, Validation.MAX_NAME_LENGTH).     String name = new String(generateValidName(length)).     assertThat(Users.validateUsername(name, false, Settings.EMPTY), nullValue()). }
false;public;0;6;;public void testUsernameReserved() {     final String username = randomFrom(ElasticUser.NAME, KibanaUser.NAME).     final Error error = Users.validateUsername(username, false, Settings.EMPTY).     assertNotNull(error).     assertThat(error.toString(), containsString("is reserved")). }
false;public;0;8;;public void testUsernameInvalidLength() throws Exception {     int length = frequently() ? randomIntBetween(Validation.MAX_NAME_LENGTH + 1, 2048) : 0.     char[] name = new char[length].     if (length > 0) {         name = generateValidName(length).     }     assertThat(Users.validateUsername(new String(name), false, Settings.EMPTY), notNullValue()). }
false;public;0;5;;public void testUsernameInvalidCharacters() throws Exception {     int length = randomIntBetween(Validation.MIN_NAME_LENGTH, Validation.MAX_NAME_LENGTH).     String name = new String(generateNameInvalidCharacters(length)).     assertThat(Users.validateUsername(name, false, Settings.EMPTY), notNullValue()). }
false;public;0;5;;public void testUsernameInvalidWhitespace() throws Exception {     int length = randomIntBetween(Validation.MIN_NAME_LENGTH, Validation.MAX_NAME_LENGTH).     String name = new String(generateNameInvalidWhitespace(length)).     assertThat(Users.validateUsername(name, false, Settings.EMPTY), notNullValue()). }
false;public;0;9;;public void testUsersValidatePassword() throws Exception {     String passwd = randomAlphaOfLength(randomIntBetween(0, 20)).     logger.info("{}[{}]", passwd, passwd.length()).     if (passwd.length() >= 6) {         assertThat(Users.validatePassword(passwd.toCharArray()), nullValue()).     } else {         assertThat(Users.validatePassword(passwd.toCharArray()), notNullValue()).     } }
false;public;0;5;;public void testRoleNameValid() throws Exception {     int length = randomIntBetween(Validation.MIN_NAME_LENGTH, Validation.MAX_NAME_LENGTH).     String name = new String(generateValidName(length)).     assertThat(Roles.validateRoleName(name), nullValue()). }
false;public;0;9;;public void testRoleNameReserved() {     final String rolename = randomFrom(ReservedRolesStore.names()).     final Error error = Roles.validateRoleName(rolename).     assertNotNull(error).     assertThat(error.toString(), containsString("is reserved")).     final Error allowed = Roles.validateRoleName(rolename, true).     assertNull(allowed). }
false;public;0;8;;public void testRoleNameInvalidLength() throws Exception {     int length = frequently() ? randomIntBetween(Validation.MAX_NAME_LENGTH + 1, 2048) : 0.     char[] name = new char[length].     if (length > 0) {         name = generateValidName(length).     }     assertThat(Roles.validateRoleName(new String(name), false), notNullValue()). }
false;public;0;5;;public void testRoleNameInvalidCharacters() throws Exception {     int length = randomIntBetween(Validation.MIN_NAME_LENGTH, Validation.MAX_NAME_LENGTH).     String name = new String(generateNameInvalidCharacters(length)).     assertThat(Roles.validateRoleName(name, false), notNullValue()). }
false;public;0;5;;public void testRoleNameInvalidWhitespace() throws Exception {     int length = randomIntBetween(Validation.MIN_NAME_LENGTH, Validation.MAX_NAME_LENGTH).     String name = new String(generateNameInvalidWhitespace(length)).     assertThat(Roles.validateRoleName(name, false), notNullValue()). }
false;private,static;1;11;;private static char[] generateValidName(int length) {     char[] name = new char[length].     name[0] = chooseValidNonWhitespaceCharacter().     if (length > 1) {         for (int i = 1. i < length - 1. i++) {             name[i] = chooseValidCharacter().         }     }     name[length - 1] = chooseValidNonWhitespaceCharacter().     return name. }
false;private,static;0;3;;private static char chooseValidCharacter() {     return randomFrom(ALLOWED_CHARS). }
false;private,static;0;7;;private static char chooseValidNonWhitespaceCharacter() {     char c = chooseValidCharacter().     while (c == ' ') {         c = chooseValidCharacter().     }     return c. }
false;private,static;1;16;;private static char[] generateNameInvalidCharacters(int length) {     char[] name = new char[length].     for (int i = 0. i < length. i++) {         char c.         while (true) {             c = randomUnicodeOfLength(1).charAt(0).             final char finalChar = c.             if (!Validation.VALID_NAME_CHARS.contains(finalChar)) {                 break.             }         }         name[i] = c.     }     return name. }
false;private,static;1;9;;private static char[] generateNameInvalidWhitespace(int length) {     char[] name = generateValidName(length).     if (randomBoolean()) {         name[0] = ' '.     } else {         name[name.length - 1] = ' '.     }     return name. }
