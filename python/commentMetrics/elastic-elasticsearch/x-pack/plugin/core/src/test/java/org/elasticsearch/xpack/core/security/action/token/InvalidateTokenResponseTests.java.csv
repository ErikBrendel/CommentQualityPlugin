commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;public void testSerialization() throws IOException {     TokensInvalidationResult result = new TokensInvalidationResult(Arrays.asList(generateRandomStringArray(20, 15, false)), Arrays.asList(generateRandomStringArray(20, 15, false)), Arrays.asList(new ElasticsearchException("foo", new IllegalArgumentException("this is an error message")), new ElasticsearchException("bar", new IllegalArgumentException("this is an error message2"))), randomIntBetween(0, 5)).     InvalidateTokenResponse response = new InvalidateTokenResponse(result).     try (BytesStreamOutput output = new BytesStreamOutput()) {         response.writeTo(output).         try (StreamInput input = output.bytes().streamInput()) {             InvalidateTokenResponse serialized = new InvalidateTokenResponse().             serialized.readFrom(input).             assertThat(serialized.getResult().getInvalidatedTokens(), equalTo(response.getResult().getInvalidatedTokens())).             assertThat(serialized.getResult().getPreviouslyInvalidatedTokens(), equalTo(response.getResult().getPreviouslyInvalidatedTokens())).             assertThat(serialized.getResult().getErrors().size(), equalTo(response.getResult().getErrors().size())).             assertThat(serialized.getResult().getErrors().get(0).toString(), containsString("this is an error message")).             assertThat(serialized.getResult().getErrors().get(1).toString(), containsString("this is an error message2")).         }     }     result = new TokensInvalidationResult(Arrays.asList(generateRandomStringArray(20, 15, false)), Arrays.asList(generateRandomStringArray(20, 15, false)), Collections.emptyList(), randomIntBetween(0, 5)).     response = new InvalidateTokenResponse(result).     try (BytesStreamOutput output = new BytesStreamOutput()) {         response.writeTo(output).         try (StreamInput input = output.bytes().streamInput()) {             InvalidateTokenResponse serialized = new InvalidateTokenResponse().             serialized.readFrom(input).             assertThat(serialized.getResult().getInvalidatedTokens(), equalTo(response.getResult().getInvalidatedTokens())).             assertThat(serialized.getResult().getPreviouslyInvalidatedTokens(), equalTo(response.getResult().getPreviouslyInvalidatedTokens())).             assertThat(serialized.getResult().getErrors().size(), equalTo(response.getResult().getErrors().size())).         }     } }
false;public;0;31;;public void testToXContent() throws IOException {     List invalidatedTokens = Arrays.asList(generateRandomStringArray(20, 15, false)).     List previouslyInvalidatedTokens = Arrays.asList(generateRandomStringArray(20, 15, false)).     TokensInvalidationResult result = new TokensInvalidationResult(invalidatedTokens, previouslyInvalidatedTokens, Arrays.asList(new ElasticsearchException("foo", new IllegalArgumentException("this is an error message")), new ElasticsearchException("bar", new IllegalArgumentException("this is an error message2"))), randomIntBetween(0, 5)).     InvalidateTokenResponse response = new InvalidateTokenResponse(result).     XContentBuilder builder = XContentFactory.jsonBuilder().     response.toXContent(builder, ToXContent.EMPTY_PARAMS).     assertThat(Strings.toString(builder), equalTo("{" + "\"invalidated_tokens\":" + invalidatedTokens.size() + "," + "\"previously_invalidated_tokens\":" + previouslyInvalidatedTokens.size() + "," + "\"error_count\":2," + "\"error_details\":[" + "{\"type\":\"exception\"," + "\"reason\":\"foo\"," + "\"caused_by\":{" + "\"type\":\"illegal_argument_exception\"," + "\"reason\":\"this is an error message\"}" + "}," + "{\"type\":\"exception\"," + "\"reason\":\"bar\"," + "\"caused_by\":" + "{\"type\":\"illegal_argument_exception\"," + "\"reason\":\"this is an error message2\"}" + "}" + "]" + "}")). }
