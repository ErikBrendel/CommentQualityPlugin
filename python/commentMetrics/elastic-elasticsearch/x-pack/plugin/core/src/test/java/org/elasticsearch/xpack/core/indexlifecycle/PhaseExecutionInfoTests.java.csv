commented;modifiers;parameterAmount;loc;comment;code
false;static;1;4;;static PhaseExecutionInfo randomPhaseExecutionInfo(String phaseName) {     return new PhaseExecutionInfo(randomAlphaOfLength(5), PhaseTests.randomTestPhase(phaseName), randomNonNegativeLong(), randomNonNegativeLong()). }
false;public;0;4;;@Before public void setupPhaseName() {     phaseName = randomAlphaOfLength(7). }
false;protected;0;4;;@Override protected PhaseExecutionInfo createTestInstance() {     return randomPhaseExecutionInfo(phaseName). }
false;protected;0;4;;@Override protected Reader<PhaseExecutionInfo> instanceReader() {     return PhaseExecutionInfo::new. }
false;protected;1;4;;@Override protected PhaseExecutionInfo doParseInstance(XContentParser parser) throws IOException {     return PhaseExecutionInfo.parse(parser, phaseName). }
false;protected;1;24;;@Override protected PhaseExecutionInfo mutateInstance(PhaseExecutionInfo instance) throws IOException {     String policyName = instance.getPolicyName().     Phase phase = instance.getPhase().     long version = instance.getVersion().     long modifiedDate = instance.getModifiedDate().     switch(between(0, 3)) {         case 0:             policyName = policyName + randomAlphaOfLengthBetween(1, 5).             break.         case 1:             phase = randomValueOtherThan(phase, () -> PhaseTests.randomTestPhase(randomAlphaOfLength(6))).             break.         case 2:             version++.             break.         case 3:             modifiedDate++.             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new PhaseExecutionInfo(policyName, phase, version, modifiedDate). }
false;protected;0;4;;protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Arrays.asList(new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new))). }
false;protected;0;6;;@Override protected NamedXContentRegistry xContentRegistry() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables()).     entries.add(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(MockAction.NAME), MockAction::parse)).     return new NamedXContentRegistry(entries). }
