commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void testSubActionPattern() throws Exception {     Predicate<String> predicate = Automatons.predicate("foo*").     assertThat(predicate.test("foo[n][nodes]"), is(true)).     assertThat(predicate.test("foo[n]"), is(true)).     assertThat(predicate.test("bar[n][nodes]"), is(false)).     assertThat(predicate.test("[n][nodes]"), is(false)). }
false;public;0;18;;public void testCluster() throws Exception {     Set<String> name = Sets.newHashSet("monitor").     ClusterPrivilege cluster = ClusterPrivilege.get(name).     assertThat(cluster, is(ClusterPrivilege.MONITOR)).     // since "all" implies "monitor", this should be the same language as All     name = Sets.newHashSet("monitor", "all").     cluster = ClusterPrivilege.get(name).     assertTrue(Operations.sameLanguage(ClusterPrivilege.ALL.automaton, cluster.automaton)).     name = Sets.newHashSet("monitor", "none").     cluster = ClusterPrivilege.get(name).     assertTrue(Operations.sameLanguage(ClusterPrivilege.MONITOR.automaton, cluster.automaton)).     Set<String> name2 = Sets.newHashSet("none", "monitor").     ClusterPrivilege cluster2 = ClusterPrivilege.get(name2).     assertThat(cluster, is(cluster2)). }
false;public;0;16;;public void testClusterTemplateActions() throws Exception {     Set<String> name = Sets.newHashSet("indices:admin/template/delete").     ClusterPrivilege cluster = ClusterPrivilege.get(name).     assertThat(cluster, notNullValue()).     assertThat(cluster.predicate().test("indices:admin/template/delete"), is(true)).     name = Sets.newHashSet("indices:admin/template/get").     cluster = ClusterPrivilege.get(name).     assertThat(cluster, notNullValue()).     assertThat(cluster.predicate().test("indices:admin/template/get"), is(true)).     name = Sets.newHashSet("indices:admin/template/put").     cluster = ClusterPrivilege.get(name).     assertThat(cluster, notNullValue()).     assertThat(cluster.predicate().test("indices:admin/template/put"), is(true)). }
false;public;0;5;;public void testClusterInvalidName() throws Exception {     thrown.expect(IllegalArgumentException.class).     Set<String> actionName = Sets.newHashSet("foobar").     ClusterPrivilege.get(actionName). }
false;public;0;7;;public void testClusterAction() throws Exception {     Set<String> actionName = Sets.newHashSet("cluster:admin/snapshot/delete").     ClusterPrivilege cluster = ClusterPrivilege.get(actionName).     assertThat(cluster, notNullValue()).     assertThat(cluster.predicate().test("cluster:admin/snapshot/delete"), is(true)).     assertThat(cluster.predicate().test("cluster:admin/snapshot/dele"), is(false)). }
false;public;0;9;;public void testIndexAction() throws Exception {     Set<String> actionName = Sets.newHashSet("indices:admin/mapping/delete").     IndexPrivilege index = IndexPrivilege.get(actionName).     assertThat(index, notNullValue()).     assertThat(index.predicate().test("indices:admin/mapping/delete"), is(true)).     assertThat(index.predicate().test("indices:admin/mapping/dele"), is(false)).     assertThat(IndexPrivilege.READ_CROSS_CLUSTER.predicate().test("internal:transport/proxy/indices:data/read/query"), is(true)). }
false;public;0;17;;public void testIndexCollapse() throws Exception {     IndexPrivilege[] values = IndexPrivilege.values().values().toArray(new IndexPrivilege[IndexPrivilege.values().size()]).     IndexPrivilege first = values[randomIntBetween(0, values.length - 1)].     IndexPrivilege second = values[randomIntBetween(0, values.length - 1)].     Set<String> name = Sets.newHashSet(first.name().iterator().next(), second.name().iterator().next()).     IndexPrivilege index = IndexPrivilege.get(name).     if (Operations.subsetOf(second.getAutomaton(), first.getAutomaton())) {         assertTrue(Operations.sameLanguage(index.getAutomaton(), first.getAutomaton())).     } else if (Operations.subsetOf(first.getAutomaton(), second.getAutomaton())) {         assertTrue(Operations.sameLanguage(index.getAutomaton(), second.getAutomaton())).     } else {         assertFalse(Operations.sameLanguage(index.getAutomaton(), first.getAutomaton())).         assertFalse(Operations.sameLanguage(index.getAutomaton(), second.getAutomaton())).     } }
false;public;0;34;;public void testSystem() throws Exception {     Predicate<String> predicate = SystemPrivilege.INSTANCE.predicate().     assertThat(predicate.test("indices:monitor/whatever"), is(true)).     assertThat(predicate.test("cluster:monitor/whatever"), is(true)).     assertThat(predicate.test("cluster:admin/snapshot/status[nodes]"), is(false)).     assertThat(predicate.test("internal:whatever"), is(true)).     assertThat(predicate.test("indices:whatever"), is(false)).     assertThat(predicate.test("cluster:whatever"), is(false)).     assertThat(predicate.test("cluster:admin/snapshot/status"), is(false)).     assertThat(predicate.test("whatever"), is(false)).     assertThat(predicate.test("cluster:admin/reroute"), is(true)).     assertThat(predicate.test("cluster:admin/whatever"), is(false)).     assertThat(predicate.test("indices:admin/mapping/put"), is(true)).     assertThat(predicate.test("indices:admin/mapping/whatever"), is(false)).     assertThat(predicate.test("internal:transport/proxy/indices:data/read/query"), is(false)).     assertThat(predicate.test("internal:transport/proxy/indices:monitor/whatever"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/global_checkpoint_sync"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/global_checkpoint_sync[p]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/global_checkpoint_sync[r]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/retention_lease_sync"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/retention_lease_sync[p]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/retention_lease_sync[r]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/retention_lease_background_sync"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/retention_lease_background_sync[p]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/retention_lease_background_sync[r]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/add_retention_lease"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/add_retention_lease[s]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/remove_retention_lease"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/remove_retention_lease[s]"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/renew_retention_lease"), is(true)).     assertThat(predicate.test("indices:admin/seq_no/renew_retention_lease[s]"), is(true)).     assertThat(predicate.test("indices:admin/settings/update"), is(true)).     assertThat(predicate.test("indices:admin/settings/foo"), is(false)). }
false;public;0;7;;public void testManageCcrPrivilege() {     Predicate<String> predicate = ClusterPrivilege.MANAGE_CCR.predicate().     assertThat(predicate.test("cluster:admin/xpack/ccr/follow_index"), is(true)).     assertThat(predicate.test("cluster:admin/xpack/ccr/unfollow_index"), is(true)).     assertThat(predicate.test("cluster:admin/xpack/ccr/brand_new_api"), is(true)).     assertThat(predicate.test("cluster:admin/xpack/whatever"), is(false)). }
false;public;0;53;;public void testIlmPrivileges() {     {         Predicate<String> predicate = ClusterPrivilege.MANAGE_ILM.predicate().         // check cluster actions         assertThat(predicate.test("cluster:admin/ilm/delete"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/_move/post"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/put"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/start"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/stop"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/brand_new_api"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/get"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/operation_mode/get"), is(true)).         // check non-ilm action         assertThat(predicate.test("cluster:admin/whatever"), is(false)).     }     {         Predicate<String> predicate = ClusterPrivilege.READ_ILM.predicate().         // check cluster actions         assertThat(predicate.test("cluster:admin/ilm/delete"), is(false)).         assertThat(predicate.test("cluster:admin/ilm/_move/post"), is(false)).         assertThat(predicate.test("cluster:admin/ilm/put"), is(false)).         assertThat(predicate.test("cluster:admin/ilm/start"), is(false)).         assertThat(predicate.test("cluster:admin/ilm/stop"), is(false)).         assertThat(predicate.test("cluster:admin/ilm/brand_new_api"), is(false)).         assertThat(predicate.test("cluster:admin/ilm/get"), is(true)).         assertThat(predicate.test("cluster:admin/ilm/operation_mode/get"), is(true)).         // check non-ilm action         assertThat(predicate.test("cluster:admin/whatever"), is(false)).     }     {         Predicate<String> predicate = IndexPrivilege.MANAGE_ILM.predicate().         // check indices actions         assertThat(predicate.test("indices:admin/ilm/retry"), is(true)).         assertThat(predicate.test("indices:admin/ilm/remove_policy"), is(true)).         assertThat(predicate.test("indices:admin/ilm/brand_new_api"), is(true)).         assertThat(predicate.test("indices:admin/ilm/explain"), is(true)).         // check non-ilm action         assertThat(predicate.test("indices:admin/whatever"), is(false)).     }     {         Predicate<String> predicate = IndexPrivilege.VIEW_METADATA.predicate().         // check indices actions         assertThat(predicate.test("indices:admin/ilm/retry"), is(false)).         assertThat(predicate.test("indices:admin/ilm/remove_policy"), is(false)).         assertThat(predicate.test("indices:admin/ilm/brand_new_api"), is(false)).         assertThat(predicate.test("indices:admin/ilm/explain"), is(true)).         // check non-ilm action         assertThat(predicate.test("indices:admin/whatever"), is(false)).     } }
