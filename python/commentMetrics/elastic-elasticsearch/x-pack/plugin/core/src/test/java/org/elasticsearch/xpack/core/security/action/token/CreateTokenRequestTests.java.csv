commented;modifiers;parameterAmount;loc;comment;code
false;public;0;72;;public void testRequestValidation() {     CreateTokenRequest request = new CreateTokenRequest().     ActionRequestValidationException ve = request.validate().     assertNotNull(ve).     assertEquals(1, ve.validationErrors().size()).     assertThat(ve.validationErrors().get(0), containsString("[password, refresh_token, client_credentials]")).     assertThat(ve.validationErrors().get(0), containsString("grant_type")).     request.setGrantType("password").     ve = request.validate().     assertNotNull(ve).     assertEquals(2, ve.validationErrors().size()).     assertThat(ve.validationErrors(), hasItem("username is missing")).     assertThat(ve.validationErrors(), hasItem("password is missing")).     request.setUsername(randomBoolean() ? null : "").     request.setPassword(randomBoolean() ? null : new SecureString(new char[] {})).     ve = request.validate().     assertNotNull(ve).     assertEquals(2, ve.validationErrors().size()).     assertThat(ve.validationErrors(), hasItem("username is missing")).     assertThat(ve.validationErrors(), hasItem("password is missing")).     request.setUsername(randomAlphaOfLengthBetween(1, 256)).     ve = request.validate().     assertNotNull(ve).     assertEquals(1, ve.validationErrors().size()).     assertThat(ve.validationErrors(), hasItem("password is missing")).     request.setPassword(new SecureString(randomAlphaOfLengthBetween(1, 256).toCharArray())).     ve = request.validate().     assertNull(ve).     request.setRefreshToken(randomAlphaOfLengthBetween(1, 10)).     ve = request.validate().     assertNotNull(ve).     assertEquals(1, ve.validationErrors().size()).     assertThat(ve.validationErrors().get(0), containsString("refresh_token is not supported")).     request.setGrantType("refresh_token").     ve = request.validate().     assertNotNull(ve).     assertEquals(2, ve.validationErrors().size()).     assertThat(ve.validationErrors(), hasItem(containsString("username is not supported"))).     assertThat(ve.validationErrors(), hasItem(containsString("password is not supported"))).     request.setUsername(null).     request.setPassword(null).     ve = request.validate().     assertNull(ve).     request.setRefreshToken(null).     ve = request.validate().     assertNotNull(ve).     assertEquals(1, ve.validationErrors().size()).     assertThat(ve.validationErrors(), hasItem("refresh_token is missing")).     request.setGrantType("client_credentials").     ve = request.validate().     assertNull(ve).     request.setUsername(randomAlphaOfLengthBetween(1, 32)).     request.setPassword(new SecureString(randomAlphaOfLengthBetween(1, 32).toCharArray())).     request.setRefreshToken(randomAlphaOfLengthBetween(1, 32)).     ve = request.validate().     assertNotNull(ve).     assertEquals(3, ve.validationErrors().size()).     assertThat(ve.validationErrors(), hasItem(containsString("username is not supported"))).     assertThat(ve.validationErrors(), hasItem(containsString("password is not supported"))).     assertThat(ve.validationErrors(), hasItem(containsString("refresh_token is not supported"))). }
