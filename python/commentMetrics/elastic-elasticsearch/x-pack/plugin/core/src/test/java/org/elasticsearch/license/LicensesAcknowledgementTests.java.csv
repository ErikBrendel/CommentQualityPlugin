commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testAcknowledgment() throws Exception {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     setInitialState(TestUtils.generateSignedLicense("gold", timeValueHours(2)), licenseState, Settings.EMPTY).     licenseService.start().     // try installing a signed license     long issueDate = System.currentTimeMillis() - TimeValue.timeValueHours(24 * 2).getMillis().     License signedLicense = TestUtils.generateSignedLicense("trial", License.VERSION_CURRENT, issueDate, timeValueHours(10)).     PutLicenseRequest putLicenseRequest = new PutLicenseRequest().license(signedLicense).     // ensure acknowledgement message was part of the response     licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(false, LicensesStatus.VALID, true)).     assertThat(licenseService.getLicense(), not(signedLicense)).     verify(clusterService, times(0)).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)).     // try installing a signed license with acknowledgement     putLicenseRequest = new PutLicenseRequest().license(signedLicense).acknowledge(true).     // ensure license was installed and no acknowledgment message was returned     licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(true, LicensesStatus.VALID, false)).     verify(clusterService, times(1)).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)). }
false;public;0;12;;public void testRejectUpgradeToProductionWithoutTLS() throws Exception {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.EMPTY).     licenseService.start().     // try installing a signed license     License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10)).     PutLicenseRequest putLicenseRequest = new PutLicenseRequest().license(signedLicense).     // ensure acknowledgement message was part of the response     IllegalStateException ise = expectThrows(IllegalStateException.class, () -> licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(false, LicensesStatus.VALID, true))).     assertEquals("Cannot install a [PLATINUM] license unless TLS is configured or security is disabled", ise.getMessage()). }
false;public;0;18;;public void testUpgradeToProductionWithoutTLSAndSecurityDisabled() throws Exception {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder().put("xpack.security.enabled", false).build()).     licenseService.start().     // try installing a signed license     License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10)).     PutLicenseRequest putLicenseRequest = new PutLicenseRequest().license(signedLicense).     licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(false, LicensesStatus.VALID, true)).     assertThat(licenseService.getLicense(), not(signedLicense)).     verify(clusterService, times(1)).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)).     // try installing a signed license with acknowledgement     putLicenseRequest = new PutLicenseRequest().license(signedLicense).acknowledge(true).     // ensure license was installed and no acknowledgment message was returned     licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(true, LicensesStatus.VALID, false)).     verify(clusterService, times(2)).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)). }
false;public;0;19;;public void testUpgradeToProductionWithTLSAndSecurity() throws Exception {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     setInitialState(TestUtils.generateSignedLicense("trial", timeValueHours(2)), licenseState, Settings.builder().put("xpack.security.enabled", true).put("xpack.security.transport.ssl.enabled", true).build()).     licenseService.start().     // try installing a signed license     License signedLicense = TestUtils.generateSignedLicense("platinum", timeValueHours(10)).     PutLicenseRequest putLicenseRequest = new PutLicenseRequest().license(signedLicense).     licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(false, LicensesStatus.VALID, true)).     assertThat(licenseService.getLicense(), not(signedLicense)).     verify(clusterService, times(1)).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)).     // try installing a signed license with acknowledgement     putLicenseRequest = new PutLicenseRequest().license(signedLicense).acknowledge(true).     // ensure license was installed and no acknowledgment message was returned     licenseService.registerLicense(putLicenseRequest, new AssertingLicensesUpdateResponse(true, LicensesStatus.VALID, false)).     verify(clusterService, times(2)).submitStateUpdateTask(any(String.class), any(ClusterStateUpdateTask.class)). }
false;public;1;6;;@Override public void onResponse(PutLicenseResponse licensesUpdateResponse) {     assertThat(licensesUpdateResponse.isAcknowledged(), equalTo(expectedAcknowledgement)).     assertThat(licensesUpdateResponse.status(), equalTo(expectedStatus)).     assertEquals(licensesUpdateResponse.acknowledgeMessages().isEmpty(), expectAckMessages == false). }
false;public;1;4;;@Override public void onFailure(Exception throwable) {     throw new RuntimeException(throwable). }
