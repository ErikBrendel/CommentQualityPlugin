commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * a utility method to create a new {@link ClockMock} and immediately call its {@link #freeze()} method  */ ;/**  * a utility method to create a new {@link ClockMock} and immediately call its {@link #freeze()} method  */ public static ClockMock frozen() {     return new ClockMock().freeze(). }
false;public;0;4;;@Override public ZoneId getZone() {     return wrappedClock.getZone(). }
false;public,synchronized;1;7;;@Override public synchronized Clock withZone(ZoneId zoneId) {     if (zoneId.equals(wrappedClock.getZone())) {         return this.     }     return new ClockMock(wrappedClock.withZone(zoneId)). }
false;public;0;4;;@Override public long millis() {     return wrappedClock.millis(). }
false;public;0;4;;@Override public Instant instant() {     return wrappedClock.instant(). }
false;public,synchronized;1;3;;public synchronized void setTime(ZonedDateTime now) {     setTime(now.toInstant()). }
false;private;1;4;;private void setTime(Instant now) {     assert Thread.holdsLock(this).     this.wrappedClock = Clock.fixed(now, getZone()). }
true;public,synchronized;0;4;/**  * freeze the time for this clock, preventing it from advancing  */ ;/**  * freeze the time for this clock, preventing it from advancing  */ public synchronized ClockMock freeze() {     setTime(instant()).     return this. }
true;public,synchronized;0;4;/**  * the clock will be reset to current time and will advance from now  */ ;/**  * the clock will be reset to current time and will advance from now  */ public synchronized ClockMock unfreeze() {     wrappedClock = Clock.system(getZone()).     return this. }
true;public,synchronized;1;3;/**  * freeze the clock if not frozen and advance it by the given time  */ ;/**  * freeze the clock if not frozen and advance it by the given time  */ public synchronized void fastForward(TimeValue timeValue) {     setTime(instant().plusMillis(timeValue.getMillis())). }
true;public;1;3;/**  * freeze the clock if not frozen and advance it by the given amount of seconds  */ ;/**  * freeze the clock if not frozen and advance it by the given amount of seconds  */ public void fastForwardSeconds(int seconds) {     fastForward(TimeValue.timeValueSeconds(seconds)). }
true;public,synchronized;1;3;/**  * freeze the clock if not frozen and rewind it by the given time  */ ;/**  * freeze the clock if not frozen and rewind it by the given time  */ public synchronized void rewind(TimeValue timeValue) {     setTime(instant().minusMillis((int) timeValue.millis())). }
true;public;1;3;/**  * freeze the clock if not frozen and rewind it by the given number of seconds  */ ;/**  * freeze the clock if not frozen and rewind it by the given number of seconds  */ public void rewindSeconds(int seconds) {     rewind(TimeValue.timeValueSeconds(seconds)). }
