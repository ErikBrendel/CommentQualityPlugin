commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testSerializationV64OrV65() throws IOException {     final HasPrivilegesResponse original = randomResponse().     final Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_4_0, Version.V_6_5_1).     final HasPrivilegesResponse copy = serializeAndDeserialize(original, version).     assertThat(copy.isCompleteMatch(), equalTo(original.isCompleteMatch())).     assertThat(copy.getClusterPrivileges().entrySet(), Matchers.emptyIterable()).     assertThat(copy.getIndexPrivileges(), equalTo(original.getIndexPrivileges())).     assertThat(copy.getApplicationPrivileges(), equalTo(original.getApplicationPrivileges())). }
false;public;0;9;;public void testSerializationV63() throws IOException {     final HasPrivilegesResponse original = randomResponse().     final HasPrivilegesResponse copy = serializeAndDeserialize(original, Version.V_6_3_0).     assertThat(copy.isCompleteMatch(), equalTo(original.isCompleteMatch())).     assertThat(copy.getClusterPrivileges().entrySet(), Matchers.emptyIterable()).     assertThat(copy.getIndexPrivileges(), equalTo(original.getIndexPrivileges())).     assertThat(copy.getApplicationPrivileges(), equalTo(Collections.emptyMap())). }
false;public;0;29;;public void testToXContent() throws Exception {     final HasPrivilegesResponse response = new HasPrivilegesResponse("daredevil", false, Collections.singletonMap("manage", true), Arrays.asList(ResourcePrivileges.builder("staff").addPrivileges(MapBuilder.<String, Boolean>newMapBuilder(new LinkedHashMap<>()).put("read", true).put("index", true).put("delete", false).put("manage", false).map()).build(), ResourcePrivileges.builder("customers").addPrivileges(MapBuilder.<String, Boolean>newMapBuilder(new LinkedHashMap<>()).put("read", true).put("index", true).put("delete", true).put("manage", false).map()).build()), Collections.emptyMap()).     final XContentBuilder builder = XContentBuilder.builder(XContentType.JSON.xContent()).     response.toXContent(builder, ToXContent.EMPTY_PARAMS).     BytesReference bytes = BytesReference.bytes(builder).     final String json = bytes.utf8ToString().     assertThat(json, equalTo("{" + "\"username\":\"daredevil\"," + "\"has_all_requested\":false," + "\"cluster\":{\"manage\":true}," + "\"index\":{" + "\"customers\":{\"read\":true,\"index\":true,\"delete\":true,\"manage\":false}," + "\"staff\":{\"read\":true,\"index\":true,\"delete\":false,\"manage\":false}" + "}," + "\"application\":{}" + "}")). }
false;protected;0;5;;@Override protected boolean supportsUnknownFields() {     // Because we have nested objects with { string : boolean }, unknown fields cause parsing problems     return false. }
false;protected;0;4;;@Override protected HasPrivilegesResponse createBlankInstance() {     return new HasPrivilegesResponse(). }
false;protected;0;4;;@Override protected HasPrivilegesResponse createTestInstance() {     return randomResponse(). }
false;public;1;4;;@Override public org.elasticsearch.client.security.HasPrivilegesResponse doHlrcParseInstance(XContentParser parser) throws IOException {     return org.elasticsearch.client.security.HasPrivilegesResponse.fromXContent(parser). }
false;public;1;11;;@Override public HasPrivilegesResponse convertHlrcToInternal(org.elasticsearch.client.security.HasPrivilegesResponse hlrc) {     return new HasPrivilegesResponse(hlrc.getUsername(), hlrc.hasAllRequested(), hlrc.getClusterPrivileges(), toResourcePrivileges(hlrc.getIndexPrivileges()), hlrc.getApplicationPrivileges().entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> toResourcePrivileges(e.getValue())))). }
false;private,static;1;5;;private static List<ResourcePrivileges> toResourcePrivileges(Map<String, Map<String, Boolean>> map) {     return map.entrySet().stream().map(e -> ResourcePrivileges.builder(e.getKey()).addPrivileges(e.getValue()).build()).collect(Collectors.toList()). }
false;private;2;13;;private HasPrivilegesResponse serializeAndDeserialize(HasPrivilegesResponse original, Version version) throws IOException {     logger.info("Test serialize/deserialize with version {}", version).     final BytesStreamOutput out = new BytesStreamOutput().     out.setVersion(version).     original.writeTo(out).     final HasPrivilegesResponse copy = new HasPrivilegesResponse().     final StreamInput in = out.bytes().streamInput().     in.setVersion(version).     copy.readFrom(in).     assertThat(in.read(), equalTo(-1)).     return copy. }
false;private;0;13;;private HasPrivilegesResponse randomResponse() {     final String username = randomAlphaOfLengthBetween(4, 12).     final Map<String, Boolean> cluster = new HashMap<>().     for (String priv : randomArray(1, 6, String[]::new, () -> randomAlphaOfLengthBetween(3, 12))) {         cluster.put(priv, randomBoolean()).     }     final Collection<ResourcePrivileges> index = randomResourcePrivileges().     final Map<String, Collection<ResourcePrivileges>> application = new HashMap<>().     for (String app : randomArray(1, 3, String[]::new, () -> randomAlphaOfLengthBetween(3, 6).toLowerCase(Locale.ROOT))) {         application.put(app, randomResourcePrivileges()).     }     return new HasPrivilegesResponse(username, randomBoolean(), cluster, index, application). }
false;private;0;12;;private Collection<ResourcePrivileges> randomResourcePrivileges() {     final Collection<ResourcePrivileges> list = new ArrayList<>().     // Use hash set to force a unique set of resources     for (String resource : Sets.newHashSet(randomArray(1, 3, String[]::new, () -> randomAlphaOfLengthBetween(2, 6)))) {         final Map<String, Boolean> privileges = new HashMap<>().         for (String priv : randomArray(1, 5, String[]::new, () -> randomAlphaOfLengthBetween(3, 8))) {             privileges.put(priv, randomBoolean()).         }         list.add(ResourcePrivileges.builder(resource).addPrivileges(privileges).build()).     }     return list. }
