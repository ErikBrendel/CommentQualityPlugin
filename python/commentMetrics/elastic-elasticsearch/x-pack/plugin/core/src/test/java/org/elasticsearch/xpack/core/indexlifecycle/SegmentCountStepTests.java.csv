commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public SegmentCountStep createRandomInstance() {     Step.StepKey stepKey = randomStepKey().     StepKey nextStepKey = randomStepKey().     int maxNumSegments = randomIntBetween(1, 10).     return new SegmentCountStep(stepKey, nextStepKey, null, maxNumSegments). }
false;private;1;8;;private IndexMetaData makeMeta(Index index) {     return IndexMetaData.builder(index.getName()).settings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)).build(). }
false;public;1;22;;@Override public SegmentCountStep mutateInstance(SegmentCountStep instance) {     StepKey key = instance.getKey().     StepKey nextKey = instance.getNextStepKey().     int maxNumSegments = instance.getMaxNumSegments().     switch(between(0, 2)) {         case 0:             key = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 1:             nextKey = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 2:             maxNumSegments += 1.             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new SegmentCountStep(key, nextKey, null, maxNumSegments). }
false;public;1;4;;@Override public SegmentCountStep copyInstance(SegmentCountStep instance) {     return new SegmentCountStep(instance.getKey(), instance.getNextStepKey(), null, instance.getMaxNumSegments()). }
false;public;2;5;;@Override public void onResponse(boolean conditionMet, ToXContentObject info) {     conditionMetResult.set(conditionMet).     conditionInfo.set(info). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new AssertionError("unexpected method call"). }
false;public;0;56;;public void testIsConditionMet() {     int maxNumSegments = randomIntBetween(3, 10).     Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     Client client = Mockito.mock(Client.class).     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     IndicesSegmentResponse indicesSegmentResponse = Mockito.mock(IndicesSegmentResponse.class).     IndexSegments indexSegments = Mockito.mock(IndexSegments.class).     IndexShardSegments indexShardSegments = Mockito.mock(IndexShardSegments.class).     Map<Integer, IndexShardSegments> indexShards = Collections.singletonMap(0, indexShardSegments).     ShardSegments shardSegmentsOne = Mockito.mock(ShardSegments.class).     ShardSegments[] shardSegmentsArray = new ShardSegments[] { shardSegmentsOne }.     Spliterator<IndexShardSegments> iss = indexShards.values().spliterator().     List<Segment> segments = new ArrayList<>().     for (int i = 0. i < maxNumSegments - randomIntBetween(0, 3). i++) {         segments.add(null).     }     Mockito.when(indicesSegmentResponse.getStatus()).thenReturn(RestStatus.OK).     Mockito.when(indicesSegmentResponse.getIndices()).thenReturn(Collections.singletonMap(index.getName(), indexSegments)).     Mockito.when(indexSegments.spliterator()).thenReturn(iss).     Mockito.when(indexShardSegments.getShards()).thenReturn(shardSegmentsArray).     Mockito.when(shardSegmentsOne.getSegments()).thenReturn(segments).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Step.StepKey stepKey = randomStepKey().     StepKey nextStepKey = randomStepKey().     Mockito.doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<IndicesSegmentResponse> listener = (ActionListener<IndicesSegmentResponse>) invocationOnMock.getArguments()[1].         listener.onResponse(indicesSegmentResponse).         return null.     }).when(indicesClient).segments(any(), any()).     SetOnce<Boolean> conditionMetResult = new SetOnce<>().     SetOnce<ToXContentObject> conditionInfo = new SetOnce<>().     SegmentCountStep step = new SegmentCountStep(stepKey, nextStepKey, client, maxNumSegments).     step.evaluateCondition(makeMeta(index), new AsyncWaitStep.Listener() {          @Override         public void onResponse(boolean conditionMet, ToXContentObject info) {             conditionMetResult.set(conditionMet).             conditionInfo.set(info).         }          @Override         public void onFailure(Exception e) {             throw new AssertionError("unexpected method call").         }     }).     assertTrue(conditionMetResult.get()).     assertEquals(new SegmentCountStep.Info(0L), conditionInfo.get()). }
false;public;2;5;;@Override public void onResponse(boolean conditionMet, ToXContentObject info) {     conditionMetResult.set(conditionMet).     conditionInfo.set(info). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new AssertionError("unexpected method call"). }
false;public;0;56;;public void testIsConditionFails() {     int maxNumSegments = randomIntBetween(3, 10).     Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     Client client = Mockito.mock(Client.class).     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     IndicesSegmentResponse indicesSegmentResponse = Mockito.mock(IndicesSegmentResponse.class).     IndexSegments indexSegments = Mockito.mock(IndexSegments.class).     IndexShardSegments indexShardSegments = Mockito.mock(IndexShardSegments.class).     Map<Integer, IndexShardSegments> indexShards = Collections.singletonMap(0, indexShardSegments).     ShardSegments shardSegmentsOne = Mockito.mock(ShardSegments.class).     ShardSegments[] shardSegmentsArray = new ShardSegments[] { shardSegmentsOne }.     Spliterator<IndexShardSegments> iss = indexShards.values().spliterator().     List<Segment> segments = new ArrayList<>().     for (int i = 0. i < maxNumSegments + randomIntBetween(1, 3). i++) {         segments.add(null).     }     Mockito.when(indicesSegmentResponse.getStatus()).thenReturn(RestStatus.OK).     Mockito.when(indicesSegmentResponse.getIndices()).thenReturn(Collections.singletonMap(index.getName(), indexSegments)).     Mockito.when(indexSegments.spliterator()).thenReturn(iss).     Mockito.when(indexShardSegments.getShards()).thenReturn(shardSegmentsArray).     Mockito.when(shardSegmentsOne.getSegments()).thenReturn(segments).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Step.StepKey stepKey = randomStepKey().     StepKey nextStepKey = randomStepKey().     Mockito.doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<IndicesSegmentResponse> listener = (ActionListener<IndicesSegmentResponse>) invocationOnMock.getArguments()[1].         listener.onResponse(indicesSegmentResponse).         return null.     }).when(indicesClient).segments(any(), any()).     SetOnce<Boolean> conditionMetResult = new SetOnce<>().     SetOnce<ToXContentObject> conditionInfo = new SetOnce<>().     SegmentCountStep step = new SegmentCountStep(stepKey, nextStepKey, client, maxNumSegments).     step.evaluateCondition(makeMeta(index), new AsyncWaitStep.Listener() {          @Override         public void onResponse(boolean conditionMet, ToXContentObject info) {             conditionMetResult.set(conditionMet).             conditionInfo.set(info).         }          @Override         public void onFailure(Exception e) {             throw new AssertionError("unexpected method call").         }     }).     assertFalse(conditionMetResult.get()).     assertEquals(new SegmentCountStep.Info(1L), conditionInfo.get()). }
false;public;2;4;;@Override public void onResponse(boolean conditionMet, ToXContentObject info) {     throw new AssertionError("unexpected method call"). }
false;public;1;5;;@Override public void onFailure(Exception e) {     assertThat(e, equalTo(exception)).     exceptionThrown.set(true). }
false;public;0;38;;public void testThrowsException() {     Exception exception = new RuntimeException("error").     Index index = new Index(randomAlphaOfLengthBetween(1, 20), randomAlphaOfLengthBetween(1, 20)).     Client client = Mockito.mock(Client.class).     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Step.StepKey stepKey = randomStepKey().     StepKey nextStepKey = randomStepKey().     int maxNumSegments = randomIntBetween(3, 10).     Mockito.doAnswer(invocationOnMock -> {         @SuppressWarnings("unchecked")         ActionListener<IndicesSegmentResponse> listener = (ActionListener<IndicesSegmentResponse>) invocationOnMock.getArguments()[1].         listener.onFailure(exception).         return null.     }).when(indicesClient).segments(any(), any()).     SetOnce<Boolean> exceptionThrown = new SetOnce<>().     SegmentCountStep step = new SegmentCountStep(stepKey, nextStepKey, client, maxNumSegments).     step.evaluateCondition(makeMeta(index), new AsyncWaitStep.Listener() {          @Override         public void onResponse(boolean conditionMet, ToXContentObject info) {             throw new AssertionError("unexpected method call").         }          @Override         public void onFailure(Exception e) {             assertThat(e, equalTo(exception)).             exceptionThrown.set(true).         }     }).     assertTrue(exceptionThrown.get()). }
