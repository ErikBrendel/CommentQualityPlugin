commented;modifiers;parameterAmount;loc;comment;code
true;;4;5;/**  * Creates a license state with the given license type and active state, and checks the given method returns expected.  */ ;/**  * Creates a license state with the given license type and active state, and checks the given method returns expected.  */ void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(mode, active, null).     assertEquals(expected, predicate.test(licenseState)). }
true;;4;4;/**  * Checks the ack message going from the  {@code from} license type to {@code to} license type.  * TODO: check the actual messages, not just the number of them! This was copied from previous license tests...  */ ;/**  * Checks the ack message going from the  {@code from} license type to {@code to} license type.  * TODO: check the actual messages, not just the number of them! This was copied from previous license tests...  */ void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {     String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to).     assertEquals(expectedMessages, gotMessages.length). }
false;static;2;3;;static <T> T randomFrom(T[] values, Predicate<T> filter) {     return randomFrom(Arrays.stream(values).filter(filter).collect(Collectors.toList())). }
false;static;0;3;;static OperationMode randomMode() {     return randomFrom(OperationMode.values()). }
false;public,static;0;3;;public static OperationMode randomTrialStandardGoldOrPlatinumMode() {     return randomFrom(TRIAL, STANDARD, GOLD, PLATINUM). }
false;public,static;0;3;;public static OperationMode randomTrialOrPlatinumMode() {     return randomFrom(TRIAL, PLATINUM). }
false;public,static;0;3;;public static OperationMode randomTrialBasicStandardGoldOrPlatinumMode() {     return randomFrom(TRIAL, BASIC, STANDARD, GOLD, PLATINUM). }
false;public,static;0;3;;public static OperationMode randomBasicStandardOrGold() {     return randomFrom(BASIC, STANDARD, GOLD). }
false;public;0;14;;public void testSecurityDefaults() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build()).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(true)).     assertThat(licenseState.isAuditingAllowed(), is(true)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(true)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(true)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.ALL)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(true)).     licenseState = new XPackLicenseState(Settings.EMPTY).     assertSecurityNotAllowed(licenseState). }
false;public;0;6;;public void testTransportSslDoesNotAutomaticallyEnableSecurityOnTrialLicense() {     final XPackLicenseState licenseState.     licenseState = new XPackLicenseState(Settings.builder().put(XPackSettings.TRANSPORT_SSL_ENABLED.getKey(), true).build()).     assertSecurityNotAllowed(licenseState). }
false;public;0;7;;public void testSecurityBasic() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(BASIC, true, null).     assertSecurityNotAllowed(licenseState). }
false;public;0;13;;public void testSecurityBasicExpired() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(BASIC, false, null).     assertThat(licenseState.isAuthAllowed(), is(false)).     assertThat(licenseState.isIpFilteringAllowed(), is(false)).     assertThat(licenseState.isAuditingAllowed(), is(false)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(false)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(false)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.NONE)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;13;;public void testSecurityStandard() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(STANDARD, true, null).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(false)).     assertThat(licenseState.isAuditingAllowed(), is(false)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(true)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(false)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.NATIVE)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;13;;public void testSecurityStandardExpired() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(STANDARD, false, null).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(false)).     assertThat(licenseState.isAuditingAllowed(), is(false)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(false)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(false)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.NATIVE)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;13;;public void testSecurityGold() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(GOLD, true, null).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(true)).     assertThat(licenseState.isAuditingAllowed(), is(true)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(true)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(false)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.DEFAULT)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;13;;public void testSecurityGoldExpired() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(GOLD, false, null).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(true)).     assertThat(licenseState.isAuditingAllowed(), is(true)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(false)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(false)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.DEFAULT)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;13;;public void testSecurityPlatinum() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(PLATINUM, true, null).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(true)).     assertThat(licenseState.isAuditingAllowed(), is(true)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(true)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(true)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.ALL)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(true)). }
false;public;0;13;;public void testSecurityPlatinumExpired() {     XPackLicenseState licenseState = new XPackLicenseState(randomFrom(Settings.EMPTY, Settings.builder().put(XPackSettings.SECURITY_ENABLED.getKey(), true).build())).     licenseState.update(PLATINUM, false, null).     assertThat(licenseState.isAuthAllowed(), is(true)).     assertThat(licenseState.isIpFilteringAllowed(), is(true)).     assertThat(licenseState.isAuditingAllowed(), is(true)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(false)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(true)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.ALL)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;7;;public void testNewTrialDefaultsSecurityOff() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(TRIAL, true, VersionUtils.randomVersionBetween(random(), Version.V_6_3_0, Version.CURRENT)).     assertThat(licenseState.isSecurityDisabledByTrialLicense(), is(true)).     assertSecurityNotAllowed(licenseState). }
false;private;1;9;;private void assertSecurityNotAllowed(XPackLicenseState licenseState) {     assertThat(licenseState.isAuthAllowed(), is(false)).     assertThat(licenseState.isIpFilteringAllowed(), is(false)).     assertThat(licenseState.isAuditingAllowed(), is(false)).     assertThat(licenseState.isStatsAndHealthAllowed(), is(true)).     assertThat(licenseState.isDocumentAndFieldLevelSecurityAllowed(), is(false)).     assertThat(licenseState.allowedRealmType(), is(XPackLicenseState.AllowedRealmType.NONE)).     assertThat(licenseState.isCustomRoleProvidersAllowed(), is(false)). }
false;public;0;4;;public void testSecurityAckBasicToNotGoldOrStandard() {     OperationMode toMode = randomFrom(OperationMode.values(), mode -> mode != GOLD && mode != STANDARD).     assertAckMesssages(XPackField.SECURITY, BASIC, toMode, 0). }
false;public;0;3;;public void testSecurityAckAnyToTrialOrPlatinum() {     assertAckMesssages(XPackField.SECURITY, randomMode(), randomTrialOrPlatinumMode(), 0). }
false;public;0;3;;public void testSecurityAckTrialStandardGoldOrPlatinumToBasic() {     assertAckMesssages(XPackField.SECURITY, randomTrialStandardGoldOrPlatinumMode(), BASIC, 4). }
false;public;0;4;;public void testSecurityAckAnyToStandard() {     OperationMode from = randomFrom(BASIC, GOLD, PLATINUM, TRIAL).     assertAckMesssages(XPackField.SECURITY, from, STANDARD, 5). }
false;public;0;4;;public void testSecurityAckBasicStandardTrialOrPlatinumToGold() {     OperationMode from = randomFrom(BASIC, PLATINUM, TRIAL, STANDARD).     assertAckMesssages(XPackField.SECURITY, from, GOLD, 3). }
false;public;0;3;;public void testMonitoringAckBasicToAny() {     assertAckMesssages(XPackField.MONITORING, BASIC, randomMode(), 0). }
false;public;0;3;;public void testMonitoringAckAnyToTrialGoldOrPlatinum() {     assertAckMesssages(XPackField.MONITORING, randomMode(), randomTrialStandardGoldOrPlatinumMode(), 0). }
false;public;0;4;;public void testMonitoringAckNotBasicToBasic() {     OperationMode from = randomFrom(STANDARD, GOLD, PLATINUM, TRIAL).     assertAckMesssages(XPackField.MONITORING, from, BASIC, 2). }
false;public;0;4;;public void testMonitoringAllowed() {     assertAllowed(randomMode(), true, XPackLicenseState::isMonitoringAllowed, true).     assertAllowed(randomMode(), false, XPackLicenseState::isMonitoringAllowed, false). }
false;public;0;8;;public void testMonitoringUpdateRetention() {     assertAllowed(STANDARD, true, XPackLicenseState::isUpdateRetentionAllowed, true).     assertAllowed(GOLD, true, XPackLicenseState::isUpdateRetentionAllowed, true).     assertAllowed(PLATINUM, true, XPackLicenseState::isUpdateRetentionAllowed, true).     assertAllowed(TRIAL, true, XPackLicenseState::isUpdateRetentionAllowed, true).     assertAllowed(BASIC, true, XPackLicenseState::isUpdateRetentionAllowed, false).     assertAllowed(MISSING, false, XPackLicenseState::isUpdateRetentionAllowed, false). }
false;public;0;6;;public void testWatcherPlatinumGoldTrialStandard() throws Exception {     assertAllowed(TRIAL, true, XPackLicenseState::isWatcherAllowed, true).     assertAllowed(GOLD, true, XPackLicenseState::isWatcherAllowed, true).     assertAllowed(PLATINUM, true, XPackLicenseState::isWatcherAllowed, true).     assertAllowed(STANDARD, true, XPackLicenseState::isWatcherAllowed, true). }
false;public;0;3;;public void testWatcherBasicLicense() throws Exception {     assertAllowed(BASIC, true, XPackLicenseState::isWatcherAllowed, false). }
false;public;0;3;;public void testWatcherInactive() {     assertAllowed(BASIC, false, XPackLicenseState::isWatcherAllowed, false). }
false;public;0;6;;public void testWatcherInactivePlatinumGoldTrial() throws Exception {     assertAllowed(TRIAL, false, XPackLicenseState::isWatcherAllowed, false).     assertAllowed(GOLD, false, XPackLicenseState::isWatcherAllowed, false).     assertAllowed(PLATINUM, false, XPackLicenseState::isWatcherAllowed, false).     assertAllowed(STANDARD, false, XPackLicenseState::isWatcherAllowed, false). }
false;public;0;4;;public void testGraphPlatinumTrial() throws Exception {     assertAllowed(TRIAL, true, XPackLicenseState::isGraphAllowed, true).     assertAllowed(PLATINUM, true, XPackLicenseState::isGraphAllowed, true). }
false;public;0;3;;public void testGraphBasic() throws Exception {     assertAllowed(BASIC, true, XPackLicenseState::isGraphAllowed, false). }
false;public;0;3;;public void testGraphStandard() throws Exception {     assertAllowed(STANDARD, true, XPackLicenseState::isGraphAllowed, false). }
false;public;0;3;;public void testGraphInactiveBasic() {     assertAllowed(BASIC, false, XPackLicenseState::isGraphAllowed, false). }
false;public;0;4;;public void testGraphInactivePlatinumTrial() throws Exception {     assertAllowed(TRIAL, false, XPackLicenseState::isMachineLearningAllowed, false).     assertAllowed(PLATINUM, false, XPackLicenseState::isMachineLearningAllowed, false). }
false;public;0;4;;public void testMachineLearningPlatinumTrial() throws Exception {     assertAllowed(TRIAL, true, XPackLicenseState::isMachineLearningAllowed, true).     assertAllowed(PLATINUM, true, XPackLicenseState::isMachineLearningAllowed, true). }
false;public;0;3;;public void testMachineLearningBasic() throws Exception {     assertAllowed(BASIC, true, XPackLicenseState::isMachineLearningAllowed, false). }
false;public;0;3;;public void testMachineLearningStandard() throws Exception {     assertAllowed(STANDARD, true, XPackLicenseState::isMachineLearningAllowed, false). }
false;public;0;3;;public void testMachineLearningInactiveBasic() {     assertAllowed(BASIC, false, XPackLicenseState::isMachineLearningAllowed, false). }
false;public;0;4;;public void testMachineLearningInactivePlatinumTrial() throws Exception {     assertAllowed(TRIAL, false, XPackLicenseState::isMachineLearningAllowed, false).     assertAllowed(PLATINUM, false, XPackLicenseState::isMachineLearningAllowed, false). }
false;public;0;6;;public void testLogstashPlatinumGoldTrialStandard() throws Exception {     assertAllowed(TRIAL, true, XPackLicenseState::isLogstashAllowed, true).     assertAllowed(GOLD, true, XPackLicenseState::isLogstashAllowed, true).     assertAllowed(PLATINUM, true, XPackLicenseState::isLogstashAllowed, true).     assertAllowed(STANDARD, true, XPackLicenseState::isLogstashAllowed, true). }
false;public;0;3;;public void testLogstashBasicLicense() throws Exception {     assertAllowed(BASIC, true, XPackLicenseState::isLogstashAllowed, false). }
false;public;0;7;;public void testLogstashInactive() {     assertAllowed(BASIC, false, XPackLicenseState::isLogstashAllowed, false).     assertAllowed(TRIAL, false, XPackLicenseState::isLogstashAllowed, false).     assertAllowed(GOLD, false, XPackLicenseState::isLogstashAllowed, false).     assertAllowed(PLATINUM, false, XPackLicenseState::isLogstashAllowed, false).     assertAllowed(STANDARD, false, XPackLicenseState::isLogstashAllowed, false). }
false;public;0;5;;public void testSqlDefaults() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     assertThat(licenseState.isSqlAllowed(), is(true)).     assertThat(licenseState.isJdbcAllowed(), is(true)). }
false;public;0;7;;public void testSqlBasic() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(BASIC, true, null).     assertThat(licenseState.isSqlAllowed(), is(true)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;7;;public void testSqlBasicExpired() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(BASIC, false, null).     assertThat(licenseState.isSqlAllowed(), is(false)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;7;;public void testSqlStandard() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(STANDARD, true, null).     assertThat(licenseState.isSqlAllowed(), is(true)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;7;;public void testSqlStandardExpired() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(STANDARD, false, null).     assertThat(licenseState.isSqlAllowed(), is(false)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;7;;public void testSqlGold() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(GOLD, true, null).     assertThat(licenseState.isSqlAllowed(), is(true)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;7;;public void testSqlGoldExpired() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(GOLD, false, null).     assertThat(licenseState.isSqlAllowed(), is(false)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;7;;public void testSqlPlatinum() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(PLATINUM, true, null).     assertThat(licenseState.isSqlAllowed(), is(true)).     assertThat(licenseState.isJdbcAllowed(), is(true)). }
false;public;0;7;;public void testSqlPlatinumExpired() {     XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY).     licenseState.update(PLATINUM, false, null).     assertThat(licenseState.isSqlAllowed(), is(false)).     assertThat(licenseState.isJdbcAllowed(), is(false)). }
false;public;0;3;;public void testSqlAckAnyToTrialOrPlatinum() {     assertAckMesssages(XPackField.SQL, randomMode(), randomTrialOrPlatinumMode(), 0). }
false;public;0;3;;public void testSqlAckTrialOrPlatinumToNotTrialOrPlatinum() {     assertAckMesssages(XPackField.SQL, randomTrialOrPlatinumMode(), randomBasicStandardOrGold(), 1). }
