# id;timestamp;commentText;codeText;commentWords;codeWords
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1524684173;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1529433467;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1532069817;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1535139672;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1536828374;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1549004353;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages);1549399169;Checks the ack message going from the  {@code from} license type to {@code to} license type._TODO: check the actual messages, not just the number of them! This was copied from previous license tests...;void assertAckMesssages(String feature, OperationMode from, OperationMode to, int expectedMessages) {_        String[] gotMessages = XPackLicenseState.ACKNOWLEDGMENT_MESSAGES.get(feature).apply(from, to)__        assertEquals(expectedMessages, gotMessages.length)__    };checks,the,ack,message,going,from,the,code,from,license,type,to,code,to,license,type,todo,check,the,actual,messages,not,just,the,number,of,them,this,was,copied,from,previous,license,tests;void,assert,ack,messsages,string,feature,operation,mode,from,operation,mode,to,int,expected,messages,string,got,messages,xpack,license,state,get,feature,apply,from,to,assert,equals,expected,messages,got,messages,length
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1524684173;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,assert,equals,expected,predicate,test,license,state
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1529433467;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,assert,equals,expected,predicate,test,license,state
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1532069817;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active, null)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,null,assert,equals,expected,predicate,test,license,state
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1535139672;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active, null)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,null,assert,equals,expected,predicate,test,license,state
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1536828374;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active, null)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,null,assert,equals,expected,predicate,test,license,state
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1549004353;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active, null)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,null,assert,equals,expected,predicate,test,license,state
XPackLicenseStateTests -> void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected);1549399169;Creates a license state with the given license type and active state, and checks the given method returns expected.;void assertAllowed(OperationMode mode, boolean active, Predicate<XPackLicenseState> predicate, boolean expected) {_        XPackLicenseState licenseState = new XPackLicenseState(Settings.EMPTY)__        licenseState.update(mode, active, null)__        assertEquals(expected, predicate.test(licenseState))__    };creates,a,license,state,with,the,given,license,type,and,active,state,and,checks,the,given,method,returns,expected;void,assert,allowed,operation,mode,mode,boolean,active,predicate,xpack,license,state,predicate,boolean,expected,xpack,license,state,license,state,new,xpack,license,state,settings,empty,license,state,update,mode,active,null,assert,equals,expected,predicate,test,license,state
