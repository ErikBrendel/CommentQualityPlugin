commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ChunkingConfig createTestInstance() {     return createRandomizedChunk(). }
false;protected;0;4;;@Override protected Writeable.Reader<ChunkingConfig> instanceReader() {     return ChunkingConfig::new. }
false;protected;1;4;;@Override protected ChunkingConfig doParseInstance(XContentParser parser) {     return ChunkingConfig.STRICT_PARSER.apply(parser, null). }
false;public;0;3;;public void testConstructorGivenAutoAndTimeSpan() {     expectThrows(IllegalArgumentException.class, () -> new ChunkingConfig(ChunkingConfig.Mode.AUTO, TimeValue.timeValueMillis(1000))). }
false;public;0;3;;public void testConstructorGivenOffAndTimeSpan() {     expectThrows(IllegalArgumentException.class, () -> new ChunkingConfig(ChunkingConfig.Mode.OFF, TimeValue.timeValueMillis(1000))). }
false;public;0;3;;public void testConstructorGivenManualAndNoTimeSpan() {     expectThrows(IllegalArgumentException.class, () -> new ChunkingConfig(ChunkingConfig.Mode.MANUAL, null)). }
false;public;0;5;;public void testIsEnabled() {     assertThat(ChunkingConfig.newAuto().isEnabled(), is(true)).     assertThat(ChunkingConfig.newManual(TimeValue.timeValueMillis(1000)).isEnabled(), is(true)).     assertThat(ChunkingConfig.newOff().isEnabled(), is(false)). }
false;public,static;0;9;;public static ChunkingConfig createRandomizedChunk() {     ChunkingConfig.Mode mode = randomFrom(ChunkingConfig.Mode.values()).     TimeValue timeSpan = null.     if (mode == ChunkingConfig.Mode.MANUAL) {         // time span is required to be at least 1 millis, so we use a custom method to generate a time value here         timeSpan = randomPositiveSecondsMinutesHours().     }     return new ChunkingConfig(mode, timeSpan). }
false;private,static;0;3;;private static TimeValue randomPositiveSecondsMinutesHours() {     return new TimeValue(randomIntBetween(1, 1000), randomFrom(Arrays.asList(TimeUnit.SECONDS, TimeUnit.MINUTES, TimeUnit.HOURS))). }
false;protected;1;29;;@Override protected ChunkingConfig mutateInstance(ChunkingConfig instance) throws IOException {     ChunkingConfig.Mode mode = instance.getMode().     TimeValue timeSpan = instance.getTimeSpan().     switch(between(0, 1)) {         case 0:             List<ChunkingConfig.Mode> modes = new ArrayList<>(Arrays.asList(ChunkingConfig.Mode.values())).             modes.remove(mode).             mode = randomFrom(modes).             if (mode == ChunkingConfig.Mode.MANUAL) {                 timeSpan = randomPositiveSecondsMinutesHours().             } else {                 timeSpan = null.             }             break.         case 1:             if (timeSpan == null) {                 timeSpan = randomPositiveSecondsMinutesHours().             } else {                 timeSpan = new TimeValue(timeSpan.getMillis() + between(10, 10000)).             }             // only manual mode allows a timespan             mode = ChunkingConfig.Mode.MANUAL.             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new ChunkingConfig(mode, timeSpan). }
