commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected PostCalendarEventsAction.Request createTestInstance() {     String id = randomAlphaOfLengthBetween(1, 20).     return createTestInstance(id). }
false;private;1;10;;private PostCalendarEventsAction.Request createTestInstance(String calendarId) {     int numEvents = randomIntBetween(1, 10).     List<ScheduledEvent> events = new ArrayList<>().     for (int i = 0. i < numEvents. i++) {         events.add(ScheduledEventTests.createScheduledEvent(calendarId)).     }     PostCalendarEventsAction.Request request = new PostCalendarEventsAction.Request(calendarId, events).     return request. }
false;protected;0;4;;@Override protected PostCalendarEventsAction.Request createBlankInstance() {     return new PostCalendarEventsAction.Request(). }
false;public;0;17;;public void testParseRequest() throws IOException {     PostCalendarEventsAction.Request sourceRequest = createTestInstance().     StringBuilder requestString = new StringBuilder().     requestString.append("{\"events\": [").     for (ScheduledEvent event : sourceRequest.getScheduledEvents()) {         requestString.append(Strings.toString(event)).append(',').     }     requestString.replace(requestString.length() - 1, requestString.length(), "]").     requestString.append('}').     XContentParser parser = createParser(XContentType.JSON.xContent(), requestString.toString()).     PostCalendarEventsAction.Request parsedRequest = PostCalendarEventsAction.Request.parseRequest(sourceRequest.getCalendarId(), parser).     assertEquals(sourceRequest, parsedRequest). }
false;public;0;17;;public void testParseRequest_throwsIfCalendarIdsAreDifferent() throws IOException {     PostCalendarEventsAction.Request sourceRequest = createTestInstance("foo").     StringBuilder requestString = new StringBuilder().     requestString.append("{\"events\": [").     for (ScheduledEvent event : sourceRequest.getScheduledEvents()) {         requestString.append(Strings.toString(event)).append(',').     }     requestString.replace(requestString.length() - 1, requestString.length(), "]").     requestString.append('}').     XContentParser parser = createParser(XContentType.JSON.xContent(), requestString.toString()).     ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> PostCalendarEventsAction.Request.parseRequest("bar", parser)).     assertEquals("Inconsistent calendar_id. 'foo' specified in the body differs from 'bar' specified as a URL argument", e.getMessage()). }
