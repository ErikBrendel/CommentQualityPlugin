commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected MetricConfig doParseInstance(final XContentParser parser) throws IOException {     return MetricConfig.fromXContent(parser). }
false;protected;0;4;;@Override protected Writeable.Reader<MetricConfig> instanceReader() {     return MetricConfig::new. }
false;protected;0;4;;@Override protected MetricConfig createTestInstance() {     return ConfigTestHelpers.randomMetricConfig(random()). }
false;public;0;9;;public void testValidateNoMapping() {     ActionRequestValidationException e = new ActionRequestValidationException().     Map<String, Map<String, FieldCapabilities>> responseMap = new HashMap<>().     MetricConfig config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().get(0), equalTo("Could not find a [numeric] or [date] field with name [my_field] in any" + " of the indices matching the index pattern.")). }
false;public;0;13;;public void testValidateNomatchingField() {     ActionRequestValidationException e = new ActionRequestValidationException().     Map<String, Map<String, FieldCapabilities>> responseMap = new HashMap<>().     // Have to mock fieldcaps because the ctor's aren't public...     FieldCapabilities fieldCaps = mock(FieldCapabilities.class).     responseMap.put("some_other_field", Collections.singletonMap("date", fieldCaps)).     MetricConfig config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().get(0), equalTo("Could not find a [numeric] or [date] field with name [my_field] in any" + " of the indices matching the index pattern.")). }
false;public;0;13;;public void testValidateFieldWrongType() {     ActionRequestValidationException e = new ActionRequestValidationException().     Map<String, Map<String, FieldCapabilities>> responseMap = new HashMap<>().     // Have to mock fieldcaps because the ctor's aren't public...     FieldCapabilities fieldCaps = mock(FieldCapabilities.class).     responseMap.put("my_field", Collections.singletonMap("keyword", fieldCaps)).     MetricConfig config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat("The field referenced by a metric group must be a [numeric] or [date] type," + " but found [keyword] for field [my_field]", isIn(e.validationErrors())). }
false;public;0;13;;public void testValidateFieldMatchingNotAggregatable() {     ActionRequestValidationException e = new ActionRequestValidationException().     Map<String, Map<String, FieldCapabilities>> responseMap = new HashMap<>().     // Have to mock fieldcaps because the ctor's aren't public...     FieldCapabilities fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(false).     responseMap.put("my_field", Collections.singletonMap("long", fieldCaps)).     MetricConfig config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().get(0), equalTo("The field [my_field] must be aggregatable across all indices, but is not.")). }
false;public;0;14;;public void testValidateDateFieldUnsupportedMetric() {     ActionRequestValidationException e = new ActionRequestValidationException().     Map<String, Map<String, FieldCapabilities>> responseMap = new HashMap<>().     // Have to mock fieldcaps because the ctor's aren't public...     FieldCapabilities fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("date", fieldCaps)).     MetricConfig config = new MetricConfig("my_field", Arrays.asList("avg", "max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().get(0), equalTo("Only the metrics " + RollupField.SUPPORTED_DATE_METRICS.toString() + " are supported for [date] types, but unsupported metrics [avg] supplied for field [my_field]")). }
false;public;0;70;;public void testValidateMatchingField() {     ActionRequestValidationException e = new ActionRequestValidationException().     Map<String, Map<String, FieldCapabilities>> responseMap = new HashMap<>().     // Have to mock fieldcaps because the ctor's aren't public...     FieldCapabilities fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("long", fieldCaps)).     MetricConfig config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("double", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("float", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("short", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("byte", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("half_float", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("scaled_float", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("integer", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)).     fieldCaps = mock(FieldCapabilities.class).     when(fieldCaps.isAggregatable()).thenReturn(true).     responseMap.put("my_field", Collections.singletonMap("date", fieldCaps)).     config = new MetricConfig("my_field", singletonList("max")).     config.validateMappings(responseMap, e).     assertThat(e.validationErrors().size(), equalTo(0)). }
