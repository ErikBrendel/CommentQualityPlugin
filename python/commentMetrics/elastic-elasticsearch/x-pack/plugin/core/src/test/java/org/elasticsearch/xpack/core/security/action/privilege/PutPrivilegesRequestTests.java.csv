commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;public void testSerialization() throws IOException {     final PutPrivilegesRequest original = request(randomArray(8, ApplicationPrivilegeDescriptor[]::new, () -> new ApplicationPrivilegeDescriptor(randomAlphaOfLengthBetween(3, 8).toLowerCase(Locale.ROOT), randomAlphaOfLengthBetween(3, 8).toLowerCase(Locale.ROOT), Sets.newHashSet(randomArray(3, String[]::new, () -> randomAlphaOfLength(3).toLowerCase(Locale.ROOT) + "/*")), Collections.emptyMap()))).     original.setRefreshPolicy(randomFrom(WriteRequest.RefreshPolicy.values())).     final BytesStreamOutput out = new BytesStreamOutput().     original.writeTo(out).     final PutPrivilegesRequest copy = new PutPrivilegesRequest().     copy.readFrom(out.bytes().streamInput()).     assertThat(original.getPrivileges(), Matchers.equalTo(copy.getPrivileges())).     assertThat(original.getRefreshPolicy(), Matchers.equalTo(copy.getRefreshPolicy())). }
false;public;0;32;;public void testValidation() {     // wildcard app name     final ApplicationPrivilegeDescriptor wildcardApp = descriptor("*", "all", "*").     assertValidationFailure(request(wildcardApp), "Application names may not contain").     // invalid priv names     final ApplicationPrivilegeDescriptor spaceName = descriptor("app", "r e a d", "read/*").     final ApplicationPrivilegeDescriptor numericName = descriptor("app", "7346", "read/*").     assertValidationFailure(request(spaceName), "Application privilege names must match").     assertValidationFailure(request(numericName), "Application privilege names must match").     // no actions     final ApplicationPrivilegeDescriptor nothing = descriptor("*", "nothing").     assertValidationFailure(request(nothing), "Application privileges must have at least one action").     // reserved metadata     final ApplicationPrivilegeDescriptor reservedMetadata = new ApplicationPrivilegeDescriptor("app", "all", Collections.emptySet(), Collections.singletonMap("_notAllowed", true)).     assertValidationFailure(request(reservedMetadata), "metadata keys may not start").     ApplicationPrivilegeDescriptor badAction = descriptor("app", "foo", randomFrom("data.read", "data_read", "data+read", "read")).     assertValidationFailure(request(badAction), "must contain one of").     // mixed     assertValidationFailure(request(wildcardApp, numericName, reservedMetadata, badAction), "Application names may not contain", "Application privilege names must match", "metadata keys may not start", "must contain one of").     // Empty request     assertValidationFailure(new PutPrivilegesRequest(), "At least one application privilege must be provided"). }
false;private;3;3;;private ApplicationPrivilegeDescriptor descriptor(String application, String name, String... actions) {     return new ApplicationPrivilegeDescriptor(application, name, Sets.newHashSet(actions), Collections.emptyMap()). }
false;private;2;7;;private void assertValidationFailure(PutPrivilegesRequest request, String... messages) {     final ActionRequestValidationException exception = request.validate().     assertThat(exception, notNullValue()).     for (String message : messages) {         assertThat(exception.validationErrors(), hasItem(containsString(message))).     } }
false;private;1;6;;private PutPrivilegesRequest request(ApplicationPrivilegeDescriptor... privileges) {     final PutPrivilegesRequest original = new PutPrivilegesRequest().     original.setPrivileges(Arrays.asList(privileges)).     return original. }
