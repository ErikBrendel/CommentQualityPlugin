commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;public void testPredicateNextStepChange() {     String indexName = randomAlphaOfLength(5).     ClusterState state = ClusterState.builder(ClusterName.DEFAULT).metaData(MetaData.builder().put(IndexMetaData.builder(indexName).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))).build().     StepKey stepKey = new StepKey(randomAlphaOfLength(5), randomAlphaOfLength(5), BranchingStep.NAME).     StepKey nextStepKey = new StepKey(randomAlphaOfLength(6), randomAlphaOfLength(6), BranchingStep.NAME).     StepKey nextSkipKey = new StepKey(randomAlphaOfLength(7), randomAlphaOfLength(7), BranchingStep.NAME).     {         BranchingStep step = new BranchingStep(stepKey, nextStepKey, nextSkipKey, (i, c) -> true).         expectThrows(IllegalStateException.class, step::getNextStepKey).         step.performAction(state.metaData().index(indexName).getIndex(), state).         assertThat(step.getNextStepKey(), equalTo(step.getNextStepKeyOnTrue())).         expectThrows(SetOnce.AlreadySetException.class, () -> step.performAction(state.metaData().index(indexName).getIndex(), state)).     }     {         BranchingStep step = new BranchingStep(stepKey, nextStepKey, nextSkipKey, (i, c) -> false).         expectThrows(IllegalStateException.class, step::getNextStepKey).         step.performAction(state.metaData().index(indexName).getIndex(), state).         assertThat(step.getNextStepKey(), equalTo(step.getNextStepKeyOnFalse())).         expectThrows(SetOnce.AlreadySetException.class, () -> step.performAction(state.metaData().index(indexName).getIndex(), state)).     } }
false;public;0;7;;@Override public BranchingStep createRandomInstance() {     StepKey stepKey = new StepKey(randomAlphaOfLength(5), randomAlphaOfLength(5), BranchingStep.NAME).     StepKey nextStepKey = new StepKey(randomAlphaOfLength(6), randomAlphaOfLength(6), BranchingStep.NAME).     StepKey nextSkipKey = new StepKey(randomAlphaOfLength(7), randomAlphaOfLength(7), BranchingStep.NAME).     return new BranchingStep(stepKey, nextStepKey, nextSkipKey, (i, c) -> randomBoolean()). }
false;public;1;24;;@Override public BranchingStep mutateInstance(BranchingStep instance) {     StepKey key = instance.getKey().     StepKey nextStepKey = instance.getNextStepKeyOnFalse().     StepKey nextSkipStepKey = instance.getNextStepKeyOnTrue().     BiPredicate<Index, ClusterState> predicate = instance.getPredicate().     switch(between(0, 2)) {         case 0:             key = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 1:             nextStepKey = new StepKey(nextStepKey.getPhase(), nextStepKey.getAction(), nextStepKey.getName() + randomAlphaOfLength(5)).             break.         case 2:             nextSkipStepKey = new StepKey(nextSkipStepKey.getPhase(), nextSkipStepKey.getAction(), nextSkipStepKey.getName() + randomAlphaOfLength(5)).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new BranchingStep(key, nextStepKey, nextSkipStepKey, predicate). }
false;public;1;5;;@Override public BranchingStep copyInstance(BranchingStep instance) {     return new BranchingStep(instance.getKey(), instance.getNextStepKeyOnFalse(), instance.getNextStepKeyOnTrue(), instance.getPredicate()). }
