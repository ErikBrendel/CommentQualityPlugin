commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void testBuilder() {     ResourcePrivilegesMap instance = ResourcePrivilegesMap.builder().addResourcePrivilege("*", mapBuilder().put("read", true).put("write", true).map()).build().     assertThat(instance.allAllowed(), is(true)).     assertThat(instance.getResourceToResourcePrivileges().size(), is(1)).     assertThat(instance.getResourceToResourcePrivileges().get("*").isAllowed("read"), is(true)).     assertThat(instance.getResourceToResourcePrivileges().get("*").isAllowed("write"), is(true)).     instance = ResourcePrivilegesMap.builder().addResourcePrivilege("*", mapBuilder().put("read", true).put("write", false).map()).build().     assertThat(instance.allAllowed(), is(false)).     assertThat(instance.getResourceToResourcePrivileges().size(), is(1)).     assertThat(instance.getResourceToResourcePrivileges().get("*").isAllowed("read"), is(true)).     assertThat(instance.getResourceToResourcePrivileges().get("*").isAllowed("write"), is(false)).     instance = ResourcePrivilegesMap.builder().addResourcePrivilege("some-other", mapBuilder().put("index", true).put("write", true).map()).addResourcePrivilegesMap(instance).build().     assertThat(instance.allAllowed(), is(false)).     assertThat(instance.getResourceToResourcePrivileges().size(), is(2)).     assertThat(instance.getResourceToResourcePrivileges().get("*").isAllowed("read"), is(true)).     assertThat(instance.getResourceToResourcePrivileges().get("*").isAllowed("write"), is(false)).     assertThat(instance.getResourceToResourcePrivileges().get("some-other").isAllowed("index"), is(true)).     assertThat(instance.getResourceToResourcePrivileges().get("some-other").isAllowed("write"), is(true)). }
false;public;0;17;;public void testIntersection() {     ResourcePrivilegesMap instance = ResourcePrivilegesMap.builder().addResourcePrivilege("*", mapBuilder().put("read", true).put("write", true).map()).addResourcePrivilege("index-*", mapBuilder().put("read", true).put("write", true).map()).build().     ResourcePrivilegesMap otherInstance = ResourcePrivilegesMap.builder().addResourcePrivilege("*", mapBuilder().put("read", true).put("write", false).map()).addResourcePrivilege("index-*", mapBuilder().put("read", false).put("write", true).map()).addResourcePrivilege("index-uncommon", mapBuilder().put("read", false).put("write", true).map()).build().     ResourcePrivilegesMap result = ResourcePrivilegesMap.intersection(instance, otherInstance).     assertThat(result.allAllowed(), is(false)).     assertThat(result.getResourceToResourcePrivileges().size(), is(2)).     assertThat(result.getResourceToResourcePrivileges().get("*").isAllowed("read"), is(true)).     assertThat(result.getResourceToResourcePrivileges().get("*").isAllowed("write"), is(false)).     assertThat(result.getResourceToResourcePrivileges().get("index-*").isAllowed("read"), is(false)).     assertThat(result.getResourceToResourcePrivileges().get("index-*").isAllowed("write"), is(true)).     assertThat(result.getResourceToResourcePrivileges().get("index-uncommon"), is(nullValue())). }
false;public;0;11;;public void testEqualsHashCode() {     ResourcePrivilegesMap instance = ResourcePrivilegesMap.builder().addResourcePrivilege("*", mapBuilder().put("read", true).put("write", true).map()).build().     EqualsHashCodeTestUtils.checkEqualsAndHashCode(instance, (original) -> {         return ResourcePrivilegesMap.builder().addResourcePrivilegesMap(original).build().     }).     EqualsHashCodeTestUtils.checkEqualsAndHashCode(instance, (original) -> {         return ResourcePrivilegesMap.builder().addResourcePrivilegesMap(original).build().     }, ResourcePrivilegesMapTests::mutateTestItem). }
false;private,static;1;13;;private static ResourcePrivilegesMap mutateTestItem(ResourcePrivilegesMap original) {     switch(randomIntBetween(0, 1)) {         case 0:             return ResourcePrivilegesMap.builder().addResourcePrivilege(randomAlphaOfLength(6), mapBuilder().put("read", true).put("write", true).map()).build().         case 1:             return ResourcePrivilegesMap.builder().addResourcePrivilege("*", mapBuilder().put("read", false).put("write", false).map()).build().         default:             return ResourcePrivilegesMap.builder().addResourcePrivilege(randomAlphaOfLength(6), mapBuilder().put("read", true).put("write", true).map()).build().     } }
false;private,static;0;3;;private static MapBuilder<String, Boolean> mapBuilder() {     return MapBuilder.newMapBuilder(). }
