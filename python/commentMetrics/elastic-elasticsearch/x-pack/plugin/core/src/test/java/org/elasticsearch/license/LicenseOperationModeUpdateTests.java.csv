commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void init() throws Exception {     licenseModeFile = createTempFile().     resourceWatcherService = mock(ResourceWatcherService.class).     operationModeFileWatcher = new OperationModeFileWatcher(resourceWatcherService, licenseModeFile, logger, () -> {     }). }
false;public;0;18;;public void testLicenseOperationModeUpdate() throws Exception {     String type = randomFrom("trial", "basic", "standard", "gold", "platinum").     License license = License.builder().uid("id").expiryDate(0).issueDate(0).issuedTo("elasticsearch").issuer("issuer").type(type).maxNodes(1).build().     assertThat(license.operationMode(), equalTo(License.OperationMode.resolve(type))).     OperationModeFileWatcherTests.writeMode("gold", licenseModeFile).     license.setOperationModeFileWatcher(operationModeFileWatcher).     verifyZeroInteractions(resourceWatcherService).     assertThat(license.operationMode(), equalTo(License.OperationMode.resolve(type))). }
false;public;0;17;;public void testCloudInternalLicenseOperationModeUpdate() throws Exception {     License license = License.builder().uid("id").expiryDate(0).issueDate(0).issuedTo("elasticsearch").issuer("issuer").type("cloud_internal").maxNodes(1).build().     assertThat(license.operationMode(), equalTo(License.OperationMode.PLATINUM)).     OperationModeFileWatcherTests.writeMode("gold", licenseModeFile).     license.setOperationModeFileWatcher(operationModeFileWatcher).     verify(resourceWatcherService, times(1)).add(any(FileWatcher.class), eq(ResourceWatcherService.Frequency.HIGH)).     assertThat(license.operationMode(), equalTo(License.OperationMode.GOLD)). }
