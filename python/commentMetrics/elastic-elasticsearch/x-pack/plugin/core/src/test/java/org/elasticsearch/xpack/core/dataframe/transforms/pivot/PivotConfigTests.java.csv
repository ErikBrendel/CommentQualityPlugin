commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static PivotConfig randomPivotConfig() {     return new PivotConfig(GroupConfigTests.randomGroupConfig(), AggregationConfigTests.randomAggregationConfig()). }
false;public,static;0;3;;public static PivotConfig randomInvalidPivotConfig() {     return new PivotConfig(GroupConfigTests.randomGroupConfig(), AggregationConfigTests.randomInvalidAggregationConfig()). }
false;protected;1;4;;@Override protected PivotConfig doParseInstance(XContentParser parser) throws IOException {     return PivotConfig.fromXContent(parser, false). }
false;protected;0;4;;@Override protected PivotConfig createTestInstance() {     return randomPivotConfig(). }
false;protected;0;4;;@Override protected Reader<PivotConfig> instanceReader() {     return PivotConfig::new. }
false;public;0;19;;public void testAggsAbbreviations() throws IOException {     String pivotAggs = "{" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } }," + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } } }".     PivotConfig p1 = createPivotConfigFromString(pivotAggs, false).     String pivotAggregations = pivotAggs.replace("aggs", "aggregations").     assertNotEquals(pivotAggs, pivotAggregations).     PivotConfig p2 = createPivotConfigFromString(pivotAggregations, false).     assertEquals(p1, p2). }
false;public;0;10;;public void testMissingAggs() throws IOException {     String pivot = "{" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } } }".     expectThrows(IllegalArgumentException.class, () -> createPivotConfigFromString(pivot, false)). }
false;public;0;16;;public void testEmptyAggs() throws IOException {     String pivot = "{" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } }," + "\"aggs\": {}" + " }".     expectThrows(IllegalArgumentException.class, () -> createPivotConfigFromString(pivot, false)).     // lenient passes but reports invalid     PivotConfig pivotConfig = createPivotConfigFromString(pivot, true).     assertFalse(pivotConfig.isValid()). }
false;public;0;15;;public void testEmptyGroupBy() throws IOException {     String pivot = "{" + " \"group_by\": {}," + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } } }".     expectThrows(IllegalArgumentException.class, () -> createPivotConfigFromString(pivot, false)).     // lenient passes but reports invalid     PivotConfig pivotConfig = createPivotConfigFromString(pivot, true).     assertFalse(pivotConfig.isValid()). }
false;public;0;10;;public void testMissingGroupBy() throws IOException {     String pivot = "{" + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } } }".     expectThrows(IllegalArgumentException.class, () -> createPivotConfigFromString(pivot, false)). }
false;public;0;21;;public void testDoubleAggs() throws IOException {     String pivot = "{" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } }," + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } }," + " \"aggregations\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } }" + "}".     expectThrows(IllegalArgumentException.class, () -> createPivotConfigFromString(pivot, false)). }
false;private;2;5;;private PivotConfig createPivotConfigFromString(String json, boolean lenient) throws IOException {     final XContentParser parser = XContentType.JSON.xContent().createParser(xContentRegistry(), DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     return PivotConfig.fromXContent(parser, lenient). }
