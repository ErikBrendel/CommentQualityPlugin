commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public org.elasticsearch.client.license.PutLicenseResponse doHlrcParseInstance(XContentParser parser) throws IOException {     return org.elasticsearch.client.license.PutLicenseResponse.fromXContent(parser). }
false;public;1;5;;@Override public PutLicenseResponse convertHlrcToInternal(org.elasticsearch.client.license.PutLicenseResponse instance) {     return new PutLicenseResponse(instance.isAcknowledged(), LicensesStatus.valueOf(instance.status().name()), instance.acknowledgeHeader(), instance.acknowledgeMessages()). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;6;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // are treated as messages from new services     return p -> p.startsWith("acknowledge"). }
false;protected;0;16;;@Override protected PutLicenseResponse createTestInstance() {     boolean acknowledged = randomBoolean().     LicensesStatus status = randomFrom(LicensesStatus.VALID, LicensesStatus.INVALID, LicensesStatus.EXPIRED).     String messageHeader.     Map<String, String[]> ackMessages.     if (randomBoolean()) {         messageHeader = randomAlphaOfLength(10).         ackMessages = randomAckMessages().     } else {         messageHeader = null.         ackMessages = Collections.emptyMap().     }     return new PutLicenseResponse(acknowledged, status, messageHeader, ackMessages). }
false;private,static;0;17;;private static Map<String, String[]> randomAckMessages() {     int nFeatures = randomIntBetween(1, 5).     Map<String, String[]> ackMessages = new HashMap<>().     for (int i = 0. i < nFeatures. i++) {         String feature = randomAlphaOfLengthBetween(9, 15).         int nMessages = randomIntBetween(1, 5).         String[] messages = new String[nMessages].         for (int j = 0. j < nMessages. j++) {             messages[j] = randomAlphaOfLengthBetween(10, 30).         }         ackMessages.put(feature, messages).     }     return ackMessages. }
false;protected;0;4;;@Override protected PutLicenseResponse createBlankInstance() {     return new PutLicenseResponse(). }
false;protected;1;30;;@Override protected PutLicenseResponse mutateInstance(PutLicenseResponse response) {     @SuppressWarnings("unchecked")     Function<PutLicenseResponse, PutLicenseResponse> mutator = randomFrom(r -> new PutLicenseResponse(r.isAcknowledged() == false, r.status(), r.acknowledgeHeader(), r.acknowledgeMessages()), r -> new PutLicenseResponse(r.isAcknowledged(), mutateStatus(r.status()), r.acknowledgeHeader(), r.acknowledgeMessages()), r -> {         if (r.acknowledgeMessages().isEmpty()) {             return new PutLicenseResponse(r.isAcknowledged(), r.status(), randomAlphaOfLength(10), randomAckMessages()).         } else {             return new PutLicenseResponse(r.isAcknowledged(), r.status()).         }     }).     return mutator.apply(response). }
false;private;1;3;;private LicensesStatus mutateStatus(LicensesStatus status) {     return randomValueOtherThan(status, () -> randomFrom(LicensesStatus.values())). }
