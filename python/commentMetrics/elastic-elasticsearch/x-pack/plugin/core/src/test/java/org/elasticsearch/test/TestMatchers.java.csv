commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean matches(Object item) {     return Files.exists(path, options). }
false;public,static;2;8;;public static Matcher<Path> pathExists(Path path, LinkOption... options) {     return new CustomMatcher<Path>("Path " + path + " exists") {          @Override         public boolean matches(Object item) {             return Files.exists(path, options).         }     }. }
false;public;1;8;;@Override public boolean matches(Object item) {     if (Predicate.class.isInstance(item)) {         return ((Predicate<T>) item).test(value).     } else {         return false.     } }
false;public,static;1;12;;public static <T> Matcher<Predicate<T>> predicateMatches(T value) {     return new CustomMatcher<Predicate<T>>("Matches " + value) {          @Override         public boolean matches(Object item) {             if (Predicate.class.isInstance(item)) {                 return ((Predicate<T>) item).test(value).             } else {                 return false.             }         }     }. }
false;public,static;1;3;;public static Matcher<String> matchesPattern(String regex) {     return matchesPattern(Pattern.compile(regex)). }
false;public,static;1;3;;public static Matcher<String> matchesPattern(Pattern pattern) {     return predicate("Matches " + pattern.pattern(), String.class, pattern.asPredicate()). }
false;public;1;8;;@Override public boolean matches(Object item) {     if (type.isInstance(item)) {         return predicate.test(type.cast(item)).     } else {         return false.     } }
false;private,static;3;12;;private static <T> Matcher<T> predicate(String description, Class<T> type, Predicate<T> predicate) {     return new CustomMatcher<T>(description) {          @Override         public boolean matches(Object item) {             if (type.isInstance(item)) {                 return predicate.test(type.cast(item)).             } else {                 return false.             }         }     }. }
