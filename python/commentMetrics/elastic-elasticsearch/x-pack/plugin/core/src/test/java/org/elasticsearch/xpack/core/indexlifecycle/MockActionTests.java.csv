commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected MockAction createTestInstance() {     return new MockAction(). }
false;protected;1;4;;@Override protected MockAction doParseInstance(XContentParser parser) throws IOException {     return MockAction.parse(parser). }
false;protected;0;4;;@Override protected Reader<MockAction> instanceReader() {     return MockAction::new. }
false;protected;1;21;;@Override protected MockAction mutateInstance(MockAction instance) throws IOException {     List<Step> steps = instance.getSteps().     boolean safe = instance.isSafeAction().     if (randomBoolean()) {         steps = new ArrayList<>(steps).         if (steps.size() > 0) {             Step lastStep = steps.remove(steps.size() - 1).             if (randomBoolean()) {                 Step.StepKey additionalStepKey = randomStepKey().                 steps.add(new MockStep(lastStep.getKey(), additionalStepKey)).                 steps.add(new MockStep(additionalStepKey, null)).             }         } else {             steps.add(new MockStep(randomStepKey(), null)).         }     } else {         safe = safe == false.     }     return new MockAction(steps, safe). }
false;private,static;0;4;;private static Step.StepKey randomStepKey() {     return new Step.StepKey(randomAlphaOfLength(5), randomAlphaOfLength(5), randomAlphaOfLength(5)). }
false;public;0;10;;@Override public void testToSteps() {     int numSteps = randomIntBetween(1, 10).     List<Step> steps = new ArrayList<>(numSteps).     for (int i = 0. i < numSteps. i++) {         steps.add(new MockStep(randomStepKey(), randomStepKey())).     }     MockAction action = new MockAction(steps).     assertEquals(action.getSteps(), action.toSteps(null, null, null)). }
