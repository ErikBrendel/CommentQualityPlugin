commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;public void testExtractJobId_GivenValidDocId() {     assertThat(Quantiles.extractJobId("foo_quantiles"), equalTo("foo")).     assertThat(Quantiles.extractJobId("bar_quantiles"), equalTo("bar")).     assertThat(Quantiles.extractJobId("foo_bar_quantiles"), equalTo("foo_bar")).     assertThat(Quantiles.extractJobId("_quantiles_quantiles"), equalTo("_quantiles")). }
false;public;0;6;;public void testExtractJobId_GivenInvalidDocId() {     assertThat(Quantiles.extractJobId(""), is(nullValue())).     assertThat(Quantiles.extractJobId("foo"), is(nullValue())).     assertThat(Quantiles.extractJobId("_quantiles"), is(nullValue())).     assertThat(Quantiles.extractJobId("foo_model_state_3141341341"), is(nullValue())). }
false;public;0;4;;public void testEquals_GivenSameObject() {     Quantiles quantiles = new Quantiles("foo", new Date(0L), "foo").     assertTrue(quantiles.equals(quantiles)). }
false;public;0;4;;public void testEquals_GivenDifferentClassObject() {     Quantiles quantiles = new Quantiles("foo", new Date(0L), "foo").     assertFalse(quantiles.equals("not a quantiles object")). }
false;public;0;8;;public void testEquals_GivenEqualQuantilesObject() {     Quantiles quantiles1 = new Quantiles("foo", new Date(0L), "foo").     Quantiles quantiles2 = new Quantiles("foo", new Date(0L), "foo").     assertTrue(quantiles1.equals(quantiles2)).     assertTrue(quantiles2.equals(quantiles1)). }
false;public;0;8;;public void testEquals_GivenDifferentState() {     Quantiles quantiles1 = new Quantiles("foo", new Date(0L), "bar1").     Quantiles quantiles2 = new Quantiles("foo", new Date(0L), "bar2").     assertFalse(quantiles1.equals(quantiles2)).     assertFalse(quantiles2.equals(quantiles1)). }
false;public;0;7;;public void testHashCode_GivenEqualObject() {     Quantiles quantiles1 = new Quantiles("foo", new Date(0L), "foo").     Quantiles quantiles2 = new Quantiles("foo", new Date(0L), "foo").     assertEquals(quantiles1.hashCode(), quantiles2.hashCode()). }
false;public;0;5;;public void testDocumentId() {     Quantiles quantiles = createTestInstance().     String jobId = quantiles.getJobId().     assertEquals(jobId + "_quantiles", Quantiles.documentId(jobId)). }
false;protected;0;4;;@Override protected Quantiles createTestInstance() {     return createRandomized(). }
false;public,static;0;5;;public static Quantiles createRandomized() {     return new Quantiles(randomAlphaOfLengthBetween(1, 20), new Date(TimeValue.parseTimeValue(randomTimeValue(), "test").millis()), randomAlphaOfLengthBetween(0, 1000)). }
false;protected;0;4;;@Override protected Reader<Quantiles> instanceReader() {     return Quantiles::new. }
false;protected;1;4;;@Override protected Quantiles doParseInstance(XContentParser parser) {     return Quantiles.STRICT_PARSER.apply(parser, null). }
false;public;0;9;;public void testStrictParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"timestamp\": 123456789, \"quantile_state\":\"...\", \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> Quantiles.STRICT_PARSER.apply(parser, null)).         assertThat(e.getMessage(), containsString("unknown field [foo]")).     } }
false;public;0;6;;public void testLenientParser() throws IOException {     String json = "{\"job_id\":\"job_1\", \"timestamp\": 123456789, \"quantile_state\":\"...\", \"foo\":\"bar\"}".     try (XContentParser parser = createParser(JsonXContent.jsonXContent, json)) {         Quantiles.LENIENT_PARSER.apply(parser, null).     } }
