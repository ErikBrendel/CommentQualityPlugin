commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;public void testGetHistogramAggregation_DateHistogramHasSibling() {     AvgAggregationBuilder avg = AggregationBuilders.avg("avg").     DateHistogramAggregationBuilder dateHistogram = AggregationBuilders.dateHistogram("time").     ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> ExtractorUtils.getHistogramAggregation(new AggregatorFactories.Builder().addAggregator(avg).addAggregator(dateHistogram).getAggregatorFactories())).     assertEquals("The date_histogram (or histogram) aggregation cannot have sibling aggregations", e.getMessage()).     TermsAggregationBuilder terms = AggregationBuilders.terms("terms").     terms.subAggregation(dateHistogram).     terms.subAggregation(avg).     e = expectThrows(ElasticsearchException.class, () -> ExtractorUtils.getHistogramAggregation(new AggregatorFactories.Builder().addAggregator(terms).getAggregatorFactories())).     assertEquals("The date_histogram (or histogram) aggregation cannot have sibling aggregations", e.getMessage()). }
false;public;0;21;;public void testGetHistogramAggregation() {     AvgAggregationBuilder avg = AggregationBuilders.avg("avg").     TermsAggregationBuilder nestedTerms = AggregationBuilders.terms("nested_terms").     DateHistogramAggregationBuilder dateHistogram = AggregationBuilders.dateHistogram("time").     AggregationBuilder histogramAggregationBuilder = ExtractorUtils.getHistogramAggregation(new AggregatorFactories.Builder().addAggregator(dateHistogram).getAggregatorFactories()).     assertEquals(dateHistogram, histogramAggregationBuilder).     dateHistogram.subAggregation(avg).subAggregation(nestedTerms).     histogramAggregationBuilder = ExtractorUtils.getHistogramAggregation(new AggregatorFactories.Builder().addAggregator(dateHistogram).getAggregatorFactories()).     assertEquals(dateHistogram, histogramAggregationBuilder).     TermsAggregationBuilder toplevelTerms = AggregationBuilders.terms("top_level").     toplevelTerms.subAggregation(dateHistogram).     histogramAggregationBuilder = ExtractorUtils.getHistogramAggregation(new AggregatorFactories.Builder().addAggregator(toplevelTerms).getAggregatorFactories()).     assertEquals(dateHistogram, histogramAggregationBuilder). }
false;public;0;7;;public void testGetHistogramAggregation_MissingHistogramAgg() {     TermsAggregationBuilder terms = AggregationBuilders.terms("top_level").     ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> ExtractorUtils.getHistogramAggregation(new AggregatorFactories.Builder().addAggregator(terms).getAggregatorFactories())).     assertEquals("A date_histogram (or histogram) aggregation is required", e.getMessage()). }
false;public;0;9;;public void testGetHistogramIntervalMillis_GivenDateHistogramWithInvalidTimeZone() {     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     DateHistogramAggregationBuilder dateHistogram = AggregationBuilders.dateHistogram("bucket").field("time").interval(300000L).timeZone(ZoneId.of("CET")).subAggregation(maxTime).     ElasticsearchException e = expectThrows(ElasticsearchException.class, () -> ExtractorUtils.getHistogramIntervalMillis(dateHistogram)).     assertThat(e.getMessage(), equalTo("ML requires date_histogram.time_zone to be UTC")). }
false;public;0;7;;public void testGetHistogramIntervalMillis_GivenUtcTimeZones() {     MaxAggregationBuilder maxTime = AggregationBuilders.max("time").field("time").     ZoneId zone = randomFrom(ZoneOffset.UTC, ZoneId.of("UTC")).     DateHistogramAggregationBuilder dateHistogram = AggregationBuilders.dateHistogram("bucket").field("time").interval(300000L).timeZone(zone).subAggregation(maxTime).     assertThat(ExtractorUtils.getHistogramIntervalMillis(dateHistogram), is(300_000L)). }
false;public;0;5;;public void testIsHistogram() {     assertTrue(ExtractorUtils.isHistogram(AggregationBuilders.dateHistogram("time"))).     assertTrue(ExtractorUtils.isHistogram(AggregationBuilders.histogram("time"))).     assertFalse(ExtractorUtils.isHistogram(AggregationBuilders.max("time"))). }
false;public;0;5;;public void testValidateAndGetCalendarInterval() {     assertEquals(300 * 1000L, ExtractorUtils.validateAndGetCalendarInterval("5m")).     assertEquals(7200 * 1000L, ExtractorUtils.validateAndGetCalendarInterval("2h")).     assertEquals(86400L * 1000L, ExtractorUtils.validateAndGetCalendarInterval("1d")). }
false;public;0;4;;public void testValidateAndGetCalendarInterval_intervalIsLongerThanAWeek() {     expectThrows(ElasticsearchException.class, () -> ExtractorUtils.validateAndGetCalendarInterval("8d")). }
