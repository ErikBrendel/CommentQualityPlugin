commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;public static DataFrameTransformConfig randomDataFrameTransformConfigWithoutHeaders() {     return new DataFrameTransformConfig(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), null, QueryConfigTests.randomQueryConfig(), PivotConfigTests.randomPivotConfig()). }
false;public,static;0;5;;public static DataFrameTransformConfig randomDataFrameTransformConfig() {     return new DataFrameTransformConfig(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomHeaders(), QueryConfigTests.randomQueryConfig(), PivotConfigTests.randomPivotConfig()). }
false;public,static;1;4;;public static DataFrameTransformConfig randomDataFrameTransformConfigWithoutHeaders(String id) {     return new DataFrameTransformConfig(id, randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), null, QueryConfigTests.randomQueryConfig(), PivotConfigTests.randomPivotConfig()). }
false;public,static;1;4;;public static DataFrameTransformConfig randomDataFrameTransformConfig(String id) {     return new DataFrameTransformConfig(id, randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomHeaders(), QueryConfigTests.randomQueryConfig(), PivotConfigTests.randomPivotConfig()). }
false;public,static;0;10;;public static DataFrameTransformConfig randomInvalidDataFrameTransformConfig() {     if (randomBoolean()) {         return new DataFrameTransformConfig(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomHeaders(), QueryConfigTests.randomInvalidQueryConfig(), PivotConfigTests.randomPivotConfig()).     }     // else     return new DataFrameTransformConfig(randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomAlphaOfLengthBetween(1, 10), randomHeaders(), QueryConfigTests.randomQueryConfig(), PivotConfigTests.randomInvalidPivotConfig()). }
false;public;0;5;;@Before public void setUpOptionalId() {     transformId = randomAlphaOfLengthBetween(1, 10).     runWithHeaders = randomBoolean(). }
false;protected;1;8;;@Override protected DataFrameTransformConfig doParseInstance(XContentParser parser) throws IOException {     if (randomBoolean()) {         return DataFrameTransformConfig.fromXContent(parser, transformId, runWithHeaders).     } else {         return DataFrameTransformConfig.fromXContent(parser, null, runWithHeaders).     } }
false;protected;0;4;;@Override protected DataFrameTransformConfig createTestInstance() {     return runWithHeaders ? randomDataFrameTransformConfig(transformId) : randomDataFrameTransformConfigWithoutHeaders(transformId). }
false;protected;0;4;;@Override protected Reader<DataFrameTransformConfig> instanceReader() {     return DataFrameTransformConfig::new. }
false;protected;0;4;;@Override protected ToXContent.Params getToXContentParams() {     return TO_XCONTENT_PARAMS. }
false;private,static;0;6;;private static Map<String, String> randomHeaders() {     Map<String, String> headers = new HashMap<>(1).     headers.put("key", "value").     return headers. }
false;public;0;27;;public void testDefaultMatchAll() throws IOException {     String pivotTransform = "{" + " \"source\" : \"src\"," + " \"dest\" : \"dest\"," + " \"pivot\" : {" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } }," + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } } } }".     DataFrameTransformConfig dataFrameTransformConfig = createDataFrameTransformConfigFromString(pivotTransform, "test_match_all").     assertNotNull(dataFrameTransformConfig.getQueryConfig()).     assertTrue(dataFrameTransformConfig.getQueryConfig().isValid()).     try (XContentBuilder xContentBuilder = XContentFactory.jsonBuilder()) {         XContentBuilder content = dataFrameTransformConfig.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS).         String pivotTransformWithIdAndDefaults = Strings.toString(content).         assertThat(pivotTransformWithIdAndDefaults, matchesPattern(".*\"match_all\"\\s*:\\s*\\{\\}.*")).     } }
false;public;0;20;;public void testPreventHeaderInjection() throws IOException {     String pivotTransform = "{" + " \"headers\" : {\"key\" : \"value\" }," + " \"source\" : \"src\"," + " \"dest\" : \"dest\"," + " \"pivot\" : {" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } }," + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } } } }".     expectThrows(IllegalArgumentException.class, () -> createDataFrameTransformConfigFromString(pivotTransform, "test_header_injection")). }
false;public;0;26;;public void testSetIdInBody() throws IOException {     String pivotTransform = "{" + " \"id\" : \"body_id\"," + " \"source\" : \"src\"," + " \"dest\" : \"dest\"," + " \"pivot\" : {" + " \"group_by\": {" + "   \"id\": {" + "     \"terms\": {" + "       \"field\": \"id\"" + "} } }," + " \"aggs\": {" + "   \"avg\": {" + "     \"avg\": {" + "       \"field\": \"points\"" + "} } } } }".     DataFrameTransformConfig dataFrameTransformConfig = createDataFrameTransformConfigFromString(pivotTransform, "body_id").     assertEquals("body_id", dataFrameTransformConfig.getId()).     IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () -> createDataFrameTransformConfigFromString(pivotTransform, "other_id")).     assertEquals("Inconsistent id. 'body_id' specified in the body differs from 'other_id' specified as a URL argument", ex.getCause().getMessage()). }
false;private;2;5;;private DataFrameTransformConfig createDataFrameTransformConfigFromString(String json, String id) throws IOException {     final XContentParser parser = XContentType.JSON.xContent().createParser(xContentRegistry(), DeprecationHandler.THROW_UNSUPPORTED_OPERATION, json).     return DataFrameTransformConfig.fromXContent(parser, id, false). }
