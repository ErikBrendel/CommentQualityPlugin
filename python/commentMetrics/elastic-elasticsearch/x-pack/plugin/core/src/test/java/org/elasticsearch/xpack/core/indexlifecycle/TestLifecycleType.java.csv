commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public void writeTo(StreamOutput out) throws IOException { }
false;public;0;4;;@Override public String getWriteableName() {     return TYPE. }
false;public;1;4;;@Override public void validate(Collection<Phase> phases) { // always valid }
false;public;1;4;;@Override public List<Phase> getOrderedPhases(Map<String, Phase> phases) {     return new ArrayList<>(phases.values()). }
false;public;2;12;;@Override public String getNextPhaseName(String currentPhaseName, Map<String, Phase> phases) {     List<String> orderedPhaseNames = getOrderedPhases(phases).stream().map(Phase::getName).collect(Collectors.toList()).     int index = orderedPhaseNames.indexOf(currentPhaseName).     if (index < 0) {         throw new IllegalArgumentException("[" + currentPhaseName + "] is not a valid phase for lifecycle type [" + TYPE + "]").     } else if (index == orderedPhaseNames.size() - 1) {         return null.     } else {         return orderedPhaseNames.get(index + 1).     } }
false;public;2;12;;@Override public String getPreviousPhaseName(String currentPhaseName, Map<String, Phase> phases) {     List<String> orderedPhaseNames = getOrderedPhases(phases).stream().map(Phase::getName).collect(Collectors.toList()).     int index = orderedPhaseNames.indexOf(currentPhaseName).     if (index < 0) {         throw new IllegalArgumentException("[" + currentPhaseName + "] is not a valid phase for lifecycle type [" + TYPE + "]").     } else if (index == 0) {         return null.     } else {         return orderedPhaseNames.get(index - 1).     } }
false;public;1;4;;@Override public List<LifecycleAction> getOrderedActions(Phase phase) {     return new ArrayList<>(phase.getActions().values()). }
false;public;2;14;;@Override public String getNextActionName(String currentActionName, Phase phase) {     List<String> orderedActionNames = getOrderedActions(phase).stream().map(LifecycleAction::getWriteableName).collect(Collectors.toList()).     int index = orderedActionNames.indexOf(currentActionName).     if (index < 0) {         throw new IllegalArgumentException("[" + currentActionName + "] is not a valid action for phase [" + phase.getName() + "] in lifecycle type [" + TYPE + "]").     } else if (index == orderedActionNames.size() - 1) {         return null.     } else {         return orderedActionNames.get(index + 1).     } }
