# id;timestamp;commentText;codeText;commentWords;codeWords
CapturingLogger -> public static Logger newCapturingLogger(final Level level, @Nullable StringLayout layout) throws IllegalAccessException;1536964057;Constructs a new {@link CapturingLogger} named as the fully qualified name of_the invoking method. One name can be assigned to a single logger globally, so_don't call this method multiple times in the same method.__@param level_The minimum priority level of events that will be captured._@param layout_Optional parameter allowing to set the layout format of events._This is useful because events are captured to be inspected (and_parsed) later. When parsing, it is useful to be in control of the_printing format as well. If not specified,_{@code event.getMessage().getFormattedMessage()} is called to_format the event._@return The new logger.;public static Logger newCapturingLogger(final Level level, @Nullable StringLayout layout) throws IllegalAccessException {_        _        final StackTraceElement caller = Thread.currentThread().getStackTrace()[2]__        final String name = caller.getClassName() + "." + caller.getMethodName() + "." + level.toString()__        final Logger logger = ESLoggerFactory.getLogger(name)__        Loggers.setLevel(logger, level)__        final MockAppender appender = new MockAppender(name, layout)__        appender.start()__        Loggers.addAppender(logger, appender)__        return logger__    };constructs,a,new,link,capturing,logger,named,as,the,fully,qualified,name,of,the,invoking,method,one,name,can,be,assigned,to,a,single,logger,globally,so,don,t,call,this,method,multiple,times,in,the,same,method,param,level,the,minimum,priority,level,of,events,that,will,be,captured,param,layout,optional,parameter,allowing,to,set,the,layout,format,of,events,this,is,useful,because,events,are,captured,to,be,inspected,and,parsed,later,when,parsing,it,is,useful,to,be,in,control,of,the,printing,format,as,well,if,not,specified,code,event,get,message,get,formatted,message,is,called,to,format,the,event,return,the,new,logger;public,static,logger,new,capturing,logger,final,level,level,nullable,string,layout,layout,throws,illegal,access,exception,final,stack,trace,element,caller,thread,current,thread,get,stack,trace,2,final,string,name,caller,get,class,name,caller,get,method,name,level,to,string,final,logger,logger,eslogger,factory,get,logger,name,loggers,set,level,logger,level,final,mock,appender,appender,new,mock,appender,name,layout,appender,start,loggers,add,appender,logger,appender,return,logger
CapturingLogger -> public static Logger newCapturingLogger(final Level level, @Nullable StringLayout layout) throws IllegalAccessException;1538067637;Constructs a new {@link CapturingLogger} named as the fully qualified name of_the invoking method. One name can be assigned to a single logger globally, so_don't call this method multiple times in the same method.__@param level_The minimum priority level of events that will be captured._@param layout_Optional parameter allowing to set the layout format of events._This is useful because events are captured to be inspected (and_parsed) later. When parsing, it is useful to be in control of the_printing format as well. If not specified,_{@code event.getMessage().getFormattedMessage()} is called to_format the event._@return The new logger.;public static Logger newCapturingLogger(final Level level, @Nullable StringLayout layout) throws IllegalAccessException {_        _        final StackTraceElement caller = Thread.currentThread().getStackTrace()[2]__        final String name = caller.getClassName() + "." + caller.getMethodName() + "." + level.toString()__        final Logger logger = LogManager.getLogger(name)__        Loggers.setLevel(logger, level)__        final MockAppender appender = new MockAppender(name, layout)__        appender.start()__        Loggers.addAppender(logger, appender)__        return logger__    };constructs,a,new,link,capturing,logger,named,as,the,fully,qualified,name,of,the,invoking,method,one,name,can,be,assigned,to,a,single,logger,globally,so,don,t,call,this,method,multiple,times,in,the,same,method,param,level,the,minimum,priority,level,of,events,that,will,be,captured,param,layout,optional,parameter,allowing,to,set,the,layout,format,of,events,this,is,useful,because,events,are,captured,to,be,inspected,and,parsed,later,when,parsing,it,is,useful,to,be,in,control,of,the,printing,format,as,well,if,not,specified,code,event,get,message,get,formatted,message,is,called,to,format,the,event,return,the,new,logger;public,static,logger,new,capturing,logger,final,level,level,nullable,string,layout,layout,throws,illegal,access,exception,final,stack,trace,element,caller,thread,current,thread,get,stack,trace,2,final,string,name,caller,get,class,name,caller,get,method,name,level,to,string,final,logger,logger,log,manager,get,logger,name,loggers,set,level,logger,level,final,mock,appender,appender,new,mock,appender,name,layout,appender,start,loggers,add,appender,logger,appender,return,logger
CapturingLogger -> public static boolean isEmpty(final String name);1536964057;Checks if the logger's appender has captured any events.__@param name_The unique global name of the logger._@return {@code true} if no event has been captured, {@code false} otherwise.;public static boolean isEmpty(final String name) {_        final MockAppender appender = getMockAppender(name)__        return appender.isEmpty()__    };checks,if,the,logger,s,appender,has,captured,any,events,param,name,the,unique,global,name,of,the,logger,return,code,true,if,no,event,has,been,captured,code,false,otherwise;public,static,boolean,is,empty,final,string,name,final,mock,appender,appender,get,mock,appender,name,return,appender,is,empty
CapturingLogger -> public static boolean isEmpty(final String name);1538067637;Checks if the logger's appender has captured any events.__@param name_The unique global name of the logger._@return {@code true} if no event has been captured, {@code false} otherwise.;public static boolean isEmpty(final String name) {_        final MockAppender appender = getMockAppender(name)__        return appender.isEmpty()__    };checks,if,the,logger,s,appender,has,captured,any,events,param,name,the,unique,global,name,of,the,logger,return,code,true,if,no,event,has,been,captured,code,false,otherwise;public,static,boolean,is,empty,final,string,name,final,mock,appender,appender,get,mock,appender,name,return,appender,is,empty
CapturingLogger -> public static List<String> output(final String name, final Level level);1536964057;Gets the captured events for a logger by its name.__@param name_The unique global name of the logger._@param level_The priority level of the captured events to be returned._@return A list of captured events formated to {@code String}.;public static List<String> output(final String name, final Level level) {_        final MockAppender appender = getMockAppender(name)__        return appender.output(level)__    };gets,the,captured,events,for,a,logger,by,its,name,param,name,the,unique,global,name,of,the,logger,param,level,the,priority,level,of,the,captured,events,to,be,returned,return,a,list,of,captured,events,formated,to,code,string;public,static,list,string,output,final,string,name,final,level,level,final,mock,appender,appender,get,mock,appender,name,return,appender,output,level
CapturingLogger -> public static List<String> output(final String name, final Level level);1538067637;Gets the captured events for a logger by its name.__@param name_The unique global name of the logger._@param level_The priority level of the captured events to be returned._@return A list of captured events formated to {@code String}.;public static List<String> output(final String name, final Level level) {_        final MockAppender appender = getMockAppender(name)__        return appender.output(level)__    };gets,the,captured,events,for,a,logger,by,its,name,param,name,the,unique,global,name,of,the,logger,param,level,the,priority,level,of,the,captured,events,to,be,returned,return,a,list,of,captured,events,formated,to,code,string;public,static,list,string,output,final,string,name,final,level,level,final,mock,appender,appender,get,mock,appender,name,return,appender,output,level
