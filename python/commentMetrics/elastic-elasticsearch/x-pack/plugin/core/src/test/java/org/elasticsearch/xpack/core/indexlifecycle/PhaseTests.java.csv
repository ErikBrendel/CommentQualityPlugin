commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     phaseName = randomAlphaOfLength(20). }
false;protected;0;4;;@Override protected Phase createTestInstance() {     return randomTestPhase(phaseName). }
false;static;1;11;;static Phase randomTestPhase(String phaseName) {     TimeValue after = null.     if (randomBoolean()) {         after = TimeValue.parseTimeValue(randomTimeValue(0, 1000000000, "s", "m", "h", "d"), "test_after").     }     Map<String, LifecycleAction> actions = Collections.emptyMap().     if (randomBoolean()) {         actions = Collections.singletonMap(MockAction.NAME, new MockAction()).     }     return new Phase(phaseName, after, actions). }
false;protected;1;4;;@Override protected Phase doParseInstance(XContentParser parser) throws IOException {     return Phase.parse(parser, phaseName). }
false;protected;0;4;;@Override protected Reader<Phase> instanceReader() {     return Phase::new. }
false;protected;0;4;;protected NamedWriteableRegistry getNamedWriteableRegistry() {     return new NamedWriteableRegistry(Arrays.asList(new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new))). }
false;protected;0;6;;@Override protected NamedXContentRegistry xContentRegistry() {     List<NamedXContentRegistry.Entry> entries = new ArrayList<>(ClusterModule.getNamedXWriteables()).     entries.add(new NamedXContentRegistry.Entry(LifecycleAction.class, new ParseField(MockAction.NAME), MockAction::parse)).     return new NamedXContentRegistry(entries). }
false;protected;1;21;;@Override protected Phase mutateInstance(Phase instance) throws IOException {     String name = instance.getName().     TimeValue after = instance.getMinimumAge().     Map<String, LifecycleAction> actions = instance.getActions().     switch(between(0, 2)) {         case 0:             name = name + randomAlphaOfLengthBetween(1, 5).             break.         case 1:             after = TimeValue.timeValueSeconds(after.getSeconds() + randomIntBetween(1, 1000)).             break.         case 2:             actions = new HashMap<>(actions).             actions.put(MockAction.NAME + "another", new MockAction(Collections.emptyList())).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new Phase(name, after, actions). }
false;public;0;4;;public void testDefaultAfter() {     Phase phase = new Phase(randomAlphaOfLength(20), null, Collections.emptyMap()).     assertEquals(TimeValue.ZERO, phase.getMinimumAge()). }
