commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void testSerialization() throws IOException {     final DeletePrivilegesRequest original = new DeletePrivilegesRequest(randomAlphaOfLengthBetween(3, 8), generateRandomStringArray(5, randomIntBetween(3, 8), false, false)).     original.setRefreshPolicy(randomFrom(WriteRequest.RefreshPolicy.values())).     final BytesStreamOutput output = new BytesStreamOutput().     original.writeTo(output).     output.flush().     final DeletePrivilegesRequest copy = new DeletePrivilegesRequest().     copy.readFrom(output.bytes().streamInput()).     assertThat(copy.application(), equalTo(original.application())).     assertThat(copy.privileges(), equalTo(original.privileges())).     assertThat(copy.getRefreshPolicy(), equalTo(original.getRefreshPolicy())). }
false;public;0;14;;public void testValidation() {     assertValidationFailure(new DeletePrivilegesRequest(null, null), "application name", "privileges").     assertValidationFailure(new DeletePrivilegesRequest("", null), "application name", "privileges").     assertValidationFailure(new DeletePrivilegesRequest(null, new String[0]), "application name", "privileges").     assertValidationFailure(new DeletePrivilegesRequest("", new String[0]), "application name", "privileges").     assertValidationFailure(new DeletePrivilegesRequest(null, new String[] { "all" }), "application name").     assertValidationFailure(new DeletePrivilegesRequest("", new String[] { "all" }), "application name").     assertValidationFailure(new DeletePrivilegesRequest("app", null), "privileges").     assertValidationFailure(new DeletePrivilegesRequest("app", new String[0]), "privileges").     assertValidationFailure(new DeletePrivilegesRequest("app", new String[] { "" }), "privileges").     assertThat(new DeletePrivilegesRequest("app", new String[] { "all" }).validate(), nullValue()).     assertThat(new DeletePrivilegesRequest("app", new String[] { "all", "some" }).validate(), nullValue()). }
false;private;2;7;;private void assertValidationFailure(DeletePrivilegesRequest request, String... messages) {     final ActionRequestValidationException exception = request.validate().     assertThat(exception, notNullValue()).     for (String message : messages) {         assertThat(exception.validationErrors(), Matchers.hasItem(containsString(message))).     } }
