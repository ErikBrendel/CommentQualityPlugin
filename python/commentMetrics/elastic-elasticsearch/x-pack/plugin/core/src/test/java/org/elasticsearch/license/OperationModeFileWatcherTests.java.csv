commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setup() throws Exception {     threadPool = new TestThreadPool("license mode file watcher tests").     Settings settings = Settings.builder().put("resource.reload.interval.high", "10ms").build().     watcherService = new ResourceWatcherService(settings, threadPool).     watcherService.start().     licenseModePath = createTempFile().     onChangeCounter = new AtomicReference<>(new CountDownLatch(1)).     operationModeFileWatcher = new OperationModeFileWatcher(watcherService, licenseModePath, logger, () -> onChangeCounter.get().countDown()). }
false;public;0;5;;@After public void shutdown() throws InterruptedException {     terminate(threadPool).     watcherService.stop(). }
false;public;0;8;;public void testInit() throws Exception {     onChangeCounter.set(new CountDownLatch(2)).     writeMode("gold").     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)).     operationModeFileWatcher.init().     assertTrue(onChangeCounter.get().await(5, TimeUnit.SECONDS)).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.GOLD)). }
false;public;0;12;;public void testUpdateModeFromFile() throws Exception {     Files.delete(licenseModePath).     operationModeFileWatcher.init().     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)).     writeMode("gold").     assertTrue(onChangeCounter.get().await(5, TimeUnit.SECONDS)).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.GOLD)).     onChangeCounter.set(new CountDownLatch(1)).     writeMode("basic").     assertTrue(onChangeCounter.get().await(5, TimeUnit.SECONDS)).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.BASIC)). }
false;public;0;12;;public void testDeleteModeFromFile() throws Exception {     Files.delete(licenseModePath).     operationModeFileWatcher.init().     writeMode("gold").     assertTrue(onChangeCounter.get().await(5, TimeUnit.SECONDS)).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.GOLD)).     onChangeCounter.set(new CountDownLatch(1)).     Files.delete(licenseModePath).     assertTrue(onChangeCounter.get().await(5, TimeUnit.SECONDS)).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)). }
false;public;0;7;;public void testInvalidModeFromFile() throws Exception {     writeMode("invalid").     operationModeFileWatcher.init().     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)).     operationModeFileWatcher.onFileChanged(licenseModePath).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)). }
false;public;0;7;;public void testLicenseModeFileIsDirectory() throws Exception {     licenseModePath = createTempDir().     operationModeFileWatcher.init().     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)).     operationModeFileWatcher.onFileChanged(licenseModePath).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)). }
false;public;0;11;;public void testLicenseModeFileCreatedAfterInit() throws Exception {     Files.delete(licenseModePath).     operationModeFileWatcher.init().     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.PLATINUM)).     onChangeCounter.set(new CountDownLatch(1)).     Path tempFile = createTempFile().     writeMode("gold", tempFile).     licenseModePath = tempFile.     assertTrue(onChangeCounter.get().await(5, TimeUnit.SECONDS)).     assertThat(operationModeFileWatcher.getCurrentOperationMode(), equalTo(License.OperationMode.GOLD)). }
false;private;1;3;;private void writeMode(String mode) throws IOException {     writeMode(mode, licenseModePath). }
false;static;2;3;;static void writeMode(String mode, Path file) throws IOException {     Files.write(file, mode.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE). }
