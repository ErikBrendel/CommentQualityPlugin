commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected PolicyStats createTestInstance() {     return createRandomInstance(). }
false;public,static;0;8;;public static PolicyStats createRandomInstance() {     int size = randomIntBetween(0, 10).     Map<String, PhaseStats> phaseStats = new HashMap<>(size).     for (int i = 0. i < size. i++) {         phaseStats.put(randomAlphaOfLengthBetween(1, 20), PhaseStatsTests.createRandomInstance()).     }     return new PolicyStats(phaseStats, randomIntBetween(0, 100)). }
false;protected;1;17;;@Override protected PolicyStats mutateInstance(PolicyStats instance) throws IOException {     Map<String, PhaseStats> phaseStats = instance.getPhaseStats().     int indicesManaged = instance.getIndicesManaged().     switch(between(0, 1)) {         case 0:             phaseStats = new HashMap<>(instance.getPhaseStats()).             phaseStats.put(randomAlphaOfLengthBetween(21, 25), PhaseStatsTests.createRandomInstance()).             break.         case 1:             indicesManaged += randomIntBetween(1, 10).             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new PolicyStats(phaseStats, indicesManaged). }
false;protected;0;4;;@Override protected Reader<PolicyStats> instanceReader() {     return PolicyStats::new. }
