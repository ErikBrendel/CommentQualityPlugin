# id;timestamp;commentText;codeText;commentWords;codeWords
ClientHelperTests -> private void assertExecutionWithOrigin(Map<String, String> storedHeaders, Client client);1526467406;This method executes a search and checks if the thread context was_enriched with the ml origin;private void assertExecutionWithOrigin(Map<String, String> storedHeaders, Client client) {_        String originName = randomFrom(ClientHelper.ML_ORIGIN, ClientHelper.WATCHER_ORIGIN, ClientHelper.ROLLUP_ORIGIN)__        ClientHelper.executeWithHeaders(storedHeaders, originName, client, () -> {_            Object origin = client.threadPool().getThreadContext().getTransient(ACTION_ORIGIN_TRANSIENT_NAME)__            assertThat(origin, is(originName))___            _            Map<String, String> headers = client.threadPool().getThreadContext().getHeaders()__            assertThat(headers, not(hasEntry(AuthenticationField.AUTHENTICATION_KEY, "anything")))__            assertThat(headers, not(hasEntry(AuthenticationServiceField.RUN_AS_USER_HEADER, "anything")))___            return client.search(new SearchRequest()).actionGet()__        })__    };this,method,executes,a,search,and,checks,if,the,thread,context,was,enriched,with,the,ml,origin;private,void,assert,execution,with,origin,map,string,string,stored,headers,client,client,string,origin,name,random,from,client,helper,client,helper,client,helper,client,helper,execute,with,headers,stored,headers,origin,name,client,object,origin,client,thread,pool,get,thread,context,get,transient,assert,that,origin,is,origin,name,map,string,string,headers,client,thread,pool,get,thread,context,get,headers,assert,that,headers,not,has,entry,authentication,field,anything,assert,that,headers,not,has,entry,authentication,service,field,anything,return,client,search,new,search,request,action,get
ClientHelperTests -> private void assertExecutionWithOrigin(Map<String, String> storedHeaders, Client client);1543415307;This method executes a search and checks if the thread context was_enriched with the ml origin;private void assertExecutionWithOrigin(Map<String, String> storedHeaders, Client client) {_        String originName = randomFrom(ClientHelper.ML_ORIGIN, ClientHelper.WATCHER_ORIGIN, ClientHelper.ROLLUP_ORIGIN)__        ClientHelper.executeWithHeaders(storedHeaders, originName, client, () -> {_            Object origin = client.threadPool().getThreadContext().getTransient(ACTION_ORIGIN_TRANSIENT_NAME)__            assertThat(origin, is(originName))___            _            Map<String, String> headers = client.threadPool().getThreadContext().getHeaders()__            assertThat(headers, not(hasEntry(AuthenticationField.AUTHENTICATION_KEY, "anything")))__            assertThat(headers, not(hasEntry(AuthenticationServiceField.RUN_AS_USER_HEADER, "anything")))___            return client.search(new SearchRequest()).actionGet()__        })__    };this,method,executes,a,search,and,checks,if,the,thread,context,was,enriched,with,the,ml,origin;private,void,assert,execution,with,origin,map,string,string,stored,headers,client,client,string,origin,name,random,from,client,helper,client,helper,client,helper,client,helper,execute,with,headers,stored,headers,origin,name,client,object,origin,client,thread,pool,get,thread,context,get,transient,assert,that,origin,is,origin,name,map,string,string,headers,client,thread,pool,get,thread,context,get,headers,assert,that,headers,not,has,entry,authentication,field,anything,assert,that,headers,not,has,entry,authentication,service,field,anything,return,client,search,new,search,request,action,get
ClientHelperTests -> public void assertRunAsExecution(Map<String, String> storedHeaders, Consumer<Map<String, String>> consumer, Client client);1526467406;This method executes a search and ensures no stashed origin thread_context was created, so that the regular node client was used, to emulate_a run_as function;public void assertRunAsExecution(Map<String, String> storedHeaders, Consumer<Map<String, String>> consumer, Client client) {_        String originName = randomFrom(ClientHelper.ML_ORIGIN, ClientHelper.WATCHER_ORIGIN, ClientHelper.ROLLUP_ORIGIN)__        ClientHelper.executeWithHeaders(storedHeaders, originName, client, () -> {_            Object origin = client.threadPool().getThreadContext().getTransient(ACTION_ORIGIN_TRANSIENT_NAME)__            assertThat(origin, is(nullValue()))___            consumer.accept(client.threadPool().getThreadContext().getHeaders())__            return client.search(new SearchRequest()).actionGet()__        })__    };this,method,executes,a,search,and,ensures,no,stashed,origin,thread,context,was,created,so,that,the,regular,node,client,was,used,to,emulate,a,function;public,void,assert,run,as,execution,map,string,string,stored,headers,consumer,map,string,string,consumer,client,client,string,origin,name,random,from,client,helper,client,helper,client,helper,client,helper,execute,with,headers,stored,headers,origin,name,client,object,origin,client,thread,pool,get,thread,context,get,transient,assert,that,origin,is,null,value,consumer,accept,client,thread,pool,get,thread,context,get,headers,return,client,search,new,search,request,action,get
ClientHelperTests -> public void assertRunAsExecution(Map<String, String> storedHeaders, Consumer<Map<String, String>> consumer, Client client);1543415307;This method executes a search and ensures no stashed origin thread_context was created, so that the regular node client was used, to emulate_a run_as function;public void assertRunAsExecution(Map<String, String> storedHeaders, Consumer<Map<String, String>> consumer, Client client) {_        String originName = randomFrom(ClientHelper.ML_ORIGIN, ClientHelper.WATCHER_ORIGIN, ClientHelper.ROLLUP_ORIGIN)__        ClientHelper.executeWithHeaders(storedHeaders, originName, client, () -> {_            Object origin = client.threadPool().getThreadContext().getTransient(ACTION_ORIGIN_TRANSIENT_NAME)__            assertThat(origin, is(nullValue()))___            consumer.accept(client.threadPool().getThreadContext().getHeaders())__            return client.search(new SearchRequest()).actionGet()__        })__    };this,method,executes,a,search,and,ensures,no,stashed,origin,thread,context,was,created,so,that,the,regular,node,client,was,used,to,emulate,a,function;public,void,assert,run,as,execution,map,string,string,stored,headers,consumer,map,string,string,consumer,client,client,string,origin,name,random,from,client,helper,client,helper,client,helper,client,helper,execute,with,headers,stored,headers,origin,name,client,object,origin,client,thread,pool,get,thread,context,get,transient,assert,that,origin,is,null,value,consumer,accept,client,thread,pool,get,thread,context,get,headers,return,client,search,new,search,request,action,get
