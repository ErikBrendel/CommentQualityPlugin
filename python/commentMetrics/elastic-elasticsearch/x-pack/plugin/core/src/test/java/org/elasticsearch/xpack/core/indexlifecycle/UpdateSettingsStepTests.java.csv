commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     client = Mockito.mock(Client.class). }
false;public;0;8;;@Override public UpdateSettingsStep createRandomInstance() {     StepKey stepKey = randomStepKey().     StepKey nextStepKey = randomStepKey().     Settings settings = Settings.builder().put(randomAlphaOfLength(10), randomAlphaOfLength(10)).build().     return new UpdateSettingsStep(stepKey, nextStepKey, client, settings). }
false;public;1;22;;@Override public UpdateSettingsStep mutateInstance(UpdateSettingsStep instance) {     StepKey key = instance.getKey().     StepKey nextKey = instance.getNextStepKey().     Settings settings = instance.getSettings().     switch(between(0, 2)) {         case 0:             key = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 1:             nextKey = new StepKey(key.getPhase(), key.getAction(), key.getName() + randomAlphaOfLength(5)).             break.         case 2:             settings = Settings.builder().put(settings).put(randomAlphaOfLength(10), randomInt()).build().             break.         default:             throw new AssertionError("Illegal randomisation branch").     }     return new UpdateSettingsStep(key, nextKey, client, settings). }
false;public;1;4;;@Override public UpdateSettingsStep copyInstance(UpdateSettingsStep instance) {     return new UpdateSettingsStep(instance.getKey(), instance.getNextStepKey(), instance.getClient(), instance.getSettings()). }
false;public;1;10;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     UpdateSettingsRequest request = (UpdateSettingsRequest) invocation.getArguments()[0].     @SuppressWarnings("unchecked")     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].     assertThat(request.settings(), equalTo(step.getSettings())).     assertThat(request.indices(), equalTo(new String[] { indexMetaData.getIndex().getName() })).     listener.onResponse(new AcknowledgedResponse(true)).     return null. }
false;public;1;4;;@Override public void onResponse(boolean complete) {     actionCompleted.set(complete). }
false;public;1;4;;@Override public void onFailure(Exception e) {     throw new AssertionError("Unexpected method call", e). }
false;public;0;48;;public void testPerformAction() throws Exception {     IndexMetaData indexMetaData = IndexMetaData.builder(randomAlphaOfLength(10)).settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     UpdateSettingsStep step = createRandomInstance().     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             UpdateSettingsRequest request = (UpdateSettingsRequest) invocation.getArguments()[0].             @SuppressWarnings("unchecked")             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].             assertThat(request.settings(), equalTo(step.getSettings())).             assertThat(request.indices(), equalTo(new String[] { indexMetaData.getIndex().getName() })).             listener.onResponse(new AcknowledgedResponse(true)).             return null.         }     }).when(indicesClient).updateSettings(Mockito.any(), Mockito.any()).     SetOnce<Boolean> actionCompleted = new SetOnce<>().     step.performAction(indexMetaData, null, null, new Listener() {          @Override         public void onResponse(boolean complete) {             actionCompleted.set(complete).         }          @Override         public void onFailure(Exception e) {             throw new AssertionError("Unexpected method call", e).         }     }).     assertEquals(true, actionCompleted.get()).     Mockito.verify(client, Mockito.only()).admin().     Mockito.verify(adminClient, Mockito.only()).indices().     Mockito.verify(indicesClient, Mockito.only()).updateSettings(Mockito.any(), Mockito.any()). }
false;public;1;10;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     UpdateSettingsRequest request = (UpdateSettingsRequest) invocation.getArguments()[0].     @SuppressWarnings("unchecked")     ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].     assertThat(request.settings(), equalTo(step.getSettings())).     assertThat(request.indices(), equalTo(new String[] { indexMetaData.getIndex().getName() })).     listener.onFailure(exception).     return null. }
false;public;1;4;;@Override public void onResponse(boolean complete) {     throw new AssertionError("Unexpected method call"). }
false;public;1;5;;@Override public void onFailure(Exception e) {     assertSame(exception, e).     exceptionThrown.set(true). }
false;public;0;47;;public void testPerformActionFailure() {     IndexMetaData indexMetaData = IndexMetaData.builder(randomAlphaOfLength(10)).settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build().     Exception exception = new RuntimeException().     UpdateSettingsStep step = createRandomInstance().     AdminClient adminClient = Mockito.mock(AdminClient.class).     IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class).     Mockito.when(client.admin()).thenReturn(adminClient).     Mockito.when(adminClient.indices()).thenReturn(indicesClient).     Mockito.doAnswer(new Answer<Void>() {          @Override         public Void answer(InvocationOnMock invocation) throws Throwable {             UpdateSettingsRequest request = (UpdateSettingsRequest) invocation.getArguments()[0].             @SuppressWarnings("unchecked")             ActionListener<AcknowledgedResponse> listener = (ActionListener<AcknowledgedResponse>) invocation.getArguments()[1].             assertThat(request.settings(), equalTo(step.getSettings())).             assertThat(request.indices(), equalTo(new String[] { indexMetaData.getIndex().getName() })).             listener.onFailure(exception).             return null.         }     }).when(indicesClient).updateSettings(Mockito.any(), Mockito.any()).     SetOnce<Boolean> exceptionThrown = new SetOnce<>().     step.performAction(indexMetaData, null, null, new Listener() {          @Override         public void onResponse(boolean complete) {             throw new AssertionError("Unexpected method call").         }          @Override         public void onFailure(Exception e) {             assertSame(exception, e).             exceptionThrown.set(true).         }     }).     assertEquals(true, exceptionThrown.get()).     Mockito.verify(client, Mockito.only()).admin().     Mockito.verify(adminClient, Mockito.only()).indices().     Mockito.verify(indicesClient, Mockito.only()).updateSettings(Mockito.any(), Mockito.any()). }
