commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public org.elasticsearch.client.license.StartBasicResponse doHlrcParseInstance(XContentParser parser) throws IOException {     return org.elasticsearch.client.license.StartBasicResponse.fromXContent(parser). }
false;public;1;5;;@Override public PostStartBasicResponse convertHlrcToInternal(org.elasticsearch.client.license.StartBasicResponse instance) {     return new PostStartBasicResponse(PostStartBasicResponse.Status.valueOf(instance.getStatus().name()), instance.getAcknowledgeMessages(), instance.getAcknowledgeMessage()). }
false;protected;0;4;;@Override protected PostStartBasicResponse createBlankInstance() {     return new PostStartBasicResponse(). }
false;protected;0;4;;@Override protected boolean supportsUnknownFields() {     return true. }
false;protected;0;6;;@Override protected Predicate<String> getRandomFieldsExcludeFilter() {     // are treated as messages from new services     return p -> p.startsWith("acknowledge"). }
false;protected;0;13;;@Override protected PostStartBasicResponse createTestInstance() {     PostStartBasicResponse.Status status = randomFrom(PostStartBasicResponse.Status.values()).     String acknowledgeMessage = null.     Map<String, String[]> ackMessages = Collections.emptyMap().     if (status != PostStartBasicResponse.Status.GENERATED_BASIC) {         acknowledgeMessage = randomAlphaOfLength(10).         ackMessages = randomAckMessages().     }     final PostStartBasicResponse postStartBasicResponse = new PostStartBasicResponse(status, ackMessages, acknowledgeMessage).     logger.info("{}", Strings.toString(postStartBasicResponse)).     return postStartBasicResponse. }
false;private,static;0;17;;private static Map<String, String[]> randomAckMessages() {     int nFeatures = randomIntBetween(1, 5).     Map<String, String[]> ackMessages = new HashMap<>().     for (int i = 0. i < nFeatures. i++) {         String feature = randomAlphaOfLengthBetween(9, 15).         int nMessages = randomIntBetween(1, 5).         String[] messages = new String[nMessages].         for (int j = 0. j < nMessages. j++) {             messages[j] = randomAlphaOfLengthBetween(10, 30).         }         ackMessages.put(feature, messages).     }     return ackMessages. }
