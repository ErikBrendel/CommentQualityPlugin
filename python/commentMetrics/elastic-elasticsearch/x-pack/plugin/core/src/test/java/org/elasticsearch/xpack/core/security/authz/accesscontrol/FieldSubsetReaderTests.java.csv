# id;timestamp;commentText;codeText;commentWords;codeWords
FieldSubsetReaderTests -> public void testBinaryDocValues() throws Exception;1524684173;test filtering two binary dv fields;public void testBinaryDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new BinaryDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new BinaryDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        BinaryDocValues values = segmentReader.getBinaryDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getBinaryDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,binary,dv,fields;public,void,test,binary,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,binary,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,binary,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,binary,doc,values,values,segment,reader,get,binary,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,binary,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testBinaryDocValues() throws Exception;1527096592;test filtering two binary dv fields;public void testBinaryDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new BinaryDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new BinaryDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        BinaryDocValues values = segmentReader.getBinaryDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getBinaryDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,binary,dv,fields;public,void,test,binary,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,binary,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,binary,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,binary,doc,values,values,segment,reader,get,binary,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,binary,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testBinaryDocValues() throws Exception;1535965276;test filtering two binary dv fields;public void testBinaryDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new BinaryDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new BinaryDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        BinaryDocValues values = segmentReader.getBinaryDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getBinaryDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,binary,dv,fields;public,void,test,binary,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,binary,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,binary,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,binary,doc,values,values,segment,reader,get,binary,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,binary,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testBinaryDocValues() throws Exception;1541501723;test filtering two binary dv fields;public void testBinaryDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new BinaryDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new BinaryDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        BinaryDocValues values = segmentReader.getBinaryDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getBinaryDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,binary,dv,fields;public,void,test,binary,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,binary,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,binary,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,binary,doc,values,values,segment,reader,get,binary,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,binary,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testBinaryDocValues() throws Exception;1551278144;test filtering two binary dv fields;public void testBinaryDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new BinaryDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new BinaryDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        BinaryDocValues values = segmentReader.getBinaryDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getBinaryDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,binary,dv,fields;public,void,test,binary,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,binary,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,binary,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,binary,doc,values,values,segment,reader,get,binary,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,binary,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsString() throws Exception;1524684173;test filtering two stored fields (string);public void testStoredFieldsString() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", "testA"))__        doc.add(new StoredField("fieldB", "testB"))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("testA", d2.get("fieldA"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,string;public,void,test,stored,fields,string,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,test,a,doc,add,new,stored,field,field,b,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,test,a,d2,get,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsString() throws Exception;1527096592;test filtering two stored fields (string);public void testStoredFieldsString() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", "testA"))__        doc.add(new StoredField("fieldB", "testB"))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("testA", d2.get("fieldA"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,string;public,void,test,stored,fields,string,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,test,a,doc,add,new,stored,field,field,b,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,test,a,d2,get,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsString() throws Exception;1535965276;test filtering two stored fields (string);public void testStoredFieldsString() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", "testA"))__        doc.add(new StoredField("fieldB", "testB"))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("testA", d2.get("fieldA"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,string;public,void,test,stored,fields,string,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,test,a,doc,add,new,stored,field,field,b,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,test,a,d2,get,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsString() throws Exception;1541501723;test filtering two stored fields (string);public void testStoredFieldsString() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", "testA"))__        doc.add(new StoredField("fieldB", "testB"))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("testA", d2.get("fieldA"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,string;public,void,test,stored,fields,string,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,test,a,doc,add,new,stored,field,field,b,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,test,a,d2,get,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsString() throws Exception;1551278144;test filtering two stored fields (string);public void testStoredFieldsString() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", "testA"))__        doc.add(new StoredField("fieldB", "testB"))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("testA", d2.get("fieldA"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,string;public,void,test,stored,fields,string,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,test,a,doc,add,new,stored,field,field,b,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,test,a,d2,get,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNumericDocValues() throws Exception;1524684173;test filtering two numeric dv fields;public void testNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new NumericDocValuesField("fieldA", 1))__        doc.add(new NumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        NumericDocValues values = segmentReader.getNumericDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(1, values.longValue())__        assertNull(segmentReader.getNumericDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,numeric,dv,fields;public,void,test,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,numeric,doc,values,field,field,a,1,doc,add,new,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,numeric,doc,values,values,segment,reader,get,numeric,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,1,values,long,value,assert,null,segment,reader,get,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNumericDocValues() throws Exception;1527096592;test filtering two numeric dv fields;public void testNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new NumericDocValuesField("fieldA", 1))__        doc.add(new NumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        NumericDocValues values = segmentReader.getNumericDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(1, values.longValue())__        assertNull(segmentReader.getNumericDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,numeric,dv,fields;public,void,test,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,numeric,doc,values,field,field,a,1,doc,add,new,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,numeric,doc,values,values,segment,reader,get,numeric,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,1,values,long,value,assert,null,segment,reader,get,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNumericDocValues() throws Exception;1535965276;test filtering two numeric dv fields;public void testNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new NumericDocValuesField("fieldA", 1))__        doc.add(new NumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        NumericDocValues values = segmentReader.getNumericDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(1, values.longValue())__        assertNull(segmentReader.getNumericDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,numeric,dv,fields;public,void,test,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,numeric,doc,values,field,field,a,1,doc,add,new,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,numeric,doc,values,values,segment,reader,get,numeric,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,1,values,long,value,assert,null,segment,reader,get,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNumericDocValues() throws Exception;1541501723;test filtering two numeric dv fields;public void testNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new NumericDocValuesField("fieldA", 1))__        doc.add(new NumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        NumericDocValues values = segmentReader.getNumericDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(1, values.longValue())__        assertNull(segmentReader.getNumericDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,numeric,dv,fields;public,void,test,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,numeric,doc,values,field,field,a,1,doc,add,new,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,numeric,doc,values,values,segment,reader,get,numeric,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,1,values,long,value,assert,null,segment,reader,get,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNumericDocValues() throws Exception;1551278144;test filtering two numeric dv fields;public void testNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new NumericDocValuesField("fieldA", 1))__        doc.add(new NumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        NumericDocValues values = segmentReader.getNumericDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(1, values.longValue())__        assertNull(segmentReader.getNumericDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,numeric,dv,fields;public,void,test,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,numeric,doc,values,field,field,a,1,doc,add,new,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,numeric,doc,values,values,segment,reader,get,numeric,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,1,values,long,value,assert,null,segment,reader,get,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNames() throws Exception;1524684173;test special handling for _field_names field.;public void testFieldNames() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Set<String> fields = new HashSet<>()__        fields.add("fieldA")__        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertNull(termsEnum.next())__        _        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        _        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("field0000")))__        assertEquals(new BytesRef("fieldA"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldAAA")))__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldB")))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,field,names,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,set,string,fields,new,hash,set,fields,add,field,a,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field0000,assert,equals,new,bytes,ref,field,a,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,aaa,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNames() throws Exception;1527096592;test special handling for _field_names field.;public void testFieldNames() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Set<String> fields = new HashSet<>()__        fields.add("fieldA")__        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertNull(termsEnum.next())__        _        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        _        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("field0000")))__        assertEquals(new BytesRef("fieldA"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldAAA")))__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldB")))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,field,names,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,set,string,fields,new,hash,set,fields,add,field,a,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field0000,assert,equals,new,bytes,ref,field,a,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,aaa,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNames() throws Exception;1535965276;test special handling for _field_names field.;public void testFieldNames() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)___        _        Set<String> fields = new HashSet<>()__        fields.add("fieldA")__        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertNull(termsEnum.next())___        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("field0000")))__        assertEquals(new BytesRef("fieldA"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldAAA")))__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldB")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,field,names,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,set,string,fields,new,hash,set,fields,add,field,a,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field0000,assert,equals,new,bytes,ref,field,a,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,aaa,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNames() throws Exception;1541501723;test special handling for _field_names field.;public void testFieldNames() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)___        _        Set<String> fields = new HashSet<>()__        fields.add("fieldA")__        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertNull(termsEnum.next())___        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("field0000")))__        assertEquals(new BytesRef("fieldA"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldAAA")))__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldB")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,field,names,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,set,string,fields,new,hash,set,fields,add,field,a,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field0000,assert,equals,new,bytes,ref,field,a,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,aaa,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNames() throws Exception;1551278144;test special handling for _field_names field.;public void testFieldNames() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)___        _        Set<String> fields = new HashSet<>()__        fields.add("fieldA")__        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertNull(termsEnum.next())___        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))___        _        _        LeafReader unwrappedReader = FilterDirectoryReader.unwrap(ir).leaves().get(0).reader()__        Terms unwrappedTerms = unwrappedReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum unwrappedTE = unwrappedTerms.iterator()__        assertTrue(unwrappedTE.seekExact(new BytesRef("fieldB")))__        TermState termState = unwrappedTE.termState()___        _        TermsEnum badEnum = terms.iterator()__        expectThrows(IllegalStateException.class, () -> badEnum.seekExact(new BytesRef("fieldB"), termState))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("field0000")))__        assertEquals(new BytesRef("fieldA"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldAAA")))__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldB")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,field,names,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,set,string,fields,new,hash,set,fields,add,field,a,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,leaf,reader,unwrapped,reader,filter,directory,reader,unwrap,ir,leaves,get,0,reader,terms,unwrapped,terms,unwrapped,reader,terms,field,names,field,mapper,name,terms,enum,unwrapped,te,unwrapped,terms,iterator,assert,true,unwrapped,te,seek,exact,new,bytes,ref,field,b,term,state,term,state,unwrapped,te,term,state,terms,enum,bad,enum,terms,iterator,expect,throws,illegal,state,exception,class,bad,enum,seek,exact,new,bytes,ref,field,b,term,state,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field0000,assert,equals,new,bytes,ref,field,a,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,aaa,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testIndexed() throws Exception;1524684173;test filtering two string fields;public void testIndexed() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        assertNotNull(segmentReader.terms("fieldA"))__        assertNull(segmentReader.terms("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,string,fields;public,void,test,indexed,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,collections,singleton,field,a,seen,fields,assert,not,null,segment,reader,terms,field,a,assert,null,segment,reader,terms,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testIndexed() throws Exception;1527096592;test filtering two string fields;public void testIndexed() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        assertNotNull(segmentReader.terms("fieldA"))__        assertNull(segmentReader.terms("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,string,fields;public,void,test,indexed,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,collections,singleton,field,a,seen,fields,assert,not,null,segment,reader,terms,field,a,assert,null,segment,reader,terms,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testIndexed() throws Exception;1535965276;test filtering two string fields;public void testIndexed() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        assertNotNull(segmentReader.terms("fieldA"))__        assertNull(segmentReader.terms("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,string,fields;public,void,test,indexed,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,collections,singleton,field,a,seen,fields,assert,not,null,segment,reader,terms,field,a,assert,null,segment,reader,terms,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testIndexed() throws Exception;1541501723;test filtering two string fields;public void testIndexed() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        assertNotNull(segmentReader.terms("fieldA"))__        assertNull(segmentReader.terms("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,string,fields;public,void,test,indexed,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,collections,singleton,field,a,seen,fields,assert,not,null,segment,reader,terms,field,a,assert,null,segment,reader,terms,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testIndexed() throws Exception;1551278144;test filtering two string fields;public void testIndexed() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        assertNotNull(segmentReader.terms("fieldA"))__        assertNull(segmentReader.terms("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,string,fields;public,void,test,indexed,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,collections,singleton,field,a,seen,fields,assert,not,null,segment,reader,terms,field,a,assert,null,segment,reader,terms,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesMissing() throws Exception;1524684173;test _field_names where a field is permitted, but doesn't exist in the segment.;public void testFieldNamesMissing() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        _        _        TermsEnum termsEnum = terms.iterator()__        assertFalse(termsEnum.seekExact(new BytesRef("fieldC")))__        _        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldC")))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,a,field,is,permitted,but,doesn,t,exist,in,the,segment;public,void,test,field,names,missing,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,false,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,c,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesMissing() throws Exception;1527096592;test _field_names where a field is permitted, but doesn't exist in the segment.;public void testFieldNamesMissing() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        _        _        TermsEnum termsEnum = terms.iterator()__        assertFalse(termsEnum.seekExact(new BytesRef("fieldC")))__        _        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldC")))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,a,field,is,permitted,but,doesn,t,exist,in,the,segment;public,void,test,field,names,missing,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,false,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,c,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesMissing() throws Exception;1535965276;test _field_names where a field is permitted, but doesn't exist in the segment.;public void testFieldNamesMissing() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)___        _        TermsEnum termsEnum = terms.iterator()__        assertFalse(termsEnum.seekExact(new BytesRef("fieldC")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldC")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,a,field,is,permitted,but,doesn,t,exist,in,the,segment;public,void,test,field,names,missing,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,false,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,c,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesMissing() throws Exception;1541501723;test _field_names where a field is permitted, but doesn't exist in the segment.;public void testFieldNamesMissing() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)___        _        TermsEnum termsEnum = terms.iterator()__        assertFalse(termsEnum.seekExact(new BytesRef("fieldC")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldC")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,a,field,is,permitted,but,doesn,t,exist,in,the,segment;public,void,test,field,names,missing,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,false,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,c,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesMissing() throws Exception;1551278144;test _field_names where a field is permitted, but doesn't exist in the segment.;public void testFieldNamesMissing() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)___        _        TermsEnum termsEnum = terms.iterator()__        assertFalse(termsEnum.seekExact(new BytesRef("fieldC")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldC")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,a,field,is,permitted,but,doesn,t,exist,in,the,segment;public,void,test,field,names,missing,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,false,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,c,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testCoreCacheKey() throws Exception;1524684173;test that core cache key (needed for NRT) is working;public void testCoreCacheKey() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        iwc.setMaxBufferedDocs(100)__        iwc.setMergePolicy(NoMergePolicy.INSTANCE)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        Field idField = new StringField("id", "", Field.Store.NO)__        doc.add(idField)__        idField.setStringValue("0")__        iw.addDocument(doc)__        idField.setStringValue("1")__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("id")))__        assertEquals(2, ir.numDocs())__        assertEquals(1, ir.leaves().size())___        _        iw.deleteDocuments(new Term("id", "0"))__        DirectoryReader ir2 = DirectoryReader.openIfChanged(ir)__        _        _        assertEquals(1, ir2.numDocs())__        assertEquals(1, ir2.leaves().size())__        assertSame(ir.leaves().get(0).reader().getCoreCacheHelper().getKey(),_                ir2.leaves().get(0).reader().getCoreCacheHelper().getKey())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, ir2, iw, dir)__    };test,that,core,cache,key,needed,for,nrt,is,working;public,void,test,core,cache,key,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,iwc,set,max,buffered,docs,100,iwc,set,merge,policy,no,merge,policy,instance,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,id,field,new,string,field,id,field,store,no,doc,add,id,field,id,field,set,string,value,0,iw,add,document,doc,id,field,set,string,value,1,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,id,assert,equals,2,ir,num,docs,assert,equals,1,ir,leaves,size,iw,delete,documents,new,term,id,0,directory,reader,ir2,directory,reader,open,if,changed,ir,assert,equals,1,ir2,num,docs,assert,equals,1,ir2,leaves,size,assert,same,ir,leaves,get,0,reader,get,core,cache,helper,get,key,ir2,leaves,get,0,reader,get,core,cache,helper,get,key,test,util,check,reader,ir,ioutils,close,ir,ir2,iw,dir
FieldSubsetReaderTests -> public void testCoreCacheKey() throws Exception;1527096592;test that core cache key (needed for NRT) is working;public void testCoreCacheKey() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        iwc.setMaxBufferedDocs(100)__        iwc.setMergePolicy(NoMergePolicy.INSTANCE)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        Field idField = new StringField("id", "", Field.Store.NO)__        doc.add(idField)__        idField.setStringValue("0")__        iw.addDocument(doc)__        idField.setStringValue("1")__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("id")))__        assertEquals(2, ir.numDocs())__        assertEquals(1, ir.leaves().size())___        _        iw.deleteDocuments(new Term("id", "0"))__        DirectoryReader ir2 = DirectoryReader.openIfChanged(ir)__        _        _        assertEquals(1, ir2.numDocs())__        assertEquals(1, ir2.leaves().size())__        assertSame(ir.leaves().get(0).reader().getCoreCacheHelper().getKey(),_                ir2.leaves().get(0).reader().getCoreCacheHelper().getKey())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, ir2, iw, dir)__    };test,that,core,cache,key,needed,for,nrt,is,working;public,void,test,core,cache,key,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,iwc,set,max,buffered,docs,100,iwc,set,merge,policy,no,merge,policy,instance,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,id,field,new,string,field,id,field,store,no,doc,add,id,field,id,field,set,string,value,0,iw,add,document,doc,id,field,set,string,value,1,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,id,assert,equals,2,ir,num,docs,assert,equals,1,ir,leaves,size,iw,delete,documents,new,term,id,0,directory,reader,ir2,directory,reader,open,if,changed,ir,assert,equals,1,ir2,num,docs,assert,equals,1,ir2,leaves,size,assert,same,ir,leaves,get,0,reader,get,core,cache,helper,get,key,ir2,leaves,get,0,reader,get,core,cache,helper,get,key,test,util,check,reader,ir,ioutils,close,ir,ir2,iw,dir
FieldSubsetReaderTests -> public void testCoreCacheKey() throws Exception;1535965276;test that core cache key (needed for NRT) is working;public void testCoreCacheKey() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        iwc.setMaxBufferedDocs(100)__        iwc.setMergePolicy(NoMergePolicy.INSTANCE)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        Field idField = new StringField("id", "", Field.Store.NO)__        doc.add(idField)__        idField.setStringValue("0")__        iw.addDocument(doc)__        idField.setStringValue("1")__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("id")))__        assertEquals(2, ir.numDocs())__        assertEquals(1, ir.leaves().size())___        _        iw.deleteDocuments(new Term("id", "0"))__        DirectoryReader ir2 = DirectoryReader.openIfChanged(ir)___        _        assertEquals(1, ir2.numDocs())__        assertEquals(1, ir2.leaves().size())__        assertSame(ir.leaves().get(0).reader().getCoreCacheHelper().getKey(),_                ir2.leaves().get(0).reader().getCoreCacheHelper().getKey())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, ir2, iw, dir)__    };test,that,core,cache,key,needed,for,nrt,is,working;public,void,test,core,cache,key,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,iwc,set,max,buffered,docs,100,iwc,set,merge,policy,no,merge,policy,instance,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,id,field,new,string,field,id,field,store,no,doc,add,id,field,id,field,set,string,value,0,iw,add,document,doc,id,field,set,string,value,1,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,id,assert,equals,2,ir,num,docs,assert,equals,1,ir,leaves,size,iw,delete,documents,new,term,id,0,directory,reader,ir2,directory,reader,open,if,changed,ir,assert,equals,1,ir2,num,docs,assert,equals,1,ir2,leaves,size,assert,same,ir,leaves,get,0,reader,get,core,cache,helper,get,key,ir2,leaves,get,0,reader,get,core,cache,helper,get,key,test,util,check,reader,ir,ioutils,close,ir,ir2,iw,dir
FieldSubsetReaderTests -> public void testCoreCacheKey() throws Exception;1541501723;test that core cache key (needed for NRT) is working;public void testCoreCacheKey() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        iwc.setMaxBufferedDocs(100)__        iwc.setMergePolicy(NoMergePolicy.INSTANCE)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        Field idField = new StringField("id", "", Field.Store.NO)__        doc.add(idField)__        idField.setStringValue("0")__        iw.addDocument(doc)__        idField.setStringValue("1")__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("id")))__        assertEquals(2, ir.numDocs())__        assertEquals(1, ir.leaves().size())___        _        iw.deleteDocuments(new Term("id", "0"))__        DirectoryReader ir2 = DirectoryReader.openIfChanged(ir)___        _        assertEquals(1, ir2.numDocs())__        assertEquals(1, ir2.leaves().size())__        assertSame(ir.leaves().get(0).reader().getCoreCacheHelper().getKey(),_                ir2.leaves().get(0).reader().getCoreCacheHelper().getKey())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, ir2, iw, dir)__    };test,that,core,cache,key,needed,for,nrt,is,working;public,void,test,core,cache,key,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,iwc,set,max,buffered,docs,100,iwc,set,merge,policy,no,merge,policy,instance,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,id,field,new,string,field,id,field,store,no,doc,add,id,field,id,field,set,string,value,0,iw,add,document,doc,id,field,set,string,value,1,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,id,assert,equals,2,ir,num,docs,assert,equals,1,ir,leaves,size,iw,delete,documents,new,term,id,0,directory,reader,ir2,directory,reader,open,if,changed,ir,assert,equals,1,ir2,num,docs,assert,equals,1,ir2,leaves,size,assert,same,ir,leaves,get,0,reader,get,core,cache,helper,get,key,ir2,leaves,get,0,reader,get,core,cache,helper,get,key,test,util,check,reader,ir,ioutils,close,ir,ir2,iw,dir
FieldSubsetReaderTests -> public void testCoreCacheKey() throws Exception;1551278144;test that core cache key (needed for NRT) is working;public void testCoreCacheKey() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        iwc.setMaxBufferedDocs(100)__        iwc.setMergePolicy(NoMergePolicy.INSTANCE)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        Field idField = new StringField("id", "", Field.Store.NO)__        doc.add(idField)__        idField.setStringValue("0")__        iw.addDocument(doc)__        idField.setStringValue("1")__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("id")))__        assertEquals(2, ir.numDocs())__        assertEquals(1, ir.leaves().size())___        _        iw.deleteDocuments(new Term("id", "0"))__        DirectoryReader ir2 = DirectoryReader.openIfChanged(ir)___        _        assertEquals(1, ir2.numDocs())__        assertEquals(1, ir2.leaves().size())__        assertSame(ir.leaves().get(0).reader().getCoreCacheHelper().getKey(),_                ir2.leaves().get(0).reader().getCoreCacheHelper().getKey())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, ir2, iw, dir)__    };test,that,core,cache,key,needed,for,nrt,is,working;public,void,test,core,cache,key,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,iwc,set,max,buffered,docs,100,iwc,set,merge,policy,no,merge,policy,instance,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,id,field,new,string,field,id,field,store,no,doc,add,id,field,id,field,set,string,value,0,iw,add,document,doc,id,field,set,string,value,1,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,id,assert,equals,2,ir,num,docs,assert,equals,1,ir,leaves,size,iw,delete,documents,new,term,id,0,directory,reader,ir2,directory,reader,open,if,changed,ir,assert,equals,1,ir2,num,docs,assert,equals,1,ir2,leaves,size,assert,same,ir,leaves,get,0,reader,get,core,cache,helper,get,key,ir2,leaves,get,0,reader,get,core,cache,helper,get,key,test,util,check,reader,ir,ioutils,close,ir,ir2,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsInt() throws Exception;1524684173;test filtering two stored fields (int);public void testStoredFieldsInt() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1))__        doc.add(new StoredField("fieldB", 2))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,int;public,void,test,stored,fields,int,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1,doc,add,new,stored,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsInt() throws Exception;1527096592;test filtering two stored fields (int);public void testStoredFieldsInt() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1))__        doc.add(new StoredField("fieldB", 2))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,int;public,void,test,stored,fields,int,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1,doc,add,new,stored,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsInt() throws Exception;1535965276;test filtering two stored fields (int);public void testStoredFieldsInt() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1))__        doc.add(new StoredField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,int;public,void,test,stored,fields,int,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1,doc,add,new,stored,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsInt() throws Exception;1541501723;test filtering two stored fields (int);public void testStoredFieldsInt() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1))__        doc.add(new StoredField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,int;public,void,test,stored,fields,int,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1,doc,add,new,stored,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsInt() throws Exception;1551278144;test filtering two stored fields (int);public void testStoredFieldsInt() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1))__        doc.add(new StoredField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,int;public,void,test,stored,fields,int,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1,doc,add,new,stored,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFilterAwayAllVectors() throws Exception;1524684173;test filtering the only vector fields;public void testFilterAwayAllVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))_ _        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldB")))__        _        _        assertNull(ir.getTermVectors(0))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,the,only,vector,fields;public,void,test,filter,away,all,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,string,field,field,b,test,b,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,b,assert,null,ir,get,term,vectors,0,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFilterAwayAllVectors() throws Exception;1527096592;test filtering the only vector fields;public void testFilterAwayAllVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))_ _        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldB")))__        _        _        assertNull(ir.getTermVectors(0))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,the,only,vector,fields;public,void,test,filter,away,all,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,string,field,field,b,test,b,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,b,assert,null,ir,get,term,vectors,0,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFilterAwayAllVectors() throws Exception;1535965276;test filtering the only vector fields;public void testFilterAwayAllVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))_ _        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldB")))___        _        assertNull(ir.getTermVectors(0))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,the,only,vector,fields;public,void,test,filter,away,all,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,string,field,field,b,test,b,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,b,assert,null,ir,get,term,vectors,0,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFilterAwayAllVectors() throws Exception;1541501723;test filtering the only vector fields;public void testFilterAwayAllVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))_ _        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldB")))___        _        assertNull(ir.getTermVectors(0))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,the,only,vector,fields;public,void,test,filter,away,all,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,string,field,field,b,test,b,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,b,assert,null,ir,get,term,vectors,0,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFilterAwayAllVectors() throws Exception;1551278144;test filtering the only vector fields;public void testFilterAwayAllVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))_ _        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldB")))___        _        assertNull(ir.getTermVectors(0))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,the,only,vector,fields;public,void,test,filter,away,all,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,string,field,field,b,test,b,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,b,assert,null,ir,get,term,vectors,0,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testPoints() throws Exception;1524684173;test filtering two int points;public void testPoints() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new IntPoint("fieldA", 1))__        doc.add(new IntPoint("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        PointValues points = segmentReader.getPointValues("fieldA")__        assertNull(segmentReader.getPointValues("fieldB"))___        _        assertEquals(1, points.size())___        _        assertEquals(1, points.getDocCount())___        _        assertNotNull(points.getMinPackedValue())___        _        assertNotNull(points.getMaxPackedValue())___        _        assertEquals(Integer.BYTES, points.getBytesPerDimension())___        _        assertEquals(1, points.getNumDimensions())___        _        AtomicBoolean sawDoc = new AtomicBoolean(false)__        points.intersect(new IntersectVisitor() {_            @Override_            public void visit(int docID) throws IOException {_                throw new IllegalStateException("should not get here")__            }__            @Override_            public void visit(int docID, byte[] packedValue) throws IOException {_                sawDoc.set(true)__            }__            @Override_            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {_                return Relation.CELL_CROSSES_QUERY__            }_        })__        assertTrue(sawDoc.get())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,int,points;public,void,test,points,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,int,point,field,a,1,doc,add,new,int,point,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,point,values,points,segment,reader,get,point,values,field,a,assert,null,segment,reader,get,point,values,field,b,assert,equals,1,points,size,assert,equals,1,points,get,doc,count,assert,not,null,points,get,min,packed,value,assert,not,null,points,get,max,packed,value,assert,equals,integer,bytes,points,get,bytes,per,dimension,assert,equals,1,points,get,num,dimensions,atomic,boolean,saw,doc,new,atomic,boolean,false,points,intersect,new,intersect,visitor,override,public,void,visit,int,doc,id,throws,ioexception,throw,new,illegal,state,exception,should,not,get,here,override,public,void,visit,int,doc,id,byte,packed,value,throws,ioexception,saw,doc,set,true,override,public,relation,compare,byte,min,packed,value,byte,max,packed,value,return,relation,assert,true,saw,doc,get,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testPoints() throws Exception;1527096592;test filtering two int points;public void testPoints() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new IntPoint("fieldA", 1))__        doc.add(new IntPoint("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        PointValues points = segmentReader.getPointValues("fieldA")__        assertNull(segmentReader.getPointValues("fieldB"))___        _        assertEquals(1, points.size())___        _        assertEquals(1, points.getDocCount())___        _        assertNotNull(points.getMinPackedValue())___        _        assertNotNull(points.getMaxPackedValue())___        _        assertEquals(Integer.BYTES, points.getBytesPerDimension())___        _        assertEquals(1, points.getNumDimensions())___        _        AtomicBoolean sawDoc = new AtomicBoolean(false)__        points.intersect(new IntersectVisitor() {_            @Override_            public void visit(int docID) throws IOException {_                throw new IllegalStateException("should not get here")__            }__            @Override_            public void visit(int docID, byte[] packedValue) throws IOException {_                sawDoc.set(true)__            }__            @Override_            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {_                return Relation.CELL_CROSSES_QUERY__            }_        })__        assertTrue(sawDoc.get())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,int,points;public,void,test,points,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,int,point,field,a,1,doc,add,new,int,point,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,point,values,points,segment,reader,get,point,values,field,a,assert,null,segment,reader,get,point,values,field,b,assert,equals,1,points,size,assert,equals,1,points,get,doc,count,assert,not,null,points,get,min,packed,value,assert,not,null,points,get,max,packed,value,assert,equals,integer,bytes,points,get,bytes,per,dimension,assert,equals,1,points,get,num,dimensions,atomic,boolean,saw,doc,new,atomic,boolean,false,points,intersect,new,intersect,visitor,override,public,void,visit,int,doc,id,throws,ioexception,throw,new,illegal,state,exception,should,not,get,here,override,public,void,visit,int,doc,id,byte,packed,value,throws,ioexception,saw,doc,set,true,override,public,relation,compare,byte,min,packed,value,byte,max,packed,value,return,relation,assert,true,saw,doc,get,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testPoints() throws Exception;1535965276;test filtering two int points;public void testPoints() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new IntPoint("fieldA", 1))__        doc.add(new IntPoint("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        PointValues points = segmentReader.getPointValues("fieldA")__        assertNull(segmentReader.getPointValues("fieldB"))___        _        assertEquals(1, points.size())___        _        assertEquals(1, points.getDocCount())___        _        assertNotNull(points.getMinPackedValue())___        _        assertNotNull(points.getMaxPackedValue())___        _        assertEquals(Integer.BYTES, points.getBytesPerDimension())___        _        assertEquals(1, points.getNumDimensions())___        _        AtomicBoolean sawDoc = new AtomicBoolean(false)__        points.intersect(new IntersectVisitor() {_            @Override_            public void visit(int docID) throws IOException {_                throw new IllegalStateException("should not get here")__            }__            @Override_            public void visit(int docID, byte[] packedValue) throws IOException {_                sawDoc.set(true)__            }__            @Override_            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {_                return Relation.CELL_CROSSES_QUERY__            }_        })__        assertTrue(sawDoc.get())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,int,points;public,void,test,points,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,int,point,field,a,1,doc,add,new,int,point,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,point,values,points,segment,reader,get,point,values,field,a,assert,null,segment,reader,get,point,values,field,b,assert,equals,1,points,size,assert,equals,1,points,get,doc,count,assert,not,null,points,get,min,packed,value,assert,not,null,points,get,max,packed,value,assert,equals,integer,bytes,points,get,bytes,per,dimension,assert,equals,1,points,get,num,dimensions,atomic,boolean,saw,doc,new,atomic,boolean,false,points,intersect,new,intersect,visitor,override,public,void,visit,int,doc,id,throws,ioexception,throw,new,illegal,state,exception,should,not,get,here,override,public,void,visit,int,doc,id,byte,packed,value,throws,ioexception,saw,doc,set,true,override,public,relation,compare,byte,min,packed,value,byte,max,packed,value,return,relation,assert,true,saw,doc,get,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testPoints() throws Exception;1541501723;test filtering two int points;public void testPoints() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new IntPoint("fieldA", 1))__        doc.add(new IntPoint("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        PointValues points = segmentReader.getPointValues("fieldA")__        assertNull(segmentReader.getPointValues("fieldB"))___        _        assertEquals(1, points.size())___        _        assertEquals(1, points.getDocCount())___        _        assertNotNull(points.getMinPackedValue())___        _        assertNotNull(points.getMaxPackedValue())___        _        assertEquals(Integer.BYTES, points.getBytesPerDimension())___        _        assertEquals(1, points.getNumIndexDimensions())___        _        AtomicBoolean sawDoc = new AtomicBoolean(false)__        points.intersect(new IntersectVisitor() {_            @Override_            public void visit(int docID) throws IOException {_                throw new IllegalStateException("should not get here")__            }__            @Override_            public void visit(int docID, byte[] packedValue) throws IOException {_                sawDoc.set(true)__            }__            @Override_            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {_                return Relation.CELL_CROSSES_QUERY__            }_        })__        assertTrue(sawDoc.get())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,int,points;public,void,test,points,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,int,point,field,a,1,doc,add,new,int,point,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,point,values,points,segment,reader,get,point,values,field,a,assert,null,segment,reader,get,point,values,field,b,assert,equals,1,points,size,assert,equals,1,points,get,doc,count,assert,not,null,points,get,min,packed,value,assert,not,null,points,get,max,packed,value,assert,equals,integer,bytes,points,get,bytes,per,dimension,assert,equals,1,points,get,num,index,dimensions,atomic,boolean,saw,doc,new,atomic,boolean,false,points,intersect,new,intersect,visitor,override,public,void,visit,int,doc,id,throws,ioexception,throw,new,illegal,state,exception,should,not,get,here,override,public,void,visit,int,doc,id,byte,packed,value,throws,ioexception,saw,doc,set,true,override,public,relation,compare,byte,min,packed,value,byte,max,packed,value,return,relation,assert,true,saw,doc,get,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testPoints() throws Exception;1551278144;test filtering two int points;public void testPoints() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new IntPoint("fieldA", 1))__        doc.add(new IntPoint("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        PointValues points = segmentReader.getPointValues("fieldA")__        assertNull(segmentReader.getPointValues("fieldB"))___        _        assertEquals(1, points.size())___        _        assertEquals(1, points.getDocCount())___        _        assertNotNull(points.getMinPackedValue())___        _        assertNotNull(points.getMaxPackedValue())___        _        assertEquals(Integer.BYTES, points.getBytesPerDimension())___        _        assertEquals(1, points.getNumIndexDimensions())___        _        AtomicBoolean sawDoc = new AtomicBoolean(false)__        points.intersect(new IntersectVisitor() {_            @Override_            public void visit(int docID) throws IOException {_                throw new IllegalStateException("should not get here")__            }__            @Override_            public void visit(int docID, byte[] packedValue) throws IOException {_                sawDoc.set(true)__            }__            @Override_            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {_                return Relation.CELL_CROSSES_QUERY__            }_        })__        assertTrue(sawDoc.get())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,int,points;public,void,test,points,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,int,point,field,a,1,doc,add,new,int,point,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,point,values,points,segment,reader,get,point,values,field,a,assert,null,segment,reader,get,point,values,field,b,assert,equals,1,points,size,assert,equals,1,points,get,doc,count,assert,not,null,points,get,min,packed,value,assert,not,null,points,get,max,packed,value,assert,equals,integer,bytes,points,get,bytes,per,dimension,assert,equals,1,points,get,num,index,dimensions,atomic,boolean,saw,doc,new,atomic,boolean,false,points,intersect,new,intersect,visitor,override,public,void,visit,int,doc,id,throws,ioexception,throw,new,illegal,state,exception,should,not,get,here,override,public,void,visit,int,doc,id,byte,packed,value,throws,ioexception,saw,doc,set,true,override,public,relation,compare,byte,min,packed,value,byte,max,packed,value,return,relation,assert,true,saw,doc,get,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedDocValues() throws Exception;1524684173;test filtering two sorted dv fields;public void testSortedDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new SortedDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedDocValues values = segmentReader.getSortedDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getSortedDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sorted,dv,fields;public,void,test,sorted,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,doc,values,values,segment,reader,get,sorted,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,sorted,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedDocValues() throws Exception;1527096592;test filtering two sorted dv fields;public void testSortedDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new SortedDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedDocValues values = segmentReader.getSortedDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getSortedDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sorted,dv,fields;public,void,test,sorted,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,doc,values,values,segment,reader,get,sorted,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,sorted,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedDocValues() throws Exception;1535965276;test filtering two sorted dv fields;public void testSortedDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedDocValues values = segmentReader.getSortedDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getSortedDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sorted,dv,fields;public,void,test,sorted,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,doc,values,values,segment,reader,get,sorted,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,sorted,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedDocValues() throws Exception;1541501723;test filtering two sorted dv fields;public void testSortedDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedDocValues values = segmentReader.getSortedDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getSortedDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sorted,dv,fields;public,void,test,sorted,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,doc,values,values,segment,reader,get,sorted,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,sorted,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedDocValues() throws Exception;1551278144;test filtering two sorted dv fields;public void testSortedDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedDocValues values = segmentReader.getSortedDocValues("fieldA")__        assertNotNull(values)__        assertTrue(values.advanceExact(0))__        assertEquals(new BytesRef("testA"), values.binaryValue())__        assertNull(segmentReader.getSortedDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sorted,dv,fields;public,void,test,sorted,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,doc,values,values,segment,reader,get,sorted,doc,values,field,a,assert,not,null,values,assert,true,values,advance,exact,0,assert,equals,new,bytes,ref,test,a,values,binary,value,assert,null,segment,reader,get,sorted,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSourceFilteringIntegration() throws Exception;1524684173;test special handling for _source field.;public void testSourceFilteringIntegration() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "testA", Field.Store.NO))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))__        byte bytes[] = "{\"fieldA\":\"testA\", \"fieldB\":\"testB\"}".getBytes(StandardCharsets.UTF_8)__        doc.add(new StoredField(SourceFieldMapper.NAME, bytes, 0, bytes.length))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("{\"fieldA\":\"testA\"}", d2.getBinaryValue(SourceFieldMapper.NAME).utf8ToString())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,source,filtering,integration,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,a,field,store,no,doc,add,new,string,field,field,b,test,b,field,store,no,byte,bytes,field,a,test,a,field,b,test,b,get,bytes,standard,charsets,doc,add,new,stored,field,source,field,mapper,name,bytes,0,bytes,length,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,field,a,test,a,d2,get,binary,value,source,field,mapper,name,utf8to,string,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSourceFilteringIntegration() throws Exception;1527096592;test special handling for _source field.;public void testSourceFilteringIntegration() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "testA", Field.Store.NO))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))__        byte bytes[] = "{\"fieldA\":\"testA\", \"fieldB\":\"testB\"}".getBytes(StandardCharsets.UTF_8)__        doc.add(new StoredField(SourceFieldMapper.NAME, bytes, 0, bytes.length))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("{\"fieldA\":\"testA\"}", d2.getBinaryValue(SourceFieldMapper.NAME).utf8ToString())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,source,filtering,integration,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,a,field,store,no,doc,add,new,string,field,field,b,test,b,field,store,no,byte,bytes,field,a,test,a,field,b,test,b,get,bytes,standard,charsets,doc,add,new,stored,field,source,field,mapper,name,bytes,0,bytes,length,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,field,a,test,a,d2,get,binary,value,source,field,mapper,name,utf8to,string,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSourceFilteringIntegration() throws Exception;1535965276;test special handling for _source field.;public void testSourceFilteringIntegration() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "testA", Field.Store.NO))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))__        byte bytes[] = "{\"fieldA\":\"testA\", \"fieldB\":\"testB\"}".getBytes(StandardCharsets.UTF_8)__        doc.add(new StoredField(SourceFieldMapper.NAME, bytes, 0, bytes.length))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("{\"fieldA\":\"testA\"}", d2.getBinaryValue(SourceFieldMapper.NAME).utf8ToString())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,source,filtering,integration,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,a,field,store,no,doc,add,new,string,field,field,b,test,b,field,store,no,byte,bytes,field,a,test,a,field,b,test,b,get,bytes,standard,charsets,doc,add,new,stored,field,source,field,mapper,name,bytes,0,bytes,length,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,field,a,test,a,d2,get,binary,value,source,field,mapper,name,utf8to,string,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSourceFilteringIntegration() throws Exception;1541501723;test special handling for _source field.;public void testSourceFilteringIntegration() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "testA", Field.Store.NO))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))__        byte bytes[] = "{\"fieldA\":\"testA\", \"fieldB\":\"testB\"}".getBytes(StandardCharsets.UTF_8)__        doc.add(new StoredField(SourceFieldMapper.NAME, bytes, 0, bytes.length))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("{\"fieldA\":\"testA\"}", d2.getBinaryValue(SourceFieldMapper.NAME).utf8ToString())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,source,filtering,integration,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,a,field,store,no,doc,add,new,string,field,field,b,test,b,field,store,no,byte,bytes,field,a,test,a,field,b,test,b,get,bytes,standard,charsets,doc,add,new,stored,field,source,field,mapper,name,bytes,0,bytes,length,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,field,a,test,a,d2,get,binary,value,source,field,mapper,name,utf8to,string,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSourceFilteringIntegration() throws Exception;1551278144;test special handling for _source field.;public void testSourceFilteringIntegration() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "testA", Field.Store.NO))__        doc.add(new StringField("fieldB", "testB", Field.Store.NO))__        byte bytes[] = "{\"fieldA\":\"testA\", \"fieldB\":\"testB\"}".getBytes(StandardCharsets.UTF_8)__        doc.add(new StoredField(SourceFieldMapper.NAME, bytes, 0, bytes.length))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals("{\"fieldA\":\"testA\"}", d2.getBinaryValue(SourceFieldMapper.NAME).utf8ToString())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field;public,void,test,source,filtering,integration,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,a,field,store,no,doc,add,new,string,field,field,b,test,b,field,store,no,byte,bytes,field,a,test,a,field,b,test,b,get,bytes,standard,charsets,doc,add,new,stored,field,source,field,mapper,name,bytes,0,bytes,length,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,field,a,test,a,d2,get,binary,value,source,field,mapper,name,utf8to,string,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedNumericDocValues() throws Exception;1524684173;test filtering two sortednumeric dv fields;public void testSortedNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new SortedNumericDocValuesField("fieldA", 1))__        doc.add(new SortedNumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedNumericDocValues dv = segmentReader.getSortedNumericDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(1, dv.docValueCount())__        assertEquals(1, dv.nextValue())__        assertNull(segmentReader.getSortedNumericDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortednumeric,dv,fields;public,void,test,sorted,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,numeric,doc,values,field,field,a,1,doc,add,new,sorted,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,numeric,doc,values,dv,segment,reader,get,sorted,numeric,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,1,dv,doc,value,count,assert,equals,1,dv,next,value,assert,null,segment,reader,get,sorted,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedNumericDocValues() throws Exception;1527096592;test filtering two sortednumeric dv fields;public void testSortedNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new SortedNumericDocValuesField("fieldA", 1))__        doc.add(new SortedNumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedNumericDocValues dv = segmentReader.getSortedNumericDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(1, dv.docValueCount())__        assertEquals(1, dv.nextValue())__        assertNull(segmentReader.getSortedNumericDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortednumeric,dv,fields;public,void,test,sorted,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,numeric,doc,values,field,field,a,1,doc,add,new,sorted,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,numeric,doc,values,dv,segment,reader,get,sorted,numeric,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,1,dv,doc,value,count,assert,equals,1,dv,next,value,assert,null,segment,reader,get,sorted,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedNumericDocValues() throws Exception;1535965276;test filtering two sortednumeric dv fields;public void testSortedNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedNumericDocValuesField("fieldA", 1))__        doc.add(new SortedNumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedNumericDocValues dv = segmentReader.getSortedNumericDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(1, dv.docValueCount())__        assertEquals(1, dv.nextValue())__        assertNull(segmentReader.getSortedNumericDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortednumeric,dv,fields;public,void,test,sorted,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,numeric,doc,values,field,field,a,1,doc,add,new,sorted,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,numeric,doc,values,dv,segment,reader,get,sorted,numeric,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,1,dv,doc,value,count,assert,equals,1,dv,next,value,assert,null,segment,reader,get,sorted,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedNumericDocValues() throws Exception;1541501723;test filtering two sortednumeric dv fields;public void testSortedNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedNumericDocValuesField("fieldA", 1))__        doc.add(new SortedNumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedNumericDocValues dv = segmentReader.getSortedNumericDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(1, dv.docValueCount())__        assertEquals(1, dv.nextValue())__        assertNull(segmentReader.getSortedNumericDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortednumeric,dv,fields;public,void,test,sorted,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,numeric,doc,values,field,field,a,1,doc,add,new,sorted,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,numeric,doc,values,dv,segment,reader,get,sorted,numeric,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,1,dv,doc,value,count,assert,equals,1,dv,next,value,assert,null,segment,reader,get,sorted,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedNumericDocValues() throws Exception;1551278144;test filtering two sortednumeric dv fields;public void testSortedNumericDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedNumericDocValuesField("fieldA", 1))__        doc.add(new SortedNumericDocValuesField("fieldB", 2))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedNumericDocValues dv = segmentReader.getSortedNumericDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(1, dv.docValueCount())__        assertEquals(1, dv.nextValue())__        assertNull(segmentReader.getSortedNumericDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortednumeric,dv,fields;public,void,test,sorted,numeric,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,numeric,doc,values,field,field,a,1,doc,add,new,sorted,numeric,doc,values,field,field,b,2,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,numeric,doc,values,dv,segment,reader,get,sorted,numeric,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,1,dv,doc,value,count,assert,equals,1,dv,next,value,assert,null,segment,reader,get,sorted,numeric,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsLong() throws Exception;1524684173;test filtering two stored fields (long);public void testStoredFieldsLong() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1L))__        doc.add(new StoredField("fieldB", 2L))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1L, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,long;public,void,test,stored,fields,long,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1l,doc,add,new,stored,field,field,b,2l,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1l,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsLong() throws Exception;1527096592;test filtering two stored fields (long);public void testStoredFieldsLong() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1L))__        doc.add(new StoredField("fieldB", 2L))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1L, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,long;public,void,test,stored,fields,long,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1l,doc,add,new,stored,field,field,b,2l,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1l,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsLong() throws Exception;1535965276;test filtering two stored fields (long);public void testStoredFieldsLong() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1L))__        doc.add(new StoredField("fieldB", 2L))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1L, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,long;public,void,test,stored,fields,long,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1l,doc,add,new,stored,field,field,b,2l,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1l,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsLong() throws Exception;1541501723;test filtering two stored fields (long);public void testStoredFieldsLong() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1L))__        doc.add(new StoredField("fieldB", 2L))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1L, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,long;public,void,test,stored,fields,long,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1l,doc,add,new,stored,field,field,b,2l,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1l,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsLong() throws Exception;1551278144;test filtering two stored fields (long);public void testStoredFieldsLong() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1L))__        doc.add(new StoredField("fieldB", 2L))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1L, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,long;public,void,test,stored,fields,long,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1l,doc,add,new,stored,field,field,b,2l,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1l,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsFloat() throws Exception;1524684173;test filtering two stored fields (float);public void testStoredFieldsFloat() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1F))__        doc.add(new StoredField("fieldB", 2F))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1F, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,float;public,void,test,stored,fields,float,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1f,doc,add,new,stored,field,field,b,2f,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1f,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsFloat() throws Exception;1527096592;test filtering two stored fields (float);public void testStoredFieldsFloat() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1F))__        doc.add(new StoredField("fieldB", 2F))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1F, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,float;public,void,test,stored,fields,float,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1f,doc,add,new,stored,field,field,b,2f,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1f,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsFloat() throws Exception;1535965276;test filtering two stored fields (float);public void testStoredFieldsFloat() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1F))__        doc.add(new StoredField("fieldB", 2F))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1F, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,float;public,void,test,stored,fields,float,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1f,doc,add,new,stored,field,field,b,2f,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1f,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsFloat() throws Exception;1541501723;test filtering two stored fields (float);public void testStoredFieldsFloat() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1F))__        doc.add(new StoredField("fieldB", 2F))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1F, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,float;public,void,test,stored,fields,float,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1f,doc,add,new,stored,field,field,b,2f,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1f,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsFloat() throws Exception;1551278144;test filtering two stored fields (float);public void testStoredFieldsFloat() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1F))__        doc.add(new StoredField("fieldB", 2F))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1F, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,float;public,void,test,stored,fields,float,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1f,doc,add,new,stored,field,field,b,2f,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1f,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testVectors() throws Exception;1524684173;test filtering two vector fields;public void testVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new Field("fieldB", "testB", ft))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Fields vectors = ir.getTermVectors(0)__        Set<String> seenFields = new HashSet<>()__        for (String field : vectors) {_            seenFields.add(field)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,vector,fields;public,void,test,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,field,field,b,test,b,ft,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,fields,vectors,ir,get,term,vectors,0,set,string,seen,fields,new,hash,set,for,string,field,vectors,seen,fields,add,field,assert,equals,collections,singleton,field,a,seen,fields,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testVectors() throws Exception;1527096592;test filtering two vector fields;public void testVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new Field("fieldB", "testB", ft))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Fields vectors = ir.getTermVectors(0)__        Set<String> seenFields = new HashSet<>()__        for (String field : vectors) {_            seenFields.add(field)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,vector,fields;public,void,test,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,field,field,b,test,b,ft,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,fields,vectors,ir,get,term,vectors,0,set,string,seen,fields,new,hash,set,for,string,field,vectors,seen,fields,add,field,assert,equals,collections,singleton,field,a,seen,fields,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testVectors() throws Exception;1535965276;test filtering two vector fields;public void testVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new Field("fieldB", "testB", ft))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Fields vectors = ir.getTermVectors(0)__        Set<String> seenFields = new HashSet<>()__        for (String field : vectors) {_            seenFields.add(field)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,vector,fields;public,void,test,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,field,field,b,test,b,ft,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,fields,vectors,ir,get,term,vectors,0,set,string,seen,fields,new,hash,set,for,string,field,vectors,seen,fields,add,field,assert,equals,collections,singleton,field,a,seen,fields,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testVectors() throws Exception;1541501723;test filtering two vector fields;public void testVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new Field("fieldB", "testB", ft))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Fields vectors = ir.getTermVectors(0)__        Set<String> seenFields = new HashSet<>()__        for (String field : vectors) {_            seenFields.add(field)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,vector,fields;public,void,test,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,field,field,b,test,b,ft,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,fields,vectors,ir,get,term,vectors,0,set,string,seen,fields,new,hash,set,for,string,field,vectors,seen,fields,add,field,assert,equals,collections,singleton,field,a,seen,fields,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testVectors() throws Exception;1551278144;test filtering two vector fields;public void testVectors() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        FieldType ft = new FieldType(StringField.TYPE_NOT_STORED)__        ft.setStoreTermVectors(true)__        doc.add(new Field("fieldA", "testA", ft))__        doc.add(new Field("fieldB", "testB", ft))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Fields vectors = ir.getTermVectors(0)__        Set<String> seenFields = new HashSet<>()__        for (String field : vectors) {_            seenFields.add(field)__        }_        assertEquals(Collections.singleton("fieldA"), seenFields)___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,vector,fields;public,void,test,vectors,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,field,type,ft,new,field,type,string,field,ft,set,store,term,vectors,true,doc,add,new,field,field,a,test,a,ft,doc,add,new,field,field,b,test,b,ft,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,fields,vectors,ir,get,term,vectors,0,set,string,seen,fields,new,hash,set,for,string,field,vectors,seen,fields,add,field,assert,equals,collections,singleton,field,a,seen,fields,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsBinary() throws Exception;1524684173;test filtering two stored fields (binary);public void testStoredFieldsBinary() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", new BytesRef("testA")))__        doc.add(new StoredField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(new BytesRef("testA"), d2.getBinaryValue("fieldA"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,binary;public,void,test,stored,fields,binary,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,new,bytes,ref,test,a,doc,add,new,stored,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,new,bytes,ref,test,a,d2,get,binary,value,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsBinary() throws Exception;1527096592;test filtering two stored fields (binary);public void testStoredFieldsBinary() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", new BytesRef("testA")))__        doc.add(new StoredField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(new BytesRef("testA"), d2.getBinaryValue("fieldA"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,binary;public,void,test,stored,fields,binary,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,new,bytes,ref,test,a,doc,add,new,stored,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,new,bytes,ref,test,a,d2,get,binary,value,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsBinary() throws Exception;1535965276;test filtering two stored fields (binary);public void testStoredFieldsBinary() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", new BytesRef("testA")))__        doc.add(new StoredField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(new BytesRef("testA"), d2.getBinaryValue("fieldA"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,binary;public,void,test,stored,fields,binary,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,new,bytes,ref,test,a,doc,add,new,stored,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,new,bytes,ref,test,a,d2,get,binary,value,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsBinary() throws Exception;1541501723;test filtering two stored fields (binary);public void testStoredFieldsBinary() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", new BytesRef("testA")))__        doc.add(new StoredField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(new BytesRef("testA"), d2.getBinaryValue("fieldA"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,binary;public,void,test,stored,fields,binary,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,new,bytes,ref,test,a,doc,add,new,stored,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,new,bytes,ref,test,a,d2,get,binary,value,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsBinary() throws Exception;1551278144;test filtering two stored fields (binary);public void testStoredFieldsBinary() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", new BytesRef("testA")))__        doc.add(new StoredField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(new BytesRef("testA"), d2.getBinaryValue("fieldA"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,binary;public,void,test,stored,fields,binary,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,new,bytes,ref,test,a,doc,add,new,stored,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,new,bytes,ref,test,a,d2,get,binary,value,field,a,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsDouble() throws Exception;1524684173;test filtering two stored fields (double);public void testStoredFieldsDouble() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1D))__        doc.add(new StoredField("fieldB", 2D))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1D, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,double;public,void,test,stored,fields,double,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1d,doc,add,new,stored,field,field,b,2d,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1d,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsDouble() throws Exception;1527096592;test filtering two stored fields (double);public void testStoredFieldsDouble() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1D))__        doc.add(new StoredField("fieldB", 2D))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1D, d2.getField("fieldA").numericValue())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,double;public,void,test,stored,fields,double,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1d,doc,add,new,stored,field,field,b,2d,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1d,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsDouble() throws Exception;1535965276;test filtering two stored fields (double);public void testStoredFieldsDouble() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1D))__        doc.add(new StoredField("fieldB", 2D))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1D, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,double;public,void,test,stored,fields,double,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1d,doc,add,new,stored,field,field,b,2d,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1d,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsDouble() throws Exception;1541501723;test filtering two stored fields (double);public void testStoredFieldsDouble() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1D))__        doc.add(new StoredField("fieldB", 2D))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1D, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,double;public,void,test,stored,fields,double,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1d,doc,add,new,stored,field,field,b,2d,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1d,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testStoredFieldsDouble() throws Exception;1551278144;test filtering two stored fields (double);public void testStoredFieldsDouble() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StoredField("fieldA", 1D))__        doc.add(new StoredField("fieldB", 2D))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        Document d2 = ir.document(0)__        assertEquals(1, d2.getFields().size())__        assertEquals(1D, d2.getField("fieldA").numericValue())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,stored,fields,double;public,void,test,stored,fields,double,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,stored,field,field,a,1d,doc,add,new,stored,field,field,b,2d,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,document,d2,ir,document,0,assert,equals,1,d2,get,fields,size,assert,equals,1d,d2,get,field,field,a,numeric,value,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldInfos() throws Exception;1524684173;test we have correct fieldinfos metadata;public void testFieldInfos() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        FieldInfos infos = segmentReader.getFieldInfos()__        assertEquals(1, infos.size())__        assertNotNull(infos.fieldInfo("fieldA"))__        assertNull(infos.fieldInfo("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,we,have,correct,fieldinfos,metadata;public,void,test,field,infos,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,field,infos,infos,segment,reader,get,field,infos,assert,equals,1,infos,size,assert,not,null,infos,field,info,field,a,assert,null,infos,field,info,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldInfos() throws Exception;1527096592;test we have correct fieldinfos metadata;public void testFieldInfos() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        FieldInfos infos = segmentReader.getFieldInfos()__        assertEquals(1, infos.size())__        assertNotNull(infos.fieldInfo("fieldA"))__        assertNull(infos.fieldInfo("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,we,have,correct,fieldinfos,metadata;public,void,test,field,infos,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,field,infos,infos,segment,reader,get,field,infos,assert,equals,1,infos,size,assert,not,null,infos,field,info,field,a,assert,null,infos,field,info,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldInfos() throws Exception;1535965276;test we have correct fieldinfos metadata;public void testFieldInfos() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        FieldInfos infos = segmentReader.getFieldInfos()__        assertEquals(1, infos.size())__        assertNotNull(infos.fieldInfo("fieldA"))__        assertNull(infos.fieldInfo("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,we,have,correct,fieldinfos,metadata;public,void,test,field,infos,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,field,infos,infos,segment,reader,get,field,infos,assert,equals,1,infos,size,assert,not,null,infos,field,info,field,a,assert,null,infos,field,info,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldInfos() throws Exception;1541501723;test we have correct fieldinfos metadata;public void testFieldInfos() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        FieldInfos infos = segmentReader.getFieldInfos()__        assertEquals(1, infos.size())__        assertNotNull(infos.fieldInfo("fieldA"))__        assertNull(infos.fieldInfo("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,we,have,correct,fieldinfos,metadata;public,void,test,field,infos,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,field,infos,infos,segment,reader,get,field,infos,assert,equals,1,infos,size,assert,not,null,infos,field,info,field,a,assert,null,infos,field,info,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldInfos() throws Exception;1551278144;test we have correct fieldinfos metadata;public void testFieldInfos() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        FieldInfos infos = segmentReader.getFieldInfos()__        assertEquals(1, infos.size())__        assertNotNull(infos.fieldInfo("fieldA"))__        assertNull(infos.fieldInfo("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,we,have,correct,fieldinfos,metadata;public,void,test,field,infos,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,field,infos,infos,segment,reader,get,field,infos,assert,equals,1,infos,size,assert,not,null,infos,field,info,field,a,assert,null,infos,field,info,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testEmpty() throws Exception;1524684173;test filtering an index with no fields;public void testEmpty() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        iw.addDocument(new Document())__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(0, seenFields.size())__        assertNull(segmentReader.terms("foo"))__        _        _        assertNull(segmentReader.getTermVectors(0))__        _        _        Document document = segmentReader.document(0)__        assertEquals(0, document.getFields().size())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,an,index,with,no,fields;public,void,test,empty,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,iw,add,document,new,document,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,0,seen,fields,size,assert,null,segment,reader,terms,foo,assert,null,segment,reader,get,term,vectors,0,document,document,segment,reader,document,0,assert,equals,0,document,get,fields,size,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testEmpty() throws Exception;1527096592;test filtering an index with no fields;public void testEmpty() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        iw.addDocument(new Document())__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(0, seenFields.size())__        assertNull(segmentReader.terms("foo"))__        _        _        assertNull(segmentReader.getTermVectors(0))__        _        _        Document document = segmentReader.document(0)__        assertEquals(0, document.getFields().size())__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,an,index,with,no,fields;public,void,test,empty,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,iw,add,document,new,document,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,0,seen,fields,size,assert,null,segment,reader,terms,foo,assert,null,segment,reader,get,term,vectors,0,document,document,segment,reader,document,0,assert,equals,0,document,get,fields,size,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testEmpty() throws Exception;1535965276;test filtering an index with no fields;public void testEmpty() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        iw.addDocument(new Document())___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(0, seenFields.size())__        assertNull(segmentReader.terms("foo"))___        _        assertNull(segmentReader.getTermVectors(0))___        _        Document document = segmentReader.document(0)__        assertEquals(0, document.getFields().size())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,an,index,with,no,fields;public,void,test,empty,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,iw,add,document,new,document,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,0,seen,fields,size,assert,null,segment,reader,terms,foo,assert,null,segment,reader,get,term,vectors,0,document,document,segment,reader,document,0,assert,equals,0,document,get,fields,size,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testEmpty() throws Exception;1541501723;test filtering an index with no fields;public void testEmpty() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        iw.addDocument(new Document())___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(0, seenFields.size())__        assertNull(segmentReader.terms("foo"))___        _        assertNull(segmentReader.getTermVectors(0))___        _        Document document = segmentReader.document(0)__        assertEquals(0, document.getFields().size())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,an,index,with,no,fields;public,void,test,empty,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,iw,add,document,new,document,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,0,seen,fields,size,assert,null,segment,reader,terms,foo,assert,null,segment,reader,get,term,vectors,0,document,document,segment,reader,document,0,assert,equals,0,document,get,fields,size,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testEmpty() throws Exception;1551278144;test filtering an index with no fields;public void testEmpty() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        iw.addDocument(new Document())___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Set<String> seenFields = new HashSet<>()__        for (FieldInfo info : segmentReader.getFieldInfos()) {_            seenFields.add(info.name)__        }_        assertEquals(0, seenFields.size())__        assertNull(segmentReader.terms("foo"))___        _        assertNull(segmentReader.getTermVectors(0))___        _        Document document = segmentReader.document(0)__        assertEquals(0, document.getFields().size())___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,an,index,with,no,fields;public,void,test,empty,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,iw,add,document,new,document,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,set,string,seen,fields,new,hash,set,for,field,info,info,segment,reader,get,field,infos,seen,fields,add,info,name,assert,equals,0,seen,fields,size,assert,null,segment,reader,terms,foo,assert,null,segment,reader,get,term,vectors,0,document,document,segment,reader,document,0,assert,equals,0,document,get,fields,size,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesOldIndex() throws Exception;1524684173;test where _field_names does not exist;public void testFieldNamesOldIndex() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNull(segmentReader.terms(FieldNamesFieldMapper.NAME))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,does,not,exist;public,void,test,field,names,old,index,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,null,segment,reader,terms,field,names,field,mapper,name,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesOldIndex() throws Exception;1527096592;test where _field_names does not exist;public void testFieldNamesOldIndex() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNull(segmentReader.terms(FieldNamesFieldMapper.NAME))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,does,not,exist;public,void,test,field,names,old,index,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,null,segment,reader,terms,field,names,field,mapper,name,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesOldIndex() throws Exception;1535965276;test where _field_names does not exist;public void testFieldNamesOldIndex() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNull(segmentReader.terms(FieldNamesFieldMapper.NAME))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,does,not,exist;public,void,test,field,names,old,index,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,null,segment,reader,terms,field,names,field,mapper,name,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesOldIndex() throws Exception;1541501723;test where _field_names does not exist;public void testFieldNamesOldIndex() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNull(segmentReader.terms(FieldNamesFieldMapper.NAME))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,does,not,exist;public,void,test,field,names,old,index,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,null,segment,reader,terms,field,names,field,mapper,name,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesOldIndex() throws Exception;1551278144;test where _field_names does not exist;public void testFieldNamesOldIndex() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", SourceFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNull(segmentReader.terms(FieldNamesFieldMapper.NAME))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,where,does,not,exist;public,void,test,field,names,old,index,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,source,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,null,segment,reader,terms,field,names,field,mapper,name,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNorms() throws Exception;1524684173;test filtering two text fields;public void testNorms() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new TextField("fieldA", "test", Field.Store.NO))__        doc.add(new TextField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNotNull(segmentReader.getNormValues("fieldA"))__        assertNull(segmentReader.getNormValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,text,fields;public,void,test,norms,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,new,mock,analyzer,random,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,text,field,field,a,test,field,store,no,doc,add,new,text,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,not,null,segment,reader,get,norm,values,field,a,assert,null,segment,reader,get,norm,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNorms() throws Exception;1527096592;test filtering two text fields;public void testNorms() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new TextField("fieldA", "test", Field.Store.NO))__        doc.add(new TextField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNotNull(segmentReader.getNormValues("fieldA"))__        assertNull(segmentReader.getNormValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,text,fields;public,void,test,norms,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,new,mock,analyzer,random,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,text,field,field,a,test,field,store,no,doc,add,new,text,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,not,null,segment,reader,get,norm,values,field,a,assert,null,segment,reader,get,norm,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNorms() throws Exception;1535965276;test filtering two text fields;public void testNorms() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new TextField("fieldA", "test", Field.Store.NO))__        doc.add(new TextField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNotNull(segmentReader.getNormValues("fieldA"))__        assertNull(segmentReader.getNormValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,text,fields;public,void,test,norms,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,new,mock,analyzer,random,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,text,field,field,a,test,field,store,no,doc,add,new,text,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,not,null,segment,reader,get,norm,values,field,a,assert,null,segment,reader,get,norm,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNorms() throws Exception;1541501723;test filtering two text fields;public void testNorms() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new TextField("fieldA", "test", Field.Store.NO))__        doc.add(new TextField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNotNull(segmentReader.getNormValues("fieldA"))__        assertNull(segmentReader.getNormValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,text,fields;public,void,test,norms,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,new,mock,analyzer,random,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,text,field,field,a,test,field,store,no,doc,add,new,text,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,not,null,segment,reader,get,norm,values,field,a,assert,null,segment,reader,get,norm,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testNorms() throws Exception;1551278144;test filtering two text fields;public void testNorms() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new TextField("fieldA", "test", Field.Store.NO))__        doc.add(new TextField("fieldB", "test", Field.Store.NO))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        assertNotNull(segmentReader.getNormValues("fieldA"))__        assertNull(segmentReader.getNormValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,text,fields;public,void,test,norms,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,new,mock,analyzer,random,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,text,field,field,a,test,field,store,no,doc,add,new,text,field,field,b,test,field,store,no,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,assert,not,null,segment,reader,get,norm,values,field,a,assert,null,segment,reader,get,norm,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedSetDocValues() throws Exception;1524684173;test filtering two sortedset dv fields;public void testSortedSetDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new SortedSetDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedSetDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedSetDocValues dv = segmentReader.getSortedSetDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(0, dv.nextOrd())__        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd())__        assertEquals(new BytesRef("testA"), dv.lookupOrd(0))__        assertNull(segmentReader.getSortedSetDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortedset,dv,fields;public,void,test,sorted,set,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,set,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,set,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,set,doc,values,dv,segment,reader,get,sorted,set,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,0,dv,next,ord,assert,equals,sorted,set,doc,values,dv,next,ord,assert,equals,new,bytes,ref,test,a,dv,lookup,ord,0,assert,null,segment,reader,get,sorted,set,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedSetDocValues() throws Exception;1527096592;test filtering two sortedset dv fields;public void testSortedSetDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new SortedSetDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedSetDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)__        _        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedSetDocValues dv = segmentReader.getSortedSetDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(0, dv.nextOrd())__        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd())__        assertEquals(new BytesRef("testA"), dv.lookupOrd(0))__        assertNull(segmentReader.getSortedSetDocValues("fieldB"))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortedset,dv,fields;public,void,test,sorted,set,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,set,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,set,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,set,doc,values,dv,segment,reader,get,sorted,set,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,0,dv,next,ord,assert,equals,sorted,set,doc,values,dv,next,ord,assert,equals,new,bytes,ref,test,a,dv,lookup,ord,0,assert,null,segment,reader,get,sorted,set,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedSetDocValues() throws Exception;1535965276;test filtering two sortedset dv fields;public void testSortedSetDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedSetDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedSetDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedSetDocValues dv = segmentReader.getSortedSetDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(0, dv.nextOrd())__        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd())__        assertEquals(new BytesRef("testA"), dv.lookupOrd(0))__        assertNull(segmentReader.getSortedSetDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortedset,dv,fields;public,void,test,sorted,set,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,set,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,set,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,set,doc,values,dv,segment,reader,get,sorted,set,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,0,dv,next,ord,assert,equals,sorted,set,doc,values,dv,next,ord,assert,equals,new,bytes,ref,test,a,dv,lookup,ord,0,assert,null,segment,reader,get,sorted,set,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedSetDocValues() throws Exception;1541501723;test filtering two sortedset dv fields;public void testSortedSetDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedSetDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedSetDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedSetDocValues dv = segmentReader.getSortedSetDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(0, dv.nextOrd())__        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd())__        assertEquals(new BytesRef("testA"), dv.lookupOrd(0))__        assertNull(segmentReader.getSortedSetDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortedset,dv,fields;public,void,test,sorted,set,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,set,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,set,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,set,doc,values,dv,segment,reader,get,sorted,set,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,0,dv,next,ord,assert,equals,sorted,set,doc,values,dv,next,ord,assert,equals,new,bytes,ref,test,a,dv,lookup,ord,0,assert,null,segment,reader,get,sorted,set,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testSortedSetDocValues() throws Exception;1551278144;test filtering two sortedset dv fields;public void testSortedSetDocValues() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new SortedSetDocValuesField("fieldA", new BytesRef("testA")))__        doc.add(new SortedSetDocValuesField("fieldB", new BytesRef("testB")))__        iw.addDocument(doc)___        _        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(Automata.makeString("fieldA")))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        SortedSetDocValues dv = segmentReader.getSortedSetDocValues("fieldA")__        assertNotNull(dv)__        assertTrue(dv.advanceExact(0))__        assertEquals(0, dv.nextOrd())__        assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd())__        assertEquals(new BytesRef("testA"), dv.lookupOrd(0))__        assertNull(segmentReader.getSortedSetDocValues("fieldB"))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,filtering,two,sortedset,dv,fields;public,void,test,sorted,set,doc,values,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,sorted,set,doc,values,field,field,a,new,bytes,ref,test,a,doc,add,new,sorted,set,doc,values,field,field,b,new,bytes,ref,test,b,iw,add,document,doc,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automata,make,string,field,a,leaf,reader,segment,reader,ir,leaves,get,0,reader,sorted,set,doc,values,dv,segment,reader,get,sorted,set,doc,values,field,a,assert,not,null,dv,assert,true,dv,advance,exact,0,assert,equals,0,dv,next,ord,assert,equals,sorted,set,doc,values,dv,next,ord,assert,equals,new,bytes,ref,test,a,dv,lookup,ord,0,assert,null,segment,reader,get,sorted,set,doc,values,field,b,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesThreeFields() throws Exception;1524684173;test special handling for _field_names field (three fields, to exercise termsenum better);public void testFieldNamesThreeFields() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField("fieldC", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldC", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertEquals(new BytesRef("fieldC"), termsEnum.next())__        assertNull(termsEnum.next())__        _        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        assertTrue(termsEnum.seekExact(new BytesRef("fieldC")))__        _        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("fieldB")))__        assertEquals(new BytesRef("fieldC"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldD")))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field,three,fields,to,exercise,termsenum,better;public,void,test,field,names,three,fields,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,c,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,c,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,equals,new,bytes,ref,field,c,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,assert,true,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field,b,assert,equals,new,bytes,ref,field,c,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,d,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesThreeFields() throws Exception;1527096592;test special handling for _field_names field (three fields, to exercise termsenum better);public void testFieldNamesThreeFields() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)__        _        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField("fieldC", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldC", Field.Store.NO))__        iw.addDocument(doc)__        _        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))__        _        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertEquals(new BytesRef("fieldC"), termsEnum.next())__        assertNull(termsEnum.next())__        _        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        assertTrue(termsEnum.seekExact(new BytesRef("fieldC")))__        _        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("fieldB")))__        assertEquals(new BytesRef("fieldC"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldD")))__        _        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field,three,fields,to,exercise,termsenum,better;public,void,test,field,names,three,fields,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,c,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,c,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,equals,new,bytes,ref,field,c,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,assert,true,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field,b,assert,equals,new,bytes,ref,field,c,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,d,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesThreeFields() throws Exception;1535965276;test special handling for _field_names field (three fields, to exercise termsenum better);public void testFieldNamesThreeFields() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField("fieldC", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldC", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertEquals(new BytesRef("fieldC"), termsEnum.next())__        assertNull(termsEnum.next())___        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        assertTrue(termsEnum.seekExact(new BytesRef("fieldC")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("fieldB")))__        assertEquals(new BytesRef("fieldC"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldD")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field,three,fields,to,exercise,termsenum,better;public,void,test,field,names,three,fields,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,c,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,c,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,equals,new,bytes,ref,field,c,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,assert,true,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field,b,assert,equals,new,bytes,ref,field,c,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,d,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesThreeFields() throws Exception;1541501723;test special handling for _field_names field (three fields, to exercise termsenum better);public void testFieldNamesThreeFields() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField("fieldC", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldC", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertEquals(new BytesRef("fieldC"), termsEnum.next())__        assertNull(termsEnum.next())___        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        assertTrue(termsEnum.seekExact(new BytesRef("fieldC")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("fieldB")))__        assertEquals(new BytesRef("fieldC"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldD")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field,three,fields,to,exercise,termsenum,better;public,void,test,field,names,three,fields,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,c,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,c,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,equals,new,bytes,ref,field,c,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,assert,true,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field,b,assert,equals,new,bytes,ref,field,c,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,d,test,util,check,reader,ir,ioutils,close,ir,iw,dir
FieldSubsetReaderTests -> public void testFieldNamesThreeFields() throws Exception;1551278144;test special handling for _field_names field (three fields, to exercise termsenum better);public void testFieldNamesThreeFields() throws Exception {_        Directory dir = newDirectory()__        IndexWriterConfig iwc = new IndexWriterConfig(null)__        IndexWriter iw = new IndexWriter(dir, iwc)___        _        Document doc = new Document()__        doc.add(new StringField("fieldA", "test", Field.Store.NO))__        doc.add(new StringField("fieldB", "test", Field.Store.NO))__        doc.add(new StringField("fieldC", "test", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldA", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldB", Field.Store.NO))__        doc.add(new StringField(FieldNamesFieldMapper.NAME, "fieldC", Field.Store.NO))__        iw.addDocument(doc)___        _        Automaton automaton = Automatons.patterns(Arrays.asList("fieldA", "fieldC", FieldNamesFieldMapper.NAME))__        DirectoryReader ir = FieldSubsetReader.wrap(DirectoryReader.open(iw), new CharacterRunAutomaton(automaton))___        _        LeafReader segmentReader = ir.leaves().get(0).reader()__        Terms terms = segmentReader.terms(FieldNamesFieldMapper.NAME)__        TermsEnum termsEnum = terms.iterator()__        assertEquals(new BytesRef("fieldA"), termsEnum.next())__        assertEquals(new BytesRef("fieldC"), termsEnum.next())__        assertNull(termsEnum.next())___        _        termsEnum = terms.iterator()__        assertTrue(termsEnum.seekExact(new BytesRef("fieldA")))__        assertFalse(termsEnum.seekExact(new BytesRef("fieldB")))__        assertTrue(termsEnum.seekExact(new BytesRef("fieldC")))___        _        termsEnum = terms.iterator()__        assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef("fieldA")))__        assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef("fieldB")))__        assertEquals(new BytesRef("fieldC"), termsEnum.term())__        assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef("fieldD")))___        TestUtil.checkReader(ir)__        IOUtils.close(ir, iw, dir)__    };test,special,handling,for,field,three,fields,to,exercise,termsenum,better;public,void,test,field,names,three,fields,throws,exception,directory,dir,new,directory,index,writer,config,iwc,new,index,writer,config,null,index,writer,iw,new,index,writer,dir,iwc,document,doc,new,document,doc,add,new,string,field,field,a,test,field,store,no,doc,add,new,string,field,field,b,test,field,store,no,doc,add,new,string,field,field,c,test,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,a,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,b,field,store,no,doc,add,new,string,field,field,names,field,mapper,name,field,c,field,store,no,iw,add,document,doc,automaton,automaton,automatons,patterns,arrays,as,list,field,a,field,c,field,names,field,mapper,name,directory,reader,ir,field,subset,reader,wrap,directory,reader,open,iw,new,character,run,automaton,automaton,leaf,reader,segment,reader,ir,leaves,get,0,reader,terms,terms,segment,reader,terms,field,names,field,mapper,name,terms,enum,terms,enum,terms,iterator,assert,equals,new,bytes,ref,field,a,terms,enum,next,assert,equals,new,bytes,ref,field,c,terms,enum,next,assert,null,terms,enum,next,terms,enum,terms,iterator,assert,true,terms,enum,seek,exact,new,bytes,ref,field,a,assert,false,terms,enum,seek,exact,new,bytes,ref,field,b,assert,true,terms,enum,seek,exact,new,bytes,ref,field,c,terms,enum,terms,iterator,assert,equals,seek,status,found,terms,enum,seek,ceil,new,bytes,ref,field,a,assert,equals,seek,status,terms,enum,seek,ceil,new,bytes,ref,field,b,assert,equals,new,bytes,ref,field,c,terms,enum,term,assert,equals,seek,status,end,terms,enum,seek,ceil,new,bytes,ref,field,d,test,util,check,reader,ir,ioutils,close,ir,iw,dir
