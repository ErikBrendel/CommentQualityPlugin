commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Writeable.Reader<Diff> diffReader() {     return RollupJob::readJobDiffFrom. }
false;protected;1;4;;@Override protected ToXContent doParseInstance(XContentParser parser) throws IOException {     return RollupJob.fromXContent(parser). }
false;protected;0;4;;@Override protected Writeable.Reader instanceReader() {     return RollupJob::new. }
false;protected;0;13;;@Override protected Writeable createTestInstance() {     if (randomBoolean()) {         return new RollupJob(ConfigTestHelpers.randomRollupJobConfig(random()), null).     }     Map<String, String> headers = Collections.emptyMap().     if (randomBoolean()) {         headers = new HashMap<>(1).         headers.put("foo", "bar").     }     return new RollupJob(ConfigTestHelpers.randomRollupJobConfig(random()), headers). }
false;protected;1;15;;@Override protected Diffable makeTestChanges(Diffable testInstance) {     RollupJob other = (RollupJob) testInstance.     if (randomBoolean()) {         if (other.getHeaders().isEmpty()) {             Map<String, String> headers = new HashMap<>(1).             headers.put("foo", "bar").             return new RollupJob(other.getConfig(), headers).         } else {             return new RollupJob(other.getConfig(), null).         }     } else {         return new RollupJob(ConfigTestHelpers.randomRollupJobConfig(random()), other.getHeaders()).     } }
