commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public boolean waitForCompletion() {     return waitForCompletion. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(id).     out.writeBoolean(waitForCompletion). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(DataFrameField.ID.getPreferredName(), id).     builder.field(DataFrameField.WAIT_FOR_COMPLETION.getPreferredName(), waitForCompletion).     if (this.getTimeout() != null) {         builder.field(DataFrameField.TIMEOUT.getPreferredName(), this.getTimeout()).     }     return builder. }
false;public;0;5;;@Override public int hashCode() {     // the base class does not implement hashCode, therefore we need to hash timeout ourselves     return Objects.hash(id, waitForCompletion, this.getTimeout()). }
false;public;1;18;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     // the base class does not implement equals, therefore we need to compare timeout ourselves     if (Objects.equals(this.getTimeout(), other.getTimeout()) == false) {         return false.     }     return Objects.equals(id, other.id) && Objects.equals(waitForCompletion, other.waitForCompletion). }
false;public;1;6;;@Override public boolean match(Task task) {     String expectedDescription = DataFrameField.PERSISTENT_TASK_DESCRIPTION_PREFIX + id.     return task.getDescription().equals(expectedDescription). }
false;public;0;3;;public boolean isStopped() {     return stopped. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     stopped = in.readBoolean(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(stopped). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("stopped", stopped).     builder.endObject().     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return stopped == response.stopped. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(stopped). }
