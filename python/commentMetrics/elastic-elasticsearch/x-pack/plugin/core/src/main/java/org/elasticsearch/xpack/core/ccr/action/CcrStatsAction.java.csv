commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out). }
false;public;0;3;;public AutoFollowStats getAutoFollowStats() {     return autoFollowStats. }
false;public;0;3;;public FollowStatsAction.StatsResponses getFollowStats() {     return followStats. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     autoFollowStats.writeTo(out).     followStats.writeTo(out). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field("auto_follow_stats", autoFollowStats, params).         builder.field("follow_stats", followStats, params).     }     builder.endObject().     return builder. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Response response = (Response) o.     return Objects.equals(autoFollowStats, response.autoFollowStats) && Objects.equals(followStats, response.followStats). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(autoFollowStats, followStats). }
