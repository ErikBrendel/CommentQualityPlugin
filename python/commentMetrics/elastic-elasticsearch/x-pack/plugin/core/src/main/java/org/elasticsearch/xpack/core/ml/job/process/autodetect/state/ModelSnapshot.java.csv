commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;21;;private static ObjectParser<Builder, Void> createParser(boolean ignoreUnknownFields) {     ObjectParser<Builder, Void> parser = new ObjectParser<>(TYPE.getPreferredName(), ignoreUnknownFields, Builder::new).     parser.declareString(Builder::setJobId, Job.ID).     parser.declareString(Builder::setMinVersion, MIN_VERSION).     parser.declareField(Builder::setTimestamp, p -> TimeUtils.parseTimeField(p, TIMESTAMP.getPreferredName()), TIMESTAMP, ValueType.VALUE).     parser.declareString(Builder::setDescription, DESCRIPTION).     parser.declareString(Builder::setSnapshotId, ModelSnapshotField.SNAPSHOT_ID).     parser.declareInt(Builder::setSnapshotDocCount, SNAPSHOT_DOC_COUNT).     parser.declareObject(Builder::setModelSizeStats, ignoreUnknownFields ? ModelSizeStats.LENIENT_PARSER : ModelSizeStats.STRICT_PARSER, ModelSizeStats.RESULT_TYPE_FIELD).     parser.declareField(Builder::setLatestRecordTimeStamp, p -> TimeUtils.parseTimeField(p, LATEST_RECORD_TIME.getPreferredName()), LATEST_RECORD_TIME, ValueType.VALUE).     parser.declareField(Builder::setLatestResultTimeStamp, p -> TimeUtils.parseTimeField(p, LATEST_RESULT_TIME.getPreferredName()), LATEST_RESULT_TIME, ValueType.VALUE).     parser.declareObject(Builder::setQuantiles, ignoreUnknownFields ? Quantiles.LENIENT_PARSER : Quantiles.STRICT_PARSER, QUANTILES).     parser.declareBoolean(Builder::setRetain, RETAIN).     return parser. }
false;public;1;31;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     if (out.getVersion().onOrAfter(Version.V_7_0_0)) {         Version.writeVersion(minVersion, out).     }     if (timestamp != null) {         out.writeBoolean(true).         out.writeVLong(timestamp.getTime()).     } else {         out.writeBoolean(false).     }     out.writeOptionalString(description).     out.writeOptionalString(snapshotId).     out.writeInt(snapshotDocCount).     out.writeOptionalWriteable(modelSizeStats).     if (latestRecordTimeStamp != null) {         out.writeBoolean(true).         out.writeVLong(latestRecordTimeStamp.getTime()).     } else {         out.writeBoolean(false).     }     if (latestResultTimeStamp != null) {         out.writeBoolean(true).         out.writeVLong(latestResultTimeStamp.getTime()).     } else {         out.writeBoolean(false).     }     out.writeOptionalWriteable(quantiles).     out.writeBoolean(retain). }
false;public;2;33;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(MIN_VERSION.getPreferredName(), minVersion).     if (timestamp != null) {         builder.timeField(TIMESTAMP.getPreferredName(), TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     }     if (description != null) {         builder.field(DESCRIPTION.getPreferredName(), description).     }     if (snapshotId != null) {         builder.field(ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), snapshotId).     }     builder.field(SNAPSHOT_DOC_COUNT.getPreferredName(), snapshotDocCount).     if (modelSizeStats != null) {         builder.field(ModelSizeStats.RESULT_TYPE_FIELD.getPreferredName(), modelSizeStats).     }     if (latestRecordTimeStamp != null) {         builder.timeField(LATEST_RECORD_TIME.getPreferredName(), LATEST_RECORD_TIME.getPreferredName() + "_string", latestRecordTimeStamp.getTime()).     }     if (latestResultTimeStamp != null) {         builder.timeField(LATEST_RESULT_TIME.getPreferredName(), LATEST_RESULT_TIME.getPreferredName() + "_string", latestResultTimeStamp.getTime()).     }     if (quantiles != null) {         builder.field(QUANTILES.getPreferredName(), quantiles).     }     builder.field(RETAIN.getPreferredName(), retain).     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public Version getMinVersion() {     return minVersion. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public String getSnapshotId() {     return snapshotId. }
false;public;0;3;;public int getSnapshotDocCount() {     return snapshotDocCount. }
false;public;0;3;;public ModelSizeStats getModelSizeStats() {     return modelSizeStats. }
false;public;0;3;;public Quantiles getQuantiles() {     return quantiles. }
false;public;0;3;;public Date getLatestRecordTimeStamp() {     return latestRecordTimeStamp. }
false;public;0;3;;public Date getLatestResultTimeStamp() {     return latestResultTimeStamp. }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(jobId, minVersion, timestamp, description, snapshotId, quantiles, snapshotDocCount, modelSizeStats, latestRecordTimeStamp, latestResultTimeStamp, retain). }
true;public;1;24;/**  * Compare all the fields.  */ ;/**  * Compare all the fields.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof ModelSnapshot == false) {         return false.     }     ModelSnapshot that = (ModelSnapshot) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.minVersion, that.minVersion) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.description, that.description) && Objects.equals(this.snapshotId, that.snapshotId) && this.snapshotDocCount == that.snapshotDocCount && Objects.equals(this.modelSizeStats, that.modelSizeStats) && Objects.equals(this.quantiles, that.quantiles) && Objects.equals(this.latestRecordTimeStamp, that.latestRecordTimeStamp) && Objects.equals(this.latestResultTimeStamp, that.latestResultTimeStamp) && this.retain == that.retain. }
false;public;0;8;;public List<String> stateDocumentIds() {     List<String> stateDocumentIds = new ArrayList<>(snapshotDocCount).     // The state documents count suffices are 1-based     for (int i = 1. i <= snapshotDocCount. i++) {         stateDocumentIds.add(ModelState.documentId(jobId, snapshotId, i)).     }     return stateDocumentIds. }
true;public;0;8;/**  * This is how the IDs were formed in v5.4  */ ;/**  * This is how the IDs were formed in v5.4  */ public List<String> legacyStateDocumentIds() {     List<String> stateDocumentIds = new ArrayList<>(snapshotDocCount).     // The state documents count suffices are 1-based     for (int i = 1. i <= snapshotDocCount. i++) {         stateDocumentIds.add(ModelState.v54DocumentId(jobId, snapshotId, i)).     }     return stateDocumentIds. }
false;public,static;1;3;;public static String documentIdPrefix(String jobId) {     return jobId + "_" + TYPE + "_". }
false;public,static;1;3;;public static String documentId(ModelSnapshot snapshot) {     return documentId(snapshot.getJobId(), snapshot.getSnapshotId()). }
true;public,static;1;3;/**  * This is how the IDs were formed in v5.4  */ ;/**  * This is how the IDs were formed in v5.4  */ public static String v54DocumentId(ModelSnapshot snapshot) {     return v54DocumentId(snapshot.getJobId(), snapshot.getSnapshotId()). }
false;public,static;2;3;;public static String documentId(String jobId, String snapshotId) {     return documentIdPrefix(jobId) + snapshotId. }
true;public,static;2;3;/**  * This is how the IDs were formed in v5.4  */ ;/**  * This is how the IDs were formed in v5.4  */ public static String v54DocumentId(String jobId, String snapshotId) {     return jobId + "-" + snapshotId. }
false;public,static;1;9;;public static ModelSnapshot fromJson(BytesReference bytesReference) {     try (InputStream stream = bytesReference.streamInput().         XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {         return LENIENT_PARSER.apply(parser, null).build().     } catch (IOException e) {         throw new ElasticsearchParseException("failed to parse modelSnapshot", e).     } }
false;public;1;4;;public Builder setJobId(String jobId) {     this.jobId = jobId.     return this. }
false;public;1;4;;public Builder setMinVersion(Version minVersion) {     this.minVersion = minVersion.     return this. }
false;public;1;4;;public Builder setMinVersion(String minVersion) {     this.minVersion = Version.fromString(minVersion).     return this. }
false;public;1;4;;public Builder setTimestamp(Date timestamp) {     this.timestamp = timestamp.     return this. }
false;public;1;4;;public Builder setDescription(String description) {     this.description = description.     return this. }
false;public;1;4;;public Builder setSnapshotId(String snapshotId) {     this.snapshotId = snapshotId.     return this. }
false;public;1;4;;public Builder setSnapshotDocCount(int snapshotDocCount) {     this.snapshotDocCount = snapshotDocCount.     return this. }
false;public;1;4;;public Builder setModelSizeStats(ModelSizeStats.Builder modelSizeStats) {     this.modelSizeStats = modelSizeStats.build().     return this. }
false;public;1;4;;public Builder setModelSizeStats(ModelSizeStats modelSizeStats) {     this.modelSizeStats = modelSizeStats.     return this. }
false;public;1;4;;public Builder setLatestRecordTimeStamp(Date latestRecordTimeStamp) {     this.latestRecordTimeStamp = latestRecordTimeStamp.     return this. }
false;public;1;4;;public Builder setLatestResultTimeStamp(Date latestResultTimeStamp) {     this.latestResultTimeStamp = latestResultTimeStamp.     return this. }
false;public;1;4;;public Builder setQuantiles(Quantiles quantiles) {     this.quantiles = quantiles.     return this. }
false;public;1;4;;public Builder setRetain(boolean value) {     this.retain = value.     return this. }
false;public;0;4;;public ModelSnapshot build() {     return new ModelSnapshot(jobId, minVersion, timestamp, description, snapshotId, snapshotDocCount, modelSizeStats, latestRecordTimeStamp, latestResultTimeStamp, quantiles, retain). }
