commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.map(source). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeMap(source).     out.writeOptionalWriteable(aggregations). }
false;public;0;3;;public Collection<AggregationBuilder> getAggregatorFactories() {     return aggregations.getAggregatorFactories(). }
false;public,static;2;27;;public static AggregationConfig fromXContent(final XContentParser parser, boolean lenient) throws IOException {     NamedXContentRegistry registry = parser.getXContentRegistry().     Map<String, Object> source = parser.mapOrdered().     AggregatorFactories.Builder aggregations = null.     if (source.isEmpty()) {         if (lenient) {             logger.warn(DataFrameMessages.DATA_FRAME_TRANSFORM_CONFIGURATION_PIVOT_NO_AGGREGATION).         } else {             throw new IllegalArgumentException(DataFrameMessages.DATA_FRAME_TRANSFORM_CONFIGURATION_PIVOT_NO_AGGREGATION).         }     } else {         try (XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().map(source).             XContentParser sourceParser = XContentType.JSON.xContent().createParser(registry, LoggingDeprecationHandler.INSTANCE, BytesReference.bytes(xContentBuilder).streamInput())) {             sourceParser.nextToken().             aggregations = AggregatorFactories.parseAggregators(sourceParser).         } catch (Exception e) {             if (lenient) {                 logger.warn(DataFrameMessages.LOG_DATA_FRAME_TRANSFORM_CONFIGURATION_BAD_AGGREGATION, e).             } else {                 throw e.             }         }     }     return new AggregationConfig(source, aggregations). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(source, aggregations). }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final AggregationConfig that = (AggregationConfig) other.     return Objects.equals(this.source, that.source) && Objects.equals(this.aggregations, that.aggregations). }
false;public;0;3;;public boolean isValid() {     return this.aggregations != null. }
