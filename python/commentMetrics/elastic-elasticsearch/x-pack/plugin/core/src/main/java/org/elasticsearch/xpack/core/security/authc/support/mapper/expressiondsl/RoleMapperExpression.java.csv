commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Determines whether this expression matches against the provided object.  * @param model the {@link ExpressionModel}  */ ;/**  * Determines whether this expression matches against the provided object.  * @param model the {@link ExpressionModel}  */ boolean match(ExpressionModel model).
true;default;0;3;/**  * Adapt this expression to a standard {@link Predicate}  */ ;/**  * Adapt this expression to a standard {@link Predicate}  */ default Predicate<ExpressionModel> asPredicate() {     return this::match. }
true;static;1;3;/**  * Creates an <em>inverted</em> predicate that can test whether an expression matches  * a fixed object. Its purpose is for cases where there is a {@link java.util.stream.Stream} of  * expressions, that need to be filtered against a single map.  */ ;/**  * Creates an <em>inverted</em> predicate that can test whether an expression matches  * a fixed object. Its purpose is for cases where there is a {@link java.util.stream.Stream} of  * expressions, that need to be filtered against a single map.  */ static Predicate<RoleMapperExpression> predicate(ExpressionModel map) {     return expr -> expr.match(map). }
