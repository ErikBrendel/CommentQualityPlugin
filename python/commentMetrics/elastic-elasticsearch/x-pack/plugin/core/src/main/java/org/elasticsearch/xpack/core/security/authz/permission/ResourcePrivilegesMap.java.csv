commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean allAllowed() {     return allAllowed. }
false;public;0;3;;public Map<String, ResourcePrivileges> getResourceToResourcePrivileges() {     return resourceToResourcePrivileges. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(allAllowed, resourceToResourcePrivileges). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     final ResourcePrivilegesMap other = (ResourcePrivilegesMap) obj.     return allAllowed == other.allAllowed && Objects.equals(resourceToResourcePrivileges, other.resourceToResourcePrivileges). }
false;public;0;4;;@Override public String toString() {     return "ResourcePrivilegesMap [allAllowed=" + allAllowed + ", resourceToResourcePrivileges=" + resourceToResourcePrivileges + "]". }
false;public;3;8;;public Builder addResourcePrivilege(String resource, String privilege, Boolean allowed) {     assert resource != null && privilege != null && allowed != null : "resource, privilege and permission(allowed or denied) are required".     ResourcePrivileges.Builder builder = resourceToResourcePrivilegesBuilder.computeIfAbsent(resource, ResourcePrivileges::builder).     builder.addPrivilege(privilege, allowed).     allowAll = allowAll && allowed.     return this. }
false;public;2;7;;public Builder addResourcePrivilege(String resource, Map<String, Boolean> privilegePermissions) {     assert resource != null && privilegePermissions != null : "resource, privilege permissions(allowed or denied) are required".     ResourcePrivileges.Builder builder = resourceToResourcePrivilegesBuilder.computeIfAbsent(resource, ResourcePrivileges::builder).     builder.addPrivileges(privilegePermissions).     allowAll = allowAll && privilegePermissions.values().stream().allMatch(b -> Boolean.TRUE.equals(b)).     return this. }
false;public;1;5;;public Builder addResourcePrivilegesMap(ResourcePrivilegesMap resourcePrivilegesMap) {     resourcePrivilegesMap.getResourceToResourcePrivileges().entrySet().stream().forEach(e -> this.addResourcePrivilege(e.getKey(), e.getValue().getPrivileges())).     return this. }
false;public;0;5;;public ResourcePrivilegesMap build() {     Map<String, ResourcePrivileges> result = resourceToResourcePrivilegesBuilder.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue().build())).     return new ResourcePrivilegesMap(allowAll, result). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
true;public,static;2;12;/**  * Takes an intersection of resource privileges and returns a new instance of {@link ResourcePrivilegesMap}. If one of the resource  * privileges map does not allow access to a resource then the resulting map would also not allow access.  *  * @param left an instance of {@link ResourcePrivilegesMap}  * @param right an instance of {@link ResourcePrivilegesMap}  * @return a new instance of {@link ResourcePrivilegesMap}, an intersection of resource privileges.  */ ;/**  * Takes an intersection of resource privileges and returns a new instance of {@link ResourcePrivilegesMap}. If one of the resource  * privileges map does not allow access to a resource then the resulting map would also not allow access.  *  * @param left an instance of {@link ResourcePrivilegesMap}  * @param right an instance of {@link ResourcePrivilegesMap}  * @return a new instance of {@link ResourcePrivilegesMap}, an intersection of resource privileges.  */ public static ResourcePrivilegesMap intersection(final ResourcePrivilegesMap left, final ResourcePrivilegesMap right) {     Objects.requireNonNull(left).     Objects.requireNonNull(right).     final ResourcePrivilegesMap.Builder builder = ResourcePrivilegesMap.builder().     for (Entry<String, ResourcePrivileges> leftResPrivsEntry : left.getResourceToResourcePrivileges().entrySet()) {         final ResourcePrivileges leftResPrivs = leftResPrivsEntry.getValue().         final ResourcePrivileges rightResPrivs = right.getResourceToResourcePrivileges().get(leftResPrivsEntry.getKey()).         builder.addResourcePrivilege(leftResPrivsEntry.getKey(), leftResPrivs.getPrivileges()).         builder.addResourcePrivilege(leftResPrivsEntry.getKey(), rightResPrivs.getPrivileges()).     }     return builder.build(). }
