commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;public static XContentObjectTransformer<AggregatorFactories.Builder> aggregatorTransformer() {     return new XContentObjectTransformer<>(searchRegistry, (p) -> {         // Serializing a map creates an object, need to skip the start object for the aggregation parser         XContentParser.Token token = p.nextToken().         assert (XContentParser.Token.START_OBJECT.equals(token)).         return AggregatorFactories.parseAggregators(p).     }). }
false;public,static;0;3;;public static XContentObjectTransformer<QueryBuilder> queryBuilderTransformer() {     return new XContentObjectTransformer<>(searchRegistry, AbstractQueryBuilder::parseInnerQueryBuilder). }
true;public;1;3;/**  * Parses the map into the type T with the previously supplied parserFunction  * All deprecation warnings are ignored  * @param stringObjectMap The Map to parse into the Object  * @return parsed object T  * @throws IOException When there is an unforeseen parsing issue  */ ;/**  * Parses the map into the type T with the previously supplied parserFunction  * All deprecation warnings are ignored  * @param stringObjectMap The Map to parse into the Object  * @return parsed object T  * @throws IOException When there is an unforeseen parsing issue  */ public T fromMap(Map<String, Object> stringObjectMap) throws IOException {     return fromMap(stringObjectMap, new ArrayList<>()). }
true;public;2;16;/**  * Parses the map into the type T with the previously supplied parserFunction  * All deprecation warnings are added to the passed deprecationWarnings list.  *  * @param stringObjectMap The Map to parse into the Object  * @param deprecationWarnings The list to which to add all deprecation warnings  * @return parsed object T  * @throws IOException When there is an unforeseen parsing issue  */ ;/**  * Parses the map into the type T with the previously supplied parserFunction  * All deprecation warnings are added to the passed deprecationWarnings list.  *  * @param stringObjectMap The Map to parse into the Object  * @param deprecationWarnings The list to which to add all deprecation warnings  * @return parsed object T  * @throws IOException When there is an unforeseen parsing issue  */ public T fromMap(Map<String, Object> stringObjectMap, List<String> deprecationWarnings) throws IOException {     if (stringObjectMap == null) {         return null.     }     LoggingDeprecationAccumulationHandler deprecationLogger = new LoggingDeprecationAccumulationHandler().     try (XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().map(stringObjectMap).         XContentParser parser = XContentType.JSON.xContent().createParser(registry, deprecationLogger, BytesReference.bytes(xContentBuilder).streamInput())) {         T retVal = parserFunction.apply(parser).         deprecationWarnings.addAll(deprecationLogger.getDeprecations()).         return retVal.     } }
false;public;1;9;;public Map<String, Object> toMap(T object) throws IOException {     if (object == null) {         return null.     }     try (XContentBuilder xContentBuilder = XContentFactory.jsonBuilder()) {         XContentBuilder content = object.toXContent(xContentBuilder, ToXContent.EMPTY_PARAMS).         return XContentHelper.convertToMap(BytesReference.bytes(content), true, XContentType.JSON).v2().     } }
