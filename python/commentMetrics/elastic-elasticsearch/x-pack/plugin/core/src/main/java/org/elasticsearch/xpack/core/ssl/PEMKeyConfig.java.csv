commented;modifiers;parameterAmount;loc;comment;code
false;;1;14;;@Override X509ExtendedKeyManager createKeyManager(@Nullable Environment environment) {     try {         PrivateKey privateKey = readPrivateKey(CertParsingUtils.resolvePath(keyPath, environment), keyPassword).         if (privateKey == null) {             throw new IllegalArgumentException("private key [" + keyPath + "] could not be loaded").         }         Certificate[] certificateChain = getCertificateChain(environment).         return CertParsingUtils.keyManager(certificateChain, privateKey, keyPassword.getChars()).     } catch (IOException | UnrecoverableKeyException | NoSuchAlgorithmException | CertificateException | KeyStoreException e) {         throw new ElasticsearchException("failed to initialize a KeyManagerFactory", e).     } }
false;private;1;3;;private Certificate[] getCertificateChain(@Nullable Environment environment) throws CertificateException, IOException {     return CertParsingUtils.readCertificates(Collections.singletonList(certPath), environment). }
false;;1;12;;@Override Collection<CertificateInfo> certificates(Environment environment) throws CertificateException, IOException {     final Certificate[] chain = getCertificateChain(environment).     final List<CertificateInfo> info = new ArrayList<>(chain.length).     for (int i = 0. i < chain.length. i++) {         final Certificate cert = chain[i].         if (cert instanceof X509Certificate) {             info.add(new CertificateInfo(certPath, "PEM", null, i == 0, (X509Certificate) cert)).         }     }     return info. }
false;;1;8;;@Override List<PrivateKey> privateKeys(@Nullable Environment environment) {     try {         return Collections.singletonList(readPrivateKey(CertParsingUtils.resolvePath(keyPath, environment), keyPassword)).     } catch (IOException e) {         throw new UncheckedIOException("failed to read key", e).     } }
false;private,static;2;3;;private static PrivateKey readPrivateKey(Path keyPath, SecureString keyPassword) throws IOException {     return PemUtils.readPrivateKey(keyPath, keyPassword::getChars). }
false;;1;9;;@Override X509ExtendedTrustManager createTrustManager(@Nullable Environment environment) {     try {         Certificate[] certificates = getCertificateChain(environment).         return CertParsingUtils.trustManager(certificates).     } catch (Exception e) {         throw new ElasticsearchException("failed to initialize a TrustManagerFactory", e).     } }
false;;1;7;;@Override List<Path> filesToMonitor(@Nullable Environment environment) {     List<Path> paths = new ArrayList<>(2).     paths.add(CertParsingUtils.resolvePath(keyPath, environment)).     paths.add(CertParsingUtils.resolvePath(certPath, environment)).     return paths. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     PEMKeyConfig that = (PEMKeyConfig) o.     if (keyPath != null ? !keyPath.equals(that.keyPath) : that.keyPath != null)         return false.     if (keyPassword != null ? !keyPassword.equals(that.keyPassword) : that.keyPassword != null)         return false.     return certPath != null ? certPath.equals(that.certPath) : that.certPath == null. }
false;public;0;7;;@Override public int hashCode() {     int result = keyPath != null ? keyPath.hashCode() : 0.     result = 31 * result + (keyPassword != null ? keyPassword.hashCode() : 0).     result = 31 * result + (certPath != null ? certPath.hashCode() : 0).     return result. }
false;public;0;6;;@Override public String toString() {     return "keyPath=[" + keyPath + "], certPaths=[" + certPath + "]". }
