commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Client es() {     return client. }
false;public;0;3;;public CcrClient ccr() {     return ccrClient. }
false;public;0;3;;public LicensingClient licensing() {     return licensingClient. }
false;public;0;3;;public MonitoringClient monitoring() {     return monitoringClient. }
false;public;0;3;;public SecurityClient security() {     return securityClient. }
false;public;0;3;;public WatcherClient watcher() {     return watcherClient. }
false;public;0;3;;public MachineLearningClient machineLearning() {     return machineLearning. }
false;public;0;3;;public ILMClient ilmClient() {     return ilmClient. }
false;public;1;3;;public XPackClient withHeaders(Map<String, String> headers) {     return new XPackClient(client.filterWithHeader(headers)). }
true;public;2;3;/**  * Returns a client that will call xpack APIs on behalf of the given user.  *  * @param username The username of the user  * @param passwd    The password of the user. This char array can be cleared after calling this method.  */ ;/**  * Returns a client that will call xpack APIs on behalf of the given user.  *  * @param username The username of the user  * @param passwd    The password of the user. This char array can be cleared after calling this method.  */ public XPackClient withAuth(String username, char[] passwd) {     return withHeaders(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue(username, new SecureString(passwd)))). }
false;public;0;3;;public XPackInfoRequestBuilder prepareInfo() {     return new XPackInfoRequestBuilder(client). }
false;public;2;3;;public void info(XPackInfoRequest request, ActionListener<XPackInfoResponse> listener) {     client.execute(XPackInfoAction.INSTANCE, request, listener). }
true;public;2;3;/**  * Freezes or unfreeze one or more indices  */ ;/**  * Freezes or unfreeze one or more indices  */ public void freeze(FreezeRequest request, ActionListener<FreezeResponse> listener) {     client.execute(FreezeIndexAction.INSTANCE, request, listener). }
true;public;1;6;/**  * Freeze or unfreeze one or more indices  */ ;/**  * Freeze or unfreeze one or more indices  */ public FreezeResponse freeze(FreezeRequest request) throws ExecutionException, InterruptedException {     PlainActionFuture<FreezeResponse> future = new PlainActionFuture<>().     freeze(request, future).     return future.get(). }
