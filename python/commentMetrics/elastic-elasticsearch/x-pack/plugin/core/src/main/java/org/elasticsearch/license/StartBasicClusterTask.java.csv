commented;modifiers;parameterAmount;loc;comment;code
false;public;3;15;;@Override public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {     LicensesMetaData oldLicensesMetaData = oldState.metaData().custom(LicensesMetaData.TYPE).     logger.debug("license prior to starting basic license: {}", oldLicensesMetaData).     License oldLicense = LicensesMetaData.extractLicense(oldLicensesMetaData).     Map<String, String[]> acknowledgeMessages = ackMessages.get().     if (acknowledgeMessages.isEmpty() == false) {         listener.onResponse(new PostStartBasicResponse(PostStartBasicResponse.Status.NEED_ACKNOWLEDGEMENT, acknowledgeMessages, ACKNOWLEDGEMENT_HEADER)).     } else if (oldLicense != null && oldLicense.type().equals("basic")) {         listener.onResponse(new PostStartBasicResponse(PostStartBasicResponse.Status.ALREADY_USING_BASIC)).     } else {         listener.onResponse(new PostStartBasicResponse(PostStartBasicResponse.Status.GENERATED_BASIC)).     } }
false;public;1;34;;@Override public ClusterState execute(ClusterState currentState) throws Exception {     XPackPlugin.checkReadyForXPackCustomMetadata(currentState).     LicensesMetaData licensesMetaData = currentState.metaData().custom(LicensesMetaData.TYPE).     License currentLicense = LicensesMetaData.extractLicense(licensesMetaData).     if (currentLicense == null || currentLicense.type().equals("basic") == false) {         long issueDate = clock.millis().         MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData()).         License.Builder specBuilder = License.builder().uid(UUID.randomUUID().toString()).issuedTo(clusterName).maxNodes(LicenseService.SELF_GENERATED_LICENSE_MAX_NODES).issueDate(issueDate).type("basic").expiryDate(LicenseService.BASIC_SELF_GENERATED_LICENSE_EXPIRATION_MILLIS).         License selfGeneratedLicense = SelfGeneratedLicense.create(specBuilder, currentState.nodes()).         if (request.isAcknowledged() == false && currentLicense != null) {             Map<String, String[]> ackMessages = LicenseService.getAckMessages(selfGeneratedLicense, currentLicense).             if (ackMessages.isEmpty() == false) {                 this.ackMessages.set(ackMessages).                 return currentState.             }         }         Version trialVersion = null.         if (licensesMetaData != null) {             trialVersion = licensesMetaData.getMostRecentTrialVersion().         }         LicensesMetaData newLicensesMetaData = new LicensesMetaData(selfGeneratedLicense, trialVersion).         mdBuilder.putCustom(LicensesMetaData.TYPE, newLicensesMetaData).         return ClusterState.builder(currentState).metaData(mdBuilder).build().     } else {         return currentState.     } }
false;public;2;5;;@Override public void onFailure(String source, @Nullable Exception e) {     logger.error(new ParameterizedMessage("unexpected failure during [{}]", source), e).     listener.onFailure(e). }
