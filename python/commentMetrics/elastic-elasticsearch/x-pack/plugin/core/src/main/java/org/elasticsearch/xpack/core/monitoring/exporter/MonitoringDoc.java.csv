commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getCluster() {     return cluster. }
false;public;0;3;;public long getTimestamp() {     return timestamp. }
false;public;0;3;;public long getIntervalMillis() {     return intervalMillis. }
false;public;0;3;;public Node getNode() {     return node. }
false;public;0;3;;public MonitoredSystem getSystem() {     return system. }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getId() {     return id. }
false;public;1;17;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     MonitoringDoc that = (MonitoringDoc) o.     return timestamp == that.timestamp && intervalMillis == that.intervalMillis && Objects.equals(cluster, that.cluster) && Objects.equals(node, that.node) && system == that.system && Objects.equals(type, that.type) && Objects.equals(id, that.id). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(cluster, timestamp, intervalMillis, node, system, type, id). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field("cluster_uuid", cluster).         builder.field("timestamp", toUTC(timestamp)).         builder.field("interval_ms", intervalMillis).         builder.field("type", type).         builder.field("source_node", node).         innerToXContent(builder, params).     }     return builder.endObject(). }
false;protected,abstract;2;1;;protected abstract void innerToXContent(XContentBuilder builder, Params params) throws IOException.
true;public,static;1;3;/**  * Converts a timestamp in milliseconds to its {@link String} representation in UTC time.  *  * @param timestamp the timestamp to convert  * @return a string representing the timestamp  */ ;/**  * Converts a timestamp in milliseconds to its {@link String} representation in UTC time.  *  * @param timestamp the timestamp to convert  * @return a string representing the timestamp  */ public static String toUTC(final long timestamp) {     return dateTimeFormatter.formatMillis(timestamp). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(uuid).     out.writeOptionalString(host).     out.writeOptionalString(transportAddress).     out.writeOptionalString(ip).     out.writeOptionalString(name).     if (out.getVersion().onOrAfter(Version.V_6_0_0_rc1)) {         out.writeVLong(timestamp).     } else {         // Write an empty map of node attributes (removed in 6.0 rc1)         out.writeVInt(0).     } }
false;public;0;3;;public String getUUID() {     return uuid. }
false;public;0;3;;public String getHost() {     return host. }
false;public;0;3;;public String getTransportAddress() {     return transportAddress. }
false;public;0;3;;public String getIp() {     return ip. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public long getTimestamp() {     return timestamp. }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field("uuid", uuid).         builder.field("host", host).         builder.field("transport_address", transportAddress).         builder.field("ip", ip).         builder.field("name", name).         builder.field("timestamp", toUTC(timestamp)).     }     return builder.endObject(). }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     Node node = (Node) o.     return Objects.equals(uuid, node.uuid) && Objects.equals(host, node.host) && Objects.equals(transportAddress, node.transportAddress) && Objects.equals(ip, node.ip) && Objects.equals(name, node.name) && Objects.equals(timestamp, node.timestamp). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(uuid, host, transportAddress, ip, name, timestamp). }
