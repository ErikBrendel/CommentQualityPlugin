commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeMap(realmsUsage).     out.writeMap(rolesStoreUsage).     out.writeMap(sslUsage).     if (out.getVersion().onOrAfter(Version.V_7_1_0)) {         out.writeMap(tokenServiceUsage).         out.writeMap(apiKeyServiceUsage).     }     out.writeMap(auditUsage).     out.writeMap(ipFilterUsage).     if (out.getVersion().before(Version.V_6_0_0_beta1)) {         // system key has been removed but older versions still expected it so send a empty map         out.writeMap(Collections.emptyMap()).     }     out.writeMap(anonymousUsage).     out.writeMap(roleMappingStoreUsage). }
false;protected;2;15;;@Override protected void innerXContent(XContentBuilder builder, Params params) throws IOException {     super.innerXContent(builder, params).     if (enabled) {         builder.field(REALMS_XFIELD, realmsUsage).         builder.field(ROLES_XFIELD, rolesStoreUsage).         builder.field(ROLE_MAPPING_XFIELD, roleMappingStoreUsage).         builder.field(SSL_XFIELD, sslUsage).         builder.field(TOKEN_SERVICE_XFIELD, tokenServiceUsage).         builder.field(API_KEY_SERVICE_XFIELD, apiKeyServiceUsage).         builder.field(AUDIT_XFIELD, auditUsage).         builder.field(IP_FILTER_XFIELD, ipFilterUsage).         builder.field(ANONYMOUS_XFIELD, anonymousUsage).     } }
false;public;0;3;;public Map<String, Object> getRealmsUsage() {     return Collections.unmodifiableMap(realmsUsage). }
