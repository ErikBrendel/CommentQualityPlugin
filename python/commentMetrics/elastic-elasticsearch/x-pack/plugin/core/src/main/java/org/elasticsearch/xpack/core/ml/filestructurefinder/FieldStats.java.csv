commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(count).     out.writeVInt(cardinality).     out.writeOptionalDouble(minValue).     out.writeOptionalDouble(maxValue).     out.writeOptionalDouble(meanValue).     out.writeOptionalDouble(medianValue).     out.writeCollection(topHits, StreamOutput::writeMap). }
false;public;0;3;;public long getCount() {     return count. }
false;public;0;3;;public int getCardinality() {     return cardinality. }
false;public;0;3;;public Double getMinValue() {     return minValue. }
false;public;0;3;;public Double getMaxValue() {     return maxValue. }
false;public;0;3;;public Double getMeanValue() {     return meanValue. }
false;public;0;3;;public Double getMedianValue() {     return medianValue. }
false;public;0;3;;public List<Map<String, Object>> getTopHits() {     return topHits. }
false;public;2;25;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(COUNT.getPreferredName(), count).     builder.field(CARDINALITY.getPreferredName(), cardinality).     if (minValue != null) {         builder.field(MIN_VALUE.getPreferredName(), toIntegerIfInteger(minValue)).     }     if (maxValue != null) {         builder.field(MAX_VALUE.getPreferredName(), toIntegerIfInteger(maxValue)).     }     if (meanValue != null) {         builder.field(MEAN_VALUE.getPreferredName(), toIntegerIfInteger(meanValue)).     }     if (medianValue != null) {         builder.field(MEDIAN_VALUE.getPreferredName(), toIntegerIfInteger(medianValue)).     }     if (topHits.isEmpty() == false) {         builder.field(TOP_HITS.getPreferredName(), topHits).     }     builder.endObject().     return builder. }
false;public,static;1;8;;public static Number toIntegerIfInteger(double d) {     if (d >= Integer.MIN_VALUE && d <= Integer.MAX_VALUE && Double.compare(d, StrictMath.rint(d)) == 0) {         return (int) d.     }     return d. }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(count, cardinality, minValue, maxValue, meanValue, medianValue, topHits). }
false;public;1;20;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     FieldStats that = (FieldStats) other.     return this.count == that.count && this.cardinality == that.cardinality && Objects.equals(this.minValue, that.minValue) && Objects.equals(this.maxValue, that.maxValue) && Objects.equals(this.meanValue, that.meanValue) && Objects.equals(this.medianValue, that.medianValue) && Objects.equals(this.topHits, that.topHits). }
