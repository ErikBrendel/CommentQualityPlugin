commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Specifies the grant type for this request. Currently only <code>password</code> is supported  */ ;/**  * Specifies the grant type for this request. Currently only <code>password</code> is supported  */ public CreateTokenRequestBuilder setGrantType(String grantType) {     request.setGrantType(grantType).     return this. }
true;public;1;4;/**  * Set the username to be used for authentication with a password grant  */ ;/**  * Set the username to be used for authentication with a password grant  */ public CreateTokenRequestBuilder setUsername(@Nullable String username) {     request.setUsername(username).     return this. }
true;public;1;4;/**  * Set the password credentials associated with the user. These credentials will be used for  * authentication and the resulting token will be for this user  */ ;/**  * Set the password credentials associated with the user. These credentials will be used for  * authentication and the resulting token will be for this user  */ public CreateTokenRequestBuilder setPassword(@Nullable SecureString password) {     request.setPassword(password).     return this. }
true;public;1;4;/**  * Set the scope of the access token. A <code>null</code> scope implies the default scope. If  * the requested scope differs from the scope of the token, the token's scope will be returned  * in the response  */ ;/**  * Set the scope of the access token. A <code>null</code> scope implies the default scope. If  * the requested scope differs from the scope of the token, the token's scope will be returned  * in the response  */ public CreateTokenRequestBuilder setScope(@Nullable String scope) {     request.setScope(scope).     return this. }
false;public;1;4;;public CreateTokenRequestBuilder setRefreshToken(@Nullable String refreshToken) {     request.setRefreshToken(refreshToken).     return this. }
