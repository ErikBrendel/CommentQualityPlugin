commented;modifiers;parameterAmount;loc;comment;code
false;public;1;48;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         String[] groupsArray = groups == null ? null : groups.toArray(new String[groups.size()]).         out.writeOptionalStringArray(groupsArray).     }     out.writeOptionalString(description).     out.writeBoolean(detectorUpdates != null).     if (detectorUpdates != null) {         out.writeList(detectorUpdates).     }     out.writeOptionalWriteable(modelPlotConfig).     out.writeOptionalWriteable(analysisLimits).     out.writeOptionalLong(renormalizationWindowDays).     out.writeOptionalTimeValue(backgroundPersistInterval).     out.writeOptionalLong(modelSnapshotRetentionDays).     out.writeOptionalLong(resultsRetentionDays).     out.writeBoolean(categorizationFilters != null).     if (categorizationFilters != null) {         out.writeStringCollection(categorizationFilters).     }     out.writeMap(customSettings).     out.writeOptionalString(modelSnapshotId).     // was establishedModelMemory     if (out.getVersion().onOrAfter(Version.V_6_1_0) && out.getVersion().before(Version.V_7_0_0)) {         out.writeOptionalLong(null).     }     if (out.getVersion().onOrAfter(Version.V_6_3_0)) {         if (jobVersion != null) {             out.writeBoolean(true).             Version.writeVersion(jobVersion, out).         } else {             out.writeBoolean(false).         }     }     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeOptionalBoolean(clearJobFinishTime).     }     if (out.getVersion().onOrAfter(Version.V_7_0_0)) {         if (modelSnapshotMinVersion != null) {             out.writeBoolean(true).             Version.writeVersion(modelSnapshotMinVersion, out).         } else {             out.writeBoolean(false).         }     } }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public List<String> getGroups() {     return groups. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public List<DetectorUpdate> getDetectorUpdates() {     return detectorUpdates. }
false;public;0;3;;public ModelPlotConfig getModelPlotConfig() {     return modelPlotConfig. }
false;public;0;3;;public AnalysisLimits getAnalysisLimits() {     return analysisLimits. }
false;public;0;3;;public Long getRenormalizationWindowDays() {     return renormalizationWindowDays. }
false;public;0;3;;public TimeValue getBackgroundPersistInterval() {     return backgroundPersistInterval. }
false;public;0;3;;public Long getModelSnapshotRetentionDays() {     return modelSnapshotRetentionDays. }
false;public;0;3;;public Long getResultsRetentionDays() {     return resultsRetentionDays. }
false;public;0;3;;public List<String> getCategorizationFilters() {     return categorizationFilters. }
false;public;0;3;;public Map<String, Object> getCustomSettings() {     return customSettings. }
false;public;0;3;;public String getModelSnapshotId() {     return modelSnapshotId. }
false;public;0;3;;public Version getModelSnapshotMinVersion() {     return modelSnapshotMinVersion. }
false;public;0;3;;public Version getJobVersion() {     return jobVersion. }
false;public;0;3;;public Boolean getClearJobFinishTime() {     return clearJobFinishTime. }
false;public;0;3;;public boolean isAutodetectProcessUpdate() {     return modelPlotConfig != null || detectorUpdates != null || groups != null. }
false;public;2;52;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (groups != null) {         builder.field(Job.GROUPS.getPreferredName(), groups).     }     if (description != null) {         builder.field(Job.DESCRIPTION.getPreferredName(), description).     }     if (detectorUpdates != null) {         builder.field(DETECTORS.getPreferredName(), detectorUpdates).     }     if (modelPlotConfig != null) {         builder.field(Job.MODEL_PLOT_CONFIG.getPreferredName(), modelPlotConfig).     }     if (analysisLimits != null) {         builder.field(Job.ANALYSIS_LIMITS.getPreferredName(), analysisLimits).     }     if (renormalizationWindowDays != null) {         builder.field(Job.RENORMALIZATION_WINDOW_DAYS.getPreferredName(), renormalizationWindowDays).     }     if (backgroundPersistInterval != null) {         builder.field(Job.BACKGROUND_PERSIST_INTERVAL.getPreferredName(), backgroundPersistInterval).     }     if (modelSnapshotRetentionDays != null) {         builder.field(Job.MODEL_SNAPSHOT_RETENTION_DAYS.getPreferredName(), modelSnapshotRetentionDays).     }     if (resultsRetentionDays != null) {         builder.field(Job.RESULTS_RETENTION_DAYS.getPreferredName(), resultsRetentionDays).     }     if (categorizationFilters != null) {         builder.field(AnalysisConfig.CATEGORIZATION_FILTERS.getPreferredName(), categorizationFilters).     }     if (customSettings != null) {         builder.field(Job.CUSTOM_SETTINGS.getPreferredName(), customSettings).     }     if (modelSnapshotId != null) {         builder.field(Job.MODEL_SNAPSHOT_ID.getPreferredName(), modelSnapshotId).     }     if (modelSnapshotMinVersion != null) {         builder.field(Job.MODEL_SNAPSHOT_MIN_VERSION.getPreferredName(), modelSnapshotMinVersion).     }     if (jobVersion != null) {         builder.field(Job.JOB_VERSION.getPreferredName(), jobVersion).     }     if (clearJobFinishTime != null) {         builder.field(CLEAR_JOB_FINISH_TIME.getPreferredName(), clearJobFinishTime).     }     builder.endObject().     return builder. }
false;public;0;46;;public Set<String> getUpdateFields() {     Set<String> updateFields = new TreeSet<>().     if (groups != null) {         updateFields.add(Job.GROUPS.getPreferredName()).     }     if (description != null) {         updateFields.add(Job.DESCRIPTION.getPreferredName()).     }     if (detectorUpdates != null) {         updateFields.add(DETECTORS.getPreferredName()).     }     if (modelPlotConfig != null) {         updateFields.add(Job.MODEL_PLOT_CONFIG.getPreferredName()).     }     if (analysisLimits != null) {         updateFields.add(Job.ANALYSIS_LIMITS.getPreferredName()).     }     if (renormalizationWindowDays != null) {         updateFields.add(Job.RENORMALIZATION_WINDOW_DAYS.getPreferredName()).     }     if (backgroundPersistInterval != null) {         updateFields.add(Job.BACKGROUND_PERSIST_INTERVAL.getPreferredName()).     }     if (modelSnapshotRetentionDays != null) {         updateFields.add(Job.MODEL_SNAPSHOT_RETENTION_DAYS.getPreferredName()).     }     if (resultsRetentionDays != null) {         updateFields.add(Job.RESULTS_RETENTION_DAYS.getPreferredName()).     }     if (categorizationFilters != null) {         updateFields.add(AnalysisConfig.CATEGORIZATION_FILTERS.getPreferredName()).     }     if (customSettings != null) {         updateFields.add(Job.CUSTOM_SETTINGS.getPreferredName()).     }     if (modelSnapshotId != null) {         updateFields.add(Job.MODEL_SNAPSHOT_ID.getPreferredName()).     }     if (modelSnapshotMinVersion != null) {         updateFields.add(Job.MODEL_SNAPSHOT_MIN_VERSION.getPreferredName()).     }     if (jobVersion != null) {         updateFields.add(Job.JOB_VERSION.getPreferredName()).     }     return updateFields. }
true;public;2;73;/**  * Updates {@code source} with the new values in this object returning a new {@link Job}.  *  * @param source              Source job to be updated  * @param maxModelMemoryLimit The maximum model memory allowed  * @return A new job equivalent to {@code source} updated.  */ ;/**  * Updates {@code source} with the new values in this object returning a new {@link Job}.  *  * @param source              Source job to be updated  * @param maxModelMemoryLimit The maximum model memory allowed  * @return A new job equivalent to {@code source} updated.  */ public Job mergeWithJob(Job source, ByteSizeValue maxModelMemoryLimit) {     Job.Builder builder = new Job.Builder(source).     AnalysisConfig currentAnalysisConfig = source.getAnalysisConfig().     AnalysisConfig.Builder newAnalysisConfig = new AnalysisConfig.Builder(currentAnalysisConfig).     if (groups != null) {         builder.setGroups(groups).     }     if (description != null) {         builder.setDescription(description).     }     if (detectorUpdates != null && detectorUpdates.isEmpty() == false) {         int numDetectors = currentAnalysisConfig.getDetectors().size().         for (DetectorUpdate dd : detectorUpdates) {             if (dd.getDetectorIndex() >= numDetectors) {                 throw ExceptionsHelper.badRequestException("Supplied detector_index [{}] is >= the number of detectors [{}]", dd.getDetectorIndex(), numDetectors).             }             Detector.Builder detectorBuilder = new Detector.Builder(currentAnalysisConfig.getDetectors().get(dd.getDetectorIndex())).             if (dd.getDescription() != null) {                 detectorBuilder.setDetectorDescription(dd.getDescription()).             }             if (dd.getRules() != null) {                 detectorBuilder.setRules(dd.getRules()).             }             newAnalysisConfig.setDetector(dd.getDetectorIndex(), detectorBuilder.build()).         }     }     if (modelPlotConfig != null) {         builder.setModelPlotConfig(modelPlotConfig).     }     if (analysisLimits != null) {         AnalysisLimits validatedLimits = AnalysisLimits.validateAndSetDefaults(analysisLimits, maxModelMemoryLimit, AnalysisLimits.DEFAULT_MODEL_MEMORY_LIMIT_MB).         builder.setAnalysisLimits(validatedLimits).     }     if (renormalizationWindowDays != null) {         builder.setRenormalizationWindowDays(renormalizationWindowDays).     }     if (backgroundPersistInterval != null) {         builder.setBackgroundPersistInterval(backgroundPersistInterval).     }     if (modelSnapshotRetentionDays != null) {         builder.setModelSnapshotRetentionDays(modelSnapshotRetentionDays).     }     if (resultsRetentionDays != null) {         builder.setResultsRetentionDays(resultsRetentionDays).     }     if (categorizationFilters != null) {         newAnalysisConfig.setCategorizationFilters(categorizationFilters).     }     if (customSettings != null) {         builder.setCustomSettings(customSettings).     }     if (modelSnapshotId != null) {         builder.setModelSnapshotId(modelSnapshotId).     }     if (modelSnapshotMinVersion != null) {         builder.setModelSnapshotMinVersion(modelSnapshotMinVersion).     }     if (jobVersion != null) {         builder.setJobVersion(jobVersion).     }     if (clearJobFinishTime != null && clearJobFinishTime) {         builder.setFinishedTime(null).     }     builder.setAnalysisConfig(newAnalysisConfig).     return builder.build(). }
false;;1;18;;boolean isNoop(Job job) {     return (groups == null || Objects.equals(groups, job.getGroups())) && (description == null || Objects.equals(description, job.getDescription())) && (modelPlotConfig == null || Objects.equals(modelPlotConfig, job.getModelPlotConfig())) && (analysisLimits == null || Objects.equals(analysisLimits, job.getAnalysisLimits())) && updatesDetectors(job) == false && (renormalizationWindowDays == null || Objects.equals(renormalizationWindowDays, job.getRenormalizationWindowDays())) && (backgroundPersistInterval == null || Objects.equals(backgroundPersistInterval, job.getBackgroundPersistInterval())) && (modelSnapshotRetentionDays == null || Objects.equals(modelSnapshotRetentionDays, job.getModelSnapshotRetentionDays())) && (resultsRetentionDays == null || Objects.equals(resultsRetentionDays, job.getResultsRetentionDays())) && (categorizationFilters == null || Objects.equals(categorizationFilters, job.getAnalysisConfig().getCategorizationFilters())) && (customSettings == null || Objects.equals(customSettings, job.getCustomSettings())) && (modelSnapshotId == null || Objects.equals(modelSnapshotId, job.getModelSnapshotId())) && (modelSnapshotMinVersion == null || Objects.equals(modelSnapshotMinVersion, job.getModelSnapshotMinVersion())) && (jobVersion == null || Objects.equals(jobVersion, job.getJobVersion())) && ((clearJobFinishTime == null || clearJobFinishTime == false) || job.getFinishedTime() == null). }
false;;1;17;;boolean updatesDetectors(Job job) {     AnalysisConfig analysisConfig = job.getAnalysisConfig().     if (detectorUpdates == null) {         return false.     }     for (DetectorUpdate detectorUpdate : detectorUpdates) {         if (detectorUpdate.description == null && detectorUpdate.rules == null) {             continue.         }         Detector detector = analysisConfig.getDetectors().get(detectorUpdate.detectorIndex).         if (Objects.equals(detectorUpdate.description, detector.getDetectorDescription()) == false || Objects.equals(detectorUpdate.rules, detector.getRules()) == false) {             return true.         }     }     return false. }
false;public;1;29;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof JobUpdate == false) {         return false.     }     JobUpdate that = (JobUpdate) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.groups, that.groups) && Objects.equals(this.description, that.description) && Objects.equals(this.detectorUpdates, that.detectorUpdates) && Objects.equals(this.modelPlotConfig, that.modelPlotConfig) && Objects.equals(this.analysisLimits, that.analysisLimits) && Objects.equals(this.renormalizationWindowDays, that.renormalizationWindowDays) && Objects.equals(this.backgroundPersistInterval, that.backgroundPersistInterval) && Objects.equals(this.modelSnapshotRetentionDays, that.modelSnapshotRetentionDays) && Objects.equals(this.resultsRetentionDays, that.resultsRetentionDays) && Objects.equals(this.categorizationFilters, that.categorizationFilters) && Objects.equals(this.customSettings, that.customSettings) && Objects.equals(this.modelSnapshotId, that.modelSnapshotId) && Objects.equals(this.modelSnapshotMinVersion, that.modelSnapshotMinVersion) && Objects.equals(this.jobVersion, that.jobVersion) && Objects.equals(this.clearJobFinishTime, that.clearJobFinishTime). }
false;public;0;6;;@Override public int hashCode() {     return Objects.hash(jobId, groups, description, detectorUpdates, modelPlotConfig, analysisLimits, renormalizationWindowDays, backgroundPersistInterval, modelSnapshotRetentionDays, resultsRetentionDays, categorizationFilters, customSettings, modelSnapshotId, modelSnapshotMinVersion, jobVersion, clearJobFinishTime). }
false;public;0;3;;public int getDetectorIndex() {     return detectorIndex. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public List<DetectionRule> getRules() {     return rules. }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeInt(detectorIndex).     out.writeOptionalString(description).     out.writeBoolean(rules != null).     if (rules != null) {         out.writeList(rules).     } }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Detector.DETECTOR_INDEX.getPreferredName(), detectorIndex).     if (description != null) {         builder.field(Job.DESCRIPTION.getPreferredName(), description).     }     if (rules != null) {         builder.field(Detector.CUSTOM_RULES_FIELD.getPreferredName(), rules).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(detectorIndex, description, rules). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof DetectorUpdate == false) {         return false.     }     DetectorUpdate that = (DetectorUpdate) other.     return this.detectorIndex == that.detectorIndex && Objects.equals(this.description, that.description) && Objects.equals(this.rules, that.rules). }
false;public;1;4;;public Builder setJobId(String jobId) {     this.jobId = jobId.     return this. }
false;public;1;4;;public Builder setGroups(List<String> groups) {     this.groups = groups.     return this. }
false;public;1;4;;public Builder setDescription(String description) {     this.description = description.     return this. }
false;public;1;4;;public Builder setDetectorUpdates(List<DetectorUpdate> detectorUpdates) {     this.detectorUpdates = detectorUpdates.     return this. }
false;public;1;4;;public Builder setModelPlotConfig(ModelPlotConfig modelPlotConfig) {     this.modelPlotConfig = modelPlotConfig.     return this. }
false;public;1;4;;public Builder setAnalysisLimits(AnalysisLimits analysisLimits) {     this.analysisLimits = analysisLimits.     return this. }
false;public;1;4;;public Builder setRenormalizationWindowDays(Long renormalizationWindowDays) {     this.renormalizationWindowDays = renormalizationWindowDays.     return this. }
false;public;1;4;;public Builder setBackgroundPersistInterval(TimeValue backgroundPersistInterval) {     this.backgroundPersistInterval = backgroundPersistInterval.     return this. }
false;public;1;4;;public Builder setModelSnapshotRetentionDays(Long modelSnapshotRetentionDays) {     this.modelSnapshotRetentionDays = modelSnapshotRetentionDays.     return this. }
false;public;1;4;;public Builder setResultsRetentionDays(Long resultsRetentionDays) {     this.resultsRetentionDays = resultsRetentionDays.     return this. }
false;public;1;4;;public Builder setCategorizationFilters(List<String> categorizationFilters) {     this.categorizationFilters = categorizationFilters.     return this. }
false;public;1;4;;public Builder setCustomSettings(Map<String, Object> customSettings) {     this.customSettings = customSettings.     return this. }
false;public;1;4;;public Builder setModelSnapshotId(String modelSnapshotId) {     this.modelSnapshotId = modelSnapshotId.     return this. }
false;public;1;4;;public Builder setModelSnapshotMinVersion(Version modelSnapshotMinVersion) {     this.modelSnapshotMinVersion = modelSnapshotMinVersion.     return this. }
false;public;1;4;;public Builder setModelSnapshotMinVersion(String modelSnapshotMinVersion) {     this.modelSnapshotMinVersion = Version.fromString(modelSnapshotMinVersion).     return this. }
false;public;1;4;;public Builder setJobVersion(Version version) {     this.jobVersion = version.     return this. }
false;public;1;4;;public Builder setJobVersion(String version) {     this.jobVersion = Version.fromString(version).     return this. }
false;public;1;4;;public Builder setClearFinishTime(boolean clearJobFinishTime) {     this.clearJobFinishTime = clearJobFinishTime.     return this. }
false;public;0;5;;public JobUpdate build() {     return new JobUpdate(jobId, groups, description, detectorUpdates, modelPlotConfig, analysisLimits, backgroundPersistInterval, renormalizationWindowDays, resultsRetentionDays, modelSnapshotRetentionDays, categorizationFilters, customSettings, modelSnapshotId, modelSnapshotMinVersion, jobVersion, clearJobFinishTime). }
