commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static AllocateAction parse(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;0;3;;public Integer getNumberOfReplicas() {     return numberOfReplicas. }
false;public;0;3;;public Map<String, String> getInclude() {     return include. }
false;public;0;3;;public Map<String, String> getExclude() {     return exclude. }
false;public;0;3;;public Map<String, String> getRequire() {     return require. }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalVInt(numberOfReplicas).     out.writeGenericValue(include).     out.writeGenericValue(exclude).     out.writeGenericValue(require). }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (numberOfReplicas != null) {         builder.field(NUMBER_OF_REPLICAS_FIELD.getPreferredName(), numberOfReplicas).     }     builder.field(INCLUDE_FIELD.getPreferredName(), include).     builder.field(EXCLUDE_FIELD.getPreferredName(), exclude).     builder.field(REQUIRE_FIELD.getPreferredName(), require).     builder.endObject().     return builder. }
false;public;0;4;;@Override public boolean isSafeAction() {     return true. }
false;public;3;16;;@Override public List<Step> toSteps(Client client, String phase, StepKey nextStepKey) {     StepKey allocateKey = new StepKey(phase, NAME, NAME).     StepKey allocationRoutedKey = new StepKey(phase, NAME, AllocationRoutedStep.NAME).     Settings.Builder newSettings = Settings.builder().     if (numberOfReplicas != null) {         newSettings.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, numberOfReplicas).     }     include.forEach((key, value) -> newSettings.put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + key, value)).     exclude.forEach((key, value) -> newSettings.put(IndexMetaData.INDEX_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + key, value)).     require.forEach((key, value) -> newSettings.put(IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING.getKey() + key, value)).     UpdateSettingsStep allocateStep = new UpdateSettingsStep(allocateKey, allocationRoutedKey, client, newSettings.build()).     AllocationRoutedStep routedCheckStep = new AllocationRoutedStep(allocationRoutedKey, nextStepKey).     return Arrays.asList(allocateStep, routedCheckStep). }
false;public;1;6;;@Override public List<StepKey> toStepKeys(String phase) {     StepKey allocateKey = new StepKey(phase, NAME, NAME).     StepKey allocationRoutedKey = new StepKey(phase, NAME, AllocationRoutedStep.NAME).     return Arrays.asList(allocateKey, allocationRoutedKey). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(numberOfReplicas, include, exclude, require). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     AllocateAction other = (AllocateAction) obj.     return Objects.equals(numberOfReplicas, other.numberOfReplicas) && Objects.equals(include, other.include) && Objects.equals(exclude, other.exclude) && Objects.equals(require, other.require). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
