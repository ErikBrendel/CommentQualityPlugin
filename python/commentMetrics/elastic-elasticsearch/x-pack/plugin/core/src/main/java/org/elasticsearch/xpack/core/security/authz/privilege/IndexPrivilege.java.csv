commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static IndexPrivilege get(Set<String> name) {     return CACHE.computeIfAbsent(name, (theName) -> {         if (theName.isEmpty()) {             return NONE.         } else {             return resolve(theName).         }     }). }
false;private,static;1;32;;private static IndexPrivilege resolve(Set<String> name) {     final int size = name.size().     if (size == 0) {         throw new IllegalArgumentException("empty set should not be used").     }     Set<String> actions = new HashSet<>().     Set<Automaton> automata = new HashSet<>().     for (String part : name) {         part = part.toLowerCase(Locale.ROOT).         if (ACTION_MATCHER.test(part)) {             actions.add(actionToPattern(part)).         } else {             IndexPrivilege indexPrivilege = VALUES.get(part).             if (indexPrivilege != null && size == 1) {                 return indexPrivilege.             } else if (indexPrivilege != null) {                 automata.add(indexPrivilege.automaton).             } else {                 throw new IllegalArgumentException("unknown index privilege [" + part + "]. a privilege must be either " + "one of the predefined fixed indices privileges [" + Strings.collectionToCommaDelimitedString(VALUES.entrySet()) + "] or a pattern over one of the available index" + " actions").             }         }     }     if (actions.isEmpty() == false) {         automata.add(patterns(actions)).     }     return new IndexPrivilege(name, unionAndMinimize(automata)). }
false;static;0;3;;static Map<String, IndexPrivilege> values() {     return VALUES. }
