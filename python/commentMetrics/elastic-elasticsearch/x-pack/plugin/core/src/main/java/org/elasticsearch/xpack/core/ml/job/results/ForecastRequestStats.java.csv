commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;27;;private static ConstructingObjectParser<ForecastRequestStats, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<ForecastRequestStats, Void> parser = new ConstructingObjectParser<>(RESULT_TYPE_VALUE, ignoreUnknownFields, a -> new ForecastRequestStats((String) a[0], (String) a[1])).     parser.declareString(ConstructingObjectParser.constructorArg(), Job.ID).     parser.declareString(ConstructingObjectParser.constructorArg(), FORECAST_ID).     parser.declareString((modelForecastRequestStats, s) -> {     }, Result.RESULT_TYPE).     parser.declareLong(ForecastRequestStats::setRecordCount, PROCESSED_RECORD_COUNT).     parser.declareStringArray(ForecastRequestStats::setMessages, MESSAGES).     parser.declareField(ForecastRequestStats::setTimeStamp, p -> Instant.ofEpochMilli(p.longValue()), Result.TIMESTAMP, ValueType.LONG).     parser.declareField(ForecastRequestStats::setStartTime, p -> Instant.ofEpochMilli(p.longValue()), START_TIME, ValueType.LONG).     parser.declareField(ForecastRequestStats::setEndTime, p -> Instant.ofEpochMilli(p.longValue()), END_TIME, ValueType.LONG).     parser.declareField(ForecastRequestStats::setCreateTime, p -> Instant.ofEpochMilli(p.longValue()), CREATE_TIME, ValueType.LONG).     parser.declareField(ForecastRequestStats::setExpiryTime, p -> Instant.ofEpochMilli(p.longValue()), EXPIRY_TIME, ValueType.LONG).     parser.declareDouble(ForecastRequestStats::setProgress, PROGRESS).     parser.declareLong(ForecastRequestStats::setProcessingTime, PROCESSING_TIME_MS).     parser.declareField(ForecastRequestStats::setStatus, p -> ForecastRequestStatus.fromString(p.text()), STATUS, ValueType.STRING).     parser.declareLong(ForecastRequestStats::setMemoryUsage, MEMORY_USAGE).     return parser. }
false;public,static;1;3;;public static ForecastRequestStatus fromString(String statusName) {     return valueOf(statusName.trim().toUpperCase(Locale.ROOT)). }
false;public,static;1;3;;public static ForecastRequestStatus readFromStream(StreamInput in) throws IOException {     return in.readEnum(ForecastRequestStatus.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
false;public;1;21;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeString(forecastId).     out.writeLong(recordCount).     if (messages != null) {         out.writeBoolean(true).         out.writeStringCollection(messages).     } else {         out.writeBoolean(false).     }     out.writeVLong(timestamp.toEpochMilli()).     out.writeVLong(startTime.toEpochMilli()).     out.writeVLong(endTime.toEpochMilli()).     out.writeVLong(createTime.toEpochMilli()).     out.writeVLong(expiryTime.toEpochMilli()).     out.writeDouble(progress).     out.writeLong(processingTime).     out.writeLong(getMemoryUsage()).     status.writeTo(out). }
false;public;2;32;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.field(FORECAST_ID.getPreferredName(), forecastId).     builder.field(PROCESSED_RECORD_COUNT.getPreferredName(), recordCount).     if (messages != null) {         builder.field(MESSAGES.getPreferredName(), messages).     }     if (timestamp.equals(Instant.EPOCH) == false) {         builder.field(Result.TIMESTAMP.getPreferredName(), timestamp.toEpochMilli()).     }     if (startTime.equals(Instant.EPOCH) == false) {         builder.field(START_TIME.getPreferredName(), startTime.toEpochMilli()).     }     if (endTime.equals(Instant.EPOCH) == false) {         builder.field(END_TIME.getPreferredName(), endTime.toEpochMilli()).     }     if (createTime.equals(Instant.EPOCH) == false) {         builder.field(CREATE_TIME.getPreferredName(), createTime.toEpochMilli()).     }     if (expiryTime.equals(Instant.EPOCH) == false) {         builder.field(EXPIRY_TIME.getPreferredName(), expiryTime.toEpochMilli()).     }     builder.field(PROGRESS.getPreferredName(), progress).     builder.field(PROCESSING_TIME_MS.getPreferredName(), processingTime).     builder.field(MEMORY_USAGE.getPreferredName(), getMemoryUsage()).     builder.field(STATUS.getPreferredName(), status).     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getForecastId() {     return forecastId. }
false;public,static;2;3;;public static String documentId(String jobId, String forecastId) {     return jobId + "_model_forecast_request_stats_" + forecastId. }
true;public;0;3;/**  * Return the document ID used for indexing. As there is 1 and only 1 document  * per forecast request, the id has no dynamic parts.  *  * @return id  */ ;/**  * Return the document ID used for indexing. As there is 1 and only 1 document  * per forecast request, the id has no dynamic parts.  *  * @return id  */ public String getId() {     return documentId(jobId, forecastId). }
false;public;1;3;;public void setRecordCount(long recordCount) {     this.recordCount = recordCount. }
false;public;0;3;;public long getRecordCount() {     return recordCount. }
false;public;0;3;;public List<String> getMessages() {     return messages. }
false;public;1;3;;public void setMessages(List<String> messages) {     this.messages = messages. }
false;public;1;3;;public void setTimeStamp(Instant timestamp) {     this.timestamp = timestamp. }
false;public;0;3;;public Instant getTimestamp() {     return timestamp. }
false;public;1;3;;public void setStartTime(Instant startTime) {     this.startTime = startTime. }
false;public;0;3;;public Instant getStartTime() {     return startTime. }
false;public;0;3;;public Instant getEndTime() {     return endTime. }
false;public;1;3;;public void setEndTime(Instant endTime) {     this.endTime = endTime. }
false;public;1;3;;public void setCreateTime(Instant createTime) {     this.createTime = createTime. }
false;public;0;3;;public Instant getCreateTime() {     return createTime. }
false;public;1;3;;public void setExpiryTime(Instant expiryTime) {     this.expiryTime = expiryTime. }
false;public;0;3;;public Instant getExpiryTime() {     return expiryTime. }
true;public;0;3;/**  * Progress information of the ForecastRequest in the range 0 to 1,  * while 1 means finished  *  * @return progress value  */ ;/**  * Progress information of the ForecastRequest in the range 0 to 1,  * while 1 means finished  *  * @return progress value  */ public double getProgress() {     return progress. }
false;public;1;3;;public void setProgress(double progress) {     this.progress = progress. }
false;public;0;3;;public long getProcessingTime() {     return processingTime. }
false;public;1;3;;public void setProcessingTime(long processingTime) {     this.processingTime = processingTime. }
false;public;0;3;;public long getMemoryUsage() {     return memoryUsage. }
false;public;1;3;;public void setMemoryUsage(long memoryUsage) {     this.memoryUsage = memoryUsage. }
false;public;0;3;;public ForecastRequestStatus getStatus() {     return status. }
false;public;1;4;;public void setStatus(ForecastRequestStatus jobStatus) {     Objects.requireNonNull(jobStatus, "[" + STATUS.getPreferredName() + "] must not be null").     this.status = jobStatus. }
false;public;1;23;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof ForecastRequestStats == false) {         return false.     }     ForecastRequestStats that = (ForecastRequestStats) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.forecastId, that.forecastId) && this.recordCount == that.recordCount && Objects.equals(this.messages, that.messages) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.startTime, that.startTime) && Objects.equals(this.endTime, that.endTime) && Objects.equals(this.createTime, that.createTime) && Objects.equals(this.expiryTime, that.expiryTime) && this.progress == that.progress && this.processingTime == that.processingTime && this.memoryUsage == that.memoryUsage && Objects.equals(this.status, that.status). }
false;public;0;5;;@Override public int hashCode() {     return Objects.hash(jobId, forecastId, recordCount, messages, timestamp, startTime, endTime, createTime, expiryTime, progress, processingTime, memoryUsage, status). }
