# id;timestamp;commentText;codeText;commentWords;codeWords
ScheduledEvent -> public DetectionRule toDetectionRule(TimeValue bucketSpan);1524684173;Convert the scheduled event to a detection rule._The rule will have 2 time based conditions for the start and_end of the event.__The rule's start and end times are aligned with the bucket span_so the start time is rounded down to a bucket interval and the_end time rounded up.__@param bucketSpan Bucket span to align to_@return The event as a detection rule.;public DetectionRule toDetectionRule(TimeValue bucketSpan) {_        List<RuleCondition> conditions = new ArrayList<>()___        long bucketSpanSecs = bucketSpan.getSeconds()___        long bucketStartTime = Intervals.alignToFloor(getStartTime().toEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.GTE, bucketStartTime))__        long bucketEndTime = Intervals.alignToCeil(getEndTime().toEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.LT, bucketEndTime))___        DetectionRule.Builder builder = new DetectionRule.Builder(conditions)__        builder.setActions(RuleAction.FILTER_RESULTS, RuleAction.SKIP_SAMPLING)__        builder.setConditionsConnective(Connective.AND)__        return builder.build()__    };convert,the,scheduled,event,to,a,detection,rule,the,rule,will,have,2,time,based,conditions,for,the,start,and,end,of,the,event,the,rule,s,start,and,end,times,are,aligned,with,the,bucket,span,so,the,start,time,is,rounded,down,to,a,bucket,interval,and,the,end,time,rounded,up,param,bucket,span,bucket,span,to,align,to,return,the,event,as,a,detection,rule;public,detection,rule,to,detection,rule,time,value,bucket,span,list,rule,condition,conditions,new,array,list,long,bucket,span,secs,bucket,span,get,seconds,long,bucket,start,time,intervals,align,to,floor,get,start,time,to,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,gte,bucket,start,time,long,bucket,end,time,intervals,align,to,ceil,get,end,time,to,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,lt,bucket,end,time,detection,rule,builder,builder,new,detection,rule,builder,conditions,builder,set,actions,rule,action,rule,action,builder,set,conditions,connective,connective,and,return,builder,build
ScheduledEvent -> public DetectionRule toDetectionRule(TimeValue bucketSpan);1528893677;Convert the scheduled event to a detection rule._The rule will have 2 time based conditions for the start and_end of the event.__The rule's start and end times are aligned with the bucket span_so the start time is rounded down to a bucket interval and the_end time rounded up.__@param bucketSpan Bucket span to align to_@return The event as a detection rule.;public DetectionRule toDetectionRule(TimeValue bucketSpan) {_        List<RuleCondition> conditions = new ArrayList<>()___        long bucketSpanSecs = bucketSpan.getSeconds()___        long bucketStartTime = Intervals.alignToFloor(getStartTime().toEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.GTE, bucketStartTime))__        long bucketEndTime = Intervals.alignToCeil(getEndTime().toEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.LT, bucketEndTime))___        DetectionRule.Builder builder = new DetectionRule.Builder(conditions)__        builder.setActions(RuleAction.SKIP_RESULT, RuleAction.SKIP_MODEL_UPDATE)__        return builder.build()__    };convert,the,scheduled,event,to,a,detection,rule,the,rule,will,have,2,time,based,conditions,for,the,start,and,end,of,the,event,the,rule,s,start,and,end,times,are,aligned,with,the,bucket,span,so,the,start,time,is,rounded,down,to,a,bucket,interval,and,the,end,time,rounded,up,param,bucket,span,bucket,span,to,align,to,return,the,event,as,a,detection,rule;public,detection,rule,to,detection,rule,time,value,bucket,span,list,rule,condition,conditions,new,array,list,long,bucket,span,secs,bucket,span,get,seconds,long,bucket,start,time,intervals,align,to,floor,get,start,time,to,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,gte,bucket,start,time,long,bucket,end,time,intervals,align,to,ceil,get,end,time,to,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,lt,bucket,end,time,detection,rule,builder,builder,new,detection,rule,builder,conditions,builder,set,actions,rule,action,rule,action,return,builder,build
ScheduledEvent -> public DetectionRule toDetectionRule(TimeValue bucketSpan);1545155131;Convert the scheduled event to a detection rule._The rule will have 2 time based conditions for the start and_end of the event.__The rule's start and end times are aligned with the bucket span_so the start time is rounded down to a bucket interval and the_end time rounded up.__@param bucketSpan Bucket span to align to_@return The event as a detection rule.;public DetectionRule toDetectionRule(TimeValue bucketSpan) {_        List<RuleCondition> conditions = new ArrayList<>()___        long bucketSpanSecs = bucketSpan.getSeconds()___        long bucketStartTime = Intervals.alignToFloor(getStartTime().toEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.GTE, bucketStartTime))__        long bucketEndTime = Intervals.alignToCeil(getEndTime().toEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.LT, bucketEndTime))___        DetectionRule.Builder builder = new DetectionRule.Builder(conditions)__        builder.setActions(RuleAction.SKIP_RESULT, RuleAction.SKIP_MODEL_UPDATE)__        return builder.build()__    };convert,the,scheduled,event,to,a,detection,rule,the,rule,will,have,2,time,based,conditions,for,the,start,and,end,of,the,event,the,rule,s,start,and,end,times,are,aligned,with,the,bucket,span,so,the,start,time,is,rounded,down,to,a,bucket,interval,and,the,end,time,rounded,up,param,bucket,span,bucket,span,to,align,to,return,the,event,as,a,detection,rule;public,detection,rule,to,detection,rule,time,value,bucket,span,list,rule,condition,conditions,new,array,list,long,bucket,span,secs,bucket,span,get,seconds,long,bucket,start,time,intervals,align,to,floor,get,start,time,to,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,gte,bucket,start,time,long,bucket,end,time,intervals,align,to,ceil,get,end,time,to,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,lt,bucket,end,time,detection,rule,builder,builder,new,detection,rule,builder,conditions,builder,set,actions,rule,action,rule,action,return,builder,build
ScheduledEvent -> public DetectionRule toDetectionRule(TimeValue bucketSpan);1551259083;Convert the scheduled event to a detection rule._The rule will have 2 time based conditions for the start and_end of the event.__The rule's start and end times are aligned with the bucket span_so the start time is rounded down to a bucket interval and the_end time rounded up.__@param bucketSpan Bucket span to align to_@return The event as a detection rule.;public DetectionRule toDetectionRule(TimeValue bucketSpan) {_        List<RuleCondition> conditions = new ArrayList<>()___        long bucketSpanSecs = bucketSpan.getSeconds()___        long bucketStartTime = Intervals.alignToFloor(getStartTime().getEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.GTE, bucketStartTime))__        long bucketEndTime = Intervals.alignToCeil(getEndTime().getEpochSecond(), bucketSpanSecs)__        conditions.add(RuleCondition.createTime(Operator.LT, bucketEndTime))___        DetectionRule.Builder builder = new DetectionRule.Builder(conditions)__        builder.setActions(RuleAction.SKIP_RESULT, RuleAction.SKIP_MODEL_UPDATE)__        return builder.build()__    };convert,the,scheduled,event,to,a,detection,rule,the,rule,will,have,2,time,based,conditions,for,the,start,and,end,of,the,event,the,rule,s,start,and,end,times,are,aligned,with,the,bucket,span,so,the,start,time,is,rounded,down,to,a,bucket,interval,and,the,end,time,rounded,up,param,bucket,span,bucket,span,to,align,to,return,the,event,as,a,detection,rule;public,detection,rule,to,detection,rule,time,value,bucket,span,list,rule,condition,conditions,new,array,list,long,bucket,span,secs,bucket,span,get,seconds,long,bucket,start,time,intervals,align,to,floor,get,start,time,get,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,gte,bucket,start,time,long,bucket,end,time,intervals,align,to,ceil,get,end,time,get,epoch,second,bucket,span,secs,conditions,add,rule,condition,create,time,operator,lt,bucket,end,time,detection,rule,builder,builder,new,detection,rule,builder,conditions,builder,set,actions,rule,action,rule,action,return,builder,build
