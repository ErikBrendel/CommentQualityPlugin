commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Clears the realm caches. It's possible to clear all user entries from all realms in the cluster or alternatively  * select the realms (by their unique names) and/or users (by their usernames) that should be evicted.  */ ;/**  * *************  *  authc things *  * **************  */ /**  * Clears the realm caches. It's possible to clear all user entries from all realms in the cluster or alternatively  * select the realms (by their unique names) and/or users (by their usernames) that should be evicted.  */ public ClearRealmCacheRequestBuilder prepareClearRealmCache() {     return new ClearRealmCacheRequestBuilder(client). }
true;public;2;3;/**  * Clears the realm caches. It's possible to clear all user entries from all realms in the cluster or alternatively  * select the realms (by their unique names) and/or users (by their usernames) that should be evicted.  */ ;/**  * Clears the realm caches. It's possible to clear all user entries from all realms in the cluster or alternatively  * select the realms (by their unique names) and/or users (by their usernames) that should be evicted.  */ public void clearRealmCache(ClearRealmCacheRequest request, ActionListener<ClearRealmCacheResponse> listener) {     client.execute(ClearRealmCacheAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Clears the realm caches. It's possible to clear all user entries from all realms in the cluster or alternatively  * select the realms (by their unique names) and/or users (by their usernames) that should be evicted.  */ ;/**  * Clears the realm caches. It's possible to clear all user entries from all realms in the cluster or alternatively  * select the realms (by their unique names) and/or users (by their usernames) that should be evicted.  */ public ActionFuture<ClearRealmCacheResponse> clearRealmCache(ClearRealmCacheRequest request) {     return client.execute(ClearRealmCacheAction.INSTANCE, request). }
true;public;0;3;/**  * Clears the roles cache. This API only works for the naitve roles that are stored in an elasticsearch index. It is  * possible to clear the cache of all roles or to specify the names of individual roles that should have their cache  * cleared.  */ ;/**  * *************  *  authz things *  * **************  */ /**  * Clears the roles cache. This API only works for the naitve roles that are stored in an elasticsearch index. It is  * possible to clear the cache of all roles or to specify the names of individual roles that should have their cache  * cleared.  */ public ClearRolesCacheRequestBuilder prepareClearRolesCache() {     return new ClearRolesCacheRequestBuilder(client). }
true;public;2;3;/**  * Clears the roles cache. This API only works for the naitve roles that are stored in an elasticsearch index. It is  * possible to clear the cache of all roles or to specify the names of individual roles that should have their cache  * cleared.  */ ;/**  * Clears the roles cache. This API only works for the naitve roles that are stored in an elasticsearch index. It is  * possible to clear the cache of all roles or to specify the names of individual roles that should have their cache  * cleared.  */ public void clearRolesCache(ClearRolesCacheRequest request, ActionListener<ClearRolesCacheResponse> listener) {     client.execute(ClearRolesCacheAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Clears the roles cache. This API only works for the naitve roles that are stored in an elasticsearch index. It is  * possible to clear the cache of all roles or to specify the names of individual roles that should have their cache  * cleared.  */ ;/**  * Clears the roles cache. This API only works for the naitve roles that are stored in an elasticsearch index. It is  * possible to clear the cache of all roles or to specify the names of individual roles that should have their cache  * cleared.  */ public ActionFuture<ClearRolesCacheResponse> clearRolesCache(ClearRolesCacheRequest request) {     return client.execute(ClearRolesCacheAction.INSTANCE, request). }
true;public;1;3;/**  * Permissions / Privileges  */ ;/**  * Permissions / Privileges  */ public HasPrivilegesRequestBuilder prepareHasPrivileges(String username) {     return new HasPrivilegesRequestBuilder(client).username(username). }
false;public;3;4;;public HasPrivilegesRequestBuilder prepareHasPrivileges(String username, BytesReference source, XContentType xContentType) throws IOException {     return new HasPrivilegesRequestBuilder(client).source(username, source, xContentType). }
false;public;2;3;;public void hasPrivileges(HasPrivilegesRequest request, ActionListener<HasPrivilegesResponse> listener) {     client.execute(HasPrivilegesAction.INSTANCE, request, listener). }
false;public;1;3;;public GetUserPrivilegesRequestBuilder prepareGetUserPrivileges(String username) {     return new GetUserPrivilegesRequestBuilder(client).username(username). }
false;public;2;3;;public void listUserPrivileges(GetUserPrivilegesRequest request, ActionListener<GetUserPrivilegesResponse> listener) {     client.execute(GetUserPrivilegesAction.INSTANCE, request, listener). }
false;public;1;3;;/**  * User Management  */ public GetUsersRequestBuilder prepareGetUsers(String... usernames) {     return new GetUsersRequestBuilder(client).usernames(usernames). }
false;public;2;3;;public void getUsers(GetUsersRequest request, ActionListener<GetUsersResponse> listener) {     client.execute(GetUsersAction.INSTANCE, request, listener). }
false;public;1;3;;public DeleteUserRequestBuilder prepareDeleteUser(String username) {     return new DeleteUserRequestBuilder(client).username(username). }
false;public;2;3;;public void deleteUser(DeleteUserRequest request, ActionListener<DeleteUserResponse> listener) {     client.execute(DeleteUserAction.INSTANCE, request, listener). }
false;public;4;4;;public PutUserRequestBuilder preparePutUser(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws IOException {     return new PutUserRequestBuilder(client).source(username, source, xContentType, hasher). }
false;public;4;3;;public PutUserRequestBuilder preparePutUser(String username, char[] password, Hasher hasher, String... roles) {     return new PutUserRequestBuilder(client).username(username).password(password, hasher).roles(roles). }
false;public;2;3;;public void putUser(PutUserRequest request, ActionListener<PutUserResponse> listener) {     client.execute(PutUserAction.INSTANCE, request, listener). }
true;public;3;3;/**  * Populates the {@link ChangePasswordRequest} with the username and password. Note: the passed in char[] will be cleared by this  * method.  */ ;/**  * Populates the {@link ChangePasswordRequest} with the username and password. Note: the passed in char[] will be cleared by this  * method.  */ public ChangePasswordRequestBuilder prepareChangePassword(String username, char[] password, Hasher hasher) {     return new ChangePasswordRequestBuilder(client).username(username).password(password, hasher). }
false;public;4;4;;public ChangePasswordRequestBuilder prepareChangePassword(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws IOException {     return new ChangePasswordRequestBuilder(client).username(username).source(source, xContentType, hasher). }
false;public;2;3;;public void changePassword(ChangePasswordRequest request, ActionListener<ChangePasswordResponse> listener) {     client.execute(ChangePasswordAction.INSTANCE, request, listener). }
false;public;2;3;;public SetEnabledRequestBuilder prepareSetEnabled(String username, boolean enabled) {     return new SetEnabledRequestBuilder(client).username(username).enabled(enabled). }
false;public;2;3;;public void setEnabled(SetEnabledRequest request, ActionListener<SetEnabledResponse> listener) {     client.execute(SetEnabledAction.INSTANCE, request, listener). }
false;public;1;3;;/**  * Role Management  */ public GetRolesRequestBuilder prepareGetRoles(String... names) {     return new GetRolesRequestBuilder(client).names(names). }
false;public;2;3;;public void getRoles(GetRolesRequest request, ActionListener<GetRolesResponse> listener) {     client.execute(GetRolesAction.INSTANCE, request, listener). }
false;public;1;3;;public DeleteRoleRequestBuilder prepareDeleteRole(String name) {     return new DeleteRoleRequestBuilder(client).name(name). }
false;public;2;3;;public void deleteRole(DeleteRoleRequest request, ActionListener<DeleteRoleResponse> listener) {     client.execute(DeleteRoleAction.INSTANCE, request, listener). }
false;public;1;3;;public PutRoleRequestBuilder preparePutRole(String name) {     return new PutRoleRequestBuilder(client).name(name). }
false;public;3;3;;public PutRoleRequestBuilder preparePutRole(String name, BytesReference source, XContentType xContentType) throws IOException {     return new PutRoleRequestBuilder(client).source(name, source, xContentType). }
false;public;2;3;;public void putRole(PutRoleRequest request, ActionListener<PutRoleResponse> listener) {     client.execute(PutRoleAction.INSTANCE, request, listener). }
false;public;1;4;;/**  * Role Mappings  */ public GetRoleMappingsRequestBuilder prepareGetRoleMappings(String... names) {     return new GetRoleMappingsRequestBuilder(client, GetRoleMappingsAction.INSTANCE).names(names). }
false;public;2;4;;public void getRoleMappings(GetRoleMappingsRequest request, ActionListener<GetRoleMappingsResponse> listener) {     client.execute(GetRoleMappingsAction.INSTANCE, request, listener). }
false;public;3;4;;public PutRoleMappingRequestBuilder preparePutRoleMapping(String name, BytesReference content, XContentType xContentType) throws IOException {     return new PutRoleMappingRequestBuilder(client, PutRoleMappingAction.INSTANCE).source(name, content, xContentType). }
false;public;1;4;;public DeleteRoleMappingRequestBuilder prepareDeleteRoleMapping(String name) {     return new DeleteRoleMappingRequestBuilder(client, DeleteRoleMappingAction.INSTANCE).name(name). }
true;public;2;3;/* -- Application Privileges -- */ ;/* -- Application Privileges -- */ public GetPrivilegesRequestBuilder prepareGetPrivileges(String applicationName, String[] privileges) {     return new GetPrivilegesRequestBuilder(client, GetPrivilegesAction.INSTANCE).application(applicationName).privileges(privileges). }
false;public;2;3;;public PutPrivilegesRequestBuilder preparePutPrivileges(BytesReference bytesReference, XContentType xContentType) throws IOException {     return new PutPrivilegesRequestBuilder(client, PutPrivilegesAction.INSTANCE).source(bytesReference, xContentType). }
false;public;2;5;;public DeletePrivilegesRequestBuilder prepareDeletePrivileges(String applicationName, String[] privileges) {     return new DeletePrivilegesRequestBuilder(client, DeletePrivilegesAction.INSTANCE).application(applicationName).privileges(privileges). }
false;public;0;3;;public CreateTokenRequestBuilder prepareCreateToken() {     return new CreateTokenRequestBuilder(client, CreateTokenAction.INSTANCE). }
false;public;2;3;;public void createToken(CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {     client.execute(CreateTokenAction.INSTANCE, request, listener). }
false;public;1;3;;public InvalidateTokenRequestBuilder prepareInvalidateToken(String token) {     return new InvalidateTokenRequestBuilder(client).setTokenString(token). }
false;public;0;3;;public InvalidateTokenRequestBuilder prepareInvalidateToken() {     return new InvalidateTokenRequestBuilder(client). }
false;public;2;3;;public void invalidateToken(InvalidateTokenRequest request, ActionListener<InvalidateTokenResponse> listener) {     client.execute(InvalidateTokenAction.INSTANCE, request, listener). }
true;public;0;3;/* -- Api Keys -- */ ;/* -- Api Keys -- */ public CreateApiKeyRequestBuilder prepareCreateApiKey() {     return new CreateApiKeyRequestBuilder(client). }
false;public;2;3;;public CreateApiKeyRequestBuilder prepareCreateApiKey(BytesReference bytesReference, XContentType xContentType) throws IOException {     return new CreateApiKeyRequestBuilder(client).source(bytesReference, xContentType). }
false;public;2;3;;public void createApiKey(CreateApiKeyRequest request, ActionListener<CreateApiKeyResponse> listener) {     client.execute(CreateApiKeyAction.INSTANCE, request, listener). }
false;public;2;3;;public void invalidateApiKey(InvalidateApiKeyRequest request, ActionListener<InvalidateApiKeyResponse> listener) {     client.execute(InvalidateApiKeyAction.INSTANCE, request, listener). }
false;public;2;3;;public void getApiKey(GetApiKeyRequest request, ActionListener<GetApiKeyResponse> listener) {     client.execute(GetApiKeyAction.INSTANCE, request, listener). }
false;public;2;6;;public SamlAuthenticateRequestBuilder prepareSamlAuthenticate(byte[] xmlContent, List<String> validIds) {     final SamlAuthenticateRequestBuilder builder = new SamlAuthenticateRequestBuilder(client).     builder.saml(xmlContent).     builder.validRequestIds(validIds).     return builder. }
false;public;2;3;;public void samlAuthenticate(SamlAuthenticateRequest request, ActionListener<SamlAuthenticateResponse> listener) {     client.execute(SamlAuthenticateAction.INSTANCE, request, listener). }
false;public;0;3;;public SamlPrepareAuthenticationRequestBuilder prepareSamlPrepareAuthentication() {     return new SamlPrepareAuthenticationRequestBuilder(client). }
false;public;1;5;;public CreateTokenRequestBuilder prepareRefreshToken(String refreshToken) {     return new CreateTokenRequestBuilder(client, RefreshTokenAction.INSTANCE).setRefreshToken(refreshToken).setGrantType("refresh_token"). }
false;public;2;3;;public void refreshToken(CreateTokenRequest request, ActionListener<CreateTokenResponse> listener) {     client.execute(RefreshTokenAction.INSTANCE, request, listener). }
