commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static Phase parse(XContentParser parser, String name) {     return PARSER.apply(parser, name). }
false;public;1;10;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(name).     out.writeTimeValue(minimumAge).     out.writeVInt(actions.size()).     for (Map.Entry<String, LifecycleAction> entry : actions.entrySet()) {         out.writeString(entry.getKey()).         out.writeNamedWriteable(entry.getValue()).     } }
true;public;0;3;/**  * @return the age of the index when the index should move to this  *         {@link Phase}.  */ ;/**  * @return the age of the index when the index should move to this  *         {@link Phase}.  */ public TimeValue getMinimumAge() {     return minimumAge. }
true;public;0;3;/**  * @return the name of this {@link Phase}  */ ;/**  * @return the name of this {@link Phase}  */ public String getName() {     return name. }
true;public;0;3;/**  * @return a {@link Map} of the {@link LifecycleAction}s to run when during  *         his {@link Phase}.  */ ;/**  * @return a {@link Map} of the {@link LifecycleAction}s to run when during  *         his {@link Phase}.  */ public Map<String, LifecycleAction> getActions() {     return actions. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(MIN_AGE.getPreferredName(), minimumAge.getStringRep()).     builder.field(ACTIONS_FIELD.getPreferredName(), actions).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, minimumAge, actions). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     Phase other = (Phase) obj.     return Objects.equals(name, other.name) && Objects.equals(minimumAge, other.minimumAge) && Objects.equals(actions, other.actions). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
