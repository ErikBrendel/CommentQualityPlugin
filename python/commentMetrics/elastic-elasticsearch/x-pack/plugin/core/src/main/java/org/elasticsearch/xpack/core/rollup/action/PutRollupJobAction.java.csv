commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public,static;2;3;;public static Request fromXContent(final XContentParser parser, final String id) throws IOException {     return new Request(RollupJobConfig.fromXContent(parser, id)). }
false;public;0;3;;public RollupJobConfig getConfig() {     return config. }
false;public;1;3;;public void setConfig(RollupJobConfig config) {     this.config = config. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     this.config = new RollupJobConfig(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     this.config.writeTo(out). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;12;;public RollupActionRequestValidationException validateMappings(Map<String, Map<String, FieldCapabilities>> fieldCapsResponse) {     RollupActionRequestValidationException validationException = new RollupActionRequestValidationException().     if (fieldCapsResponse.size() == 0) {         validationException.addValidationError("Could not find any fields in the index/index-pattern that were configured in job").         return validationException.     }     config.validateMappings(fieldCapsResponse, validationException).     if (validationException.validationErrors().size() > 0) {         return validationException.     }     return null. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return this.config.toXContent(builder, params). }
false;public;0;4;;@Override public String[] indices() {     return new String[] { this.config.getIndexPattern() }. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return indicesOptions. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(config). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(config, other.config). }
