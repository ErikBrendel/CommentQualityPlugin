commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String executor() {     return ThreadPool.Names.MANAGEMENT. }
false;protected;0;4;;@Override protected XPackUsageResponse newResponse() {     return new XPackUsageResponse(). }
false;public;1;4;;@Override public void onResponse(List<Usage> usages) {     listener.onResponse(new XPackUsageResponse(usages)). }
false;public;1;4;;@Override public void onFailure(Exception e) {     listener.onFailure(e). }
false;public;1;6;;@Override public void onResponse(Usage usage) {     featureSetUsages.set(position.getAndIncrement(), usage).     // the value sent back doesn't matter since our predicate keeps iterating     iteratingListener.onResponse(Collections.emptyList()). }
false;public;1;4;;@Override public void onFailure(Exception e) {     iteratingListener.onFailure(e). }
false;protected;3;41;;@Override protected void masterOperation(XPackUsageRequest request, ClusterState state, ActionListener<XPackUsageResponse> listener) {     final ActionListener<List<XPackFeatureSet.Usage>> usageActionListener = new ActionListener<List<Usage>>() {          @Override         public void onResponse(List<Usage> usages) {             listener.onResponse(new XPackUsageResponse(usages)).         }          @Override         public void onFailure(Exception e) {             listener.onFailure(e).         }     }.     final AtomicReferenceArray<Usage> featureSetUsages = new AtomicReferenceArray<>(featureSets.size()).     final AtomicInteger position = new AtomicInteger(0).     final BiConsumer<XPackFeatureSet, ActionListener<List<Usage>>> consumer = (featureSet, iteratingListener) -> {         featureSet.usage(new ActionListener<Usage>() {              @Override             public void onResponse(Usage usage) {                 featureSetUsages.set(position.getAndIncrement(), usage).                 // the value sent back doesn't matter since our predicate keeps iterating                 iteratingListener.onResponse(Collections.emptyList()).             }              @Override             public void onFailure(Exception e) {                 iteratingListener.onFailure(e).             }         }).     }.     IteratingActionListener<List<XPackFeatureSet.Usage>, XPackFeatureSet> iteratingActionListener = new IteratingActionListener<>(usageActionListener, consumer, featureSets, threadPool.getThreadContext(), (ignore) -> {         final List<Usage> usageList = new ArrayList<>(featureSetUsages.length()).         for (int i = 0. i < featureSetUsages.length(). i++) {             usageList.add(featureSetUsages.get(i)).         }         return usageList.     }, (ignore) -> true).     iteratingActionListener.run(). }
false;protected;2;4;;@Override protected ClusterBlockException checkBlock(XPackUsageRequest request, ClusterState state) {     return null. }
