commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static String jobResultsIndexPrefix() {     return AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX. }
true;public,static;1;3;/**  * The name of the alias pointing to the indices where the job's results are stored  * @param jobId Job Id  * @return The read alias  */ ;/**  * The name of the alias pointing to the indices where the job's results are stored  * @param jobId Job Id  * @return The read alias  */ public static String jobResultsAliasedName(String jobId) {     return AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + jobId. }
true;public,static;1;5;/**  * The name of the alias pointing to the write index for a job  * @param jobId Job Id  * @return The write alias  */ ;/**  * The name of the alias pointing to the write index for a job  * @param jobId Job Id  * @return The write alias  */ public static String resultsWriteAlias(String jobId) {     // with the read alias of a job whose name begins with "write-"     return AnomalyDetectorsIndexFields.RESULTS_INDEX_PREFIX + ".write-" + jobId. }
true;public,static;0;3;/**  * The name of the alias pointing to the appropriate index for writing job state  * @return The write alias name  */ ;/**  * The name of the alias pointing to the appropriate index for writing job state  * @return The write alias name  */ public static String jobStateIndexWriteAlias() {     return AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX + "-write". }
true;public,static;0;3;/**  * The name pattern to capture all .ml-state prefixed indices  * @return The .ml-state index pattern  */ ;/**  * The name pattern to capture all .ml-state prefixed indices  * @return The .ml-state index pattern  */ public static String jobStateIndexPattern() {     return AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX + "*". }
true;public,static;0;3;/**  * The name of the index where job and datafeed configuration  * is stored  * @return The index name  */ ;/**  * The name of the index where job and datafeed configuration  * is stored  * @return The index name  */ public static String configIndexName() {     return AnomalyDetectorsIndexFields.CONFIG_INDEX. }
true;public,static;3;56;/**  * Create the .ml-state index (if necessary)  * Create the .ml-state-write alias for the .ml-state index (if necessary)  */ ;/**  * Create the .ml-state index (if necessary)  * Create the .ml-state-write alias for the .ml-state index (if necessary)  */ public static void createStateIndexAndAliasIfNecessary(Client client, ClusterState state, final ActionListener<Boolean> finalListener) {     if (state.getMetaData().getAliasAndIndexLookup().containsKey(jobStateIndexWriteAlias())) {         finalListener.onResponse(false).         return.     }     final ActionListener<String> createAliasListener = ActionListener.wrap(concreteIndexName -> {         final IndicesAliasesRequest request = client.admin().indices().prepareAliases().addAlias(concreteIndexName, jobStateIndexWriteAlias()).request().         executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, request, ActionListener.<AcknowledgedResponse>wrap(resp -> finalListener.onResponse(resp.isAcknowledged()), finalListener::onFailure), client.admin().indices()::aliases).     }, finalListener::onFailure).     IndexNameExpressionResolver indexNameExpressionResolver = new IndexNameExpressionResolver().     String[] stateIndices = indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.lenientExpandOpen(), jobStateIndexPattern()).     if (stateIndices.length > 0) {         Arrays.sort(stateIndices, Collections.reverseOrder()).         createAliasListener.onResponse(stateIndices[0]).     } else {         CreateIndexRequest createIndexRequest = client.admin().indices().prepareCreate(AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX).addAlias(new Alias(jobStateIndexWriteAlias())).request().         executeAsyncWithOrigin(client.threadPool().getThreadContext(), ML_ORIGIN, createIndexRequest, ActionListener.<CreateIndexResponse>wrap(createIndexResponse -> finalListener.onResponse(true), createIndexFailure -> {             // as well.             if (createIndexFailure instanceof ResourceAlreadyExistsException) {                 createAliasListener.onResponse(AnomalyDetectorsIndexFields.STATE_INDEX_PREFIX).             } else {                 finalListener.onFailure(createIndexFailure).             }         }), client.admin().indices()::create).     } }
