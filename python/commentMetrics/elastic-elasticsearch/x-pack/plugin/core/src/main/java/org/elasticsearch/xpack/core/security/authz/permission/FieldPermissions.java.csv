commented;modifiers;parameterAmount;loc;comment;code
true;private,static;1;3;/**  * Return an estimation of the ram bytes used by a {@link CharacterRunAutomaton}  * that wraps the given automaton.  */ ;/**  * Return an estimation of the ram bytes used by a {@link CharacterRunAutomaton}  * that wraps the given automaton.  */ private static long runAutomatonRamBytesUsed(Automaton a) {     // wild guess, better than 0     return a.getNumStates() * 5. }
false;public,static;1;9;;public static Automaton initializePermittedFieldsAutomaton(FieldPermissionsDefinition fieldPermissionsDefinition) {     Set<FieldGrantExcludeGroup> groups = fieldPermissionsDefinition.getFieldGrantExcludeGroups().     assert groups.size() > 0 : "there must always be a single group for field inclusion/exclusion".     List<Automaton> automatonList = groups.stream().map(g -> FieldPermissions.initializePermittedFieldsAutomaton(g.getGrantedFields(), g.getExcludedFields())).collect(Collectors.toList()).     return Automatons.unionAndMinimize(automatonList). }
false;private,static;2;30;;private static Automaton initializePermittedFieldsAutomaton(final String[] grantedFields, final String[] deniedFields) {     Automaton grantedFieldsAutomaton.     if (grantedFields == null || Arrays.stream(grantedFields).anyMatch(Regex::isMatchAllPattern)) {         grantedFieldsAutomaton = Automatons.MATCH_ALL.     } else {         // an automaton that includes metadata fields, including join fields created by the _parent field such         // as _parent#type         Automaton metaFieldsAutomaton = Operations.concatenate(Automata.makeChar('_'), Automata.makeAnyString()).         grantedFieldsAutomaton = Operations.union(Automatons.patterns(grantedFields), metaFieldsAutomaton).     }     Automaton deniedFieldsAutomaton.     if (deniedFields == null || deniedFields.length == 0) {         deniedFieldsAutomaton = Automatons.EMPTY.     } else {         deniedFieldsAutomaton = Automatons.patterns(deniedFields).     }     grantedFieldsAutomaton = MinimizationOperations.minimize(grantedFieldsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES).     deniedFieldsAutomaton = MinimizationOperations.minimize(deniedFieldsAutomaton, Operations.DEFAULT_MAX_DETERMINIZED_STATES).     if (subsetOf(deniedFieldsAutomaton, grantedFieldsAutomaton) == false) {         throw new ElasticsearchSecurityException("Exceptions for field permissions must be a subset of the " + "granted fields but " + Strings.arrayToCommaDelimitedString(deniedFields) + " is not a subset of " + Strings.arrayToCommaDelimitedString(grantedFields)).     }     grantedFieldsAutomaton = Automatons.minusAndMinimize(grantedFieldsAutomaton, deniedFieldsAutomaton).     return grantedFieldsAutomaton. }
true;public;1;11;/**  * Returns a field permissions instance where it is limited by the given field permissions.<br>  * If the current and the other field permissions have field level security then it takes  * an intersection of permitted fields.<br>  * If none of the permissions have field level security enabled, then returns permissions  * instance where all fields are allowed.  *  * @param limitedBy {@link FieldPermissions} used to limit current field permissions  * @return {@link FieldPermissions}  */ ;/**  * Returns a field permissions instance where it is limited by the given field permissions.<br>  * If the current and the other field permissions have field level security then it takes  * an intersection of permitted fields.<br>  * If none of the permissions have field level security enabled, then returns permissions  * instance where all fields are allowed.  *  * @param limitedBy {@link FieldPermissions} used to limit current field permissions  * @return {@link FieldPermissions}  */ public FieldPermissions limitFieldPermissions(FieldPermissions limitedBy) {     if (hasFieldLevelSecurity() && limitedBy != null && limitedBy.hasFieldLevelSecurity()) {         Automaton permittedFieldsAutomaton = Automatons.intersectAndMinimize(getIncludeAutomaton(), limitedBy.getIncludeAutomaton()).         return new FieldPermissions(null, permittedFieldsAutomaton).     } else if (limitedBy != null && limitedBy.hasFieldLevelSecurity()) {         return new FieldPermissions(limitedBy.getFieldPermissionsDefinition(), limitedBy.getIncludeAutomaton()).     } else if (hasFieldLevelSecurity()) {         return new FieldPermissions(getFieldPermissionsDefinition(), getIncludeAutomaton()).     }     return FieldPermissions.DEFAULT. }
true;public;1;3;/**  * Returns true if this field permission policy allows access to the field and false if not.  * fieldName can be a wildcard.  */ ;/**  * Returns true if this field permission policy allows access to the field and false if not.  * fieldName can be a wildcard.  */ public boolean grantsAccessTo(String fieldName) {     return permittedFieldsAutomatonIsTotal || permittedFieldsAutomaton.run(fieldName). }
false;public;0;3;;public FieldPermissionsDefinition getFieldPermissionsDefinition() {     return fieldPermissionsDefinition. }
true;public;0;3;/**  * Return whether field-level security is enabled, ie. whether any field might be filtered out.  */ ;/**  * Return whether field-level security is enabled, ie. whether any field might be filtered out.  */ public boolean hasFieldLevelSecurity() {     return permittedFieldsAutomatonIsTotal == false. }
true;public;1;6;/**  * Return a wrapped reader that only exposes allowed fields.  */ ;/**  * Return a wrapped reader that only exposes allowed fields.  */ public DirectoryReader filter(DirectoryReader reader) throws IOException {     if (hasFieldLevelSecurity() == false) {         return reader.     }     return FieldSubsetReader.wrap(reader, permittedFieldsAutomaton). }
false;;0;3;;Automaton getIncludeAutomaton() {     return originalAutomaton. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     FieldPermissions that = (FieldPermissions) o.     if (permittedFieldsAutomatonIsTotal != that.permittedFieldsAutomatonIsTotal)         return false.     return fieldPermissionsDefinition != null ? fieldPermissionsDefinition.equals(that.fieldPermissionsDefinition) : that.fieldPermissionsDefinition == null. }
false;public;0;6;;@Override public int hashCode() {     int result = fieldPermissionsDefinition != null ? fieldPermissionsDefinition.hashCode() : 0.     result = 31 * result + (permittedFieldsAutomatonIsTotal ? 1 : 0).     return result. }
false;public;0;4;;@Override public long ramBytesUsed() {     return ramBytesUsed. }
