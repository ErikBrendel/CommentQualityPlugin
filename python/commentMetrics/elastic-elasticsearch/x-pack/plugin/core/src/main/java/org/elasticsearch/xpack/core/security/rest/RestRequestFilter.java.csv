commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean hasContent() {     return true. }
false;public;0;16;;@Override public BytesReference content() {     if (filteredBytes == null) {         BytesReference content = restRequest.content().         Tuple<XContentType, Map<String, Object>> result = XContentHelper.convertToMap(content, true).         Map<String, Object> transformedSource = XContentMapValues.filter(result.v2(), null, fields.toArray(Strings.EMPTY_ARRAY)).         try {             XContentBuilder xContentBuilder = XContentBuilder.builder(result.v1().xContent()).map(transformedSource).             filteredBytes = BytesReference.bytes(xContentBuilder).         } catch (IOException e) {             throw new ElasticsearchException("failed to parse request", e).         }     }     return filteredBytes. }
true;default;1;33;/**  * Wraps the RestRequest and returns a version that provides the filtered content  */ ;/**  * Wraps the RestRequest and returns a version that provides the filtered content  */ default RestRequest getFilteredRequest(RestRequest restRequest) throws IOException {     Set<String> fields = getFilteredFields().     if (restRequest.hasContent() && fields.isEmpty() == false) {         return new RestRequest(restRequest) {              private BytesReference filteredBytes = null.              @Override             public boolean hasContent() {                 return true.             }              @Override             public BytesReference content() {                 if (filteredBytes == null) {                     BytesReference content = restRequest.content().                     Tuple<XContentType, Map<String, Object>> result = XContentHelper.convertToMap(content, true).                     Map<String, Object> transformedSource = XContentMapValues.filter(result.v2(), null, fields.toArray(Strings.EMPTY_ARRAY)).                     try {                         XContentBuilder xContentBuilder = XContentBuilder.builder(result.v1().xContent()).map(transformedSource).                         filteredBytes = BytesReference.bytes(xContentBuilder).                     } catch (IOException e) {                         throw new ElasticsearchException("failed to parse request", e).                     }                 }                 return filteredBytes.             }         }.     } else {         return restRequest.     } }
true;;0;1;/**  * The list of fields that should be filtered. This can be a dot separated pattern to match sub objects and also supports wildcards  */ ;/**  * The list of fields that should be filtered. This can be a dot separated pattern to match sub objects and also supports wildcards  */ Set<String> getFilteredFields().
