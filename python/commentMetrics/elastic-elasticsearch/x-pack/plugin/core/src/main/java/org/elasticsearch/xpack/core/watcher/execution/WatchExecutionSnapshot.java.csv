commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String watchId() {     return watchId. }
false;public;0;3;;public String watchRecordId() {     return watchRecordId. }
false;public;0;3;;public ZonedDateTime triggeredTime() {     return triggeredTime. }
false;public;0;3;;public ZonedDateTime executionTime() {     return executionTime. }
false;public;0;3;;public ExecutionPhase executionPhase() {     return phase. }
false;public;0;3;;public StackTraceElement[] executionStackTrace() {     return executionStackTrace. }
false;public;1;17;;@Override public void readFrom(StreamInput in) throws IOException {     watchId = in.readString().     watchRecordId = in.readString().     triggeredTime = Instant.ofEpochMilli(in.readVLong()).atZone(ZoneOffset.UTC).     executionTime = Instant.ofEpochMilli(in.readVLong()).atZone(ZoneOffset.UTC).     phase = ExecutionPhase.resolve(in.readString()).     int size = in.readVInt().     executionStackTrace = new StackTraceElement[size].     for (int i = 0. i < size. i++) {         String declaringClass = in.readString().         String methodName = in.readString().         String fileName = in.readOptionalString().         int lineNumber = in.readInt().         executionStackTrace[i] = new StackTraceElement(declaringClass, methodName, fileName, lineNumber).     } }
false;public;1;15;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(watchId).     out.writeString(watchRecordId).     out.writeVLong(triggeredTime.toInstant().toEpochMilli()).     out.writeVLong(executionTime.toInstant().toEpochMilli()).     out.writeString(phase.id()).     out.writeVInt(executionStackTrace.length).     for (StackTraceElement element : executionStackTrace) {         out.writeString(element.getClassName()).         out.writeString(element.getMethodName()).         out.writeOptionalString(element.getFileName()).         out.writeInt(element.getLineNumber()).     } }
false;public;2;25;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("watch_id", watchId).     builder.field("watch_record_id", watchRecordId).     builder.timeField("triggered_time", triggeredTime).     builder.timeField("execution_time", executionTime).     builder.field("execution_phase", phase).     if (executedActions != null) {         builder.startArray("executed_actions").         for (String executedAction : executedActions) {             builder.value(executedAction).         }         builder.endArray().     }     if (params.paramAsBoolean("emit_stacktraces", false)) {         builder.startArray("stack_trace").         for (StackTraceElement element : executionStackTrace) {             builder.value(element.toString()).         }         builder.endArray().     }     builder.endObject().     return builder. }
