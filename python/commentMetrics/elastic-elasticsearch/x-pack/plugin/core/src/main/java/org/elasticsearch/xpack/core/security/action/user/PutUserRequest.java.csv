commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (username == null) {         validationException = addValidationError("user is missing", validationException).     }     if (roles == null) {         validationException = addValidationError("roles are missing", validationException).     }     if (metadata != null && metadata.keySet().stream().anyMatch(s -> s.startsWith("_"))) {         validationException = addValidationError("metadata keys may not start with [_]", validationException).     }     // we do not check for a password hash here since it is possible that the user exists and we don't want to update the password     return validationException. }
false;public;1;3;;public void username(String username) {     this.username = username. }
false;public;1;3;;public void roles(String... roles) {     this.roles = roles. }
false;public;1;3;;public void fullName(String fullName) {     this.fullName = fullName. }
false;public;1;3;;public void email(String email) {     this.email = email. }
false;public;1;3;;public void metadata(Map<String, Object> metadata) {     this.metadata = metadata. }
false;public;1;3;;public void passwordHash(@Nullable char[] passwordHash) {     this.passwordHash = passwordHash. }
false;public;1;3;;public void enabled(boolean enabled) {     this.enabled = enabled. }
true;public;0;4;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ @Override public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;5;;@Override public PutUserRequest setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
false;public;0;3;;public String username() {     return username. }
false;public;0;3;;public String[] roles() {     return roles. }
false;public;0;3;;public String fullName() {     return fullName. }
false;public;0;3;;public String email() {     return email. }
false;public;0;3;;public Map<String, Object> metadata() {     return metadata. }
false;public;0;4;;@Nullable public char[] passwordHash() {     return passwordHash. }
false;public;0;3;;public boolean enabled() {     return enabled. }
false;public;0;4;;@Override public String[] usernames() {     return new String[] { username }. }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     username = in.readString().     passwordHash = readCharArrayFromStream(in).     roles = in.readStringArray().     fullName = in.readOptionalString().     email = in.readOptionalString().     metadata = in.readBoolean() ? in.readMap() : null.     refreshPolicy = RefreshPolicy.readFrom(in).     enabled = in.readBoolean(). }
false;public;1;17;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(username).     writeCharArrayToStream(out, passwordHash).     out.writeStringArray(roles).     out.writeOptionalString(fullName).     out.writeOptionalString(email).     if (metadata == null) {         out.writeBoolean(false).     } else {         out.writeBoolean(true).         out.writeMap(metadata).     }     refreshPolicy.writeTo(out).     out.writeBoolean(enabled). }
false;private,static;1;8;;private static char[] readCharArrayFromStream(StreamInput in) throws IOException {     BytesReference charBytesRef = in.readBytesReference().     if (charBytesRef == BytesArray.EMPTY) {         return null.     } else {         return CharArrays.utf8BytesToChars(BytesReference.toBytes(charBytesRef)).     } }
false;private,static;2;9;;private static void writeCharArrayToStream(StreamOutput out, char[] chars) throws IOException {     final BytesReference charBytesRef.     if (chars == null) {         charBytesRef = null.     } else {         charBytesRef = new BytesArray(CharArrays.toUtf8Bytes(chars)).     }     out.writeBytesReference(charBytesRef). }
false;public;0;13;;@Override public String toString() {     return "PutUserRequest{" + "username='" + username + '\'' + ", roles=" + Arrays.toString(roles) + ", fullName='" + fullName + '\'' + ", email='" + email + '\'' + ", metadata=" + metadata + ", passwordHash=" + (passwordHash == null ? "<null>" : "<not-null>") + ", enabled=" + enabled + ", refreshPolicy=" + refreshPolicy + '}'. }
