commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public RollupJobConfig getConfig() {     return config. }
false;public;0;3;;public Map<String, String> getHeaders() {     return headers. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(CONFIG.getPreferredName(), config).     builder.field(HEADERS.getPreferredName(), headers).     builder.endObject().     return builder. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     config.writeTo(out).     out.writeMap(headers, StreamOutput::writeString, StreamOutput::writeString). }
false;static;1;3;;static Diff<RollupJob> readJobDiffFrom(StreamInput in) throws IOException {     return AbstractDiffable.readDiffFrom(RollupJob::new, in). }
false;public,static;1;3;;public static RollupJob fromXContent(XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
false;public;1;15;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     RollupJob that = (RollupJob) other.     return Objects.equals(this.config, that.config) && Objects.equals(this.headers, that.headers). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(config, headers). }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.V_6_3_0. }
