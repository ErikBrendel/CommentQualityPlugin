commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;2;7;;public static Request parseRequest(String calendarId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (calendarId != null) {         request.setCalendarId(calendarId).     }     return request. }
false;public;1;3;;public void setCalendarId(String calendarId) {     this.calendarId = calendarId. }
false;public;0;3;;public String getCalendarId() {     return calendarId. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
false;public;1;3;;public void setPageParams(PageParams pageParams) {     this.pageParams = pageParams. }
false;public;0;12;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (calendarId != null && pageParams != null) {         validationException = addValidationError("Params [" + PageParams.FROM.getPreferredName() + ", " + PageParams.SIZE.getPreferredName() + "] are incompatible with [" + Calendar.ID.getPreferredName() + "].", validationException).     }     return validationException. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     calendarId = in.readOptionalString().     pageParams = in.readOptionalWriteable(PageParams::new). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(calendarId).     out.writeOptionalWriteable(pageParams). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendarId, pageParams). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(calendarId, other.calendarId) && Objects.equals(pageParams, other.pageParams). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (calendarId != null) {         builder.field(Calendar.ID.getPreferredName(), calendarId).     }     if (pageParams != null) {         builder.field(PageParams.PAGE.getPreferredName(), pageParams).     }     builder.endObject().     return builder. }
false;public;0;3;;public QueryPage<Calendar> getCalendars() {     return calendars. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     calendars = new QueryPage<>(in, Calendar::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     calendars.writeTo(out). }
false;public;0;4;;@Override public RestStatus status() {     return RestStatus.OK. }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     calendars.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendars). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(calendars, other.calendars). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
