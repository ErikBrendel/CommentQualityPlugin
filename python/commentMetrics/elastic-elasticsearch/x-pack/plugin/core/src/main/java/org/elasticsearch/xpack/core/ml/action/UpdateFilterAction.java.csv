commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PutFilterAction.Response newResponse() {     return new PutFilterAction.Response(). }
false;public,static;2;11;;public static Request parseRequest(String filterId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (request.filterId == null) {         request.filterId = filterId.     } else if (!Strings.isNullOrEmpty(filterId) && !filterId.equals(request.filterId)) {         // If we have both URI and body filter ID, they must be identical         throw new IllegalArgumentException(Messages.getMessage(Messages.INCONSISTENT_ID, MlFilter.ID.getPreferredName(), request.filterId, filterId)).     }     return request. }
false;public;0;3;;public String getFilterId() {     return filterId. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
false;public;0;3;;public SortedSet<String> getAddItems() {     return addItems. }
false;public;1;3;;public void setAddItems(Collection<String> addItems) {     this.addItems = new TreeSet<>(ExceptionsHelper.requireNonNull(addItems, ADD_ITEMS.getPreferredName())). }
false;public;0;3;;public SortedSet<String> getRemoveItems() {     return removeItems. }
false;public;1;3;;public void setRemoveItems(Collection<String> removeItems) {     this.removeItems = new TreeSet<>(ExceptionsHelper.requireNonNull(removeItems, REMOVE_ITEMS.getPreferredName())). }
false;public;0;3;;public boolean isNoop() {     return description == null && addItems.isEmpty() && removeItems.isEmpty(). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     filterId = in.readString().     description = in.readOptionalString().     addItems = new TreeSet<>(Arrays.asList(in.readStringArray())).     removeItems = new TreeSet<>(Arrays.asList(in.readStringArray())). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(filterId).     out.writeOptionalString(description).     out.writeStringArray(addItems.toArray(new String[addItems.size()])).     out.writeStringArray(removeItems.toArray(new String[removeItems.size()])). }
false;public;2;16;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(MlFilter.ID.getPreferredName(), filterId).     if (description != null) {         builder.field(MlFilter.DESCRIPTION.getPreferredName(), description).     }     if (addItems.isEmpty() == false) {         builder.field(ADD_ITEMS.getPreferredName(), addItems).     }     if (removeItems.isEmpty() == false) {         builder.field(REMOVE_ITEMS.getPreferredName(), removeItems).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(filterId, description, addItems, removeItems). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(filterId, other.filterId) && Objects.equals(description, other.description) && Objects.equals(addItems, other.addItems) && Objects.equals(removeItems, other.removeItems). }
