commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;24;;private static ConstructingObjectParser<ModelPlot, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<ModelPlot, Void> parser = new ConstructingObjectParser<>(RESULT_TYPE_VALUE, ignoreUnknownFields, a -> new ModelPlot((String) a[0], (Date) a[1], (long) a[2], (int) a[3])).     parser.declareString(ConstructingObjectParser.constructorArg(), Job.ID).     parser.declareField(ConstructingObjectParser.constructorArg(), p -> TimeUtils.parseTimeField(p, Result.TIMESTAMP.getPreferredName()), Result.TIMESTAMP, ValueType.VALUE).     parser.declareLong(ConstructingObjectParser.constructorArg(), BUCKET_SPAN).     parser.declareInt(ConstructingObjectParser.constructorArg(), DETECTOR_INDEX).     parser.declareString((modelPlot, s) -> {     }, Result.RESULT_TYPE).     parser.declareString(ModelPlot::setPartitionFieldName, PARTITION_FIELD_NAME).     parser.declareString(ModelPlot::setPartitionFieldValue, PARTITION_FIELD_VALUE).     parser.declareString(ModelPlot::setOverFieldName, OVER_FIELD_NAME).     parser.declareString(ModelPlot::setOverFieldValue, OVER_FIELD_VALUE).     parser.declareString(ModelPlot::setByFieldName, BY_FIELD_NAME).     parser.declareString(ModelPlot::setByFieldValue, BY_FIELD_VALUE).     parser.declareString(ModelPlot::setModelFeature, MODEL_FEATURE).     parser.declareDouble(ModelPlot::setModelLower, MODEL_LOWER).     parser.declareDouble(ModelPlot::setModelUpper, MODEL_UPPER).     parser.declareDouble(ModelPlot::setModelMedian, MODEL_MEDIAN).     parser.declareDouble(ModelPlot::setActual, ACTUAL).     return parser. }
false;public;1;30;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeLong(timestamp.getTime()).     out.writeOptionalString(partitionFieldName).     out.writeOptionalString(partitionFieldValue).     out.writeOptionalString(overFieldName).     out.writeOptionalString(overFieldValue).     out.writeOptionalString(byFieldName).     out.writeOptionalString(byFieldValue).     out.writeOptionalString(modelFeature).     out.writeDouble(modelLower).     out.writeDouble(modelUpper).     out.writeDouble(modelMedian).     if (out.getVersion().before(Version.V_6_0_0_rc1)) {         if (actual == null) {             // older versions cannot accommodate null, so we have no choice but to propagate the bug of             // https://github.com/elastic/x-pack-elasticsearch/issues/2528             out.writeDouble(0.0).         } else {             out.writeDouble(actual).         }     } else {         out.writeOptionalDouble(actual).     }     out.writeLong(bucketSpan).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeInt(detectorIndex).     } }
false;public;2;42;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.field(BUCKET_SPAN.getPreferredName(), bucketSpan).     builder.field(DETECTOR_INDEX.getPreferredName(), detectorIndex).     if (timestamp != null) {         builder.timeField(Result.TIMESTAMP.getPreferredName(), Result.TIMESTAMP.getPreferredName() + "_string", timestamp.getTime()).     }     if (partitionFieldName != null) {         builder.field(PARTITION_FIELD_NAME.getPreferredName(), partitionFieldName).     }     if (partitionFieldValue != null) {         builder.field(PARTITION_FIELD_VALUE.getPreferredName(), partitionFieldValue).     }     if (overFieldName != null) {         builder.field(OVER_FIELD_NAME.getPreferredName(), overFieldName).     }     if (overFieldValue != null) {         builder.field(OVER_FIELD_VALUE.getPreferredName(), overFieldValue).     }     if (byFieldName != null) {         builder.field(BY_FIELD_NAME.getPreferredName(), byFieldName).     }     if (byFieldValue != null) {         builder.field(BY_FIELD_VALUE.getPreferredName(), byFieldValue).     }     if (modelFeature != null) {         builder.field(MODEL_FEATURE.getPreferredName(), modelFeature).     }     builder.field(MODEL_LOWER.getPreferredName(), modelLower).     builder.field(MODEL_UPPER.getPreferredName(), modelUpper).     builder.field(MODEL_MEDIAN.getPreferredName(), modelMedian).     if (actual != null) {         builder.field(ACTUAL.getPreferredName(), actual).     }     builder.endObject().     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;8;;public String getId() {     int valuesHash = Objects.hash(byFieldValue, overFieldValue, partitionFieldValue).     int length = (byFieldValue == null ? 0 : byFieldValue.length()) + (overFieldValue == null ? 0 : overFieldValue.length()) + (partitionFieldValue == null ? 0 : partitionFieldValue.length()).     return jobId + "_model_plot_" + timestamp.getTime() + "_" + bucketSpan + "_" + detectorIndex + "_" + valuesHash + "_" + length. }
false;public;0;3;;public Date getTimestamp() {     return timestamp. }
false;public;0;3;;public long getBucketSpan() {     return bucketSpan. }
false;public;0;3;;public int getDetectorIndex() {     return detectorIndex. }
false;public;0;3;;public String getPartitionFieldName() {     return partitionFieldName. }
false;public;1;3;;public void setPartitionFieldName(String partitionFieldName) {     this.partitionFieldName = partitionFieldName. }
false;public;0;3;;public String getPartitionFieldValue() {     return partitionFieldValue. }
false;public;1;3;;public void setPartitionFieldValue(String partitionFieldValue) {     this.partitionFieldValue = partitionFieldValue. }
false;public;0;3;;public String getOverFieldName() {     return overFieldName. }
false;public;1;3;;public void setOverFieldName(String overFieldName) {     this.overFieldName = overFieldName. }
false;public;0;3;;public String getOverFieldValue() {     return overFieldValue. }
false;public;1;3;;public void setOverFieldValue(String overFieldValue) {     this.overFieldValue = overFieldValue. }
false;public;0;3;;public String getByFieldName() {     return byFieldName. }
false;public;1;3;;public void setByFieldName(String byFieldName) {     this.byFieldName = byFieldName. }
false;public;0;3;;public String getByFieldValue() {     return byFieldValue. }
false;public;1;3;;public void setByFieldValue(String byFieldValue) {     this.byFieldValue = byFieldValue. }
false;public;0;3;;public String getModelFeature() {     return modelFeature. }
false;public;1;3;;public void setModelFeature(String modelFeature) {     this.modelFeature = modelFeature. }
false;public;0;3;;public double getModelLower() {     return modelLower. }
false;public;1;3;;public void setModelLower(double modelLower) {     this.modelLower = modelLower. }
false;public;0;3;;public double getModelUpper() {     return modelUpper. }
false;public;1;3;;public void setModelUpper(double modelUpper) {     this.modelUpper = modelUpper. }
false;public;0;3;;public double getModelMedian() {     return modelMedian. }
false;public;1;3;;public void setModelMedian(double modelMedian) {     this.modelMedian = modelMedian. }
false;public;0;3;;public Double getActual() {     return actual. }
false;public;1;3;;public void setActual(Double actual) {     this.actual = actual. }
false;public;1;25;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof ModelPlot == false) {         return false.     }     ModelPlot that = (ModelPlot) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.partitionFieldValue, that.partitionFieldValue) && Objects.equals(this.partitionFieldName, that.partitionFieldName) && Objects.equals(this.overFieldValue, that.overFieldValue) && Objects.equals(this.overFieldName, that.overFieldName) && Objects.equals(this.byFieldValue, that.byFieldValue) && Objects.equals(this.byFieldName, that.byFieldName) && Objects.equals(this.modelFeature, that.modelFeature) && this.modelLower == that.modelLower && this.modelUpper == that.modelUpper && this.modelMedian == that.modelMedian && Objects.equals(this.actual, that.actual) && this.bucketSpan == that.bucketSpan && this.detectorIndex == that.detectorIndex. }
false;public;0;6;;@Override public int hashCode() {     return Objects.hash(jobId, timestamp, partitionFieldName, partitionFieldValue, overFieldName, overFieldValue, byFieldName, byFieldValue, modelFeature, modelLower, modelUpper, modelMedian, actual, bucketSpan, detectorIndex). }
