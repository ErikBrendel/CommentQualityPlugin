commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public ActionRequestValidationException validate(ActionRequestValidationException validationException) {     if (getEffectiveVertexRequests().size() == 0) {         validationException = ValidateActions.addValidationError(GraphExploreRequest.NO_VERTICES_ERROR_MESSAGE, validationException).     }     return validationException. }
false;public;0;3;;public Hop getParentHop() {     return parentHop. }
false;;1;11;;void writeTo(StreamOutput out) throws IOException {     out.writeOptionalNamedWriteable(guidingQuery).     if (vertices == null) {         out.writeVInt(0).     } else {         out.writeVInt(vertices.size()).         for (VertexRequest vr : vertices) {             vr.writeTo(out).         }     } }
false;;1;12;;void readFrom(StreamInput in) throws IOException {     guidingQuery = in.readOptionalNamedWriteable(QueryBuilder.class).     int size = in.readVInt().     if (size > 0) {         vertices = new ArrayList<>().         for (int i = 0. i < size. i++) {             VertexRequest vr = new VertexRequest().             vr.readFrom(in).             vertices.add(vr).         }     } }
false;public;0;6;;public QueryBuilder guidingQuery() {     if (guidingQuery != null) {         return guidingQuery.     }     return QueryBuilders.matchAllQuery(). }
true;public;1;9;/**  * Add a field in which this {@link Hop} will look for terms that are highly linked to  * previous hops and optionally the guiding query.  *  * @param fieldName a field in the chosen index  */ ;/**  * Add a field in which this {@link Hop} will look for terms that are highly linked to  * previous hops and optionally the guiding query.  *  * @param fieldName a field in the chosen index  */ public VertexRequest addVertexRequest(String fieldName) {     if (vertices == null) {         vertices = new ArrayList<>().     }     VertexRequest vr = new VertexRequest().     vr.fieldName(fieldName).     vertices.add(vr).     return vr. }
true;public;1;3;/**  * An optional parameter that focuses the exploration on documents that  * match the given query.  *  * @param queryBuilder any query  */ ;/**  * An optional parameter that focuses the exploration on documents that  * match the given query.  *  * @param queryBuilder any query  */ public void guidingQuery(QueryBuilder queryBuilder) {     guidingQuery = queryBuilder. }
false;protected;0;10;;protected List<VertexRequest> getEffectiveVertexRequests() {     if (vertices != null) {         return vertices.     }     if (parentHop == null) {         return Collections.emptyList().     }     // otherwise inherit settings from parent     return parentHop.getEffectiveVertexRequests(). }
false;public;0;3;;public int getNumberVertexRequests() {     return getEffectiveVertexRequests().size(). }
false;public;1;3;;public VertexRequest getVertexRequest(int requestNumber) {     return getEffectiveVertexRequests().get(requestNumber). }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (guidingQuery != null) {         builder.field("query").         guidingQuery.toXContent(builder, params).     }     if (vertices != null && vertices.size() > 0) {         builder.startArray("vertices").         for (VertexRequest vertexRequest : vertices) {             vertexRequest.toXContent(builder, params).         }         builder.endArray().     }     return builder. }
