# id;timestamp;commentText;codeText;commentWords;codeWords
WatchStatus -> public void onCheck(boolean metCondition, ZonedDateTime timestamp);1549289311;Called whenever an watch is checked, ie. the condition of the watch is evaluated to see if_the watch should be executed.__@param metCondition  indicates whether the watch's condition was met.;public void onCheck(boolean metCondition, ZonedDateTime timestamp) {_        lastChecked = timestamp__        if (metCondition) {_            lastMetCondition = timestamp__        } else {_            for (ActionStatus status : actions.values()) {_                status.resetAckStatus(timestamp)__            }_        }_    };called,whenever,an,watch,is,checked,ie,the,condition,of,the,watch,is,evaluated,to,see,if,the,watch,should,be,executed,param,met,condition,indicates,whether,the,watch,s,condition,was,met;public,void,on,check,boolean,met,condition,zoned,date,time,timestamp,last,checked,timestamp,if,met,condition,last,met,condition,timestamp,else,for,action,status,status,actions,values,status,reset,ack,status,timestamp
WatchStatus -> public void onCheck(boolean metCondition, ZonedDateTime timestamp);1549984342;Called whenever an watch is checked, ie. the condition of the watch is evaluated to see if_the watch should be executed.__@param metCondition  indicates whether the watch's condition was met.;public void onCheck(boolean metCondition, ZonedDateTime timestamp) {_        lastChecked = timestamp__        if (metCondition) {_            lastMetCondition = timestamp__        } else {_            for (ActionStatus status : actions.values()) {_                status.resetAckStatus(timestamp)__            }_        }_    };called,whenever,an,watch,is,checked,ie,the,condition,of,the,watch,is,evaluated,to,see,if,the,watch,should,be,executed,param,met,condition,indicates,whether,the,watch,s,condition,was,met;public,void,on,check,boolean,met,condition,zoned,date,time,timestamp,last,checked,timestamp,if,met,condition,last,met,condition,timestamp,else,for,action,status,status,actions,values,status,reset,ack,status,timestamp
WatchStatus -> public void onCheck(boolean metCondition, ZonedDateTime timestamp);1550263815;Called whenever an watch is checked, ie. the condition of the watch is evaluated to see if_the watch should be executed.__@param metCondition  indicates whether the watch's condition was met.;public void onCheck(boolean metCondition, ZonedDateTime timestamp) {_        lastChecked = timestamp__        if (metCondition) {_            lastMetCondition = timestamp__        } else {_            for (ActionStatus status : actions.values()) {_                status.resetAckStatus(timestamp)__            }_        }_    };called,whenever,an,watch,is,checked,ie,the,condition,of,the,watch,is,evaluated,to,see,if,the,watch,should,be,executed,param,met,condition,indicates,whether,the,watch,s,condition,was,met;public,void,on,check,boolean,met,condition,zoned,date,time,timestamp,last,checked,timestamp,if,met,condition,last,met,condition,timestamp,else,for,action,status,status,actions,values,status,reset,ack,status,timestamp
WatchStatus -> boolean onAck(DateTime timestamp, String... actionIds);1524684173;Notifies this status that the givne actions were acked. If the current state of one of these actions is_{@link ActionStatus.AckStatus.State#ACKABLE ACKABLE},_then we'll it'll change to {@link ActionStatus.AckStatus.State#ACKED ACKED}_(when set to {@link ActionStatus.AckStatus.State#ACKED ACKED}, the AckThrottler_will throttle the execution of the action.__@return {@code true} if the state of changed due to the ack, {@code false} otherwise.;boolean onAck(DateTime timestamp, String... actionIds) {_        boolean changed = false__        boolean containsAll = false__        for (String actionId : actionIds) {_            if (actionId.equals(WatchField.ALL_ACTIONS_ID)) {_                containsAll = true__                break__            }_        }_        if (containsAll) {_            for (ActionStatus status : actions.values()) {_                changed |= status.onAck(timestamp)__            }_            return changed__        }__        for (String actionId : actionIds) {_            ActionStatus status = actions.get(actionId)__            if (status != null) {_                changed |= status.onAck(timestamp)__            }_        }__        return changed__    };notifies,this,status,that,the,givne,actions,were,acked,if,the,current,state,of,one,of,these,actions,is,link,action,status,ack,status,state,ackable,ackable,then,we,ll,it,ll,change,to,link,action,status,ack,status,state,acked,acked,when,set,to,link,action,status,ack,status,state,acked,acked,the,ack,throttler,will,throttle,the,execution,of,the,action,return,code,true,if,the,state,of,changed,due,to,the,ack,code,false,otherwise;boolean,on,ack,date,time,timestamp,string,action,ids,boolean,changed,false,boolean,contains,all,false,for,string,action,id,action,ids,if,action,id,equals,watch,field,contains,all,true,break,if,contains,all,for,action,status,status,actions,values,changed,status,on,ack,timestamp,return,changed,for,string,action,id,action,ids,action,status,status,actions,get,action,id,if,status,null,changed,status,on,ack,timestamp,return,changed
WatchStatus -> boolean onAck(DateTime timestamp, String... actionIds);1543572166;Notifies this status that the givne actions were acked. If the current state of one of these actions is_{@link ActionStatus.AckStatus.State#ACKABLE ACKABLE},_then we'll it'll change to {@link ActionStatus.AckStatus.State#ACKED ACKED}_(when set to {@link ActionStatus.AckStatus.State#ACKED ACKED}, the AckThrottler_will throttle the execution of the action.__@return {@code true} if the state of changed due to the ack, {@code false} otherwise.;boolean onAck(DateTime timestamp, String... actionIds) {_        boolean changed = false__        boolean containsAll = false__        for (String actionId : actionIds) {_            if (actionId.equals(WatchField.ALL_ACTIONS_ID)) {_                containsAll = true__                break__            }_        }_        if (containsAll) {_            for (ActionStatus status : actions.values()) {_                changed |= status.onAck(timestamp)__            }_            return changed__        }__        for (String actionId : actionIds) {_            ActionStatus status = actions.get(actionId)__            if (status != null) {_                changed |= status.onAck(timestamp)__            }_        }__        return changed__    };notifies,this,status,that,the,givne,actions,were,acked,if,the,current,state,of,one,of,these,actions,is,link,action,status,ack,status,state,ackable,ackable,then,we,ll,it,ll,change,to,link,action,status,ack,status,state,acked,acked,when,set,to,link,action,status,ack,status,state,acked,acked,the,ack,throttler,will,throttle,the,execution,of,the,action,return,code,true,if,the,state,of,changed,due,to,the,ack,code,false,otherwise;boolean,on,ack,date,time,timestamp,string,action,ids,boolean,changed,false,boolean,contains,all,false,for,string,action,id,action,ids,if,action,id,equals,watch,field,contains,all,true,break,if,contains,all,for,action,status,status,actions,values,changed,status,on,ack,timestamp,return,changed,for,string,action,id,action,ids,action,status,status,actions,get,action,id,if,status,null,changed,status,on,ack,timestamp,return,changed
WatchStatus -> boolean onAck(DateTime timestamp, String... actionIds);1543590766;Notifies this status that the givne actions were acked. If the current state of one of these actions is_{@link ActionStatus.AckStatus.State#ACKABLE ACKABLE},_then we'll it'll change to {@link ActionStatus.AckStatus.State#ACKED ACKED}_(when set to {@link ActionStatus.AckStatus.State#ACKED ACKED}, the AckThrottler_will throttle the execution of the action.__@return {@code true} if the state of changed due to the ack, {@code false} otherwise.;boolean onAck(DateTime timestamp, String... actionIds) {_        boolean changed = false__        boolean containsAll = false__        for (String actionId : actionIds) {_            if (actionId.equals(WatchField.ALL_ACTIONS_ID)) {_                containsAll = true__                break__            }_        }_        if (containsAll) {_            for (ActionStatus status : actions.values()) {_                changed |= status.onAck(timestamp)__            }_            return changed__        }__        for (String actionId : actionIds) {_            ActionStatus status = actions.get(actionId)__            if (status != null) {_                changed |= status.onAck(timestamp)__            }_        }__        return changed__    };notifies,this,status,that,the,givne,actions,were,acked,if,the,current,state,of,one,of,these,actions,is,link,action,status,ack,status,state,ackable,ackable,then,we,ll,it,ll,change,to,link,action,status,ack,status,state,acked,acked,when,set,to,link,action,status,ack,status,state,acked,acked,the,ack,throttler,will,throttle,the,execution,of,the,action,return,code,true,if,the,state,of,changed,due,to,the,ack,code,false,otherwise;boolean,on,ack,date,time,timestamp,string,action,ids,boolean,changed,false,boolean,contains,all,false,for,string,action,id,action,ids,if,action,id,equals,watch,field,contains,all,true,break,if,contains,all,for,action,status,status,actions,values,changed,status,on,ack,timestamp,return,changed,for,string,action,id,action,ids,action,status,status,actions,get,action,id,if,status,null,changed,status,on,ack,timestamp,return,changed
WatchStatus -> public void onCheck(boolean metCondition, DateTime timestamp);1524684173;Called whenever an watch is checked, ie. the condition of the watch is evaluated to see if_the watch should be executed.__@param metCondition  indicates whether the watch's condition was met.;public void onCheck(boolean metCondition, DateTime timestamp) {_        lastChecked = timestamp__        if (metCondition) {_            lastMetCondition = timestamp__        } else {_            for (ActionStatus status : actions.values()) {_                status.resetAckStatus(timestamp)__            }_        }_    };called,whenever,an,watch,is,checked,ie,the,condition,of,the,watch,is,evaluated,to,see,if,the,watch,should,be,executed,param,met,condition,indicates,whether,the,watch,s,condition,was,met;public,void,on,check,boolean,met,condition,date,time,timestamp,last,checked,timestamp,if,met,condition,last,met,condition,timestamp,else,for,action,status,status,actions,values,status,reset,ack,status,timestamp
WatchStatus -> public void onCheck(boolean metCondition, DateTime timestamp);1543572166;Called whenever an watch is checked, ie. the condition of the watch is evaluated to see if_the watch should be executed.__@param metCondition  indicates whether the watch's condition was met.;public void onCheck(boolean metCondition, DateTime timestamp) {_        lastChecked = timestamp__        if (metCondition) {_            lastMetCondition = timestamp__        } else {_            for (ActionStatus status : actions.values()) {_                status.resetAckStatus(timestamp)__            }_        }_    };called,whenever,an,watch,is,checked,ie,the,condition,of,the,watch,is,evaluated,to,see,if,the,watch,should,be,executed,param,met,condition,indicates,whether,the,watch,s,condition,was,met;public,void,on,check,boolean,met,condition,date,time,timestamp,last,checked,timestamp,if,met,condition,last,met,condition,timestamp,else,for,action,status,status,actions,values,status,reset,ack,status,timestamp
WatchStatus -> public void onCheck(boolean metCondition, DateTime timestamp);1543590766;Called whenever an watch is checked, ie. the condition of the watch is evaluated to see if_the watch should be executed.__@param metCondition  indicates whether the watch's condition was met.;public void onCheck(boolean metCondition, DateTime timestamp) {_        lastChecked = timestamp__        if (metCondition) {_            lastMetCondition = timestamp__        } else {_            for (ActionStatus status : actions.values()) {_                status.resetAckStatus(timestamp)__            }_        }_    };called,whenever,an,watch,is,checked,ie,the,condition,of,the,watch,is,evaluated,to,see,if,the,watch,should,be,executed,param,met,condition,indicates,whether,the,watch,s,condition,was,met;public,void,on,check,boolean,met,condition,date,time,timestamp,last,checked,timestamp,if,met,condition,last,met,condition,timestamp,else,for,action,status,status,actions,values,status,reset,ack,status,timestamp
WatchStatus -> boolean onAck(ZonedDateTime timestamp, String... actionIds);1549289311;Notifies this status that the givne actions were acked. If the current state of one of these actions is_{@link ActionStatus.AckStatus.State#ACKABLE ACKABLE},_then we'll it'll change to {@link ActionStatus.AckStatus.State#ACKED ACKED}_(when set to {@link ActionStatus.AckStatus.State#ACKED ACKED}, the AckThrottler_will throttle the execution of the action.__@return {@code true} if the state of changed due to the ack, {@code false} otherwise.;boolean onAck(ZonedDateTime timestamp, String... actionIds) {_        boolean changed = false__        boolean containsAll = false__        for (String actionId : actionIds) {_            if (actionId.equals(WatchField.ALL_ACTIONS_ID)) {_                containsAll = true__                break__            }_        }_        if (containsAll) {_            for (ActionStatus status : actions.values()) {_                changed |= status.onAck(timestamp)__            }_            return changed__        }__        for (String actionId : actionIds) {_            ActionStatus status = actions.get(actionId)__            if (status != null) {_                changed |= status.onAck(timestamp)__            }_        }__        return changed__    };notifies,this,status,that,the,givne,actions,were,acked,if,the,current,state,of,one,of,these,actions,is,link,action,status,ack,status,state,ackable,ackable,then,we,ll,it,ll,change,to,link,action,status,ack,status,state,acked,acked,when,set,to,link,action,status,ack,status,state,acked,acked,the,ack,throttler,will,throttle,the,execution,of,the,action,return,code,true,if,the,state,of,changed,due,to,the,ack,code,false,otherwise;boolean,on,ack,zoned,date,time,timestamp,string,action,ids,boolean,changed,false,boolean,contains,all,false,for,string,action,id,action,ids,if,action,id,equals,watch,field,contains,all,true,break,if,contains,all,for,action,status,status,actions,values,changed,status,on,ack,timestamp,return,changed,for,string,action,id,action,ids,action,status,status,actions,get,action,id,if,status,null,changed,status,on,ack,timestamp,return,changed
WatchStatus -> boolean onAck(ZonedDateTime timestamp, String... actionIds);1549984342;Notifies this status that the givne actions were acked. If the current state of one of these actions is_{@link ActionStatus.AckStatus.State#ACKABLE ACKABLE},_then we'll it'll change to {@link ActionStatus.AckStatus.State#ACKED ACKED}_(when set to {@link ActionStatus.AckStatus.State#ACKED ACKED}, the AckThrottler_will throttle the execution of the action.__@return {@code true} if the state of changed due to the ack, {@code false} otherwise.;boolean onAck(ZonedDateTime timestamp, String... actionIds) {_        boolean changed = false__        boolean containsAll = false__        for (String actionId : actionIds) {_            if (actionId.equals(WatchField.ALL_ACTIONS_ID)) {_                containsAll = true__                break__            }_        }_        if (containsAll) {_            for (ActionStatus status : actions.values()) {_                changed |= status.onAck(timestamp)__            }_            return changed__        }__        for (String actionId : actionIds) {_            ActionStatus status = actions.get(actionId)__            if (status != null) {_                changed |= status.onAck(timestamp)__            }_        }__        return changed__    };notifies,this,status,that,the,givne,actions,were,acked,if,the,current,state,of,one,of,these,actions,is,link,action,status,ack,status,state,ackable,ackable,then,we,ll,it,ll,change,to,link,action,status,ack,status,state,acked,acked,when,set,to,link,action,status,ack,status,state,acked,acked,the,ack,throttler,will,throttle,the,execution,of,the,action,return,code,true,if,the,state,of,changed,due,to,the,ack,code,false,otherwise;boolean,on,ack,zoned,date,time,timestamp,string,action,ids,boolean,changed,false,boolean,contains,all,false,for,string,action,id,action,ids,if,action,id,equals,watch,field,contains,all,true,break,if,contains,all,for,action,status,status,actions,values,changed,status,on,ack,timestamp,return,changed,for,string,action,id,action,ids,action,status,status,actions,get,action,id,if,status,null,changed,status,on,ack,timestamp,return,changed
WatchStatus -> boolean onAck(ZonedDateTime timestamp, String... actionIds);1550263815;Notifies this status that the givne actions were acked. If the current state of one of these actions is_{@link ActionStatus.AckStatus.State#ACKABLE ACKABLE},_then we'll it'll change to {@link ActionStatus.AckStatus.State#ACKED ACKED}_(when set to {@link ActionStatus.AckStatus.State#ACKED ACKED}, the AckThrottler_will throttle the execution of the action.__@return {@code true} if the state of changed due to the ack, {@code false} otherwise.;boolean onAck(ZonedDateTime timestamp, String... actionIds) {_        boolean changed = false__        boolean containsAll = false__        for (String actionId : actionIds) {_            if (actionId.equals(WatchField.ALL_ACTIONS_ID)) {_                containsAll = true__                break__            }_        }_        if (containsAll) {_            for (ActionStatus status : actions.values()) {_                changed |= status.onAck(timestamp)__            }_            return changed__        }__        for (String actionId : actionIds) {_            ActionStatus status = actions.get(actionId)__            if (status != null) {_                changed |= status.onAck(timestamp)__            }_        }__        return changed__    };notifies,this,status,that,the,givne,actions,were,acked,if,the,current,state,of,one,of,these,actions,is,link,action,status,ack,status,state,ackable,ackable,then,we,ll,it,ll,change,to,link,action,status,ack,status,state,acked,acked,when,set,to,link,action,status,ack,status,state,acked,acked,the,ack,throttler,will,throttle,the,execution,of,the,action,return,code,true,if,the,state,of,changed,due,to,the,ack,code,false,otherwise;boolean,on,ack,zoned,date,time,timestamp,string,action,ids,boolean,changed,false,boolean,contains,all,false,for,string,action,id,action,ids,if,action,id,equals,watch,field,contains,all,true,break,if,contains,all,for,action,status,status,actions,values,changed,status,on,ack,timestamp,return,changed,for,string,action,id,action,ids,action,status,status,actions,get,action,id,if,status,null,changed,status,on,ack,timestamp,return,changed
