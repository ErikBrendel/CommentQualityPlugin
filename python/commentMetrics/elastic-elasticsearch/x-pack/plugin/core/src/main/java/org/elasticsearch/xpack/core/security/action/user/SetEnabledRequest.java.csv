commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     Error error = Users.validateUsername(username, true, Settings.EMPTY).     if (error != null) {         validationException = addValidationError(error.toString(), validationException).     }     if (enabled == null) {         validationException = addValidationError("enabled must be set", validationException).     }     return validationException. }
true;public;0;3;/**  * @return whether the user should be set to enabled or not  */ ;/**  * @return whether the user should be set to enabled or not  */ public Boolean enabled() {     return enabled. }
true;public;1;3;/**  * Set whether the user should be enabled or not.  */ ;/**  * Set whether the user should be enabled or not.  */ public void enabled(boolean enabled) {     this.enabled = enabled. }
true;public;0;3;/**  * @return the username that this request applies to.  */ ;/**  * @return the username that this request applies to.  */ public String username() {     return username. }
true;public;1;3;/**  * Set the username that the request applies to. Must not be {@code null}  */ ;/**  * Set the username that the request applies to. Must not be {@code null}  */ public void username(String username) {     this.username = username. }
false;public;0;4;;@Override public String[] usernames() {     return new String[] { username }. }
true;public;0;4;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ @Override public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;5;;@Override public SetEnabledRequest setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     this.enabled = in.readBoolean().     this.username = in.readString().     this.refreshPolicy = RefreshPolicy.readFrom(in). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(enabled).     out.writeString(username).     refreshPolicy.writeTo(out). }
