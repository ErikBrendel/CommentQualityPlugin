commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TimeValue period() {     return period. }
false;public;2;24;;@Override public Result throttle(String actionId, WatchExecutionContext ctx) {     TimeValue period = this.period.     if (period == null) {         // falling back on the throttle period of the watch         period = ctx.watch().throttlePeriod().     }     if (period == null) {         // falling back on the default throttle period of watcher         period = ctx.defaultThrottlePeriod().     }     ActionStatus status = ctx.watch().status().actionStatus(actionId).     if (status.lastSuccessfulExecution() == null) {         return Result.NO.     }     long now = clock.millis().     long executionTime = status.lastSuccessfulExecution().timestamp().toInstant().toEpochMilli().     TimeValue timeElapsed = TimeValue.timeValueMillis(now - executionTime).     if (timeElapsed.getMillis() <= period.getMillis()) {         return Result.throttle(PERIOD, "throttling interval is set to [{}] but time elapsed since last execution is [{}]", period, timeElapsed).     }     return Result.NO. }
