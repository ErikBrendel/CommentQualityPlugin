# id;timestamp;commentText;codeText;commentWords;codeWords
TransportFreezeIndexAction -> FreezeRequest -> @Override         public IndicesOptions indicesOptions();1541848531;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@return the current behaviour when it comes to index names and wildcard indices expressions;@Override_        public IndicesOptions indicesOptions() {_            return indicesOptions__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,return,the,current,behaviour,when,it,comes,to,index,names,and,wildcard,indices,expressions;override,public,indices,options,indices,options,return,indices,options
TransportFreezeIndexAction -> FreezeRequest -> @Override         public IndicesOptions indicesOptions();1542697404;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@return the current behaviour when it comes to index names and wildcard indices expressions;@Override_        public IndicesOptions indicesOptions() {_            return indicesOptions__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,return,the,current,behaviour,when,it,comes,to,index,names,and,wildcard,indices,expressions;override,public,indices,options,indices,options,return,indices,options
TransportFreezeIndexAction -> FreezeRequest -> @Override         public IndicesOptions indicesOptions();1547030937;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@return the current behaviour when it comes to index names and wildcard indices expressions;@Override_        public IndicesOptions indicesOptions() {_            return indicesOptions__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,return,the,current,behaviour,when,it,comes,to,index,names,and,wildcard,indices,expressions;override,public,indices,options,indices,options,return,indices,options
TransportFreezeIndexAction -> FreezeRequest -> @Override         public IndicesOptions indicesOptions();1548412047;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@return the current behaviour when it comes to index names and wildcard indices expressions;@Override_        public IndicesOptions indicesOptions() {_            return indicesOptions__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,return,the,current,behaviour,when,it,comes,to,index,names,and,wildcard,indices,expressions;override,public,indices,options,indices,options,return,indices,options
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1542697404;Sets the number of shard copies that should be active for indices opening to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Indices opening will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link OpenIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public FreezeRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_            this.waitForActiveShards = waitForActiveShards__            return this__        };sets,the,number,of,shard,copies,that,should,be,active,for,indices,opening,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,indices,opening,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,open,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,freeze,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1547030937;Sets the number of shard copies that should be active for indices opening to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Indices opening will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link OpenIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public FreezeRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_            this.waitForActiveShards = waitForActiveShards__            return this__        };sets,the,number,of,shard,copies,that,should,be,active,for,indices,opening,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,indices,opening,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,open,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,freeze,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest waitForActiveShards(ActiveShardCount waitForActiveShards);1548412047;Sets the number of shard copies that should be active for indices opening to return._Defaults to {@link ActiveShardCount#DEFAULT}, which will wait for one shard copy_(the primary) to become active. Set this value to {@link ActiveShardCount#ALL} to_wait for all shards (primary and all replicas) to be active before returning._Otherwise, use {@link ActiveShardCount#from(int)} to set this value to any_non-negative integer, up to the number of copies per shard (number of replicas + 1),_to wait for the desired amount of shard copies to become active before returning._Indices opening will only wait up until the timeout value for the number of shard copies_to be active before returning.  Check {@link OpenIndexResponse#isShardsAcknowledged()} to_determine if the requisite shard copies were all started before returning or timing out.__@param waitForActiveShards number of active shard copies to wait on;public FreezeRequest waitForActiveShards(ActiveShardCount waitForActiveShards) {_            this.waitForActiveShards = waitForActiveShards__            return this__        };sets,the,number,of,shard,copies,that,should,be,active,for,indices,opening,to,return,defaults,to,link,active,shard,count,default,which,will,wait,for,one,shard,copy,the,primary,to,become,active,set,this,value,to,link,active,shard,count,all,to,wait,for,all,shards,primary,and,all,replicas,to,be,active,before,returning,otherwise,use,link,active,shard,count,from,int,to,set,this,value,to,any,non,negative,integer,up,to,the,number,of,copies,per,shard,number,of,replicas,1,to,wait,for,the,desired,amount,of,shard,copies,to,become,active,before,returning,indices,opening,will,only,wait,up,until,the,timeout,value,for,the,number,of,shard,copies,to,be,active,before,returning,check,link,open,index,response,is,shards,acknowledged,to,determine,if,the,requisite,shard,copies,were,all,started,before,returning,or,timing,out,param,wait,for,active,shards,number,of,active,shard,copies,to,wait,on;public,freeze,request,wait,for,active,shards,active,shard,count,wait,for,active,shards,this,wait,for,active,shards,wait,for,active,shards,return,this
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest indicesOptions(IndicesOptions indicesOptions);1541848531;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions_@return the request itself;public FreezeRequest indicesOptions(IndicesOptions indicesOptions) {_            this.indicesOptions = indicesOptions__            return this__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,param,indices,options,the,desired,behaviour,regarding,indices,to,ignore,and,wildcard,indices,expressions,return,the,request,itself;public,freeze,request,indices,options,indices,options,indices,options,this,indices,options,indices,options,return,this
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest indicesOptions(IndicesOptions indicesOptions);1542697404;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions_@return the request itself;public FreezeRequest indicesOptions(IndicesOptions indicesOptions) {_            this.indicesOptions = indicesOptions__            return this__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,param,indices,options,the,desired,behaviour,regarding,indices,to,ignore,and,wildcard,indices,expressions,return,the,request,itself;public,freeze,request,indices,options,indices,options,indices,options,this,indices,options,indices,options,return,this
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest indicesOptions(IndicesOptions indicesOptions);1547030937;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions_@return the request itself;public FreezeRequest indicesOptions(IndicesOptions indicesOptions) {_            this.indicesOptions = indicesOptions__            return this__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,param,indices,options,the,desired,behaviour,regarding,indices,to,ignore,and,wildcard,indices,expressions,return,the,request,itself;public,freeze,request,indices,options,indices,options,indices,options,this,indices,options,indices,options,return,this
TransportFreezeIndexAction -> FreezeRequest -> public FreezeRequest indicesOptions(IndicesOptions indicesOptions);1548412047;Specifies what type of requested indices to ignore and how to deal with wildcard expressions._For example indices that don't exist.__@param indicesOptions the desired behaviour regarding indices to ignore and wildcard indices expressions_@return the request itself;public FreezeRequest indicesOptions(IndicesOptions indicesOptions) {_            this.indicesOptions = indicesOptions__            return this__        };specifies,what,type,of,requested,indices,to,ignore,and,how,to,deal,with,wildcard,expressions,for,example,indices,that,don,t,exist,param,indices,options,the,desired,behaviour,regarding,indices,to,ignore,and,wildcard,indices,expressions,return,the,request,itself;public,freeze,request,indices,options,indices,options,indices,options,this,indices,options,indices,options,return,this
TransportFreezeIndexAction -> FreezeRequest -> @Override         public String[] indices();1541848531;@return the indices to be frozen or unfrozen;@Override_        public String[] indices() {_            return indices__        };return,the,indices,to,be,frozen,or,unfrozen;override,public,string,indices,return,indices
TransportFreezeIndexAction -> FreezeRequest -> @Override         public String[] indices();1542697404;@return the indices to be frozen or unfrozen;@Override_        public String[] indices() {_            return indices__        };return,the,indices,to,be,frozen,or,unfrozen;override,public,string,indices,return,indices
TransportFreezeIndexAction -> FreezeRequest -> @Override         public String[] indices();1547030937;@return the indices to be frozen or unfrozen;@Override_        public String[] indices() {_            return indices__        };return,the,indices,to,be,frozen,or,unfrozen;override,public,string,indices,return,indices
TransportFreezeIndexAction -> FreezeRequest -> @Override         public String[] indices();1548412047;@return the indices to be frozen or unfrozen;@Override_        public String[] indices() {_            return indices__        };return,the,indices,to,be,frozen,or,unfrozen;override,public,string,indices,return,indices
