commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public byte getId() {     return id. }
false;public,static;1;12;;public static Type fromId(byte id) {     switch(id) {         case 0:             return TERMS.         case 1:             return HISTOGRAM.         case 2:             return DATE_HISTOGRAM.         default:             throw new IllegalArgumentException("unknown type").     } }
false;public;0;3;;public String value() {     return name().toLowerCase(Locale.ROOT). }
false;static;2;5;;static <VB extends SingleGroupSource<?>, T> void declareValuesSourceFields(AbstractObjectParser<VB, T> parser, ValueType targetValueType) {     // either script or field     parser.declareString(optionalConstructorArg(), FIELD). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (field != null) {         builder.field(FIELD.getPreferredName(), field).     }     builder.endObject().     return builder. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalString(field). }
false;public,abstract;0;1;;public abstract Type getType().
false;public;0;3;;public String getField() {     return field. }
false;public;1;14;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final SingleGroupSource<?> that = (SingleGroupSource<?>) other.     return Objects.equals(this.field, that.field). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(field). }
