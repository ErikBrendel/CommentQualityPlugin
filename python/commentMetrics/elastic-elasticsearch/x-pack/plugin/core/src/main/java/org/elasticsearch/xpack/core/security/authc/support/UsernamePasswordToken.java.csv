commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;17;;public static String basicAuthHeaderValue(String username, SecureString passwd) {     CharBuffer chars = CharBuffer.allocate(username.length() + passwd.length() + 1).     byte[] charBytes = null.     try {         chars.put(username).put(':').put(passwd.getChars()).         charBytes = CharArrays.toUtf8Bytes(chars.array()).         // TODO we still have passwords in Strings in headers. Maybe we can look into using a CharSequence?         String basicToken = Base64.getEncoder().encodeToString(charBytes).         return "Basic " + basicToken.     } finally {         Arrays.fill(chars.array(), (char) 0).         if (charBytes != null) {             Arrays.fill(charBytes, (byte) 0).         }     } }
false;public;0;4;;@Override public String principal() {     return username. }
false;public;0;4;;@Override public SecureString credentials() {     return password. }
false;public;0;4;;@Override public void clearCredentials() {     password.close(). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     UsernamePasswordToken that = (UsernamePasswordToken) o.     return Objects.equals(password, that.password) && Objects.equals(username, that.username). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(username, password.hashCode()). }
false;public,static;1;4;;public static UsernamePasswordToken extractToken(ThreadContext context) {     String authStr = context.getHeader(BASIC_AUTH_HEADER).     return extractToken(authStr). }
false;private,static;1;31;;private static UsernamePasswordToken extractToken(String headerValue) {     if (Strings.isNullOrEmpty(headerValue)) {         return null.     }     if (headerValue.regionMatches(IGNORE_CASE_AUTH_HEADER_MATCH, 0, BASIC_AUTH_PREFIX, 0, BASIC_AUTH_PREFIX.length()) == false) {         // the header does not start with 'Basic ' so we cannot use it, but it may be valid for another realm         return null.     }     // if there is nothing after the prefix, the header is bad     if (headerValue.length() == BASIC_AUTH_PREFIX.length()) {         throw authenticationError("invalid basic authentication header value").     }     char[] userpasswd.     try {         userpasswd = CharArrays.utf8BytesToChars(Base64.getDecoder().decode(headerValue.substring(BASIC_AUTH_PREFIX.length()).trim())).     } catch (IllegalArgumentException e) {         throw authenticationError("invalid basic authentication header encoding", e).     }     int i = indexOfColon(userpasswd).     if (i < 0) {         throw authenticationError("invalid basic authentication header value").     }     return new UsernamePasswordToken(new String(Arrays.copyOfRange(userpasswd, 0, i)), new SecureString(Arrays.copyOfRange(userpasswd, i + 1, userpasswd.length))). }
false;public,static;2;3;;public static void putTokenHeader(ThreadContext context, UsernamePasswordToken token) {     context.putHeader(BASIC_AUTH_HEADER, basicAuthHeaderValue(token.username, token.password)). }
true;private,static;1;8;/**  * Like String.indexOf for for an array of chars  */ ;/**  * Like String.indexOf for for an array of chars  */ private static int indexOfColon(char[] array) {     for (int i = 0. (i < array.length). i++) {         if (array[i] == ':') {             return i.         }     }     return -1. }
