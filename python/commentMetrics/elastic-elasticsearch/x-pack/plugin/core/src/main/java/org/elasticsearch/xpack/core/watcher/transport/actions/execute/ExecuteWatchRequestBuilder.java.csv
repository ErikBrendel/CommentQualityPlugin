commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the id of the watch to be executed  */ ;/**  * Sets the id of the watch to be executed  */ public ExecuteWatchRequestBuilder setId(String id) {     this.request().setId(id).     return this. }
true;public;1;4;/**  * @param ignoreCondition set if the condition for this execution be ignored  */ ;/**  * @param ignoreCondition set if the condition for this execution be ignored  */ public ExecuteWatchRequestBuilder setIgnoreCondition(boolean ignoreCondition) {     request.setIgnoreCondition(ignoreCondition).     return this. }
true;public;1;4;/**  * @param recordExecution Sets if this execution be recorded in the history index and reflected in the watch  */ ;/**  * @param recordExecution Sets if this execution be recorded in the history index and reflected in the watch  */ public ExecuteWatchRequestBuilder setRecordExecution(boolean recordExecution) {     request.setRecordExecution(recordExecution).     return this. }
true;public;1;4;/**  * @param alternativeInput Set's the alernative input  */ ;/**  * @param alternativeInput Set's the alernative input  */ public ExecuteWatchRequestBuilder setAlternativeInput(Map<String, Object> alternativeInput) {     request.setAlternativeInput(alternativeInput).     return this. }
true;public;1;4;/**  * @param data The data that should be associated with the trigger event  */ ;/**  * @param data The data that should be associated with the trigger event  */ public ExecuteWatchRequestBuilder setTriggerData(Map<String, Object> data) throws IOException {     request.setTriggerData(data).     return this. }
true;public;1;4;/**  * @param triggerEvent the trigger event to use  */ ;/**  * @param triggerEvent the trigger event to use  */ public ExecuteWatchRequestBuilder setTriggerEvent(TriggerEvent triggerEvent) throws IOException {     request.setTriggerEvent(triggerEvent).     return this. }
true;public;2;4;/**  * @param watchSource instead of using an existing watch use this non persisted watch  */ ;/**  * @param watchSource instead of using an existing watch use this non persisted watch  */ public ExecuteWatchRequestBuilder setWatchSource(BytesReference watchSource, XContentType xContentType) {     request.setWatchSource(watchSource, xContentType).     return this. }
true;public;1;4;/**  * @param watchSource instead of using an existing watch use this non persisted watch  */ ;/**  * @param watchSource instead of using an existing watch use this non persisted watch  */ public ExecuteWatchRequestBuilder setWatchSource(WatchSourceBuilder watchSource) {     request.setWatchSource(watchSource).     return this. }
true;public;2;4;/**  * Sets the mode in which the given action (identified by its id) will be handled.  *  * @param actionId   The id of the action  * @param actionMode The mode in which the action will be handled in the execution  */ ;/**  * Sets the mode in which the given action (identified by its id) will be handled.  *  * @param actionId   The id of the action  * @param actionMode The mode in which the action will be handled in the execution  */ public ExecuteWatchRequestBuilder setActionMode(String actionId, ActionExecutionMode actionMode) {     request.setActionMode(actionId, actionMode).     return this. }
true;public;1;4;/**  * @param debug indicates whether the watch should execute in debug mode. In debug mode the  *              returned watch record will hold the execution {@code vars}  */ ;/**  * @param debug indicates whether the watch should execute in debug mode. In debug mode the  *              returned watch record will hold the execution {@code vars}  */ public ExecuteWatchRequestBuilder setDebug(boolean debug) {     request.setDebug(debug).     return this. }
