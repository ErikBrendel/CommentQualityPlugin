# id;timestamp;commentText;codeText;commentWords;codeWords
LifecycleType -> Phase nextPhase(Map<String, Phase> phases, @Nullable Phase currentPhase)_;1516783641;@param currentPhase_the current phase that is or was just executed_@return the next phase after <code>currentPhase</code> to be execute. If_it is `null`, the first phase to be executed is returned. If it_is the last phase, then no next phase is to be executed and_`null` is returned.;Phase nextPhase(Map<String, Phase> phases, @Nullable Phase currentPhase)_;param,current,phase,the,current,phase,that,is,or,was,just,executed,return,the,next,phase,after,code,current,phase,code,to,be,execute,if,it,is,null,the,first,phase,to,be,executed,is,returned,if,it,is,the,last,phase,then,no,next,phase,is,to,be,executed,and,null,is,returned;phase,next,phase,map,string,phase,phases,nullable,phase,current,phase
LifecycleType -> Phase nextPhase(Map<String, Phase> phases, @Nullable Phase currentPhase)_;1522076403;@param currentPhase_the current phase that is or was just executed_@return the next phase after <code>currentPhase</code> to be execute. If_it is `null`, the first phase to be executed is returned. If it_is the last phase, then no next phase is to be executed and_`null` is returned.;Phase nextPhase(Map<String, Phase> phases, @Nullable Phase currentPhase)_;param,current,phase,the,current,phase,that,is,or,was,just,executed,return,the,next,phase,after,code,current,phase,code,to,be,execute,if,it,is,null,the,first,phase,to,be,executed,is,returned,if,it,is,the,last,phase,then,no,next,phase,is,to,be,executed,and,null,is,returned;phase,next,phase,map,string,phase,phases,nullable,phase,current,phase
LifecycleType -> List<Phase> getOrderedPhases(Map<String, Phase> phases)_;1522115339;@return the first phase of this policy to execute;List<Phase> getOrderedPhases(Map<String, Phase> phases)_;return,the,first,phase,of,this,policy,to,execute;list,phase,get,ordered,phases,map,string,phase,phases
LifecycleType -> List<Phase> getOrderedPhases(Map<String, Phase> phases)_;1523350437;@return the first phase of this policy to execute;List<Phase> getOrderedPhases(Map<String, Phase> phases)_;return,the,first,phase,of,this,policy,to,execute;list,phase,get,ordered,phases,map,string,phase,phases
LifecycleType -> List<Phase> getOrderedPhases(Map<String, Phase> phases)_;1523496526;@return the first phase of this policy to execute;List<Phase> getOrderedPhases(Map<String, Phase> phases)_;return,the,first,phase,of,this,policy,to,execute;list,phase,get,ordered,phases,map,string,phase,phases
LifecycleType -> List<Phase> getOrderedPhases(Map<String, Phase> phases)_;1532695210;@return the first phase of this policy to execute;List<Phase> getOrderedPhases(Map<String, Phase> phases)_;return,the,first,phase,of,this,policy,to,execute;list,phase,get,ordered,phases,map,string,phase,phases
LifecycleType -> String getType()_;1516783641;Each {@link LifecyclePolicy} has a specific type to differentiate_themselves. Every implementation is responsible to providing its specific_type.__@return the {@link LifecyclePolicy} type.;String getType()_;each,link,lifecycle,policy,has,a,specific,type,to,differentiate,themselves,every,implementation,is,responsible,to,providing,its,specific,type,return,the,link,lifecycle,policy,type;string,get,type
LifecycleType -> String getType()_;1522076403;Each {@link LifecyclePolicy} has a specific type to differentiate_themselves. Every implementation is responsible to providing its specific_type.__@return the {@link LifecyclePolicy} type.;String getType()_;each,link,lifecycle,policy,has,a,specific,type,to,differentiate,themselves,every,implementation,is,responsible,to,providing,its,specific,type,return,the,link,lifecycle,policy,type;string,get,type
LifecycleType -> String getType()_;1522115339;Each {@link LifecyclePolicy} has a specific type to differentiate_themselves. Every implementation is responsible to providing its specific_type.__@return the {@link LifecyclePolicy} type.;String getType()_;each,link,lifecycle,policy,has,a,specific,type,to,differentiate,themselves,every,implementation,is,responsible,to,providing,its,specific,type,return,the,link,lifecycle,policy,type;string,get,type
LifecycleType -> String getType()_;1523350437;Each {@link LifecyclePolicy} has a specific type to differentiate_themselves. Every implementation is responsible to providing its specific_type.__@return the {@link LifecyclePolicy} type.;String getType()_;each,link,lifecycle,policy,has,a,specific,type,to,differentiate,themselves,every,implementation,is,responsible,to,providing,its,specific,type,return,the,link,lifecycle,policy,type;string,get,type
LifecycleType -> Phase getFirstPhase(Map<String, Phase> phases)_;1516783641;@return the first phase of this policy to execute;Phase getFirstPhase(Map<String, Phase> phases)_;return,the,first,phase,of,this,policy,to,execute;phase,get,first,phase,map,string,phase,phases
LifecycleType -> Phase getFirstPhase(Map<String, Phase> phases)_;1522076403;@return the first phase of this policy to execute;Phase getFirstPhase(Map<String, Phase> phases)_;return,the,first,phase,of,this,policy,to,execute;phase,get,first,phase,map,string,phase,phases
LifecycleType -> void validate(Collection<Phase> phases)_;1516783641;validates whether the specified <code>phases</code> are valid for this_policy instance.__@param phases_the phases to verify validity against_@throws IllegalArgumentException_if a specific phase or lack of a specific phase is invalid.;void validate(Collection<Phase> phases)_;validates,whether,the,specified,code,phases,code,are,valid,for,this,policy,instance,param,phases,the,phases,to,verify,validity,against,throws,illegal,argument,exception,if,a,specific,phase,or,lack,of,a,specific,phase,is,invalid;void,validate,collection,phase,phases
LifecycleType -> void validate(Collection<Phase> phases)_;1522076403;validates whether the specified <code>phases</code> are valid for this_policy instance.__@param phases_the phases to verify validity against_@throws IllegalArgumentException_if a specific phase or lack of a specific phase is invalid.;void validate(Collection<Phase> phases)_;validates,whether,the,specified,code,phases,code,are,valid,for,this,policy,instance,param,phases,the,phases,to,verify,validity,against,throws,illegal,argument,exception,if,a,specific,phase,or,lack,of,a,specific,phase,is,invalid;void,validate,collection,phase,phases
LifecycleType -> void validate(Collection<Phase> phases)_;1522115339;validates whether the specified <code>phases</code> are valid for this_policy instance.__@param phases_the phases to verify validity against_@throws IllegalArgumentException_if a specific phase or lack of a specific phase is invalid.;void validate(Collection<Phase> phases)_;validates,whether,the,specified,code,phases,code,are,valid,for,this,policy,instance,param,phases,the,phases,to,verify,validity,against,throws,illegal,argument,exception,if,a,specific,phase,or,lack,of,a,specific,phase,is,invalid;void,validate,collection,phase,phases
LifecycleType -> void validate(Collection<Phase> phases)_;1523350437;validates whether the specified <code>phases</code> are valid for this_policy instance.__@param phases_the phases to verify validity against_@throws IllegalArgumentException_if a specific phase or lack of a specific phase is invalid.;void validate(Collection<Phase> phases)_;validates,whether,the,specified,code,phases,code,are,valid,for,this,policy,instance,param,phases,the,phases,to,verify,validity,against,throws,illegal,argument,exception,if,a,specific,phase,or,lack,of,a,specific,phase,is,invalid;void,validate,collection,phase,phases
LifecycleType -> void validate(Collection<Phase> phases)_;1523496526;validates whether the specified <code>phases</code> are valid for this_policy instance.__@param phases_the phases to verify validity against_@throws IllegalArgumentException_if a specific phase or lack of a specific phase is invalid.;void validate(Collection<Phase> phases)_;validates,whether,the,specified,code,phases,code,are,valid,for,this,policy,instance,param,phases,the,phases,to,verify,validity,against,throws,illegal,argument,exception,if,a,specific,phase,or,lack,of,a,specific,phase,is,invalid;void,validate,collection,phase,phases
LifecycleType -> void validate(Collection<Phase> phases)_;1532695210;validates whether the specified <code>phases</code> are valid for this_policy instance.__@param phases_the phases to verify validity against_@throws IllegalArgumentException_if a specific phase or lack of a specific phase is invalid.;void validate(Collection<Phase> phases)_;validates,whether,the,specified,code,phases,code,are,valid,for,this,policy,instance,param,phases,the,phases,to,verify,validity,against,throws,illegal,argument,exception,if,a,specific,phase,or,lack,of,a,specific,phase,is,invalid;void,validate,collection,phase,phases
