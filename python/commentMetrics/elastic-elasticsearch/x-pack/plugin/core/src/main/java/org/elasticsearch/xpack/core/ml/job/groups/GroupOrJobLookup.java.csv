commented;modifiers;parameterAmount;loc;comment;code
false;private;1;19;;private void put(Job job) {     if (groupOrJobLookup.containsKey(job.getId())) {         throw new ResourceAlreadyExistsException(Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, job.getId())).     }     groupOrJobLookup.put(job.getId(), new GroupOrJob.SingleJob(job)).     for (String groupName : job.getGroups()) {         GroupOrJob oldGroup = groupOrJobLookup.get(groupName).         if (oldGroup == null) {             groupOrJobLookup.put(groupName, new GroupOrJob.Group(Collections.singletonList(job))).         } else {             if (oldGroup.isGroup() == false) {                 throw new ResourceAlreadyExistsException(Messages.getMessage(Messages.JOB_AND_GROUP_NAMES_MUST_BE_UNIQUE, groupName)).             }             List<Job> groupJobs = new ArrayList<>(oldGroup.jobs()).             groupJobs.add(job).             groupOrJobLookup.put(groupName, new GroupOrJob.Group(groupJobs)).         }     } }
false;public;2;3;;public Set<String> expandJobIds(String expression, boolean allowNoJobs) {     return new GroupOrJobResolver().expand(expression, allowNoJobs). }
false;public;1;3;;public boolean isGroupOrJob(String id) {     return groupOrJobLookup.containsKey(id). }
false;protected;0;4;;@Override protected Set<String> keys() {     return groupOrJobLookup.keySet(). }
false;protected;0;7;;@Override protected Set<String> nameSet() {     return groupOrJobLookup.values().stream().filter(groupOrJob -> groupOrJob.isGroup() == false).map(groupOrJob -> groupOrJob.jobs().get(0).getId()).collect(Collectors.toSet()). }
false;protected;1;5;;@Override protected List<String> lookup(String key) {     GroupOrJob groupOrJob = groupOrJobLookup.get(key).     return groupOrJob == null ? Collections.emptyList() : groupOrJob.jobs().stream().map(Job::getId).collect(Collectors.toList()). }
