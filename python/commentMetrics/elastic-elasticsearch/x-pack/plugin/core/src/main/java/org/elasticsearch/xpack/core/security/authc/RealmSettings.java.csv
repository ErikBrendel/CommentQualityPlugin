commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static String realmSettingPrefix(String type) {     return PREFIX + type + ".". }
false;public,static;1;3;;public static String realmSettingPrefix(RealmConfig.RealmIdentifier identifier) {     return realmSettingPrefix(identifier.getType()) + identifier.getName() + ".". }
false;public,static;1;3;;public static String realmSslPrefix(RealmConfig.RealmIdentifier identifier) {     return realmSettingPrefix(identifier) + "ssl.". }
true;public,static;3;3;/**  * Create a {@link Setting#simpleString(String, Setting.Property...) simple string} {@link Setting} object for a realm of  * with the provided type and setting suffix.  * @param realmType The type of the realm, used within the setting prefix  * @param suffix The suffix of the setting (everything following the realm name in the affix setting)  * @param properties And properties to apply to the setting  */ ;/**  * Create a {@link Setting#simpleString(String, Setting.Property...) simple string} {@link Setting} object for a realm of  * with the provided type and setting suffix.  * @param realmType The type of the realm, used within the setting prefix  * @param suffix The suffix of the setting (everything following the realm name in the affix setting)  * @param properties And properties to apply to the setting  */ public static Setting.AffixSetting<String> simpleString(String realmType, String suffix, Setting.Property... properties) {     return Setting.affixKeySetting(realmSettingPrefix(realmType), suffix, key -> Setting.simpleString(key, properties)). }
true;public,static;2;3;/**  * Create a {@link Function} that acts as a factory an {@link org.elasticsearch.common.settings.Setting.AffixSetting}.  * The {@code Function} takes the <em>realm-type</em> as an argument.  * @param suffix The suffix of the setting (everything following the realm name in the affix setting)  * @param delegateFactory A factory to produce the concrete setting.  *                       See {@link Setting#affixKeySetting(Setting.AffixKey, Function, Setting.AffixSetting[])}  */ ;/**  * Create a {@link Function} that acts as a factory an {@link org.elasticsearch.common.settings.Setting.AffixSetting}.  * The {@code Function} takes the <em>realm-type</em> as an argument.  * @param suffix The suffix of the setting (everything following the realm name in the affix setting)  * @param delegateFactory A factory to produce the concrete setting.  *                       See {@link Setting#affixKeySetting(Setting.AffixKey, Function, Setting.AffixSetting[])}  */ public static <T> Function<String, Setting.AffixSetting<T>> affixSetting(String suffix, Function<String, Setting<T>> delegateFactory) {     return realmType -> Setting.affixKeySetting(realmSettingPrefix(realmType), suffix, delegateFactory). }
true;public,static;1;13;/**  * Extracts the realm settings from a global settings object.  * Returns a Map of realm-id to realm-settings.  */ ;/**  * Extracts the realm settings from a global settings object.  * Returns a Map of realm-id to realm-settings.  */ public static Map<RealmConfig.RealmIdentifier, Settings> getRealmSettings(Settings globalSettings) {     Settings settingsByType = globalSettings.getByPrefix(RealmSettings.PREFIX).     return settingsByType.names().stream().flatMap(type -> {         final Settings settingsByName = settingsByType.getAsSettings(type).         return settingsByName.names().stream().map(name -> {             final RealmConfig.RealmIdentifier id = new RealmConfig.RealmIdentifier(type, name).             final Settings realmSettings = settingsByName.getAsSettings(name).             return new Tuple<>(id, realmSettings).         }).     }).collect(Collectors.toMap(Tuple::v1, Tuple::v2)). }
false;public,static;2;3;;public static String getFullSettingKey(String realmName, Setting.AffixSetting<?> setting) {     return setting.getConcreteSettingForNamespace(realmName).getKey(). }
false;public,static;2;3;;public static String getFullSettingKey(RealmConfig realm, Setting.AffixSetting<?> setting) {     return setting.getConcreteSettingForNamespace(realm.name()).getKey(). }
false;public,static;2;3;;public static <T> String getFullSettingKey(RealmConfig.RealmIdentifier realmId, Function<String, Setting.AffixSetting<T>> setting) {     return getFullSettingKey(realmId.getName(), setting.apply(realmId.getType())). }
false;public,static;2;3;;public static <T> String getFullSettingKey(RealmConfig realm, Function<String, Setting.AffixSetting<T>> setting) {     return getFullSettingKey(realm.identifier, setting). }
false;public,static;1;3;;public static List<Setting.AffixSetting<?>> getStandardSettings(String realmType) {     return Arrays.asList(ENABLED_SETTING.apply(realmType), ORDER_SETTING.apply(realmType)). }
