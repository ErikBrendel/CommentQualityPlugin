# id;timestamp;commentText;codeText;commentWords;codeWords
LifecycleAction -> List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;1522282250;converts the {@link LifecycleAction}'s execution plan into a series of_{@link Step}s that reference each other to preserve order of operations._@param client      the client that will be used by {@link AsyncActionStep} and {@link AsyncWaitStep} steps_@param phase       the name of the phase this action is being executed within_@param nextStepKey the next step to execute after this action's steps. If null, then there are no further_steps to run. It is the responsibility of each {@link LifecycleAction} to implement this_correctly and not forget to link to this final step so that the policy can continue._@return an ordered list of steps that represent the execution plan of the action;List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;converts,the,link,lifecycle,action,s,execution,plan,into,a,series,of,link,step,s,that,reference,each,other,to,preserve,order,of,operations,param,client,the,client,that,will,be,used,by,link,async,action,step,and,link,async,wait,step,steps,param,phase,the,name,of,the,phase,this,action,is,being,executed,within,param,next,step,key,the,next,step,to,execute,after,this,action,s,steps,if,null,then,there,are,no,further,steps,to,run,it,is,the,responsibility,of,each,link,lifecycle,action,to,implement,this,correctly,and,not,forget,to,link,to,this,final,step,so,that,the,policy,can,continue,return,an,ordered,list,of,steps,that,represent,the,execution,plan,of,the,action;list,step,to,steps,client,client,string,phase,nullable,step,step,key,next,step,key
LifecycleAction -> List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;1522365837;converts the {@link LifecycleAction}'s execution plan into a series of_{@link Step}s that reference each other to preserve order of operations._@param client      the client that will be used by {@link AsyncActionStep} and {@link AsyncWaitStep} steps_@param phase       the name of the phase this action is being executed within_@param nextStepKey the next step to execute after this action's steps. If null, then there are no further_steps to run. It is the responsibility of each {@link LifecycleAction} to implement this_correctly and not forget to link to this final step so that the policy can continue._@return an ordered list of steps that represent the execution plan of the action;List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;converts,the,link,lifecycle,action,s,execution,plan,into,a,series,of,link,step,s,that,reference,each,other,to,preserve,order,of,operations,param,client,the,client,that,will,be,used,by,link,async,action,step,and,link,async,wait,step,steps,param,phase,the,name,of,the,phase,this,action,is,being,executed,within,param,next,step,key,the,next,step,to,execute,after,this,action,s,steps,if,null,then,there,are,no,further,steps,to,run,it,is,the,responsibility,of,each,link,lifecycle,action,to,implement,this,correctly,and,not,forget,to,link,to,this,final,step,so,that,the,policy,can,continue,return,an,ordered,list,of,steps,that,represent,the,execution,plan,of,the,action;list,step,to,steps,client,client,string,phase,nullable,step,step,key,next,step,key
LifecycleAction -> List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;1531392038;converts the {@link LifecycleAction}'s execution plan into a series of_{@link Step}s that reference each other to preserve order of operations._@param client      the client that will be used by {@link AsyncActionStep} and {@link AsyncWaitStep} steps_@param phase       the name of the phase this action is being executed within_@param nextStepKey the next step to execute after this action's steps. If null, then there are no further_steps to run. It is the responsibility of each {@link LifecycleAction} to implement this_correctly and not forget to link to this final step so that the policy can continue._@return an ordered list of steps that represent the execution plan of the action;List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;converts,the,link,lifecycle,action,s,execution,plan,into,a,series,of,link,step,s,that,reference,each,other,to,preserve,order,of,operations,param,client,the,client,that,will,be,used,by,link,async,action,step,and,link,async,wait,step,steps,param,phase,the,name,of,the,phase,this,action,is,being,executed,within,param,next,step,key,the,next,step,to,execute,after,this,action,s,steps,if,null,then,there,are,no,further,steps,to,run,it,is,the,responsibility,of,each,link,lifecycle,action,to,implement,this,correctly,and,not,forget,to,link,to,this,final,step,so,that,the,policy,can,continue,return,an,ordered,list,of,steps,that,represent,the,execution,plan,of,the,action;list,step,to,steps,client,client,string,phase,nullable,step,step,key,next,step,key
LifecycleAction -> List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;1532695210;converts the {@link LifecycleAction}'s execution plan into a series of_{@link Step}s that reference each other to preserve order of operations._@param client      the client that will be used by {@link AsyncActionStep} and {@link AsyncWaitStep} steps_@param phase       the name of the phase this action is being executed within_@param nextStepKey the next step to execute after this action's steps. If null, then there are no further_steps to run. It is the responsibility of each {@link LifecycleAction} to implement this_correctly and not forget to link to this final step so that the policy can continue._@return an ordered list of steps that represent the execution plan of the action;List<Step> toSteps(Client client, String phase, @Nullable Step.StepKey nextStepKey)_;converts,the,link,lifecycle,action,s,execution,plan,into,a,series,of,link,step,s,that,reference,each,other,to,preserve,order,of,operations,param,client,the,client,that,will,be,used,by,link,async,action,step,and,link,async,wait,step,steps,param,phase,the,name,of,the,phase,this,action,is,being,executed,within,param,next,step,key,the,next,step,to,execute,after,this,action,s,steps,if,null,then,there,are,no,further,steps,to,run,it,is,the,responsibility,of,each,link,lifecycle,action,to,implement,this,correctly,and,not,forget,to,link,to,this,final,step,so,that,the,policy,can,continue,return,an,ordered,list,of,steps,that,represent,the,execution,plan,of,the,action;list,step,to,steps,client,client,string,phase,nullable,step,step,key,next,step,key
LifecycleAction -> boolean isSafeAction()_;1531392038;@return true if this action is considered safe. An action is not safe if_it will produce unwanted side effects or will get stuck when the_action configuration is changed while an index is in this action;boolean isSafeAction()_;return,true,if,this,action,is,considered,safe,an,action,is,not,safe,if,it,will,produce,unwanted,side,effects,or,will,get,stuck,when,the,action,configuration,is,changed,while,an,index,is,in,this,action;boolean,is,safe,action
LifecycleAction -> boolean isSafeAction()_;1532695210;@return true if this action is considered safe. An action is not safe if_it will produce unwanted side effects or will get stuck when the_action configuration is changed while an index is in this action;boolean isSafeAction()_;return,true,if,this,action,is,considered,safe,an,action,is,not,safe,if,it,will,produce,unwanted,side,effects,or,will,get,stuck,when,the,action,configuration,is,changed,while,an,index,is,in,this,action;boolean,is,safe,action
