commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public NodesDeprecationCheckResponse newResponse() {     return new NodesDeprecationCheckResponse(). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     request = new NodesDeprecationCheckRequest().     request.readFrom(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     request.writeTo(out). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     deprecationIssues = in.readList(DeprecationIssue::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(this.deprecationIssues). }
false;public,static;1;5;;public static NodeResponse readNodeResponse(StreamInput in) throws IOException {     NodeResponse nodeResponse = new NodeResponse().     nodeResponse.readFrom(in).     return nodeResponse. }
false;public;0;3;;public List<DeprecationIssue> getDeprecationIssues() {     return deprecationIssues. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     NodeResponse that = (NodeResponse) o.     return Objects.equals(getDeprecationIssues(), that.getDeprecationIssues()) && Objects.equals(getNode(), that.getNode()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(getNode(), getDeprecationIssues()). }
