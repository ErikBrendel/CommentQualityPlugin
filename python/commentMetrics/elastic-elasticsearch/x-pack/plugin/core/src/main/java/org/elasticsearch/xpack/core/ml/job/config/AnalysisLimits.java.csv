commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;18;;private static ConstructingObjectParser<AnalysisLimits, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<AnalysisLimits, Void> parser = new ConstructingObjectParser<>("analysis_limits", ignoreUnknownFields, a -> ignoreUnknownFields ? new AnalysisLimits(a[0] == null ? PRE_6_1_DEFAULT_MODEL_MEMORY_LIMIT_MB : (Long) a[0], a[1] == null ? DEFAULT_CATEGORIZATION_EXAMPLES_LIMIT : (Long) a[1]) : new AnalysisLimits((Long) a[0], (Long) a[1])).     parser.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return ByteSizeValue.parseBytesSizeValue(p.text(), MODEL_MEMORY_LIMIT.getPreferredName()).getMb().         } else if (p.currentToken() == XContentParser.Token.VALUE_NUMBER) {             return p.longValue().         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, MODEL_MEMORY_LIMIT, ObjectParser.ValueType.VALUE).     parser.declareLong(ConstructingObjectParser.optionalConstructorArg(), CATEGORIZATION_EXAMPLES_LIMIT).     return parser. }
true;public,static;3;29;/**  * Creates a new {@code AnalysisLimits} object after validating it against external limitations  * and filling missing values with their defaults. Validations:  *  * <ul>  *   <li>check model memory limit doesn't exceed the MAX_MODEL_MEM setting</li>  * </ul>  *  * @param source an optional {@code AnalysisLimits} whose explicit values will be copied  * @param maxModelMemoryLimit the max allowed model memory limit  * @param defaultModelMemoryLimit the default model memory limit to be used if an explicit value is missing  * @return a new {@code AnalysisLimits} that is validated and has no missing values  */ ;/**  * Creates a new {@code AnalysisLimits} object after validating it against external limitations  * and filling missing values with their defaults. Validations:  *  * <ul>  *   <li>check model memory limit doesn't exceed the MAX_MODEL_MEM setting</li>  * </ul>  *  * @param source an optional {@code AnalysisLimits} whose explicit values will be copied  * @param maxModelMemoryLimit the max allowed model memory limit  * @param defaultModelMemoryLimit the default model memory limit to be used if an explicit value is missing  * @return a new {@code AnalysisLimits} that is validated and has no missing values  */ public static AnalysisLimits validateAndSetDefaults(@Nullable AnalysisLimits source, @Nullable ByteSizeValue maxModelMemoryLimit, long defaultModelMemoryLimit) {     boolean maxModelMemoryIsSet = maxModelMemoryLimit != null && maxModelMemoryLimit.getMb() > 0.     long modelMemoryLimit = defaultModelMemoryLimit.     if (maxModelMemoryIsSet) {         modelMemoryLimit = Math.min(maxModelMemoryLimit.getMb(), modelMemoryLimit).     }     long categorizationExamplesLimit = DEFAULT_CATEGORIZATION_EXAMPLES_LIMIT.     if (source != null) {         if (source.getModelMemoryLimit() != null) {             modelMemoryLimit = source.getModelMemoryLimit().         }         if (source.getCategorizationExamplesLimit() != null) {             categorizationExamplesLimit = source.getCategorizationExamplesLimit().         }     }     if (maxModelMemoryIsSet && modelMemoryLimit > maxModelMemoryLimit.getMb()) {         throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.JOB_CONFIG_MODEL_MEMORY_LIMIT_GREATER_THAN_MAX, new ByteSizeValue(modelMemoryLimit, ByteSizeUnit.MB), maxModelMemoryLimit)).     }     return new AnalysisLimits(modelMemoryLimit, categorizationExamplesLimit). }
true;public;0;4;/**  * Maximum size of the model in MB before the anomaly detector  * will drop new samples to prevent the model using any more  * memory.  *  * @return The set memory limit or <code>null</code> if not set  */ ;/**  * Maximum size of the model in MB before the anomaly detector  * will drop new samples to prevent the model using any more  * memory.  *  * @return The set memory limit or <code>null</code> if not set  */ @Nullable public Long getModelMemoryLimit() {     return modelMemoryLimit. }
true;public;0;4;/**  * Gets the limit to the number of examples that are stored per category  *  * @return the limit or <code>null</code> if not set  */ ;/**  * Gets the limit to the number of examples that are stored per category  *  * @return the limit or <code>null</code> if not set  */ @Nullable public Long getCategorizationExamplesLimit() {     return categorizationExamplesLimit. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeOptionalLong(modelMemoryLimit).     out.writeOptionalLong(categorizationExamplesLimit). }
false;public;2;12;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (modelMemoryLimit != null) {         builder.field(MODEL_MEMORY_LIMIT.getPreferredName(), modelMemoryLimit + "mb").     }     if (categorizationExamplesLimit != null) {         builder.field(CATEGORIZATION_EXAMPLES_LIMIT.getPreferredName(), categorizationExamplesLimit).     }     builder.endObject().     return builder. }
true;public;1;14;/**  * Overridden equality test  */ ;/**  * Overridden equality test  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof AnalysisLimits == false) {         return false.     }     AnalysisLimits that = (AnalysisLimits) other.     return Objects.equals(this.modelMemoryLimit, that.modelMemoryLimit) && Objects.equals(this.categorizationExamplesLimit, that.categorizationExamplesLimit). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(modelMemoryLimit, categorizationExamplesLimit). }
