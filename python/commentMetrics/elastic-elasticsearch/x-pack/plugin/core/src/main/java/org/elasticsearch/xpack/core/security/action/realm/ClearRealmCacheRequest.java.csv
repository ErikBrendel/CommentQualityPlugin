commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return  {@code true} if this request targets realms, {@code false} otherwise.  */ ;/**  * @return  {@code true} if this request targets realms, {@code false} otherwise.  */ public boolean allRealms() {     return realms == null || realms.length == 0. }
true;public;0;3;/**  * @return  The realms that should be evicted. Empty array indicates all realms.  */ ;/**  * @return  The realms that should be evicted. Empty array indicates all realms.  */ public String[] realms() {     return realms. }
true;public;1;4;/**  * Sets the realms for which caches will be evicted. When not set all the caches of all realms will be  * evicted.  *  * @param realms    The realm names  */ ;/**  * Sets the realms for which caches will be evicted. When not set all the caches of all realms will be  * evicted.  *  * @param realms    The realm names  */ public ClearRealmCacheRequest realms(String... realms) {     this.realms = realms.     return this. }
true;public;0;3;/**  * @return  {@code true} if this request targets users, {@code false} otherwise.  */ ;/**  * @return  {@code true} if this request targets users, {@code false} otherwise.  */ public boolean allUsernames() {     return usernames == null || usernames.length == 0. }
true;public;0;3;/**  * @return  The usernames of the users that should be evicted. Empty array indicates all users.  */ ;/**  * @return  The usernames of the users that should be evicted. Empty array indicates all users.  */ public String[] usernames() {     return usernames. }
true;public;1;4;/**  * Sets the usernames of the users that should be evicted from the caches. When not set, all users  * will be evicted.  *  * @param usernames The usernames  */ ;/**  * Sets the usernames of the users that should be evicted from the caches. When not set, all users  * will be evicted.  *  * @param usernames The usernames  */ public ClearRealmCacheRequest usernames(String... usernames) {     this.usernames = usernames.     return this. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     realms = in.readStringArray().     usernames = in.readStringArray(). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArrayNullable(realms).     out.writeStringArrayNullable(usernames). }
false;public;0;1;;public String[] getRealms() {     return realms. }
false;public;0;1;;public String[] getUsernames() {     return usernames. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     realms = in.readStringArray().     usernames = in.readStringArray(). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeStringArrayNullable(realms).     out.writeStringArrayNullable(usernames). }
