commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Utility method to read an array of {@link ConditionalClusterPrivilege} objects from a {@link StreamInput}  */ ;/**  * Utility method to read an array of {@link ConditionalClusterPrivilege} objects from a {@link StreamInput}  */ public static ConditionalClusterPrivilege[] readArray(StreamInput in) throws IOException {     return in.readArray(READER, ConditionalClusterPrivilege[]::new). }
true;public,static;2;3;/**  * Utility method to write an array of {@link ConditionalClusterPrivilege} objects to a {@link StreamOutput}  */ ;/**  * Utility method to write an array of {@link ConditionalClusterPrivilege} objects to a {@link StreamOutput}  */ public static void writeArray(StreamOutput out, ConditionalClusterPrivilege[] privileges) throws IOException {     out.writeArray(WRITER, privileges). }
true;public,static;3;14;/**  * Writes a single object value to the {@code builder} that contains each of the provided privileges.  * The privileges are grouped according to their {@link ConditionalClusterPrivilege#getCategory() categories}  */ ;/**  * Writes a single object value to the {@code builder} that contains each of the provided privileges.  * The privileges are grouped according to their {@link ConditionalClusterPrivilege#getCategory() categories}  */ public static XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params, Collection<ConditionalClusterPrivilege> privileges) throws IOException {     builder.startObject().     for (Category category : Category.values()) {         builder.startObject(category.field.getPreferredName()).         for (ConditionalClusterPrivilege privilege : privileges) {             if (category == privilege.getCategory()) {                 privilege.toXContent(builder, params).             }         }         builder.endObject().     }     return builder.endObject(). }
true;public,static;1;18;/**  * Read a list of privileges from the parser. The parser should be positioned at the  * {@link XContentParser.Token#START_OBJECT} token for the privileges value  */ ;/**  * Read a list of privileges from the parser. The parser should be positioned at the  * {@link XContentParser.Token#START_OBJECT} token for the privileges value  */ public static List<ConditionalClusterPrivilege> parse(XContentParser parser) throws IOException {     List<ConditionalClusterPrivilege> privileges = new ArrayList<>().     expectedToken(parser.currentToken(), parser, XContentParser.Token.START_OBJECT).     while (parser.nextToken() != XContentParser.Token.END_OBJECT) {         expectedToken(parser.currentToken(), parser, XContentParser.Token.FIELD_NAME).         expectFieldName(parser, Category.APPLICATION.field).         expectedToken(parser.nextToken(), parser, XContentParser.Token.START_OBJECT).         expectedToken(parser.nextToken(), parser, XContentParser.Token.FIELD_NAME).         expectFieldName(parser, ManageApplicationPrivileges.Fields.MANAGE).         privileges.add(ManageApplicationPrivileges.parse(parser)).         expectedToken(parser.nextToken(), parser, XContentParser.Token.END_OBJECT).     }     return privileges. }
false;private,static;3;6;;private static void expectedToken(XContentParser.Token read, XContentParser parser, XContentParser.Token expected) {     if (read != expected) {         throw new XContentParseException(parser.getTokenLocation(), "failed to parse privilege. expected [" + expected + "] but found [" + read + "] instead").     } }
false;private,static;2;8;;private static void expectFieldName(XContentParser parser, ParseField... fields) throws IOException {     final String fieldName = parser.currentName().     if (Arrays.stream(fields).anyMatch(pf -> pf.match(fieldName, parser.getDeprecationHandler())) == false) {         throw new XContentParseException(parser.getTokenLocation(), "failed to parse privilege. expected " + (fields.length == 1 ? "field name" : "one of") + " [" + Strings.arrayToCommaDelimitedString(fields) + "] but found [" + fieldName + "] instead").     } }
false;public;0;4;;@Override public Category getCategory() {     return Category.APPLICATION. }
false;public;0;4;;@Override public ClusterPrivilege getPrivilege() {     return PRIVILEGE. }
false;public;0;4;;@Override public Predicate<TransportRequest> getRequestPredicate() {     return this.requestPredicate. }
false;public;0;3;;public Collection<String> getApplicationNames() {     return Collections.unmodifiableCollection(this.applicationNames). }
false;public;0;4;;@Override public String getWriteableName() {     return WRITEABLE_NAME. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeCollection(this.applicationNames, StreamOutput::writeString). }
false;public,static;1;4;;public static ManageApplicationPrivileges createFrom(StreamInput in) throws IOException {     final Set<String> applications = in.readSet(StreamInput::readString).     return new ManageApplicationPrivileges(applications). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.field(Fields.MANAGE.getPreferredName(), Collections.singletonMap(Fields.APPLICATIONS.getPreferredName(), applicationNames)). }
false;public,static;1;11;;public static ManageApplicationPrivileges parse(XContentParser parser) throws IOException {     expectedToken(parser.currentToken(), parser, XContentParser.Token.FIELD_NAME).     expectFieldName(parser, Fields.MANAGE).     expectedToken(parser.nextToken(), parser, XContentParser.Token.START_OBJECT).     expectedToken(parser.nextToken(), parser, XContentParser.Token.FIELD_NAME).     expectFieldName(parser, Fields.APPLICATIONS).     expectedToken(parser.nextToken(), parser, XContentParser.Token.START_ARRAY).     final String[] applications = XContentUtils.readStringArray(parser, false).     expectedToken(parser.nextToken(), parser, XContentParser.Token.END_OBJECT).     return new ManageApplicationPrivileges(new LinkedHashSet<>(Arrays.asList(applications))). }
false;public;0;5;;@Override public String toString() {     return "{" + getCategory() + ":" + Fields.MANAGE.getPreferredName() + ":" + Fields.APPLICATIONS.getPreferredName() + "=" + Strings.collectionToDelimitedString(applicationNames, ",") + "}". }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final ManageApplicationPrivileges that = (ManageApplicationPrivileges) o.     return this.applicationNames.equals(that.applicationNames). }
false;public;0;4;;@Override public int hashCode() {     return applicationNames.hashCode(). }
