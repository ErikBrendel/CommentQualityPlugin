commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;29;;@Override protected void doExecute(Task task, XPackInfoRequest request, ActionListener<XPackInfoResponse> listener) {     XPackInfoResponse.BuildInfo buildInfo = null.     if (request.getCategories().contains(XPackInfoRequest.Category.BUILD)) {         buildInfo = new XPackInfoResponse.BuildInfo(XPackBuild.CURRENT.shortHash(), XPackBuild.CURRENT.date()).     }     LicenseInfo licenseInfo = null.     if (request.getCategories().contains(XPackInfoRequest.Category.LICENSE)) {         License license = licenseService.getLicense().         if (license != null) {             licenseInfo = new LicenseInfo(license.uid(), license.type(), license.operationMode().name().toLowerCase(Locale.ROOT), license.status(), license.expiryDate()).         }     }     XPackInfoResponse.FeatureSetsInfo featureSetsInfo = null.     if (request.getCategories().contains(XPackInfoRequest.Category.FEATURES)) {         Set<FeatureSet> featureSets = this.featureSets.stream().map(fs -> new FeatureSet(fs.name(), request.isVerbose() ? fs.description() : null, fs.available(), fs.enabled(), request.isVerbose() ? fs.nativeCodeInfo() : null)).collect(Collectors.toSet()).         featureSetsInfo = new XPackInfoResponse.FeatureSetsInfo(featureSets).     }     listener.onResponse(new XPackInfoResponse(buildInfo, licenseInfo, featureSetsInfo)). }
