commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;10;;private static ObjectParser<Builder, Void> createParser(boolean ignoreUnknownFields) {     ObjectParser<Builder, Void> parser = new ObjectParser<>(ID.getPreferredName(), ignoreUnknownFields, Builder::new).     parser.declareString(Builder::setId, ID).     parser.declareStringArray(Builder::setJobIds, JOB_IDS).     parser.declareString((builder, s) -> {     }, TYPE).     parser.declareStringOrNull(Builder::setDescription, DESCRIPTION).     return parser. }
false;public,static;1;3;;public static String documentId(String calendarId) {     return DOCUMENT_ID_PREFIX + calendarId. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String documentId() {     return documentId(id). }
false;public;0;3;;public List<String> getJobIds() {     return Collections.unmodifiableList(jobIds). }
false;public;0;4;;@Nullable public String getDescription() {     return description. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(id).     out.writeStringArray(jobIds.toArray(new String[jobIds.size()])).     out.writeOptionalString(description). }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ID.getPreferredName(), id).     builder.field(JOB_IDS.getPreferredName(), jobIds).     if (description != null) {         builder.field(DESCRIPTION.getPreferredName(), description).     }     if (params.paramAsBoolean(ToXContentParams.INCLUDE_TYPE, false)) {         builder.field(TYPE.getPreferredName(), CALENDAR_TYPE).     }     builder.endObject().     return builder. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (!(obj instanceof Calendar)) {         return false.     }     Calendar other = (Calendar) obj.     return id.equals(other.id) && jobIds.equals(other.jobIds) && Objects.equals(description, other.description). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, jobIds, description). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;0;3;;public String getId() {     return calendarId. }
false;public;1;3;;public void setId(String calendarId) {     this.calendarId = calendarId. }
false;public;1;4;;public Builder setJobIds(List<String> jobIds) {     this.jobIds = jobIds.     return this. }
false;public;1;4;;public Builder setDescription(String description) {     this.description = description.     return this. }
false;public;0;3;;public Calendar build() {     return new Calendar(calendarId, jobIds, description). }
