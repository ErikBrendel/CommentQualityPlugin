commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static ResourceNotFoundException emptyQueryPage(ParseField resultsField) {     return new ResourceNotFoundException("Could not find requested " + resultsField.getPreferredName()). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(resultsField.getPreferredName()).     out.writeList(results).     out.writeLong(count). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;2;5;;public XContentBuilder doXContentBody(XContentBuilder builder, Params params) throws IOException {     builder.field(COUNT.getPreferredName(), count).     builder.field(resultsField.getPreferredName(), results).     return builder. }
false;public;0;3;;public List<T> results() {     return results. }
false;public;0;3;;public long count() {     return count. }
false;public;0;3;;public ParseField getResultsField() {     return resultsField. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(results, count). }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     @SuppressWarnings("unchecked")     QueryPage<T> other = (QueryPage<T>) obj.     return Objects.equals(results, other.results) && Objects.equals(count, other.count). }
