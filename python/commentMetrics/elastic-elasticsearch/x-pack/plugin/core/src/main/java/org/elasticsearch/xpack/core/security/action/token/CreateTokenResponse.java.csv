commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getTokenString() {     return tokenString. }
false;public;0;3;;public String getScope() {     return scope. }
false;public;0;3;;public TimeValue getExpiresIn() {     return expiresIn. }
false;public;0;3;;public String getRefreshToken() {     return refreshToken. }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(tokenString).     out.writeTimeValue(expiresIn).     out.writeOptionalString(scope).     if (out.getVersion().onOrAfter(Version.V_6_5_0)) {         out.writeOptionalString(refreshToken).     } else if (out.getVersion().onOrAfter(Version.V_6_2_0)) {         if (refreshToken == null) {             out.writeString("").         } else {             out.writeString(refreshToken).         }     } }
false;public;1;12;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     tokenString = in.readString().     expiresIn = in.readTimeValue().     scope = in.readOptionalString().     if (in.getVersion().onOrAfter(Version.V_6_5_0)) {         refreshToken = in.readOptionalString().     } else if (in.getVersion().onOrAfter(Version.V_6_2_0)) {         refreshToken = in.readString().     } }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().field("access_token", tokenString).field("type", "Bearer").field("expires_in", expiresIn.seconds()).     if (refreshToken != null) {         builder.field("refresh_token", refreshToken).     }     // only show the scope if it is not null     if (scope != null) {         builder.field("scope", scope).     }     return builder.endObject(). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     CreateTokenResponse that = (CreateTokenResponse) o.     return Objects.equals(tokenString, that.tokenString) && Objects.equals(expiresIn, that.expiresIn) && Objects.equals(scope, that.scope) && Objects.equals(refreshToken, that.refreshToken). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(tokenString, expiresIn, scope, refreshToken). }
