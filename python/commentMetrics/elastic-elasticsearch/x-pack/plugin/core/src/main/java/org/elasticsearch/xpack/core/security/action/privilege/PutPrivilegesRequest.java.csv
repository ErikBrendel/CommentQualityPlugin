commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (privileges.isEmpty()) {         validationException = addValidationError("At least one application privilege must be provided", validationException).     } else {         for (ApplicationPrivilegeDescriptor privilege : privileges) {             try {                 ApplicationPrivilege.validateApplicationName(privilege.getApplication()).             } catch (IllegalArgumentException e) {                 validationException = addValidationError(e.getMessage(), validationException).             }             try {                 ApplicationPrivilege.validatePrivilegeName(privilege.getName()).             } catch (IllegalArgumentException e) {                 validationException = addValidationError(e.getMessage(), validationException).             }             if (privilege.getActions().isEmpty()) {                 validationException = addValidationError("Application privileges must have at least one action", validationException).             }             for (String action : privilege.getActions()) {                 if (action.indexOf('/') == -1 && action.indexOf('*') == -1 && action.indexOf(':') == -1) {                     validationException = addValidationError("action [" + action + "] must contain one of [ '/' , '*' , ':' ]", validationException).                 }                 try {                     ApplicationPrivilege.validatePrivilegeOrActionName(action).                 } catch (IllegalArgumentException e) {                     validationException = addValidationError(e.getMessage(), validationException).                 }             }             if (MetadataUtils.containsReservedMetadata(privilege.getMetadata())) {                 validationException = addValidationError("metadata keys may not start with [" + MetadataUtils.RESERVED_PREFIX + "] (in privilege " + privilege.getApplication() + ' ' + privilege.getName() + ")", validationException).             }         }     }     return validationException. }
true;public;0;4;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ @Override public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;5;;@Override public PutPrivilegesRequest setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
false;public;0;3;;public List<ApplicationPrivilegeDescriptor> getPrivileges() {     return privileges. }
false;public;1;3;;public void setPrivileges(Collection<ApplicationPrivilegeDescriptor> privileges) {     this.privileges = Collections.unmodifiableList(new ArrayList<>(privileges)). }
false;public;0;6;;@Override public Collection<String> getApplicationNames() {     return Collections.unmodifiableSet(privileges.stream().map(ApplicationPrivilegeDescriptor::getApplication).collect(Collectors.toSet())). }
false;public;0;5;;@Override public String toString() {     return getClass().getSimpleName() + "{[" + privileges.stream().map(Strings::toString).collect(Collectors.joining(",")) + "]." + refreshPolicy + "}". }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     privileges = Collections.unmodifiableList(in.readList(ApplicationPrivilegeDescriptor::new)).     refreshPolicy = RefreshPolicy.readFrom(in). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(privileges).     refreshPolicy.writeTo(out). }
