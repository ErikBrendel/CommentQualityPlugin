commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeBoolean(allowNoJobs).     } }
false;public;1;3;;public void setAllowNoJobs(boolean allowNoJobs) {     this.allowNoJobs = allowNoJobs. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public boolean allowNoJobs() {     return allowNoJobs. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, allowNoJobs). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(allowNoJobs, other.allowNoJobs). }
false;public;0;3;;public QueryPage<Job> getResponse() {     return jobs. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobs = new QueryPage<>(in, Job::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     jobs.writeTo(out). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     jobs.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobs). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(jobs, other.jobs). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
