commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public GetModelSnapshotsAction.Response newResponse() {     return new Response(). }
false;public,static;3;10;;public static Request parseRequest(String jobId, String snapshotId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.jobId = jobId.     }     if (snapshotId != null) {         request.snapshotId = snapshotId.     }     return request. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;4;;@Nullable public String getSnapshotId() {     return snapshotId. }
false;public;0;4;;@Nullable public String getSort() {     return sort. }
false;public;1;3;;public void setSort(String sort) {     this.sort = sort. }
false;public;0;3;;public boolean getDescOrder() {     return desc. }
false;public;1;3;;public void setDescOrder(boolean desc) {     this.desc = desc. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
false;public;1;3;;public void setPageParams(PageParams pageParams) {     this.pageParams = ExceptionsHelper.requireNonNull(pageParams, PageParams.PAGE.getPreferredName()). }
false;public;0;4;;@Nullable public String getStart() {     return start. }
false;public;1;3;;public void setStart(String start) {     this.start = ExceptionsHelper.requireNonNull(start, START.getPreferredName()). }
false;public;0;4;;@Nullable public String getEnd() {     return end. }
false;public;1;3;;public void setEnd(String end) {     this.end = ExceptionsHelper.requireNonNull(end, END.getPreferredName()). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     snapshotId = in.readOptionalString().     sort = in.readOptionalString().     start = in.readOptionalString().     end = in.readOptionalString().     desc = in.readBoolean().     pageParams = new PageParams(in). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeOptionalString(snapshotId).     out.writeOptionalString(sort).     out.writeOptionalString(start).     out.writeOptionalString(end).     out.writeBoolean(desc).     pageParams.writeTo(out). }
false;public;2;21;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (snapshotId != null) {         builder.field(SNAPSHOT_ID.getPreferredName(), snapshotId).     }     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (sort != null) {         builder.field(SORT.getPreferredName(), sort).     }     builder.field(DESC.getPreferredName(), desc).     builder.field(PageParams.PAGE.getPreferredName(), pageParams).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, snapshotId, start, end, sort, desc). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(snapshotId, other.snapshotId) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(sort, other.sort) && Objects.equals(desc, other.desc). }
false;public;0;3;;public QueryPage<ModelSnapshot> getPage() {     return page. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     page = new QueryPage<>(in, ModelSnapshot::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     page.writeTo(out). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     page.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(page). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(page, other.page). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
