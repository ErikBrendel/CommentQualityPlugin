commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public,static;1;3;;public static Request fromXContent(XContentParser parser) {     return parseRequest(null, parser). }
false;public,static;2;7;;public static Request parseRequest(String datafeedId, XContentParser parser) {     DatafeedParams params = DatafeedParams.PARSER.apply(parser, null).     if (datafeedId != null) {         params.datafeedId = datafeedId.     }     return new Request(params). }
false;public;0;3;;public DatafeedParams getParams() {     return params. }
false;public;0;10;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException e = null.     if (params.endTime != null && params.endTime <= params.startTime) {         e = ValidateActions.addValidationError(START_TIME.getPreferredName() + " [" + params.startTime + "] must be earlier than " + END_TIME.getPreferredName() + " [" + params.endTime + "]", e).     }     return e. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     params = new DatafeedParams(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     params.writeTo(out). }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     this.params.toXContent(builder, params).     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(params). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(params, other.params). }
false;static;3;10;;static long parseDateOrThrow(String date, ParseField paramName, LongSupplier now) {     DateMathParser dateMathParser = DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.toDateMathParser().     try {         return dateMathParser.parse(date, now).toEpochMilli().     } catch (Exception e) {         String msg = Messages.getMessage(Messages.REST_INVALID_DATETIME_PARAMS, paramName.getPreferredName(), date).         throw new ElasticsearchParseException(msg, e).     } }
false;public,static;1;3;;public static DatafeedParams fromXContent(XContentParser parser) {     return parseRequest(null, parser). }
false;public,static;2;7;;public static DatafeedParams parseRequest(String datafeedId, XContentParser parser) {     DatafeedParams params = PARSER.apply(parser, null).     if (datafeedId != null) {         params.datafeedId = datafeedId.     }     return params. }
false;public;0;3;;public String getDatafeedId() {     return datafeedId. }
false;public;0;3;;public long getStartTime() {     return startTime. }
false;public;0;3;;public Long getEndTime() {     return endTime. }
false;public;1;3;;public void setEndTime(String endTime) {     setEndTime(parseDateOrThrow(endTime, END_TIME, System::currentTimeMillis)). }
false;public;1;3;;public void setEndTime(Long endTime) {     this.endTime = endTime. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(TimeValue timeout) {     this.timeout = timeout. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public List<String> getDatafeedIndices() {     return datafeedIndices. }
false;public;1;3;;public void setDatafeedIndices(List<String> datafeedIndices) {     this.datafeedIndices = datafeedIndices. }
false;public;0;4;;@Override public String getWriteableName() {     return MlTasks.DATAFEED_TASK_NAME. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(datafeedId).     out.writeVLong(startTime).     out.writeOptionalLong(endTime).     out.writeVLong(timeout.millis()).     if (out.getVersion().onOrAfter(Version.V_6_6_0)) {         out.writeOptionalString(jobId).         out.writeStringCollection(datafeedIndices).     } }
false;public;2;18;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), datafeedId).     builder.field(START_TIME.getPreferredName(), String.valueOf(startTime)).     if (endTime != null) {         builder.field(END_TIME.getPreferredName(), String.valueOf(endTime)).     }     builder.field(TIMEOUT.getPreferredName(), timeout.getStringRep()).     if (jobId != null) {         builder.field(Job.ID.getPreferredName(), jobId).     }     if (datafeedIndices.isEmpty() == false) {         builder.field(INDICES.getPreferredName(), datafeedIndices).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedId, startTime, endTime, timeout, jobId, datafeedIndices). }
false;public;1;16;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     DatafeedParams other = (DatafeedParams) obj.     return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(startTime, other.startTime) && Objects.equals(endTime, other.endTime) && Objects.equals(timeout, other.timeout) && Objects.equals(jobId, other.jobId) && Objects.equals(datafeedIndices, other.datafeedIndices). }
