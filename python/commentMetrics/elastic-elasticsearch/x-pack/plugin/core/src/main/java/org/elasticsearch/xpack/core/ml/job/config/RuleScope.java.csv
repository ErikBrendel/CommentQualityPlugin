commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;21;;public static ContextParser<Void, RuleScope> parser(boolean ignoreUnknownFields) {     return (p, c) -> {         Map<String, Object> unparsedScope = p.map().         if (unparsedScope.isEmpty()) {             return new RuleScope().         }         ConstructingObjectParser<FilterRef, Void> filterRefParser = ignoreUnknownFields ? FilterRef.LENIENT_PARSER : FilterRef.STRICT_PARSER.         Map<String, FilterRef> scope = new HashMap<>().         for (Map.Entry<String, Object> entry : unparsedScope.entrySet()) {             try (XContentBuilder builder = XContentFactory.jsonBuilder()) {                 builder.map((Map<String, ?>) entry.getValue()).                 try (XContentParser scopeParser = XContentFactory.xContent(builder.contentType()).createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, Strings.toString(builder))) {                     scope.put(entry.getKey(), filterRefParser.parse(scopeParser, null)).                 }             }         }         return new RuleScope(scope).     }. }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeMap(scope, StreamOutput::writeString, (out1, value) -> value.writeTo(out1)). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return builder.map(scope). }
false;public;0;3;;public boolean isEmpty() {     return scope.isEmpty(). }
false;public;1;11;;public void validate(Set<String> validKeys) {     Optional<String> invalidKey = scope.keySet().stream().filter(k -> !validKeys.contains(k)).findFirst().     if (invalidKey.isPresent()) {         if (validKeys.isEmpty()) {             throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.JOB_CONFIG_DETECTION_RULE_SCOPE_NO_AVAILABLE_FIELDS, invalidKey.get())).         }         throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.JOB_CONFIG_DETECTION_RULE_SCOPE_HAS_INVALID_FIELD, invalidKey.get(), validKeys)).     } }
false;public;0;3;;public Set<String> getReferencedFilters() {     return scope.values().stream().map(FilterRef::getFilterId).collect(Collectors.toSet()). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj instanceof RuleScope == false) {         return false.     }     RuleScope other = (RuleScope) obj.     return Objects.equals(scope, other.scope). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(scope). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;2;4;;public Builder exclude(String field, String filterId) {     scope.put(field, new FilterRef(filterId, FilterRef.FilterType.EXCLUDE)).     return this. }
false;public;2;4;;public Builder include(String field, String filterId) {     scope.put(field, new FilterRef(filterId, FilterRef.FilterType.INCLUDE)).     return this. }
false;public;0;3;;public RuleScope build() {     return new RuleScope(scope). }
