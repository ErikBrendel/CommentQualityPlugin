commented;modifiers;parameterAmount;loc;comment;code
true;;2;3;/**  * Gets a {@link FieldPermissions} instance that corresponds to the granted and denied parameters. The instance may come from the cache  * or if it gets created, the instance will be cached  */ ;/**  * Gets a {@link FieldPermissions} instance that corresponds to the granted and denied parameters. The instance may come from the cache  * or if it gets created, the instance will be cached  */ FieldPermissions getFieldPermissions(String[] granted, String[] denied) {     return getFieldPermissions(new FieldPermissionsDefinition(granted, denied)). }
true;public;1;8;/**  * Gets a {@link FieldPermissions} instance that corresponds to the granted and denied parameters. The instance may come from the cache  * or if it gets created, the instance will be cached  */ ;/**  * Gets a {@link FieldPermissions} instance that corresponds to the granted and denied parameters. The instance may come from the cache  * or if it gets created, the instance will be cached  */ public FieldPermissions getFieldPermissions(FieldPermissionsDefinition fieldPermissionsDefinition) {     try {         return cache.computeIfAbsent(fieldPermissionsDefinition, (key) -> new FieldPermissions(key, FieldPermissions.initializePermittedFieldsAutomaton(key))).     } catch (ExecutionException e) {         throw new ElasticsearchException("unable to compute field permissions", e).     } }
true;;1;21;/**  * Returns a field permissions object that corresponds to the merging of the given field permissions and caches the instance if one was  * not found in the cache.  */ ;/**  * Returns a field permissions object that corresponds to the merging of the given field permissions and caches the instance if one was  * not found in the cache.  */ FieldPermissions getFieldPermissions(Collection<FieldPermissions> fieldPermissionsCollection) {     Optional<FieldPermissions> allowAllFieldPermissions = fieldPermissionsCollection.stream().filter(((Predicate<FieldPermissions>) (FieldPermissions::hasFieldLevelSecurity)).negate()).findFirst().     return allowAllFieldPermissions.orElseGet(() -> {         final Set<FieldGrantExcludeGroup> fieldGrantExcludeGroups = fieldPermissionsCollection.stream().flatMap(fieldPermission -> fieldPermission.getFieldPermissionsDefinition().getFieldGrantExcludeGroups().stream()).collect(Collectors.toSet()).         final FieldPermissionsDefinition combined = new FieldPermissionsDefinition(fieldGrantExcludeGroups).         try {             return cache.computeIfAbsent(combined, (key) -> {                 List<Automaton> automatonList = fieldPermissionsCollection.stream().map(FieldPermissions::getIncludeAutomaton).collect(Collectors.toList()).                 return new FieldPermissions(key, Automatons.unionAndMinimize(automatonList)).             }).         } catch (ExecutionException e) {             throw new ElasticsearchException("unable to compute field permissions", e).         }     }). }
