commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;14;;private static ConstructingObjectParser<CategoryDefinition, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<CategoryDefinition, Void> parser = new ConstructingObjectParser<>(TYPE.getPreferredName(), ignoreUnknownFields, a -> new CategoryDefinition((String) a[0])).     parser.declareString(ConstructingObjectParser.constructorArg(), Job.ID).     parser.declareLong(CategoryDefinition::setCategoryId, CATEGORY_ID).     parser.declareString(CategoryDefinition::setTerms, TERMS).     parser.declareString(CategoryDefinition::setRegex, REGEX).     parser.declareLong(CategoryDefinition::setMaxMatchingLength, MAX_MATCHING_LENGTH).     parser.declareStringArray(CategoryDefinition::setExamples, EXAMPLES).     parser.declareString(CategoryDefinition::setGrokPattern, GROK_PATTERN).     return parser. }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeLong(categoryId).     out.writeString(terms).     out.writeString(regex).     out.writeLong(maxMatchingLength).     out.writeStringCollection(examples).     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeOptionalString(grokPattern).     } }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getId() {     return jobId + "_" + TYPE + "_" + categoryId. }
false;public;0;3;;public long getCategoryId() {     return categoryId. }
false;public;1;3;;public void setCategoryId(long categoryId) {     this.categoryId = categoryId. }
false;public;0;3;;public String getTerms() {     return terms. }
false;public;1;3;;public void setTerms(String terms) {     this.terms = terms. }
false;public;0;3;;public String getRegex() {     return regex. }
false;public;1;3;;public void setRegex(String regex) {     this.regex = regex. }
false;public;0;3;;public long getMaxMatchingLength() {     return maxMatchingLength. }
false;public;1;3;;public void setMaxMatchingLength(long maxMatchingLength) {     this.maxMatchingLength = maxMatchingLength. }
false;public;0;3;;public List<String> getExamples() {     return new ArrayList<>(examples). }
false;public;1;4;;public void setExamples(Collection<String> examples) {     this.examples.clear().     this.examples.addAll(examples). }
false;public;1;3;;public void addExample(String example) {     examples.add(example). }
false;public;0;3;;public String getGrokPattern() {     return grokPattern. }
false;public;1;3;;public void setGrokPattern(String grokPattern) {     this.grokPattern = grokPattern. }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(CATEGORY_ID.getPreferredName(), categoryId).     builder.field(TERMS.getPreferredName(), terms).     builder.field(REGEX.getPreferredName(), regex).     builder.field(MAX_MATCHING_LENGTH.getPreferredName(), maxMatchingLength).     builder.field(EXAMPLES.getPreferredName(), examples).     if (grokPattern != null) {         builder.field(GROK_PATTERN.getPreferredName(), grokPattern).     }     builder.endObject().     return builder. }
false;public;1;17;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof CategoryDefinition == false) {         return false.     }     CategoryDefinition that = (CategoryDefinition) other.     return Objects.equals(this.jobId, that.jobId) && Objects.equals(this.categoryId, that.categoryId) && Objects.equals(this.terms, that.terms) && Objects.equals(this.regex, that.regex) && Objects.equals(this.maxMatchingLength, that.maxMatchingLength) && Objects.equals(this.examples, that.examples) && Objects.equals(this.grokPattern, that.grokPattern). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, categoryId, terms, regex, maxMatchingLength, examples, grokPattern). }
