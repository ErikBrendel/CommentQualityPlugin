# id;timestamp;commentText;codeText;commentWords;codeWords
WatchExecutionContext -> public abstract boolean recordExecution()_;1524684173;@return true if this execution should be recorded in the .watcher-history index;public abstract boolean recordExecution()_;return,true,if,this,execution,should,be,recorded,in,the,watcher,history,index;public,abstract,boolean,record,execution
WatchExecutionContext -> public abstract boolean recordExecution()_;1531729807;@return true if this execution should be recorded in the .watcher-history index;public abstract boolean recordExecution()_;return,true,if,this,execution,should,be,recorded,in,the,watcher,history,index;public,abstract,boolean,record,execution
WatchExecutionContext -> public abstract boolean recordExecution()_;1531910483;@return true if this execution should be recorded in the .watcher-history index;public abstract boolean recordExecution()_;return,true,if,this,execution,should,be,recorded,in,the,watcher,history,index;public,abstract,boolean,record,execution
WatchExecutionContext -> public abstract boolean recordExecution()_;1549289311;@return true if this execution should be recorded in the .watcher-history index;public abstract boolean recordExecution()_;return,true,if,this,execution,should,be,recorded,in,the,watcher,history,index;public,abstract,boolean,record,execution
WatchExecutionContext -> public void setNodeId(String nodeId);1524684173;@param nodeId The node id this watch execution context runs on;public void setNodeId(String nodeId) {_        this.nodeId = nodeId__    };param,node,id,the,node,id,this,watch,execution,context,runs,on;public,void,set,node,id,string,node,id,this,node,id,node,id
WatchExecutionContext -> public void setNodeId(String nodeId);1531729807;@param nodeId The node id this watch execution context runs on;public void setNodeId(String nodeId) {_        this.nodeId = nodeId__    };param,node,id,the,node,id,this,watch,execution,context,runs,on;public,void,set,node,id,string,node,id,this,node,id,node,id
WatchExecutionContext -> public void setNodeId(String nodeId);1531910483;@param nodeId The node id this watch execution context runs on;public void setNodeId(String nodeId) {_        this.nodeId = nodeId__    };param,node,id,the,node,id,this,watch,execution,context,runs,on;public,void,set,node,id,string,node,id,this,node,id,node,id
WatchExecutionContext -> public void setNodeId(String nodeId);1549289311;@param nodeId The node id this watch execution context runs on;public void setNodeId(String nodeId) {_        this.nodeId = nodeId__    };param,node,id,the,node,id,this,watch,execution,context,runs,on;public,void,set,node,id,string,node,id,this,node,id,node,id
WatchExecutionContext -> public TimeValue defaultThrottlePeriod();1524684173;@return The default throttle period in the system.;public TimeValue defaultThrottlePeriod() {_        return defaultThrottlePeriod__    };return,the,default,throttle,period,in,the,system;public,time,value,default,throttle,period,return,default,throttle,period
WatchExecutionContext -> public TimeValue defaultThrottlePeriod();1531729807;@return The default throttle period in the system.;public TimeValue defaultThrottlePeriod() {_        return defaultThrottlePeriod__    };return,the,default,throttle,period,in,the,system;public,time,value,default,throttle,period,return,default,throttle,period
WatchExecutionContext -> public TimeValue defaultThrottlePeriod();1531910483;@return The default throttle period in the system.;public TimeValue defaultThrottlePeriod() {_        return defaultThrottlePeriod__    };return,the,default,throttle,period,in,the,system;public,time,value,default,throttle,period,return,default,throttle,period
WatchExecutionContext -> public TimeValue defaultThrottlePeriod();1549289311;@return The default throttle period in the system.;public TimeValue defaultThrottlePeriod() {_        return defaultThrottlePeriod__    };return,the,default,throttle,period,in,the,system;public,time,value,default,throttle,period,return,default,throttle,period
WatchExecutionContext -> public String getUser();1531910483;@return The user that executes the watch, which will be stored in the watch history;public String getUser() { return user_ };return,the,user,that,executes,the,watch,which,will,be,stored,in,the,watch,history;public,string,get,user,return,user
WatchExecutionContext -> public String getUser();1549289311;@return The user that executes the watch, which will be stored in the watch history;public String getUser() { return user_ };return,the,user,that,executes,the,watch,which,will,be,stored,in,the,watch,history;public,string,get,user,return,user
WatchExecutionContext -> public abstract boolean shouldBeExecuted()_;1524684173;@return true if execution is allowed (this depends on the type of the watch context);public abstract boolean shouldBeExecuted()_;return,true,if,execution,is,allowed,this,depends,on,the,type,of,the,watch,context;public,abstract,boolean,should,be,executed
WatchExecutionContext -> public abstract boolean shouldBeExecuted()_;1531729807;@return true if execution is allowed (this depends on the type of the watch context);public abstract boolean shouldBeExecuted()_;return,true,if,execution,is,allowed,this,depends,on,the,type,of,the,watch,context;public,abstract,boolean,should,be,executed
WatchExecutionContext -> public abstract boolean shouldBeExecuted()_;1531910483;@return true if execution is allowed (this depends on the type of the watch context);public abstract boolean shouldBeExecuted()_;return,true,if,execution,is,allowed,this,depends,on,the,type,of,the,watch,context;public,abstract,boolean,should,be,executed
WatchExecutionContext -> public abstract boolean shouldBeExecuted()_;1549289311;@return true if execution is allowed (this depends on the type of the watch context);public abstract boolean shouldBeExecuted()_;return,true,if,execution,is,allowed,this,depends,on,the,type,of,the,watch,context;public,abstract,boolean,should,be,executed
WatchExecutionContext -> public abstract boolean knownWatch()_;1524684173;@return true if the watch associated with this context is known to watcher (i.e. it's stored_in watcher. This plays a key role in how we handle execution. For example, if_the watch is known, but then the watch is not there (perhaps deleted in between)_we abort execution. It also plays a part (along with {@link #recordExecution()}_in the decision of whether the watch record should be stored and if the watch_status should be updated.;public abstract boolean knownWatch()_;return,true,if,the,watch,associated,with,this,context,is,known,to,watcher,i,e,it,s,stored,in,watcher,this,plays,a,key,role,in,how,we,handle,execution,for,example,if,the,watch,is,known,but,then,the,watch,is,not,there,perhaps,deleted,in,between,we,abort,execution,it,also,plays,a,part,along,with,link,record,execution,in,the,decision,of,whether,the,watch,record,should,be,stored,and,if,the,watch,status,should,be,updated;public,abstract,boolean,known,watch
WatchExecutionContext -> public abstract boolean knownWatch()_;1531729807;@return true if the watch associated with this context is known to watcher (i.e. it's stored_in watcher. This plays a key role in how we handle execution. For example, if_the watch is known, but then the watch is not there (perhaps deleted in between)_we abort execution. It also plays a part (along with {@link #recordExecution()}_in the decision of whether the watch record should be stored and if the watch_status should be updated.;public abstract boolean knownWatch()_;return,true,if,the,watch,associated,with,this,context,is,known,to,watcher,i,e,it,s,stored,in,watcher,this,plays,a,key,role,in,how,we,handle,execution,for,example,if,the,watch,is,known,but,then,the,watch,is,not,there,perhaps,deleted,in,between,we,abort,execution,it,also,plays,a,part,along,with,link,record,execution,in,the,decision,of,whether,the,watch,record,should,be,stored,and,if,the,watch,status,should,be,updated;public,abstract,boolean,known,watch
WatchExecutionContext -> public abstract boolean knownWatch()_;1531910483;@return true if the watch associated with this context is known to watcher (i.e. it's stored_in watcher. This plays a key role in how we handle execution. For example, if_the watch is known, but then the watch is not there (perhaps deleted in between)_we abort execution. It also plays a part (along with {@link #recordExecution()}_in the decision of whether the watch record should be stored and if the watch_status should be updated.;public abstract boolean knownWatch()_;return,true,if,the,watch,associated,with,this,context,is,known,to,watcher,i,e,it,s,stored,in,watcher,this,plays,a,key,role,in,how,we,handle,execution,for,example,if,the,watch,is,known,but,then,the,watch,is,not,there,perhaps,deleted,in,between,we,abort,execution,it,also,plays,a,part,along,with,link,record,execution,in,the,decision,of,whether,the,watch,record,should,be,stored,and,if,the,watch,status,should,be,updated;public,abstract,boolean,known,watch
WatchExecutionContext -> public abstract boolean knownWatch()_;1549289311;@return true if the watch associated with this context is known to watcher (i.e. it's stored_in watcher. This plays a key role in how we handle execution. For example, if_the watch is known, but then the watch is not there (perhaps deleted in between)_we abort execution. It also plays a part (along with {@link #recordExecution()}_in the decision of whether the watch record should be stored and if the watch_status should be updated.;public abstract boolean knownWatch()_;return,true,if,the,watch,associated,with,this,context,is,known,to,watcher,i,e,it,s,stored,in,watcher,this,plays,a,key,role,in,how,we,handle,execution,for,example,if,the,watch,is,known,but,then,the,watch,is,not,there,perhaps,deleted,in,between,we,abort,execution,it,also,plays,a,part,along,with,link,record,execution,in,the,decision,of,whether,the,watch,record,should,be,stored,and,if,the,watch,status,should,be,updated;public,abstract,boolean,known,watch
WatchExecutionContext -> public abstract boolean simulateAction(String actionId)_;1524684173;@return true if this action should be simulated;public abstract boolean simulateAction(String actionId)_;return,true,if,this,action,should,be,simulated;public,abstract,boolean,simulate,action,string,action,id
WatchExecutionContext -> public abstract boolean simulateAction(String actionId)_;1531729807;@return true if this action should be simulated;public abstract boolean simulateAction(String actionId)_;return,true,if,this,action,should,be,simulated;public,abstract,boolean,simulate,action,string,action,id
WatchExecutionContext -> public abstract boolean simulateAction(String actionId)_;1531910483;@return true if this action should be simulated;public abstract boolean simulateAction(String actionId)_;return,true,if,this,action,should,be,simulated;public,abstract,boolean,simulate,action,string,action,id
WatchExecutionContext -> public abstract boolean simulateAction(String actionId)_;1549289311;@return true if this action should be simulated;public abstract boolean simulateAction(String actionId)_;return,true,if,this,action,should,be,simulated;public,abstract,boolean,simulate,action,string,action,id
WatchExecutionContext -> public String getNodeId();1524684173;@return The node this watch execution context runs on, which will be stored in the watch history;public String getNodeId() {_        return nodeId__    };return,the,node,this,watch,execution,context,runs,on,which,will,be,stored,in,the,watch,history;public,string,get,node,id,return,node,id
WatchExecutionContext -> public String getNodeId();1531729807;@return The node this watch execution context runs on, which will be stored in the watch history;public String getNodeId() {_        return nodeId__    };return,the,node,this,watch,execution,context,runs,on,which,will,be,stored,in,the,watch,history;public,string,get,node,id,return,node,id
WatchExecutionContext -> public String getNodeId();1531910483;@return The node this watch execution context runs on, which will be stored in the watch history;public String getNodeId() {_        return nodeId__    };return,the,node,this,watch,execution,context,runs,on,which,will,be,stored,in,the,watch,history;public,string,get,node,id,return,node,id
WatchExecutionContext -> public String getNodeId();1549289311;@return The node this watch execution context runs on, which will be stored in the watch history;public String getNodeId() {_        return nodeId__    };return,the,node,this,watch,execution,context,runs,on,which,will,be,stored,in,the,watch,history;public,string,get,node,id,return,node,id
WatchExecutionContext -> public static String getUsernameFromWatch(Watch watch) throws IOException;1531910483;Given a watch, this extracts and decodes the relevant auth header and returns the principal of the user that is_executing the watch.;public static String getUsernameFromWatch(Watch watch) throws IOException {_        if (watch != null && watch.status() != null && watch.status().getHeaders() != null) {_            String header = watch.status().getHeaders().get(AuthenticationField.AUTHENTICATION_KEY)__            if (header != null) {_                Authentication auth = Authentication.decode(header)__                return auth.getUser().principal()__            }_        }_        return null__    };given,a,watch,this,extracts,and,decodes,the,relevant,auth,header,and,returns,the,principal,of,the,user,that,is,executing,the,watch;public,static,string,get,username,from,watch,watch,watch,throws,ioexception,if,watch,null,watch,status,null,watch,status,get,headers,null,string,header,watch,status,get,headers,get,authentication,field,if,header,null,authentication,auth,authentication,decode,header,return,auth,get,user,principal,return,null
WatchExecutionContext -> public static String getUsernameFromWatch(Watch watch) throws IOException;1549289311;Given a watch, this extracts and decodes the relevant auth header and returns the principal of the user that is_executing the watch.;public static String getUsernameFromWatch(Watch watch) throws IOException {_        if (watch != null && watch.status() != null && watch.status().getHeaders() != null) {_            String header = watch.status().getHeaders().get(AuthenticationField.AUTHENTICATION_KEY)__            if (header != null) {_                Authentication auth = Authentication.decode(header)__                return auth.getUser().principal()__            }_        }_        return null__    };given,a,watch,this,extracts,and,decodes,the,relevant,auth,header,and,returns,the,principal,of,the,user,that,is,executing,the,watch;public,static,string,get,username,from,watch,watch,watch,throws,ioexception,if,watch,null,watch,status,null,watch,status,get,headers,null,string,header,watch,status,get,headers,get,authentication,field,if,header,null,authentication,auth,authentication,decode,header,return,auth,get,user,principal,return,null
