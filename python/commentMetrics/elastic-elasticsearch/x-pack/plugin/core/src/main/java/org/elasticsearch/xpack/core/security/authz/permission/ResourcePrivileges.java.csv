commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getResource() {     return resource. }
false;public;0;3;;public Map<String, Boolean> getPrivileges() {     return privileges. }
false;public;1;3;;public boolean isAllowed(String privilege) {     return Boolean.TRUE.equals(privileges.get(privilege)). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "{" + "resource='" + resource + '\'' + ", privileges=" + privileges + '}'. }
false;public;0;6;;@Override public int hashCode() {     int result = resource.hashCode().     result = 31 * result + privileges.hashCode().     return result. }
false;public;1;12;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final ResourcePrivileges other = (ResourcePrivileges) o.     return this.resource.equals(other.resource) && this.privileges.equals(other.privileges). }
false;public,static;1;3;;public static Builder builder(String resource) {     return new Builder(resource). }
false;public;2;4;;public Builder addPrivilege(String privilege, Boolean allowed) {     this.privileges.compute(privilege, (k, v) -> ((v == null) ? allowed : v && allowed)).     return this. }
false;public;1;6;;public Builder addPrivileges(Map<String, Boolean> privileges) {     for (Entry<String, Boolean> entry : privileges.entrySet()) {         addPrivilege(entry.getKey(), entry.getValue()).     }     return this. }
false;public;0;3;;public ResourcePrivileges build() {     return new ResourcePrivileges(resource, privileges). }
