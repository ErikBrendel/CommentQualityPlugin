commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public LicensesStatus status() {     return status. }
false;public;0;3;;public Map<String, String[]> acknowledgeMessages() {     return acknowledgeMessages. }
false;public;0;3;;public String acknowledgeHeader() {     return acknowledgeHeader. }
false;public;1;18;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     status = LicensesStatus.fromId(in.readVInt()).     acknowledgeHeader = in.readOptionalString().     int size = in.readVInt().     Map<String, String[]> acknowledgeMessages = new HashMap<>(size).     for (int i = 0. i < size. i++) {         String feature = in.readString().         int nMessages = in.readVInt().         String[] messages = new String[nMessages].         for (int j = 0. j < nMessages. j++) {             messages[j] = in.readString().         }         acknowledgeMessages.put(feature, messages).     }     this.acknowledgeMessages = acknowledgeMessages. }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeVInt(status.id()).     out.writeOptionalString(acknowledgeHeader).     out.writeVInt(acknowledgeMessages.size()).     for (Map.Entry<String, String[]> entry : acknowledgeMessages.entrySet()) {         out.writeString(entry.getKey()).         out.writeVInt(entry.getValue().length).         for (String message : entry.getValue()) {             out.writeString(message).         }     } }
false;protected;2;16;;@Override protected void addCustomFields(XContentBuilder builder, Params params) throws IOException {     builder.field("license_status", status.toString()).     if (!acknowledgeMessages.isEmpty()) {         builder.startObject("acknowledge").         builder.field("message", acknowledgeHeader).         for (Map.Entry<String, String[]> entry : acknowledgeMessages.entrySet()) {             builder.startArray(entry.getKey()).             for (String message : entry.getValue()) {                 builder.value(message).             }             builder.endArray().         }         builder.endObject().     } }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     if (!super.equals(o))         return false.     PutLicenseResponse that = (PutLicenseResponse) o.     return status == that.status && ProtocolUtils.equals(acknowledgeMessages, that.acknowledgeMessages) && Objects.equals(acknowledgeHeader, that.acknowledgeHeader). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), status, ProtocolUtils.hashCode(acknowledgeMessages), acknowledgeHeader). }
