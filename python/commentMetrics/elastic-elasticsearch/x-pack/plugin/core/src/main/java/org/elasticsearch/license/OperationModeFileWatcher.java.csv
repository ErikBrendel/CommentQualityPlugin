commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;public void init() {     if (initialized.compareAndSet(false, true)) {         final FileWatcher watcher = new FileWatcher(licenseModePath).         watcher.addListener(this).         try {             resourceWatcherService.add(watcher, ResourceWatcherService.Frequency.HIGH).             if (Files.exists(licenseModePath)) {                 onChange(licenseModePath).             }         } catch (IOException e) {             logger.error("couldn't initialize watching license mode file", e).         }     } }
true;public;0;3;/**  * Returns the current operation mode based on license mode file.  * Defaults to {@link OperationMode#PLATINUM}  */ ;/**  * Returns the current operation mode based on license mode file.  * Defaults to {@link OperationMode#PLATINUM}  */ public OperationMode getCurrentOperationMode() {     return currentOperationMode. }
false;public;1;4;;@Override public void onFileInit(Path file) {     onChange(file). }
false;public;1;4;;@Override public void onFileCreated(Path file) {     onChange(file). }
false;public;1;4;;@Override public void onFileDeleted(Path file) {     onChange(file). }
false;public;1;4;;@Override public void onFileChanged(Path file) {     onChange(file). }
false;private,synchronized;1;34;;private synchronized void onChange(Path file) {     if (file.equals(licenseModePath)) {         OperationMode newOperationMode = defaultOperationMode.         try {             if (Files.exists(licenseModePath) && Files.isReadable(licenseModePath)) {                 final byte[] content.                 try {                     content = Files.readAllBytes(licenseModePath).                 } catch (IOException e) {                     logger.error((Supplier<?>) () -> new ParameterizedMessage("couldn't read operation mode from [{}]", licenseModePath.toAbsolutePath()), e).                     return.                 }                 // this UTF-8 conversion is much pickier than java String                 final String operationMode = new BytesRef(content).utf8ToString().                 try {                     newOperationMode = OperationMode.resolve(operationMode).                 } catch (IllegalArgumentException e) {                     logger.error((Supplier<?>) () -> new ParameterizedMessage("invalid operation mode in [{}]", licenseModePath.toAbsolutePath()), e).                     return.                 }             }         } finally {             // set this after the fact to prevent that we are jumping back and forth first setting to defautl and then reading the             // actual op mode resetting it.             this.currentOperationMode = newOperationMode.         }         onChange.run().     } }
