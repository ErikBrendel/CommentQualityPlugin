commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PutJobAction.Response newResponse() {     return new PutJobAction.Response(). }
false;public,static;2;4;;public static UpdateJobAction.Request parseRequest(String jobId, XContentParser parser) {     JobUpdate update = JobUpdate.EXTERNAL_PARSER.apply(parser, null).setJobId(jobId).build().     return new UpdateJobAction.Request(jobId, update). }
false;public,static;2;3;;public static Request internal(String jobId, JobUpdate update) {     return new Request(jobId, update, true). }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public JobUpdate getJobUpdate() {     return update. }
false;public;0;3;;public boolean isInternal() {     return isInternal. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     update = new JobUpdate(in).     if (in.getVersion().onOrAfter(Version.V_6_2_2)) {         isInternal = in.readBoolean().     } else {         isInternal = false.     }     if (in.getVersion().onOrAfter(Version.V_6_3_0) && in.getVersion().before(Version.V_7_0_0)) {         // was waitForAck         in.readBoolean().     } }
false;public;1;12;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     update.writeTo(out).     if (out.getVersion().onOrAfter(Version.V_6_2_2)) {         out.writeBoolean(isInternal).     }     if (out.getVersion().onOrAfter(Version.V_6_3_0) && out.getVersion().before(Version.V_7_0_0)) {         // was waitForAck         out.writeBoolean(false).     } }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     // only serialize the update, as the job id is specified as part of the url     update.toXContent(builder, params).     return builder. }
false;public;1;9;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     UpdateJobAction.Request that = (UpdateJobAction.Request) o.     return Objects.equals(jobId, that.jobId) && Objects.equals(update, that.update) && isInternal == that.isInternal. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, update, isInternal). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
