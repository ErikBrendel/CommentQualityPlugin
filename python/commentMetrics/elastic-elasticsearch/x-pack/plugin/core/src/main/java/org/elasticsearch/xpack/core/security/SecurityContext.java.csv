# id;timestamp;commentText;codeText;commentWords;codeWords
SecurityContext -> public void setUser(User user, Version version);1524684173;Sets the user forcefully to the provided user. There must not be an existing user in the ThreadContext otherwise an exception_will be thrown. This method is package private for testing.;public void setUser(User user, Version version) {_        Objects.requireNonNull(user)__        final Authentication.RealmRef authenticatedBy = new Authentication.RealmRef("__attach", "__attach", nodeName)__        final Authentication.RealmRef lookedUpBy__        if (user.isRunAs()) {_            lookedUpBy = authenticatedBy__        } else {_            lookedUpBy = null__        }_        setAuthentication(new Authentication(user, authenticatedBy, lookedUpBy, version))__    };sets,the,user,forcefully,to,the,provided,user,there,must,not,be,an,existing,user,in,the,thread,context,otherwise,an,exception,will,be,thrown,this,method,is,package,private,for,testing;public,void,set,user,user,user,version,version,objects,require,non,null,user,final,authentication,realm,ref,authenticated,by,new,authentication,realm,ref,node,name,final,authentication,realm,ref,looked,up,by,if,user,is,run,as,looked,up,by,authenticated,by,else,looked,up,by,null,set,authentication,new,authentication,user,authenticated,by,looked,up,by,version
SecurityContext -> public void setUser(User user, Version version);1533295538;Sets the user forcefully to the provided user. There must not be an existing user in the ThreadContext otherwise an exception_will be thrown. This method is package private for testing.;public void setUser(User user, Version version) {_        Objects.requireNonNull(user)__        final Authentication.RealmRef authenticatedBy = new Authentication.RealmRef("__attach", "__attach", nodeName)__        final Authentication.RealmRef lookedUpBy__        if (user.isRunAs()) {_            lookedUpBy = authenticatedBy__        } else {_            lookedUpBy = null__        }_        setAuthentication(new Authentication(user, authenticatedBy, lookedUpBy, version))__    };sets,the,user,forcefully,to,the,provided,user,there,must,not,be,an,existing,user,in,the,thread,context,otherwise,an,exception,will,be,thrown,this,method,is,package,private,for,testing;public,void,set,user,user,user,version,version,objects,require,non,null,user,final,authentication,realm,ref,authenticated,by,new,authentication,realm,ref,node,name,final,authentication,realm,ref,looked,up,by,if,user,is,run,as,looked,up,by,authenticated,by,else,looked,up,by,null,set,authentication,new,authentication,user,authenticated,by,looked,up,by,version
SecurityContext -> public void setUser(User user, Version version);1535552903;Sets the user forcefully to the provided user. There must not be an existing user in the ThreadContext otherwise an exception_will be thrown. This method is package private for testing.;public void setUser(User user, Version version) {_        Objects.requireNonNull(user)__        final Authentication.RealmRef authenticatedBy = new Authentication.RealmRef("__attach", "__attach", nodeName)__        final Authentication.RealmRef lookedUpBy__        if (user.isRunAs()) {_            lookedUpBy = authenticatedBy__        } else {_            lookedUpBy = null__        }_        setAuthentication(new Authentication(user, authenticatedBy, lookedUpBy, version))__    };sets,the,user,forcefully,to,the,provided,user,there,must,not,be,an,existing,user,in,the,thread,context,otherwise,an,exception,will,be,thrown,this,method,is,package,private,for,testing;public,void,set,user,user,user,version,version,objects,require,non,null,user,final,authentication,realm,ref,authenticated,by,new,authentication,realm,ref,node,name,final,authentication,realm,ref,looked,up,by,if,user,is,run,as,looked,up,by,authenticated,by,else,looked,up,by,null,set,authentication,new,authentication,user,authenticated,by,looked,up,by,version
SecurityContext -> public void setUser(User user, Version version);1538170812;Sets the user forcefully to the provided user. There must not be an existing user in the ThreadContext otherwise an exception_will be thrown. This method is package private for testing.;public void setUser(User user, Version version) {_        Objects.requireNonNull(user)__        final Authentication.RealmRef authenticatedBy = new Authentication.RealmRef("__attach", "__attach", nodeName)__        final Authentication.RealmRef lookedUpBy__        if (user.isRunAs()) {_            lookedUpBy = authenticatedBy__        } else {_            lookedUpBy = null__        }_        setAuthentication(new Authentication(user, authenticatedBy, lookedUpBy, version))__    };sets,the,user,forcefully,to,the,provided,user,there,must,not,be,an,existing,user,in,the,thread,context,otherwise,an,exception,will,be,thrown,this,method,is,package,private,for,testing;public,void,set,user,user,user,version,version,objects,require,non,null,user,final,authentication,realm,ref,authenticated,by,new,authentication,realm,ref,node,name,final,authentication,realm,ref,looked,up,by,if,user,is,run,as,looked,up,by,authenticated,by,else,looked,up,by,null,set,authentication,new,authentication,user,authenticated,by,looked,up,by,version
SecurityContext -> public void setUser(User user, Version version);1549336917;Sets the user forcefully to the provided user. There must not be an existing user in the ThreadContext otherwise an exception_will be thrown. This method is package private for testing.;public void setUser(User user, Version version) {_        Objects.requireNonNull(user)__        final Authentication.RealmRef authenticatedBy = new Authentication.RealmRef("__attach", "__attach", nodeName)__        final Authentication.RealmRef lookedUpBy__        if (user.isRunAs()) {_            lookedUpBy = authenticatedBy__        } else {_            lookedUpBy = null__        }_        setAuthentication(_            new Authentication(user, authenticatedBy, lookedUpBy, version, AuthenticationType.INTERNAL, Collections.emptyMap()))__    };sets,the,user,forcefully,to,the,provided,user,there,must,not,be,an,existing,user,in,the,thread,context,otherwise,an,exception,will,be,thrown,this,method,is,package,private,for,testing;public,void,set,user,user,user,version,version,objects,require,non,null,user,final,authentication,realm,ref,authenticated,by,new,authentication,realm,ref,node,name,final,authentication,realm,ref,looked,up,by,if,user,is,run,as,looked,up,by,authenticated,by,else,looked,up,by,null,set,authentication,new,authentication,user,authenticated,by,looked,up,by,version,authentication,type,internal,collections,empty,map
SecurityContext -> private void setAuthentication(Authentication authentication);1524684173;Writes the authentication to the thread context;private void setAuthentication(Authentication authentication) {_        try {_            authentication.writeToContext(threadContext)__        } catch (IOException e) {_            throw new AssertionError("how can we have a IOException with a user we set", e)__        }_    };writes,the,authentication,to,the,thread,context;private,void,set,authentication,authentication,authentication,try,authentication,write,to,context,thread,context,catch,ioexception,e,throw,new,assertion,error,how,can,we,have,a,ioexception,with,a,user,we,set,e
SecurityContext -> private void setAuthentication(Authentication authentication);1533295538;Writes the authentication to the thread context;private void setAuthentication(Authentication authentication) {_        try {_            authentication.writeToContext(threadContext)__        } catch (IOException e) {_            throw new AssertionError("how can we have a IOException with a user we set", e)__        }_    };writes,the,authentication,to,the,thread,context;private,void,set,authentication,authentication,authentication,try,authentication,write,to,context,thread,context,catch,ioexception,e,throw,new,assertion,error,how,can,we,have,a,ioexception,with,a,user,we,set,e
SecurityContext -> private void setAuthentication(Authentication authentication);1535552903;Writes the authentication to the thread context;private void setAuthentication(Authentication authentication) {_        try {_            authentication.writeToContext(threadContext)__        } catch (IOException e) {_            throw new AssertionError("how can we have a IOException with a user we set", e)__        }_    };writes,the,authentication,to,the,thread,context;private,void,set,authentication,authentication,authentication,try,authentication,write,to,context,thread,context,catch,ioexception,e,throw,new,assertion,error,how,can,we,have,a,ioexception,with,a,user,we,set,e
SecurityContext -> private void setAuthentication(Authentication authentication);1538170812;Writes the authentication to the thread context;private void setAuthentication(Authentication authentication) {_        try {_            authentication.writeToContext(threadContext)__        } catch (IOException e) {_            throw new AssertionError("how can we have a IOException with a user we set", e)__        }_    };writes,the,authentication,to,the,thread,context;private,void,set,authentication,authentication,authentication,try,authentication,write,to,context,thread,context,catch,ioexception,e,throw,new,assertion,error,how,can,we,have,a,ioexception,with,a,user,we,set,e
SecurityContext -> private void setAuthentication(Authentication authentication);1549336917;Writes the authentication to the thread context;private void setAuthentication(Authentication authentication) {_        try {_            authentication.writeToContext(threadContext)__        } catch (IOException e) {_            throw new AssertionError("how can we have a IOException with a user we set", e)__        }_    };writes,the,authentication,to,the,thread,context;private,void,set,authentication,authentication,authentication,try,authentication,write,to,context,thread,context,catch,ioexception,e,throw,new,assertion,error,how,can,we,have,a,ioexception,with,a,user,we,set,e
SecurityContext -> public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version);1524684173;Runs the consumer in a new context after setting a new version of the authentication that is compatible with the version provided._The original context is provided to the consumer. When this method returns, the original context is restored.;public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        final Authentication authentication = Objects.requireNonNull(userSettings.getAuthentication())__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),_                                                 authentication.getLookedUpBy(), version))__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,after,setting,a,new,version,of,the,authentication,that,is,compatible,with,the,version,provided,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,after,rewriting,authentication,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,final,authentication,authentication,objects,require,non,null,user,settings,get,authentication,try,thread,context,stored,context,ctx,thread,context,stash,context,set,authentication,new,authentication,authentication,get,user,authentication,get,authenticated,by,authentication,get,looked,up,by,version,consumer,accept,original
SecurityContext -> public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version);1533295538;Runs the consumer in a new context after setting a new version of the authentication that is compatible with the version provided._The original context is provided to the consumer. When this method returns, the original context is restored.;public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        final Authentication authentication = Objects.requireNonNull(userSettings.getAuthentication())__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),_                                                 authentication.getLookedUpBy(), version))__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,after,setting,a,new,version,of,the,authentication,that,is,compatible,with,the,version,provided,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,after,rewriting,authentication,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,final,authentication,authentication,objects,require,non,null,user,settings,get,authentication,try,thread,context,stored,context,ctx,thread,context,stash,context,set,authentication,new,authentication,authentication,get,user,authentication,get,authenticated,by,authentication,get,looked,up,by,version,consumer,accept,original
SecurityContext -> public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version);1535552903;Runs the consumer in a new context after setting a new version of the authentication that is compatible with the version provided._The original context is provided to the consumer. When this method returns, the original context is restored.;public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        final Authentication authentication = Objects.requireNonNull(userSettings.getAuthentication())__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),_                                                 authentication.getLookedUpBy(), version))__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,after,setting,a,new,version,of,the,authentication,that,is,compatible,with,the,version,provided,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,after,rewriting,authentication,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,final,authentication,authentication,objects,require,non,null,user,settings,get,authentication,try,thread,context,stored,context,ctx,thread,context,stash,context,set,authentication,new,authentication,authentication,get,user,authentication,get,authenticated,by,authentication,get,looked,up,by,version,consumer,accept,original
SecurityContext -> public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version);1538170812;Runs the consumer in a new context after setting a new version of the authentication that is compatible with the version provided._The original context is provided to the consumer. When this method returns, the original context is restored.;public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        final Authentication authentication = Objects.requireNonNull(userSettings.getAuthentication())__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),_                                                 authentication.getLookedUpBy(), version))__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,after,setting,a,new,version,of,the,authentication,that,is,compatible,with,the,version,provided,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,after,rewriting,authentication,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,final,authentication,authentication,objects,require,non,null,user,settings,get,authentication,try,thread,context,stored,context,ctx,thread,context,stash,context,set,authentication,new,authentication,authentication,get,user,authentication,get,authenticated,by,authentication,get,looked,up,by,version,consumer,accept,original
SecurityContext -> public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version);1549336917;Runs the consumer in a new context after setting a new version of the authentication that is compatible with the version provided._The original context is provided to the consumer. When this method returns, the original context is restored.;public void executeAfterRewritingAuthentication(Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        final Authentication authentication = Objects.requireNonNull(userSettings.getAuthentication())__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            setAuthentication(new Authentication(authentication.getUser(), authentication.getAuthenticatedBy(),_                authentication.getLookedUpBy(), version, authentication.getAuthenticationType(), authentication.getMetadata()))__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,after,setting,a,new,version,of,the,authentication,that,is,compatible,with,the,version,provided,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,after,rewriting,authentication,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,final,authentication,authentication,objects,require,non,null,user,settings,get,authentication,try,thread,context,stored,context,ignore,thread,context,stash,context,set,authentication,new,authentication,authentication,get,user,authentication,get,authenticated,by,authentication,get,looked,up,by,version,authentication,get,authentication,type,authentication,get,metadata,consumer,accept,original
SecurityContext -> public Authentication getAuthentication();1524684173;Returns the authentication information, or null if the current request has no authentication info.;public Authentication getAuthentication() {_        try {_            return Authentication.readFromContext(threadContext)__        } catch (IOException e) {_            _            _            logger.error("failed to read authentication", e)__            return null__        }_    };returns,the,authentication,information,or,null,if,the,current,request,has,no,authentication,info;public,authentication,get,authentication,try,return,authentication,read,from,context,thread,context,catch,ioexception,e,logger,error,failed,to,read,authentication,e,return,null
SecurityContext -> public Authentication getAuthentication();1533295538;Returns the authentication information, or null if the current request has no authentication info.;public Authentication getAuthentication() {_        try {_            return Authentication.readFromContext(threadContext)__        } catch (IOException e) {_            _            _            logger.error("failed to read authentication", e)__            return null__        }_    };returns,the,authentication,information,or,null,if,the,current,request,has,no,authentication,info;public,authentication,get,authentication,try,return,authentication,read,from,context,thread,context,catch,ioexception,e,logger,error,failed,to,read,authentication,e,return,null
SecurityContext -> public Authentication getAuthentication();1535552903;Returns the authentication information, or null if the current request has no authentication info.;public Authentication getAuthentication() {_        try {_            return Authentication.readFromContext(threadContext)__        } catch (IOException e) {_            _            _            logger.error("failed to read authentication", e)__            return null__        }_    };returns,the,authentication,information,or,null,if,the,current,request,has,no,authentication,info;public,authentication,get,authentication,try,return,authentication,read,from,context,thread,context,catch,ioexception,e,logger,error,failed,to,read,authentication,e,return,null
SecurityContext -> public Authentication getAuthentication();1538170812;Returns the authentication information, or null if the current request has no authentication info.;public Authentication getAuthentication() {_        try {_            return Authentication.readFromContext(threadContext)__        } catch (IOException e) {_            _            _            logger.error("failed to read authentication", e)__            return null__        }_    };returns,the,authentication,information,or,null,if,the,current,request,has,no,authentication,info;public,authentication,get,authentication,try,return,authentication,read,from,context,thread,context,catch,ioexception,e,logger,error,failed,to,read,authentication,e,return,null
SecurityContext -> public Authentication getAuthentication();1549336917;Returns the authentication information, or null if the current request has no authentication info.;public Authentication getAuthentication() {_        try {_            return Authentication.readFromContext(threadContext)__        } catch (IOException e) {_            _            _            logger.error("failed to read authentication", e)__            return null__        }_    };returns,the,authentication,information,or,null,if,the,current,request,has,no,authentication,info;public,authentication,get,authentication,try,return,authentication,read,from,context,thread,context,catch,ioexception,e,logger,error,failed,to,read,authentication,e,return,null
SecurityContext -> public SecurityContext(Settings settings, ThreadContext threadContext);1524684173;Creates a new security context._If cryptoService is null, security is disabled and {@link UserSettings#getUser()}_and {@link UserSettings#getAuthentication()} will always return null.;public SecurityContext(Settings settings, ThreadContext threadContext) {_        this.logger = Loggers.getLogger(getClass(), settings)__        this.threadContext = threadContext__        this.userSettings = new UserSettings(settings, threadContext)__        this.nodeName = Node.NODE_NAME_SETTING.get(settings)__    };creates,a,new,security,context,if,crypto,service,is,null,security,is,disabled,and,link,user,settings,get,user,and,link,user,settings,get,authentication,will,always,return,null;public,security,context,settings,settings,thread,context,thread,context,this,logger,loggers,get,logger,get,class,settings,this,thread,context,thread,context,this,user,settings,new,user,settings,settings,thread,context,this,node,name,node,get,settings
SecurityContext -> public SecurityContext(Settings settings, ThreadContext threadContext);1533295538;Creates a new security context._If cryptoService is null, security is disabled and {@link UserSettings#getUser()}_and {@link UserSettings#getAuthentication()} will always return null.;public SecurityContext(Settings settings, ThreadContext threadContext) {_        this.logger = Loggers.getLogger(getClass(), settings)__        this.threadContext = threadContext__        this.userSettings = new UserSettings(settings, threadContext)__        this.nodeName = Node.NODE_NAME_SETTING.get(settings)__    };creates,a,new,security,context,if,crypto,service,is,null,security,is,disabled,and,link,user,settings,get,user,and,link,user,settings,get,authentication,will,always,return,null;public,security,context,settings,settings,thread,context,thread,context,this,logger,loggers,get,logger,get,class,settings,this,thread,context,thread,context,this,user,settings,new,user,settings,settings,thread,context,this,node,name,node,get,settings
SecurityContext -> public SecurityContext(Settings settings, ThreadContext threadContext);1535552903;Creates a new security context._If cryptoService is null, security is disabled and {@link UserSettings#getUser()}_and {@link UserSettings#getAuthentication()} will always return null.;public SecurityContext(Settings settings, ThreadContext threadContext) {_        this.logger = Loggers.getLogger(getClass(), settings)__        this.threadContext = threadContext__        this.userSettings = new UserSettings(settings, threadContext)__        this.nodeName = Node.NODE_NAME_SETTING.get(settings)__    };creates,a,new,security,context,if,crypto,service,is,null,security,is,disabled,and,link,user,settings,get,user,and,link,user,settings,get,authentication,will,always,return,null;public,security,context,settings,settings,thread,context,thread,context,this,logger,loggers,get,logger,get,class,settings,this,thread,context,thread,context,this,user,settings,new,user,settings,settings,thread,context,this,node,name,node,get,settings
SecurityContext -> public SecurityContext(Settings settings, ThreadContext threadContext);1538170812;Creates a new security context._If cryptoService is null, security is disabled and {@link UserSettings#getUser()}_and {@link UserSettings#getAuthentication()} will always return null.;public SecurityContext(Settings settings, ThreadContext threadContext) {_        this.threadContext = threadContext__        this.userSettings = new UserSettings(threadContext)__        this.nodeName = Node.NODE_NAME_SETTING.get(settings)__    };creates,a,new,security,context,if,crypto,service,is,null,security,is,disabled,and,link,user,settings,get,user,and,link,user,settings,get,authentication,will,always,return,null;public,security,context,settings,settings,thread,context,thread,context,this,thread,context,thread,context,this,user,settings,new,user,settings,thread,context,this,node,name,node,get,settings
SecurityContext -> public SecurityContext(Settings settings, ThreadContext threadContext);1549336917;Creates a new security context._If cryptoService is null, security is disabled and {@link UserSettings#getUser()}_and {@link UserSettings#getAuthentication()} will always return null.;public SecurityContext(Settings settings, ThreadContext threadContext) {_        this.threadContext = threadContext__        this.userSettings = new UserSettings(threadContext)__        this.nodeName = Node.NODE_NAME_SETTING.get(settings)__    };creates,a,new,security,context,if,crypto,service,is,null,security,is,disabled,and,link,user,settings,get,user,and,link,user,settings,get,authentication,will,always,return,null;public,security,context,settings,settings,thread,context,thread,context,this,thread,context,thread,context,this,user,settings,new,user,settings,thread,context,this,node,name,node,get,settings
SecurityContext -> public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version);1524684173;Runs the consumer in a new context as the provided user. The original context is provided to the consumer. When this method_returns, the original context is restored.;public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setUser(user, version)__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,as,the,provided,user,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,as,user,user,user,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,try,thread,context,stored,context,ctx,thread,context,stash,context,set,user,user,version,consumer,accept,original
SecurityContext -> public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version);1533295538;Runs the consumer in a new context as the provided user. The original context is provided to the consumer. When this method_returns, the original context is restored.;public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setUser(user, version)__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,as,the,provided,user,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,as,user,user,user,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,try,thread,context,stored,context,ctx,thread,context,stash,context,set,user,user,version,consumer,accept,original
SecurityContext -> public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version);1535552903;Runs the consumer in a new context as the provided user. The original context is provided to the consumer. When this method_returns, the original context is restored.;public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setUser(user, version)__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,as,the,provided,user,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,as,user,user,user,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,try,thread,context,stored,context,ctx,thread,context,stash,context,set,user,user,version,consumer,accept,original
SecurityContext -> public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version);1538170812;Runs the consumer in a new context as the provided user. The original context is provided to the consumer. When this method_returns, the original context is restored.;public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        try (ThreadContext.StoredContext ctx = threadContext.stashContext()) {_            setUser(user, version)__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,as,the,provided,user,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,as,user,user,user,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,try,thread,context,stored,context,ctx,thread,context,stash,context,set,user,user,version,consumer,accept,original
SecurityContext -> public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version);1549336917;Runs the consumer in a new context as the provided user. The original context is provided to the consumer. When this method_returns, the original context is restored.;public void executeAsUser(User user, Consumer<StoredContext> consumer, Version version) {_        final StoredContext original = threadContext.newStoredContext(true)__        try (ThreadContext.StoredContext ignore = threadContext.stashContext()) {_            setUser(user, version)__            consumer.accept(original)__        }_    };runs,the,consumer,in,a,new,context,as,the,provided,user,the,original,context,is,provided,to,the,consumer,when,this,method,returns,the,original,context,is,restored;public,void,execute,as,user,user,user,consumer,stored,context,consumer,version,version,final,stored,context,original,thread,context,new,stored,context,true,try,thread,context,stored,context,ignore,thread,context,stash,context,set,user,user,version,consumer,accept,original
SecurityContext -> public User getUser();1524684173;Returns the current user information, or null if the current request has no authentication info.;public User getUser() {_        Authentication authentication = getAuthentication()__        return authentication == null ? null : authentication.getUser()__    };returns,the,current,user,information,or,null,if,the,current,request,has,no,authentication,info;public,user,get,user,authentication,authentication,get,authentication,return,authentication,null,null,authentication,get,user
SecurityContext -> public User getUser();1533295538;Returns the current user information, or null if the current request has no authentication info.;public User getUser() {_        Authentication authentication = getAuthentication()__        return authentication == null ? null : authentication.getUser()__    };returns,the,current,user,information,or,null,if,the,current,request,has,no,authentication,info;public,user,get,user,authentication,authentication,get,authentication,return,authentication,null,null,authentication,get,user
SecurityContext -> public User getUser();1535552903;Returns the current user information, or null if the current request has no authentication info.;public User getUser() {_        Authentication authentication = getAuthentication()__        return authentication == null ? null : authentication.getUser()__    };returns,the,current,user,information,or,null,if,the,current,request,has,no,authentication,info;public,user,get,user,authentication,authentication,get,authentication,return,authentication,null,null,authentication,get,user
SecurityContext -> public User getUser();1538170812;Returns the current user information, or null if the current request has no authentication info.;public User getUser() {_        Authentication authentication = getAuthentication()__        return authentication == null ? null : authentication.getUser()__    };returns,the,current,user,information,or,null,if,the,current,request,has,no,authentication,info;public,user,get,user,authentication,authentication,get,authentication,return,authentication,null,null,authentication,get,user
SecurityContext -> public User getUser();1549336917;Returns the current user information, or null if the current request has no authentication info.;public User getUser() {_        Authentication authentication = getAuthentication()__        return authentication == null ? null : authentication.getUser()__    };returns,the,current,user,information,or,null,if,the,current,request,has,no,authentication,info;public,user,get,user,authentication,authentication,get,authentication,return,authentication,null,null,authentication,get,user
