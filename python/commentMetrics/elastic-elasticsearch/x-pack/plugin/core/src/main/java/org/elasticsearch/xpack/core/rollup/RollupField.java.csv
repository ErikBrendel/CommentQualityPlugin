commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Format to the appropriate Rollup field name convention  *  * @param source Source aggregation to get type and name from  * @param extra The type of value this field is (VALUE, INTERVAL, etc)  * @return formatted field name  */ ;/**  * Format to the appropriate Rollup field name convention  *  * @param source Source aggregation to get type and name from  * @param extra The type of value this field is (VALUE, INTERVAL, etc)  * @return formatted field name  */ public static String formatFieldName(ValuesSourceAggregationBuilder<?, ?> source, String extra) {     return source.field() + "." + source.getType() + "." + extra. }
true;public,static;3;3;/**  * Format to the appropriate Rollup field name convention  *  * @param field The field we are formatting  * @param type  The aggregation type that was used for rollup  * @param extra The type of value this field is (VALUE, INTERVAL, etc)  * @return formatted field name  */ ;/**  * Format to the appropriate Rollup field name convention  *  * @param field The field we are formatting  * @param type  The aggregation type that was used for rollup  * @param extra The type of value this field is (VALUE, INTERVAL, etc)  * @return formatted field name  */ public static String formatFieldName(String field, String type, String extra) {     return field + "." + type + "." + extra. }
true;public,static;1;3;/**  * Format to the appropriate Rollup convention for internal Metadata fields (_rollup)  */ ;/**  * Format to the appropriate Rollup convention for internal Metadata fields (_rollup)  */ public static String formatMetaField(String extra) {     return RollupField.ROLLUP_META + "." + extra. }
true;public,static;1;3;/**  * Format to the appropriate Rollup convention for extra Count aggs.  * These are added to averages and bucketing aggs that need a count  */ ;/**  * Format to the appropriate Rollup convention for extra Count aggs.  * These are added to averages and bucketing aggs that need a count  */ public static String formatCountAggName(String field) {     return field + "." + RollupField.COUNT_FIELD. }
true;public,static;1;3;/**  * Format to the appropriate Rollup convention for agg names that  * might conflict with empty buckets.  `value` is appended to agg name.  * E.g. used for averages  */ ;/**  * Format to the appropriate Rollup convention for agg names that  * might conflict with empty buckets.  `value` is appended to agg name.  * E.g. used for averages  */ public static String formatValueAggName(String field) {     return field + "." + RollupField.VALUE. }
true;public,static;2;3;/**  * Format into the convention for computed field lookups  */ ;/**  * Format into the convention for computed field lookups  */ public static String formatComputed(String field, String agg) {     return field + "." + agg. }
true;public,static;2;3;/**  * Format into the convention used by the Indexer's composite agg, so that  * the normal field name is translated into a Rollup fieldname via the agg name  */ ;/**  * Format into the convention used by the Indexer's composite agg, so that  * the normal field name is translated into a Rollup fieldname via the agg name  */ public static String formatIndexerAggName(String field, String agg) {     return field + "." + agg. }
