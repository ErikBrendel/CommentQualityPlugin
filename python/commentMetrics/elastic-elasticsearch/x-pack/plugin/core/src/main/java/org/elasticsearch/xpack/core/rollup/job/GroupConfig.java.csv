commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the configuration of the date histogram  */ ;/**  * @return the configuration of the date histogram  */ public DateHistogramGroupConfig getDateHistogram() {     return dateHistogram. }
true;public;0;4;/**  * @return the configuration of the histogram  */ ;/**  * @return the configuration of the histogram  */ @Nullable public HistogramGroupConfig getHistogram() {     return histogram. }
true;public;0;4;/**  * @return the configuration of the terms  */ ;/**  * @return the configuration of the terms  */ @Nullable public TermsGroupConfig getTerms() {     return terms. }
false;public;0;11;;public Set<String> getAllFields() {     Set<String> fields = new HashSet<>().     fields.add(dateHistogram.getField()).     if (histogram != null) {         fields.addAll(asList(histogram.getFields())).     }     if (terms != null) {         fields.addAll(asList(terms.getFields())).     }     return Collections.unmodifiableSet(fields). }
false;public;2;10;;public void validateMappings(final Map<String, Map<String, FieldCapabilities>> fieldCapsResponse, final ActionRequestValidationException validationException) {     dateHistogram.validateMappings(fieldCapsResponse, validationException).     if (histogram != null) {         histogram.validateMappings(fieldCapsResponse, validationException).     }     if (terms != null) {         terms.validateMappings(fieldCapsResponse, validationException).     } }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field(DateHistogramGroupConfig.NAME, dateHistogram).         if (histogram != null) {             builder.field(HistogramGroupConfig.NAME, histogram).         }         if (terms != null) {             builder.field(TermsGroupConfig.NAME, terms).         }     }     return builder.endObject(). }
false;public;1;6;;@Override public void writeTo(final StreamOutput out) throws IOException {     dateHistogram.writeTo(out).     out.writeOptionalWriteable(histogram).     out.writeOptionalWriteable(terms). }
false;public;1;14;;@Override public boolean equals(final Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final GroupConfig that = (GroupConfig) other.     return Objects.equals(dateHistogram, that.dateHistogram) && Objects.equals(histogram, that.histogram) && Objects.equals(terms, that.terms). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(dateHistogram, histogram, terms). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
false;public,static;1;3;;public static GroupConfig fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
