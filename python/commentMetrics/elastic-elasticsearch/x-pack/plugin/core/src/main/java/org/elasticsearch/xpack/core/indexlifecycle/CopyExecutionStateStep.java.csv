commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;String getShrunkIndexPrefix() {     return shrunkIndexPrefix. }
false;public;2;38;;@Override public ClusterState performAction(Index index, ClusterState clusterState) {     IndexMetaData indexMetaData = clusterState.metaData().index(index).     if (indexMetaData == null) {         // Index must have been since deleted, ignore it         logger.debug("[{}] lifecycle action for index [{}] executed but index no longer exists", getKey().getAction(), index.getName()).         return clusterState.     }     // get source index     String indexName = indexMetaData.getIndex().getName().     // get target shrink index     String targetIndexName = shrunkIndexPrefix + indexName.     IndexMetaData targetIndexMetaData = clusterState.metaData().index(targetIndexName).     if (targetIndexMetaData == null) {         logger.warn("[{}] index [{}] unable to copy execution state to target index [{}] as target index does not exist", getKey().getAction(), index.getName(), targetIndexName).         throw new IllegalStateException("unable to copy execution state from [" + index.getName() + "] to [" + targetIndexName + "] as target index does not exist").     }     LifecycleExecutionState lifecycleState = LifecycleExecutionState.fromIndexMetadata(indexMetaData).     String phase = lifecycleState.getPhase().     String action = lifecycleState.getAction().     long lifecycleDate = lifecycleState.getLifecycleDate().     LifecycleExecutionState.Builder relevantTargetCustomData = LifecycleExecutionState.builder().     relevantTargetCustomData.setIndexCreationDate(lifecycleDate).     relevantTargetCustomData.setPhase(phase).     relevantTargetCustomData.setAction(action).     relevantTargetCustomData.setStep(ShrunkenIndexCheckStep.NAME).     MetaData.Builder newMetaData = MetaData.builder(clusterState.getMetaData()).put(IndexMetaData.builder(targetIndexMetaData).putCustom(ILM_CUSTOM_METADATA_KEY, relevantTargetCustomData.build().asMap())).     return ClusterState.builder(clusterState).metaData(newMetaData).build(). }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     if (!super.equals(o))         return false.     CopyExecutionStateStep that = (CopyExecutionStateStep) o.     return Objects.equals(shrunkIndexPrefix, that.shrunkIndexPrefix). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), shrunkIndexPrefix). }
