commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public long getInterval() {     return interval. }
false;public;0;3;;public String[] getFields() {     return fields. }
false;public;2;23;;public void validateMappings(Map<String, Map<String, FieldCapabilities>> fieldCapsResponse, ActionRequestValidationException validationException) {     Arrays.stream(fields).forEach(field -> {         Map<String, FieldCapabilities> fieldCaps = fieldCapsResponse.get(field).         if (fieldCaps != null && fieldCaps.isEmpty() == false) {             fieldCaps.forEach((key, value) -> {                 if (RollupField.NUMERIC_FIELD_MAPPER_TYPES.contains(key)) {                     if (value.isAggregatable() == false) {                         validationException.addValidationError("The field [" + field + "] must be aggregatable across all indices, " + "but is not.").                     }                 } else {                     validationException.addValidationError("The field referenced by a histo group must be a [numeric] type, " + "but found " + fieldCaps.keySet().toString() + " for field [" + field + "]").                 }             }).         } else {             validationException.addValidationError("Could not find a [numeric] field with name [" + field + "] in any of the indices matching the index pattern.").         }     }). }
false;public;2;10;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         builder.field(INTERVAL, interval).         builder.field(FIELDS, fields).     }     builder.endObject().     return builder. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeVLong(interval).     out.writeStringArray(fields). }
false;public;1;11;;@Override public boolean equals(final Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final HistogramGroupConfig that = (HistogramGroupConfig) other.     return Objects.equals(interval, that.interval) && Arrays.equals(fields, that.fields). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(interval, Arrays.hashCode(fields)). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
false;public,static;1;3;;public static HistogramGroupConfig fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
