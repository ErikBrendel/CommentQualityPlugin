commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public,static;2;7;;public static Request parseRequest(String jobId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.jobId = jobId.     }     return request. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalTimeValue(duration).     out.writeOptionalTimeValue(expiresIn). }
false;public;0;3;;public TimeValue getDuration() {     return duration. }
false;public;1;3;;public void setDuration(String duration) {     setDuration(TimeValue.parseTimeValue(duration, DURATION.getPreferredName())). }
false;public;1;11;;public void setDuration(TimeValue duration) {     this.duration = duration.     if (this.duration.compareTo(TimeValue.ZERO) <= 0) {         throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be positive: [" + duration.getStringRep() + "]").     }     if (this.duration.compareTo(MAX_DURATION) > 0) {         throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be " + MAX_DURATION.getStringRep() + " or less: [" + duration.getStringRep() + "]").     } }
false;public;0;3;;public TimeValue getExpiresIn() {     return expiresIn. }
false;public;1;3;;public void setExpiresIn(String expiration) {     setExpiresIn(TimeValue.parseTimeValue(expiration, EXPIRES_IN.getPreferredName())). }
false;public;1;7;;public void setExpiresIn(TimeValue expiresIn) {     this.expiresIn = expiresIn.     if (this.expiresIn.compareTo(TimeValue.ZERO) < 0) {         throw new IllegalArgumentException("[" + EXPIRES_IN.getPreferredName() + "] must be non-negative: [" + expiresIn.getStringRep() + "]").     } }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, duration, expiresIn). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(duration, other.duration) && Objects.equals(expiresIn, other.expiresIn). }
false;public;2;13;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (duration != null) {         builder.field(DURATION.getPreferredName(), duration.getStringRep()).     }     if (expiresIn != null) {         builder.field(EXPIRES_IN.getPreferredName(), expiresIn.getStringRep()).     }     builder.endObject().     return builder. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(acknowledged).     out.writeString(forecastId). }
false;public;0;3;;public boolean isAcknowledged() {     return acknowledged. }
false;public;0;3;;public String getForecastId() {     return forecastId. }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("acknowledged", acknowledged).     builder.field(Forecast.FORECAST_ID.getPreferredName(), forecastId).     builder.endObject().     return builder. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return this.acknowledged == other.acknowledged && Objects.equals(this.forecastId, other.forecastId). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(acknowledged, forecastId). }
