commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (name == null) {         validationException = addValidationError("role name is missing", validationException).     }     if (applicationPrivileges != null) {         for (RoleDescriptor.ApplicationResourcePrivileges privilege : applicationPrivileges) {             try {                 ApplicationPrivilege.validateApplicationNameOrWildcard(privilege.getApplication()).             } catch (IllegalArgumentException e) {                 validationException = addValidationError(e.getMessage(), validationException).             }             for (String name : privilege.getPrivileges()) {                 try {                     ApplicationPrivilege.validatePrivilegeOrActionName(name).                 } catch (IllegalArgumentException e) {                     validationException = addValidationError(e.getMessage(), validationException).                 }             }         }     }     if (metadata != null && MetadataUtils.containsReservedMetadata(metadata)) {         validationException = addValidationError("metadata keys may not start with [" + MetadataUtils.RESERVED_PREFIX + "]", validationException).     }     return validationException. }
false;public;1;3;;public void name(String name) {     this.name = name. }
false;public;1;3;;public void cluster(String... clusterPrivileges) {     this.clusterPrivileges = clusterPrivileges. }
false;;1;3;;void conditionalCluster(ConditionalClusterPrivilege... conditionalClusterPrivileges) {     this.conditionalClusterPrivileges = conditionalClusterPrivileges. }
false;;1;3;;void addIndex(RoleDescriptor.IndicesPrivileges... privileges) {     this.indicesPrivileges.addAll(Arrays.asList(privileges)). }
false;public;6;11;;public void addIndex(String[] indices, String[] privileges, String[] grantedFields, String[] deniedFields, @Nullable BytesReference query, boolean allowRestrictedIndices) {     this.indicesPrivileges.add(RoleDescriptor.IndicesPrivileges.builder().indices(indices).privileges(privileges).grantedFields(grantedFields).deniedFields(deniedFields).query(query).allowRestrictedIndices(allowRestrictedIndices).build()). }
false;;1;3;;void addApplicationPrivileges(RoleDescriptor.ApplicationResourcePrivileges... privileges) {     this.applicationPrivileges.addAll(Arrays.asList(privileges)). }
false;public;1;3;;public void runAs(String... usernames) {     this.runAs = usernames. }
false;public;1;5;;@Override public PutRoleRequest setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
true;public;0;4;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ @Override public WriteRequest.RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;3;;public void metadata(Map<String, Object> metadata) {     this.metadata = metadata. }
false;public;0;3;;public String name() {     return name. }
false;public;0;3;;public String[] cluster() {     return clusterPrivileges. }
false;public;0;3;;public RoleDescriptor.IndicesPrivileges[] indices() {     return indicesPrivileges.toArray(new RoleDescriptor.IndicesPrivileges[indicesPrivileges.size()]). }
false;public;0;3;;public List<RoleDescriptor.ApplicationResourcePrivileges> applicationPrivileges() {     return Collections.unmodifiableList(applicationPrivileges). }
false;public;0;3;;public ConditionalClusterPrivilege[] conditionalClusterPrivileges() {     return conditionalClusterPrivileges. }
false;public;0;3;;public String[] runAs() {     return runAs. }
false;public;0;3;;public Map<String, Object> metadata() {     return metadata. }
false;public;1;18;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     name = in.readString().     clusterPrivileges = in.readStringArray().     int indicesSize = in.readVInt().     indicesPrivileges = new ArrayList<>(indicesSize).     for (int i = 0. i < indicesSize. i++) {         indicesPrivileges.add(new RoleDescriptor.IndicesPrivileges(in)).     }     if (in.getVersion().onOrAfter(Version.V_6_4_0)) {         applicationPrivileges = in.readList(RoleDescriptor.ApplicationResourcePrivileges::new).         conditionalClusterPrivileges = ConditionalClusterPrivileges.readArray(in).     }     runAs = in.readStringArray().     refreshPolicy = RefreshPolicy.readFrom(in).     metadata = in.readMap(). }
false;public;1;17;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(name).     out.writeStringArray(clusterPrivileges).     out.writeVInt(indicesPrivileges.size()).     for (RoleDescriptor.IndicesPrivileges index : indicesPrivileges) {         index.writeTo(out).     }     if (out.getVersion().onOrAfter(Version.V_6_4_0)) {         out.writeList(applicationPrivileges).         ConditionalClusterPrivileges.writeArray(out, this.conditionalClusterPrivileges).     }     out.writeStringArray(runAs).     refreshPolicy.writeTo(out).     out.writeMap(metadata). }
false;public;0;10;;public RoleDescriptor roleDescriptor() {     return new RoleDescriptor(name, clusterPrivileges, indicesPrivileges.toArray(new RoleDescriptor.IndicesPrivileges[indicesPrivileges.size()]), applicationPrivileges.toArray(new RoleDescriptor.ApplicationResourcePrivileges[applicationPrivileges.size()]), conditionalClusterPrivileges, runAs, metadata, Collections.emptyMap()). }
