commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;String getShrunkIndexPrefix() {     return shrunkIndexPrefix. }
false;public;2;16;;@Override public Result isConditionMet(Index index, ClusterState clusterState) {     // We only want to make progress if all shards of the shrunk index are     // active     boolean indexExists = clusterState.metaData().index(shrunkIndexPrefix + index.getName()) != null.     if (indexExists == false) {         return new Result(false, new Info(false, -1, false)).     }     boolean allShardsActive = ActiveShardCount.ALL.enoughShardsActive(clusterState, shrunkIndexPrefix + index.getName()).     int numShrunkIndexShards = clusterState.metaData().index(shrunkIndexPrefix + index.getName()).getNumberOfShards().     if (allShardsActive) {         return new Result(true, null).     } else {         return new Result(false, new Info(true, numShrunkIndexShards, allShardsActive)).     } }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(super.hashCode(), shrunkIndexPrefix). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     ShrunkShardsAllocatedStep other = (ShrunkShardsAllocatedStep) obj.     return super.equals(obj) && Objects.equals(shrunkIndexPrefix, other.shrunkIndexPrefix). }
false;public;0;3;;public int getActualShards() {     return actualShards. }
false;public;0;3;;public boolean shrunkIndexExists() {     return shrunkIndexExists. }
false;public;0;3;;public boolean allShardsActive() {     return allShardsActive. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(MESSAGE.getPreferredName(), message).     builder.field(SHRUNK_INDEX_EXISTS.getPreferredName(), shrunkIndexExists).     builder.field(ACTUAL_SHARDS.getPreferredName(), actualShards).     builder.field(ALL_SHARDS_ACTIVE.getPreferredName(), allShardsActive).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(shrunkIndexExists, actualShards, allShardsActive). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Info other = (Info) obj.     return Objects.equals(shrunkIndexExists, other.shrunkIndexExists) && Objects.equals(actualShards, other.actualShards) && Objects.equals(allShardsActive, other.allShardsActive). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
