commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getValue() {     return value. }
false;public,static;1;10;;public static Type fromString(String tokenType) {     if (tokenType != null) {         for (Type type : values()) {             if (type.getValue().equals(tokenType)) {                 return type.             }         }     }     return null. }
false;public;0;21;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (Strings.hasText(realmName) || Strings.hasText(userName)) {         if (Strings.hasText(tokenString)) {             validationException = addValidationError("token string must not be provided when realm name or username is specified", null).         }         if (tokenType != null) {             validationException = addValidationError("token type must not be provided when realm name or username is specified", validationException).         }     } else if (Strings.isNullOrEmpty(tokenString)) {         validationException = addValidationError("token string must be provided when not specifying a realm name or a username", null).     } else if (tokenType == null) {         validationException = addValidationError("token type must be provided when a token string is specified", null).     }     return validationException. }
false;public;0;3;;public String getTokenString() {     return tokenString. }
false;;1;3;;void setTokenString(String token) {     this.tokenString = token. }
false;public;0;3;;public Type getTokenType() {     return tokenType. }
false;;1;3;;void setTokenType(Type tokenType) {     this.tokenType = tokenType. }
false;public;0;3;;public String getRealmName() {     return realmName. }
false;public;1;3;;public void setRealmName(String realmName) {     this.realmName = realmName. }
false;public;0;3;;public String getUserName() {     return userName. }
false;public;1;3;;public void setUserName(String userName) {     this.userName = userName. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(tokenString).     out.writeOptionalVInt(tokenType == null ? null : tokenType.ordinal()).     out.writeOptionalString(realmName).     out.writeOptionalString(userName). }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     tokenString = in.readOptionalString().     Integer type = in.readOptionalVInt().     tokenType = type == null ? null : Type.values()[type].     realmName = in.readOptionalString().     userName = in.readOptionalString(). }
