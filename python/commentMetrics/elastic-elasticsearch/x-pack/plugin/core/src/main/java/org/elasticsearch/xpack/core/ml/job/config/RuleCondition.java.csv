commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;20;;private static ConstructingObjectParser<RuleCondition, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<RuleCondition, Void> parser = new ConstructingObjectParser<>(RULE_CONDITION_FIELD.getPreferredName(), ignoreUnknownFields, a -> new RuleCondition((AppliesTo) a[0], (Operator) a[1], (double) a[2])).     parser.declareField(ConstructingObjectParser.constructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return AppliesTo.fromString(p.text()).         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, APPLIES_TO_FIELD, ValueType.STRING).     parser.declareField(ConstructingObjectParser.constructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return Operator.fromString(p.text()).         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, Operator.OPERATOR_FIELD, ValueType.STRING).     parser.declareDouble(ConstructingObjectParser.constructorArg(), VALUE_FIELD).     return parser. }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     appliesTo.writeTo(out).     operator.writeTo(out).     out.writeDouble(value). }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(APPLIES_TO_FIELD.getPreferredName(), appliesTo).     builder.field(Operator.OPERATOR_FIELD.getPreferredName(), operator).     builder.field(VALUE_FIELD.getPreferredName(), value).     builder.endObject().     return builder. }
false;public;0;3;;public AppliesTo getAppliesTo() {     return appliesTo. }
false;public;0;3;;public Operator getOperator() {     return operator. }
false;public;0;3;;public double getValue() {     return value. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj instanceof RuleCondition == false) {         return false.     }     RuleCondition other = (RuleCondition) obj.     return appliesTo == other.appliesTo && operator == other.operator && value == other.value. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(appliesTo, operator, value). }
false;public,static;2;3;;public static RuleCondition createTime(Operator operator, long epochSeconds) {     return new RuleCondition(AppliesTo.TIME, operator, epochSeconds). }
false;public,static;1;3;;public static AppliesTo fromString(String value) {     return valueOf(value.toUpperCase(Locale.ROOT)). }
false;public,static;1;3;;public static AppliesTo readFromStream(StreamInput in) throws IOException {     return in.readEnum(AppliesTo.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
