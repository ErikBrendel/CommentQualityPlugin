# id;timestamp;commentText;codeText;commentWords;codeWords
MetricConfig -> public List<Map<String, Object>> toAggCap();1524684173;@return A map representing this config object as a RollupCaps aggregation object;public List<Map<String, Object>> toAggCap() {_        return metrics.stream().map(metric -> Collections.singletonMap("agg", (Object)metric)).collect(Collectors.toList())__    };return,a,map,representing,this,config,object,as,a,rollup,caps,aggregation,object;public,list,map,string,object,to,agg,cap,return,metrics,stream,map,metric,collections,singleton,map,agg,object,metric,collect,collectors,to,list
MetricConfig -> public List<Map<String, Object>> toAggCap();1528762805;@return A map representing this config object as a RollupCaps aggregation object;public List<Map<String, Object>> toAggCap() {_        return metrics.stream().map(metric -> Collections.singletonMap("agg", (Object)metric)).collect(Collectors.toList())__    };return,a,map,representing,this,config,object,as,a,rollup,caps,aggregation,object;public,list,map,string,object,to,agg,cap,return,metrics,stream,map,metric,collections,singleton,map,agg,object,metric,collect,collectors,to,list
MetricConfig -> public List<Map<String, Object>> toAggCap();1528904315;@return A map representing this config object as a RollupCaps aggregation object;public List<Map<String, Object>> toAggCap() {_        return metrics.stream().map(metric -> Collections.singletonMap("agg", (Object)metric)).collect(Collectors.toList())__    };return,a,map,representing,this,config,object,as,a,rollup,caps,aggregation,object;public,list,map,string,object,to,agg,cap,return,metrics,stream,map,metric,collections,singleton,map,agg,object,metric,collect,collectors,to,list
MetricConfig -> public List<Map<String, Object>> toAggCap();1531729807;@return A map representing this config object as a RollupCaps aggregation object;public List<Map<String, Object>> toAggCap() {_        return metrics.stream().map(metric -> Collections.singletonMap("agg", (Object)metric)).collect(Collectors.toList())__    };return,a,map,representing,this,config,object,as,a,rollup,caps,aggregation,object;public,list,map,string,object,to,agg,cap,return,metrics,stream,map,metric,collections,singleton,map,agg,object,metric,collect,collectors,to,list
MetricConfig -> public List<Map<String, Object>> toAggCap();1533295538;@return A map representing this config object as a RollupCaps aggregation object;public List<Map<String, Object>> toAggCap() {_        return metrics.stream().map(metric -> Collections.singletonMap("agg", (Object)metric)).collect(Collectors.toList())__    };return,a,map,representing,this,config,object,as,a,rollup,caps,aggregation,object;public,list,map,string,object,to,agg,cap,return,metrics,stream,map,metric,collections,singleton,map,agg,object,metric,collect,collectors,to,list
MetricConfig -> public List<Map<String, Object>> toAggCap();1533738061;@return A map representing this config object as a RollupCaps aggregation object;public List<Map<String, Object>> toAggCap() {_        return metrics.stream().map(metric -> Collections.singletonMap("agg", (Object)metric)).collect(Collectors.toList())__    };return,a,map,representing,this,config,object,as,a,rollup,caps,aggregation,object;public,list,map,string,object,to,agg,cap,return,metrics,stream,map,metric,collections,singleton,map,agg,object,metric,collect,collectors,to,list
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1524684173;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1528762805;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1528904315;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1531729807;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1533295538;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1533738061;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders();1535139672;This returns a set of aggregation builders which represent the configured_set of metrics.  Used by the rollup indexer to iterate over historical data;public List<ValuesSourceAggregationBuilder.LeafOnly> toBuilders() {_        if (metrics.size() == 0) {_            return Collections.emptyList()__        }__        List<ValuesSourceAggregationBuilder.LeafOnly> aggs = new ArrayList<>(metrics.size())__        for (String metric : metrics) {_            ValuesSourceAggregationBuilder.LeafOnly newBuilder__            if (metric.equals(MIN.getPreferredName())) {_                newBuilder = new MinAggregationBuilder(RollupField.formatFieldName(field, MinAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(MAX.getPreferredName())) {_                newBuilder = new MaxAggregationBuilder(RollupField.formatFieldName(field, MaxAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(AVG.getPreferredName())) {_                _                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.VALUE))__                ValuesSourceAggregationBuilder.LeafOnly countBuilder_                        = new ValueCountAggregationBuilder(_                                RollupField.formatFieldName(field, AvgAggregationBuilder.NAME, RollupField.COUNT_FIELD), ValueType.NUMERIC)__                countBuilder.field(field)__                aggs.add(countBuilder)__            } else if (metric.equals(SUM.getPreferredName())) {_                newBuilder = new SumAggregationBuilder(RollupField.formatFieldName(field, SumAggregationBuilder.NAME, RollupField.VALUE))__            } else if (metric.equals(VALUE_COUNT.getPreferredName())) {_                _                _                newBuilder = new ValueCountAggregationBuilder(_                        RollupField.formatFieldName(field, ValueCountAggregationBuilder.NAME, RollupField.VALUE), ValueType.NUMERIC)__            } else {_                throw new IllegalArgumentException("Unsupported metric type [" + metric + "]")__            }_            newBuilder.field(field)__            aggs.add(newBuilder)__        }_        return aggs__    };this,returns,a,set,of,aggregation,builders,which,represent,the,configured,set,of,metrics,used,by,the,rollup,indexer,to,iterate,over,historical,data;public,list,values,source,aggregation,builder,leaf,only,to,builders,if,metrics,size,0,return,collections,empty,list,list,values,source,aggregation,builder,leaf,only,aggs,new,array,list,metrics,size,for,string,metric,metrics,values,source,aggregation,builder,leaf,only,new,builder,if,metric,equals,min,get,preferred,name,new,builder,new,min,aggregation,builder,rollup,field,format,field,name,field,min,aggregation,builder,name,rollup,field,value,else,if,metric,equals,max,get,preferred,name,new,builder,new,max,aggregation,builder,rollup,field,format,field,name,field,max,aggregation,builder,name,rollup,field,value,else,if,metric,equals,avg,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,values,source,aggregation,builder,leaf,only,count,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,avg,aggregation,builder,name,rollup,field,value,type,numeric,count,builder,field,field,aggs,add,count,builder,else,if,metric,equals,sum,get,preferred,name,new,builder,new,sum,aggregation,builder,rollup,field,format,field,name,field,sum,aggregation,builder,name,rollup,field,value,else,if,metric,equals,get,preferred,name,new,builder,new,value,count,aggregation,builder,rollup,field,format,field,name,field,value,count,aggregation,builder,name,rollup,field,value,value,type,numeric,else,throw,new,illegal,argument,exception,unsupported,metric,type,metric,new,builder,field,field,aggs,add,new,builder,return,aggs
MetricConfig -> public String getField();1533295538;@return the name of the field used in the metric configuration. Never {@code null}.;public String getField() {_        return field__    };return,the,name,of,the,field,used,in,the,metric,configuration,never,code,null;public,string,get,field,return,field
MetricConfig -> public String getField();1533738061;@return the name of the field used in the metric configuration. Never {@code null}.;public String getField() {_        return field__    };return,the,name,of,the,field,used,in,the,metric,configuration,never,code,null;public,string,get,field,return,field
MetricConfig -> public String getField();1535139672;@return the name of the field used in the metric configuration. Never {@code null}.;public String getField() {_        return field__    };return,the,name,of,the,field,used,in,the,metric,configuration,never,code,null;public,string,get,field,return,field
MetricConfig -> public String getField();1535383145;@return the name of the field used in the metric configuration. Never {@code null}.;public String getField() {_        return field__    };return,the,name,of,the,field,used,in,the,metric,configuration,never,code,null;public,string,get,field,return,field
MetricConfig -> public String getField();1539723533;@return the name of the field used in the metric configuration. Never {@code null}.;public String getField() {_        return field__    };return,the,name,of,the,field,used,in,the,metric,configuration,never,code,null;public,string,get,field,return,field
MetricConfig -> public String getField();1548265937;@return the name of the field used in the metric configuration. Never {@code null}.;public String getField() {_        return field__    };return,the,name,of,the,field,used,in,the,metric,configuration,never,code,null;public,string,get,field,return,field
MetricConfig -> public List<String> getMetrics();1533295538;@return the names of the metrics used in the metric configuration. Never {@code null}.;public List<String> getMetrics() {_        return metrics__    };return,the,names,of,the,metrics,used,in,the,metric,configuration,never,code,null;public,list,string,get,metrics,return,metrics
MetricConfig -> public List<String> getMetrics();1533738061;@return the names of the metrics used in the metric configuration. Never {@code null}.;public List<String> getMetrics() {_        return metrics__    };return,the,names,of,the,metrics,used,in,the,metric,configuration,never,code,null;public,list,string,get,metrics,return,metrics
MetricConfig -> public List<String> getMetrics();1535139672;@return the names of the metrics used in the metric configuration. Never {@code null}.;public List<String> getMetrics() {_        return metrics__    };return,the,names,of,the,metrics,used,in,the,metric,configuration,never,code,null;public,list,string,get,metrics,return,metrics
MetricConfig -> public List<String> getMetrics();1535383145;@return the names of the metrics used in the metric configuration. Never {@code null}.;public List<String> getMetrics() {_        return metrics__    };return,the,names,of,the,metrics,used,in,the,metric,configuration,never,code,null;public,list,string,get,metrics,return,metrics
MetricConfig -> public List<String> getMetrics();1539723533;@return the names of the metrics used in the metric configuration. Never {@code null}.;public List<String> getMetrics() {_        return metrics__    };return,the,names,of,the,metrics,used,in,the,metric,configuration,never,code,null;public,list,string,get,metrics,return,metrics
MetricConfig -> public List<String> getMetrics();1548265937;@return the names of the metrics used in the metric configuration. Never {@code null}.;public List<String> getMetrics() {_        return metrics__    };return,the,names,of,the,metrics,used,in,the,metric,configuration,never,code,null;public,list,string,get,metrics,return,metrics
