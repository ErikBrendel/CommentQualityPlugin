commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public,static;1;3;;public static Request fromXContent(XContentParser parser) {     return parseRequest(null, parser). }
false;public,static;2;7;;public static Request parseRequest(String datafeedId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (datafeedId != null) {         request.datafeedId = datafeedId.     }     return request. }
false;public;0;3;;public String getDatafeedId() {     return datafeedId. }
false;public;0;3;;public String[] getResolvedStartedDatafeedIds() {     return resolvedStartedDatafeedIds. }
false;public;1;3;;public void setResolvedStartedDatafeedIds(String[] resolvedStartedDatafeedIds) {     this.resolvedStartedDatafeedIds = resolvedStartedDatafeedIds. }
false;public;0;3;;public TimeValue getStopTimeout() {     return stopTimeout. }
false;public;1;3;;public void setStopTimeout(TimeValue stopTimeout) {     this.stopTimeout = ExceptionsHelper.requireNonNull(stopTimeout, TIMEOUT.getPreferredName()). }
false;public;0;3;;public boolean isForce() {     return force. }
false;public;1;3;;public void setForce(boolean force) {     this.force = force. }
false;public;0;3;;public boolean allowNoDatafeeds() {     return allowNoDatafeeds. }
false;public;1;3;;public void setAllowNoDatafeeds(boolean allowNoDatafeeds) {     this.allowNoDatafeeds = allowNoDatafeeds. }
false;public;1;10;;@Override public boolean match(Task task) {     for (String id : resolvedStartedDatafeedIds) {         String expectedDescription = MlTasks.datafeedTaskId(id).         if (task instanceof StartDatafeedAction.DatafeedTaskMatcher && expectedDescription.equals(task.getDescription())) {             return true.         }     }     return false. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(datafeedId).     out.writeStringArray(resolvedStartedDatafeedIds).     out.writeTimeValue(stopTimeout).     out.writeBoolean(force).     if (out.getVersion().onOrAfter(Version.V_6_1_0)) {         out.writeBoolean(allowNoDatafeeds).     } }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedId, stopTimeout, force, allowNoDatafeeds). }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), datafeedId).     builder.field(TIMEOUT.getPreferredName(), stopTimeout.getStringRep()).     builder.field(FORCE.getPreferredName(), force).     builder.field(ALLOW_NO_DATAFEEDS.getPreferredName(), allowNoDatafeeds).     builder.endObject().     return builder. }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(stopTimeout, other.stopTimeout) && Objects.equals(force, other.force) && Objects.equals(allowNoDatafeeds, other.allowNoDatafeeds). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(stopped). }
false;public;0;3;;public boolean isStopped() {     return stopped. }
