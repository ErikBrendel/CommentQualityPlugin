commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public RealmIdentifier identifier() {     return identifier. }
false;public;0;3;;public String name() {     return identifier.name. }
false;public;0;3;;public boolean enabled() {     return enabled. }
false;public;0;3;;public int order() {     return order. }
false;public;0;3;;public String type() {     return identifier.type. }
true;public;0;3;/**  * @return The settings for the current node.  * This will include the settings for this realm (as well as other realms, and other non-security settings).  * @see #getConcreteSetting(Setting.AffixSetting)  */ ;/**  * @return The settings for the current node.  * This will include the settings for this realm (as well as other realms, and other non-security settings).  * @see #getConcreteSetting(Setting.AffixSetting)  */ public Settings settings() {     return settings. }
false;public;0;3;;public Environment env() {     return env. }
false;public;0;3;;public ThreadContext threadContext() {     return threadContext. }
true;public;1;3;/**  * Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting}  * that is produced by applying this realm's name as the namespace.  * Realm configuration is defined using affix settings in the form {@code xpack.security.authc.realms.type.(name).key},  * where  * <ul>  *     <li>{@code type} is a fixed string (known at compile time) that identifies the type of the realm being configured.</li>  *     <li>{@code (name)} is a variable string (known only at runtime) that uniquely names the realm.</li>  *     <li>{@code key} is a fixed string (known at compile time) that identifies a specific setting within the realm.</li>  * </ul>  * In order to extract an individual value from the runtime {@link Settings} object, it is necessary to convert an  * {@link Setting.AffixSetting} object into a concrete {@link Setting} object that has a fixed key, for a specific name.  */ ;/**  * Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting}  * that is produced by applying this realm's name as the namespace.  * Realm configuration is defined using affix settings in the form {@code xpack.security.authc.realms.type.(name).key},  * where  * <ul>  *     <li>{@code type} is a fixed string (known at compile time) that identifies the type of the realm being configured.</li>  *     <li>{@code (name)} is a variable string (known only at runtime) that uniquely names the realm.</li>  *     <li>{@code key} is a fixed string (known at compile time) that identifies a specific setting within the realm.</li>  * </ul>  * In order to extract an individual value from the runtime {@link Settings} object, it is necessary to convert an  * {@link Setting.AffixSetting} object into a concrete {@link Setting} object that has a fixed key, for a specific name.  */ public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting) {     return setting.getConcreteSettingForNamespace(name()). }
true;public;1;3;/**  * Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting} that is produced by applying this realm's  * type as a parameter to the provided function, and the realm's name (as the namespace) to the resulting {@link Setting.AffixSetting}.  * Because some settings (e.g. {@link RealmSettings#ORDER_SETTING "order"}) are defined for multiple "types", but the Settings  * infrastructure treats the type as a fixed part of the setting key, it is common to define such multi-realm settings using a  * {@link Function} of this form.  * @see #getConcreteSetting(Setting.AffixSetting)  */ ;/**  * Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting} that is produced by applying this realm's  * type as a parameter to the provided function, and the realm's name (as the namespace) to the resulting {@link Setting.AffixSetting}.  * Because some settings (e.g. {@link RealmSettings#ORDER_SETTING "order"}) are defined for multiple "types", but the Settings  * infrastructure treats the type as a fixed part of the setting key, it is common to define such multi-realm settings using a  * {@link Function} of this form.  * @see #getConcreteSetting(Setting.AffixSetting)  */ public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {     return getConcreteSetting(settingFactory.apply(type())). }
true;public;1;3;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * The {@link Setting.AffixSetting} is made <em>concrete</em> through {@link #getConcreteSetting(Setting.AffixSetting)}, which is then  * used to {@link Setting#get(Settings) retrieve} the setting value.  */ ;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * The {@link Setting.AffixSetting} is made <em>concrete</em> through {@link #getConcreteSetting(Setting.AffixSetting)}, which is then  * used to {@link Setting#get(Settings) retrieve} the setting value.  */ public <T> T getSetting(Setting.AffixSetting<T> setting) {     return getConcreteSetting(setting).get(settings). }
true;public;1;3;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to  * {@link Setting#get(Settings) retrieve} the setting value.  */ ;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to  * {@link Setting#get(Settings) retrieve} the setting value.  */ public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {     return getSetting(settingFactory.apply(type())). }
true;public;2;3;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Function}/{@link Setting.AffixSetting}.  * If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,  * otherwise the {@code onElse} {@link Supplier} is executed and returned.  */ ;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Function}/{@link Setting.AffixSetting}.  * If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,  * otherwise the {@code onElse} {@link Supplier} is executed and returned.  */ public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse) {     return getSetting(settingFactory.apply(type()), orElse). }
true;public;2;8;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Setting.AffixSetting}.  * If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,  * otherwise the {@code onElse} {@link Supplier} is executed and returned.  */ ;/**  * Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Setting.AffixSetting}.  * If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,  * otherwise the {@code onElse} {@link Supplier} is executed and returned.  */ public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse) {     final Setting<T> concrete = setting.getConcreteSettingForNamespace(name()).     if (concrete.exists(settings)) {         return concrete.get(settings).     } else {         return orElse.get().     } }
true;public;1;3;/**  * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to  * {@link Setting#exists(Settings) check} for a value.  */ ;/**  * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to  * {@link Setting#exists(Settings) check} for a value.  */ public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {     return getConcreteSetting(settingFactory).exists(settings). }
true;public;1;3;/**  * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to {@link Setting#exists(Settings) check} for a value.  */ ;/**  * Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}.  * {@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided  * {@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to {@link Setting#exists(Settings) check} for a value.  */ public <T> boolean hasSetting(Setting.AffixSetting<T> setting) {     return getConcreteSetting(setting).exists(settings). }
false;public;0;3;;public String getType() {     return type. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null) {         return false.     }     if (getClass() != o.getClass()) {         return false.     }     final RealmIdentifier other = (RealmIdentifier) o.     return Objects.equals(this.type, other.type) && Objects.equals(this.name, other.name). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(type, name). }
false;public;0;4;;@Override public String toString() {     return type + '/' + name. }
