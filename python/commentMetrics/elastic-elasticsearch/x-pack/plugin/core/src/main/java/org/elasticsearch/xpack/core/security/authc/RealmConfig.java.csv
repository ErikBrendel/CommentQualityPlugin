# id;timestamp;commentText;codeText;commentWords;codeWords
RealmConfig -> public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541476610;Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting} that is produced by applying this realm's_type as a parameter to the provided function, and the realm's name (as the namespace) to the resulting {@link Setting.AffixSetting}._Because some settings (e.g. {@link RealmSettings#ORDER_SETTING "order"}) are defined for multiple "types", but the Settings_infrastructure treats the type as a fixed part of the setting key, it is common to define such multi-realm settings using a_{@link Function} of this form._@see #getConcreteSetting(Setting.AffixSetting);public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getConcreteSetting(settingFactory.apply(type()))__    };return,the,link,setting,affix,setting,get,concrete,setting,for,namespace,concrete,setting,that,is,produced,by,applying,this,realm,s,type,as,a,parameter,to,the,provided,function,and,the,realm,s,name,as,the,namespace,to,the,resulting,link,setting,affix,setting,because,some,settings,e,g,link,realm,settings,order,are,defined,for,multiple,types,but,the,settings,infrastructure,treats,the,type,as,a,fixed,part,of,the,setting,key,it,is,common,to,define,such,multi,realm,settings,using,a,link,function,of,this,form,see,get,concrete,setting,setting,affix,setting;public,t,setting,t,get,concrete,setting,function,string,setting,affix,setting,t,setting,factory,return,get,concrete,setting,setting,factory,apply,type
RealmConfig -> public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541575290;Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting} that is produced by applying this realm's_type as a parameter to the provided function, and the realm's name (as the namespace) to the resulting {@link Setting.AffixSetting}._Because some settings (e.g. {@link RealmSettings#ORDER_SETTING "order"}) are defined for multiple "types", but the Settings_infrastructure treats the type as a fixed part of the setting key, it is common to define such multi-realm settings using a_{@link Function} of this form._@see #getConcreteSetting(Setting.AffixSetting);public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getConcreteSetting(settingFactory.apply(type()))__    };return,the,link,setting,affix,setting,get,concrete,setting,for,namespace,concrete,setting,that,is,produced,by,applying,this,realm,s,type,as,a,parameter,to,the,provided,function,and,the,realm,s,name,as,the,namespace,to,the,resulting,link,setting,affix,setting,because,some,settings,e,g,link,realm,settings,order,are,defined,for,multiple,types,but,the,settings,infrastructure,treats,the,type,as,a,fixed,part,of,the,setting,key,it,is,common,to,define,such,multi,realm,settings,using,a,link,function,of,this,form,see,get,concrete,setting,setting,affix,setting;public,t,setting,t,get,concrete,setting,function,string,setting,affix,setting,t,setting,factory,return,get,concrete,setting,setting,factory,apply,type
RealmConfig -> public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541642262;Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting} that is produced by applying this realm's_type as a parameter to the provided function, and the realm's name (as the namespace) to the resulting {@link Setting.AffixSetting}._Because some settings (e.g. {@link RealmSettings#ORDER_SETTING "order"}) are defined for multiple "types", but the Settings_infrastructure treats the type as a fixed part of the setting key, it is common to define such multi-realm settings using a_{@link Function} of this form._@see #getConcreteSetting(Setting.AffixSetting);public <T> Setting<T> getConcreteSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getConcreteSetting(settingFactory.apply(type()))__    };return,the,link,setting,affix,setting,get,concrete,setting,for,namespace,concrete,setting,that,is,produced,by,applying,this,realm,s,type,as,a,parameter,to,the,provided,function,and,the,realm,s,name,as,the,namespace,to,the,resulting,link,setting,affix,setting,because,some,settings,e,g,link,realm,settings,order,are,defined,for,multiple,types,but,the,settings,infrastructure,treats,the,type,as,a,fixed,part,of,the,setting,key,it,is,common,to,define,such,multi,realm,settings,using,a,link,function,of,this,form,see,get,concrete,setting,setting,affix,setting;public,t,setting,t,get,concrete,setting,function,string,setting,affix,setting,t,setting,factory,return,get,concrete,setting,setting,factory,apply,type
RealmConfig -> public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541476610;Determines whether the provided {@code setting} has an explicit value in the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to_{@link Setting#exists(Settings) check} for a value.;public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getConcreteSetting(settingFactory).exists(globalSettings)__    };determines,whether,the,provided,code,setting,has,an,explicit,value,in,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,exists,settings,check,for,a,value;public,t,boolean,has,setting,function,string,setting,affix,setting,t,setting,factory,return,get,concrete,setting,setting,factory,exists,global,settings
RealmConfig -> public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541575290;Determines whether the provided {@code setting} has an explicit value in the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to_{@link Setting#exists(Settings) check} for a value.;public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getConcreteSetting(settingFactory).exists(globalSettings)__    };determines,whether,the,provided,code,setting,has,an,explicit,value,in,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,exists,settings,check,for,a,value;public,t,boolean,has,setting,function,string,setting,affix,setting,t,setting,factory,return,get,concrete,setting,setting,factory,exists,global,settings
RealmConfig -> public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541642262;Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to_{@link Setting#exists(Settings) check} for a value.;public <T> boolean hasSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getConcreteSetting(settingFactory).exists(settings)__    };determines,whether,the,provided,code,setting,has,an,explicit,value,in,the,node,s,link,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,exists,settings,check,for,a,value;public,t,boolean,has,setting,function,string,setting,affix,setting,t,setting,factory,return,get,concrete,setting,setting,factory,exists,settings
RealmConfig -> public <T> T getSetting(Setting.AffixSetting<T> setting);1541476610;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._The {@link Setting.AffixSetting} is made <em>concrete</em> through {@link #getConcreteSetting(Setting.AffixSetting)}, which is then_used to {@link Setting#get(Settings) retrieve} the setting value.;public <T> T getSetting(Setting.AffixSetting<T> setting) {_        return getConcreteSetting(setting).get(globalSettings)__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,the,link,setting,affix,setting,is,made,em,concrete,em,through,link,get,concrete,setting,setting,affix,setting,which,is,then,used,to,link,setting,get,settings,retrieve,the,setting,value;public,t,t,get,setting,setting,affix,setting,t,setting,return,get,concrete,setting,setting,get,global,settings
RealmConfig -> public <T> T getSetting(Setting.AffixSetting<T> setting);1541575290;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._The {@link Setting.AffixSetting} is made <em>concrete</em> through {@link #getConcreteSetting(Setting.AffixSetting)}, which is then_used to {@link Setting#get(Settings) retrieve} the setting value.;public <T> T getSetting(Setting.AffixSetting<T> setting) {_        return getConcreteSetting(setting).get(globalSettings)__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,the,link,setting,affix,setting,is,made,em,concrete,em,through,link,get,concrete,setting,setting,affix,setting,which,is,then,used,to,link,setting,get,settings,retrieve,the,setting,value;public,t,t,get,setting,setting,affix,setting,t,setting,return,get,concrete,setting,setting,get,global,settings
RealmConfig -> public <T> T getSetting(Setting.AffixSetting<T> setting);1541642262;Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}._The {@link Setting.AffixSetting} is made <em>concrete</em> through {@link #getConcreteSetting(Setting.AffixSetting)}, which is then_used to {@link Setting#get(Settings) retrieve} the setting value.;public <T> T getSetting(Setting.AffixSetting<T> setting) {_        return getConcreteSetting(setting).get(settings)__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,settings,global,settings,the,link,setting,affix,setting,is,made,em,concrete,em,through,link,get,concrete,setting,setting,affix,setting,which,is,then,used,to,link,setting,get,settings,retrieve,the,setting,value;public,t,t,get,setting,setting,affix,setting,t,setting,return,get,concrete,setting,setting,get,settings
RealmConfig -> public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse);1541476610;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided_{@link Setting.AffixSetting}._If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,_otherwise the {@code onElse} {@link Supplier} is executed and returned.;public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse) {_        final Setting<T> concrete = setting.getConcreteSettingForNamespace(name())__        if (concrete.exists(globalSettings)) {_            return concrete.get(globalSettings)__        } else {_            return orElse.get()__        }_    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,setting,affix,setting,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,setting,affix,setting,if,this,em,concrete,setting,em,link,setting,exists,settings,exists,in,the,global,settings,then,its,value,is,returned,otherwise,the,code,on,else,link,supplier,is,executed,and,returned;public,t,t,get,setting,setting,affix,setting,t,setting,supplier,t,or,else,final,setting,t,concrete,setting,get,concrete,setting,for,namespace,name,if,concrete,exists,global,settings,return,concrete,get,global,settings,else,return,or,else,get
RealmConfig -> public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse);1541575290;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided_{@link Setting.AffixSetting}._If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,_otherwise the {@code onElse} {@link Supplier} is executed and returned.;public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse) {_        final Setting<T> concrete = setting.getConcreteSettingForNamespace(name())__        if (concrete.exists(globalSettings)) {_            return concrete.get(globalSettings)__        } else {_            return orElse.get()__        }_    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,setting,affix,setting,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,setting,affix,setting,if,this,em,concrete,setting,em,link,setting,exists,settings,exists,in,the,global,settings,then,its,value,is,returned,otherwise,the,code,on,else,link,supplier,is,executed,and,returned;public,t,t,get,setting,setting,affix,setting,t,setting,supplier,t,or,else,final,setting,t,concrete,setting,get,concrete,setting,for,namespace,name,if,concrete,exists,global,settings,return,concrete,get,global,settings,else,return,or,else,get
RealmConfig -> public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse);1541642262;Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}._{@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided_{@link Setting.AffixSetting}._If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,_otherwise the {@code onElse} {@link Supplier} is executed and returned.;public <T> T getSetting(Setting.AffixSetting<T> setting, Supplier<T> orElse) {_        final Setting<T> concrete = setting.getConcreteSettingForNamespace(name())__        if (concrete.exists(settings)) {_            return concrete.get(settings)__        } else {_            return orElse.get()__        }_    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,settings,global,settings,link,get,concrete,setting,setting,affix,setting,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,setting,affix,setting,if,this,em,concrete,setting,em,link,setting,exists,settings,exists,in,the,global,settings,then,its,value,is,returned,otherwise,the,code,on,else,link,supplier,is,executed,and,returned;public,t,t,get,setting,setting,affix,setting,t,setting,supplier,t,or,else,final,setting,t,concrete,setting,get,concrete,setting,for,namespace,name,if,concrete,exists,settings,return,concrete,get,settings,else,return,or,else,get
RealmConfig -> public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541476610;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to_{@link Setting#get(Settings) retrieve} the setting value.;public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getSetting(settingFactory.apply(type()))__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,get,settings,retrieve,the,setting,value;public,t,t,get,setting,function,string,setting,affix,setting,t,setting,factory,return,get,setting,setting,factory,apply,type
RealmConfig -> public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541575290;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to_{@link Setting#get(Settings) retrieve} the setting value.;public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getSetting(settingFactory.apply(type()))__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,get,settings,retrieve,the,setting,value;public,t,t,get,setting,function,string,setting,affix,setting,t,setting,factory,return,get,setting,setting,factory,apply,type
RealmConfig -> public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory);1541642262;Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to_{@link Setting#get(Settings) retrieve} the setting value.;public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory) {_        return getSetting(settingFactory.apply(type()))__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,get,settings,retrieve,the,setting,value;public,t,t,get,setting,function,string,setting,affix,setting,t,setting,factory,return,get,setting,setting,factory,apply,type
RealmConfig -> public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse);1541476610;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}._If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,_otherwise the {@code onElse} {@link Supplier} is executed and returned.;public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse) {_        return getSetting(settingFactory.apply(type()), orElse)__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,if,this,em,concrete,setting,em,link,setting,exists,settings,exists,in,the,global,settings,then,its,value,is,returned,otherwise,the,code,on,else,link,supplier,is,executed,and,returned;public,t,t,get,setting,function,string,setting,affix,setting,t,setting,factory,supplier,t,or,else,return,get,setting,setting,factory,apply,type,or,else
RealmConfig -> public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse);1541575290;Obtain the value of the provided {@code setting} from the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}._If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,_otherwise the {@code onElse} {@link Supplier} is executed and returned.;public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse) {_        return getSetting(settingFactory.apply(type()), orElse)__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,if,this,em,concrete,setting,em,link,setting,exists,settings,exists,in,the,global,settings,then,its,value,is,returned,otherwise,the,code,on,else,link,supplier,is,executed,and,returned;public,t,t,get,setting,function,string,setting,affix,setting,t,setting,factory,supplier,t,or,else,return,get,setting,setting,factory,apply,type,or,else
RealmConfig -> public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse);1541642262;Obtain the value of the provided {@code setting} from the node's {@link #settings global settings}._{@link #getConcreteSetting(Function)} is used to obtain a <em>concrete setting</em> from the provided_{@link Function}/{@link Setting.AffixSetting}._If this <em>concrete setting</em> {@link Setting#exists(Settings) exists} in the global settings, then its value is returned,_otherwise the {@code onElse} {@link Supplier} is executed and returned.;public <T> T getSetting(Function<String, Setting.AffixSetting<T>> settingFactory, Supplier<T> orElse) {_        return getSetting(settingFactory.apply(type()), orElse)__    };obtain,the,value,of,the,provided,code,setting,from,the,node,s,link,settings,global,settings,link,get,concrete,setting,function,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,function,link,setting,affix,setting,if,this,em,concrete,setting,em,link,setting,exists,settings,exists,in,the,global,settings,then,its,value,is,returned,otherwise,the,code,on,else,link,supplier,is,executed,and,returned;public,t,t,get,setting,function,string,setting,affix,setting,t,setting,factory,supplier,t,or,else,return,get,setting,setting,factory,apply,type,or,else
RealmConfig -> public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting);1541476610;Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting}_that is produced by applying this realm's name as the namespace._Realm configuration is defined using affix settings in the form {@code xpack.security.authc.realms.type.(name).key},_where_<ul>_<li>{@code type} is a fixed string (known at compile time) that identifies the type of the realm being configured.</li>_<li>{@code (name)} is a variable string (known only at runtime) that uniquely names the realm.</li>_<li>{@code key} is a fixed string (known at compile time) that identifies a specific setting within the realm.</li>_</ul>_In order to extract an individual value from the runtime {@link Settings} object, it is necessary to convert an_{@link Setting.AffixSetting} object into a concrete {@link Setting} object that has a fixed key, for a specific name.;public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting) {_        return setting.getConcreteSettingForNamespace(name())__    };return,the,link,setting,affix,setting,get,concrete,setting,for,namespace,concrete,setting,that,is,produced,by,applying,this,realm,s,name,as,the,namespace,realm,configuration,is,defined,using,affix,settings,in,the,form,code,xpack,security,authc,realms,type,name,key,where,ul,li,code,type,is,a,fixed,string,known,at,compile,time,that,identifies,the,type,of,the,realm,being,configured,li,li,code,name,is,a,variable,string,known,only,at,runtime,that,uniquely,names,the,realm,li,li,code,key,is,a,fixed,string,known,at,compile,time,that,identifies,a,specific,setting,within,the,realm,li,ul,in,order,to,extract,an,individual,value,from,the,runtime,link,settings,object,it,is,necessary,to,convert,an,link,setting,affix,setting,object,into,a,concrete,link,setting,object,that,has,a,fixed,key,for,a,specific,name;public,t,setting,t,get,concrete,setting,setting,affix,setting,t,setting,return,setting,get,concrete,setting,for,namespace,name
RealmConfig -> public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting);1541575290;Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting}_that is produced by applying this realm's name as the namespace._Realm configuration is defined using affix settings in the form {@code xpack.security.authc.realms.type.(name).key},_where_<ul>_<li>{@code type} is a fixed string (known at compile time) that identifies the type of the realm being configured.</li>_<li>{@code (name)} is a variable string (known only at runtime) that uniquely names the realm.</li>_<li>{@code key} is a fixed string (known at compile time) that identifies a specific setting within the realm.</li>_</ul>_In order to extract an individual value from the runtime {@link Settings} object, it is necessary to convert an_{@link Setting.AffixSetting} object into a concrete {@link Setting} object that has a fixed key, for a specific name.;public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting) {_        return setting.getConcreteSettingForNamespace(name())__    };return,the,link,setting,affix,setting,get,concrete,setting,for,namespace,concrete,setting,that,is,produced,by,applying,this,realm,s,name,as,the,namespace,realm,configuration,is,defined,using,affix,settings,in,the,form,code,xpack,security,authc,realms,type,name,key,where,ul,li,code,type,is,a,fixed,string,known,at,compile,time,that,identifies,the,type,of,the,realm,being,configured,li,li,code,name,is,a,variable,string,known,only,at,runtime,that,uniquely,names,the,realm,li,li,code,key,is,a,fixed,string,known,at,compile,time,that,identifies,a,specific,setting,within,the,realm,li,ul,in,order,to,extract,an,individual,value,from,the,runtime,link,settings,object,it,is,necessary,to,convert,an,link,setting,affix,setting,object,into,a,concrete,link,setting,object,that,has,a,fixed,key,for,a,specific,name;public,t,setting,t,get,concrete,setting,setting,affix,setting,t,setting,return,setting,get,concrete,setting,for,namespace,name
RealmConfig -> public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting);1541642262;Return the {@link Setting.AffixSetting#getConcreteSettingForNamespace concrete setting}_that is produced by applying this realm's name as the namespace._Realm configuration is defined using affix settings in the form {@code xpack.security.authc.realms.type.(name).key},_where_<ul>_<li>{@code type} is a fixed string (known at compile time) that identifies the type of the realm being configured.</li>_<li>{@code (name)} is a variable string (known only at runtime) that uniquely names the realm.</li>_<li>{@code key} is a fixed string (known at compile time) that identifies a specific setting within the realm.</li>_</ul>_In order to extract an individual value from the runtime {@link Settings} object, it is necessary to convert an_{@link Setting.AffixSetting} object into a concrete {@link Setting} object that has a fixed key, for a specific name.;public <T> Setting<T> getConcreteSetting(Setting.AffixSetting<T> setting) {_        return setting.getConcreteSettingForNamespace(name())__    };return,the,link,setting,affix,setting,get,concrete,setting,for,namespace,concrete,setting,that,is,produced,by,applying,this,realm,s,name,as,the,namespace,realm,configuration,is,defined,using,affix,settings,in,the,form,code,xpack,security,authc,realms,type,name,key,where,ul,li,code,type,is,a,fixed,string,known,at,compile,time,that,identifies,the,type,of,the,realm,being,configured,li,li,code,name,is,a,variable,string,known,only,at,runtime,that,uniquely,names,the,realm,li,li,code,key,is,a,fixed,string,known,at,compile,time,that,identifies,a,specific,setting,within,the,realm,li,ul,in,order,to,extract,an,individual,value,from,the,runtime,link,settings,object,it,is,necessary,to,convert,an,link,setting,affix,setting,object,into,a,concrete,link,setting,object,that,has,a,fixed,key,for,a,specific,name;public,t,setting,t,get,concrete,setting,setting,affix,setting,t,setting,return,setting,get,concrete,setting,for,namespace,name
RealmConfig -> public <T> boolean hasSetting(Setting.AffixSetting<T> setting);1541476610;Determines whether the provided {@code setting} has an explicit value in the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided_{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to {@link Setting#exists(Settings) check} for a value.;public <T> boolean hasSetting(Setting.AffixSetting<T> setting) {_        return getConcreteSetting(setting).exists(globalSettings)__    };determines,whether,the,provided,code,setting,has,an,explicit,value,in,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,setting,affix,setting,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,exists,settings,check,for,a,value;public,t,boolean,has,setting,setting,affix,setting,t,setting,return,get,concrete,setting,setting,exists,global,settings
RealmConfig -> public <T> boolean hasSetting(Setting.AffixSetting<T> setting);1541575290;Determines whether the provided {@code setting} has an explicit value in the node's {@link #globalSettings global settings}._{@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided_{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to {@link Setting#exists(Settings) check} for a value.;public <T> boolean hasSetting(Setting.AffixSetting<T> setting) {_        return getConcreteSetting(setting).exists(globalSettings)__    };determines,whether,the,provided,code,setting,has,an,explicit,value,in,the,node,s,link,global,settings,global,settings,link,get,concrete,setting,setting,affix,setting,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,exists,settings,check,for,a,value;public,t,boolean,has,setting,setting,affix,setting,t,setting,return,get,concrete,setting,setting,exists,global,settings
RealmConfig -> public <T> boolean hasSetting(Setting.AffixSetting<T> setting);1541642262;Determines whether the provided {@code setting} has an explicit value in the node's {@link #settings global settings}._{@link #getConcreteSetting(Setting.AffixSetting)} is used to obtain a <em>concrete setting</em> from the provided_{@link Setting.AffixSetting}, and this <em>concrete setting</em> is then used to {@link Setting#exists(Settings) check} for a value.;public <T> boolean hasSetting(Setting.AffixSetting<T> setting) {_        return getConcreteSetting(setting).exists(settings)__    };determines,whether,the,provided,code,setting,has,an,explicit,value,in,the,node,s,link,settings,global,settings,link,get,concrete,setting,setting,affix,setting,is,used,to,obtain,a,em,concrete,setting,em,from,the,provided,link,setting,affix,setting,and,this,em,concrete,setting,em,is,then,used,to,link,setting,exists,settings,check,for,a,value;public,t,boolean,has,setting,setting,affix,setting,t,setting,return,get,concrete,setting,setting,exists,settings
