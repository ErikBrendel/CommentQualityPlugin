commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public DeletePrivilegesRequest setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
false;public;0;4;;@Override public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (Strings.isNullOrEmpty(application)) {         validationException = addValidationError("application name is missing", validationException).     }     if (privileges == null || privileges.length == 0 || Arrays.stream(privileges).allMatch(Strings::isNullOrEmpty)) {         validationException = addValidationError("privileges are missing", validationException).     }     return validationException. }
false;public;1;3;;public void application(String application) {     this.application = application. }
false;public;0;3;;public String application() {     return application. }
false;public;0;4;;@Override public Collection<String> getApplicationNames() {     return Collections.singleton(application). }
false;public;0;3;;public String[] privileges() {     return this.privileges. }
false;public;1;3;;public void privileges(String[] privileges) {     this.privileges = privileges. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     application = in.readString().     privileges = in.readStringArray().     refreshPolicy = RefreshPolicy.readFrom(in). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(application).     out.writeStringArray(privileges).     refreshPolicy.writeTo(out). }
