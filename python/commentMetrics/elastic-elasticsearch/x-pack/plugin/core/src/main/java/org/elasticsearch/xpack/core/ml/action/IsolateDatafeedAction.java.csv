commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public,static;1;3;;public static Request fromXContent(XContentParser parser) {     return parseRequest(null, parser). }
false;public,static;2;7;;public static Request parseRequest(String datafeedId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (datafeedId != null) {         request.datafeedId = datafeedId.     }     return request. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(datafeedId). }
false;public;0;3;;public String getDatafeedId() {     return datafeedId. }
false;public;1;5;;@Override public boolean match(Task task) {     String expectedDescription = MlTasks.datafeedTaskId(datafeedId).     return task instanceof StartDatafeedAction.DatafeedTaskMatcher && expectedDescription.equals(task.getDescription()). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(datafeedId). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(DatafeedConfig.ID.getPreferredName(), datafeedId).     builder.endObject().     return builder. }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(datafeedId, other.datafeedId). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(isolated). }
