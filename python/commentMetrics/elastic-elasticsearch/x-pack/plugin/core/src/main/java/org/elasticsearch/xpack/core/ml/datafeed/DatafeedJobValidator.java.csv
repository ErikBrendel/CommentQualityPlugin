commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;17;/**  * Validates a datafeedConfig in relation to the job it refers to  * @param datafeedConfig the datafeed config  * @param job the job  */ ;/**  * Validates a datafeedConfig in relation to the job it refers to  * @param datafeedConfig the datafeed config  * @param job the job  */ public static void validate(DatafeedConfig datafeedConfig, Job job) {     AnalysisConfig analysisConfig = job.getAnalysisConfig().     if (analysisConfig.getLatency() != null && analysisConfig.getLatency().seconds() > 0) {         throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_DOES_NOT_SUPPORT_JOB_WITH_LATENCY)).     }     if (datafeedConfig.hasAggregations()) {         checkSummaryCountFieldNameIsSet(analysisConfig).         checkValidHistogramInterval(datafeedConfig, analysisConfig).         checkFrequencyIsMultipleOfHistogramInterval(datafeedConfig).     }     DelayedDataCheckConfig delayedDataCheckConfig = datafeedConfig.getDelayedDataCheckConfig().     TimeValue bucketSpan = analysisConfig.getBucketSpan().     if (delayedDataCheckConfig.isEnabled()) {         checkValidDelayedDataCheckConfig(bucketSpan, delayedDataCheckConfig).     } }
false;private,static;2;17;;private static void checkValidDelayedDataCheckConfig(TimeValue bucketSpan, DelayedDataCheckConfig delayedDataCheckConfig) {     TimeValue delayedDataCheckWindow = delayedDataCheckConfig.getCheckWindow().     if (delayedDataCheckWindow != null) {         // NULL implies we calculate on use and thus is always valid         if (delayedDataCheckWindow.compareTo(bucketSpan) < 0) {             throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_CONFIG_DELAYED_DATA_CHECK_TOO_SMALL, delayedDataCheckWindow, bucketSpan)).         }         if (delayedDataCheckWindow.millis() > bucketSpan.millis() * DelayedDataCheckConfig.MAX_NUMBER_SPANABLE_BUCKETS) {             throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_CONFIG_DELAYED_DATA_CHECK_SPANS_TOO_MANY_BUCKETS, delayedDataCheckWindow, bucketSpan)).         }     } }
false;private,static;1;6;;private static void checkSummaryCountFieldNameIsSet(AnalysisConfig analysisConfig) {     if (Strings.isNullOrEmpty(analysisConfig.getSummaryCountFieldName())) {         throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_AGGREGATIONS_REQUIRES_JOB_WITH_SUMMARY_COUNT_FIELD)).     } }
false;private,static;2;17;;private static void checkValidHistogramInterval(DatafeedConfig datafeedConfig, AnalysisConfig analysisConfig) {     long histogramIntervalMillis = datafeedConfig.getHistogramIntervalMillis().     long bucketSpanMillis = analysisConfig.getBucketSpan().millis().     if (histogramIntervalMillis > bucketSpanMillis) {         throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_AGGREGATIONS_INTERVAL_MUST_LESS_OR_EQUAL_TO_BUCKET_SPAN, TimeValue.timeValueMillis(histogramIntervalMillis).getStringRep(), TimeValue.timeValueMillis(bucketSpanMillis).getStringRep())).     }     if (bucketSpanMillis % histogramIntervalMillis != 0) {         throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_AGGREGATIONS_INTERVAL_MUST_BE_DIVISOR_OF_BUCKET_SPAN, TimeValue.timeValueMillis(histogramIntervalMillis).getStringRep(), TimeValue.timeValueMillis(bucketSpanMillis).getStringRep())).     } }
false;private,static;1;12;;private static void checkFrequencyIsMultipleOfHistogramInterval(DatafeedConfig datafeedConfig) {     TimeValue frequency = datafeedConfig.getFrequency().     if (frequency != null) {         long histogramIntervalMillis = datafeedConfig.getHistogramIntervalMillis().         long frequencyMillis = frequency.millis().         if (frequencyMillis % histogramIntervalMillis != 0) {             throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.DATAFEED_FREQUENCY_MUST_BE_MULTIPLE_OF_AGGREGATIONS_INTERVAL, frequency, TimeValue.timeValueMillis(histogramIntervalMillis).getStringRep())).         }     } }
