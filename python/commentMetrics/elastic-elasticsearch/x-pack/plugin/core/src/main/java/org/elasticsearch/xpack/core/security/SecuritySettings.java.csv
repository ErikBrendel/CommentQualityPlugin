commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;15;;public static Settings addTransportSettings(final Settings settings) {     final Settings.Builder builder = Settings.builder().     if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings)) {         final String transportType = NetworkModule.TRANSPORT_TYPE_SETTING.get(settings).         if (SecurityField.NAME4.equals(transportType) == false && SecurityField.NIO.equals(transportType) == false) {             throw new IllegalArgumentException("transport type setting [" + NetworkModule.TRANSPORT_TYPE_KEY + "] must be [" + SecurityField.NAME4 + "] or [" + SecurityField.NIO + "]" + " but is [" + transportType + "]").         }     } else {         // default to security4         builder.put(NetworkModule.TRANSPORT_TYPE_KEY, SecurityField.NAME4).     }     return builder.build(). }
false;public,static;1;18;;public static Settings addUserSettings(final Settings settings) {     final Settings.Builder builder = Settings.builder().     String authHeaderSettingName = ThreadContext.PREFIX + "." + UsernamePasswordToken.BASIC_AUTH_HEADER.     if (settings.get(authHeaderSettingName) == null) {         // TODO migrate to securesetting!         Optional<String> userOptional = SecurityField.USER_SETTING.get(settings).         userOptional.ifPresent(userSetting -> {             final int i = userSetting.indexOf(":").             if (i < 0 || i == userSetting.length() - 1) {                 throw new IllegalArgumentException("invalid [" + SecurityField.USER_SETTING.getKey() + "] setting. must be in the form of \"<username>:<password>\"").             }             String username = userSetting.substring(0, i).             String password = userSetting.substring(i + 1).             builder.put(authHeaderSettingName, UsernamePasswordToken.basicAuthHeaderValue(username, new SecureString(password))).         }).     }     return builder.build(). }
