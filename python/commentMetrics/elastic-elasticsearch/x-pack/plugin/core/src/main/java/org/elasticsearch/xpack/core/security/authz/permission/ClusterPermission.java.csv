commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ClusterPrivilege privilege() {     return privilege. }
false;public,abstract;2;1;;public abstract boolean check(String action, TransportRequest request).
false;public;1;3;;public boolean grants(ClusterPrivilege clusterPrivilege) {     return Operations.subsetOf(clusterPrivilege.getAutomaton(), this.privilege().getAutomaton()). }
false;public,abstract;0;1;;public abstract List<Tuple<ClusterPrivilege, ConditionalClusterPrivilege>> privileges().
false;public;2;4;;@Override public boolean check(String action, TransportRequest request) {     return predicate.test(action). }
false;public;0;4;;@Override public List<Tuple<ClusterPrivilege, ConditionalClusterPrivilege>> privileges() {     return Collections.singletonList(new Tuple<>(super.privilege, null)). }
false;public;2;4;;@Override public boolean check(String action, TransportRequest request) {     return super.privilege.predicate().test(action) && conditionalPrivilege.getRequestPredicate().test(request). }
false;public;0;4;;@Override public List<Tuple<ClusterPrivilege, ConditionalClusterPrivilege>> privileges() {     return Collections.singletonList(new Tuple<>(super.privilege, conditionalPrivilege)). }
false;private,static;1;8;;private static ClusterPrivilege buildPrivilege(Collection<ClusterPermission> children) {     final Set<String> names = children.stream().map(ClusterPermission::privilege).map(ClusterPrivilege::name).flatMap(Set::stream).collect(Collectors.toSet()).     return ClusterPrivilege.get(names). }
false;public;0;4;;@Override public List<Tuple<ClusterPrivilege, ConditionalClusterPrivilege>> privileges() {     return children.stream().map(ClusterPermission::privileges).flatMap(List::stream).collect(Collectors.toList()). }
false;public;2;4;;@Override public boolean check(String action, TransportRequest request) {     return children.stream().anyMatch(p -> p.check(action, request)). }
false;public;1;4;;@Override public boolean grants(ClusterPrivilege clusterPrivilege) {     return children.stream().anyMatch(p -> p.grants(clusterPrivilege)). }
