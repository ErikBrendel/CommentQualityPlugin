commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public boolean isForce() {     return force. }
false;public;1;3;;public void setForce(boolean force) {     this.force = force. }
true;public;1;3;/**  * Should this task store its result after it has finished?  */ ;/**  * Should this task store its result after it has finished?  */ public void setShouldStoreResult(boolean shouldStoreResult) {     this.shouldStoreResult = shouldStoreResult. }
false;public;0;4;;@Override public boolean getShouldStoreResult() {     return shouldStoreResult. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;5;4;;@Override public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {     return new JobDeletionTask(id, type, action, "delete-job-" + jobId, parentTaskId, headers). }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     force = in.readBoolean(). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeBoolean(force). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, force). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     DeleteJobAction.Request other = (DeleteJobAction.Request) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(force, other.force). }
