commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public BulkByScrollResponse newResponse() {     return new BulkByScrollResponse(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(index). }
false;public;0;3;;public String index() {     return index. }
true;public,final;1;4;/**  * Sets the index.  */ ;/**  * Sets the index.  */ public final Request index(String index) {     this.index = index.     return this. }
false;public;0;4;;@Override public String[] indices() {     return new String[] { index }. }
false;public;0;4;;@Override public IndicesOptions indicesOptions() {     return UPGRADE_INDEX_OPTIONS. }
true;public;1;4;/**  * Should this task store its result after it has finished?  */ ;/**  * Should this task store its result after it has finished?  */ public Request setShouldStoreResult(boolean shouldStoreResult) {     this.shouldStoreResult = shouldStoreResult.     return this. }
false;public;0;4;;@Override public boolean getShouldStoreResult() {     return shouldStoreResult. }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (index == null) {         validationException = addValidationError("index is missing", validationException).     }     return validationException. }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Objects.equals(index, request.index). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(index). }
false;public;0;4;;@Override public boolean shouldCancelChildrenOnCancellation() {     return true. }
false;public;5;9;;@Override public Task createTask(long id, String type, String action, TaskId parentTaskId, Map<String, String> headers) {     return new CancellableTask(id, type, action, getDescription(), parentTaskId, headers) {          @Override         public boolean shouldCancelChildrenOnCancellation() {             return true.         }     }. }
false;public;1;4;;public RequestBuilder setIndex(String index) {     request.index(index).     return this. }
