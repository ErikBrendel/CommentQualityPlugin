# id;timestamp;commentText;codeText;commentWords;codeWords
TimeUtils -> public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1524684173;Checks that the given {@code timeValue} is a positive multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkPositive(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,positive,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,positive,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,positive,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1539615817;Checks that the given {@code timeValue} is a positive multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkPositive(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,positive,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,positive,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,positive,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1542310365;Checks that the given {@code timeValue} is a positive multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkPositive(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,positive,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,positive,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,positive,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1544458001;Checks that the given {@code timeValue} is a positive multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkPositive(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,positive,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,positive,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,positive,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1548236405;Checks that the given {@code timeValue} is a positive multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkPositiveMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkPositive(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,positive,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,positive,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,positive,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkPositive(TimeValue timeValue, ParseField field);1542310365;Checks that the given {@code timeValue} is positive.__<ul>_<li>1s is valid</li>_<li>-1s is invalid</li>_</ul>;public static void checkPositive(TimeValue timeValue, ParseField field) {_        long nanos = timeValue.getNanos()__        if (nanos <= 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " cannot be less or equal than 0. Value = "_                    + timeValue.toString())__        }_    };checks,that,the,given,code,time,value,is,positive,ul,li,1s,is,valid,li,li,1s,is,invalid,li,ul;public,static,void,check,positive,time,value,time,value,parse,field,field,long,nanos,time,value,get,nanos,if,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,cannot,be,less,or,equal,than,0,value,time,value,to,string
TimeUtils -> public static void checkPositive(TimeValue timeValue, ParseField field);1544458001;Checks that the given {@code timeValue} is positive.__<ul>_<li>1s is valid</li>_<li>-1s is invalid</li>_</ul>;public static void checkPositive(TimeValue timeValue, ParseField field) {_        long nanos = timeValue.getNanos()__        if (nanos <= 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " cannot be less or equal than 0. Value = "_                    + timeValue.toString())__        }_    };checks,that,the,given,code,time,value,is,positive,ul,li,1s,is,valid,li,li,1s,is,invalid,li,ul;public,static,void,check,positive,time,value,time,value,parse,field,field,long,nanos,time,value,get,nanos,if,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,cannot,be,less,or,equal,than,0,value,time,value,to,string
TimeUtils -> public static void checkPositive(TimeValue timeValue, ParseField field);1548236405;Checks that the given {@code timeValue} is positive.__<ul>_<li>1s is valid</li>_<li>-1s is invalid</li>_</ul>;public static void checkPositive(TimeValue timeValue, ParseField field) {_        long nanos = timeValue.getNanos()__        if (nanos <= 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " cannot be less or equal than 0. Value = "_                    + timeValue.toString())__        }_    };checks,that,the,given,code,time,value,is,positive,ul,li,1s,is,valid,li,li,1s,is,invalid,li,ul;public,static,void,check,positive,time,value,time,value,parse,field,field,long,nanos,time,value,get,nanos,if,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,cannot,be,less,or,equal,than,0,value,time,value,to,string
TimeUtils -> public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1524684173;Checks that the given {@code timeValue} is a non-negative multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkNonNegative(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,non,negative,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,non,negative,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,non,negative,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1539615817;Checks that the given {@code timeValue} is a non-negative multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkNonNegative(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,non,negative,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,non,negative,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,non,negative,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1542310365;Checks that the given {@code timeValue} is a non-negative multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkNonNegative(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,non,negative,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,non,negative,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,non,negative,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1544458001;Checks that the given {@code timeValue} is a non-negative multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkNonNegative(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,non,negative,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,non,negative,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,non,negative,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1548236405;Checks that the given {@code timeValue} is a non-negative multiple value of the {@code baseUnit}.__<ul>_<li>400ms is valid for base unit of seconds</li>_<li>450ms is invalid for base unit of seconds but valid for base unit of milliseconds</li>_</ul>;public static void checkNonNegativeMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        checkNonNegative(timeValue, field)__        checkMultiple(timeValue, baseUnit, field)__    };checks,that,the,given,code,time,value,is,a,non,negative,multiple,value,of,the,code,base,unit,ul,li,400ms,is,valid,for,base,unit,of,seconds,li,li,450ms,is,invalid,for,base,unit,of,seconds,but,valid,for,base,unit,of,milliseconds,li,ul;public,static,void,check,non,negative,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,check,non,negative,time,value,field,check,multiple,time,value,base,unit,field
TimeUtils -> public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1524684173;Check the given {@code timeValue} is a multiple of the {@code baseUnit};public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        long nanos = timeValue.getNanos()__        TimeValue base = new TimeValue(1, baseUnit)__        long baseNanos = base.getNanos()__        if (nanos % baseNanos != 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " has to be a multiple of " + base.toString() + "_ actual was '"_                    + timeValue.toString() + "'")__        }_    };check,the,given,code,time,value,is,a,multiple,of,the,code,base,unit;public,static,void,check,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,long,nanos,time,value,get,nanos,time,value,base,new,time,value,1,base,unit,long,base,nanos,base,get,nanos,if,nanos,base,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,has,to,be,a,multiple,of,base,to,string,actual,was,time,value,to,string
TimeUtils -> public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1539615817;Check the given {@code timeValue} is a multiple of the {@code baseUnit};public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        long nanos = timeValue.getNanos()__        TimeValue base = new TimeValue(1, baseUnit)__        long baseNanos = base.getNanos()__        if (nanos % baseNanos != 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " has to be a multiple of " + base.toString() + "_ actual was '"_                    + timeValue.toString() + "'")__        }_    };check,the,given,code,time,value,is,a,multiple,of,the,code,base,unit;public,static,void,check,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,long,nanos,time,value,get,nanos,time,value,base,new,time,value,1,base,unit,long,base,nanos,base,get,nanos,if,nanos,base,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,has,to,be,a,multiple,of,base,to,string,actual,was,time,value,to,string
TimeUtils -> public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1542310365;Check the given {@code timeValue} is a multiple of the {@code baseUnit};public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        long nanos = timeValue.getNanos()__        TimeValue base = new TimeValue(1, baseUnit)__        long baseNanos = base.getNanos()__        if (nanos % baseNanos != 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " has to be a multiple of " + base.toString() + "_ actual was '"_                    + timeValue.toString() + "'")__        }_    };check,the,given,code,time,value,is,a,multiple,of,the,code,base,unit;public,static,void,check,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,long,nanos,time,value,get,nanos,time,value,base,new,time,value,1,base,unit,long,base,nanos,base,get,nanos,if,nanos,base,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,has,to,be,a,multiple,of,base,to,string,actual,was,time,value,to,string
TimeUtils -> public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1544458001;Check the given {@code timeValue} is a multiple of the {@code baseUnit};public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        long nanos = timeValue.getNanos()__        TimeValue base = new TimeValue(1, baseUnit)__        long baseNanos = base.getNanos()__        if (nanos % baseNanos != 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " has to be a multiple of " + base.toString() + "_ actual was '"_                    + timeValue.toString() + "'")__        }_    };check,the,given,code,time,value,is,a,multiple,of,the,code,base,unit;public,static,void,check,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,long,nanos,time,value,get,nanos,time,value,base,new,time,value,1,base,unit,long,base,nanos,base,get,nanos,if,nanos,base,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,has,to,be,a,multiple,of,base,to,string,actual,was,time,value,to,string
TimeUtils -> public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field);1548236405;Check the given {@code timeValue} is a multiple of the {@code baseUnit};public static void checkMultiple(TimeValue timeValue, TimeUnit baseUnit, ParseField field) {_        long nanos = timeValue.getNanos()__        TimeValue base = new TimeValue(1, baseUnit)__        long baseNanos = base.getNanos()__        if (nanos % baseNanos != 0) {_            throw new IllegalArgumentException(field.getPreferredName() + " has to be a multiple of " + base.toString() + "_ actual was '"_                    + timeValue.toString() + "'")__        }_    };check,the,given,code,time,value,is,a,multiple,of,the,code,base,unit;public,static,void,check,multiple,time,value,time,value,time,unit,base,unit,parse,field,field,long,nanos,time,value,get,nanos,time,value,base,new,time,value,1,base,unit,long,base,nanos,base,get,nanos,if,nanos,base,nanos,0,throw,new,illegal,argument,exception,field,get,preferred,name,has,to,be,a,multiple,of,base,to,string,actual,was,time,value,to,string
TimeUtils -> public static long dateStringToEpoch(String date);1524684173;First tries to parse the date first as a Long and convert that to an_epoch time. If the long number has more than 10 digits it is considered a_time in milliseconds else if 10 or less digits it is in seconds. If that_fails it tries to parse the string using_{@link DateFieldMapper#DEFAULT_DATE_TIME_FORMATTER}__If the date string cannot be parsed -1 is returned.__@return The epoch time in milliseconds or -1 if the date cannot be_parsed.;public static long dateStringToEpoch(String date) {_        try {_            long epoch = Long.parseLong(date)__            if (date.trim().length() <= 10) { _                return epoch * 1000__            } else {_                return epoch__            }_        } catch (NumberFormatException nfe) {_            _        }__        try {_            return DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parser().parseMillis(date)__        } catch (IllegalArgumentException e) {_        }_        _        return -1__    };first,tries,to,parse,the,date,first,as,a,long,and,convert,that,to,an,epoch,time,if,the,long,number,has,more,than,10,digits,it,is,considered,a,time,in,milliseconds,else,if,10,or,less,digits,it,is,in,seconds,if,that,fails,it,tries,to,parse,the,string,using,link,date,field,mapper,if,the,date,string,cannot,be,parsed,1,is,returned,return,the,epoch,time,in,milliseconds,or,1,if,the,date,cannot,be,parsed;public,static,long,date,string,to,epoch,string,date,try,long,epoch,long,parse,long,date,if,date,trim,length,10,return,epoch,1000,else,return,epoch,catch,number,format,exception,nfe,try,return,date,field,mapper,parser,parse,millis,date,catch,illegal,argument,exception,e,return,1
TimeUtils -> public static long dateStringToEpoch(String date);1539615817;First tries to parse the date first as a Long and convert that to an_epoch time. If the long number has more than 10 digits it is considered a_time in milliseconds else if 10 or less digits it is in seconds. If that_fails it tries to parse the string using_{@link DateFieldMapper#DEFAULT_DATE_TIME_FORMATTER}__If the date string cannot be parsed -1 is returned.__@return The epoch time in milliseconds or -1 if the date cannot be_parsed.;public static long dateStringToEpoch(String date) {_        try {_            long epoch = Long.parseLong(date)__            if (date.trim().length() <= 10) { _                return epoch * 1000__            } else {_                return epoch__            }_        } catch (NumberFormatException nfe) {_            _        }__        try {_            return DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parser().parseMillis(date)__        } catch (IllegalArgumentException e) {_        }_        _        return -1__    };first,tries,to,parse,the,date,first,as,a,long,and,convert,that,to,an,epoch,time,if,the,long,number,has,more,than,10,digits,it,is,considered,a,time,in,milliseconds,else,if,10,or,less,digits,it,is,in,seconds,if,that,fails,it,tries,to,parse,the,string,using,link,date,field,mapper,if,the,date,string,cannot,be,parsed,1,is,returned,return,the,epoch,time,in,milliseconds,or,1,if,the,date,cannot,be,parsed;public,static,long,date,string,to,epoch,string,date,try,long,epoch,long,parse,long,date,if,date,trim,length,10,return,epoch,1000,else,return,epoch,catch,number,format,exception,nfe,try,return,date,field,mapper,parser,parse,millis,date,catch,illegal,argument,exception,e,return,1
TimeUtils -> public static long dateStringToEpoch(String date);1542310365;First tries to parse the date first as a Long and convert that to an_epoch time. If the long number has more than 10 digits it is considered a_time in milliseconds else if 10 or less digits it is in seconds. If that_fails it tries to parse the string using_{@link DateFieldMapper#DEFAULT_DATE_TIME_FORMATTER}__If the date string cannot be parsed -1 is returned.__@return The epoch time in milliseconds or -1 if the date cannot be_parsed.;public static long dateStringToEpoch(String date) {_        try {_            long epoch = Long.parseLong(date)__            if (date.trim().length() <= 10) { _                return epoch * 1000__            } else {_                return epoch__            }_        } catch (NumberFormatException nfe) {_            _        }__        try {_            return DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parser().parseMillis(date)__        } catch (IllegalArgumentException e) {_        }_        _        return -1__    };first,tries,to,parse,the,date,first,as,a,long,and,convert,that,to,an,epoch,time,if,the,long,number,has,more,than,10,digits,it,is,considered,a,time,in,milliseconds,else,if,10,or,less,digits,it,is,in,seconds,if,that,fails,it,tries,to,parse,the,string,using,link,date,field,mapper,if,the,date,string,cannot,be,parsed,1,is,returned,return,the,epoch,time,in,milliseconds,or,1,if,the,date,cannot,be,parsed;public,static,long,date,string,to,epoch,string,date,try,long,epoch,long,parse,long,date,if,date,trim,length,10,return,epoch,1000,else,return,epoch,catch,number,format,exception,nfe,try,return,date,field,mapper,parser,parse,millis,date,catch,illegal,argument,exception,e,return,1
TimeUtils -> public static long dateStringToEpoch(String date);1544458001;First tries to parse the date first as a Long and convert that to an_epoch time. If the long number has more than 10 digits it is considered a_time in milliseconds else if 10 or less digits it is in seconds. If that_fails it tries to parse the string using_{@link DateFieldMapper#DEFAULT_DATE_TIME_FORMATTER}__If the date string cannot be parsed -1 is returned.__@return The epoch time in milliseconds or -1 if the date cannot be_parsed.;public static long dateStringToEpoch(String date) {_        try {_            long epoch = Long.parseLong(date)__            if (date.trim().length() <= 10) { _                return epoch * 1000__            } else {_                return epoch__            }_        } catch (NumberFormatException nfe) {_            _        }__        try {_            return DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parseMillis(date)__        } catch (IllegalArgumentException e) {_        }_        _        return -1__    };first,tries,to,parse,the,date,first,as,a,long,and,convert,that,to,an,epoch,time,if,the,long,number,has,more,than,10,digits,it,is,considered,a,time,in,milliseconds,else,if,10,or,less,digits,it,is,in,seconds,if,that,fails,it,tries,to,parse,the,string,using,link,date,field,mapper,if,the,date,string,cannot,be,parsed,1,is,returned,return,the,epoch,time,in,milliseconds,or,1,if,the,date,cannot,be,parsed;public,static,long,date,string,to,epoch,string,date,try,long,epoch,long,parse,long,date,if,date,trim,length,10,return,epoch,1000,else,return,epoch,catch,number,format,exception,nfe,try,return,date,field,mapper,parse,millis,date,catch,illegal,argument,exception,e,return,1
TimeUtils -> public static long dateStringToEpoch(String date);1548236405;First tries to parse the date first as a Long and convert that to an_epoch time. If the long number has more than 10 digits it is considered a_time in milliseconds else if 10 or less digits it is in seconds. If that_fails it tries to parse the string using_{@link DateFieldMapper#DEFAULT_DATE_TIME_FORMATTER}__If the date string cannot be parsed -1 is returned.__@return The epoch time in milliseconds or -1 if the date cannot be_parsed.;public static long dateStringToEpoch(String date) {_        try {_            long epoch = Long.parseLong(date)__            if (date.trim().length() <= 10) { _                return epoch * 1000__            } else {_                return epoch__            }_        } catch (NumberFormatException nfe) {_            _        }__        try {_            return DateFieldMapper.DEFAULT_DATE_TIME_FORMATTER.parseMillis(date)__        } catch (ElasticsearchParseException | IllegalArgumentException e) {_        }_        _        return -1__    };first,tries,to,parse,the,date,first,as,a,long,and,convert,that,to,an,epoch,time,if,the,long,number,has,more,than,10,digits,it,is,considered,a,time,in,milliseconds,else,if,10,or,less,digits,it,is,in,seconds,if,that,fails,it,tries,to,parse,the,string,using,link,date,field,mapper,if,the,date,string,cannot,be,parsed,1,is,returned,return,the,epoch,time,in,milliseconds,or,1,if,the,date,cannot,be,parsed;public,static,long,date,string,to,epoch,string,date,try,long,epoch,long,parse,long,date,if,date,trim,length,10,return,epoch,1000,else,return,epoch,catch,number,format,exception,nfe,try,return,date,field,mapper,parse,millis,date,catch,elasticsearch,parse,exception,illegal,argument,exception,e,return,1
