commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;2;7;;public static Request parseRequest(String jobId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.jobId = jobId.     }     return request. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;11;;public void setTimestamp(String timestamp) {     if (pageParams != null || start != null || end != null || anomalyScore != null) {         throw new IllegalArgumentException("Param [" + TIMESTAMP.getPreferredName() + "] is incompatible with [" + PageParams.FROM.getPreferredName() + "," + PageParams.SIZE.getPreferredName() + "," + START.getPreferredName() + "," + END.getPreferredName() + "," + ANOMALY_SCORE.getPreferredName() + "]").     }     this.timestamp = ExceptionsHelper.requireNonNull(timestamp, Result.TIMESTAMP.getPreferredName()). }
false;public;0;3;;public String getTimestamp() {     return timestamp. }
false;public;0;3;;public boolean isExpand() {     return expand. }
false;public;1;3;;public void setExpand(boolean expand) {     this.expand = expand. }
false;public;0;3;;public boolean isExcludeInterim() {     return excludeInterim. }
false;public;1;3;;public void setExcludeInterim(boolean excludeInterim) {     this.excludeInterim = excludeInterim. }
false;public;0;3;;public String getStart() {     return start. }
false;public;1;7;;public void setStart(String start) {     if (timestamp != null) {         throw new IllegalArgumentException("Param [" + START.getPreferredName() + "] is incompatible with [" + TIMESTAMP.getPreferredName() + "].").     }     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
false;public;1;7;;public void setEnd(String end) {     if (timestamp != null) {         throw new IllegalArgumentException("Param [" + END.getPreferredName() + "] is incompatible with [" + TIMESTAMP.getPreferredName() + "].").     }     this.end = end. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
false;public;1;7;;public void setPageParams(PageParams pageParams) {     if (timestamp != null) {         throw new IllegalArgumentException("Param [" + PageParams.FROM.getPreferredName() + ", " + PageParams.SIZE.getPreferredName() + "] is incompatible with [" + TIMESTAMP.getPreferredName() + "].").     }     this.pageParams = ExceptionsHelper.requireNonNull(pageParams, PageParams.PAGE.getPreferredName()). }
false;public;0;3;;public Double getAnomalyScore() {     return anomalyScore. }
false;public;1;7;;public void setAnomalyScore(double anomalyScore) {     if (timestamp != null) {         throw new IllegalArgumentException("Param [" + ANOMALY_SCORE.getPreferredName() + "] is incompatible with [" + TIMESTAMP.getPreferredName() + "].").     }     this.anomalyScore = anomalyScore. }
false;public;0;3;;public String getSort() {     return sort. }
false;public;1;3;;public void setSort(String sort) {     this.sort = sort. }
false;public;0;3;;public boolean isDescending() {     return descending. }
false;public;1;3;;public void setDescending(boolean descending) {     this.descending = descending. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;14;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     timestamp = in.readOptionalString().     expand = in.readBoolean().     excludeInterim = in.readBoolean().     start = in.readOptionalString().     end = in.readOptionalString().     anomalyScore = in.readOptionalDouble().     pageParams = in.readOptionalWriteable(PageParams::new).     sort = in.readString().     descending = in.readBoolean(). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeOptionalString(timestamp).     out.writeBoolean(expand).     out.writeBoolean(excludeInterim).     out.writeOptionalString(start).     out.writeOptionalString(end).     out.writeOptionalDouble(anomalyScore).     out.writeOptionalWriteable(pageParams).     out.writeString(sort).     out.writeBoolean(descending). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     if (timestamp != null) {         builder.field(Result.TIMESTAMP.getPreferredName(), timestamp).     }     builder.field(EXPAND.getPreferredName(), expand).     builder.field(EXCLUDE_INTERIM.getPreferredName(), excludeInterim).     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (pageParams != null) {         builder.field(PageParams.PAGE.getPreferredName(), pageParams).     }     if (anomalyScore != null) {         builder.field(ANOMALY_SCORE.getPreferredName(), anomalyScore).     }     builder.field(SORT.getPreferredName(), sort).     builder.field(DESCENDING.getPreferredName(), descending).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, timestamp, expand, excludeInterim, anomalyScore, pageParams, start, end, sort, descending). }
false;public;1;20;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(timestamp, other.timestamp) && Objects.equals(expand, other.expand) && Objects.equals(excludeInterim, other.excludeInterim) && Objects.equals(anomalyScore, other.anomalyScore) && Objects.equals(pageParams, other.pageParams) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(sort, other.sort) && Objects.equals(descending, other.descending). }
false;public;0;3;;public QueryPage<Bucket> getBuckets() {     return buckets. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     buckets = new QueryPage<>(in, Bucket::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     buckets.writeTo(out). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     buckets.doXContentBody(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(buckets). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(buckets, other.buckets). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
