commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;1;7;;public void setName(String name) {     if (Strings.hasText(name)) {         this.name = name.     } else {         throw new IllegalArgumentException("name must not be null or empty").     } }
false;public;0;3;;public TimeValue getExpiration() {     return expiration. }
false;public;1;3;;public void setExpiration(TimeValue expiration) {     this.expiration = expiration. }
false;public;0;3;;public List<RoleDescriptor> getRoleDescriptors() {     return roleDescriptors. }
false;public;1;3;;public void setRoleDescriptors(List<RoleDescriptor> roleDescriptors) {     this.roleDescriptors = Collections.unmodifiableList(Objects.requireNonNull(roleDescriptors, "role descriptors may not be null")). }
false;public;0;3;;public WriteRequest.RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;3;;public void setRefreshPolicy(WriteRequest.RefreshPolicy refreshPolicy) {     this.refreshPolicy = Objects.requireNonNull(refreshPolicy, "refresh policy may not be null"). }
false;public;0;18;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (Strings.isNullOrEmpty(name)) {         validationException = addValidationError("name is required", validationException).     } else {         if (name.length() > 256) {             validationException = addValidationError("name may not be more than 256 characters long", validationException).         }         if (name.equals(name.trim()) == false) {             validationException = addValidationError("name may not begin or end with whitespace", validationException).         }         if (name.startsWith("_")) {             validationException = addValidationError("name may not begin with an underscore", validationException).         }     }     return validationException. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(name).     out.writeOptionalTimeValue(expiration).     out.writeList(roleDescriptors).     refreshPolicy.writeTo(out). }
false;public;1;4;;@Override public void readFrom(StreamInput in) {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
