commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public License getLicense() {     return license. }
false;;0;6;;boolean isEligibleForTrial() {     if (trialVersion == null) {         return true.     }     return Version.CURRENT.major > trialVersion.major. }
false;;0;3;;Version getMostRecentTrialVersion() {     return trialVersion. }
false;public;0;7;;@Override public String toString() {     return "LicensesMetaData{" + "license=" + license + ", trialVersion=" + trialVersion + '}'. }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     LicensesMetaData that = (LicensesMetaData) o.     if (license != null ? !license.equals(that.license) : that.license != null)         return false.     return trialVersion != null ? trialVersion.equals(that.trialVersion) : that.trialVersion == null. }
false;public;0;6;;@Override public int hashCode() {     int result = license != null ? license.hashCode() : 0.     result = 31 * result + (trialVersion != null ? trialVersion.hashCode() : 0).     return result. }
false;public;0;4;;@Override public String getWriteableName() {     return TYPE. }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.CURRENT.minimumCompatibilityVersion(). }
false;public;0;4;;@Override public EnumSet<MetaData.XContentContext> context() {     return EnumSet.of(MetaData.XContentContext.GATEWAY). }
false;public,static;1;24;;public static LicensesMetaData fromXContent(XContentParser parser) throws IOException {     License license = LICENSE_TOMBSTONE.     Version trialLicense = null.     XContentParser.Token token.     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {         if (token == XContentParser.Token.FIELD_NAME) {             String fieldName = parser.currentName().             if (fieldName != null) {                 if (fieldName.equals(Fields.LICENSE)) {                     token = parser.nextToken().                     if (token == XContentParser.Token.START_OBJECT) {                         license = License.fromXContent(parser).                     } else if (token == XContentParser.Token.VALUE_NULL) {                         license = LICENSE_TOMBSTONE.                     }                 } else if (fieldName.equals(Fields.TRIAL_LICENSE)) {                     parser.nextToken().                     trialLicense = Version.fromString(parser.text()).                 }             }         }     }     return new LicensesMetaData(license, trialLicense). }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     if (license == LICENSE_TOMBSTONE) {         builder.nullField(Fields.LICENSE).     } else {         builder.startObject(Fields.LICENSE).         license.toInnerXContent(builder, params).         builder.endObject().     }     if (trialVersion != null) {         builder.field(Fields.TRIAL_LICENSE, trialVersion.toString()).     }     return builder. }
false;public;1;17;;@Override public void writeTo(StreamOutput streamOutput) throws IOException {     if (license == LICENSE_TOMBSTONE) {         // no license         streamOutput.writeBoolean(false).     } else {         // has a license         streamOutput.writeBoolean(true).         license.writeTo(streamOutput).     }     if (streamOutput.getVersion().onOrAfter(Version.V_6_1_0)) {         if (trialVersion == null) {             streamOutput.writeBoolean(false).         } else {             streamOutput.writeBoolean(true).             Version.writeVersion(trialVersion, streamOutput).         }     } }
false;public,static;1;3;;public static NamedDiff<MetaData.Custom> readDiffFrom(StreamInput streamInput) throws IOException {     return readDiffFrom(MetaData.Custom.class, TYPE, streamInput). }
false;public,static;1;11;;public static License extractLicense(LicensesMetaData licensesMetaData) {     if (licensesMetaData != null) {         License license = licensesMetaData.getLicense().         if (license == LicensesMetaData.LICENSE_TOMBSTONE) {             return null.         } else {             return license.         }     }     return null. }
false;public;1;10;;@Override public LicensesMetaData merge(LicensesMetaData other) {     if (other.license == null) {         return this.     } else if (license == null || OperationMode.compare(other.license.operationMode(), license.operationMode()) > 0) {         return other.     }     return this. }
