# id;timestamp;commentText;codeText;commentWords;codeWords
PutUserRequestBuilder -> public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1531179852;Populate the put user request using the given source and username;public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        Objects.requireNonNull(xContentType)__        username(username)__        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        Arrays.fill(passwordChars, (char) 0)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.PASSWORD_HASH.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        char[] passwordChars = parser.text().toCharArray()__                        passwordHash(passwordChars)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ROLES.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        roles(Strings.commaDelimitedListToStringArray(parser.text()))__                    } else {_                        roles(XContentUtils.readStringArray(parser, false))__                    }_                } else if (User.Fields.FULL_NAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        fullName(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.EMAIL.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        email(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.START_OBJECT) {_                        metadata(parser.map())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ENABLED.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_BOOLEAN) {_                        enabled(parser.booleanValue())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type boolean, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.USERNAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == Token.VALUE_STRING) {_                        if (username.equals(parser.text()) == false) {_                            throw new IllegalArgumentException("[username] in source does not match the username provided [" +_                                    username + "]")__                        }_                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse add user request. unexpected field [{}]", currentFieldName)__                }_            }_            return this__        }_    };populate,the,put,user,request,using,the,given,source,and,username;public,put,user,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,objects,require,non,null,x,content,type,username,username,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,char,password,chars,password,to,char,array,password,password,chars,hasher,arrays,fill,password,chars,char,0,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,char,password,chars,parser,text,to,char,array,password,hash,password,chars,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,roles,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,roles,strings,comma,delimited,list,to,string,array,parser,text,else,roles,xcontent,utils,read,string,array,parser,false,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,full,name,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,email,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,email,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,metadata,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,metadata,parser,map,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,object,but,found,instead,current,field,name,token,else,if,user,fields,enabled,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,enabled,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,boolean,but,found,instead,current,field,name,token,else,if,user,fields,username,match,current,field,name,parser,get,deprecation,handler,if,token,token,if,username,equals,parser,text,false,throw,new,illegal,argument,exception,username,in,source,does,not,match,the,username,provided,username,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,add,user,request,unexpected,field,current,field,name,return,this
PutUserRequestBuilder -> public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1533295538;Populate the put user request using the given source and username;public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        Objects.requireNonNull(xContentType)__        username(username)__        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        Arrays.fill(passwordChars, (char) 0)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.PASSWORD_HASH.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        char[] passwordChars = parser.text().toCharArray()__                        passwordHash(passwordChars)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ROLES.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        roles(Strings.commaDelimitedListToStringArray(parser.text()))__                    } else {_                        roles(XContentUtils.readStringArray(parser, false))__                    }_                } else if (User.Fields.FULL_NAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        fullName(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.EMAIL.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        email(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.START_OBJECT) {_                        metadata(parser.map())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ENABLED.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_BOOLEAN) {_                        enabled(parser.booleanValue())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type boolean, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.USERNAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == Token.VALUE_STRING) {_                        if (username.equals(parser.text()) == false) {_                            throw new IllegalArgumentException("[username] in source does not match the username provided [" +_                                    username + "]")__                        }_                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse add user request. unexpected field [{}]", currentFieldName)__                }_            }_            return this__        }_    };populate,the,put,user,request,using,the,given,source,and,username;public,put,user,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,objects,require,non,null,x,content,type,username,username,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,char,password,chars,password,to,char,array,password,password,chars,hasher,arrays,fill,password,chars,char,0,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,char,password,chars,parser,text,to,char,array,password,hash,password,chars,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,roles,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,roles,strings,comma,delimited,list,to,string,array,parser,text,else,roles,xcontent,utils,read,string,array,parser,false,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,full,name,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,email,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,email,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,metadata,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,metadata,parser,map,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,object,but,found,instead,current,field,name,token,else,if,user,fields,enabled,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,enabled,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,boolean,but,found,instead,current,field,name,token,else,if,user,fields,username,match,current,field,name,parser,get,deprecation,handler,if,token,token,if,username,equals,parser,text,false,throw,new,illegal,argument,exception,username,in,source,does,not,match,the,username,provided,username,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,add,user,request,unexpected,field,current,field,name,return,this
PutUserRequestBuilder -> public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1535552903;Populate the put user request using the given source and username;public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        Objects.requireNonNull(xContentType)__        username(username)__        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        Arrays.fill(passwordChars, (char) 0)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.PASSWORD_HASH.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        char[] passwordChars = parser.text().toCharArray()__                        passwordHash(passwordChars)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ROLES.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        roles(Strings.commaDelimitedListToStringArray(parser.text()))__                    } else {_                        roles(XContentUtils.readStringArray(parser, false))__                    }_                } else if (User.Fields.FULL_NAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        fullName(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.EMAIL.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        email(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.START_OBJECT) {_                        metadata(parser.map())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ENABLED.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_BOOLEAN) {_                        enabled(parser.booleanValue())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type boolean, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.USERNAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == Token.VALUE_STRING) {_                        if (username.equals(parser.text()) == false) {_                            throw new IllegalArgumentException("[username] in source does not match the username provided [" +_                                    username + "]")__                        }_                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse add user request. unexpected field [{}]", currentFieldName)__                }_            }_            return this__        }_    };populate,the,put,user,request,using,the,given,source,and,username;public,put,user,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,objects,require,non,null,x,content,type,username,username,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,char,password,chars,password,to,char,array,password,password,chars,hasher,arrays,fill,password,chars,char,0,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,char,password,chars,parser,text,to,char,array,password,hash,password,chars,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,roles,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,roles,strings,comma,delimited,list,to,string,array,parser,text,else,roles,xcontent,utils,read,string,array,parser,false,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,full,name,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,email,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,email,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,metadata,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,metadata,parser,map,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,object,but,found,instead,current,field,name,token,else,if,user,fields,enabled,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,enabled,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,boolean,but,found,instead,current,field,name,token,else,if,user,fields,username,match,current,field,name,parser,get,deprecation,handler,if,token,token,if,username,equals,parser,text,false,throw,new,illegal,argument,exception,username,in,source,does,not,match,the,username,provided,username,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,add,user,request,unexpected,field,current,field,name,return,this
PutUserRequestBuilder -> public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws         IOException;1542174391;Populate the put user request using the given source and username;public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType, Hasher hasher) throws_        IOException {_        Objects.requireNonNull(xContentType)__        username(username)__        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        char[] passwordChars = password.toCharArray()__                        password(passwordChars, hasher)__                        Arrays.fill(passwordChars, (char) 0)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.PASSWORD_HASH.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        char[] passwordChars = parser.text().toCharArray()__                        passwordHash(passwordChars, hasher)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ROLES.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        roles(Strings.commaDelimitedListToStringArray(parser.text()))__                    } else {_                        roles(XContentUtils.readStringArray(parser, false))__                    }_                } else if (User.Fields.FULL_NAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        fullName(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.EMAIL.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        email(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.START_OBJECT) {_                        metadata(parser.map())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ENABLED.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_BOOLEAN) {_                        enabled(parser.booleanValue())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type boolean, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.USERNAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == Token.VALUE_STRING) {_                        if (username.equals(parser.text()) == false) {_                            throw new IllegalArgumentException("[username] in source does not match the username provided [" +_                                    username + "]")__                        }_                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse add user request. unexpected field [{}]", currentFieldName)__                }_            }_            return this__        }_    };populate,the,put,user,request,using,the,given,source,and,username;public,put,user,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,hasher,hasher,throws,ioexception,objects,require,non,null,x,content,type,username,username,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,char,password,chars,password,to,char,array,password,password,chars,hasher,arrays,fill,password,chars,char,0,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,char,password,chars,parser,text,to,char,array,password,hash,password,chars,hasher,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,roles,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,roles,strings,comma,delimited,list,to,string,array,parser,text,else,roles,xcontent,utils,read,string,array,parser,false,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,full,name,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,email,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,email,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,metadata,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,metadata,parser,map,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,object,but,found,instead,current,field,name,token,else,if,user,fields,enabled,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,enabled,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,boolean,but,found,instead,current,field,name,token,else,if,user,fields,username,match,current,field,name,parser,get,deprecation,handler,if,token,token,if,username,equals,parser,text,false,throw,new,illegal,argument,exception,username,in,source,does,not,match,the,username,provided,username,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,add,user,request,unexpected,field,current,field,name,return,this
PutUserRequestBuilder -> public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException;1524684173;Populate the put user request using the given source and username;public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException {_        Objects.requireNonNull(xContentType)__        username(username)__        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        char[] passwordChars = password.toCharArray()__                        password(passwordChars)__                        Arrays.fill(passwordChars, (char) 0)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.PASSWORD_HASH.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        char[] passwordChars = parser.text().toCharArray()__                        passwordHash(passwordChars)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ROLES.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        roles(Strings.commaDelimitedListToStringArray(parser.text()))__                    } else {_                        roles(XContentUtils.readStringArray(parser, false))__                    }_                } else if (User.Fields.FULL_NAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        fullName(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.EMAIL.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        email(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.START_OBJECT) {_                        metadata(parser.map())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ENABLED.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_BOOLEAN) {_                        enabled(parser.booleanValue())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type boolean, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.USERNAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == Token.VALUE_STRING) {_                        if (username.equals(parser.text()) == false) {_                            throw new IllegalArgumentException("[username] in source does not match the username provided [" +_                                    username + "]")__                        }_                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse add user request. unexpected field [{}]", currentFieldName)__                }_            }_            return this__        }_    };populate,the,put,user,request,using,the,given,source,and,username;public,put,user,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,objects,require,non,null,x,content,type,username,username,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,char,password,chars,password,to,char,array,password,password,chars,arrays,fill,password,chars,char,0,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,char,password,chars,parser,text,to,char,array,password,hash,password,chars,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,roles,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,roles,strings,comma,delimited,list,to,string,array,parser,text,else,roles,xcontent,utils,read,string,array,parser,false,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,full,name,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,email,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,email,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,metadata,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,metadata,parser,map,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,object,but,found,instead,current,field,name,token,else,if,user,fields,enabled,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,enabled,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,boolean,but,found,instead,current,field,name,token,else,if,user,fields,username,match,current,field,name,parser,get,deprecation,handler,if,token,token,if,username,equals,parser,text,false,throw,new,illegal,argument,exception,username,in,source,does,not,match,the,username,provided,username,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,add,user,request,unexpected,field,current,field,name,return,this
PutUserRequestBuilder -> public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException;1527840262;Populate the put user request using the given source and username;public PutUserRequestBuilder source(String username, BytesReference source, XContentType xContentType) throws IOException {_        Objects.requireNonNull(xContentType)__        username(username)__        _        try (InputStream stream = source.streamInput()__             XContentParser parser = xContentType.xContent()_                .createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, stream)) {_            XContentUtils.verifyObject(parser)__            XContentParser.Token token__            String currentFieldName = null__            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {_                if (token == XContentParser.Token.FIELD_NAME) {_                    currentFieldName = parser.currentName()__                } else if (User.Fields.PASSWORD.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        String password = parser.text()__                        char[] passwordChars = password.toCharArray()__                        password(passwordChars)__                        Arrays.fill(passwordChars, (char) 0)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.PASSWORD_HASH.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        char[] passwordChars = parser.text().toCharArray()__                        passwordHash(passwordChars)__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ROLES.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        roles(Strings.commaDelimitedListToStringArray(parser.text()))__                    } else {_                        roles(XContentUtils.readStringArray(parser, false))__                    }_                } else if (User.Fields.FULL_NAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        fullName(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.EMAIL.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_STRING) {_                        email(parser.text())__                    } else if (token != XContentParser.Token.VALUE_NULL) {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.METADATA.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.START_OBJECT) {_                        metadata(parser.map())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type object, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.ENABLED.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == XContentParser.Token.VALUE_BOOLEAN) {_                        enabled(parser.booleanValue())__                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type boolean, but found [{}] instead", currentFieldName, token)__                    }_                } else if (User.Fields.USERNAME.match(currentFieldName, parser.getDeprecationHandler())) {_                    if (token == Token.VALUE_STRING) {_                        if (username.equals(parser.text()) == false) {_                            throw new IllegalArgumentException("[username] in source does not match the username provided [" +_                                    username + "]")__                        }_                    } else {_                        throw new ElasticsearchParseException(_                                "expected field [{}] to be of type string, but found [{}] instead", currentFieldName, token)__                    }_                } else {_                    throw new ElasticsearchParseException("failed to parse add user request. unexpected field [{}]", currentFieldName)__                }_            }_            return this__        }_    };populate,the,put,user,request,using,the,given,source,and,username;public,put,user,request,builder,source,string,username,bytes,reference,source,xcontent,type,x,content,type,throws,ioexception,objects,require,non,null,x,content,type,username,username,try,input,stream,stream,source,stream,input,xcontent,parser,parser,x,content,type,x,content,create,parser,named,xcontent,registry,empty,logging,deprecation,handler,instance,stream,xcontent,utils,verify,object,parser,xcontent,parser,token,token,string,current,field,name,null,while,token,parser,next,token,xcontent,parser,token,if,token,xcontent,parser,token,current,field,name,parser,current,name,else,if,user,fields,password,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,string,password,parser,text,char,password,chars,password,to,char,array,password,password,chars,arrays,fill,password,chars,char,0,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,char,password,chars,parser,text,to,char,array,password,hash,password,chars,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,roles,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,roles,strings,comma,delimited,list,to,string,array,parser,text,else,roles,xcontent,utils,read,string,array,parser,false,else,if,user,fields,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,full,name,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,email,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,email,parser,text,else,if,token,xcontent,parser,token,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,if,user,fields,metadata,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,metadata,parser,map,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,object,but,found,instead,current,field,name,token,else,if,user,fields,enabled,match,current,field,name,parser,get,deprecation,handler,if,token,xcontent,parser,token,enabled,parser,boolean,value,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,boolean,but,found,instead,current,field,name,token,else,if,user,fields,username,match,current,field,name,parser,get,deprecation,handler,if,token,token,if,username,equals,parser,text,false,throw,new,illegal,argument,exception,username,in,source,does,not,match,the,username,provided,username,else,throw,new,elasticsearch,parse,exception,expected,field,to,be,of,type,string,but,found,instead,current,field,name,token,else,throw,new,elasticsearch,parse,exception,failed,to,parse,add,user,request,unexpected,field,current,field,name,return,this
