commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public UpdateModelSnapshotAction.Response newResponse() {     return new Response(). }
false;public,static;3;10;;public static Request parseRequest(String jobId, String snapshotId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (jobId != null) {         request.jobId = jobId.     }     if (snapshotId != null) {         request.snapshotId = snapshotId.     }     return request. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public String getSnapshotId() {     return snapshotId. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
false;public;0;3;;public Boolean getRetain() {     return retain. }
false;public;1;3;;public void setRetain(Boolean retain) {     this.retain = retain. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     jobId = in.readString().     snapshotId = in.readString().     description = in.readOptionalString().     retain = in.readOptionalBoolean(). }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(jobId).     out.writeString(snapshotId).     out.writeOptionalString(description).     out.writeOptionalBoolean(retain). }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(ModelSnapshotField.SNAPSHOT_ID.getPreferredName(), snapshotId).     if (description != null) {         builder.field(ModelSnapshot.DESCRIPTION.getPreferredName(), description).     }     if (retain != null) {         builder.field(ModelSnapshot.RETAIN.getPreferredName(), retain).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobId, snapshotId, description, retain). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(jobId, other.jobId) && Objects.equals(snapshotId, other.snapshotId) && Objects.equals(description, other.description) && Objects.equals(retain, other.retain). }
false;public;0;3;;public ModelSnapshot getModel() {     return model. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     model = new ModelSnapshot(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     model.writeTo(out). }
false;public;0;4;;@Override public RestStatus status() {     return RestStatus.OK. }
false;public;2;9;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(ACKNOWLEDGED.getPreferredName(), true).     builder.field(MODEL.getPreferredName()).     builder = model.toXContent(builder, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(model). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(model, other.model). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
