commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Wraps a provided DirectoryReader, exposing a subset of fields.  * <p>  * Note that for convenience, the returned reader  * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})  * and so on.  * @param in reader to filter  * @param filter fields to filter.  */ ;/**  * Wraps a provided DirectoryReader, exposing a subset of fields.  * <p>  * Note that for convenience, the returned reader  * can be used normally (e.g. passed to {@link DirectoryReader#openIfChanged(DirectoryReader)})  * and so on.  * @param in reader to filter  * @param filter fields to filter.  */ public static DirectoryReader wrap(DirectoryReader in, CharacterRunAutomaton filter) throws IOException {     return new FieldSubsetDirectoryReader(in, filter). }
false;public;1;8;;@Override public LeafReader wrap(LeafReader reader) {     try {         return new FieldSubsetReader(reader, filter).     } catch (IOException e) {         throw new UncheckedIOException(e).     } }
false;protected;1;4;;@Override protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) throws IOException {     return new FieldSubsetDirectoryReader(in, filter). }
true;;0;3;/**  * Return the automaton that is used to filter fields.  */ ;/**  * Return the automaton that is used to filter fields.  */ CharacterRunAutomaton getFilter() {     return filter. }
false;private,static;1;11;;private static void verifyNoOtherFieldSubsetDirectoryReaderIsWrapped(DirectoryReader reader) {     if (reader instanceof FilterDirectoryReader) {         FilterDirectoryReader filterDirectoryReader = (FilterDirectoryReader) reader.         if (filterDirectoryReader instanceof FieldSubsetDirectoryReader) {             throw new IllegalArgumentException(LoggerMessageFormat.format("Can't wrap [{}] twice", FieldSubsetDirectoryReader.class)).         } else {             verifyNoOtherFieldSubsetDirectoryReaderIsWrapped(filterDirectoryReader.getDelegate()).         }     } }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return in.getReaderCacheHelper(). }
true;;1;3;/**  * returns true if this field is allowed.  */ ;/**  * returns true if this field is allowed.  */ boolean hasField(String field) {     return fieldInfos.fieldInfo(field) != null. }
false;public;0;4;;@Override public FieldInfos getFieldInfos() {     return fieldInfos. }
false;public;1;10;;@Override public Fields getTermVectors(int docID) throws IOException {     Fields f = super.getTermVectors(docID).     if (f == null) {         return null.     }     f = new FieldFilterFields(f).     // we need to check for emptyness, so we can return null:     return f.iterator().hasNext() ? f : null. }
true;static;3;35;/**  * Filter a map by a {@link CharacterRunAutomaton} that defines the fields to retain.  */ ;/**  * Filter a map by a {@link CharacterRunAutomaton} that defines the fields to retain.  */ static Map<String, Object> filter(Map<String, ?> map, CharacterRunAutomaton includeAutomaton, int initialState) {     Map<String, Object> filtered = new HashMap<>().     for (Map.Entry<String, ?> entry : map.entrySet()) {         String key = entry.getKey().         int state = step(includeAutomaton, key, initialState).         if (state == -1) {             continue.         }         Object value = entry.getValue().         if (value instanceof Map) {             state = includeAutomaton.step(state, '.').             if (state == -1) {                 continue.             }             Map<String, ?> mapValue = (Map<String, ?>) value.             Map<String, Object> filteredValue = filter(mapValue, includeAutomaton, state).             if (filteredValue.isEmpty() == false) {                 filtered.put(key, filteredValue).             }         } else if (value instanceof Iterable) {             Iterable<?> iterableValue = (Iterable<?>) value.             List<Object> filteredValue = filter(iterableValue, includeAutomaton, state).             if (filteredValue.isEmpty() == false) {                 filtered.put(key, filteredValue).             }         } else if (includeAutomaton.isAccept(state)) {             filtered.put(key, value).         }     }     return filtered. }
true;private,static;3;21;/**  * Filter a list by a {@link CharacterRunAutomaton} that defines the fields to retain.  */ ;/**  * Filter a list by a {@link CharacterRunAutomaton} that defines the fields to retain.  */ private static List<Object> filter(Iterable<?> iterable, CharacterRunAutomaton includeAutomaton, int initialState) {     List<Object> filtered = new ArrayList<>().     for (Object value : iterable) {         if (value instanceof Map) {             int state = includeAutomaton.step(initialState, '.').             if (state == -1) {                 continue.             }             Map<String, Object> filteredValue = filter((Map<String, ?>) value, includeAutomaton, state).             filtered.add(filteredValue).         } else if (value instanceof Iterable) {             List<Object> filteredValue = filter((Iterable<?>) value, includeAutomaton, initialState).             if (filteredValue.isEmpty() == false) {                 filtered.add(filteredValue).             }         } else if (includeAutomaton.isAccept(initialState)) {             filtered.add(value).         }     }     return filtered. }
true;private,static;3;6;/**  * Step through all characters of the provided string, and return the  *  resulting state, or -1 if that did not lead to a valid state.  */ ;/**  * Step through all characters of the provided string, and return the  *  resulting state, or -1 if that did not lead to a valid state.  */ private static int step(CharacterRunAutomaton automaton, String key, int state) {     for (int i = 0. state != -1 && i < key.length(). ++i) {         state = automaton.step(state, key.charAt(i)).     }     return state. }
false;public;2;13;;@Override public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {     if (SourceFieldMapper.NAME.equals(fieldInfo.name)) {         // for _source, parse, filter out the fields we care about, and serialize back downstream         BytesReference bytes = new BytesArray(value).         Tuple<XContentType, Map<String, Object>> result = XContentHelper.convertToMap(bytes, true).         Map<String, Object> transformedSource = filter(result.v2(), filter, 0).         XContentBuilder xContentBuilder = XContentBuilder.builder(result.v1().xContent()).map(transformedSource).         visitor.binaryField(fieldInfo, BytesReference.toBytes(BytesReference.bytes(xContentBuilder))).     } else {         visitor.binaryField(fieldInfo, value).     } }
false;public;2;4;;@Override public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {     visitor.stringField(fieldInfo, value). }
false;public;2;4;;@Override public void intField(FieldInfo fieldInfo, int value) throws IOException {     visitor.intField(fieldInfo, value). }
false;public;2;4;;@Override public void longField(FieldInfo fieldInfo, long value) throws IOException {     visitor.longField(fieldInfo, value). }
false;public;2;4;;@Override public void floatField(FieldInfo fieldInfo, float value) throws IOException {     visitor.floatField(fieldInfo, value). }
false;public;2;4;;@Override public void doubleField(FieldInfo fieldInfo, double value) throws IOException {     visitor.doubleField(fieldInfo, value). }
false;public;1;4;;@Override public Status needsField(FieldInfo fieldInfo) throws IOException {     return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO. }
false;public;2;48;;@Override public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {     super.document(docID, new StoredFieldVisitor() {          @Override         public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {             if (SourceFieldMapper.NAME.equals(fieldInfo.name)) {                 // for _source, parse, filter out the fields we care about, and serialize back downstream                 BytesReference bytes = new BytesArray(value).                 Tuple<XContentType, Map<String, Object>> result = XContentHelper.convertToMap(bytes, true).                 Map<String, Object> transformedSource = filter(result.v2(), filter, 0).                 XContentBuilder xContentBuilder = XContentBuilder.builder(result.v1().xContent()).map(transformedSource).                 visitor.binaryField(fieldInfo, BytesReference.toBytes(BytesReference.bytes(xContentBuilder))).             } else {                 visitor.binaryField(fieldInfo, value).             }         }          @Override         public void stringField(FieldInfo fieldInfo, byte[] value) throws IOException {             visitor.stringField(fieldInfo, value).         }          @Override         public void intField(FieldInfo fieldInfo, int value) throws IOException {             visitor.intField(fieldInfo, value).         }          @Override         public void longField(FieldInfo fieldInfo, long value) throws IOException {             visitor.longField(fieldInfo, value).         }          @Override         public void floatField(FieldInfo fieldInfo, float value) throws IOException {             visitor.floatField(fieldInfo, value).         }          @Override         public void doubleField(FieldInfo fieldInfo, double value) throws IOException {             visitor.doubleField(fieldInfo, value).         }          @Override         public Status needsField(FieldInfo fieldInfo) throws IOException {             return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO.         }     }). }
false;public;1;4;;@Override public Terms terms(String field) throws IOException {     return wrapTerms(super.terms(field), field). }
false;public;1;4;;@Override public NumericDocValues getNumericDocValues(String field) throws IOException {     return hasField(field) ? super.getNumericDocValues(field) : null. }
false;public;1;4;;@Override public BinaryDocValues getBinaryDocValues(String field) throws IOException {     return hasField(field) ? super.getBinaryDocValues(field) : null. }
false;public;1;4;;@Override public SortedDocValues getSortedDocValues(String field) throws IOException {     return hasField(field) ? super.getSortedDocValues(field) : null. }
false;public;1;4;;@Override public SortedNumericDocValues getSortedNumericDocValues(String field) throws IOException {     return hasField(field) ? super.getSortedNumericDocValues(field) : null. }
false;public;1;4;;@Override public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {     return hasField(field) ? super.getSortedSetDocValues(field) : null. }
false;public;1;4;;@Override public NumericDocValues getNormValues(String field) throws IOException {     return hasField(field) ? super.getNormValues(field) : null. }
false;public;0;4;;// we share core cache keys (for e.g. fielddata) @Override public CacheHelper getCoreCacheHelper() {     return in.getCoreCacheHelper(). }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return in.getReaderCacheHelper(). }
false;public;0;5;;@Override public int size() {     // this information is not cheap, return -1 like MultiFields does:     return -1. }
false;protected;1;4;;@Override protected boolean predicateFunction(String field) {     return hasField(field). }
false;public;0;9;;@Override public Iterator<String> iterator() {     return new FilterIterator<String, String>(super.iterator()) {          @Override         protected boolean predicateFunction(String field) {             return hasField(field).         }     }. }
false;public;1;4;;@Override public Terms terms(String field) throws IOException {     return wrapTerms(super.terms(field), field). }
false;private;2;12;;private Terms wrapTerms(Terms terms, String field) throws IOException {     if (!hasField(field)) {         return null.     } else if (FieldNamesFieldMapper.NAME.equals(field)) {         // so we hide terms for fields we filter out.         return fieldNamesFilterTerms.     } else {         return terms.     } }
false;public;0;4;;@Override public TermsEnum iterator() throws IOException {     return new FieldNamesTermsEnum(in.iterator()). }
false;public;0;4;;@Override public long size() throws IOException {     return size. }
false;public;0;4;;@Override public long getSumDocFreq() throws IOException {     return sumDocFreq. }
false;public;0;4;;@Override public long getSumTotalTermFreq() throws IOException {     return sumTotalFreq. }
false;public;0;5;;@Override public int getDocCount() throws IOException {     // it is costly to recompute this value so we assume that docCount == maxDoc.     return maxDoc(). }
true;;1;3;/**  * Return true if term is accepted (matches a field name in this reader).  */ ;/**  * Return true if term is accepted (matches a field name in this reader).  */ boolean accept(BytesRef term) {     return hasField(term.utf8ToString()). }
false;public;1;4;;@Override public boolean seekExact(BytesRef term) throws IOException {     return accept(term) && in.seekExact(term). }
false;public;2;7;;@Override public void seekExact(BytesRef term, TermState state) throws IOException {     if (accept(term) == false) {         throw new IllegalStateException("Tried to seek using a TermState from a different reader!").     }     in.seekExact(term, state). }
false;public;1;8;;@Override public SeekStatus seekCeil(BytesRef term) throws IOException {     SeekStatus status = in.seekCeil(term).     if (status == SeekStatus.END || accept(term())) {         return status.     }     return next() == null ? SeekStatus.END : SeekStatus.NOT_FOUND. }
false;public;0;10;;@Override public BytesRef next() throws IOException {     BytesRef next.     while ((next = in.next()) != null) {         if (accept(next)) {             break.         }     }     return next. }
false;public;1;4;;// we don't support ordinals, but _field_names is not used in this way @Override public void seekExact(long ord) throws IOException {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public long ord() throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;8;;@Override public PointValues getPointValues(String fieldName) throws IOException {     if (hasField(fieldName)) {         return super.getPointValues(fieldName).     } else {         return null.     } }
