commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String id() {     return id. }
false;public;0;3;;public Trigger trigger() {     return trigger. }
false;public;0;1;;public ExecutableInput input() {     return input. }
false;public;0;3;;public ExecutableCondition condition() {     return condition. }
false;public;0;3;;public ExecutableTransform transform() {     return transform. }
false;public;0;3;;public TimeValue throttlePeriod() {     return throttlePeriod. }
false;public;0;3;;public List<ActionWrapper> actions() {     return actions. }
false;public;0;3;;public Map<String, Object> metadata() {     return metadata. }
false;public;0;3;;public WatchStatus status() {     return status. }
true;public;0;3;/**  *  The sequence number of the document that was used to create this watch, {@link SequenceNumbers#UNASSIGNED_SEQ_NO}  *  if the watch wasn't read from a document  * *  */ ;/**  *  The sequence number of the document that was used to create this watch, {@link SequenceNumbers#UNASSIGNED_SEQ_NO}  *  if the watch wasn't read from a document  * *  */ public long getSourceSeqNo() {     return sourceSeqNo. }
true;public;0;3;/**  *  The primary term of the document that was used to create this watch, {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}  *  if the watch wasn't read from a document  * *  */ ;/**  *  The primary term of the document that was used to create this watch, {@link SequenceNumbers#UNASSIGNED_PRIMARY_TERM}  *  if the watch wasn't read from a document  * *  */ public long getSourcePrimaryTerm() {     return sourcePrimaryTerm. }
true;public;2;3;/**  * Sets the state of this watch to in/active  *  * @return  {@code true} if the status of this watch changed, {@code false} otherwise.  */ ;/**  * Sets the state of this watch to in/active  *  * @return  {@code true} if the status of this watch changed, {@code false} otherwise.  */ public boolean setState(boolean active, ZonedDateTime now) {     return status.setActive(active, now). }
true;public;2;3;/**  * Acks this watch.  *  * @return  {@code true} if the status of this watch changed, {@code false} otherwise.  */ ;/**  * Acks this watch.  *  * @return  {@code true} if the status of this watch changed, {@code false} otherwise.  */ public boolean ack(ZonedDateTime now, String... actions) {     return status.onAck(now, actions). }
false;public;1;4;;public boolean acked(String actionId) {     ActionStatus actionStatus = status.actionStatus(actionId).     return actionStatus.ackStatus().state() == ActionStatus.AckStatus.State.ACKED. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Watch watch = (Watch) o.     return watch.id.equals(id). }
false;public;0;4;;@Override public int hashCode() {     return id.hashCode(). }
false;public;2;27;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(WatchField.TRIGGER.getPreferredName()).startObject().field(trigger.type(), trigger, params).endObject().     builder.field(WatchField.INPUT.getPreferredName()).startObject().field(input.type(), input, params).endObject().     builder.field(WatchField.CONDITION.getPreferredName()).startObject().field(condition.type(), condition, params).endObject().     if (transform != null) {         builder.field(WatchField.TRANSFORM.getPreferredName()).startObject().field(transform.type(), transform, params).endObject().     }     if (throttlePeriod != null) {         builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(), WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(), throttlePeriod).     }     builder.startObject(WatchField.ACTIONS.getPreferredName()).     for (ActionWrapper action : actions) {         builder.field(action.id(), action, params).     }     builder.endObject().     if (metadata != null) {         builder.field(WatchField.METADATA.getPreferredName(), metadata).     }     if (params.paramAsBoolean(INCLUDE_STATUS_KEY, false)) {         builder.field(WatchField.STATUS.getPreferredName(), status, params).     }     builder.endObject().     return builder. }
