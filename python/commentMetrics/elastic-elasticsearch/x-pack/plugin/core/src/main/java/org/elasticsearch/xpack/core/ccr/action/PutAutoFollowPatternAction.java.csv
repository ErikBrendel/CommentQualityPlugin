commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public AcknowledgedResponse newResponse() {     return new AcknowledgedResponse(). }
false;public,static;2;10;;public static Request fromXContent(XContentParser parser, String name) throws IOException {     PutAutoFollowPatternParameters parameters = PARSER.parse(parser, null).     Request request = new Request().     request.setName(name).     request.setRemoteCluster(parameters.remoteCluster).     request.setLeaderIndexPatterns(parameters.leaderIndexPatterns).     request.setFollowIndexNamePattern(parameters.followIndexNamePattern).     request.setParameters(parameters).     return request. }
false;public;0;29;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = parameters.validate().     if (name == null) {         validationException = addValidationError("[name] is missing", validationException).     }     if (name != null) {         if (name.contains(",")) {             validationException = addValidationError("[name] name must not contain a ','", validationException).         }         if (name.startsWith("_")) {             validationException = addValidationError("[name] name must not start with '_'", validationException).         }         int byteCount = name.getBytes(StandardCharsets.UTF_8).length.         if (byteCount > MAX_NAME_BYTES) {             validationException = addValidationError("[name] name is too long (" + byteCount + " > " + MAX_NAME_BYTES + ")", validationException).         }     }     if (remoteCluster == null) {         validationException = addValidationError("[" + REMOTE_CLUSTER_FIELD.getPreferredName() + "] is missing", validationException).     }     if (leaderIndexPatterns == null || leaderIndexPatterns.isEmpty()) {         validationException = addValidationError("[" + AutoFollowPattern.LEADER_PATTERNS_FIELD.getPreferredName() + "] is missing", validationException).     }     return validationException. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getRemoteCluster() {     return remoteCluster. }
false;public;1;3;;public void setRemoteCluster(String remoteCluster) {     this.remoteCluster = remoteCluster. }
false;public;0;3;;public List<String> getLeaderIndexPatterns() {     return leaderIndexPatterns. }
false;public;1;3;;public void setLeaderIndexPatterns(List<String> leaderIndexPatterns) {     this.leaderIndexPatterns = leaderIndexPatterns. }
false;public;0;3;;public String getFollowIndexNamePattern() {     return followIndexNamePattern. }
false;public;1;3;;public void setFollowIndexNamePattern(String followIndexNamePattern) {     this.followIndexNamePattern = followIndexNamePattern. }
false;public;0;3;;public FollowParameters getParameters() {     return parameters. }
false;public;1;3;;public void setParameters(FollowParameters parameters) {     this.parameters = parameters. }
false;public;1;22;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(name).     out.writeString(remoteCluster).     out.writeStringCollection(leaderIndexPatterns).     out.writeOptionalString(followIndexNamePattern).     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         parameters.writeTo(out).     } else {         out.writeOptionalVInt(parameters.maxReadRequestOperationCount).         out.writeOptionalWriteable(parameters.maxReadRequestSize).         out.writeOptionalVInt(parameters.maxOutstandingReadRequests).         out.writeOptionalVInt(parameters.maxWriteRequestOperationCount).         out.writeOptionalWriteable(parameters.maxWriteRequestSize).         out.writeOptionalVInt(parameters.maxOutstandingWriteRequests).         out.writeOptionalVInt(parameters.maxWriteBufferCount).         out.writeOptionalWriteable(parameters.maxWriteBufferSize).         out.writeOptionalTimeValue(parameters.maxRetryDelay).         out.writeOptionalTimeValue(parameters.readPollTimeout).     } }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         builder.field(REMOTE_CLUSTER_FIELD.getPreferredName(), remoteCluster).         builder.field(AutoFollowPattern.LEADER_PATTERNS_FIELD.getPreferredName(), leaderIndexPatterns).         if (followIndexNamePattern != null) {             builder.field(AutoFollowPattern.FOLLOW_PATTERN_FIELD.getPreferredName(), followIndexNamePattern).         }         parameters.toXContentFragment(builder).     }     builder.endObject().     return builder. }
false;public;1;11;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Request request = (Request) o.     return Objects.equals(name, request.name) && Objects.equals(remoteCluster, request.remoteCluster) && Objects.equals(leaderIndexPatterns, request.leaderIndexPatterns) && Objects.equals(followIndexNamePattern, request.followIndexNamePattern) && Objects.equals(parameters, request.parameters). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(name, remoteCluster, leaderIndexPatterns, followIndexNamePattern, parameters). }
