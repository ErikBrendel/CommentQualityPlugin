commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;1;9;;@Override public boolean match(Task task) {     // If we are retrieving all the transforms, the task description does not contain the id     if (id.equals(MetaData.ALL)) {         return task.getDescription().startsWith(DataFrameField.PERSISTENT_TASK_DESCRIPTION_PREFIX).     }     // Otherwise find the task by ID     return task.getDescription().equals(DataFrameField.PERSISTENT_TASK_DESCRIPTION_PREFIX + id). }
false;public;0;3;;public String getId() {     return id. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(id). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(DataFrameField.ID.getPreferredName(), id).     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(id, other.id). }
false;public;0;3;;public List<DataFrameTransformConfig> getTransformConfigurations() {     return transformConfigurations. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     transformConfigurations = in.readList(DataFrameTransformConfig::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(transformConfigurations). }
false;public;2;26;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     List<String> invalidTransforms = new ArrayList<>().     builder.startObject().     builder.field(DataFrameField.COUNT.getPreferredName(), transformConfigurations.size()).     // XContentBuilder does not support passing the params object for Iterables     builder.field(DataFrameField.TRANSFORMS.getPreferredName()).     builder.startArray().     for (DataFrameTransformConfig configResponse : transformConfigurations) {         configResponse.toXContent(builder, params).         if (configResponse.isValid() == false) {             invalidTransforms.add(configResponse.getId()).         }     }     builder.endArray().     if (invalidTransforms.isEmpty() == false) {         builder.startObject(INVALID_TRANSFORMS.getPreferredName()).         builder.field(DataFrameField.COUNT.getPreferredName(), invalidTransforms.size()).         builder.field(DataFrameField.TRANSFORMS.getPreferredName(), invalidTransforms).         builder.endObject().         deprecationLogger.deprecated(INVALID_TRANSFORMS_DEPRECATION_WARNING, invalidTransforms.size()).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(transformConfigurations). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final Response that = (Response) other.     return Objects.equals(this.transformConfigurations, that.transformConfigurations). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
