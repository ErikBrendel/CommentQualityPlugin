# id;timestamp;commentText;codeText;commentWords;codeWords
Hasher -> public static boolean verifyHash(SecureString data, char[] hash);1531179852;Verifies that the cryptographic hash of {@code data} is the same as {@code hash}. The_hashing algorithm and its parameters(cost factor-iterations, salt) are deduced from the_hash itself. The {@code hash} char array is not cleared after verification.__@param data the SecureString to be hashed and verified_@param hash the char array with the hash against which the string is verified_@return true if the hash corresponds to the data, false otherwise;public static boolean verifyHash(SecureString data, char[] hash) {_        final Hasher hasher = resolveFromHash(hash)__        return hasher.verify(data, hash)__    };verifies,that,the,cryptographic,hash,of,code,data,is,the,same,as,code,hash,the,hashing,algorithm,and,its,parameters,cost,factor,iterations,salt,are,deduced,from,the,hash,itself,the,code,hash,char,array,is,not,cleared,after,verification,param,data,the,secure,string,to,be,hashed,and,verified,param,hash,the,char,array,with,the,hash,against,which,the,string,is,verified,return,true,if,the,hash,corresponds,to,the,data,false,otherwise;public,static,boolean,verify,hash,secure,string,data,char,hash,final,hasher,hasher,resolve,from,hash,hash,return,hasher,verify,data,hash
Hasher -> public static boolean verifyHash(SecureString data, char[] hash);1534434117;Verifies that the cryptographic hash of {@code data} is the same as {@code hash}. The_hashing algorithm and its parameters(cost factor-iterations, salt) are deduced from the_hash itself. The {@code hash} char array is not cleared after verification.__@param data the SecureString to be hashed and verified_@param hash the char array with the hash against which the string is verified_@return true if the hash corresponds to the data, false otherwise;public static boolean verifyHash(SecureString data, char[] hash) {_        final Hasher hasher = resolveFromHash(hash)__        return hasher.verify(data, hash)__    };verifies,that,the,cryptographic,hash,of,code,data,is,the,same,as,code,hash,the,hashing,algorithm,and,its,parameters,cost,factor,iterations,salt,are,deduced,from,the,hash,itself,the,code,hash,char,array,is,not,cleared,after,verification,param,data,the,secure,string,to,be,hashed,and,verified,param,hash,the,char,array,with,the,hash,against,which,the,string,is,verified,return,true,if,the,hash,corresponds,to,the,data,false,otherwise;public,static,boolean,verify,hash,secure,string,data,char,hash,final,hasher,hasher,resolve,from,hash,hash,return,hasher,verify,data,hash
Hasher -> private static byte[] generateSalt(int length);1531179852;Generates an array of {@code length} random bytes using {@link java.security.SecureRandom};private static byte[] generateSalt(int length) {_        byte[] salt = new byte[length]__        SECURE_RANDOM.nextBytes(salt)__        return salt__    };generates,an,array,of,code,length,random,bytes,using,link,java,security,secure,random;private,static,byte,generate,salt,int,length,byte,salt,new,byte,length,next,bytes,salt,return,salt
Hasher -> private static byte[] generateSalt(int length);1534434117;Generates an array of {@code length} random bytes using {@link java.security.SecureRandom};private static byte[] generateSalt(int length) {_        byte[] salt = new byte[length]__        SECURE_RANDOM.nextBytes(salt)__        return salt__    };generates,an,array,of,code,length,random,bytes,using,link,java,security,secure,random;private,static,byte,generate,salt,int,length,byte,salt,new,byte,length,next,bytes,salt,return,salt
Hasher -> public static Hasher resolve(String name);1531179852;Returns a {@link Hasher} instance of the appropriate algorithm and associated cost as_indicated by the {@code name}. Name identifiers for the default costs for_BCRYPT and PBKDF2 return the he default BCRYPT and PBKDF2 Hasher instead of the specific_instances for the associated cost.__@param name The name of the algorithm and cost combination identifier_@return the hasher associated with the identifier;public static Hasher resolve(String name) {_        switch (name.toLowerCase(Locale.ROOT)) {_            case "bcrypt":_                return BCRYPT__            case "bcrypt4":_                return BCRYPT4__            case "bcrypt5":_                return BCRYPT5__            case "bcrypt6":_                return BCRYPT6__            case "bcrypt7":_                return BCRYPT7__            case "bcrypt8":_                return BCRYPT8__            case "bcrypt9":_                return BCRYPT9__            case "bcrypt10":_                return BCRYPT__            case "bcrypt11":_                return BCRYPT11__            case "bcrypt12":_                return BCRYPT12__            case "bcrypt13":_                return BCRYPT13__            case "bcrypt14":_                return BCRYPT14__            case "pbkdf2":_                return PBKDF2__            case "pbkdf2_1000":_                return PBKDF2_1000__            case "pbkdf2_10000":_                return PBKDF2__            case "pbkdf2_50000":_                return PBKDF2_50000__            case "pbkdf2_100000":_                return PBKDF2_100000__            case "pbkdf2_500000":_                return PBKDF2_500000__            case "pbkdf2_1000000":_                return PBKDF2_1000000__            case "sha1":_                return SHA1__            case "md5":_                return MD5__            case "ssha256":_                return SSHA256__            case "noop":_            case "clear_text":_                return NOOP__            default:_                throw new IllegalArgumentException("unknown hash function [" + name + "]")__        }_    };returns,a,link,hasher,instance,of,the,appropriate,algorithm,and,associated,cost,as,indicated,by,the,code,name,name,identifiers,for,the,default,costs,for,bcrypt,and,pbkdf2,return,the,he,default,bcrypt,and,pbkdf2,hasher,instead,of,the,specific,instances,for,the,associated,cost,param,name,the,name,of,the,algorithm,and,cost,combination,identifier,return,the,hasher,associated,with,the,identifier;public,static,hasher,resolve,string,name,switch,name,to,lower,case,locale,root,case,bcrypt,return,bcrypt,case,bcrypt4,return,bcrypt4,case,bcrypt5,return,bcrypt5,case,bcrypt6,return,bcrypt6,case,bcrypt7,return,bcrypt7,case,bcrypt8,return,bcrypt8,case,bcrypt9,return,bcrypt9,case,bcrypt10,return,bcrypt,case,bcrypt11,return,bcrypt11,case,bcrypt12,return,bcrypt12,case,bcrypt13,return,bcrypt13,case,bcrypt14,return,bcrypt14,case,pbkdf2,return,pbkdf2,case,return,case,return,pbkdf2,case,return,case,return,case,return,case,return,case,sha1,return,sha1,case,md5,return,md5,case,ssha256,return,ssha256,case,noop,case,return,noop,default,throw,new,illegal,argument,exception,unknown,hash,function,name
Hasher -> public static Hasher resolve(String name);1534434117;Returns a {@link Hasher} instance of the appropriate algorithm and associated cost as_indicated by the {@code name}. Name identifiers for the default costs for_BCRYPT and PBKDF2 return the he default BCRYPT and PBKDF2 Hasher instead of the specific_instances for the associated cost.__@param name The name of the algorithm and cost combination identifier_@return the hasher associated with the identifier;public static Hasher resolve(String name) {_        switch (name.toLowerCase(Locale.ROOT)) {_            case "bcrypt":_                return BCRYPT__            case "bcrypt4":_                return BCRYPT4__            case "bcrypt5":_                return BCRYPT5__            case "bcrypt6":_                return BCRYPT6__            case "bcrypt7":_                return BCRYPT7__            case "bcrypt8":_                return BCRYPT8__            case "bcrypt9":_                return BCRYPT9__            case "bcrypt10":_                return BCRYPT__            case "bcrypt11":_                return BCRYPT11__            case "bcrypt12":_                return BCRYPT12__            case "bcrypt13":_                return BCRYPT13__            case "bcrypt14":_                return BCRYPT14__            case "pbkdf2":_                return PBKDF2__            case "pbkdf2_1000":_                return PBKDF2_1000__            case "pbkdf2_10000":_                return PBKDF2__            case "pbkdf2_50000":_                return PBKDF2_50000__            case "pbkdf2_100000":_                return PBKDF2_100000__            case "pbkdf2_500000":_                return PBKDF2_500000__            case "pbkdf2_1000000":_                return PBKDF2_1000000__            case "sha1":_                return SHA1__            case "md5":_                return MD5__            case "ssha256":_                return SSHA256__            case "noop":_            case "clear_text":_                return NOOP__            default:_                throw new IllegalArgumentException("unknown hash function [" + name + "]")__        }_    };returns,a,link,hasher,instance,of,the,appropriate,algorithm,and,associated,cost,as,indicated,by,the,code,name,name,identifiers,for,the,default,costs,for,bcrypt,and,pbkdf2,return,the,he,default,bcrypt,and,pbkdf2,hasher,instead,of,the,specific,instances,for,the,associated,cost,param,name,the,name,of,the,algorithm,and,cost,combination,identifier,return,the,hasher,associated,with,the,identifier;public,static,hasher,resolve,string,name,switch,name,to,lower,case,locale,root,case,bcrypt,return,bcrypt,case,bcrypt4,return,bcrypt4,case,bcrypt5,return,bcrypt5,case,bcrypt6,return,bcrypt6,case,bcrypt7,return,bcrypt7,case,bcrypt8,return,bcrypt8,case,bcrypt9,return,bcrypt9,case,bcrypt10,return,bcrypt,case,bcrypt11,return,bcrypt11,case,bcrypt12,return,bcrypt12,case,bcrypt13,return,bcrypt13,case,bcrypt14,return,bcrypt14,case,pbkdf2,return,pbkdf2,case,return,case,return,pbkdf2,case,return,case,return,case,return,case,return,case,sha1,return,sha1,case,md5,return,md5,case,ssha256,return,ssha256,case,noop,case,return,noop,default,throw,new,illegal,argument,exception,unknown,hash,function,name
Hasher -> public static Hasher resolveFromHash(char[] hash);1531179852;Returns a {@link Hasher} instance that can be used to verify the {@code hash} by inspecting the_hash prefix and determining the algorithm used for its generation. If no specific algorithm_prefix, can be determined {@code Hasher.NOOP} is returned.__@param hash the char array from which the hashing algorithm is to be deduced_@return the hasher that can be used for validation;public static Hasher resolveFromHash(char[] hash) {_        if (CharArrays.charsBeginsWith(BCRYPT_PREFIX, hash)) {_            int cost = Integer.parseInt(new String(Arrays.copyOfRange(hash, BCRYPT_PREFIX.length(), hash.length - 54)))__            return cost == BCRYPT_DEFAULT_COST ? Hasher.BCRYPT : resolve("bcrypt" + cost)__        } else if (CharArrays.charsBeginsWith(PBKDF2_PREFIX, hash)) {_            int cost = Integer.parseInt(new String(Arrays.copyOfRange(hash, PBKDF2_PREFIX.length(), hash.length - 90)))__            return cost == PBKDF2_DEFAULT_COST ? Hasher.PBKDF2 : resolve("pbkdf2_" + cost)__        } else if (CharArrays.charsBeginsWith(SHA1_PREFIX, hash)) {_            return Hasher.SHA1__        } else if (CharArrays.charsBeginsWith(MD5_PREFIX, hash)) {_            return Hasher.MD5__        } else if (CharArrays.charsBeginsWith(SSHA256_PREFIX, hash)) {_            return Hasher.SSHA256__        } else {_            _            return Hasher.NOOP__        }_    };returns,a,link,hasher,instance,that,can,be,used,to,verify,the,code,hash,by,inspecting,the,hash,prefix,and,determining,the,algorithm,used,for,its,generation,if,no,specific,algorithm,prefix,can,be,determined,code,hasher,noop,is,returned,param,hash,the,char,array,from,which,the,hashing,algorithm,is,to,be,deduced,return,the,hasher,that,can,be,used,for,validation;public,static,hasher,resolve,from,hash,char,hash,if,char,arrays,chars,begins,with,hash,int,cost,integer,parse,int,new,string,arrays,copy,of,range,hash,length,hash,length,54,return,cost,hasher,bcrypt,resolve,bcrypt,cost,else,if,char,arrays,chars,begins,with,hash,int,cost,integer,parse,int,new,string,arrays,copy,of,range,hash,length,hash,length,90,return,cost,hasher,pbkdf2,resolve,cost,else,if,char,arrays,chars,begins,with,hash,return,hasher,sha1,else,if,char,arrays,chars,begins,with,hash,return,hasher,md5,else,if,char,arrays,chars,begins,with,hash,return,hasher,ssha256,else,return,hasher,noop
Hasher -> public static Hasher resolveFromHash(char[] hash);1534434117;Returns a {@link Hasher} instance that can be used to verify the {@code hash} by inspecting the_hash prefix and determining the algorithm used for its generation. If no specific algorithm_prefix, can be determined {@code Hasher.NOOP} is returned.__@param hash the char array from which the hashing algorithm is to be deduced_@return the hasher that can be used for validation;public static Hasher resolveFromHash(char[] hash) {_        if (CharArrays.charsBeginsWith(BCRYPT_PREFIX, hash)) {_            int cost = Integer.parseInt(new String(Arrays.copyOfRange(hash, BCRYPT_PREFIX.length(), hash.length - 54)))__            return cost == BCRYPT_DEFAULT_COST ? Hasher.BCRYPT : resolve("bcrypt" + cost)__        } else if (CharArrays.charsBeginsWith(PBKDF2_PREFIX, hash)) {_            int cost = Integer.parseInt(new String(Arrays.copyOfRange(hash, PBKDF2_PREFIX.length(), hash.length - 90)))__            return cost == PBKDF2_DEFAULT_COST ? Hasher.PBKDF2 : resolve("pbkdf2_" + cost)__        } else if (CharArrays.charsBeginsWith(SHA1_PREFIX, hash)) {_            return Hasher.SHA1__        } else if (CharArrays.charsBeginsWith(MD5_PREFIX, hash)) {_            return Hasher.MD5__        } else if (CharArrays.charsBeginsWith(SSHA256_PREFIX, hash)) {_            return Hasher.SSHA256__        } else {_            _            return Hasher.NOOP__        }_    };returns,a,link,hasher,instance,that,can,be,used,to,verify,the,code,hash,by,inspecting,the,hash,prefix,and,determining,the,algorithm,used,for,its,generation,if,no,specific,algorithm,prefix,can,be,determined,code,hasher,noop,is,returned,param,hash,the,char,array,from,which,the,hashing,algorithm,is,to,be,deduced,return,the,hasher,that,can,be,used,for,validation;public,static,hasher,resolve,from,hash,char,hash,if,char,arrays,chars,begins,with,hash,int,cost,integer,parse,int,new,string,arrays,copy,of,range,hash,length,hash,length,54,return,cost,hasher,bcrypt,resolve,bcrypt,cost,else,if,char,arrays,chars,begins,with,hash,int,cost,integer,parse,int,new,string,arrays,copy,of,range,hash,length,hash,length,90,return,cost,hasher,pbkdf2,resolve,cost,else,if,char,arrays,chars,begins,with,hash,return,hasher,sha1,else,if,char,arrays,chars,begins,with,hash,return,hasher,md5,else,if,char,arrays,chars,begins,with,hash,return,hasher,ssha256,else,return,hasher,noop
Hasher -> public static List<String> getAvailableAlgoStoredHash();1531179852;Returns a list of lower case String identifiers for the Hashing algorithm and parameter_combinations that can be used for password hashing. The identifiers can be used to get_an instance of the appropriate {@link Hasher} by using {@link #resolve(String) resolve()};public static List<String> getAvailableAlgoStoredHash() {_        return Arrays.stream(Hasher.values()).map(Hasher::name).map(name -> name.toLowerCase(Locale.ROOT))_            .filter(name -> (name.startsWith("pbkdf2") || name.startsWith("bcrypt")))_            .collect(Collectors.toList())__    };returns,a,list,of,lower,case,string,identifiers,for,the,hashing,algorithm,and,parameter,combinations,that,can,be,used,for,password,hashing,the,identifiers,can,be,used,to,get,an,instance,of,the,appropriate,link,hasher,by,using,link,resolve,string,resolve;public,static,list,string,get,available,algo,stored,hash,return,arrays,stream,hasher,values,map,hasher,name,map,name,name,to,lower,case,locale,root,filter,name,name,starts,with,pbkdf2,name,starts,with,bcrypt,collect,collectors,to,list
Hasher -> public static List<String> getAvailableAlgoStoredHash();1534434117;Returns a list of lower case String identifiers for the Hashing algorithm and parameter_combinations that can be used for password hashing. The identifiers can be used to get_an instance of the appropriate {@link Hasher} by using {@link #resolve(String) resolve()};public static List<String> getAvailableAlgoStoredHash() {_        return Arrays.stream(Hasher.values()).map(Hasher::name).map(name -> name.toLowerCase(Locale.ROOT))_            .filter(name -> (name.startsWith("pbkdf2") || name.startsWith("bcrypt")))_            .collect(Collectors.toList())__    };returns,a,list,of,lower,case,string,identifiers,for,the,hashing,algorithm,and,parameter,combinations,that,can,be,used,for,password,hashing,the,identifiers,can,be,used,to,get,an,instance,of,the,appropriate,link,hasher,by,using,link,resolve,string,resolve;public,static,list,string,get,available,algo,stored,hash,return,arrays,stream,hasher,values,map,hasher,name,map,name,name,to,lower,case,locale,root,filter,name,name,starts,with,pbkdf2,name,starts,with,bcrypt,collect,collectors,to,list
