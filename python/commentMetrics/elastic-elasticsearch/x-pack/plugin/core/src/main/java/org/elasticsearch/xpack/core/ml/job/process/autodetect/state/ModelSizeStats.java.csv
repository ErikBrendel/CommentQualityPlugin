commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;20;;private static ConstructingObjectParser<Builder, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<Builder, Void> parser = new ConstructingObjectParser<>(RESULT_TYPE_FIELD.getPreferredName(), ignoreUnknownFields, a -> new Builder((String) a[0])).     parser.declareString(ConstructingObjectParser.constructorArg(), Job.ID).     parser.declareString((modelSizeStat, s) -> {     }, Result.RESULT_TYPE).     parser.declareLong(Builder::setModelBytes, MODEL_BYTES_FIELD).     parser.declareLong(Builder::setBucketAllocationFailuresCount, BUCKET_ALLOCATION_FAILURES_COUNT_FIELD).     parser.declareLong(Builder::setTotalByFieldCount, TOTAL_BY_FIELD_COUNT_FIELD).     parser.declareLong(Builder::setTotalOverFieldCount, TOTAL_OVER_FIELD_COUNT_FIELD).     parser.declareLong(Builder::setTotalPartitionFieldCount, TOTAL_PARTITION_FIELD_COUNT_FIELD).     parser.declareField(Builder::setLogTime, p -> TimeUtils.parseTimeField(p, LOG_TIME_FIELD.getPreferredName()), LOG_TIME_FIELD, ValueType.VALUE).     parser.declareField(Builder::setTimestamp, p -> TimeUtils.parseTimeField(p, TIMESTAMP_FIELD.getPreferredName()), TIMESTAMP_FIELD, ValueType.VALUE).     BiConsumer<Builder, MemoryStatus> setMemoryStatus = Builder::setMemoryStatus.     parser.declareField(setMemoryStatus, p -> MemoryStatus.fromString(p.text()), MEMORY_STATUS_FIELD, ValueType.STRING).     return parser. }
false;public,static;1;3;;public static MemoryStatus fromString(String statusName) {     return valueOf(statusName.trim().toUpperCase(Locale.ROOT)). }
false;public,static;1;3;;public static MemoryStatus readFromStream(StreamInput in) throws IOException {     return in.readEnum(MemoryStatus.class). }
false;public;1;4;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeEnum(this). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
false;public;0;3;;public String getId() {     return documentIdPrefix(jobId) + logTime.getTime(). }
false;public,static;1;3;;public static String documentIdPrefix(String jobId) {     return jobId + "_model_size_stats_". }
false;public;1;16;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(jobId).     out.writeVLong(modelBytes).     out.writeVLong(totalByFieldCount).     out.writeVLong(totalOverFieldCount).     out.writeVLong(totalPartitionFieldCount).     out.writeVLong(bucketAllocationFailuresCount).     memoryStatus.writeTo(out).     out.writeVLong(logTime.getTime()).     boolean hasTimestamp = timestamp != null.     out.writeBoolean(hasTimestamp).     if (hasTimestamp) {         out.writeVLong(timestamp.getTime()).     } }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     doXContentBody(builder).     builder.endObject().     return builder. }
false;public;1;16;;public XContentBuilder doXContentBody(XContentBuilder builder) throws IOException {     builder.field(Job.ID.getPreferredName(), jobId).     builder.field(Result.RESULT_TYPE.getPreferredName(), RESULT_TYPE_VALUE).     builder.field(MODEL_BYTES_FIELD.getPreferredName(), modelBytes).     builder.field(TOTAL_BY_FIELD_COUNT_FIELD.getPreferredName(), totalByFieldCount).     builder.field(TOTAL_OVER_FIELD_COUNT_FIELD.getPreferredName(), totalOverFieldCount).     builder.field(TOTAL_PARTITION_FIELD_COUNT_FIELD.getPreferredName(), totalPartitionFieldCount).     builder.field(BUCKET_ALLOCATION_FAILURES_COUNT_FIELD.getPreferredName(), bucketAllocationFailuresCount).     builder.field(MEMORY_STATUS_FIELD.getPreferredName(), memoryStatus).     builder.timeField(LOG_TIME_FIELD.getPreferredName(), LOG_TIME_FIELD.getPreferredName() + "_string", logTime.getTime()).     if (timestamp != null) {         builder.timeField(TIMESTAMP_FIELD.getPreferredName(), TIMESTAMP_FIELD.getPreferredName() + "_string", timestamp.getTime()).     }     return builder. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;0;3;;public long getModelBytes() {     return modelBytes. }
false;public;0;3;;public long getTotalByFieldCount() {     return totalByFieldCount. }
false;public;0;3;;public long getTotalPartitionFieldCount() {     return totalPartitionFieldCount. }
false;public;0;3;;public long getTotalOverFieldCount() {     return totalOverFieldCount. }
false;public;0;3;;public long getBucketAllocationFailuresCount() {     return bucketAllocationFailuresCount. }
false;public;0;3;;public MemoryStatus getMemoryStatus() {     return memoryStatus. }
true;public;0;3;/**  * The timestamp of the last processed record when this instance was created.  * @return The record time  */ ;/**  * The timestamp of the last processed record when this instance was created.  * @return The record time  */ public Date getTimestamp() {     return timestamp. }
true;public;0;3;/**  * The wall clock time at the point when this instance was created.  * @return The wall clock time  */ ;/**  * The wall clock time at the point when this instance was created.  * @return The wall clock time  */ public Date getLogTime() {     return logTime. }
false;public;0;6;;@Override public int hashCode() {     // this.id excluded here as it is generated by the datastore     return Objects.hash(jobId, modelBytes, totalByFieldCount, totalOverFieldCount, totalPartitionFieldCount, this.bucketAllocationFailuresCount, memoryStatus, timestamp, logTime). }
true;public;1;19;/**  * Compare all the fields.  */ ;/**  * Compare all the fields.  */ @Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other instanceof ModelSizeStats == false) {         return false.     }     ModelSizeStats that = (ModelSizeStats) other.     return this.modelBytes == that.modelBytes && this.totalByFieldCount == that.totalByFieldCount && this.totalOverFieldCount == that.totalOverFieldCount && this.totalPartitionFieldCount == that.totalPartitionFieldCount && this.bucketAllocationFailuresCount == that.bucketAllocationFailuresCount && Objects.equals(this.memoryStatus, that.memoryStatus) && Objects.equals(this.timestamp, that.timestamp) && Objects.equals(this.logTime, that.logTime) && Objects.equals(this.jobId, that.jobId). }
false;public;1;4;;public Builder setModelBytes(long modelBytes) {     this.modelBytes = modelBytes.     return this. }
false;public;1;4;;public Builder setTotalByFieldCount(long totalByFieldCount) {     this.totalByFieldCount = totalByFieldCount.     return this. }
false;public;1;4;;public Builder setTotalPartitionFieldCount(long totalPartitionFieldCount) {     this.totalPartitionFieldCount = totalPartitionFieldCount.     return this. }
false;public;1;4;;public Builder setTotalOverFieldCount(long totalOverFieldCount) {     this.totalOverFieldCount = totalOverFieldCount.     return this. }
false;public;1;4;;public Builder setBucketAllocationFailuresCount(long bucketAllocationFailuresCount) {     this.bucketAllocationFailuresCount = bucketAllocationFailuresCount.     return this. }
false;public;1;5;;public Builder setMemoryStatus(MemoryStatus memoryStatus) {     Objects.requireNonNull(memoryStatus, "[" + MEMORY_STATUS_FIELD.getPreferredName() + "] must not be null").     this.memoryStatus = memoryStatus.     return this. }
false;public;1;4;;public Builder setTimestamp(Date timestamp) {     this.timestamp = timestamp.     return this. }
false;public;1;4;;public Builder setLogTime(Date logTime) {     this.logTime = logTime.     return this. }
false;public;0;4;;public ModelSizeStats build() {     return new ModelSizeStats(jobId, modelBytes, totalByFieldCount, totalOverFieldCount, totalPartitionFieldCount, bucketAllocationFailuresCount, memoryStatus, timestamp, logTime). }
