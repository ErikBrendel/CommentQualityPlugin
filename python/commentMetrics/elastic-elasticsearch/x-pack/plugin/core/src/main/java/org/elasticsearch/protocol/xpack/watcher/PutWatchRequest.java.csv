commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     id = in.readString().     source = in.readBytesReference().     active = in.readBoolean().     xContentType = in.readEnum(XContentType.class).     version = in.readZLong().     ifSeqNo = in.readZLong().     ifPrimaryTerm = in.readVLong(). }
false;public;1;11;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(id).     out.writeBytesReference(source).     out.writeBoolean(active).     out.writeEnum(xContentType).     out.writeZLong(version).     out.writeZLong(ifSeqNo).     out.writeVLong(ifPrimaryTerm). }
true;public;0;3;/**  * @return The name that will be the ID of the indexed document  */ ;/**  * @return The name that will be the ID of the indexed document  */ public String getId() {     return id. }
true;public;1;3;/**  * Set the watch name  */ ;/**  * Set the watch name  */ public void setId(String id) {     this.id = id. }
true;public;0;3;/**  * @return The source of the watch  */ ;/**  * @return The source of the watch  */ public BytesReference getSource() {     return source. }
true;public;2;4;/**  * Set the source of the watch  */ ;/**  * Set the source of the watch  */ public void setSource(BytesReference source, XContentType xContentType) {     this.source = source.     this.xContentType = xContentType. }
true;public;0;3;/**  * @return The initial active state of the watch (defaults to {@code true}, e.g. "active")  */ ;/**  * @return The initial active state of the watch (defaults to {@code true}, e.g. "active")  */ public boolean isActive() {     return active. }
true;public;1;3;/**  * Sets the initial active state of the watch  */ ;/**  * Sets the initial active state of the watch  */ public void setActive(boolean active) {     this.active = active. }
true;public;0;3;/**  * Get the content type for the source  */ ;/**  * Get the content type for the source  */ public XContentType xContentType() {     return xContentType. }
false;public;0;3;;public long getVersion() {     return version. }
false;public;1;3;;public void setVersion(long version) {     this.version = version. }
true;public;1;7;/**  * only performs this put request if the watch's last modification was assigned the given  * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}  *  * If the watch's last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * only performs this put request if the watch's last modification was assigned the given  * sequence number. Must be used in combination with {@link #setIfPrimaryTerm(long)}  *  * If the watch's last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public PutWatchRequest setIfSeqNo(long seqNo) {     if (seqNo < 0 && seqNo != UNASSIGNED_SEQ_NO) {         throw new IllegalArgumentException("sequence numbers must be non negative. got [" + seqNo + "].").     }     ifSeqNo = seqNo.     return this. }
true;public;1;7;/**  * only performs this put request if the watch's last modification was assigned the given  * primary term. Must be used in combination with {@link #setIfSeqNo(long)}  *  * If the watch last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * only performs this put request if the watch's last modification was assigned the given  * primary term. Must be used in combination with {@link #setIfSeqNo(long)}  *  * If the watch last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public PutWatchRequest setIfPrimaryTerm(long term) {     if (term < 0) {         throw new IllegalArgumentException("primary term must be non negative. got [" + term + "]").     }     ifPrimaryTerm = term.     return this. }
true;public;0;3;/**  * If set, only perform this put watch request if the watch's last modification was assigned this sequence number.  * If the watch last last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * If set, only perform this put watch request if the watch's last modification was assigned this sequence number.  * If the watch last last modification was assigned a different sequence number a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public long getIfSeqNo() {     return ifSeqNo. }
true;public;0;3;/**  * If set, only perform this put watch request if the watch's last modification was assigned this primary term.  *  * If the watch's last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ ;/**  * If set, only perform this put watch request if the watch's last modification was assigned this primary term.  *  * If the watch's last modification was assigned a different term a  * {@link org.elasticsearch.index.engine.VersionConflictEngineException} will be thrown.  */ public long getIfPrimaryTerm() {     return ifPrimaryTerm. }
false;public;0;27;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (id == null) {         validationException = addValidationError("watch id is missing", validationException).     } else if (isValidId(id) == false) {         validationException = addValidationError("watch id contains whitespace", validationException).     }     if (source == null) {         validationException = addValidationError("watch source is missing", validationException).     }     if (xContentType == null) {         validationException = addValidationError("request body is missing", validationException).     }     if (ifSeqNo != UNASSIGNED_SEQ_NO && version != Versions.MATCH_ANY) {         validationException = addValidationError("compare and write operations can not use versioning", validationException).     }     if (ifPrimaryTerm == UNASSIGNED_PRIMARY_TERM && ifSeqNo != UNASSIGNED_SEQ_NO) {         validationException = addValidationError("ifSeqNo is set, but primary term is [0]", validationException).     }     if (ifPrimaryTerm != UNASSIGNED_PRIMARY_TERM && ifSeqNo == UNASSIGNED_SEQ_NO) {         validationException = addValidationError("ifSeqNo is unassigned, but primary term is [" + ifPrimaryTerm + "]", validationException).     }     return validationException. }
false;public,static;1;3;;public static boolean isValidId(String id) {     return Strings.isEmpty(id) == false && NO_WS_PATTERN.matcher(id).matches(). }
