commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Set<String> getClusterPrivileges() {     return cluster. }
false;public;0;3;;public Set<ConditionalClusterPrivilege> getConditionalClusterPrivileges() {     return conditionalCluster. }
false;public;0;3;;public Set<Indices> getIndexPrivileges() {     return index. }
false;public;0;3;;public Set<RoleDescriptor.ApplicationResourcePrivileges> getApplicationPrivileges() {     return application. }
false;public;0;3;;public Set<String> getRunAs() {     return runAs. }
false;public;1;8;;public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     cluster = Collections.unmodifiableSet(in.readSet(StreamInput::readString)).     conditionalCluster = Collections.unmodifiableSet(in.readSet(ConditionalClusterPrivileges.READER)).     index = Collections.unmodifiableSet(in.readSet(Indices::new)).     application = Collections.unmodifiableSet(in.readSet(RoleDescriptor.ApplicationResourcePrivileges::new)).     runAs = Collections.unmodifiableSet(in.readSet(StreamInput::readString)). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeCollection(cluster, StreamOutput::writeString).     out.writeCollection(conditionalCluster, ConditionalClusterPrivileges.WRITER).     out.writeCollection(index).     out.writeCollection(application).     out.writeCollection(runAs, StreamOutput::writeString). }
false;public;1;15;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final GetUserPrivilegesResponse that = (GetUserPrivilegesResponse) other.     return Objects.equals(cluster, that.cluster) && Objects.equals(conditionalCluster, that.conditionalCluster) && Objects.equals(index, that.index) && Objects.equals(application, that.application) && Objects.equals(runAs, that.runAs). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(cluster, conditionalCluster, index, application, runAs). }
false;public;0;3;;public Set<String> getIndices() {     return indices. }
false;public;0;3;;public Set<String> getPrivileges() {     return privileges. }
false;public;0;3;;public Set<FieldPermissionsDefinition.FieldGrantExcludeGroup> getFieldSecurity() {     return fieldSecurity. }
false;public;0;3;;public Set<BytesReference> getQueries() {     return queries. }
false;public;0;3;;public boolean allowRestrictedIndices() {     return allowRestrictedIndices. }
false;public;0;19;;@Override public String toString() {     StringBuilder sb = new StringBuilder(getClass().getSimpleName()).append("[").append("indices=[").append(Strings.collectionToCommaDelimitedString(indices)).append("], allow_restricted_indices=[").append(allowRestrictedIndices).append("], privileges=[").append(Strings.collectionToCommaDelimitedString(privileges)).append("]").     if (fieldSecurity.isEmpty() == false) {         sb.append(", fls=[").append(Strings.collectionToCommaDelimitedString(fieldSecurity)).append("]").     }     if (queries.isEmpty() == false) {         sb.append(", dls=[").append(queries.stream().map(BytesReference::utf8ToString).collect(Collectors.joining(","))).append("]").     }     sb.append("]").     return sb.toString(). }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Indices that = (Indices) o.     return this.indices.equals(that.indices) && this.privileges.equals(that.privileges) && this.fieldSecurity.equals(that.fieldSecurity) && this.queries.equals(that.queries) && this.allowRestrictedIndices == that.allowRestrictedIndices. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indices, privileges, fieldSecurity, queries, allowRestrictedIndices). }
false;public;2;29;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(RoleDescriptor.Fields.NAMES.getPreferredName(), indices).     builder.field(RoleDescriptor.Fields.PRIVILEGES.getPreferredName(), privileges).     if (fieldSecurity.stream().anyMatch(g -> nonEmpty(g.getGrantedFields()) || nonEmpty(g.getExcludedFields()))) {         builder.startArray(RoleDescriptor.Fields.FIELD_PERMISSIONS.getPreferredName()).         for (FieldPermissionsDefinition.FieldGrantExcludeGroup group : this.fieldSecurity) {             builder.startObject().             if (nonEmpty(group.getGrantedFields())) {                 builder.array(RoleDescriptor.Fields.GRANT_FIELDS.getPreferredName(), group.getGrantedFields()).             }             if (nonEmpty(group.getExcludedFields())) {                 builder.array(RoleDescriptor.Fields.EXCEPT_FIELDS.getPreferredName(), group.getExcludedFields()).             }             builder.endObject().         }         builder.endArray().     }     if (queries.isEmpty() == false) {         builder.startArray(RoleDescriptor.Fields.QUERY.getPreferredName()).         for (BytesReference q : queries) {             builder.value(q.utf8ToString()).         }         builder.endArray().     }     builder.field(RoleDescriptor.Fields.ALLOW_RESTRICTED_INDICES.getPreferredName(), allowRestrictedIndices).     return builder.endObject(). }
false;private;1;3;;private boolean nonEmpty(String[] grantedFields) {     return grantedFields != null && grantedFields.length != 0. }
false;public;1;13;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeCollection(indices, StreamOutput::writeString).     out.writeCollection(privileges, StreamOutput::writeString).     out.writeCollection(fieldSecurity, (output, fields) -> {         output.writeOptionalStringArray(fields.getGrantedFields()).         output.writeOptionalStringArray(fields.getExcludedFields()).     }).     out.writeCollection(queries, StreamOutput::writeBytesReference).     if (out.getVersion().onOrAfter(Version.V_6_7_0)) {         out.writeBoolean(allowRestrictedIndices).     } }
