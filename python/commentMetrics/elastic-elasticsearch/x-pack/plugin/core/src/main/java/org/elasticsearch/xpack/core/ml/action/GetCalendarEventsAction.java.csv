commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;2;7;;public static Request parseRequest(String calendarId, XContentParser parser) {     Request request = PARSER.apply(parser, null).     if (calendarId != null) {         request.setCalendarId(calendarId).     }     return request. }
false;public;0;3;;public String getCalendarId() {     return calendarId. }
false;private;1;3;;private void setCalendarId(String calendarId) {     this.calendarId = ExceptionsHelper.requireNonNull(calendarId, Calendar.ID.getPreferredName()). }
false;public;0;3;;public String getStart() {     return start. }
false;public;1;3;;public void setStart(String start) {     this.start = start. }
false;public;0;3;;public String getEnd() {     return end. }
false;public;1;3;;public void setEnd(String end) {     this.end = end. }
false;public;0;3;;public String getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(String jobId) {     this.jobId = jobId. }
false;public;0;3;;public PageParams getPageParams() {     return pageParams. }
false;public;1;3;;public void setPageParams(PageParams pageParams) {     this.pageParams = Objects.requireNonNull(pageParams). }
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException e = null.     boolean calendarIdIsAll = GetCalendarsAction.Request.ALL.equals(calendarId).     if (jobId != null && calendarIdIsAll == false) {         e = ValidateActions.addValidationError("If " + Job.ID.getPreferredName() + " is used " + Calendar.ID.getPreferredName() + " must be '" + GetCalendarsAction.Request.ALL + "'", e).     }     return e. }
false;public;1;9;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     calendarId = in.readString().     start = in.readOptionalString().     end = in.readOptionalString().     jobId = in.readOptionalString().     pageParams = new PageParams(in). }
false;public;1;9;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(calendarId).     out.writeOptionalString(start).     out.writeOptionalString(end).     out.writeOptionalString(jobId).     pageParams.writeTo(out). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(calendarId, start, end, pageParams, jobId). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(calendarId, other.calendarId) && Objects.equals(start, other.start) && Objects.equals(end, other.end) && Objects.equals(pageParams, other.pageParams) && Objects.equals(jobId, other.jobId). }
false;public;2;17;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(Calendar.ID.getPreferredName(), calendarId).     if (start != null) {         builder.field(START.getPreferredName(), start).     }     if (end != null) {         builder.field(END.getPreferredName(), end).     }     if (jobId != null) {         builder.field(Job.ID.getPreferredName(), jobId).     }     builder.field(PageParams.PAGE.getPreferredName(), pageParams).     builder.endObject().     return builder. }
false;public;1;6;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     scheduledEvents = new QueryPage<>(in, ScheduledEvent::new). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     scheduledEvents.writeTo(out). }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return scheduledEvents.toXContent(builder, params). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(scheduledEvents). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(scheduledEvents, other.scheduledEvents). }
