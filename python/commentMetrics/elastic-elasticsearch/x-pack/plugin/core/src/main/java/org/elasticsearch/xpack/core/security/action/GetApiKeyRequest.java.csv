commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getRealmName() {     return realmName. }
false;public;0;3;;public String getUserName() {     return userName. }
false;public;0;3;;public String getApiKeyId() {     return apiKeyId. }
false;public;0;3;;public String getApiKeyName() {     return apiKeyName. }
true;public,static;1;3;/**  * Creates get API key request for given realm name  * @param realmName realm name  * @return {@link GetApiKeyRequest}  */ ;/**  * Creates get API key request for given realm name  * @param realmName realm name  * @return {@link GetApiKeyRequest}  */ public static GetApiKeyRequest usingRealmName(String realmName) {     return new GetApiKeyRequest(realmName, null, null, null). }
true;public,static;1;3;/**  * Creates get API key request for given user name  * @param userName user name  * @return {@link GetApiKeyRequest}  */ ;/**  * Creates get API key request for given user name  * @param userName user name  * @return {@link GetApiKeyRequest}  */ public static GetApiKeyRequest usingUserName(String userName) {     return new GetApiKeyRequest(null, userName, null, null). }
true;public,static;2;3;/**  * Creates get API key request for given realm and user name  * @param realmName realm name  * @param userName user name  * @return {@link GetApiKeyRequest}  */ ;/**  * Creates get API key request for given realm and user name  * @param realmName realm name  * @param userName user name  * @return {@link GetApiKeyRequest}  */ public static GetApiKeyRequest usingRealmAndUserName(String realmName, String userName) {     return new GetApiKeyRequest(realmName, userName, null, null). }
true;public,static;1;3;/**  * Creates get API key request for given api key id  * @param apiKeyId api key id  * @return {@link GetApiKeyRequest}  */ ;/**  * Creates get API key request for given api key id  * @param apiKeyId api key id  * @return {@link GetApiKeyRequest}  */ public static GetApiKeyRequest usingApiKeyId(String apiKeyId) {     return new GetApiKeyRequest(null, null, apiKeyId, null). }
true;public,static;1;3;/**  * Creates get api key request for given api key name  * @param apiKeyName api key name  * @return {@link GetApiKeyRequest}  */ ;/**  * Creates get api key request for given api key name  * @param apiKeyName api key name  * @return {@link GetApiKeyRequest}  */ public static GetApiKeyRequest usingApiKeyName(String apiKeyName) {     return new GetApiKeyRequest(null, null, null, apiKeyName). }
false;public;0;20;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false && Strings.hasText(apiKeyId) == false && Strings.hasText(apiKeyName) == false) {         validationException = addValidationError("One of [api key id, api key name, username, realm name] must be specified", validationException).     }     if (Strings.hasText(apiKeyId) || Strings.hasText(apiKeyName)) {         if (Strings.hasText(realmName) || Strings.hasText(userName)) {             validationException = addValidationError("username or realm name must not be specified when the api key id or api key name is specified", validationException).         }     }     if (Strings.hasText(apiKeyId) && Strings.hasText(apiKeyName)) {         validationException = addValidationError("only one of [api key id, api key name] can be specified", validationException).     }     return validationException. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(realmName).     out.writeOptionalString(userName).     out.writeOptionalString(apiKeyId).     out.writeOptionalString(apiKeyName). }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
