commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the collection of index names that have been stored as "local" indices.  * This is a <code>List</code> because order may be important. For example <code>[ "a*" , "-a1" ]</code> is interpreted differently  * to <code>[ "-a1", "a*" ]</code>. As a consequence, this list <em>may contain duplicates</em>.  */ ;/**  * Returns the collection of index names that have been stored as "local" indices.  * This is a <code>List</code> because order may be important. For example <code>[ "a*" , "-a1" ]</code> is interpreted differently  * to <code>[ "-a1", "a*" ]</code>. As a consequence, this list <em>may contain duplicates</em>.  */ public List<String> getLocal() {     return local. }
true;public;0;3;/**  * Returns the collection of index names that have been stored as "remote" indices.  */ ;/**  * Returns the collection of index names that have been stored as "remote" indices.  */ public List<String> getRemote() {     return remote. }
true;public;0;3;/**  * @return <code>true</code> if both the {@link #getLocal() local} and {@link #getRemote() remote} index lists are empty.  */ ;/**  * @return <code>true</code> if both the {@link #getLocal() local} and {@link #getRemote() remote} index lists are empty.  */ public boolean isEmpty() {     return local.isEmpty() && remote.isEmpty(). }
true;public;0;3;/**  * @return <code>true</code> if the {@link #getRemote() remote} index lists is empty, and the local index list contains the  * {@link IndicesAndAliasesResolverField#NO_INDEX_PLACEHOLDER no-index-placeholder} and nothing else.  */ ;/**  * @return <code>true</code> if the {@link #getRemote() remote} index lists is empty, and the local index list contains the  * {@link IndicesAndAliasesResolverField#NO_INDEX_PLACEHOLDER no-index-placeholder} and nothing else.  */ public boolean isNoIndicesPlaceholder() {     return remote.isEmpty() && local.size() == 1 && local.contains(NO_INDEX_PLACEHOLDER). }
false;public;0;11;;public String[] toArray() {     final String[] array = new String[local.size() + remote.size()].     int i = 0.     for (String index : local) {         array[i++] = index.     }     for (String index : remote) {         array[i++] = index.     }     return array. }
true;public;1;3;/**  * add a local index name  */ ;/**  * add a local index name  */ public void addLocal(String index) {     local.add(index). }
true;public;1;3;/**  * adds the array of local index names  */ ;/**  * adds the array of local index names  */ public void addLocal(String[] indices) {     local.addAll(Arrays.asList(indices)). }
true;public;1;3;/**  * adds the list of local index names  */ ;/**  * adds the list of local index names  */ public void addLocal(List<String> indices) {     local.addAll(indices). }
true;public;1;3;/**  * adds the list of remote index names  */ ;/**  * adds the list of remote index names  */ public void addRemote(List<String> indices) {     remote.addAll(indices). }
true;public;0;3;/**  * @return <code>true</code> if both the local and remote index lists are empty.  */ ;/**  * @return <code>true</code> if both the local and remote index lists are empty.  */ public boolean isEmpty() {     return local.isEmpty() && remote.isEmpty(). }
true;public;0;3;/**  * @return a immutable ResolvedIndices instance with the local and remote index lists  */ ;/**  * @return a immutable ResolvedIndices instance with the local and remote index lists  */ public ResolvedIndices build() {     return new ResolvedIndices(local, remote). }
