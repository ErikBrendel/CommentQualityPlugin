commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Starts the watcher service if not already started.  */ ;/**  * Starts the watcher service if not already started.  */ public WatcherServiceRequest start() {     command = Command.START.     return this. }
true;public;0;4;/**  * Stops the watcher service if not already stopped.  */ ;/**  * Stops the watcher service if not already stopped.  */ public WatcherServiceRequest stop() {     command = Command.STOP.     return this. }
false;public;0;3;;public Command getCommand() {     return command. }
false;public;0;8;;@Override public ActionRequestValidationException validate() {     if (command == null) {         return ValidateActions.addValidationError("no command specified", null).     } else {         return null.     } }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     command = Command.valueOf(in.readString().toUpperCase(Locale.ROOT)). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(command.name().toLowerCase(Locale.ROOT)). }
