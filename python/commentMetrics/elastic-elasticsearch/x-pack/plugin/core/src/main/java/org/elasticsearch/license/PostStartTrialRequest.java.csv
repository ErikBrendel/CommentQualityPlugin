commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;1;4;;public PostStartTrialRequest setType(String type) {     this.type = type.     return this. }
false;public;0;3;;public String getType() {     return type. }
false;public;1;4;;public PostStartTrialRequest acknowledge(boolean acknowledge) {     this.acknowledge = acknowledge.     return this. }
false;public;0;3;;public boolean isAcknowledged() {     return acknowledge. }
false;public;1;11;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     if (in.getVersion().onOrAfter(Version.V_6_3_0)) {         type = in.readString().         acknowledge = in.readBoolean().     } else {         type = "trial".         acknowledge = true.     } }
false;public;1;21;;@Override public void writeTo(StreamOutput out) throws IOException {     Version version = Version.V_6_3_0.     if (out.getVersion().onOrAfter(version)) {         super.writeTo(out).         out.writeString(type).         out.writeBoolean(acknowledge).     } else {         if ("trial".equals(type) == false) {             throw new IllegalArgumentException("All nodes in cluster must be version [" + version + "] or newer to start trial with a different type than 'trial'. Attempting to write to " + "a node with version [" + out.getVersion() + "] with trial type [" + type + "].").         } else if (acknowledge == false) {             throw new IllegalArgumentException("Request must be acknowledged to send to a node with a version " + "prior to [" + version + "]. Attempting to send request to node with version [" + out.getVersion() + "] " + "without acknowledgement.").         } else {             super.writeTo(out).         }     } }
