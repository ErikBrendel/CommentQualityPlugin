commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Optional<String> getFeature() {     return X_PACK_FEATURE. }
false;public;0;16;;@Override public List<Setting<?>> getSettings() {     ArrayList<Setting<?>> settings = new ArrayList<>().     // the only licensing one     settings.add(Setting.groupSetting("license.", Setting.Property.NodeScope)).     // TODO split these settings up     settings.addAll(XPackSettings.getAllSettings()).     settings.add(LicenseService.SELF_GENERATED_LICENSE_TYPE).     // we add the `xpack.version` setting to all internal indices     settings.add(Setting.simpleString("index.xpack.version", Setting.Property.IndexScope)).     return settings. }
false;public;0;4;;@Override public Settings additionalSettings() {     return additionalSettings(settings, XPackSettings.SECURITY_ENABLED.get(settings), XPackPlugin.transportClientMode(settings)). }
false;static;3;10;;static Settings additionalSettings(final Settings settings, final boolean enabled, final boolean transportClientMode) {     if (enabled && transportClientMode) {         return Settings.builder().put(SecuritySettings.addTransportSettings(settings)).put(SecuritySettings.addUserSettings(settings)).build().     } else {         return Settings.EMPTY.     } }
false;public;0;123;;@Override public List<Action<? extends ActionResponse>> getClientActions() {     return Arrays.asList(// deprecation     DeprecationInfoAction.INSTANCE, // graph     GraphExploreAction.INSTANCE, // ML     GetJobsAction.INSTANCE, GetJobsStatsAction.INSTANCE, MlInfoAction.INSTANCE, PutJobAction.INSTANCE, UpdateJobAction.INSTANCE, DeleteJobAction.INSTANCE, OpenJobAction.INSTANCE, GetFiltersAction.INSTANCE, PutFilterAction.INSTANCE, UpdateFilterAction.INSTANCE, DeleteFilterAction.INSTANCE, KillProcessAction.INSTANCE, GetBucketsAction.INSTANCE, GetInfluencersAction.INSTANCE, GetOverallBucketsAction.INSTANCE, GetRecordsAction.INSTANCE, PostDataAction.INSTANCE, CloseJobAction.INSTANCE, FinalizeJobExecutionAction.INSTANCE, FlushJobAction.INSTANCE, ValidateDetectorAction.INSTANCE, ValidateJobConfigAction.INSTANCE, GetCategoriesAction.INSTANCE, GetModelSnapshotsAction.INSTANCE, RevertModelSnapshotAction.INSTANCE, UpdateModelSnapshotAction.INSTANCE, GetDatafeedsAction.INSTANCE, GetDatafeedsStatsAction.INSTANCE, PutDatafeedAction.INSTANCE, UpdateDatafeedAction.INSTANCE, DeleteDatafeedAction.INSTANCE, PreviewDatafeedAction.INSTANCE, StartDatafeedAction.INSTANCE, StopDatafeedAction.INSTANCE, IsolateDatafeedAction.INSTANCE, DeleteModelSnapshotAction.INSTANCE, UpdateProcessAction.INSTANCE, DeleteExpiredDataAction.INSTANCE, ForecastJobAction.INSTANCE, DeleteForecastAction.INSTANCE, GetCalendarsAction.INSTANCE, PutCalendarAction.INSTANCE, DeleteCalendarAction.INSTANCE, DeleteCalendarEventAction.INSTANCE, UpdateCalendarJobAction.INSTANCE, GetCalendarEventsAction.INSTANCE, PostCalendarEventsAction.INSTANCE, PersistJobAction.INSTANCE, FindFileStructureAction.INSTANCE, SetUpgradeModeAction.INSTANCE, // security     ClearRealmCacheAction.INSTANCE, ClearRolesCacheAction.INSTANCE, GetUsersAction.INSTANCE, PutUserAction.INSTANCE, DeleteUserAction.INSTANCE, GetRolesAction.INSTANCE, PutRoleAction.INSTANCE, DeleteRoleAction.INSTANCE, ChangePasswordAction.INSTANCE, AuthenticateAction.INSTANCE, SetEnabledAction.INSTANCE, HasPrivilegesAction.INSTANCE, GetRoleMappingsAction.INSTANCE, PutRoleMappingAction.INSTANCE, DeleteRoleMappingAction.INSTANCE, CreateTokenAction.INSTANCE, InvalidateTokenAction.INSTANCE, GetCertificateInfoAction.INSTANCE, RefreshTokenAction.INSTANCE, CreateApiKeyAction.INSTANCE, InvalidateApiKeyAction.INSTANCE, GetApiKeyAction.INSTANCE, // upgrade     IndexUpgradeInfoAction.INSTANCE, IndexUpgradeAction.INSTANCE, // watcher     PutWatchAction.INSTANCE, DeleteWatchAction.INSTANCE, GetWatchAction.INSTANCE, WatcherStatsAction.INSTANCE, AckWatchAction.INSTANCE, ActivateWatchAction.INSTANCE, WatcherServiceAction.INSTANCE, ExecuteWatchAction.INSTANCE, // license     PutLicenseAction.INSTANCE, GetLicenseAction.INSTANCE, DeleteLicenseAction.INSTANCE, PostStartTrialAction.INSTANCE, GetTrialStatusAction.INSTANCE, PostStartBasicAction.INSTANCE, GetBasicStatusAction.INSTANCE, // x-pack     XPackInfoAction.INSTANCE, XPackUsageAction.INSTANCE, // rollup     RollupSearchAction.INSTANCE, PutRollupJobAction.INSTANCE, StartRollupJobAction.INSTANCE, StopRollupJobAction.INSTANCE, DeleteRollupJobAction.INSTANCE, GetRollupJobsAction.INSTANCE, GetRollupCapsAction.INSTANCE, // ILM     DeleteLifecycleAction.INSTANCE, GetLifecycleAction.INSTANCE, PutLifecycleAction.INSTANCE, ExplainLifecycleAction.INSTANCE, RemoveIndexLifecyclePolicyAction.INSTANCE, MoveToStepAction.INSTANCE, RetryAction.INSTANCE, TransportFreezeIndexAction.FreezeIndexAction.INSTANCE). }
false;public;0;80;;@Override public List<NamedWriteableRegistry.Entry> getNamedWriteables() {     return Arrays.asList(// graph     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.GRAPH, GraphFeatureSetUsage::new), // logstash     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.LOGSTASH, LogstashFeatureSetUsage::new), // beats     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.BEATS, BeatsFeatureSetUsage::new), // ML - Custom metadata     new NamedWriteableRegistry.Entry(MetaData.Custom.class, "ml", MlMetadata::new), new NamedWriteableRegistry.Entry(NamedDiff.class, "ml", MlMetadata.MlMetadataDiff::new), // ML - Persistent action requests     new NamedWriteableRegistry.Entry(PersistentTaskParams.class, MlTasks.DATAFEED_TASK_NAME, StartDatafeedAction.DatafeedParams::new), new NamedWriteableRegistry.Entry(PersistentTaskParams.class, MlTasks.JOB_TASK_NAME, OpenJobAction.JobParams::new), // ML - Task states     new NamedWriteableRegistry.Entry(PersistentTaskState.class, JobTaskState.NAME, JobTaskState::new), new NamedWriteableRegistry.Entry(PersistentTaskState.class, DatafeedState.NAME, DatafeedState::fromStream), new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.MACHINE_LEARNING, MachineLearningFeatureSetUsage::new), // monitoring     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.MONITORING, MonitoringFeatureSetUsage::new), // security     new NamedWriteableRegistry.Entry(ClusterState.Custom.class, TokenMetaData.TYPE, TokenMetaData::new), new NamedWriteableRegistry.Entry(NamedDiff.class, TokenMetaData.TYPE, TokenMetaData::readDiffFrom), new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.SECURITY, SecurityFeatureSetUsage::new), // security : conditional privileges     new NamedWriteableRegistry.Entry(ConditionalClusterPrivilege.class, ConditionalClusterPrivileges.ManageApplicationPrivileges.WRITEABLE_NAME, ConditionalClusterPrivileges.ManageApplicationPrivileges::createFrom), // security : role-mappings     new NamedWriteableRegistry.Entry(RoleMapperExpression.class, AllExpression.NAME, AllExpression::new), new NamedWriteableRegistry.Entry(RoleMapperExpression.class, AnyExpression.NAME, AnyExpression::new), new NamedWriteableRegistry.Entry(RoleMapperExpression.class, FieldExpression.NAME, FieldExpression::new), new NamedWriteableRegistry.Entry(RoleMapperExpression.class, ExceptExpression.NAME, ExceptExpression::new), // sql     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.SQL, SqlFeatureSetUsage::new), // watcher     new NamedWriteableRegistry.Entry(MetaData.Custom.class, WatcherMetaData.TYPE, WatcherMetaData::new), new NamedWriteableRegistry.Entry(NamedDiff.class, WatcherMetaData.TYPE, WatcherMetaData::readDiffFrom), new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.WATCHER, WatcherFeatureSetUsage::new), // licensing     new NamedWriteableRegistry.Entry(MetaData.Custom.class, LicensesMetaData.TYPE, LicensesMetaData::new), new NamedWriteableRegistry.Entry(NamedDiff.class, LicensesMetaData.TYPE, LicensesMetaData::readDiffFrom), // rollup     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.ROLLUP, RollupFeatureSetUsage::new), new NamedWriteableRegistry.Entry(PersistentTaskParams.class, RollupJob.NAME, RollupJob::new), new NamedWriteableRegistry.Entry(Task.Status.class, RollupJobStatus.NAME, RollupJobStatus::new), new NamedWriteableRegistry.Entry(PersistentTaskState.class, RollupJobStatus.NAME, RollupJobStatus::new), // ccr     new NamedWriteableRegistry.Entry(AutoFollowMetadata.class, AutoFollowMetadata.TYPE, AutoFollowMetadata::new), new NamedWriteableRegistry.Entry(MetaData.Custom.class, AutoFollowMetadata.TYPE, AutoFollowMetadata::new), new NamedWriteableRegistry.Entry(NamedDiff.class, AutoFollowMetadata.TYPE, in -> AutoFollowMetadata.readDiffFrom(MetaData.Custom.class, AutoFollowMetadata.TYPE, in)), new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.CCR, CCRFeatureSet.Usage::new), // ILM     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.INDEX_LIFECYCLE, IndexLifecycleFeatureSetUsage::new), // ILM - Custom Metadata     new NamedWriteableRegistry.Entry(MetaData.Custom.class, IndexLifecycleMetadata.TYPE, IndexLifecycleMetadata::new), new NamedWriteableRegistry.Entry(NamedDiff.class, IndexLifecycleMetadata.TYPE, IndexLifecycleMetadata.IndexLifecycleMetadataDiff::new), // ILM - LifecycleTypes     new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE, (in) -> TimeseriesLifecycleType.INSTANCE), // ILM - Lifecycle Actions     new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new), new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new), // Data Frame     new NamedWriteableRegistry.Entry(XPackFeatureSet.Usage.class, XPackField.DATA_FRAME, DataFrameFeatureSetUsage::new)). }
false;public;0;29;;@Override public List<NamedXContentRegistry.Entry> getNamedXContent() {     return Arrays.asList(// ML - Custom metadata     new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField("ml"), parser -> MlMetadata.LENIENT_PARSER.parse(parser, null).build()), // ML - Persistent action requests     new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(MlTasks.DATAFEED_TASK_NAME), StartDatafeedAction.DatafeedParams::fromXContent), new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(MlTasks.JOB_TASK_NAME), OpenJobAction.JobParams::fromXContent), // ML - Task states     new NamedXContentRegistry.Entry(PersistentTaskState.class, new ParseField(DatafeedState.NAME), DatafeedState::fromXContent), new NamedXContentRegistry.Entry(PersistentTaskState.class, new ParseField(JobTaskState.NAME), JobTaskState::fromXContent), // watcher     new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(WatcherMetaData.TYPE), WatcherMetaData::fromXContent), // licensing     new NamedXContentRegistry.Entry(MetaData.Custom.class, new ParseField(LicensesMetaData.TYPE), LicensesMetaData::fromXContent), // rollup     new NamedXContentRegistry.Entry(PersistentTaskParams.class, new ParseField(RollupField.TASK_NAME), RollupJob::fromXContent), new NamedXContentRegistry.Entry(Task.Status.class, new ParseField(RollupJobStatus.NAME), RollupJobStatus::fromXContent), new NamedXContentRegistry.Entry(PersistentTaskState.class, new ParseField(RollupJobStatus.NAME), RollupJobStatus::fromXContent)). }
false;public;6;21;;@Override public Map<String, Supplier<Transport>> getTransports(final Settings settings, final ThreadPool threadPool, final PageCacheRecycler pageCacheRecycler, final CircuitBreakerService circuitBreakerService, final NamedWriteableRegistry namedWriteableRegistry, final NetworkService networkService) {     // this should only be used in the transport layer, so do not add it if it is not in transport mode or we are disabled     if (XPackPlugin.transportClientMode(settings) == false || XPackSettings.SECURITY_ENABLED.get(settings) == false) {         return Collections.emptyMap().     }     final SSLService sslService.     try {         sslService = new SSLService(settings, null).     } catch (Exception e) {         throw new RuntimeException(e).     }     return Collections.singletonMap(SecurityField.NAME4, () -> new SecurityNetty4Transport(settings, Version.CURRENT, threadPool, networkService, pageCacheRecycler, namedWriteableRegistry, circuitBreakerService, sslService)). }
