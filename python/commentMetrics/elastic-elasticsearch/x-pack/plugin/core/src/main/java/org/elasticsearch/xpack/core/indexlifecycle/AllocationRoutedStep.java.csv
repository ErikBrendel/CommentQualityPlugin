commented;modifiers;parameterAmount;loc;comment;code
false;public;2;42;;@Override public Result isConditionMet(Index index, ClusterState clusterState) {     IndexMetaData idxMeta = clusterState.metaData().index(index).     if (idxMeta == null) {         // Index must have been since deleted, ignore it         logger.debug("[{}] lifecycle action for index [{}] executed but index no longer exists", getKey().getAction(), index.getName()).         return new Result(false, null).     }     if (ActiveShardCount.ALL.enoughShardsActive(clusterState, index.getName()) == false) {         logger.debug("[{}] lifecycle action for index [{}] cannot make progress because not all shards are active", getKey().getAction(), index.getName()).         return new Result(false, new Info(idxMeta.getNumberOfReplicas(), -1, false)).     }     // All the allocation attributes are already set so just need to check     // if the allocation has happened     RoutingAllocation allocation = new RoutingAllocation(ALLOCATION_DECIDERS, clusterState.getRoutingNodes(), clusterState, null, System.nanoTime()).     int allocationPendingAllShards = 0.     ImmutableOpenIntMap<IndexShardRoutingTable> allShards = clusterState.getRoutingTable().index(index).getShards().     for (ObjectCursor<IndexShardRoutingTable> shardRoutingTable : allShards.values()) {         for (ShardRouting shardRouting : shardRoutingTable.value.shards()) {             String currentNodeId = shardRouting.currentNodeId().             boolean canRemainOnCurrentNode = ALLOCATION_DECIDERS.canRemain(shardRouting, clusterState.getRoutingNodes().node(currentNodeId), allocation).type() == Decision.Type.YES.             if (canRemainOnCurrentNode == false || shardRouting.started() == false) {                 allocationPendingAllShards++.             }         }     }     if (allocationPendingAllShards > 0) {         logger.debug("{} lifecycle action [{}] waiting for [{}] shards to be allocated to nodes matching the given filters", index, getKey().getAction(), allocationPendingAllShards).         return new Result(false, new Info(idxMeta.getNumberOfReplicas(), allocationPendingAllShards, true)).     } else {         logger.debug("{} lifecycle action for [{}] complete", index, getKey().getAction()).         return new Result(true, null).     } }
false;public;0;4;;@Override public int hashCode() {     return 611. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     return super.equals(obj). }
false;public;0;3;;public long getActualReplicas() {     return actualReplicas. }
false;public;0;3;;public long getNumberShardsLeftToAllocate() {     return numberShardsLeftToAllocate. }
false;public;0;3;;public boolean allShardsActive() {     return allShardsActive. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(MESSAGE.getPreferredName(), message).     builder.field(SHARDS_TO_ALLOCATE.getPreferredName(), numberShardsLeftToAllocate).     builder.field(ALL_SHARDS_ACTIVE.getPreferredName(), allShardsActive).     builder.field(ACTUAL_REPLICAS.getPreferredName(), actualReplicas).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(actualReplicas, numberShardsLeftToAllocate, allShardsActive). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Info other = (Info) obj.     return Objects.equals(actualReplicas, other.actualReplicas) && Objects.equals(numberShardsLeftToAllocate, other.numberShardsLeftToAllocate) && Objects.equals(allShardsActive, other.allShardsActive). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
