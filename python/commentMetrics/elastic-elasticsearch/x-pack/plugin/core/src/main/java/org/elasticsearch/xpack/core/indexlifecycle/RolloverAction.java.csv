commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static RolloverAction parse(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;1;14;;@Override public void writeTo(StreamOutput out) throws IOException {     boolean hasMaxSize = maxSize != null.     out.writeBoolean(hasMaxSize).     if (hasMaxSize) {         maxSize.writeTo(out).     }     out.writeOptionalTimeValue(maxAge).     boolean hasMaxDocs = maxDocs != null.     out.writeBoolean(hasMaxDocs).     if (hasMaxDocs) {         out.writeVLong(maxDocs).     } }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;3;;public ByteSizeValue getMaxSize() {     return maxSize. }
false;public;0;3;;public TimeValue getMaxAge() {     return maxAge. }
false;public;0;3;;public Long getMaxDocs() {     return maxDocs. }
false;public;2;15;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     if (maxSize != null) {         builder.field(MAX_SIZE_FIELD.getPreferredName(), maxSize.getStringRep()).     }     if (maxAge != null) {         builder.field(MAX_AGE_FIELD.getPreferredName(), maxAge.getStringRep()).     }     if (maxDocs != null) {         builder.field(MAX_DOCS_FIELD.getPreferredName(), maxDocs).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public boolean isSafeAction() {     return true. }
false;public;3;18;;@Override public List<Step> toSteps(Client client, String phase, Step.StepKey nextStepKey) {     Settings indexingComplete = Settings.builder().put(LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE, true).build().     StepKey waitForRolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME).     StepKey rolloverStepKey = new StepKey(phase, NAME, RolloverStep.NAME).     StepKey updateDateStepKey = new StepKey(phase, NAME, UpdateRolloverLifecycleDateStep.NAME).     StepKey setIndexingCompleteStepKey = new StepKey(phase, NAME, INDEXING_COMPLETE_STEP_NAME).     WaitForRolloverReadyStep waitForRolloverReadyStep = new WaitForRolloverReadyStep(waitForRolloverReadyStepKey, rolloverStepKey, client, maxSize, maxAge, maxDocs).     RolloverStep rolloverStep = new RolloverStep(rolloverStepKey, updateDateStepKey, client).     UpdateRolloverLifecycleDateStep updateDateStep = new UpdateRolloverLifecycleDateStep(updateDateStepKey, setIndexingCompleteStepKey, System::currentTimeMillis).     UpdateSettingsStep setIndexingCompleteStep = new UpdateSettingsStep(setIndexingCompleteStepKey, nextStepKey, client, indexingComplete).     return Arrays.asList(waitForRolloverReadyStep, rolloverStep, updateDateStep, setIndexingCompleteStep). }
false;public;1;8;;@Override public List<StepKey> toStepKeys(String phase) {     StepKey rolloverReadyStepKey = new StepKey(phase, NAME, WaitForRolloverReadyStep.NAME).     StepKey rolloverStepKey = new StepKey(phase, NAME, RolloverStep.NAME).     StepKey updateDateStepKey = new StepKey(phase, NAME, UpdateRolloverLifecycleDateStep.NAME).     StepKey setIndexingCompleteStepKey = new StepKey(phase, NAME, INDEXING_COMPLETE_STEP_NAME).     return Arrays.asList(rolloverReadyStepKey, rolloverStepKey, updateDateStepKey, setIndexingCompleteStepKey). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(maxSize, maxAge, maxDocs). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     RolloverAction other = (RolloverAction) obj.     return Objects.equals(maxSize, other.maxSize) && Objects.equals(maxAge, other.maxAge) && Objects.equals(maxDocs, other.maxDocs). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
