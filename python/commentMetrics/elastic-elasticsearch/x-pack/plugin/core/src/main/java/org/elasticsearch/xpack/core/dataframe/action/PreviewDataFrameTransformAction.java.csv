commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public,static;1;13;;public static Request fromXContent(final XContentParser parser) throws IOException {     Map<String, Object> content = parser.map().     // Destination and ID are not required for Preview, so we just supply our own     content.put(DataFrameTransformConfig.DESTINATION.getPreferredName(), "unused-transform-preview-index").     try (XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().map(content).         XContentParser newParser = XContentType.JSON.xContent().createParser(parser.getXContentRegistry(), LoggingDeprecationHandler.INSTANCE, BytesReference.bytes(xContentBuilder).streamInput())) {         return new Request(DataFrameTransformConfig.fromXContent(newParser, "transform-preview", true)).     } }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return this.config.toXContent(builder, params). }
false;public;0;3;;public DataFrameTransformConfig getConfig() {     return config. }
false;public;1;3;;public void setConfig(DataFrameTransformConfig config) {     this.config = config. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     this.config = new DataFrameTransformConfig(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     this.config.writeTo(out). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(config). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(config, other.config). }
false;public;1;3;;public void setDocs(List<Map<String, Object>> docs) {     this.docs = new ArrayList<>(docs). }
false;public;1;8;;@Override public void readFrom(StreamInput in) throws IOException {     int size = in.readInt().     this.docs = new ArrayList<>(size).     for (int i = 0. i < size. i++) {         this.docs.add(in.readMap()).     } }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeInt(docs.size()).     for (Map<String, Object> doc : docs) {         out.writeMapWithConsistentOrder(doc).     } }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(PREVIEW.getPreferredName(), docs).     builder.endObject().     return builder. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(other.docs, docs). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hashCode(docs). }
false;public,static;1;3;;public static Response fromXContent(final XContentParser parser) throws IOException {     return PARSER.parse(parser, null). }
