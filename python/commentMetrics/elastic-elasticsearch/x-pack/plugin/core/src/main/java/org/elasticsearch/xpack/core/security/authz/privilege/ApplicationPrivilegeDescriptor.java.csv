commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(application).     out.writeString(name).     out.writeCollection(actions, StreamOutput::writeString).     out.writeMap(metadata). }
false;public;0;3;;public String getApplication() {     return application. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public Set<String> getActions() {     return actions. }
false;public;0;3;;public Map<String, Object> getMetadata() {     return metadata. }
false;public;2;4;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     return toXContent(builder, false). }
false;public;2;11;;public XContentBuilder toXContent(XContentBuilder builder, boolean includeTypeField) throws IOException {     builder.startObject().field(Fields.APPLICATION.getPreferredName(), application).field(Fields.NAME.getPreferredName(), name).field(Fields.ACTIONS.getPreferredName(), actions).field(Fields.METADATA.getPreferredName(), metadata).     if (includeTypeField) {         builder.field(Fields.TYPE.getPreferredName(), DOC_TYPE_VALUE).     }     return builder.endObject(). }
true;public,static;4;11;/**  * Construct a new {@link ApplicationPrivilegeDescriptor} from XContent.  *  * @param defaultApplication The application name to use if none is specified in the XContent body  * @param defaultName The privilege name to use if none is specified in the XContent body  * @param allowType If true, accept a "type" field (for which the value must match {@link #DOC_TYPE_VALUE}).  */ ;/**  * Construct a new {@link ApplicationPrivilegeDescriptor} from XContent.  *  * @param defaultApplication The application name to use if none is specified in the XContent body  * @param defaultName The privilege name to use if none is specified in the XContent body  * @param allowType If true, accept a "type" field (for which the value must match {@link #DOC_TYPE_VALUE}).  */ public static ApplicationPrivilegeDescriptor parse(XContentParser parser, String defaultApplication, String defaultName, boolean allowType) throws IOException {     final Builder builder = PARSER.parse(parser, allowType).     if (builder.applicationName == null) {         builder.applicationName(defaultApplication).     }     if (builder.privilegeName == null) {         builder.privilegeName(defaultName).     }     return builder.build(). }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     final ApplicationPrivilegeDescriptor that = (ApplicationPrivilegeDescriptor) o.     return Objects.equals(this.application, that.application) && Objects.equals(this.name, that.name) && Objects.equals(this.actions, that.actions) && Objects.equals(this.metadata, that.metadata). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(application, name, actions, metadata). }
false;private;1;4;;private Builder applicationName(String applicationName) {     this.applicationName = applicationName.     return this. }
false;private;1;4;;private Builder privilegeName(String privilegeName) {     this.privilegeName = privilegeName.     return this. }
false;private;1;4;;private Builder actions(Collection<String> actions) {     this.actions = new HashSet<>(actions).     return this. }
false;private;1;4;;private Builder metadata(Map<String, Object> metadata) {     this.metadata = metadata.     return this. }
false;private;2;9;;private Builder type(String type, boolean allowed) {     if (allowed == false) {         throw new IllegalStateException("Field " + Fields.TYPE.getPreferredName() + " cannot be specified here").     }     if (ApplicationPrivilegeDescriptor.DOC_TYPE_VALUE.equals(type) == false) {         throw new IllegalStateException("XContent has wrong " + Fields.TYPE.getPreferredName() + " field " + type).     }     return this. }
false;private;0;3;;private ApplicationPrivilegeDescriptor build() {     return new ApplicationPrivilegeDescriptor(applicationName, privilegeName, actions, metadata). }
