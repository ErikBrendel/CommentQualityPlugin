commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;18;;public static ExecutionState getState(WatchExecutionResult executionResult) {     if (executionResult == null || executionResult.conditionResult() == null) {         return ExecutionState.FAILED.     }     if (executionResult.conditionResult().met()) {         final Collection<ActionWrapperResult> values = executionResult.actionsResults().values().         // acknowledged as state wins because the user had explicitly set this, where as throttled may happen due to execution         if (values.stream().anyMatch((r) -> r.action().status() == Action.Result.Status.ACKNOWLEDGED)) {             return ExecutionState.ACKNOWLEDGED.         } else if (values.stream().anyMatch((r) -> r.action().status() == Action.Result.Status.THROTTLED)) {             return ExecutionState.THROTTLED.         } else {             return ExecutionState.EXECUTED.         }     } else {         return ExecutionState.EXECUTION_NOT_NEEDED.     } }
false;public;0;3;;public Wid id() {     return id. }
false;public;0;3;;public TriggerEvent triggerEvent() {     return triggerEvent. }
false;public;0;3;;public String watchId() {     return id.watchId(). }
false;public;0;1;;public ExecutableInput input() {     return input. }
false;public;0;3;;public ExecutionState state() {     return state. }
false;public;0;3;;public Map<String, Object> metadata() {     return metadata. }
false;public;0;3;;public WatchExecutionResult result() {     return executionResult. }
false;public;0;3;;public String getNodeId() {     return nodeId. }
false;public,final;2;41;;@Override public final XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(WATCH_ID.getPreferredName(), id.watchId()).     builder.field(NODE.getPreferredName(), nodeId).     builder.field(STATE.getPreferredName(), state.id()).     if (user != null) {         builder.field(USER.getPreferredName(), user).     }     if (watch != null && watch.status() != null) {         builder.field(STATUS.getPreferredName(), watch.status(), params).     }     builder.field(TRIGGER_EVENT.getPreferredName()).     triggerEvent.recordXContent(builder, params).     if (!vars.isEmpty() && WatcherParams.debug(params)) {         builder.field(VARS.getPreferredName(), vars).     }     if (input != null) {         builder.startObject(WatchField.INPUT.getPreferredName()).field(input.type(), input, params).endObject().     }     if (condition != null) {         builder.startObject(WatchField.CONDITION.getPreferredName()).field(condition.type(), condition, params).endObject().     }     if (metadata != null) {         builder.field(METADATA.getPreferredName(), metadata).     }     if (executionResult != null) {         builder.field(EXECUTION_RESULT.getPreferredName(), executionResult, params).     }     innerToXContent(builder, params).     builder.endObject().     return builder. }
false;abstract;2;1;;abstract void innerToXContent(XContentBuilder builder, Params params) throws IOException.
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     WatchRecord entry = (WatchRecord) o.     return Objects.equals(id, entry.id). }
false;public;0;4;;@Override public int hashCode() {     return id.hashCode(). }
false;public;0;4;;@Override public String toString() {     return id.toString(). }
false;public;0;3;;public String[] messages() {     return messages. }
false;;2;6;;@Override void innerToXContent(XContentBuilder builder, Params params) throws IOException {     if (messages != null) {         builder.array(MESSAGES.getPreferredName(), messages).     } }
false;public;0;3;;public Exception getException() {     return exception. }
false;;2;17;;@Override void innerToXContent(XContentBuilder builder, Params params) throws IOException {     if (exception != null) {         if (exception instanceof ElasticsearchException) {             ElasticsearchException elasticsearchException = (ElasticsearchException) exception.             builder.startObject(EXCEPTION.getPreferredName()).             Params delegatingParams = new DelegatingMapParams(STACK_TRACE_ENABLED_PARAMS, params).             elasticsearchException.toXContent(builder, delegatingParams).             builder.endObject().         } else {             builder.startObject(EXCEPTION.getPreferredName()).field("type", ElasticsearchException.getExceptionName(exception)).field("reason", exception.getMessage()).endObject().         }     } }
