# id;timestamp;commentText;codeText;commentWords;codeWords
DeprecationInfoAction -> public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1524684173;helper utility function to reduce repeat of running a specific {@link Set} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,set,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;public,static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationInfoAction -> public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1527840262;helper utility function to reduce repeat of running a specific {@link Set} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,set,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;public,static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationInfoAction -> public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1529433467;helper utility function to reduce repeat of running a specific {@link Set} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,set,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;public,static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationInfoAction -> public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1548879140;helper utility function to reduce repeat of running a specific {@link Set} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,set,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;public,static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationInfoAction -> public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper);1549298608;helper utility function to reduce repeat of running a specific {@link Set} of checks.__@param checks The functional checks to execute using the mapper function_@param mapper The function that executes the lambda check with the appropriate arguments_@param <T> The signature of the check (BiFunction, Function, including the appropriate arguments)_@return The list of {@link DeprecationIssue} that were found in the cluster;public static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {_        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList())__    };helper,utility,function,to,reduce,repeat,of,running,a,specific,link,set,of,checks,param,checks,the,functional,checks,to,execute,using,the,mapper,function,param,mapper,the,function,that,executes,the,lambda,check,with,the,appropriate,arguments,param,t,the,signature,of,the,check,bi,function,function,including,the,appropriate,arguments,return,the,list,of,link,deprecation,issue,that,were,found,in,the,cluster;public,static,t,list,deprecation,issue,filter,checks,list,t,checks,function,t,deprecation,issue,mapper,return,checks,stream,map,mapper,filter,objects,non,null,collect,collectors,to,list
DeprecationInfoAction -> Response -> public static DeprecationInfoAction.Response from(List<NodeInfo> nodesInfo, List<NodeStats> nodesStats, ClusterState state,                                                    IndexNameExpressionResolver indexNameExpressionResolver,                                                    String[] indices, IndicesOptions indicesOptions,                                                    List<Function<ClusterState,DeprecationIssue>>clusterSettingsChecks,                                                    List<BiFunction<List<NodeInfo>, List<NodeStats>, DeprecationIssue>> nodeSettingsChecks,                                                    List<Function<IndexMetaData, DeprecationIssue>> indexSettingsChecks);1524684173;This is the function that does the bulk of the logic of taking the appropriate ES dependencies_like {@link NodeInfo}, {@link ClusterState}. Alongside these objects and the list of deprecation checks,_this function will run through all the checks and build out the final list of issues that exist in the_cluster.__@param nodesInfo The list of {@link NodeInfo} metadata objects for retrieving node-level information_@param nodesStats The list of {@link NodeStats} metadata objects for retrieving node-level information_@param state The cluster state_@param indexNameExpressionResolver Used to resolve indices into their concrete names_@param indices The list of index expressions to evaluate using `indexNameExpressionResolver`_@param indicesOptions The options to use when resolving and filtering which indices to check_@param clusterSettingsChecks The list of cluster-level checks_@param nodeSettingsChecks The list of node-level checks_@param indexSettingsChecks The list of index-level checks that will be run across all specified_concrete indices_@return The list of deprecation issues found in the cluster;public static DeprecationInfoAction.Response from(List<NodeInfo> nodesInfo, List<NodeStats> nodesStats, ClusterState state,_                                                   IndexNameExpressionResolver indexNameExpressionResolver,_                                                   String[] indices, IndicesOptions indicesOptions,_                                                   List<Function<ClusterState,DeprecationIssue>>clusterSettingsChecks,_                                                   List<BiFunction<List<NodeInfo>, List<NodeStats>, DeprecationIssue>> nodeSettingsChecks,_                                                   List<Function<IndexMetaData, DeprecationIssue>> indexSettingsChecks) {_            List<DeprecationIssue> clusterSettingsIssues = filterChecks(clusterSettingsChecks,_                (c) -> c.apply(state))__            List<DeprecationIssue> nodeSettingsIssues = filterChecks(nodeSettingsChecks,_                (c) -> c.apply(nodesInfo, nodesStats))___            String[] concreteIndexNames = indexNameExpressionResolver.concreteIndexNames(state, indicesOptions, indices)___            Map<String, List<DeprecationIssue>> indexSettingsIssues = new HashMap<>()__            for (String concreteIndex : concreteIndexNames) {_                IndexMetaData indexMetaData = state.getMetaData().index(concreteIndex)__                List<DeprecationIssue> singleIndexIssues = filterChecks(indexSettingsChecks,_                    c -> c.apply(indexMetaData))__                if (singleIndexIssues.size() > 0) {_                    indexSettingsIssues.put(concreteIndex, singleIndexIssues)__                }_            }__            return new DeprecationInfoAction.Response(clusterSettingsIssues, nodeSettingsIssues, indexSettingsIssues)__        };this,is,the,function,that,does,the,bulk,of,the,logic,of,taking,the,appropriate,es,dependencies,like,link,node,info,link,cluster,state,alongside,these,objects,and,the,list,of,deprecation,checks,this,function,will,run,through,all,the,checks,and,build,out,the,final,list,of,issues,that,exist,in,the,cluster,param,nodes,info,the,list,of,link,node,info,metadata,objects,for,retrieving,node,level,information,param,nodes,stats,the,list,of,link,node,stats,metadata,objects,for,retrieving,node,level,information,param,state,the,cluster,state,param,index,name,expression,resolver,used,to,resolve,indices,into,their,concrete,names,param,indices,the,list,of,index,expressions,to,evaluate,using,index,name,expression,resolver,param,indices,options,the,options,to,use,when,resolving,and,filtering,which,indices,to,check,param,cluster,settings,checks,the,list,of,cluster,level,checks,param,node,settings,checks,the,list,of,node,level,checks,param,index,settings,checks,the,list,of,index,level,checks,that,will,be,run,across,all,specified,concrete,indices,return,the,list,of,deprecation,issues,found,in,the,cluster;public,static,deprecation,info,action,response,from,list,node,info,nodes,info,list,node,stats,nodes,stats,cluster,state,state,index,name,expression,resolver,index,name,expression,resolver,string,indices,indices,options,indices,options,list,function,cluster,state,deprecation,issue,cluster,settings,checks,list,bi,function,list,node,info,list,node,stats,deprecation,issue,node,settings,checks,list,function,index,meta,data,deprecation,issue,index,settings,checks,list,deprecation,issue,cluster,settings,issues,filter,checks,cluster,settings,checks,c,c,apply,state,list,deprecation,issue,node,settings,issues,filter,checks,node,settings,checks,c,c,apply,nodes,info,nodes,stats,string,concrete,index,names,index,name,expression,resolver,concrete,index,names,state,indices,options,indices,map,string,list,deprecation,issue,index,settings,issues,new,hash,map,for,string,concrete,index,concrete,index,names,index,meta,data,index,meta,data,state,get,meta,data,index,concrete,index,list,deprecation,issue,single,index,issues,filter,checks,index,settings,checks,c,c,apply,index,meta,data,if,single,index,issues,size,0,index,settings,issues,put,concrete,index,single,index,issues,return,new,deprecation,info,action,response,cluster,settings,issues,node,settings,issues,index,settings,issues
DeprecationInfoAction -> Response -> public static DeprecationInfoAction.Response from(List<NodeInfo> nodesInfo, List<NodeStats> nodesStats, ClusterState state,                                                    IndexNameExpressionResolver indexNameExpressionResolver,                                                    String[] indices, IndicesOptions indicesOptions,                                                    List<Function<ClusterState,DeprecationIssue>>clusterSettingsChecks,                                                    List<BiFunction<List<NodeInfo>, List<NodeStats>, DeprecationIssue>> nodeSettingsChecks,                                                    List<Function<IndexMetaData, DeprecationIssue>> indexSettingsChecks);1527840262;This is the function that does the bulk of the logic of taking the appropriate ES dependencies_like {@link NodeInfo}, {@link ClusterState}. Alongside these objects and the list of deprecation checks,_this function will run through all the checks and build out the final list of issues that exist in the_cluster.__@param nodesInfo The list of {@link NodeInfo} metadata objects for retrieving node-level information_@param nodesStats The list of {@link NodeStats} metadata objects for retrieving node-level information_@param state The cluster state_@param indexNameExpressionResolver Used to resolve indices into their concrete names_@param indices The list of index expressions to evaluate using `indexNameExpressionResolver`_@param indicesOptions The options to use when resolving and filtering which indices to check_@param clusterSettingsChecks The list of cluster-level checks_@param nodeSettingsChecks The list of node-level checks_@param indexSettingsChecks The list of index-level checks that will be run across all specified_concrete indices_@return The list of deprecation issues found in the cluster;public static DeprecationInfoAction.Response from(List<NodeInfo> nodesInfo, List<NodeStats> nodesStats, ClusterState state,_                                                   IndexNameExpressionResolver indexNameExpressionResolver,_                                                   String[] indices, IndicesOptions indicesOptions,_                                                   List<Function<ClusterState,DeprecationIssue>>clusterSettingsChecks,_                                                   List<BiFunction<List<NodeInfo>, List<NodeStats>, DeprecationIssue>> nodeSettingsChecks,_                                                   List<Function<IndexMetaData, DeprecationIssue>> indexSettingsChecks) {_            List<DeprecationIssue> clusterSettingsIssues = filterChecks(clusterSettingsChecks,_                (c) -> c.apply(state))__            List<DeprecationIssue> nodeSettingsIssues = filterChecks(nodeSettingsChecks,_                (c) -> c.apply(nodesInfo, nodesStats))___            String[] concreteIndexNames = indexNameExpressionResolver.concreteIndexNames(state, indicesOptions, indices)___            Map<String, List<DeprecationIssue>> indexSettingsIssues = new HashMap<>()__            for (String concreteIndex : concreteIndexNames) {_                IndexMetaData indexMetaData = state.getMetaData().index(concreteIndex)__                List<DeprecationIssue> singleIndexIssues = filterChecks(indexSettingsChecks,_                    c -> c.apply(indexMetaData))__                if (singleIndexIssues.size() > 0) {_                    indexSettingsIssues.put(concreteIndex, singleIndexIssues)__                }_            }__            return new DeprecationInfoAction.Response(clusterSettingsIssues, nodeSettingsIssues, indexSettingsIssues)__        };this,is,the,function,that,does,the,bulk,of,the,logic,of,taking,the,appropriate,es,dependencies,like,link,node,info,link,cluster,state,alongside,these,objects,and,the,list,of,deprecation,checks,this,function,will,run,through,all,the,checks,and,build,out,the,final,list,of,issues,that,exist,in,the,cluster,param,nodes,info,the,list,of,link,node,info,metadata,objects,for,retrieving,node,level,information,param,nodes,stats,the,list,of,link,node,stats,metadata,objects,for,retrieving,node,level,information,param,state,the,cluster,state,param,index,name,expression,resolver,used,to,resolve,indices,into,their,concrete,names,param,indices,the,list,of,index,expressions,to,evaluate,using,index,name,expression,resolver,param,indices,options,the,options,to,use,when,resolving,and,filtering,which,indices,to,check,param,cluster,settings,checks,the,list,of,cluster,level,checks,param,node,settings,checks,the,list,of,node,level,checks,param,index,settings,checks,the,list,of,index,level,checks,that,will,be,run,across,all,specified,concrete,indices,return,the,list,of,deprecation,issues,found,in,the,cluster;public,static,deprecation,info,action,response,from,list,node,info,nodes,info,list,node,stats,nodes,stats,cluster,state,state,index,name,expression,resolver,index,name,expression,resolver,string,indices,indices,options,indices,options,list,function,cluster,state,deprecation,issue,cluster,settings,checks,list,bi,function,list,node,info,list,node,stats,deprecation,issue,node,settings,checks,list,function,index,meta,data,deprecation,issue,index,settings,checks,list,deprecation,issue,cluster,settings,issues,filter,checks,cluster,settings,checks,c,c,apply,state,list,deprecation,issue,node,settings,issues,filter,checks,node,settings,checks,c,c,apply,nodes,info,nodes,stats,string,concrete,index,names,index,name,expression,resolver,concrete,index,names,state,indices,options,indices,map,string,list,deprecation,issue,index,settings,issues,new,hash,map,for,string,concrete,index,concrete,index,names,index,meta,data,index,meta,data,state,get,meta,data,index,concrete,index,list,deprecation,issue,single,index,issues,filter,checks,index,settings,checks,c,c,apply,index,meta,data,if,single,index,issues,size,0,index,settings,issues,put,concrete,index,single,index,issues,return,new,deprecation,info,action,response,cluster,settings,issues,node,settings,issues,index,settings,issues
DeprecationInfoAction -> Response -> public static DeprecationInfoAction.Response from(List<NodeInfo> nodesInfo, List<NodeStats> nodesStats, ClusterState state,                                                    IndexNameExpressionResolver indexNameExpressionResolver,                                                    String[] indices, IndicesOptions indicesOptions,                                                    List<Function<ClusterState,DeprecationIssue>>clusterSettingsChecks,                                                    List<BiFunction<List<NodeInfo>, List<NodeStats>, DeprecationIssue>> nodeSettingsChecks,                                                    List<Function<IndexMetaData, DeprecationIssue>> indexSettingsChecks);1529433467;This is the function that does the bulk of the logic of taking the appropriate ES dependencies_like {@link NodeInfo}, {@link ClusterState}. Alongside these objects and the list of deprecation checks,_this function will run through all the checks and build out the final list of issues that exist in the_cluster.__@param nodesInfo The list of {@link NodeInfo} metadata objects for retrieving node-level information_@param nodesStats The list of {@link NodeStats} metadata objects for retrieving node-level information_@param state The cluster state_@param indexNameExpressionResolver Used to resolve indices into their concrete names_@param indices The list of index expressions to evaluate using `indexNameExpressionResolver`_@param indicesOptions The options to use when resolving and filtering which indices to check_@param clusterSettingsChecks The list of cluster-level checks_@param nodeSettingsChecks The list of node-level checks_@param indexSettingsChecks The list of index-level checks that will be run across all specified_concrete indices_@return The list of deprecation issues found in the cluster;public static DeprecationInfoAction.Response from(List<NodeInfo> nodesInfo, List<NodeStats> nodesStats, ClusterState state,_                                                   IndexNameExpressionResolver indexNameExpressionResolver,_                                                   String[] indices, IndicesOptions indicesOptions,_                                                   List<Function<ClusterState,DeprecationIssue>>clusterSettingsChecks,_                                                   List<BiFunction<List<NodeInfo>, List<NodeStats>, DeprecationIssue>> nodeSettingsChecks,_                                                   List<Function<IndexMetaData, DeprecationIssue>> indexSettingsChecks) {_            List<DeprecationIssue> clusterSettingsIssues = filterChecks(clusterSettingsChecks,_                (c) -> c.apply(state))__            List<DeprecationIssue> nodeSettingsIssues = filterChecks(nodeSettingsChecks,_                (c) -> c.apply(nodesInfo, nodesStats))___            String[] concreteIndexNames = indexNameExpressionResolver.concreteIndexNames(state, indicesOptions, indices)___            Map<String, List<DeprecationIssue>> indexSettingsIssues = new HashMap<>()__            for (String concreteIndex : concreteIndexNames) {_                IndexMetaData indexMetaData = state.getMetaData().index(concreteIndex)__                List<DeprecationIssue> singleIndexIssues = filterChecks(indexSettingsChecks,_                    c -> c.apply(indexMetaData))__                if (singleIndexIssues.size() > 0) {_                    indexSettingsIssues.put(concreteIndex, singleIndexIssues)__                }_            }__            return new DeprecationInfoAction.Response(clusterSettingsIssues, nodeSettingsIssues, indexSettingsIssues)__        };this,is,the,function,that,does,the,bulk,of,the,logic,of,taking,the,appropriate,es,dependencies,like,link,node,info,link,cluster,state,alongside,these,objects,and,the,list,of,deprecation,checks,this,function,will,run,through,all,the,checks,and,build,out,the,final,list,of,issues,that,exist,in,the,cluster,param,nodes,info,the,list,of,link,node,info,metadata,objects,for,retrieving,node,level,information,param,nodes,stats,the,list,of,link,node,stats,metadata,objects,for,retrieving,node,level,information,param,state,the,cluster,state,param,index,name,expression,resolver,used,to,resolve,indices,into,their,concrete,names,param,indices,the,list,of,index,expressions,to,evaluate,using,index,name,expression,resolver,param,indices,options,the,options,to,use,when,resolving,and,filtering,which,indices,to,check,param,cluster,settings,checks,the,list,of,cluster,level,checks,param,node,settings,checks,the,list,of,node,level,checks,param,index,settings,checks,the,list,of,index,level,checks,that,will,be,run,across,all,specified,concrete,indices,return,the,list,of,deprecation,issues,found,in,the,cluster;public,static,deprecation,info,action,response,from,list,node,info,nodes,info,list,node,stats,nodes,stats,cluster,state,state,index,name,expression,resolver,index,name,expression,resolver,string,indices,indices,options,indices,options,list,function,cluster,state,deprecation,issue,cluster,settings,checks,list,bi,function,list,node,info,list,node,stats,deprecation,issue,node,settings,checks,list,function,index,meta,data,deprecation,issue,index,settings,checks,list,deprecation,issue,cluster,settings,issues,filter,checks,cluster,settings,checks,c,c,apply,state,list,deprecation,issue,node,settings,issues,filter,checks,node,settings,checks,c,c,apply,nodes,info,nodes,stats,string,concrete,index,names,index,name,expression,resolver,concrete,index,names,state,indices,options,indices,map,string,list,deprecation,issue,index,settings,issues,new,hash,map,for,string,concrete,index,concrete,index,names,index,meta,data,index,meta,data,state,get,meta,data,index,concrete,index,list,deprecation,issue,single,index,issues,filter,checks,index,settings,checks,c,c,apply,index,meta,data,if,single,index,issues,size,0,index,settings,issues,put,concrete,index,single,index,issues,return,new,deprecation,info,action,response,cluster,settings,issues,node,settings,issues,index,settings,issues
