# id;timestamp;commentText;codeText;commentWords;codeWords
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           Map<String, AliasOrIndex> allAliasesAndIndices,                                                                           FieldPermissionsCache fieldPermissionsCache);1549399169;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          Map<String, AliasOrIndex> allAliasesAndIndices,_                                                                          FieldPermissionsCache fieldPermissionsCache) {_        _        _        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions,_                    (roleQueries != null) ? DocumentPermissions.filteredBy(roleQueries) : DocumentPermissions.allowAll()))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,map,string,alias,or,index,all,aliases,and,indices,field,permissions,cache,field,permissions,cache,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,null,document,permissions,filtered,by,role,queries,document,permissions,allow,all,return,unmodifiable,map,index,permissions
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           Map<String, AliasOrIndex> allAliasesAndIndices,                                                                           FieldPermissionsCache fieldPermissionsCache);1551160396;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          Map<String, AliasOrIndex> allAliasesAndIndices,_                                                                          FieldPermissionsCache fieldPermissionsCache) {_        _        _        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions,_                    (roleQueries != null) ? DocumentPermissions.filteredBy(roleQueries) : DocumentPermissions.allowAll()))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,map,string,alias,or,index,all,aliases,and,indices,field,permissions,cache,field,permissions,cache,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,null,document,permissions,filtered,by,role,queries,document,permissions,allow,all,return,unmodifiable,map,index,permissions
IndicesPermission -> public ResourcePrivilegesMap checkResourcePrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices,                                                          Set<String> checkForPrivileges);1549336917;For given index patterns and index privileges determines allowed privileges and creates an instance of {@link ResourcePrivilegesMap}_holding a map of resource to {@link ResourcePrivileges} where resource is index pattern and the map of index privilege to whether it_is allowed or not.__@param checkForIndexPatterns check permission grants for the set of index patterns_@param allowRestrictedIndices if {@code true} then checks permission grants even for restricted indices by index matching_@param checkForPrivileges check permission grants for the set of index privileges_@return an instance of {@link ResourcePrivilegesMap};public ResourcePrivilegesMap checkResourcePrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices,_                                                         Set<String> checkForPrivileges) {_        final ResourcePrivilegesMap.Builder resourcePrivilegesMapBuilder = ResourcePrivilegesMap.builder()__        final Map<IndicesPermission.Group, Automaton> predicateCache = new HashMap<>()__        for (String forIndexPattern : checkForIndexPatterns) {_            final Automaton checkIndexAutomaton = IndicesPermission.Group.buildIndexMatcherAutomaton(allowRestrictedIndices,_                    forIndexPattern)__            Automaton allowedIndexPrivilegesAutomaton = null__            for (Group group : groups) {_                final Automaton groupIndexAutomaton = predicateCache.computeIfAbsent(group,_                        g -> IndicesPermission.Group.buildIndexMatcherAutomaton(g.allowRestrictedIndices(), g.indices()))__                if (Operations.subsetOf(checkIndexAutomaton, groupIndexAutomaton)) {_                    if (allowedIndexPrivilegesAutomaton != null) {_                        allowedIndexPrivilegesAutomaton = Automatons_                                .unionAndMinimize(Arrays.asList(allowedIndexPrivilegesAutomaton, group.privilege().getAutomaton()))__                    } else {_                        allowedIndexPrivilegesAutomaton = group.privilege().getAutomaton()__                    }_                }_            }_            for (String privilege : checkForPrivileges) {_                IndexPrivilege indexPrivilege = IndexPrivilege.get(Collections.singleton(privilege))__                if (allowedIndexPrivilegesAutomaton != null_                        && Operations.subsetOf(indexPrivilege.getAutomaton(), allowedIndexPrivilegesAutomaton)) {_                    resourcePrivilegesMapBuilder.addResourcePrivilege(forIndexPattern, privilege, Boolean.TRUE)__                } else {_                    resourcePrivilegesMapBuilder.addResourcePrivilege(forIndexPattern, privilege, Boolean.FALSE)__                }_            }_        }_        return resourcePrivilegesMapBuilder.build()__    };for,given,index,patterns,and,index,privileges,determines,allowed,privileges,and,creates,an,instance,of,link,resource,privileges,map,holding,a,map,of,resource,to,link,resource,privileges,where,resource,is,index,pattern,and,the,map,of,index,privilege,to,whether,it,is,allowed,or,not,param,check,for,index,patterns,check,permission,grants,for,the,set,of,index,patterns,param,allow,restricted,indices,if,code,true,then,checks,permission,grants,even,for,restricted,indices,by,index,matching,param,check,for,privileges,check,permission,grants,for,the,set,of,index,privileges,return,an,instance,of,link,resource,privileges,map;public,resource,privileges,map,check,resource,privileges,set,string,check,for,index,patterns,boolean,allow,restricted,indices,set,string,check,for,privileges,final,resource,privileges,map,builder,resource,privileges,map,builder,resource,privileges,map,builder,final,map,indices,permission,group,automaton,predicate,cache,new,hash,map,for,string,for,index,pattern,check,for,index,patterns,final,automaton,check,index,automaton,indices,permission,group,build,index,matcher,automaton,allow,restricted,indices,for,index,pattern,automaton,allowed,index,privileges,automaton,null,for,group,group,groups,final,automaton,group,index,automaton,predicate,cache,compute,if,absent,group,g,indices,permission,group,build,index,matcher,automaton,g,allow,restricted,indices,g,indices,if,operations,subset,of,check,index,automaton,group,index,automaton,if,allowed,index,privileges,automaton,null,allowed,index,privileges,automaton,automatons,union,and,minimize,arrays,as,list,allowed,index,privileges,automaton,group,privilege,get,automaton,else,allowed,index,privileges,automaton,group,privilege,get,automaton,for,string,privilege,check,for,privileges,index,privilege,index,privilege,index,privilege,get,collections,singleton,privilege,if,allowed,index,privileges,automaton,null,operations,subset,of,index,privilege,get,automaton,allowed,index,privileges,automaton,resource,privileges,map,builder,add,resource,privilege,for,index,pattern,privilege,boolean,true,else,resource,privileges,map,builder,add,resource,privilege,for,index,pattern,privilege,boolean,false,return,resource,privileges,map,builder,build
IndicesPermission -> public ResourcePrivilegesMap checkResourcePrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices,                                                          Set<String> checkForPrivileges);1549399169;For given index patterns and index privileges determines allowed privileges and creates an instance of {@link ResourcePrivilegesMap}_holding a map of resource to {@link ResourcePrivileges} where resource is index pattern and the map of index privilege to whether it_is allowed or not.__@param checkForIndexPatterns check permission grants for the set of index patterns_@param allowRestrictedIndices if {@code true} then checks permission grants even for restricted indices by index matching_@param checkForPrivileges check permission grants for the set of index privileges_@return an instance of {@link ResourcePrivilegesMap};public ResourcePrivilegesMap checkResourcePrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices,_                                                         Set<String> checkForPrivileges) {_        final ResourcePrivilegesMap.Builder resourcePrivilegesMapBuilder = ResourcePrivilegesMap.builder()__        final Map<IndicesPermission.Group, Automaton> predicateCache = new HashMap<>()__        for (String forIndexPattern : checkForIndexPatterns) {_            final Automaton checkIndexAutomaton = IndicesPermission.Group.buildIndexMatcherAutomaton(allowRestrictedIndices,_                    forIndexPattern)__            Automaton allowedIndexPrivilegesAutomaton = null__            for (Group group : groups) {_                final Automaton groupIndexAutomaton = predicateCache.computeIfAbsent(group,_                        g -> IndicesPermission.Group.buildIndexMatcherAutomaton(g.allowRestrictedIndices(), g.indices()))__                if (Operations.subsetOf(checkIndexAutomaton, groupIndexAutomaton)) {_                    if (allowedIndexPrivilegesAutomaton != null) {_                        allowedIndexPrivilegesAutomaton = Automatons_                                .unionAndMinimize(Arrays.asList(allowedIndexPrivilegesAutomaton, group.privilege().getAutomaton()))__                    } else {_                        allowedIndexPrivilegesAutomaton = group.privilege().getAutomaton()__                    }_                }_            }_            for (String privilege : checkForPrivileges) {_                IndexPrivilege indexPrivilege = IndexPrivilege.get(Collections.singleton(privilege))__                if (allowedIndexPrivilegesAutomaton != null_                        && Operations.subsetOf(indexPrivilege.getAutomaton(), allowedIndexPrivilegesAutomaton)) {_                    resourcePrivilegesMapBuilder.addResourcePrivilege(forIndexPattern, privilege, Boolean.TRUE)__                } else {_                    resourcePrivilegesMapBuilder.addResourcePrivilege(forIndexPattern, privilege, Boolean.FALSE)__                }_            }_        }_        return resourcePrivilegesMapBuilder.build()__    };for,given,index,patterns,and,index,privileges,determines,allowed,privileges,and,creates,an,instance,of,link,resource,privileges,map,holding,a,map,of,resource,to,link,resource,privileges,where,resource,is,index,pattern,and,the,map,of,index,privilege,to,whether,it,is,allowed,or,not,param,check,for,index,patterns,check,permission,grants,for,the,set,of,index,patterns,param,allow,restricted,indices,if,code,true,then,checks,permission,grants,even,for,restricted,indices,by,index,matching,param,check,for,privileges,check,permission,grants,for,the,set,of,index,privileges,return,an,instance,of,link,resource,privileges,map;public,resource,privileges,map,check,resource,privileges,set,string,check,for,index,patterns,boolean,allow,restricted,indices,set,string,check,for,privileges,final,resource,privileges,map,builder,resource,privileges,map,builder,resource,privileges,map,builder,final,map,indices,permission,group,automaton,predicate,cache,new,hash,map,for,string,for,index,pattern,check,for,index,patterns,final,automaton,check,index,automaton,indices,permission,group,build,index,matcher,automaton,allow,restricted,indices,for,index,pattern,automaton,allowed,index,privileges,automaton,null,for,group,group,groups,final,automaton,group,index,automaton,predicate,cache,compute,if,absent,group,g,indices,permission,group,build,index,matcher,automaton,g,allow,restricted,indices,g,indices,if,operations,subset,of,check,index,automaton,group,index,automaton,if,allowed,index,privileges,automaton,null,allowed,index,privileges,automaton,automatons,union,and,minimize,arrays,as,list,allowed,index,privileges,automaton,group,privilege,get,automaton,else,allowed,index,privileges,automaton,group,privilege,get,automaton,for,string,privilege,check,for,privileges,index,privilege,index,privilege,index,privilege,get,collections,singleton,privilege,if,allowed,index,privileges,automaton,null,operations,subset,of,index,privilege,get,automaton,allowed,index,privileges,automaton,resource,privileges,map,builder,add,resource,privilege,for,index,pattern,privilege,boolean,true,else,resource,privileges,map,builder,add,resource,privilege,for,index,pattern,privilege,boolean,false,return,resource,privileges,map,builder,build
IndicesPermission -> public ResourcePrivilegesMap checkResourcePrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices,                                                          Set<String> checkForPrivileges);1551160396;For given index patterns and index privileges determines allowed privileges and creates an instance of {@link ResourcePrivilegesMap}_holding a map of resource to {@link ResourcePrivileges} where resource is index pattern and the map of index privilege to whether it_is allowed or not.__@param checkForIndexPatterns check permission grants for the set of index patterns_@param allowRestrictedIndices if {@code true} then checks permission grants even for restricted indices by index matching_@param checkForPrivileges check permission grants for the set of index privileges_@return an instance of {@link ResourcePrivilegesMap};public ResourcePrivilegesMap checkResourcePrivileges(Set<String> checkForIndexPatterns, boolean allowRestrictedIndices,_                                                         Set<String> checkForPrivileges) {_        final ResourcePrivilegesMap.Builder resourcePrivilegesMapBuilder = ResourcePrivilegesMap.builder()__        final Map<IndicesPermission.Group, Automaton> predicateCache = new HashMap<>()__        for (String forIndexPattern : checkForIndexPatterns) {_            final Automaton checkIndexAutomaton = IndicesPermission.Group.buildIndexMatcherAutomaton(allowRestrictedIndices,_                    forIndexPattern)__            Automaton allowedIndexPrivilegesAutomaton = null__            for (Group group : groups) {_                final Automaton groupIndexAutomaton = predicateCache.computeIfAbsent(group,_                        g -> IndicesPermission.Group.buildIndexMatcherAutomaton(g.allowRestrictedIndices(), g.indices()))__                if (Operations.subsetOf(checkIndexAutomaton, groupIndexAutomaton)) {_                    if (allowedIndexPrivilegesAutomaton != null) {_                        allowedIndexPrivilegesAutomaton = Automatons_                                .unionAndMinimize(Arrays.asList(allowedIndexPrivilegesAutomaton, group.privilege().getAutomaton()))__                    } else {_                        allowedIndexPrivilegesAutomaton = group.privilege().getAutomaton()__                    }_                }_            }_            for (String privilege : checkForPrivileges) {_                IndexPrivilege indexPrivilege = IndexPrivilege.get(Collections.singleton(privilege))__                if (allowedIndexPrivilegesAutomaton != null_                        && Operations.subsetOf(indexPrivilege.getAutomaton(), allowedIndexPrivilegesAutomaton)) {_                    resourcePrivilegesMapBuilder.addResourcePrivilege(forIndexPattern, privilege, Boolean.TRUE)__                } else {_                    resourcePrivilegesMapBuilder.addResourcePrivilege(forIndexPattern, privilege, Boolean.FALSE)__                }_            }_        }_        return resourcePrivilegesMapBuilder.build()__    };for,given,index,patterns,and,index,privileges,determines,allowed,privileges,and,creates,an,instance,of,link,resource,privileges,map,holding,a,map,of,resource,to,link,resource,privileges,where,resource,is,index,pattern,and,the,map,of,index,privilege,to,whether,it,is,allowed,or,not,param,check,for,index,patterns,check,permission,grants,for,the,set,of,index,patterns,param,allow,restricted,indices,if,code,true,then,checks,permission,grants,even,for,restricted,indices,by,index,matching,param,check,for,privileges,check,permission,grants,for,the,set,of,index,privileges,return,an,instance,of,link,resource,privileges,map;public,resource,privileges,map,check,resource,privileges,set,string,check,for,index,patterns,boolean,allow,restricted,indices,set,string,check,for,privileges,final,resource,privileges,map,builder,resource,privileges,map,builder,resource,privileges,map,builder,final,map,indices,permission,group,automaton,predicate,cache,new,hash,map,for,string,for,index,pattern,check,for,index,patterns,final,automaton,check,index,automaton,indices,permission,group,build,index,matcher,automaton,allow,restricted,indices,for,index,pattern,automaton,allowed,index,privileges,automaton,null,for,group,group,groups,final,automaton,group,index,automaton,predicate,cache,compute,if,absent,group,g,indices,permission,group,build,index,matcher,automaton,g,allow,restricted,indices,g,indices,if,operations,subset,of,check,index,automaton,group,index,automaton,if,allowed,index,privileges,automaton,null,allowed,index,privileges,automaton,automatons,union,and,minimize,arrays,as,list,allowed,index,privileges,automaton,group,privilege,get,automaton,else,allowed,index,privileges,automaton,group,privilege,get,automaton,for,string,privilege,check,for,privileges,index,privilege,index,privilege,index,privilege,get,collections,singleton,privilege,if,allowed,index,privileges,automaton,null,operations,subset,of,index,privilege,get,automaton,allowed,index,privileges,automaton,resource,privileges,map,builder,add,resource,privilege,for,index,pattern,privilege,boolean,true,else,resource,privileges,map,builder,add,resource,privilege,for,index,pattern,privilege,boolean,false,return,resource,privileges,map,builder,build
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1524684173;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, loadingFunction)__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,loading,function
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1540847035;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, loadingFunction)__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,loading,function
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1543516626;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, loadingFunction)__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,loading,function
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1548019180;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, a -> Group.buildIndexMatcherPredicateForAction(a, groups))__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,a,group,build,index,matcher,predicate,for,action,a,groups
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1548789003;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, a -> Group.buildIndexMatcherPredicateForAction(a, groups))__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,a,group,build,index,matcher,predicate,for,action,a,groups
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1549336917;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, a -> Group.buildIndexMatcherPredicateForAction(a, groups))__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,a,group,build,index,matcher,predicate,for,action,a,groups
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1549399169;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, a -> Group.buildIndexMatcherPredicateForAction(a, groups))__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,a,group,build,index,matcher,predicate,for,action,a,groups
IndicesPermission -> public Predicate<String> allowedIndicesMatcher(String action);1551160396;@return A predicate that will match all the indices that this permission_has the privilege for executing the given action on.;public Predicate<String> allowedIndicesMatcher(String action) {_        return allowedIndicesMatchersForAction.computeIfAbsent(action, a -> Group.buildIndexMatcherPredicateForAction(a, groups))__    };return,a,predicate,that,will,match,all,the,indices,that,this,permission,has,the,privilege,for,executing,the,given,action,on;public,predicate,string,allowed,indices,matcher,string,action,return,allowed,indices,matchers,for,action,compute,if,absent,action,a,group,build,index,matcher,predicate,for,action,a,groups
IndicesPermission -> public boolean check(String action);1524684173;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1540847035;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1543516626;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1548019180;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1548789003;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1549336917;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1549399169;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public boolean check(String action);1551160396;Checks if the permission matches the provided action, without looking at indices._To be used in very specific cases where indices actions need to be authorized regardless of their indices._The usecase for this is composite actions that are initially only authorized based on the action name (indices are not_checked on the coordinating node), and properly authorized later at the shard level checking their indices as well.;public boolean check(String action) {_        for (Group group : groups) {_            if (group.check(action)) {_                return true__            }_        }_        return false__    };checks,if,the,permission,matches,the,provided,action,without,looking,at,indices,to,be,used,in,very,specific,cases,where,indices,actions,need,to,be,authorized,regardless,of,their,indices,the,usecase,for,this,is,composite,actions,that,are,initially,only,authorized,based,on,the,action,name,indices,are,not,checked,on,the,coordinating,node,and,properly,authorized,later,at,the,shard,level,checking,their,indices,as,well;public,boolean,check,string,action,for,group,group,groups,if,group,check,action,return,true,return,false
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           MetaData metaData, FieldPermissionsCache fieldPermissionsCache);1524684173;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          MetaData metaData, FieldPermissionsCache fieldPermissionsCache) {_        _        __        SortedMap<String, AliasOrIndex> allAliasesAndIndices = metaData.getAliasAndIndexLookup()__        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions, roleQueries))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,meta,data,meta,data,field,permissions,cache,field,permissions,cache,sorted,map,string,alias,or,index,all,aliases,and,indices,meta,data,get,alias,and,index,lookup,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,return,unmodifiable,map,index,permissions
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           MetaData metaData, FieldPermissionsCache fieldPermissionsCache);1540847035;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          MetaData metaData, FieldPermissionsCache fieldPermissionsCache) {_        _        __        SortedMap<String, AliasOrIndex> allAliasesAndIndices = metaData.getAliasAndIndexLookup()__        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions, roleQueries))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,meta,data,meta,data,field,permissions,cache,field,permissions,cache,sorted,map,string,alias,or,index,all,aliases,and,indices,meta,data,get,alias,and,index,lookup,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,return,unmodifiable,map,index,permissions
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           MetaData metaData, FieldPermissionsCache fieldPermissionsCache);1543516626;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          MetaData metaData, FieldPermissionsCache fieldPermissionsCache) {_        _        __        SortedMap<String, AliasOrIndex> allAliasesAndIndices = metaData.getAliasAndIndexLookup()__        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions, roleQueries))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,meta,data,meta,data,field,permissions,cache,field,permissions,cache,sorted,map,string,alias,or,index,all,aliases,and,indices,meta,data,get,alias,and,index,lookup,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,return,unmodifiable,map,index,permissions
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           MetaData metaData, FieldPermissionsCache fieldPermissionsCache);1548019180;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          MetaData metaData, FieldPermissionsCache fieldPermissionsCache) {_        _        __        SortedMap<String, AliasOrIndex> allAliasesAndIndices = metaData.getAliasAndIndexLookup()__        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions, roleQueries))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,meta,data,meta,data,field,permissions,cache,field,permissions,cache,sorted,map,string,alias,or,index,all,aliases,and,indices,meta,data,get,alias,and,index,lookup,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,return,unmodifiable,map,index,permissions
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           MetaData metaData, FieldPermissionsCache fieldPermissionsCache);1548789003;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          MetaData metaData, FieldPermissionsCache fieldPermissionsCache) {_        _        __        SortedMap<String, AliasOrIndex> allAliasesAndIndices = metaData.getAliasAndIndexLookup()__        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions, roleQueries))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,meta,data,meta,data,field,permissions,cache,field,permissions,cache,sorted,map,string,alias,or,index,all,aliases,and,indices,meta,data,get,alias,and,index,lookup,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,return,unmodifiable,map,index,permissions
IndicesPermission -> public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,                                                                           MetaData metaData, FieldPermissionsCache fieldPermissionsCache);1549336917;Authorizes the provided action against the provided indices, given the current cluster metadata;public Map<String, IndicesAccessControl.IndexAccessControl> authorize(String action, Set<String> requestedIndicesOrAliases,_                                                                          MetaData metaData, FieldPermissionsCache fieldPermissionsCache) {_        _        __        SortedMap<String, AliasOrIndex> allAliasesAndIndices = metaData.getAliasAndIndexLookup()__        Map<String, Set<FieldPermissions>> fieldPermissionsByIndex = new HashMap<>()__        Map<String, DocumentLevelPermissions> roleQueriesByIndex = new HashMap<>()__        Map<String, Boolean> grantedBuilder = new HashMap<>()___        for (String indexOrAlias : requestedIndicesOrAliases) {_            boolean granted = false__            Set<String> concreteIndices = new HashSet<>()__            AliasOrIndex aliasOrIndex = allAliasesAndIndices.get(indexOrAlias)__            if (aliasOrIndex != null) {_                for (IndexMetaData indexMetaData : aliasOrIndex.getIndices()) {_                    concreteIndices.add(indexMetaData.getIndex().getName())__                }_            }__            for (Group group : groups) {_                if (group.check(action, indexOrAlias)) {_                    granted = true__                    for (String index : concreteIndices) {_                        Set<FieldPermissions> fieldPermissions = fieldPermissionsByIndex.computeIfAbsent(index, (k) -> new HashSet<>())__                        fieldPermissionsByIndex.put(indexOrAlias, fieldPermissions)__                        fieldPermissions.add(group.getFieldPermissions())__                        DocumentLevelPermissions permissions =_                                roleQueriesByIndex.computeIfAbsent(index, (k) -> new DocumentLevelPermissions())__                        roleQueriesByIndex.putIfAbsent(indexOrAlias, permissions)__                        if (group.hasQuery()) {_                            permissions.addAll(group.getQuery())__                        } else {_                            _                            _                            _                            permissions.setAllowAll(true)__                        }_                    }_                }_            }__            if (concreteIndices.isEmpty()) {_                grantedBuilder.put(indexOrAlias, granted)__            } else {_                grantedBuilder.put(indexOrAlias, granted)__                for (String concreteIndex : concreteIndices) {_                    grantedBuilder.put(concreteIndex, granted)__                }_            }_        }__        Map<String, IndicesAccessControl.IndexAccessControl> indexPermissions = new HashMap<>()__        for (Map.Entry<String, Boolean> entry : grantedBuilder.entrySet()) {_            String index = entry.getKey()__            DocumentLevelPermissions permissions = roleQueriesByIndex.get(index)__            final Set<BytesReference> roleQueries__            if (permissions != null && permissions.isAllowAll() == false) {_                roleQueries = unmodifiableSet(permissions.queries)__            } else {_                roleQueries = null__            }__            final FieldPermissions fieldPermissions__            final Set<FieldPermissions> indexFieldPermissions = fieldPermissionsByIndex.get(index)__            if (indexFieldPermissions != null && indexFieldPermissions.isEmpty() == false) {_                fieldPermissions = indexFieldPermissions.size() == 1 ? indexFieldPermissions.iterator().next() :_                        fieldPermissionsCache.getFieldPermissions(indexFieldPermissions)__            } else {_                fieldPermissions = FieldPermissions.DEFAULT__            }_            indexPermissions.put(index, new IndicesAccessControl.IndexAccessControl(entry.getValue(), fieldPermissions,_                    (roleQueries != null) ? DocumentPermissions.filteredBy(roleQueries) : DocumentPermissions.allowAll()))__        }_        return unmodifiableMap(indexPermissions)__    };authorizes,the,provided,action,against,the,provided,indices,given,the,current,cluster,metadata;public,map,string,indices,access,control,index,access,control,authorize,string,action,set,string,requested,indices,or,aliases,meta,data,meta,data,field,permissions,cache,field,permissions,cache,sorted,map,string,alias,or,index,all,aliases,and,indices,meta,data,get,alias,and,index,lookup,map,string,set,field,permissions,field,permissions,by,index,new,hash,map,map,string,document,level,permissions,role,queries,by,index,new,hash,map,map,string,boolean,granted,builder,new,hash,map,for,string,index,or,alias,requested,indices,or,aliases,boolean,granted,false,set,string,concrete,indices,new,hash,set,alias,or,index,alias,or,index,all,aliases,and,indices,get,index,or,alias,if,alias,or,index,null,for,index,meta,data,index,meta,data,alias,or,index,get,indices,concrete,indices,add,index,meta,data,get,index,get,name,for,group,group,groups,if,group,check,action,index,or,alias,granted,true,for,string,index,concrete,indices,set,field,permissions,field,permissions,field,permissions,by,index,compute,if,absent,index,k,new,hash,set,field,permissions,by,index,put,index,or,alias,field,permissions,field,permissions,add,group,get,field,permissions,document,level,permissions,permissions,role,queries,by,index,compute,if,absent,index,k,new,document,level,permissions,role,queries,by,index,put,if,absent,index,or,alias,permissions,if,group,has,query,permissions,add,all,group,get,query,else,permissions,set,allow,all,true,if,concrete,indices,is,empty,granted,builder,put,index,or,alias,granted,else,granted,builder,put,index,or,alias,granted,for,string,concrete,index,concrete,indices,granted,builder,put,concrete,index,granted,map,string,indices,access,control,index,access,control,index,permissions,new,hash,map,for,map,entry,string,boolean,entry,granted,builder,entry,set,string,index,entry,get,key,document,level,permissions,permissions,role,queries,by,index,get,index,final,set,bytes,reference,role,queries,if,permissions,null,permissions,is,allow,all,false,role,queries,unmodifiable,set,permissions,queries,else,role,queries,null,final,field,permissions,field,permissions,final,set,field,permissions,index,field,permissions,field,permissions,by,index,get,index,if,index,field,permissions,null,index,field,permissions,is,empty,false,field,permissions,index,field,permissions,size,1,index,field,permissions,iterator,next,field,permissions,cache,get,field,permissions,index,field,permissions,else,field,permissions,field,permissions,default,index,permissions,put,index,new,indices,access,control,index,access,control,entry,get,value,field,permissions,role,queries,null,document,permissions,filtered,by,role,queries,document,permissions,allow,all,return,unmodifiable,map,index,permissions
