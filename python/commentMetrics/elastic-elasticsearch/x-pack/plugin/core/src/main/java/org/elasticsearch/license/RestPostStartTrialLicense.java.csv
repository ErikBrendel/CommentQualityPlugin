commented;modifiers;parameterAmount;loc;comment;code
false;public;2;29;;@Override public RestResponse buildResponse(PostStartTrialResponse response, XContentBuilder builder) throws Exception {     PostStartTrialResponse.Status status = response.getStatus().     builder.startObject().     builder.field("acknowledged", startTrialRequest.isAcknowledged()).     if (status.isTrialStarted()) {         builder.field("trial_was_started", true).         builder.field("type", startTrialRequest.getType()).     } else {         builder.field("trial_was_started", false).         builder.field("error_message", status.getErrorMessage()).     }     Map<String, String[]> acknowledgementMessages = response.getAcknowledgementMessages().     if (acknowledgementMessages.isEmpty() == false) {         builder.startObject("acknowledge").         builder.field("message", response.getAcknowledgementMessage()).         for (Map.Entry<String, String[]> entry : acknowledgementMessages.entrySet()) {             builder.startArray(entry.getKey()).             for (String message : entry.getValue()) {                 builder.value(message).             }             builder.endArray().         }         builder.endObject().     }     builder.endObject().     return new BytesRestResponse(status.getRestStatus(), builder). }
false;protected;2;38;;@Override protected RestChannelConsumer doPrepareRequest(RestRequest request, XPackClient client) throws IOException {     PostStartTrialRequest startTrialRequest = new PostStartTrialRequest().     startTrialRequest.setType(request.param("type", "trial")).     startTrialRequest.acknowledge(request.paramAsBoolean("acknowledge", false)).     return channel -> client.licensing().postStartTrial(startTrialRequest, new RestBuilderListener<PostStartTrialResponse>(channel) {          @Override         public RestResponse buildResponse(PostStartTrialResponse response, XContentBuilder builder) throws Exception {             PostStartTrialResponse.Status status = response.getStatus().             builder.startObject().             builder.field("acknowledged", startTrialRequest.isAcknowledged()).             if (status.isTrialStarted()) {                 builder.field("trial_was_started", true).                 builder.field("type", startTrialRequest.getType()).             } else {                 builder.field("trial_was_started", false).                 builder.field("error_message", status.getErrorMessage()).             }             Map<String, String[]> acknowledgementMessages = response.getAcknowledgementMessages().             if (acknowledgementMessages.isEmpty() == false) {                 builder.startObject("acknowledge").                 builder.field("message", response.getAcknowledgementMessage()).                 for (Map.Entry<String, String[]> entry : acknowledgementMessages.entrySet()) {                     builder.startArray(entry.getKey()).                     for (String message : entry.getValue()) {                         builder.value(message).                     }                     builder.endArray().                 }                 builder.endObject().             }             builder.endObject().             return new BytesRestResponse(status.getRestStatus(), builder).         }     }). }
false;public;0;4;;@Override public String getName() {     return "post_start_trial". }
