# id;timestamp;commentText;codeText;commentWords;codeWords
Cron -> public Cron(Cron cron);1524684173;Constructs a new {@code CronExpression} as a copy of an existing_instance.__@param cron The existing cron expression to be copied;public Cron(Cron cron) {_        this(cron.expression)__    };constructs,a,new,code,cron,expression,as,a,copy,of,an,existing,instance,param,cron,the,existing,cron,expression,to,be,copied;public,cron,cron,cron,this,cron,expression
Cron -> public Cron(Cron cron);1525248068;Constructs a new {@code CronExpression} as a copy of an existing_instance.__@param cron The existing cron expression to be copied;public Cron(Cron cron) {_        this(cron.expression)__    };constructs,a,new,code,cron,expression,as,a,copy,of,an,existing,instance,param,cron,the,existing,cron,expression,to,be,copied;public,cron,cron,cron,this,cron,expression
Cron -> public Cron(Cron cron);1537806831;Constructs a new {@code CronExpression} as a copy of an existing_instance.__@param cron The existing cron expression to be copied;public Cron(Cron cron) {_        this(cron.expression)__    };constructs,a,new,code,cron,expression,as,a,copy,of,an,existing,instance,param,cron,the,existing,cron,expression,to,be,copied;public,cron,cron,cron,this,cron,expression
Cron -> public Cron(Cron cron);1538067637;Constructs a new {@code CronExpression} as a copy of an existing_instance.__@param cron The existing cron expression to be copied;public Cron(Cron cron) {_        this(cron.expression)__    };constructs,a,new,code,cron,expression,as,a,copy,of,an,existing,instance,param,cron,the,existing,cron,expression,to,be,copied;public,cron,cron,cron,this,cron,expression
Cron -> public Cron(Cron cron);1548422582;Constructs a new {@code CronExpression} as a copy of an existing_instance.__@param cron The existing cron expression to be copied;public Cron(Cron cron) {_        this(cron.expression)__    };constructs,a,new,code,cron,expression,as,a,copy,of,an,existing,instance,param,cron,the,existing,cron,expression,to,be,copied;public,cron,cron,cron,this,cron,expression
Cron -> public Cron(Cron cron);1549400972;Constructs a new {@code CronExpression} as a copy of an existing_instance.__@param cron The existing cron expression to be copied;public Cron(Cron cron) {_        this(cron.expression)__    };constructs,a,new,code,cron,expression,as,a,copy,of,an,existing,instance,param,cron,the,existing,cron,expression,to,be,copied;public,cron,cron,cron,this,cron,expression
Cron -> public static boolean isValid(String expression);1524684173;Indicates whether the specified cron expression can be parsed into a_valid cron expression__@param expression the expression to evaluate_@return a boolean indicating whether the given expression is a valid cron_expression;public static boolean isValid(String expression) {_        try {_            validate(expression)__        } catch (IllegalArgumentException pe) {_            return false__        }_        return true__    };indicates,whether,the,specified,cron,expression,can,be,parsed,into,a,valid,cron,expression,param,expression,the,expression,to,evaluate,return,a,boolean,indicating,whether,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,string,expression,try,validate,expression,catch,illegal,argument,exception,pe,return,false,return,true
Cron -> public static boolean isValid(String expression);1525248068;Indicates whether the specified cron expression can be parsed into a_valid cron expression__@param expression the expression to evaluate_@return a boolean indicating whether the given expression is a valid cron_expression;public static boolean isValid(String expression) {_        try {_            validate(expression)__        } catch (IllegalArgumentException pe) {_            return false__        }_        return true__    };indicates,whether,the,specified,cron,expression,can,be,parsed,into,a,valid,cron,expression,param,expression,the,expression,to,evaluate,return,a,boolean,indicating,whether,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,string,expression,try,validate,expression,catch,illegal,argument,exception,pe,return,false,return,true
Cron -> public static boolean isValid(String expression);1537806831;Indicates whether the specified cron expression can be parsed into a_valid cron expression__@param expression the expression to evaluate_@return a boolean indicating whether the given expression is a valid cron_expression;public static boolean isValid(String expression) {_        try {_            validate(expression)__        } catch (IllegalArgumentException pe) {_            return false__        }_        return true__    };indicates,whether,the,specified,cron,expression,can,be,parsed,into,a,valid,cron,expression,param,expression,the,expression,to,evaluate,return,a,boolean,indicating,whether,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,string,expression,try,validate,expression,catch,illegal,argument,exception,pe,return,false,return,true
Cron -> public static boolean isValid(String expression);1538067637;Indicates whether the specified cron expression can be parsed into a_valid cron expression__@param expression the expression to evaluate_@return a boolean indicating whether the given expression is a valid cron_expression;public static boolean isValid(String expression) {_        try {_            validate(expression)__        } catch (IllegalArgumentException pe) {_            return false__        }_        return true__    };indicates,whether,the,specified,cron,expression,can,be,parsed,into,a,valid,cron,expression,param,expression,the,expression,to,evaluate,return,a,boolean,indicating,whether,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,string,expression,try,validate,expression,catch,illegal,argument,exception,pe,return,false,return,true
Cron -> public static boolean isValid(String expression);1548422582;Indicates whether the specified cron expression can be parsed into a_valid cron expression__@param expression the expression to evaluate_@return a boolean indicating whether the given expression is a valid cron_expression;public static boolean isValid(String expression) {_        try {_            validate(expression)__        } catch (IllegalArgumentException pe) {_            return false__        }_        return true__    };indicates,whether,the,specified,cron,expression,can,be,parsed,into,a,valid,cron,expression,param,expression,the,expression,to,evaluate,return,a,boolean,indicating,whether,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,string,expression,try,validate,expression,catch,illegal,argument,exception,pe,return,false,return,true
Cron -> public static boolean isValid(String expression);1549400972;Indicates whether the specified cron expression can be parsed into a_valid cron expression__@param expression the expression to evaluate_@return a boolean indicating whether the given expression is a valid cron_expression;public static boolean isValid(String expression) {_        try {_            validate(expression)__        } catch (IllegalArgumentException pe) {_            return false__        }_        return true__    };indicates,whether,the,specified,cron,expression,can,be,parsed,into,a,valid,cron,expression,param,expression,the,expression,to,evaluate,return,a,boolean,indicating,whether,the,given,expression,is,a,valid,cron,expression;public,static,boolean,is,valid,string,expression,try,validate,expression,catch,illegal,argument,exception,pe,return,false,return,true
Cron -> public Cron(String expression);1524684173;Constructs a new <CODE>CronExpression</CODE> based on the specified_parameter.__@param expression String representation of the cron expression the_new object should represent_@throws IllegalArgumentException_if the string expression cannot be parsed into a valid_<CODE>CronExpression</CODE>;public Cron(String expression) {_        assert expression != null : "cron expression cannot be null"__        this.expression = expression.toUpperCase(Locale.ROOT)__        try {_            buildExpression(this.expression)__        } catch (Exception e) {_            throw illegalArgument("invalid cron expression [{}]", e, expression)__        }_    };constructs,a,new,code,cron,expression,code,based,on,the,specified,parameter,param,expression,string,representation,of,the,cron,expression,the,new,object,should,represent,throws,illegal,argument,exception,if,the,string,expression,cannot,be,parsed,into,a,valid,code,cron,expression,code;public,cron,string,expression,assert,expression,null,cron,expression,cannot,be,null,this,expression,expression,to,upper,case,locale,root,try,build,expression,this,expression,catch,exception,e,throw,illegal,argument,invalid,cron,expression,e,expression
Cron -> public Cron(String expression);1525248068;Constructs a new <CODE>CronExpression</CODE> based on the specified_parameter.__@param expression String representation of the cron expression the_new object should represent_@throws IllegalArgumentException_if the string expression cannot be parsed into a valid_<CODE>CronExpression</CODE>;public Cron(String expression) {_        assert expression != null : "cron expression cannot be null"__        this.expression = expression.toUpperCase(Locale.ROOT)__        try {_            buildExpression(this.expression)__        } catch (Exception e) {_            throw illegalArgument("invalid cron expression [{}]", e, expression)__        }_    };constructs,a,new,code,cron,expression,code,based,on,the,specified,parameter,param,expression,string,representation,of,the,cron,expression,the,new,object,should,represent,throws,illegal,argument,exception,if,the,string,expression,cannot,be,parsed,into,a,valid,code,cron,expression,code;public,cron,string,expression,assert,expression,null,cron,expression,cannot,be,null,this,expression,expression,to,upper,case,locale,root,try,build,expression,this,expression,catch,exception,e,throw,illegal,argument,invalid,cron,expression,e,expression
Cron -> public Cron(String expression);1537806831;Constructs a new <CODE>CronExpression</CODE> based on the specified_parameter.__@param expression String representation of the cron expression the_new object should represent_@throws IllegalArgumentException_if the string expression cannot be parsed into a valid_<CODE>CronExpression</CODE>;public Cron(String expression) {_        assert expression != null : "cron expression cannot be null"__        this.expression = expression.toUpperCase(Locale.ROOT)__        try {_            buildExpression(this.expression)__        } catch (Exception e) {_            throw illegalArgument("invalid cron expression [{}]", e, expression)__        }_    };constructs,a,new,code,cron,expression,code,based,on,the,specified,parameter,param,expression,string,representation,of,the,cron,expression,the,new,object,should,represent,throws,illegal,argument,exception,if,the,string,expression,cannot,be,parsed,into,a,valid,code,cron,expression,code;public,cron,string,expression,assert,expression,null,cron,expression,cannot,be,null,this,expression,expression,to,upper,case,locale,root,try,build,expression,this,expression,catch,exception,e,throw,illegal,argument,invalid,cron,expression,e,expression
Cron -> public Cron(String expression);1538067637;Constructs a new <CODE>CronExpression</CODE> based on the specified_parameter.__@param expression String representation of the cron expression the_new object should represent_@throws IllegalArgumentException_if the string expression cannot be parsed into a valid_<CODE>CronExpression</CODE>;public Cron(String expression) {_        assert expression != null : "cron expression cannot be null"__        this.expression = expression.toUpperCase(Locale.ROOT)__        try {_            buildExpression(this.expression)__        } catch (Exception e) {_            throw illegalArgument("invalid cron expression [{}]", e, expression)__        }_    };constructs,a,new,code,cron,expression,code,based,on,the,specified,parameter,param,expression,string,representation,of,the,cron,expression,the,new,object,should,represent,throws,illegal,argument,exception,if,the,string,expression,cannot,be,parsed,into,a,valid,code,cron,expression,code;public,cron,string,expression,assert,expression,null,cron,expression,cannot,be,null,this,expression,expression,to,upper,case,locale,root,try,build,expression,this,expression,catch,exception,e,throw,illegal,argument,invalid,cron,expression,e,expression
Cron -> public Cron(String expression);1548422582;Constructs a new <CODE>CronExpression</CODE> based on the specified_parameter.__@param expression String representation of the cron expression the_new object should represent_@throws IllegalArgumentException_if the string expression cannot be parsed into a valid_<CODE>CronExpression</CODE>;public Cron(String expression) {_        assert expression != null : "cron expression cannot be null"__        this.expression = expression.toUpperCase(Locale.ROOT)__        try {_            buildExpression(this.expression)__        } catch (Exception e) {_            throw illegalArgument("invalid cron expression [{}]", e, expression)__        }_    };constructs,a,new,code,cron,expression,code,based,on,the,specified,parameter,param,expression,string,representation,of,the,cron,expression,the,new,object,should,represent,throws,illegal,argument,exception,if,the,string,expression,cannot,be,parsed,into,a,valid,code,cron,expression,code;public,cron,string,expression,assert,expression,null,cron,expression,cannot,be,null,this,expression,expression,to,upper,case,locale,root,try,build,expression,this,expression,catch,exception,e,throw,illegal,argument,invalid,cron,expression,e,expression
Cron -> public Cron(String expression);1549400972;Constructs a new <CODE>CronExpression</CODE> based on the specified_parameter.__@param expression String representation of the cron expression the_new object should represent_@throws IllegalArgumentException_if the string expression cannot be parsed into a valid_<CODE>CronExpression</CODE>;public Cron(String expression) {_        assert expression != null : "cron expression cannot be null"__        this.expression = expression.toUpperCase(Locale.ROOT)__        try {_            buildExpression(this.expression)__        } catch (Exception e) {_            throw illegalArgument("invalid cron expression [{}]", e, expression)__        }_    };constructs,a,new,code,cron,expression,code,based,on,the,specified,parameter,param,expression,string,representation,of,the,cron,expression,the,new,object,should,represent,throws,illegal,argument,exception,if,the,string,expression,cannot,be,parsed,into,a,valid,code,cron,expression,code;public,cron,string,expression,assert,expression,null,cron,expression,cannot,be,null,this,expression,expression,to,upper,case,locale,root,try,build,expression,this,expression,catch,exception,e,throw,illegal,argument,invalid,cron,expression,e,expression
Cron -> @Override     public String toString();1524684173;Returns the string representation of the <CODE>CronExpression</CODE>__@return a string representation of the <CODE>CronExpression</CODE>;@Override_    public String toString() {_        return expression__    };returns,the,string,representation,of,the,code,cron,expression,code,return,a,string,representation,of,the,code,cron,expression,code;override,public,string,to,string,return,expression
Cron -> @Override     public String toString();1525248068;Returns the string representation of the <CODE>CronExpression</CODE>__@return a string representation of the <CODE>CronExpression</CODE>;@Override_    public String toString() {_        return expression__    };returns,the,string,representation,of,the,code,cron,expression,code,return,a,string,representation,of,the,code,cron,expression,code;override,public,string,to,string,return,expression
Cron -> @Override     public String toString();1537806831;Returns the string representation of the <CODE>CronExpression</CODE>__@return a string representation of the <CODE>CronExpression</CODE>;@Override_    public String toString() {_        return expression__    };returns,the,string,representation,of,the,code,cron,expression,code,return,a,string,representation,of,the,code,cron,expression,code;override,public,string,to,string,return,expression
Cron -> @Override     public String toString();1538067637;Returns the string representation of the <CODE>CronExpression</CODE>__@return a string representation of the <CODE>CronExpression</CODE>;@Override_    public String toString() {_        return expression__    };returns,the,string,representation,of,the,code,cron,expression,code,return,a,string,representation,of,the,code,cron,expression,code;override,public,string,to,string,return,expression
Cron -> @Override     public String toString();1548422582;Returns the string representation of the <CODE>CronExpression</CODE>__@return a string representation of the <CODE>CronExpression</CODE>;@Override_    public String toString() {_        return expression__    };returns,the,string,representation,of,the,code,cron,expression,code,return,a,string,representation,of,the,code,cron,expression,code;override,public,string,to,string,return,expression
Cron -> @Override     public String toString();1549400972;Returns the string representation of the <CODE>CronExpression</CODE>__@return a string representation of the <CODE>CronExpression</CODE>;@Override_    public String toString() {_        return expression__    };returns,the,string,representation,of,the,code,cron,expression,code,return,a,string,representation,of,the,code,cron,expression,code;override,public,string,to,string,return,expression
Cron -> public long getNextValidTimeAfter(final long time);1524684173;Returns the next date/time <I>after</I> the given date/time which_satisfies the cron expression.__@param time the time since the epoch, or -1 if next time is unsupported (e.g. the cron expression points to_a time that is previous to the given time)_@return the next valid time (since the epoch);public long getNextValidTimeAfter(final long time) {__        _        Calendar cl = new java.util.GregorianCalendar(UTC, Locale.ROOT)___        _        _        final long afterTime = time + 1000__        _        cl.setTimeInMillis(afterTime)__        cl.set(Calendar.MILLISECOND, 0)___        boolean gotOne = false__        _        while (!gotOne) {__            if(cl.get(Calendar.YEAR) > 2999) { _                return -1__            }__            SortedSet<Integer> st = null__            int t = 0___            int sec = cl.get(Calendar.SECOND)__            int min = cl.get(Calendar.MINUTE)___            _            st = seconds.tailSet(sec)__            if (st != null && st.size() != 0) {_                sec = st.first()__            } else {_                sec = seconds.first()__                min++__                cl.set(Calendar.MINUTE, min)__            }_            cl.set(Calendar.SECOND, sec)___            min = cl.get(Calendar.MINUTE)__            int hr = cl.get(Calendar.HOUR_OF_DAY)__            t = -1___            _            st = minutes.tailSet(min)__            if (st != null && st.size() != 0) {_                t = min__                min = st.first()__            } else {_                min = minutes.first()__                hr++__            }_            if (min != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, min)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.MINUTE, min)___            hr = cl.get(Calendar.HOUR_OF_DAY)__            int day = cl.get(Calendar.DAY_OF_MONTH)__            t = -1___            _            st = hours.tailSet(hr)__            if (st != null && st.size() != 0) {_                t = hr__                hr = st.first()__            } else {_                hr = hours.first()__                day++__            }_            if (hr != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.DAY_OF_MONTH, day)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.HOUR_OF_DAY, hr)___            day = cl.get(Calendar.DAY_OF_MONTH)__            int mon = cl.get(Calendar.MONTH) + 1__            _            _            t = -1__            int tmon = mon___            _            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC)__            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC)__            if (dayOfMSpec && !dayOfWSpec) { _                st = daysOfMonth.tailSet(day)__                if (lastdayOfMonth) {_                    if(!nearestWeekday) {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset__                        if(t > day) {_                            mon++__                            if(mon > 12) {_                                mon = 1__                                tmon = 3333_ _                                cl.add(Calendar.YEAR, 1)__                            }_                            day = 1__                        }_                    } else {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset___                        Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                        tcal.set(Calendar.SECOND, 0)__                        tcal.set(Calendar.MINUTE, 0)__                        tcal.set(Calendar.HOUR_OF_DAY, 0)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        int dow = tcal.get(Calendar.DAY_OF_WEEK)___                        if(dow == Calendar.SATURDAY && day == 1) {_                            day += 2__                        } else if(dow == Calendar.SATURDAY) {_                            day -= 1__                        } else if(dow == Calendar.SUNDAY && day == ldom) {_                            day -= 2__                        } else if(dow == Calendar.SUNDAY) {_                            day += 1__                        }__                        tcal.set(Calendar.SECOND, sec)__                        tcal.set(Calendar.MINUTE, min)__                        tcal.set(Calendar.HOUR_OF_DAY, hr)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        long nTime = tcal.getTimeInMillis()__                        if(nTime < afterTime) {_                            day = 1__                            mon++__                        }_                    }_                } else if(nearestWeekday) {_                    t = day__                    day = daysOfMonth.first()___                    Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                    tcal.set(Calendar.SECOND, 0)__                    tcal.set(Calendar.MINUTE, 0)__                    tcal.set(Calendar.HOUR_OF_DAY, 0)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    int dow = tcal.get(Calendar.DAY_OF_WEEK)___                    if(dow == Calendar.SATURDAY && day == 1) {_                        day += 2__                    } else if(dow == Calendar.SATURDAY) {_                        day -= 1__                    } else if(dow == Calendar.SUNDAY && day == ldom) {_                        day -= 2__                    } else if(dow == Calendar.SUNDAY) {_                        day += 1__                    }___                    tcal.set(Calendar.SECOND, sec)__                    tcal.set(Calendar.MINUTE, min)__                    tcal.set(Calendar.HOUR_OF_DAY, hr)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    long nTime = tcal.getTimeInMillis()__                    if(nTime < afterTime) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else if (st != null && st.size() != 0) {_                    t = day__                    day = st.first()__                    _                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    if (day > lastDay) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else {_                    day = daysOfMonth.first()__                    mon++__                }__                if (day != t || mon != tmon) {_                    cl.set(Calendar.SECOND, 0)__                    cl.set(Calendar.MINUTE, 0)__                    cl.set(Calendar.HOUR_OF_DAY, 0)__                    cl.set(Calendar.DAY_OF_MONTH, day)__                    cl.set(Calendar.MONTH, mon - 1)__                    _                    _                    continue__                }_            } else if (dayOfWSpec && !dayOfMSpec) { _                if (lastdayOfWeek) { _                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    }__                    _                    while ((day + daysToAdd + 7) <= lDay) {_                        daysToAdd += 7__                    }__                    day += daysToAdd___                    if (daysToAdd > 0) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }__                } else if (nthdayOfWeek != 0) {_                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    } else if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    boolean dayShifted = false__                    if (daysToAdd > 0) {_                        dayShifted = true__                    }__                    day += daysToAdd__                    int weekOfMonth = day / 7__                    if (day % 7 > 0) {_                        weekOfMonth++__                    }__                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7__                    day += daysToAdd__                    if (daysToAdd < 0_                            || day > getLastDayOfMonth(mon, cl_                            .get(Calendar.YEAR))) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0 || dayShifted) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }_                } else {_                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int dow = daysOfWeek.first()_ _                    _                    st = daysOfWeek.tailSet(cDow)__                    if (st != null && st.size() > 0) {_                        dow = st.first()__                    }__                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0) { _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        _                        continue__                    }_                }_            } else { _                return -1____            }_            cl.set(Calendar.DAY_OF_MONTH, day)___            mon = cl.get(Calendar.MONTH) + 1__            _            _            int year = cl.get(Calendar.YEAR)__            t = -1___            _            _            if (year > MAX_YEAR) {_                return -1___            }__            _            st = months.tailSet(mon)__            if (st != null && st.size() != 0) {_                t = mon__                mon = st.first()__            } else {_                mon = months.first()__                year++__            }_            if (mon != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, mon - 1)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.MONTH, mon - 1)__            _            __            year = cl.get(Calendar.YEAR)__            t = -1___            _            st = years.tailSet(year)__            if (st != null && st.size() != 0) {_                t = year__                year = st.first()__            } else {_                return -1___            }__            if (year != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, 0)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.YEAR, year)___            gotOne = true__        } __        return cl.getTimeInMillis()__    };returns,the,next,date,time,i,after,i,the,given,date,time,which,satisfies,the,cron,expression,param,time,the,time,since,the,epoch,or,1,if,next,time,is,unsupported,e,g,the,cron,expression,points,to,a,time,that,is,previous,to,the,given,time,return,the,next,valid,time,since,the,epoch;public,long,get,next,valid,time,after,final,long,time,calendar,cl,new,java,util,gregorian,calendar,utc,locale,root,final,long,after,time,time,1000,cl,set,time,in,millis,after,time,cl,set,calendar,millisecond,0,boolean,got,one,false,while,got,one,if,cl,get,calendar,year,2999,return,1,sorted,set,integer,st,null,int,t,0,int,sec,cl,get,calendar,second,int,min,cl,get,calendar,minute,st,seconds,tail,set,sec,if,st,null,st,size,0,sec,st,first,else,sec,seconds,first,min,cl,set,calendar,minute,min,cl,set,calendar,second,sec,min,cl,get,calendar,minute,int,hr,cl,get,calendar,t,1,st,minutes,tail,set,min,if,st,null,st,size,0,t,min,min,st,first,else,min,minutes,first,hr,if,min,t,cl,set,calendar,second,0,cl,set,calendar,minute,min,set,calendar,hour,cl,hr,continue,cl,set,calendar,minute,min,hr,cl,get,calendar,int,day,cl,get,calendar,t,1,st,hours,tail,set,hr,if,st,null,st,size,0,t,hr,hr,st,first,else,hr,hours,first,day,if,hr,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,day,set,calendar,hour,cl,hr,continue,cl,set,calendar,hr,day,cl,get,calendar,int,mon,cl,get,calendar,month,1,t,1,int,tmon,mon,boolean,day,of,mspec,days,of,month,contains,boolean,day,of,wspec,days,of,week,contains,if,day,of,mspec,day,of,wspec,st,days,of,month,tail,set,day,if,lastday,of,month,if,nearest,weekday,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,if,t,day,mon,if,mon,12,mon,1,tmon,3333,cl,add,calendar,year,1,day,1,else,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,1,mon,else,if,nearest,weekday,t,day,day,days,of,month,first,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,days,of,month,first,mon,else,if,st,null,st,size,0,t,day,day,st,first,int,last,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,last,day,day,days,of,month,first,mon,else,day,days,of,month,first,mon,if,day,t,mon,tmon,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,day,of,wspec,day,of,mspec,if,lastday,of,week,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,while,day,days,to,add,7,l,day,days,to,add,7,day,days,to,add,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,nthday,of,week,0,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,else,if,c,dow,dow,days,to,add,dow,7,c,dow,boolean,day,shifted,false,if,days,to,add,0,day,shifted,true,day,days,to,add,int,week,of,month,day,7,if,day,7,0,week,of,month,days,to,add,nthday,of,week,week,of,month,7,day,days,to,add,if,days,to,add,0,day,get,last,day,of,month,mon,cl,get,calendar,year,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,day,shifted,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,int,c,dow,cl,get,calendar,int,dow,days,of,week,first,st,days,of,week,tail,set,c,dow,if,st,null,st,size,0,dow,st,first,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,days,to,add,cl,set,calendar,month,mon,1,continue,else,return,1,cl,set,calendar,day,mon,cl,get,calendar,month,1,int,year,cl,get,calendar,year,t,1,if,year,return,1,st,months,tail,set,mon,if,st,null,st,size,0,t,mon,mon,st,first,else,mon,months,first,year,if,mon,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,1,cl,set,calendar,year,year,continue,cl,set,calendar,month,mon,1,year,cl,get,calendar,year,t,1,st,years,tail,set,year,if,st,null,st,size,0,t,year,year,st,first,else,return,1,if,year,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,0,cl,set,calendar,year,year,continue,cl,set,calendar,year,year,got,one,true,return,cl,get,time,in,millis
Cron -> public long getNextValidTimeAfter(final long time);1525248068;Returns the next date/time <I>after</I> the given date/time which_satisfies the cron expression.__@param time the time since the epoch, or -1 if next time is unsupported (e.g. the cron expression points to_a time that is previous to the given time)_@return the next valid time (since the epoch);public long getNextValidTimeAfter(final long time) {__        _        Calendar cl = new java.util.GregorianCalendar(UTC, Locale.ROOT)___        _        _        final long afterTime = time + 1000__        _        cl.setTimeInMillis(afterTime)__        cl.set(Calendar.MILLISECOND, 0)___        boolean gotOne = false__        _        while (!gotOne) {__            if(cl.get(Calendar.YEAR) > 2999) { _                return -1__            }__            SortedSet<Integer> st = null__            int t = 0___            int sec = cl.get(Calendar.SECOND)__            int min = cl.get(Calendar.MINUTE)___            _            st = seconds.tailSet(sec)__            if (st != null && st.size() != 0) {_                sec = st.first()__            } else {_                sec = seconds.first()__                min++__                cl.set(Calendar.MINUTE, min)__            }_            cl.set(Calendar.SECOND, sec)___            min = cl.get(Calendar.MINUTE)__            int hr = cl.get(Calendar.HOUR_OF_DAY)__            t = -1___            _            st = minutes.tailSet(min)__            if (st != null && st.size() != 0) {_                t = min__                min = st.first()__            } else {_                min = minutes.first()__                hr++__            }_            if (min != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, min)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.MINUTE, min)___            hr = cl.get(Calendar.HOUR_OF_DAY)__            int day = cl.get(Calendar.DAY_OF_MONTH)__            t = -1___            _            st = hours.tailSet(hr)__            if (st != null && st.size() != 0) {_                t = hr__                hr = st.first()__            } else {_                hr = hours.first()__                day++__            }_            if (hr != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.DAY_OF_MONTH, day)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.HOUR_OF_DAY, hr)___            day = cl.get(Calendar.DAY_OF_MONTH)__            int mon = cl.get(Calendar.MONTH) + 1__            _            _            t = -1__            int tmon = mon___            _            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC)__            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC)__            if (dayOfMSpec && !dayOfWSpec) { _                st = daysOfMonth.tailSet(day)__                if (lastdayOfMonth) {_                    if(!nearestWeekday) {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset__                        if(t > day) {_                            mon++__                            if(mon > 12) {_                                mon = 1__                                tmon = 3333_ _                                cl.add(Calendar.YEAR, 1)__                            }_                            day = 1__                        }_                    } else {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset___                        Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                        tcal.set(Calendar.SECOND, 0)__                        tcal.set(Calendar.MINUTE, 0)__                        tcal.set(Calendar.HOUR_OF_DAY, 0)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        int dow = tcal.get(Calendar.DAY_OF_WEEK)___                        if(dow == Calendar.SATURDAY && day == 1) {_                            day += 2__                        } else if(dow == Calendar.SATURDAY) {_                            day -= 1__                        } else if(dow == Calendar.SUNDAY && day == ldom) {_                            day -= 2__                        } else if(dow == Calendar.SUNDAY) {_                            day += 1__                        }__                        tcal.set(Calendar.SECOND, sec)__                        tcal.set(Calendar.MINUTE, min)__                        tcal.set(Calendar.HOUR_OF_DAY, hr)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        long nTime = tcal.getTimeInMillis()__                        if(nTime < afterTime) {_                            day = 1__                            mon++__                        }_                    }_                } else if(nearestWeekday) {_                    t = day__                    day = daysOfMonth.first()___                    Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                    tcal.set(Calendar.SECOND, 0)__                    tcal.set(Calendar.MINUTE, 0)__                    tcal.set(Calendar.HOUR_OF_DAY, 0)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    int dow = tcal.get(Calendar.DAY_OF_WEEK)___                    if(dow == Calendar.SATURDAY && day == 1) {_                        day += 2__                    } else if(dow == Calendar.SATURDAY) {_                        day -= 1__                    } else if(dow == Calendar.SUNDAY && day == ldom) {_                        day -= 2__                    } else if(dow == Calendar.SUNDAY) {_                        day += 1__                    }___                    tcal.set(Calendar.SECOND, sec)__                    tcal.set(Calendar.MINUTE, min)__                    tcal.set(Calendar.HOUR_OF_DAY, hr)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    long nTime = tcal.getTimeInMillis()__                    if(nTime < afterTime) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else if (st != null && st.size() != 0) {_                    t = day__                    day = st.first()__                    _                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    if (day > lastDay) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else {_                    day = daysOfMonth.first()__                    mon++__                }__                if (day != t || mon != tmon) {_                    cl.set(Calendar.SECOND, 0)__                    cl.set(Calendar.MINUTE, 0)__                    cl.set(Calendar.HOUR_OF_DAY, 0)__                    cl.set(Calendar.DAY_OF_MONTH, day)__                    cl.set(Calendar.MONTH, mon - 1)__                    _                    _                    continue__                }_            } else if (dayOfWSpec && !dayOfMSpec) { _                if (lastdayOfWeek) { _                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    }__                    _                    while ((day + daysToAdd + 7) <= lDay) {_                        daysToAdd += 7__                    }__                    day += daysToAdd___                    if (daysToAdd > 0) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }__                } else if (nthdayOfWeek != 0) {_                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    } else if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    boolean dayShifted = false__                    if (daysToAdd > 0) {_                        dayShifted = true__                    }__                    day += daysToAdd__                    int weekOfMonth = day / 7__                    if (day % 7 > 0) {_                        weekOfMonth++__                    }__                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7__                    day += daysToAdd__                    if (daysToAdd < 0_                            || day > getLastDayOfMonth(mon, cl_                            .get(Calendar.YEAR))) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0 || dayShifted) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }_                } else {_                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int dow = daysOfWeek.first()_ _                    _                    st = daysOfWeek.tailSet(cDow)__                    if (st != null && st.size() > 0) {_                        dow = st.first()__                    }__                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0) { _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        _                        continue__                    }_                }_            } else { _                return -1____            }_            cl.set(Calendar.DAY_OF_MONTH, day)___            mon = cl.get(Calendar.MONTH) + 1__            _            _            int year = cl.get(Calendar.YEAR)__            t = -1___            _            _            if (year > MAX_YEAR) {_                return -1___            }__            _            st = months.tailSet(mon)__            if (st != null && st.size() != 0) {_                t = mon__                mon = st.first()__            } else {_                mon = months.first()__                year++__            }_            if (mon != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, mon - 1)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.MONTH, mon - 1)__            _            __            year = cl.get(Calendar.YEAR)__            t = -1___            _            st = years.tailSet(year)__            if (st != null && st.size() != 0) {_                t = year__                year = st.first()__            } else {_                return -1___            }__            if (year != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, 0)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.YEAR, year)___            gotOne = true__        } __        return cl.getTimeInMillis()__    };returns,the,next,date,time,i,after,i,the,given,date,time,which,satisfies,the,cron,expression,param,time,the,time,since,the,epoch,or,1,if,next,time,is,unsupported,e,g,the,cron,expression,points,to,a,time,that,is,previous,to,the,given,time,return,the,next,valid,time,since,the,epoch;public,long,get,next,valid,time,after,final,long,time,calendar,cl,new,java,util,gregorian,calendar,utc,locale,root,final,long,after,time,time,1000,cl,set,time,in,millis,after,time,cl,set,calendar,millisecond,0,boolean,got,one,false,while,got,one,if,cl,get,calendar,year,2999,return,1,sorted,set,integer,st,null,int,t,0,int,sec,cl,get,calendar,second,int,min,cl,get,calendar,minute,st,seconds,tail,set,sec,if,st,null,st,size,0,sec,st,first,else,sec,seconds,first,min,cl,set,calendar,minute,min,cl,set,calendar,second,sec,min,cl,get,calendar,minute,int,hr,cl,get,calendar,t,1,st,minutes,tail,set,min,if,st,null,st,size,0,t,min,min,st,first,else,min,minutes,first,hr,if,min,t,cl,set,calendar,second,0,cl,set,calendar,minute,min,set,calendar,hour,cl,hr,continue,cl,set,calendar,minute,min,hr,cl,get,calendar,int,day,cl,get,calendar,t,1,st,hours,tail,set,hr,if,st,null,st,size,0,t,hr,hr,st,first,else,hr,hours,first,day,if,hr,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,day,set,calendar,hour,cl,hr,continue,cl,set,calendar,hr,day,cl,get,calendar,int,mon,cl,get,calendar,month,1,t,1,int,tmon,mon,boolean,day,of,mspec,days,of,month,contains,boolean,day,of,wspec,days,of,week,contains,if,day,of,mspec,day,of,wspec,st,days,of,month,tail,set,day,if,lastday,of,month,if,nearest,weekday,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,if,t,day,mon,if,mon,12,mon,1,tmon,3333,cl,add,calendar,year,1,day,1,else,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,1,mon,else,if,nearest,weekday,t,day,day,days,of,month,first,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,days,of,month,first,mon,else,if,st,null,st,size,0,t,day,day,st,first,int,last,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,last,day,day,days,of,month,first,mon,else,day,days,of,month,first,mon,if,day,t,mon,tmon,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,day,of,wspec,day,of,mspec,if,lastday,of,week,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,while,day,days,to,add,7,l,day,days,to,add,7,day,days,to,add,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,nthday,of,week,0,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,else,if,c,dow,dow,days,to,add,dow,7,c,dow,boolean,day,shifted,false,if,days,to,add,0,day,shifted,true,day,days,to,add,int,week,of,month,day,7,if,day,7,0,week,of,month,days,to,add,nthday,of,week,week,of,month,7,day,days,to,add,if,days,to,add,0,day,get,last,day,of,month,mon,cl,get,calendar,year,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,day,shifted,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,int,c,dow,cl,get,calendar,int,dow,days,of,week,first,st,days,of,week,tail,set,c,dow,if,st,null,st,size,0,dow,st,first,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,days,to,add,cl,set,calendar,month,mon,1,continue,else,return,1,cl,set,calendar,day,mon,cl,get,calendar,month,1,int,year,cl,get,calendar,year,t,1,if,year,return,1,st,months,tail,set,mon,if,st,null,st,size,0,t,mon,mon,st,first,else,mon,months,first,year,if,mon,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,1,cl,set,calendar,year,year,continue,cl,set,calendar,month,mon,1,year,cl,get,calendar,year,t,1,st,years,tail,set,year,if,st,null,st,size,0,t,year,year,st,first,else,return,1,if,year,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,0,cl,set,calendar,year,year,continue,cl,set,calendar,year,year,got,one,true,return,cl,get,time,in,millis
Cron -> public long getNextValidTimeAfter(final long time);1537806831;Returns the next date/time <I>after</I> the given date/time which_satisfies the cron expression.__@param time the time since the epoch, or -1 if next time is unsupported (e.g. the cron expression points to_a time that is previous to the given time)_@return the next valid time (since the epoch);public long getNextValidTimeAfter(final long time) {__        _        Calendar cl = new java.util.GregorianCalendar(UTC, Locale.ROOT)___        _        _        final long afterTime = time + 1000__        _        cl.setTimeInMillis(afterTime)__        cl.set(Calendar.MILLISECOND, 0)___        boolean gotOne = false__        _        while (!gotOne) {__            if(cl.get(Calendar.YEAR) > 2999) { _                return -1__            }__            SortedSet<Integer> st = null__            int t = 0___            int sec = cl.get(Calendar.SECOND)__            int min = cl.get(Calendar.MINUTE)___            _            st = seconds.tailSet(sec)__            if (st != null && st.size() != 0) {_                sec = st.first()__            } else {_                sec = seconds.first()__                min++__                cl.set(Calendar.MINUTE, min)__            }_            cl.set(Calendar.SECOND, sec)___            min = cl.get(Calendar.MINUTE)__            int hr = cl.get(Calendar.HOUR_OF_DAY)__            t = -1___            _            st = minutes.tailSet(min)__            if (st != null && st.size() != 0) {_                t = min__                min = st.first()__            } else {_                min = minutes.first()__                hr++__            }_            if (min != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, min)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.MINUTE, min)___            hr = cl.get(Calendar.HOUR_OF_DAY)__            int day = cl.get(Calendar.DAY_OF_MONTH)__            t = -1___            _            st = hours.tailSet(hr)__            if (st != null && st.size() != 0) {_                t = hr__                hr = st.first()__            } else {_                hr = hours.first()__                day++__            }_            if (hr != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.DAY_OF_MONTH, day)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.HOUR_OF_DAY, hr)___            day = cl.get(Calendar.DAY_OF_MONTH)__            int mon = cl.get(Calendar.MONTH) + 1__            _            _            t = -1__            int tmon = mon___            _            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC)__            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC)__            if (dayOfMSpec && !dayOfWSpec) { _                st = daysOfMonth.tailSet(day)__                if (lastdayOfMonth) {_                    if(!nearestWeekday) {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset__                        if(t > day) {_                            mon++__                            if(mon > 12) {_                                mon = 1__                                tmon = 3333_ _                                cl.add(Calendar.YEAR, 1)__                            }_                            day = 1__                        }_                    } else {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset___                        Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                        tcal.set(Calendar.SECOND, 0)__                        tcal.set(Calendar.MINUTE, 0)__                        tcal.set(Calendar.HOUR_OF_DAY, 0)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        int dow = tcal.get(Calendar.DAY_OF_WEEK)___                        if(dow == Calendar.SATURDAY && day == 1) {_                            day += 2__                        } else if(dow == Calendar.SATURDAY) {_                            day -= 1__                        } else if(dow == Calendar.SUNDAY && day == ldom) {_                            day -= 2__                        } else if(dow == Calendar.SUNDAY) {_                            day += 1__                        }__                        tcal.set(Calendar.SECOND, sec)__                        tcal.set(Calendar.MINUTE, min)__                        tcal.set(Calendar.HOUR_OF_DAY, hr)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        long nTime = tcal.getTimeInMillis()__                        if(nTime < afterTime) {_                            day = 1__                            mon++__                        }_                    }_                } else if(nearestWeekday) {_                    t = day__                    day = daysOfMonth.first()___                    Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                    tcal.set(Calendar.SECOND, 0)__                    tcal.set(Calendar.MINUTE, 0)__                    tcal.set(Calendar.HOUR_OF_DAY, 0)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    int dow = tcal.get(Calendar.DAY_OF_WEEK)___                    if(dow == Calendar.SATURDAY && day == 1) {_                        day += 2__                    } else if(dow == Calendar.SATURDAY) {_                        day -= 1__                    } else if(dow == Calendar.SUNDAY && day == ldom) {_                        day -= 2__                    } else if(dow == Calendar.SUNDAY) {_                        day += 1__                    }___                    tcal.set(Calendar.SECOND, sec)__                    tcal.set(Calendar.MINUTE, min)__                    tcal.set(Calendar.HOUR_OF_DAY, hr)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    long nTime = tcal.getTimeInMillis()__                    if(nTime < afterTime) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else if (st != null && st.size() != 0) {_                    t = day__                    day = st.first()__                    _                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    if (day > lastDay) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else {_                    day = daysOfMonth.first()__                    mon++__                }__                if (day != t || mon != tmon) {_                    cl.set(Calendar.SECOND, 0)__                    cl.set(Calendar.MINUTE, 0)__                    cl.set(Calendar.HOUR_OF_DAY, 0)__                    cl.set(Calendar.DAY_OF_MONTH, day)__                    cl.set(Calendar.MONTH, mon - 1)__                    _                    _                    continue__                }_            } else if (dayOfWSpec && !dayOfMSpec) { _                if (lastdayOfWeek) { _                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    }__                    _                    while ((day + daysToAdd + 7) <= lDay) {_                        daysToAdd += 7__                    }__                    day += daysToAdd___                    if (daysToAdd > 0) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }__                } else if (nthdayOfWeek != 0) {_                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    } else if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    boolean dayShifted = false__                    if (daysToAdd > 0) {_                        dayShifted = true__                    }__                    day += daysToAdd__                    int weekOfMonth = day / 7__                    if (day % 7 > 0) {_                        weekOfMonth++__                    }__                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7__                    day += daysToAdd__                    if (daysToAdd < 0_                            || day > getLastDayOfMonth(mon, cl_                            .get(Calendar.YEAR))) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0 || dayShifted) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }_                } else {_                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int dow = daysOfWeek.first()_ _                    _                    st = daysOfWeek.tailSet(cDow)__                    if (st != null && st.size() > 0) {_                        dow = st.first()__                    }__                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0) { _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        _                        continue__                    }_                }_            } else { _                return -1____            }_            cl.set(Calendar.DAY_OF_MONTH, day)___            mon = cl.get(Calendar.MONTH) + 1__            _            _            int year = cl.get(Calendar.YEAR)__            t = -1___            _            _            if (year > MAX_YEAR) {_                return -1___            }__            _            st = months.tailSet(mon)__            if (st != null && st.size() != 0) {_                t = mon__                mon = st.first()__            } else {_                mon = months.first()__                year++__            }_            if (mon != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, mon - 1)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.MONTH, mon - 1)__            _            __            year = cl.get(Calendar.YEAR)__            t = -1___            _            st = years.tailSet(year)__            if (st != null && st.size() != 0) {_                t = year__                year = st.first()__            } else {_                return -1___            }__            if (year != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, 0)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.YEAR, year)___            gotOne = true__        } __        return cl.getTimeInMillis()__    };returns,the,next,date,time,i,after,i,the,given,date,time,which,satisfies,the,cron,expression,param,time,the,time,since,the,epoch,or,1,if,next,time,is,unsupported,e,g,the,cron,expression,points,to,a,time,that,is,previous,to,the,given,time,return,the,next,valid,time,since,the,epoch;public,long,get,next,valid,time,after,final,long,time,calendar,cl,new,java,util,gregorian,calendar,utc,locale,root,final,long,after,time,time,1000,cl,set,time,in,millis,after,time,cl,set,calendar,millisecond,0,boolean,got,one,false,while,got,one,if,cl,get,calendar,year,2999,return,1,sorted,set,integer,st,null,int,t,0,int,sec,cl,get,calendar,second,int,min,cl,get,calendar,minute,st,seconds,tail,set,sec,if,st,null,st,size,0,sec,st,first,else,sec,seconds,first,min,cl,set,calendar,minute,min,cl,set,calendar,second,sec,min,cl,get,calendar,minute,int,hr,cl,get,calendar,t,1,st,minutes,tail,set,min,if,st,null,st,size,0,t,min,min,st,first,else,min,minutes,first,hr,if,min,t,cl,set,calendar,second,0,cl,set,calendar,minute,min,set,calendar,hour,cl,hr,continue,cl,set,calendar,minute,min,hr,cl,get,calendar,int,day,cl,get,calendar,t,1,st,hours,tail,set,hr,if,st,null,st,size,0,t,hr,hr,st,first,else,hr,hours,first,day,if,hr,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,day,set,calendar,hour,cl,hr,continue,cl,set,calendar,hr,day,cl,get,calendar,int,mon,cl,get,calendar,month,1,t,1,int,tmon,mon,boolean,day,of,mspec,days,of,month,contains,boolean,day,of,wspec,days,of,week,contains,if,day,of,mspec,day,of,wspec,st,days,of,month,tail,set,day,if,lastday,of,month,if,nearest,weekday,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,if,t,day,mon,if,mon,12,mon,1,tmon,3333,cl,add,calendar,year,1,day,1,else,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,1,mon,else,if,nearest,weekday,t,day,day,days,of,month,first,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,days,of,month,first,mon,else,if,st,null,st,size,0,t,day,day,st,first,int,last,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,last,day,day,days,of,month,first,mon,else,day,days,of,month,first,mon,if,day,t,mon,tmon,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,day,of,wspec,day,of,mspec,if,lastday,of,week,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,while,day,days,to,add,7,l,day,days,to,add,7,day,days,to,add,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,nthday,of,week,0,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,else,if,c,dow,dow,days,to,add,dow,7,c,dow,boolean,day,shifted,false,if,days,to,add,0,day,shifted,true,day,days,to,add,int,week,of,month,day,7,if,day,7,0,week,of,month,days,to,add,nthday,of,week,week,of,month,7,day,days,to,add,if,days,to,add,0,day,get,last,day,of,month,mon,cl,get,calendar,year,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,day,shifted,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,int,c,dow,cl,get,calendar,int,dow,days,of,week,first,st,days,of,week,tail,set,c,dow,if,st,null,st,size,0,dow,st,first,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,days,to,add,cl,set,calendar,month,mon,1,continue,else,return,1,cl,set,calendar,day,mon,cl,get,calendar,month,1,int,year,cl,get,calendar,year,t,1,if,year,return,1,st,months,tail,set,mon,if,st,null,st,size,0,t,mon,mon,st,first,else,mon,months,first,year,if,mon,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,1,cl,set,calendar,year,year,continue,cl,set,calendar,month,mon,1,year,cl,get,calendar,year,t,1,st,years,tail,set,year,if,st,null,st,size,0,t,year,year,st,first,else,return,1,if,year,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,0,cl,set,calendar,year,year,continue,cl,set,calendar,year,year,got,one,true,return,cl,get,time,in,millis
Cron -> public long getNextValidTimeAfter(final long time);1538067637;Returns the next date/time <I>after</I> the given date/time which_satisfies the cron expression.__@param time the time since the epoch, or -1 if next time is unsupported (e.g. the cron expression points to_a time that is previous to the given time)_@return the next valid time (since the epoch);public long getNextValidTimeAfter(final long time) {__        _        Calendar cl = new java.util.GregorianCalendar(UTC, Locale.ROOT)___        _        _        final long afterTime = time + 1000__        _        cl.setTimeInMillis(afterTime)__        cl.set(Calendar.MILLISECOND, 0)___        boolean gotOne = false__        _        while (!gotOne) {__            if(cl.get(Calendar.YEAR) > 2999) { _                return -1__            }__            SortedSet<Integer> st = null__            int t = 0___            int sec = cl.get(Calendar.SECOND)__            int min = cl.get(Calendar.MINUTE)___            _            st = seconds.tailSet(sec)__            if (st != null && st.size() != 0) {_                sec = st.first()__            } else {_                sec = seconds.first()__                min++__                cl.set(Calendar.MINUTE, min)__            }_            cl.set(Calendar.SECOND, sec)___            min = cl.get(Calendar.MINUTE)__            int hr = cl.get(Calendar.HOUR_OF_DAY)__            t = -1___            _            st = minutes.tailSet(min)__            if (st != null && st.size() != 0) {_                t = min__                min = st.first()__            } else {_                min = minutes.first()__                hr++__            }_            if (min != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, min)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.MINUTE, min)___            hr = cl.get(Calendar.HOUR_OF_DAY)__            int day = cl.get(Calendar.DAY_OF_MONTH)__            t = -1___            _            st = hours.tailSet(hr)__            if (st != null && st.size() != 0) {_                t = hr__                hr = st.first()__            } else {_                hr = hours.first()__                day++__            }_            if (hr != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.DAY_OF_MONTH, day)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.HOUR_OF_DAY, hr)___            day = cl.get(Calendar.DAY_OF_MONTH)__            int mon = cl.get(Calendar.MONTH) + 1__            _            _            t = -1__            int tmon = mon___            _            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC)__            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC)__            if (dayOfMSpec && !dayOfWSpec) { _                st = daysOfMonth.tailSet(day)__                if (lastdayOfMonth) {_                    if(!nearestWeekday) {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset__                        if(t > day) {_                            mon++__                            if(mon > 12) {_                                mon = 1__                                tmon = 3333_ _                                cl.add(Calendar.YEAR, 1)__                            }_                            day = 1__                        }_                    } else {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset___                        Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                        tcal.set(Calendar.SECOND, 0)__                        tcal.set(Calendar.MINUTE, 0)__                        tcal.set(Calendar.HOUR_OF_DAY, 0)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        int dow = tcal.get(Calendar.DAY_OF_WEEK)___                        if(dow == Calendar.SATURDAY && day == 1) {_                            day += 2__                        } else if(dow == Calendar.SATURDAY) {_                            day -= 1__                        } else if(dow == Calendar.SUNDAY && day == ldom) {_                            day -= 2__                        } else if(dow == Calendar.SUNDAY) {_                            day += 1__                        }__                        tcal.set(Calendar.SECOND, sec)__                        tcal.set(Calendar.MINUTE, min)__                        tcal.set(Calendar.HOUR_OF_DAY, hr)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        long nTime = tcal.getTimeInMillis()__                        if(nTime < afterTime) {_                            day = 1__                            mon++__                        }_                    }_                } else if(nearestWeekday) {_                    t = day__                    day = daysOfMonth.first()___                    Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                    tcal.set(Calendar.SECOND, 0)__                    tcal.set(Calendar.MINUTE, 0)__                    tcal.set(Calendar.HOUR_OF_DAY, 0)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    int dow = tcal.get(Calendar.DAY_OF_WEEK)___                    if(dow == Calendar.SATURDAY && day == 1) {_                        day += 2__                    } else if(dow == Calendar.SATURDAY) {_                        day -= 1__                    } else if(dow == Calendar.SUNDAY && day == ldom) {_                        day -= 2__                    } else if(dow == Calendar.SUNDAY) {_                        day += 1__                    }___                    tcal.set(Calendar.SECOND, sec)__                    tcal.set(Calendar.MINUTE, min)__                    tcal.set(Calendar.HOUR_OF_DAY, hr)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    long nTime = tcal.getTimeInMillis()__                    if(nTime < afterTime) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else if (st != null && st.size() != 0) {_                    t = day__                    day = st.first()__                    _                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    if (day > lastDay) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else {_                    day = daysOfMonth.first()__                    mon++__                }__                if (day != t || mon != tmon) {_                    cl.set(Calendar.SECOND, 0)__                    cl.set(Calendar.MINUTE, 0)__                    cl.set(Calendar.HOUR_OF_DAY, 0)__                    cl.set(Calendar.DAY_OF_MONTH, day)__                    cl.set(Calendar.MONTH, mon - 1)__                    _                    _                    continue__                }_            } else if (dayOfWSpec && !dayOfMSpec) { _                if (lastdayOfWeek) { _                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    }__                    _                    while ((day + daysToAdd + 7) <= lDay) {_                        daysToAdd += 7__                    }__                    day += daysToAdd___                    if (daysToAdd > 0) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }__                } else if (nthdayOfWeek != 0) {_                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    } else if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    boolean dayShifted = false__                    if (daysToAdd > 0) {_                        dayShifted = true__                    }__                    day += daysToAdd__                    int weekOfMonth = day / 7__                    if (day % 7 > 0) {_                        weekOfMonth++__                    }__                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7__                    day += daysToAdd__                    if (daysToAdd < 0_                            || day > getLastDayOfMonth(mon, cl_                            .get(Calendar.YEAR))) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0 || dayShifted) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }_                } else {_                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int dow = daysOfWeek.first()_ _                    _                    st = daysOfWeek.tailSet(cDow)__                    if (st != null && st.size() > 0) {_                        dow = st.first()__                    }__                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0) { _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        _                        continue__                    }_                }_            } else { _                return -1____            }_            cl.set(Calendar.DAY_OF_MONTH, day)___            mon = cl.get(Calendar.MONTH) + 1__            _            _            int year = cl.get(Calendar.YEAR)__            t = -1___            _            _            if (year > MAX_YEAR) {_                return -1___            }__            _            st = months.tailSet(mon)__            if (st != null && st.size() != 0) {_                t = mon__                mon = st.first()__            } else {_                mon = months.first()__                year++__            }_            if (mon != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, mon - 1)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.MONTH, mon - 1)__            _            __            year = cl.get(Calendar.YEAR)__            t = -1___            _            st = years.tailSet(year)__            if (st != null && st.size() != 0) {_                t = year__                year = st.first()__            } else {_                return -1___            }__            if (year != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, 0)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.YEAR, year)___            gotOne = true__        } __        return cl.getTimeInMillis()__    };returns,the,next,date,time,i,after,i,the,given,date,time,which,satisfies,the,cron,expression,param,time,the,time,since,the,epoch,or,1,if,next,time,is,unsupported,e,g,the,cron,expression,points,to,a,time,that,is,previous,to,the,given,time,return,the,next,valid,time,since,the,epoch;public,long,get,next,valid,time,after,final,long,time,calendar,cl,new,java,util,gregorian,calendar,utc,locale,root,final,long,after,time,time,1000,cl,set,time,in,millis,after,time,cl,set,calendar,millisecond,0,boolean,got,one,false,while,got,one,if,cl,get,calendar,year,2999,return,1,sorted,set,integer,st,null,int,t,0,int,sec,cl,get,calendar,second,int,min,cl,get,calendar,minute,st,seconds,tail,set,sec,if,st,null,st,size,0,sec,st,first,else,sec,seconds,first,min,cl,set,calendar,minute,min,cl,set,calendar,second,sec,min,cl,get,calendar,minute,int,hr,cl,get,calendar,t,1,st,minutes,tail,set,min,if,st,null,st,size,0,t,min,min,st,first,else,min,minutes,first,hr,if,min,t,cl,set,calendar,second,0,cl,set,calendar,minute,min,set,calendar,hour,cl,hr,continue,cl,set,calendar,minute,min,hr,cl,get,calendar,int,day,cl,get,calendar,t,1,st,hours,tail,set,hr,if,st,null,st,size,0,t,hr,hr,st,first,else,hr,hours,first,day,if,hr,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,day,set,calendar,hour,cl,hr,continue,cl,set,calendar,hr,day,cl,get,calendar,int,mon,cl,get,calendar,month,1,t,1,int,tmon,mon,boolean,day,of,mspec,days,of,month,contains,boolean,day,of,wspec,days,of,week,contains,if,day,of,mspec,day,of,wspec,st,days,of,month,tail,set,day,if,lastday,of,month,if,nearest,weekday,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,if,t,day,mon,if,mon,12,mon,1,tmon,3333,cl,add,calendar,year,1,day,1,else,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,1,mon,else,if,nearest,weekday,t,day,day,days,of,month,first,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,days,of,month,first,mon,else,if,st,null,st,size,0,t,day,day,st,first,int,last,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,last,day,day,days,of,month,first,mon,else,day,days,of,month,first,mon,if,day,t,mon,tmon,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,day,of,wspec,day,of,mspec,if,lastday,of,week,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,while,day,days,to,add,7,l,day,days,to,add,7,day,days,to,add,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,nthday,of,week,0,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,else,if,c,dow,dow,days,to,add,dow,7,c,dow,boolean,day,shifted,false,if,days,to,add,0,day,shifted,true,day,days,to,add,int,week,of,month,day,7,if,day,7,0,week,of,month,days,to,add,nthday,of,week,week,of,month,7,day,days,to,add,if,days,to,add,0,day,get,last,day,of,month,mon,cl,get,calendar,year,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,day,shifted,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,int,c,dow,cl,get,calendar,int,dow,days,of,week,first,st,days,of,week,tail,set,c,dow,if,st,null,st,size,0,dow,st,first,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,days,to,add,cl,set,calendar,month,mon,1,continue,else,return,1,cl,set,calendar,day,mon,cl,get,calendar,month,1,int,year,cl,get,calendar,year,t,1,if,year,return,1,st,months,tail,set,mon,if,st,null,st,size,0,t,mon,mon,st,first,else,mon,months,first,year,if,mon,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,1,cl,set,calendar,year,year,continue,cl,set,calendar,month,mon,1,year,cl,get,calendar,year,t,1,st,years,tail,set,year,if,st,null,st,size,0,t,year,year,st,first,else,return,1,if,year,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,0,cl,set,calendar,year,year,continue,cl,set,calendar,year,year,got,one,true,return,cl,get,time,in,millis
Cron -> public long getNextValidTimeAfter(final long time);1548422582;Returns the next date/time <I>after</I> the given date/time which_satisfies the cron expression.__@param time the time since the epoch, or -1 if next time is unsupported (e.g. the cron expression points to_a time that is previous to the given time)_@return the next valid time (since the epoch);public long getNextValidTimeAfter(final long time) {__        _        Calendar cl = new java.util.GregorianCalendar(UTC, Locale.ROOT)___        _        _        final long afterTime = time + 1000__        _        cl.setTimeInMillis(afterTime)__        cl.set(Calendar.MILLISECOND, 0)___        boolean gotOne = false__        _        while (!gotOne) {__            if(cl.get(Calendar.YEAR) > 2999) { _                return -1__            }__            SortedSet<Integer> st = null__            int t = 0___            int sec = cl.get(Calendar.SECOND)__            int min = cl.get(Calendar.MINUTE)___            _            st = seconds.tailSet(sec)__            if (st != null && st.size() != 0) {_                sec = st.first()__            } else {_                sec = seconds.first()__                min++__                cl.set(Calendar.MINUTE, min)__            }_            cl.set(Calendar.SECOND, sec)___            min = cl.get(Calendar.MINUTE)__            int hr = cl.get(Calendar.HOUR_OF_DAY)__            t = -1___            _            st = minutes.tailSet(min)__            if (st != null && st.size() != 0) {_                t = min__                min = st.first()__            } else {_                min = minutes.first()__                hr++__            }_            if (min != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, min)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.MINUTE, min)___            hr = cl.get(Calendar.HOUR_OF_DAY)__            int day = cl.get(Calendar.DAY_OF_MONTH)__            t = -1___            _            st = hours.tailSet(hr)__            if (st != null && st.size() != 0) {_                t = hr__                hr = st.first()__            } else {_                hr = hours.first()__                day++__            }_            if (hr != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.DAY_OF_MONTH, day)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.HOUR_OF_DAY, hr)___            day = cl.get(Calendar.DAY_OF_MONTH)__            int mon = cl.get(Calendar.MONTH) + 1__            _            _            t = -1__            int tmon = mon___            _            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC)__            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC)__            if (dayOfMSpec && !dayOfWSpec) { _                st = daysOfMonth.tailSet(day)__                if (lastdayOfMonth) {_                    if(!nearestWeekday) {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset__                        if(t > day) {_                            mon++__                            if(mon > 12) {_                                mon = 1__                                tmon = 3333_ _                                cl.add(Calendar.YEAR, 1)__                            }_                            day = 1__                        }_                    } else {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset___                        Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                        tcal.set(Calendar.SECOND, 0)__                        tcal.set(Calendar.MINUTE, 0)__                        tcal.set(Calendar.HOUR_OF_DAY, 0)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        int dow = tcal.get(Calendar.DAY_OF_WEEK)___                        if(dow == Calendar.SATURDAY && day == 1) {_                            day += 2__                        } else if(dow == Calendar.SATURDAY) {_                            day -= 1__                        } else if(dow == Calendar.SUNDAY && day == ldom) {_                            day -= 2__                        } else if(dow == Calendar.SUNDAY) {_                            day += 1__                        }__                        tcal.set(Calendar.SECOND, sec)__                        tcal.set(Calendar.MINUTE, min)__                        tcal.set(Calendar.HOUR_OF_DAY, hr)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        long nTime = tcal.getTimeInMillis()__                        if(nTime < afterTime) {_                            day = 1__                            mon++__                        }_                    }_                } else if(nearestWeekday) {_                    t = day__                    day = daysOfMonth.first()___                    Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                    tcal.set(Calendar.SECOND, 0)__                    tcal.set(Calendar.MINUTE, 0)__                    tcal.set(Calendar.HOUR_OF_DAY, 0)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    int dow = tcal.get(Calendar.DAY_OF_WEEK)___                    if(dow == Calendar.SATURDAY && day == 1) {_                        day += 2__                    } else if(dow == Calendar.SATURDAY) {_                        day -= 1__                    } else if(dow == Calendar.SUNDAY && day == ldom) {_                        day -= 2__                    } else if(dow == Calendar.SUNDAY) {_                        day += 1__                    }___                    tcal.set(Calendar.SECOND, sec)__                    tcal.set(Calendar.MINUTE, min)__                    tcal.set(Calendar.HOUR_OF_DAY, hr)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    long nTime = tcal.getTimeInMillis()__                    if(nTime < afterTime) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else if (st != null && st.size() != 0) {_                    t = day__                    day = st.first()__                    _                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    if (day > lastDay) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else {_                    day = daysOfMonth.first()__                    mon++__                }__                if (day != t || mon != tmon) {_                    cl.set(Calendar.SECOND, 0)__                    cl.set(Calendar.MINUTE, 0)__                    cl.set(Calendar.HOUR_OF_DAY, 0)__                    cl.set(Calendar.DAY_OF_MONTH, day)__                    cl.set(Calendar.MONTH, mon - 1)__                    _                    _                    continue__                }_            } else if (dayOfWSpec && !dayOfMSpec) { _                if (lastdayOfWeek) { _                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    }__                    _                    while ((day + daysToAdd + 7) <= lDay) {_                        daysToAdd += 7__                    }__                    day += daysToAdd___                    if (daysToAdd > 0) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }__                } else if (nthdayOfWeek != 0) {_                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    } else if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    boolean dayShifted = false__                    if (daysToAdd > 0) {_                        dayShifted = true__                    }__                    day += daysToAdd__                    int weekOfMonth = day / 7__                    if (day % 7 > 0) {_                        weekOfMonth++__                    }__                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7__                    day += daysToAdd__                    if (daysToAdd < 0_                            || day > getLastDayOfMonth(mon, cl_                            .get(Calendar.YEAR))) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0 || dayShifted) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }_                } else {_                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int dow = daysOfWeek.first()_ _                    _                    st = daysOfWeek.tailSet(cDow)__                    if (st != null && st.size() > 0) {_                        dow = st.first()__                    }__                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0) { _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        _                        continue__                    }_                }_            } else { _                return -1____            }_            cl.set(Calendar.DAY_OF_MONTH, day)___            mon = cl.get(Calendar.MONTH) + 1__            _            _            int year = cl.get(Calendar.YEAR)__            t = -1___            _            _            if (year > MAX_YEAR) {_                return -1___            }__            _            st = months.tailSet(mon)__            if (st != null && st.size() != 0) {_                t = mon__                mon = st.first()__            } else {_                mon = months.first()__                year++__            }_            if (mon != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, mon - 1)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.MONTH, mon - 1)__            _            __            year = cl.get(Calendar.YEAR)__            t = -1___            _            st = years.tailSet(year)__            if (st != null && st.size() != 0) {_                t = year__                year = st.first()__            } else {_                return -1___            }__            if (year != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, 0)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.YEAR, year)___            gotOne = true__        } __        return cl.getTimeInMillis()__    };returns,the,next,date,time,i,after,i,the,given,date,time,which,satisfies,the,cron,expression,param,time,the,time,since,the,epoch,or,1,if,next,time,is,unsupported,e,g,the,cron,expression,points,to,a,time,that,is,previous,to,the,given,time,return,the,next,valid,time,since,the,epoch;public,long,get,next,valid,time,after,final,long,time,calendar,cl,new,java,util,gregorian,calendar,utc,locale,root,final,long,after,time,time,1000,cl,set,time,in,millis,after,time,cl,set,calendar,millisecond,0,boolean,got,one,false,while,got,one,if,cl,get,calendar,year,2999,return,1,sorted,set,integer,st,null,int,t,0,int,sec,cl,get,calendar,second,int,min,cl,get,calendar,minute,st,seconds,tail,set,sec,if,st,null,st,size,0,sec,st,first,else,sec,seconds,first,min,cl,set,calendar,minute,min,cl,set,calendar,second,sec,min,cl,get,calendar,minute,int,hr,cl,get,calendar,t,1,st,minutes,tail,set,min,if,st,null,st,size,0,t,min,min,st,first,else,min,minutes,first,hr,if,min,t,cl,set,calendar,second,0,cl,set,calendar,minute,min,set,calendar,hour,cl,hr,continue,cl,set,calendar,minute,min,hr,cl,get,calendar,int,day,cl,get,calendar,t,1,st,hours,tail,set,hr,if,st,null,st,size,0,t,hr,hr,st,first,else,hr,hours,first,day,if,hr,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,day,set,calendar,hour,cl,hr,continue,cl,set,calendar,hr,day,cl,get,calendar,int,mon,cl,get,calendar,month,1,t,1,int,tmon,mon,boolean,day,of,mspec,days,of,month,contains,boolean,day,of,wspec,days,of,week,contains,if,day,of,mspec,day,of,wspec,st,days,of,month,tail,set,day,if,lastday,of,month,if,nearest,weekday,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,if,t,day,mon,if,mon,12,mon,1,tmon,3333,cl,add,calendar,year,1,day,1,else,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,1,mon,else,if,nearest,weekday,t,day,day,days,of,month,first,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,days,of,month,first,mon,else,if,st,null,st,size,0,t,day,day,st,first,int,last,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,last,day,day,days,of,month,first,mon,else,day,days,of,month,first,mon,if,day,t,mon,tmon,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,day,of,wspec,day,of,mspec,if,lastday,of,week,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,while,day,days,to,add,7,l,day,days,to,add,7,day,days,to,add,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,nthday,of,week,0,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,else,if,c,dow,dow,days,to,add,dow,7,c,dow,boolean,day,shifted,false,if,days,to,add,0,day,shifted,true,day,days,to,add,int,week,of,month,day,7,if,day,7,0,week,of,month,days,to,add,nthday,of,week,week,of,month,7,day,days,to,add,if,days,to,add,0,day,get,last,day,of,month,mon,cl,get,calendar,year,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,day,shifted,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,int,c,dow,cl,get,calendar,int,dow,days,of,week,first,st,days,of,week,tail,set,c,dow,if,st,null,st,size,0,dow,st,first,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,days,to,add,cl,set,calendar,month,mon,1,continue,else,return,1,cl,set,calendar,day,mon,cl,get,calendar,month,1,int,year,cl,get,calendar,year,t,1,if,year,return,1,st,months,tail,set,mon,if,st,null,st,size,0,t,mon,mon,st,first,else,mon,months,first,year,if,mon,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,1,cl,set,calendar,year,year,continue,cl,set,calendar,month,mon,1,year,cl,get,calendar,year,t,1,st,years,tail,set,year,if,st,null,st,size,0,t,year,year,st,first,else,return,1,if,year,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,0,cl,set,calendar,year,year,continue,cl,set,calendar,year,year,got,one,true,return,cl,get,time,in,millis
Cron -> public long getNextValidTimeAfter(final long time);1549400972;Returns the next date/time <I>after</I> the given date/time which_satisfies the cron expression.__@param time the time since the epoch, or -1 if next time is unsupported (e.g. the cron expression points to_a time that is previous to the given time)_@return the next valid time (since the epoch);public long getNextValidTimeAfter(final long time) {__        _        Calendar cl = new java.util.GregorianCalendar(UTC, Locale.ROOT)___        _        _        final long afterTime = time + 1000__        _        cl.setTimeInMillis(afterTime)__        cl.set(Calendar.MILLISECOND, 0)___        boolean gotOne = false__        _        while (!gotOne) {__            if(cl.get(Calendar.YEAR) > 2999) { _                return -1__            }__            SortedSet<Integer> st = null__            int t = 0___            int sec = cl.get(Calendar.SECOND)__            int min = cl.get(Calendar.MINUTE)___            _            st = seconds.tailSet(sec)__            if (st != null && st.size() != 0) {_                sec = st.first()__            } else {_                sec = seconds.first()__                min++__                cl.set(Calendar.MINUTE, min)__            }_            cl.set(Calendar.SECOND, sec)___            min = cl.get(Calendar.MINUTE)__            int hr = cl.get(Calendar.HOUR_OF_DAY)__            t = -1___            _            st = minutes.tailSet(min)__            if (st != null && st.size() != 0) {_                t = min__                min = st.first()__            } else {_                min = minutes.first()__                hr++__            }_            if (min != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, min)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.MINUTE, min)___            hr = cl.get(Calendar.HOUR_OF_DAY)__            int day = cl.get(Calendar.DAY_OF_MONTH)__            t = -1___            _            st = hours.tailSet(hr)__            if (st != null && st.size() != 0) {_                t = hr__                hr = st.first()__            } else {_                hr = hours.first()__                day++__            }_            if (hr != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.DAY_OF_MONTH, day)__                setCalendarHour(cl, hr)__                continue__            }_            cl.set(Calendar.HOUR_OF_DAY, hr)___            day = cl.get(Calendar.DAY_OF_MONTH)__            int mon = cl.get(Calendar.MONTH) + 1__            _            _            t = -1__            int tmon = mon___            _            boolean dayOfMSpec = !daysOfMonth.contains(NO_SPEC)__            boolean dayOfWSpec = !daysOfWeek.contains(NO_SPEC)__            if (dayOfMSpec && !dayOfWSpec) { _                st = daysOfMonth.tailSet(day)__                if (lastdayOfMonth) {_                    if(!nearestWeekday) {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset__                        if(t > day) {_                            mon++__                            if(mon > 12) {_                                mon = 1__                                tmon = 3333_ _                                cl.add(Calendar.YEAR, 1)__                            }_                            day = 1__                        }_                    } else {_                        t = day__                        day = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        day -= lastdayOffset___                        Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                        tcal.set(Calendar.SECOND, 0)__                        tcal.set(Calendar.MINUTE, 0)__                        tcal.set(Calendar.HOUR_OF_DAY, 0)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                        int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                        int dow = tcal.get(Calendar.DAY_OF_WEEK)___                        if(dow == Calendar.SATURDAY && day == 1) {_                            day += 2__                        } else if(dow == Calendar.SATURDAY) {_                            day -= 1__                        } else if(dow == Calendar.SUNDAY && day == ldom) {_                            day -= 2__                        } else if(dow == Calendar.SUNDAY) {_                            day += 1__                        }__                        tcal.set(Calendar.SECOND, sec)__                        tcal.set(Calendar.MINUTE, min)__                        tcal.set(Calendar.HOUR_OF_DAY, hr)__                        tcal.set(Calendar.DAY_OF_MONTH, day)__                        tcal.set(Calendar.MONTH, mon - 1)__                        long nTime = tcal.getTimeInMillis()__                        if(nTime < afterTime) {_                            day = 1__                            mon++__                        }_                    }_                } else if(nearestWeekday) {_                    t = day__                    day = daysOfMonth.first()___                    Calendar tcal = Calendar.getInstance(UTC, Locale.ROOT)__                    tcal.set(Calendar.SECOND, 0)__                    tcal.set(Calendar.MINUTE, 0)__                    tcal.set(Calendar.HOUR_OF_DAY, 0)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    tcal.set(Calendar.YEAR, cl.get(Calendar.YEAR))___                    int ldom = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    int dow = tcal.get(Calendar.DAY_OF_WEEK)___                    if(dow == Calendar.SATURDAY && day == 1) {_                        day += 2__                    } else if(dow == Calendar.SATURDAY) {_                        day -= 1__                    } else if(dow == Calendar.SUNDAY && day == ldom) {_                        day -= 2__                    } else if(dow == Calendar.SUNDAY) {_                        day += 1__                    }___                    tcal.set(Calendar.SECOND, sec)__                    tcal.set(Calendar.MINUTE, min)__                    tcal.set(Calendar.HOUR_OF_DAY, hr)__                    tcal.set(Calendar.DAY_OF_MONTH, day)__                    tcal.set(Calendar.MONTH, mon - 1)__                    long nTime = tcal.getTimeInMillis()__                    if(nTime < afterTime) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else if (st != null && st.size() != 0) {_                    t = day__                    day = st.first()__                    _                    int lastDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))__                    if (day > lastDay) {_                        day = daysOfMonth.first()__                        mon++__                    }_                } else {_                    day = daysOfMonth.first()__                    mon++__                }__                if (day != t || mon != tmon) {_                    cl.set(Calendar.SECOND, 0)__                    cl.set(Calendar.MINUTE, 0)__                    cl.set(Calendar.HOUR_OF_DAY, 0)__                    cl.set(Calendar.DAY_OF_MONTH, day)__                    cl.set(Calendar.MONTH, mon - 1)__                    _                    _                    continue__                }_            } else if (dayOfWSpec && !dayOfMSpec) { _                if (lastdayOfWeek) { _                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    }__                    _                    while ((day + daysToAdd + 7) <= lDay) {_                        daysToAdd += 7__                    }__                    day += daysToAdd___                    if (daysToAdd > 0) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }__                } else if (nthdayOfWeek != 0) {_                    _                    int dow = daysOfWeek.first()_ _                    _                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    } else if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    boolean dayShifted = false__                    if (daysToAdd > 0) {_                        dayShifted = true__                    }__                    day += daysToAdd__                    int weekOfMonth = day / 7__                    if (day % 7 > 0) {_                        weekOfMonth++__                    }__                    daysToAdd = (nthdayOfWeek - weekOfMonth) * 7__                    day += daysToAdd__                    if (daysToAdd < 0_                            || day > getLastDayOfMonth(mon, cl_                            .get(Calendar.YEAR))) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0 || dayShifted) {_                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        continue__                    }_                } else {_                    int cDow = cl.get(Calendar.DAY_OF_WEEK)_ _                    int dow = daysOfWeek.first()_ _                    _                    st = daysOfWeek.tailSet(cDow)__                    if (st != null && st.size() > 0) {_                        dow = st.first()__                    }__                    int daysToAdd = 0__                    if (cDow < dow) {_                        daysToAdd = dow - cDow__                    }_                    if (cDow > dow) {_                        daysToAdd = dow + (7 - cDow)__                    }__                    int lDay = getLastDayOfMonth(mon, cl.get(Calendar.YEAR))___                    if (day + daysToAdd > lDay) { _                        _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, 1)__                        cl.set(Calendar.MONTH, mon)__                        _                        continue__                    } else if (daysToAdd > 0) { _                        cl.set(Calendar.SECOND, 0)__                        cl.set(Calendar.MINUTE, 0)__                        cl.set(Calendar.HOUR_OF_DAY, 0)__                        cl.set(Calendar.DAY_OF_MONTH, day + daysToAdd)__                        cl.set(Calendar.MONTH, mon - 1)__                        _                        _                        continue__                    }_                }_            } else { _                return -1____            }_            cl.set(Calendar.DAY_OF_MONTH, day)___            mon = cl.get(Calendar.MONTH) + 1__            _            _            int year = cl.get(Calendar.YEAR)__            t = -1___            _            _            if (year > MAX_YEAR) {_                return -1___            }__            _            st = months.tailSet(mon)__            if (st != null && st.size() != 0) {_                t = mon__                mon = st.first()__            } else {_                mon = months.first()__                year++__            }_            if (mon != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, mon - 1)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.MONTH, mon - 1)__            _            __            year = cl.get(Calendar.YEAR)__            t = -1___            _            st = years.tailSet(year)__            if (st != null && st.size() != 0) {_                t = year__                year = st.first()__            } else {_                return -1___            }__            if (year != t) {_                cl.set(Calendar.SECOND, 0)__                cl.set(Calendar.MINUTE, 0)__                cl.set(Calendar.HOUR_OF_DAY, 0)__                cl.set(Calendar.DAY_OF_MONTH, 1)__                cl.set(Calendar.MONTH, 0)__                _                _                cl.set(Calendar.YEAR, year)__                continue__            }_            cl.set(Calendar.YEAR, year)___            gotOne = true__        } __        return cl.getTimeInMillis()__    };returns,the,next,date,time,i,after,i,the,given,date,time,which,satisfies,the,cron,expression,param,time,the,time,since,the,epoch,or,1,if,next,time,is,unsupported,e,g,the,cron,expression,points,to,a,time,that,is,previous,to,the,given,time,return,the,next,valid,time,since,the,epoch;public,long,get,next,valid,time,after,final,long,time,calendar,cl,new,java,util,gregorian,calendar,utc,locale,root,final,long,after,time,time,1000,cl,set,time,in,millis,after,time,cl,set,calendar,millisecond,0,boolean,got,one,false,while,got,one,if,cl,get,calendar,year,2999,return,1,sorted,set,integer,st,null,int,t,0,int,sec,cl,get,calendar,second,int,min,cl,get,calendar,minute,st,seconds,tail,set,sec,if,st,null,st,size,0,sec,st,first,else,sec,seconds,first,min,cl,set,calendar,minute,min,cl,set,calendar,second,sec,min,cl,get,calendar,minute,int,hr,cl,get,calendar,t,1,st,minutes,tail,set,min,if,st,null,st,size,0,t,min,min,st,first,else,min,minutes,first,hr,if,min,t,cl,set,calendar,second,0,cl,set,calendar,minute,min,set,calendar,hour,cl,hr,continue,cl,set,calendar,minute,min,hr,cl,get,calendar,int,day,cl,get,calendar,t,1,st,hours,tail,set,hr,if,st,null,st,size,0,t,hr,hr,st,first,else,hr,hours,first,day,if,hr,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,day,set,calendar,hour,cl,hr,continue,cl,set,calendar,hr,day,cl,get,calendar,int,mon,cl,get,calendar,month,1,t,1,int,tmon,mon,boolean,day,of,mspec,days,of,month,contains,boolean,day,of,wspec,days,of,week,contains,if,day,of,mspec,day,of,wspec,st,days,of,month,tail,set,day,if,lastday,of,month,if,nearest,weekday,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,if,t,day,mon,if,mon,12,mon,1,tmon,3333,cl,add,calendar,year,1,day,1,else,t,day,day,get,last,day,of,month,mon,cl,get,calendar,year,day,lastday,offset,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,1,mon,else,if,nearest,weekday,t,day,day,days,of,month,first,calendar,tcal,calendar,get,instance,utc,locale,root,tcal,set,calendar,second,0,tcal,set,calendar,minute,0,tcal,set,calendar,0,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,tcal,set,calendar,year,cl,get,calendar,year,int,ldom,get,last,day,of,month,mon,cl,get,calendar,year,int,dow,tcal,get,calendar,if,dow,calendar,saturday,day,1,day,2,else,if,dow,calendar,saturday,day,1,else,if,dow,calendar,sunday,day,ldom,day,2,else,if,dow,calendar,sunday,day,1,tcal,set,calendar,second,sec,tcal,set,calendar,minute,min,tcal,set,calendar,hr,tcal,set,calendar,day,tcal,set,calendar,month,mon,1,long,n,time,tcal,get,time,in,millis,if,n,time,after,time,day,days,of,month,first,mon,else,if,st,null,st,size,0,t,day,day,st,first,int,last,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,last,day,day,days,of,month,first,mon,else,day,days,of,month,first,mon,if,day,t,mon,tmon,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,day,of,wspec,day,of,mspec,if,lastday,of,week,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,while,day,days,to,add,7,l,day,days,to,add,7,day,days,to,add,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,if,nthday,of,week,0,int,dow,days,of,week,first,int,c,dow,cl,get,calendar,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,else,if,c,dow,dow,days,to,add,dow,7,c,dow,boolean,day,shifted,false,if,days,to,add,0,day,shifted,true,day,days,to,add,int,week,of,month,day,7,if,day,7,0,week,of,month,days,to,add,nthday,of,week,week,of,month,7,day,days,to,add,if,days,to,add,0,day,get,last,day,of,month,mon,cl,get,calendar,year,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,day,shifted,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,cl,set,calendar,month,mon,1,continue,else,int,c,dow,cl,get,calendar,int,dow,days,of,week,first,st,days,of,week,tail,set,c,dow,if,st,null,st,size,0,dow,st,first,int,days,to,add,0,if,c,dow,dow,days,to,add,dow,c,dow,if,c,dow,dow,days,to,add,dow,7,c,dow,int,l,day,get,last,day,of,month,mon,cl,get,calendar,year,if,day,days,to,add,l,day,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,continue,else,if,days,to,add,0,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,day,days,to,add,cl,set,calendar,month,mon,1,continue,else,return,1,cl,set,calendar,day,mon,cl,get,calendar,month,1,int,year,cl,get,calendar,year,t,1,if,year,return,1,st,months,tail,set,mon,if,st,null,st,size,0,t,mon,mon,st,first,else,mon,months,first,year,if,mon,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,mon,1,cl,set,calendar,year,year,continue,cl,set,calendar,month,mon,1,year,cl,get,calendar,year,t,1,st,years,tail,set,year,if,st,null,st,size,0,t,year,year,st,first,else,return,1,if,year,t,cl,set,calendar,second,0,cl,set,calendar,minute,0,cl,set,calendar,0,cl,set,calendar,1,cl,set,calendar,month,0,cl,set,calendar,year,year,continue,cl,set,calendar,year,year,got,one,true,return,cl,get,time,in,millis
Cron -> private static void setCalendarHour(Calendar cal, int hour);1524684173;Advance the calendar to the particular hour paying particular attention_to daylight saving problems.__@param cal the calendar to operate on_@param hour the hour to set;private static void setCalendarHour(Calendar cal, int hour) {_        cal.set(java.util.Calendar.HOUR_OF_DAY, hour)__        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {_            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1)__        }_    };advance,the,calendar,to,the,particular,hour,paying,particular,attention,to,daylight,saving,problems,param,cal,the,calendar,to,operate,on,param,hour,the,hour,to,set;private,static,void,set,calendar,hour,calendar,cal,int,hour,cal,set,java,util,calendar,hour,if,cal,get,java,util,calendar,hour,hour,24,cal,set,java,util,calendar,hour,1
Cron -> private static void setCalendarHour(Calendar cal, int hour);1525248068;Advance the calendar to the particular hour paying particular attention_to daylight saving problems.__@param cal the calendar to operate on_@param hour the hour to set;private static void setCalendarHour(Calendar cal, int hour) {_        cal.set(java.util.Calendar.HOUR_OF_DAY, hour)__        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {_            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1)__        }_    };advance,the,calendar,to,the,particular,hour,paying,particular,attention,to,daylight,saving,problems,param,cal,the,calendar,to,operate,on,param,hour,the,hour,to,set;private,static,void,set,calendar,hour,calendar,cal,int,hour,cal,set,java,util,calendar,hour,if,cal,get,java,util,calendar,hour,hour,24,cal,set,java,util,calendar,hour,1
Cron -> private static void setCalendarHour(Calendar cal, int hour);1537806831;Advance the calendar to the particular hour paying particular attention_to daylight saving problems.__@param cal the calendar to operate on_@param hour the hour to set;private static void setCalendarHour(Calendar cal, int hour) {_        cal.set(java.util.Calendar.HOUR_OF_DAY, hour)__        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {_            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1)__        }_    };advance,the,calendar,to,the,particular,hour,paying,particular,attention,to,daylight,saving,problems,param,cal,the,calendar,to,operate,on,param,hour,the,hour,to,set;private,static,void,set,calendar,hour,calendar,cal,int,hour,cal,set,java,util,calendar,hour,if,cal,get,java,util,calendar,hour,hour,24,cal,set,java,util,calendar,hour,1
Cron -> private static void setCalendarHour(Calendar cal, int hour);1538067637;Advance the calendar to the particular hour paying particular attention_to daylight saving problems.__@param cal the calendar to operate on_@param hour the hour to set;private static void setCalendarHour(Calendar cal, int hour) {_        cal.set(java.util.Calendar.HOUR_OF_DAY, hour)__        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {_            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1)__        }_    };advance,the,calendar,to,the,particular,hour,paying,particular,attention,to,daylight,saving,problems,param,cal,the,calendar,to,operate,on,param,hour,the,hour,to,set;private,static,void,set,calendar,hour,calendar,cal,int,hour,cal,set,java,util,calendar,hour,if,cal,get,java,util,calendar,hour,hour,24,cal,set,java,util,calendar,hour,1
Cron -> private static void setCalendarHour(Calendar cal, int hour);1548422582;Advance the calendar to the particular hour paying particular attention_to daylight saving problems.__@param cal the calendar to operate on_@param hour the hour to set;private static void setCalendarHour(Calendar cal, int hour) {_        cal.set(java.util.Calendar.HOUR_OF_DAY, hour)__        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {_            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1)__        }_    };advance,the,calendar,to,the,particular,hour,paying,particular,attention,to,daylight,saving,problems,param,cal,the,calendar,to,operate,on,param,hour,the,hour,to,set;private,static,void,set,calendar,hour,calendar,cal,int,hour,cal,set,java,util,calendar,hour,if,cal,get,java,util,calendar,hour,hour,24,cal,set,java,util,calendar,hour,1
Cron -> private static void setCalendarHour(Calendar cal, int hour);1549400972;Advance the calendar to the particular hour paying particular attention_to daylight saving problems.__@param cal the calendar to operate on_@param hour the hour to set;private static void setCalendarHour(Calendar cal, int hour) {_        cal.set(java.util.Calendar.HOUR_OF_DAY, hour)__        if (cal.get(java.util.Calendar.HOUR_OF_DAY) != hour && hour != 24) {_            cal.set(java.util.Calendar.HOUR_OF_DAY, hour + 1)__        }_    };advance,the,calendar,to,the,particular,hour,paying,particular,attention,to,daylight,saving,problems,param,cal,the,calendar,to,operate,on,param,hour,the,hour,to,set;private,static,void,set,calendar,hour,calendar,cal,int,hour,cal,set,java,util,calendar,hour,if,cal,get,java,util,calendar,hour,hour,24,cal,set,java,util,calendar,hour,1
