# id;timestamp;commentText;codeText;commentWords;codeWords
LifecyclePolicy -> public Map<String, Phase> getPhases();1516783641;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522076403;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522112055;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522115339;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522282250;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522365837;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522711308;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1522881156;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1523496526;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1523572820;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1523938770;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1527166901;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1531392038;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1532695210;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1534369642;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1534779142;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1534899572;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1536172520;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1536187065;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1538532170;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1539019518;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1540394099;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public Map<String, Phase> getPhases();1541783486;@return the {@link Phase}s for this {@link LifecyclePolicy} in the order_in which they will be executed.;public Map<String, Phase> getPhases() {_        return phases__    };return,the,link,phase,s,for,this,link,lifecycle,policy,in,the,order,in,which,they,will,be,executed;public,map,string,phase,get,phases,return,phases
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1516783641;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522076403;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        _        _    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522112055;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        _        _    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522115339;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522282250;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522365837;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522711308;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1522881156;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1523496526;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1523572820;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1523938770;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1527166901;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1531392038;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1532695210;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        if (type == null) {_            this.type = TimeseriesLifecycleType.INSTANCE__        } else {_            this.type = type__        }_        this.name = name__        this.phases = phases__        this.type.validate(phases.values())__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,if,type,null,this,type,timeseries,lifecycle,type,instance,else,this,type,type,this,name,name,this,phases,phases,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1536172520;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1536187065;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1538532170;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1539019518;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1540394099;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1541783486;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1516783641;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522076403;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522112055;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522115339;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522282250;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522365837;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522711308;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1522881156;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1523496526;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1523572820;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1523938770;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1527166901;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1531392038;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1532695210;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1534369642;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1534779142;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1534899572;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1536172520;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1536187065;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1538532170;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1539019518;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1540394099;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(StreamInput in) throws IOException;1541783486;For Serialization;public LifecyclePolicy(StreamInput in) throws IOException {_        type = in.readNamedWriteable(LifecycleType.class)__        name = in.readString()__        phases = Collections.unmodifiableMap(in.readMap(StreamInput::readString, Phase::new))__    };for,serialization;public,lifecycle,policy,stream,input,in,throws,ioexception,type,in,read,named,writeable,lifecycle,type,class,name,in,read,string,phases,collections,unmodifiable,map,in,read,map,stream,input,read,string,phase,new
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1534369642;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1534779142;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1534899572;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1536172520;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1536187065;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1538532170;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1539019518;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1540394099;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> public LifecyclePolicy(String name, Map<String, Phase> phases);1541783486;@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;public LifecyclePolicy(String name, Map<String, Phase> phases) {_        this(TimeseriesLifecycleType.INSTANCE, name, phases)__    };param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;public,lifecycle,policy,string,name,map,string,phase,phases,this,timeseries,lifecycle,type,instance,name,phases
LifecyclePolicy -> NextActionProvider -> LifecycleAction next(LifecycleAction current)_;1516783641;@param current_The current action which is being or was executed_@return the action following {@code current} to execute;LifecycleAction next(LifecycleAction current)_;param,current,the,current,action,which,is,being,or,was,executed,return,the,action,following,code,current,to,execute;lifecycle,action,next,lifecycle,action,current
LifecyclePolicy -> NextActionProvider -> LifecycleAction next(LifecycleAction current)_;1522076403;@param current_The current action which is being or was executed_@return the action following {@code current} to execute;LifecycleAction next(LifecycleAction current)_;param,current,the,current,action,which,is,being,or,was,executed,return,the,action,following,code,current,to,execute;lifecycle,action,next,lifecycle,action,current
LifecyclePolicy -> NextActionProvider -> LifecycleAction next(LifecycleAction current)_;1522112055;@param current_The current action which is being or was executed_@return the action following {@code current} to execute;LifecycleAction next(LifecycleAction current)_;param,current,the,current,action,which,is,being,or,was,executed,return,the,action,following,code,current,to,execute;lifecycle,action,next,lifecycle,action,current
LifecyclePolicy -> LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1534369642;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1534779142;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases);1534899572;@param type_the {@link LifecycleType} of the policy_@param name_the name of this {@link LifecyclePolicy}_@param phases_a {@link Map} of {@link Phase}s which make up this_{@link LifecyclePolicy}.;LifecyclePolicy(LifecycleType type, String name, Map<String, Phase> phases) {_        this.name = name__        this.phases = phases__        this.type = type__        this.type.validate(phases.values())__    };param,type,the,link,lifecycle,type,of,the,policy,param,name,the,name,of,this,link,lifecycle,policy,param,phases,a,link,map,of,link,phase,s,which,make,up,this,link,lifecycle,policy;lifecycle,policy,lifecycle,type,type,string,name,map,string,phase,phases,this,name,name,this,phases,phases,this,type,type,this,type,validate,phases,values
LifecyclePolicy -> public String getName();1516783641;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522076403;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522112055;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522115339;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522282250;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522365837;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522711308;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1522881156;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1523496526;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1523572820;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1523938770;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1527166901;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1531392038;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1532695210;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1534369642;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1534779142;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1534899572;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1536172520;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1536187065;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1538532170;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1539019518;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1540394099;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public String getName();1541783486;@return the name of this {@link LifecyclePolicy};public String getName() {_        return name__    };return,the,name,of,this,link,lifecycle,policy;public,string,get,name,return,name
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1532695210;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1534369642;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1534779142;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1534899572;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1536172520;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1536187065;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1538532170;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public StepKey getNextValidStep(StepKey stepKey);1539019518;Finds the next valid {@link StepKey} on or after the provided_{@link StepKey}. If the provided {@link StepKey} is valid in this policy_it will be returned. If its not valid the next available {@link StepKey}_will be returned.;public StepKey getNextValidStep(StepKey stepKey) {_        Phase phase = phases.get(stepKey.getPhase())__        if (phase == null) {_            _            _            return getAfterStepBeforePhase(stepKey.getPhase())__        } else {_            _            LifecycleAction action = phase.getActions().get(stepKey.getAction())__            if (action == null) {_                _                _                return getFirstStepInNextAction(stepKey.getAction(), phase)__            } else {_                _                if (action.toStepKeys(phase.getName()).contains(stepKey)) {_                    _                    return stepKey__                } else {_                    _                    _                    _                    return getFirstStepInNextAction(stepKey.getAction(), phase)__                }_            }_        }_    };finds,the,next,valid,link,step,key,on,or,after,the,provided,link,step,key,if,the,provided,link,step,key,is,valid,in,this,policy,it,will,be,returned,if,its,not,valid,the,next,available,link,step,key,will,be,returned;public,step,key,get,next,valid,step,step,key,step,key,phase,phase,phases,get,step,key,get,phase,if,phase,null,return,get,after,step,before,phase,step,key,get,phase,else,lifecycle,action,action,phase,get,actions,get,step,key,get,action,if,action,null,return,get,first,step,in,next,action,step,key,get,action,phase,else,if,action,to,step,keys,phase,get,name,contains,step,key,return,step,key,else,return,get,first,step,in,next,action,step,key,get,action,phase
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1523938770;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            _            if (phase != null) {_                Step.StepKey afterStepKey = new Step.StepKey(phase.getName(), "pre-" + lastStepKey.getAction(), "after")__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = phaseIterator.previous()__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            Step.StepKey afterStepKey = new Step.StepKey(phase.getName(), "pre-" + lastStepKey.getAction(), "after")__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,phase,get,name,pre,last,step,key,get,action,after,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,phase,iterator,previous,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,phase,get,name,pre,last,step,key,get,action,after,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1527166901;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1531392038;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1532695210;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1534369642;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1534779142;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1534899572;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client, LongSupplier nowSupplier);1536172520;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@param nowSupplier The supplier of the current time for {@link PhaseAfterStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client, LongSupplier nowSupplier) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseAfterStep.NAME, PhaseAfterStep.NAME)__                Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseAfterStep.NAME, PhaseAfterStep.NAME)__            Step phaseAfterStep = new PhaseAfterStep(nowSupplier, phase.getAfter(), afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,param,now,supplier,the,supplier,of,the,current,time,for,link,phase,after,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,long,supplier,now,supplier,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,after,step,name,phase,after,step,name,step,phase,after,step,new,phase,after,step,now,supplier,phase,get,after,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public LifecycleType getType();1516783641;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522076403;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522112055;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522115339;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522282250;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522365837;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522711308;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1522881156;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1523496526;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1523572820;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1523938770;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1527166901;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1531392038;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1532695210;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1534369642;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1534779142;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1534899572;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1536172520;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1536187065;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1538532170;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1539019518;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1540394099;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public LifecycleType getType();1541783486;@return the type of this {@link LifecyclePolicy};public LifecycleType getType() {_        return type__    };return,the,type,of,this,link,lifecycle,policy;public,lifecycle,type,get,type,return,type
LifecyclePolicy -> public List<Step> toSteps(Client client);1536187065;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__                Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__            Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.debug("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.debug(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,debug,step,count,steps,size,for,step,step,steps,logger,debug,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client);1538532170;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__                Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__            Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)__        logger.trace("STEP COUNT: " + steps.size())__        for (Step step : steps) {_            logger.trace(step.getKey() + " -> " + step.getNextStepKey())__        }__        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,logger,trace,step,count,steps,size,for,step,step,steps,logger,trace,step,get,key,step,get,next,step,key,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client);1539019518;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__                Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__            Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)___        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client);1540394099;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__                Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__            Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)___        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,return,steps
LifecyclePolicy -> public List<Step> toSteps(Client client);1541783486;This method is used to compile this policy into its execution plan built out_of {@link Step} instances. The order of the {@link Phase}s and {@link LifecycleAction}s is_determined by the {@link LifecycleType} associated with this policy.__The order of the policy will have this structure:__- initialize policy context step_- phase-1 phase-after-step_- ... phase-1 action steps_- phase-2 phase-after-step_- ..._- terminal policy step__We first initialize the policy's context and ensure that the index has proper settings set._Then we begin each phase's after-step along with all its actions as steps. Finally, we have_a terminal step to inform us that this policy's steps are all complete. Each phase's `after`_step is associated with the previous phase's phase. For example, the warm phase's `after` is_associated with the hot phase so that it is clear that we haven't stepped into the warm phase_just yet (until this step is complete).__@param client The Elasticsearch Client to use during execution of {@link AsyncActionStep}_and {@link AsyncWaitStep} steps._@return The list of {@link Step} objects in order of their execution.;public List<Step> toSteps(Client client) {_        List<Step> steps = new ArrayList<>()__        List<Phase> orderedPhases = type.getOrderedPhases(phases)__        ListIterator<Phase> phaseIterator = orderedPhases.listIterator(orderedPhases.size())___        _        steps.add(TerminalPolicyStep.INSTANCE)__        Step.StepKey lastStepKey = TerminalPolicyStep.KEY___        Phase phase = null__        _        while (phaseIterator.hasPrevious()) {__            Phase previousPhase = phaseIterator.previous()___            _            if (phase != null) {_                _                _                Step.StepKey afterStepKey = new Step.StepKey(previousPhase.getName(), PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__                Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__                steps.add(phaseAfterStep)__                lastStepKey = phaseAfterStep.getKey()__            }__            phase = previousPhase__            List<LifecycleAction> orderedActions = type.getOrderedActions(phase)__            ListIterator<LifecycleAction> actionIterator = orderedActions.listIterator(orderedActions.size())__            _            while (actionIterator.hasPrevious()) {_                LifecycleAction action = actionIterator.previous()__                List<Step> actionSteps = action.toSteps(client, phase.getName(), lastStepKey)__                ListIterator<Step> actionStepsIterator = actionSteps.listIterator(actionSteps.size())__                while (actionStepsIterator.hasPrevious()) {_                    Step step = actionStepsIterator.previous()__                    steps.add(step)__                    lastStepKey = step.getKey()__                }_            }_        }__        if (phase != null) {_            _            Step.StepKey afterStepKey = new Step.StepKey("new", PhaseCompleteStep.NAME, PhaseCompleteStep.NAME)__            Step phaseAfterStep = new PhaseCompleteStep(afterStepKey, lastStepKey)__            steps.add(phaseAfterStep)__            lastStepKey = phaseAfterStep.getKey()__        }__        _        steps.add(new InitializePolicyContextStep(InitializePolicyContextStep.KEY, lastStepKey))___        Collections.reverse(steps)___        return steps__    };this,method,is,used,to,compile,this,policy,into,its,execution,plan,built,out,of,link,step,instances,the,order,of,the,link,phase,s,and,link,lifecycle,action,s,is,determined,by,the,link,lifecycle,type,associated,with,this,policy,the,order,of,the,policy,will,have,this,structure,initialize,policy,context,step,phase,1,phase,after,step,phase,1,action,steps,phase,2,phase,after,step,terminal,policy,step,we,first,initialize,the,policy,s,context,and,ensure,that,the,index,has,proper,settings,set,then,we,begin,each,phase,s,after,step,along,with,all,its,actions,as,steps,finally,we,have,a,terminal,step,to,inform,us,that,this,policy,s,steps,are,all,complete,each,phase,s,after,step,is,associated,with,the,previous,phase,s,phase,for,example,the,warm,phase,s,after,is,associated,with,the,hot,phase,so,that,it,is,clear,that,we,haven,t,stepped,into,the,warm,phase,just,yet,until,this,step,is,complete,param,client,the,elasticsearch,client,to,use,during,execution,of,link,async,action,step,and,link,async,wait,step,steps,return,the,list,of,link,step,objects,in,order,of,their,execution;public,list,step,to,steps,client,client,list,step,steps,new,array,list,list,phase,ordered,phases,type,get,ordered,phases,phases,list,iterator,phase,phase,iterator,ordered,phases,list,iterator,ordered,phases,size,steps,add,terminal,policy,step,instance,step,step,key,last,step,key,terminal,policy,step,key,phase,phase,null,while,phase,iterator,has,previous,phase,previous,phase,phase,iterator,previous,if,phase,null,step,step,key,after,step,key,new,step,step,key,previous,phase,get,name,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,phase,previous,phase,list,lifecycle,action,ordered,actions,type,get,ordered,actions,phase,list,iterator,lifecycle,action,action,iterator,ordered,actions,list,iterator,ordered,actions,size,while,action,iterator,has,previous,lifecycle,action,action,action,iterator,previous,list,step,action,steps,action,to,steps,client,phase,get,name,last,step,key,list,iterator,step,action,steps,iterator,action,steps,list,iterator,action,steps,size,while,action,steps,iterator,has,previous,step,step,action,steps,iterator,previous,steps,add,step,last,step,key,step,get,key,if,phase,null,step,step,key,after,step,key,new,step,step,key,new,phase,complete,step,name,phase,complete,step,name,step,phase,after,step,new,phase,complete,step,after,step,key,last,step,key,steps,add,phase,after,step,last,step,key,phase,after,step,get,key,steps,add,new,initialize,policy,context,step,initialize,policy,context,step,key,last,step,key,collections,reverse,steps,return,steps
