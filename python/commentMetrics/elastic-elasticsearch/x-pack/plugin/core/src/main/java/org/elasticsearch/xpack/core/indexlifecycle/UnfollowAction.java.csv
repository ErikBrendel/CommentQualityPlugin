commented;modifiers;parameterAmount;loc;comment;code
false;public;3;19;;@Override public List<Step> toSteps(Client client, String phase, StepKey nextStepKey) {     StepKey indexingComplete = new StepKey(phase, NAME, WaitForIndexingCompleteStep.NAME).     StepKey waitForFollowShardTasks = new StepKey(phase, NAME, WaitForFollowShardTasksStep.NAME).     StepKey pauseFollowerIndex = new StepKey(phase, NAME, PauseFollowerIndexStep.NAME).     StepKey closeFollowerIndex = new StepKey(phase, NAME, CloseFollowerIndexStep.NAME).     StepKey unfollowFollowerIndex = new StepKey(phase, NAME, UnfollowFollowIndexStep.NAME).     StepKey openFollowerIndex = new StepKey(phase, NAME, OpenFollowerIndexStep.NAME).     StepKey waitForYellowStep = new StepKey(phase, NAME, WaitForYellowStep.NAME).     WaitForIndexingCompleteStep step1 = new WaitForIndexingCompleteStep(indexingComplete, waitForFollowShardTasks).     WaitForFollowShardTasksStep step2 = new WaitForFollowShardTasksStep(waitForFollowShardTasks, pauseFollowerIndex, client).     PauseFollowerIndexStep step3 = new PauseFollowerIndexStep(pauseFollowerIndex, closeFollowerIndex, client).     CloseFollowerIndexStep step4 = new CloseFollowerIndexStep(closeFollowerIndex, unfollowFollowerIndex, client).     UnfollowFollowIndexStep step5 = new UnfollowFollowIndexStep(unfollowFollowerIndex, openFollowerIndex, client).     OpenFollowerIndexStep step6 = new OpenFollowerIndexStep(openFollowerIndex, waitForYellowStep, client).     WaitForYellowStep step7 = new WaitForYellowStep(waitForYellowStep, nextStepKey).     return Arrays.asList(step1, step2, step3, step4, step5, step6, step7). }
false;public;1;12;;@Override public List<StepKey> toStepKeys(String phase) {     StepKey indexingCompleteStep = new StepKey(phase, NAME, WaitForIndexingCompleteStep.NAME).     StepKey waitForFollowShardTasksStep = new StepKey(phase, NAME, WaitForFollowShardTasksStep.NAME).     StepKey pauseFollowerIndexStep = new StepKey(phase, NAME, PauseFollowerIndexStep.NAME).     StepKey closeFollowerIndexStep = new StepKey(phase, NAME, CloseFollowerIndexStep.NAME).     StepKey unfollowIndexStep = new StepKey(phase, NAME, UnfollowFollowIndexStep.NAME).     StepKey openFollowerIndexStep = new StepKey(phase, NAME, OpenFollowerIndexStep.NAME).     StepKey waitForYellowStep = new StepKey(phase, NAME, WaitForYellowStep.NAME).     return Arrays.asList(indexingCompleteStep, waitForFollowShardTasksStep, pauseFollowerIndexStep, closeFollowerIndexStep, unfollowIndexStep, openFollowerIndexStep, waitForYellowStep). }
false;public;0;5;;@Override public boolean isSafeAction() {     // There are no settings to change, so therefor this action should be safe:     return true. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;1;2;;@Override public void writeTo(StreamOutput out) throws IOException { }
false;public,static;1;3;;public static UnfollowAction parse(XContentParser parser) {     return PARSER.apply(parser, null). }
false;public;2;6;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return 36970. }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     return true. }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
