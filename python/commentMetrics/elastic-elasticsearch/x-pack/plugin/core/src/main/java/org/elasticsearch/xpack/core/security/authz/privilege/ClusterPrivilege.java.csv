commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;public static ClusterPrivilege get(Set<String> name) {     if (name == null || name.isEmpty()) {         return NONE.     }     return CACHE.computeIfAbsent(name, ClusterPrivilege::resolve). }
false;private,static;1;32;;private static ClusterPrivilege resolve(Set<String> name) {     final int size = name.size().     if (size == 0) {         throw new IllegalArgumentException("empty set should not be used").     }     Set<String> actions = new HashSet<>().     Set<Automaton> automata = new HashSet<>().     for (String part : name) {         part = part.toLowerCase(Locale.ROOT).         if (ACTION_MATCHER.test(part)) {             actions.add(actionToPattern(part)).         } else {             ClusterPrivilege privilege = VALUES.get(part).             if (privilege != null && size == 1) {                 return privilege.             } else if (privilege != null) {                 automata.add(privilege.automaton).             } else {                 throw new IllegalArgumentException("unknown cluster privilege [" + name + "]. a privilege must be either " + "one of the predefined fixed cluster privileges [" + Strings.collectionToCommaDelimitedString(VALUES.entrySet()) + "] or a pattern over one of the available " + "cluster actions").             }         }     }     if (actions.isEmpty() == false) {         automata.add(patterns(actions)).     }     return new ClusterPrivilege(name, Automatons.unionAndMinimize(automata)). }
