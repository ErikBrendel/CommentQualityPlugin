commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Creates a request builder that gets an watch by id  *  * @param id the id of the watch  * @return The request builder  */ ;/**  * Creates a request builder that gets an watch by id  *  * @param id the id of the watch  * @return The request builder  */ public GetWatchRequestBuilder prepareGetWatch(String id) {     return new GetWatchRequestBuilder(client, id). }
true;public;0;3;/**  * Creates a request builder that gets an watch  *  * @return the request builder  */ ;/**  * Creates a request builder that gets an watch  *  * @return the request builder  */ public GetWatchRequestBuilder prepareGetWatch() {     return new GetWatchRequestBuilder(client). }
true;public;2;3;/**  * Gets an watch from the watch index  *  * @param request The get watch request  * @param listener The listener for the get watch response containing the GetResponse for this watch  */ ;/**  * Gets an watch from the watch index  *  * @param request The get watch request  * @param listener The listener for the get watch response containing the GetResponse for this watch  */ public void getWatch(GetWatchRequest request, ActionListener<GetWatchResponse> listener) {     client.execute(GetWatchAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Gets an watch from the watch index  *  * @param request The get watch request with the watch id  * @return The response containing the GetResponse for this watch  */ ;/**  * Gets an watch from the watch index  *  * @param request The get watch request with the watch id  * @return The response containing the GetResponse for this watch  */ public ActionFuture<GetWatchResponse> getWatch(GetWatchRequest request) {     return client.execute(GetWatchAction.INSTANCE, request). }
true;public;1;3;/**  * Creates a request builder to delete an watch by id  *  * @param id the id of the watch  * @return The request builder  */ ;/**  * Creates a request builder to delete an watch by id  *  * @param id the id of the watch  * @return The request builder  */ public DeleteWatchRequestBuilder prepareDeleteWatch(String id) {     return new DeleteWatchRequestBuilder(client, id). }
true;public;0;3;/**  * Creates a request builder that deletes an watch  *  * @return The request builder  */ ;/**  * Creates a request builder that deletes an watch  *  * @return The request builder  */ public DeleteWatchRequestBuilder prepareDeleteWatch() {     return new DeleteWatchRequestBuilder(client). }
true;public;2;3;/**  * Deletes an watch  *  * @param request The delete request with the watch id to be deleted  * @param listener The listener for the delete watch response containing the DeleteResponse for this action  */ ;/**  * Deletes an watch  *  * @param request The delete request with the watch id to be deleted  * @param listener The listener for the delete watch response containing the DeleteResponse for this action  */ public void deleteWatch(DeleteWatchRequest request, ActionListener<DeleteWatchResponse> listener) {     client.execute(DeleteWatchAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Deletes an watch  *  * @param request The delete request with the watch id to be deleted  * @return The response containing the DeleteResponse for this action  */ ;/**  * Deletes an watch  *  * @param request The delete request with the watch id to be deleted  * @return The response containing the DeleteResponse for this action  */ public ActionFuture<DeleteWatchResponse> deleteWatch(DeleteWatchRequest request) {     return client.execute(DeleteWatchAction.INSTANCE, request). }
true;public;1;3;/**  * Creates a request builder to build a request to put an watch  *  * @param id The id of the watch to put  * @return The builder to create the watch  */ ;/**  * Creates a request builder to build a request to put an watch  *  * @param id The id of the watch to put  * @return The builder to create the watch  */ public PutWatchRequestBuilder preparePutWatch(String id) {     return new PutWatchRequestBuilder(client, id). }
true;public;0;3;/**  * Creates a request builder to build a request to put a watch  *  * @return The builder  */ ;/**  * Creates a request builder to build a request to put a watch  *  * @return The builder  */ public PutWatchRequestBuilder preparePutWatch() {     return new PutWatchRequestBuilder(client). }
true;public;2;3;/**  * Adds the given watch to the watcher  *  * @param request The request containing the watch to be added  * @param listener The listener for the response containing the IndexResponse for this watch  */ ;/**  * Adds the given watch to the watcher  *  * @param request The request containing the watch to be added  * @param listener The listener for the response containing the IndexResponse for this watch  */ public void putWatch(PutWatchRequest request, ActionListener<PutWatchResponse> listener) {     client.execute(PutWatchAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Adds a new watch  *  * @param request The request containing the watch to be added  * @return The response containing the IndexResponse for this watch  */ ;/**  * Adds a new watch  *  * @param request The request containing the watch to be added  * @return The response containing the IndexResponse for this watch  */ public ActionFuture<PutWatchResponse> putWatch(PutWatchRequest request) {     return client.execute(PutWatchAction.INSTANCE, request). }
true;public;1;3;/**  * Gets the watcher stats  *  * @param request The request for the watcher stats  * @return The response containing the StatsResponse for this action  */ ;/**  * Gets the watcher stats  *  * @param request The request for the watcher stats  * @return The response containing the StatsResponse for this action  */ public ActionFuture<WatcherStatsResponse> watcherStats(WatcherStatsRequest request) {     return client.execute(WatcherStatsAction.INSTANCE, request). }
true;public;0;3;/**  * Creates a request builder to build a request to get the watcher stats  *  * @return The builder get the watcher stats  */ ;/**  * Creates a request builder to build a request to get the watcher stats  *  * @return The builder get the watcher stats  */ public WatcherStatsRequestBuilder prepareWatcherStats() {     return new WatcherStatsRequestBuilder(client). }
true;public;2;3;/**  * Gets the watcher stats  *  * @param request The request for the watcher stats  * @param listener The listener for the response containing the WatcherStatsResponse  */ ;/**  * Gets the watcher stats  *  * @param request The request for the watcher stats  * @param listener The listener for the response containing the WatcherStatsResponse  */ public void watcherStats(WatcherStatsRequest request, ActionListener<WatcherStatsResponse> listener) {     client.execute(WatcherStatsAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Creates a request builder to ack a watch by id  *  * @param id the id of the watch  * @return The request builder  */ ;/**  * Creates a request builder to ack a watch by id  *  * @param id the id of the watch  * @return The request builder  */ public AckWatchRequestBuilder prepareAckWatch(String id) {     return new AckWatchRequestBuilder(client, id). }
true;public;2;3;/**  * Ack a watch  *  * @param request The ack request with the watch id to be acked  * @param listener The listener for the ack watch response  */ ;/**  * Ack a watch  *  * @param request The ack request with the watch id to be acked  * @param listener The listener for the ack watch response  */ public void ackWatch(AckWatchRequest request, ActionListener<AckWatchResponse> listener) {     client.execute(AckWatchAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Acks a watch  *  * @param request The ack request with the watch id to be acked  * @return The AckWatchResponse  */ ;/**  * Acks a watch  *  * @param request The ack request with the watch id to be acked  * @return The AckWatchResponse  */ public ActionFuture<AckWatchResponse> ackWatch(AckWatchRequest request) {     return client.execute(AckWatchAction.INSTANCE, request). }
true;public;2;3;/**  * Creates a request builder to activate a watch by id  *  * @param id the id of the watch  * @param activate indicates whether to activate or deactivate the watch  * @return The request builder  */ ;/**  * Creates a request builder to activate a watch by id  *  * @param id the id of the watch  * @param activate indicates whether to activate or deactivate the watch  * @return The request builder  */ public ActivateWatchRequestBuilder prepareActivateWatch(String id, boolean activate) {     return new ActivateWatchRequestBuilder(client, id, activate). }
true;public;2;3;/**  * Activate a watch  *  * @param request The activate request with the watch id  * @param listener The listener for the activate watch response  */ ;/**  * Activate a watch  *  * @param request The activate request with the watch id  * @param listener The listener for the activate watch response  */ public void activateWatch(ActivateWatchRequest request, ActionListener<ActivateWatchResponse> listener) {     client.execute(ActivateWatchAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Activates a watch  *  * @param request The de/activate request with the watch id.  */ ;/**  * Activates a watch  *  * @param request The de/activate request with the watch id.  */ public ActionFuture<ActivateWatchResponse> activateWatch(ActivateWatchRequest request) {     return client.execute(ActivateWatchAction.INSTANCE, request). }
true;public;0;3;/**  * Prepare a watch service request.  */ ;/**  * Prepare a watch service request.  */ public WatcherServiceRequestBuilder prepareWatchService() {     return new WatcherServiceRequestBuilder(client). }
true;public;2;3;/**  * Perform an watcher service request to either start, stop or restart the service.  */ ;/**  * Perform an watcher service request to either start, stop or restart the service.  */ public void watcherService(WatcherServiceRequest request, ActionListener<AcknowledgedResponse> listener) {     client.execute(WatcherServiceAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Perform an watcher service request to either start, stop or restart the service.  */ ;/**  * Perform an watcher service request to either start, stop or restart the service.  */ public ActionFuture<AcknowledgedResponse> watcherService(WatcherServiceRequest request) {     return client.execute(WatcherServiceAction.INSTANCE, request). }
true;public;1;3;/**  * Creates a request builder to execute a watch by id  *  * @param id the id of the watch  * @return The request builder  */ ;/**  * Creates a request builder to execute a watch by id  *  * @param id the id of the watch  * @return The request builder  */ public ExecuteWatchRequestBuilder prepareExecuteWatch(String id) {     return new ExecuteWatchRequestBuilder(client, id). }
true;public;0;3;/**  * Creates a request builder that executes a watch  *  * @return The request builder  */ ;/**  * Creates a request builder that executes a watch  *  * @return The request builder  */ public ExecuteWatchRequestBuilder prepareExecuteWatch() {     return new ExecuteWatchRequestBuilder(client). }
true;public;2;3;/**  * executes a watch  *  * @param request The run request with the watch id to be executed  * @param listener The listener for the run watch response  */ ;/**  * executes a watch  *  * @param request The run request with the watch id to be executed  * @param listener The listener for the run watch response  */ public void executeWatch(ExecuteWatchRequest request, ActionListener<ExecuteWatchResponse> listener) {     client.execute(ExecuteWatchAction.INSTANCE, request, listener). }
true;public;1;3;/**  * Executes an watch  *  * @param request The execute request with the watch id to be executed  * @return The AckWatchResponse  */ ;/**  * Executes an watch  *  * @param request The execute request with the watch id to be executed  * @return The AckWatchResponse  */ public ActionFuture<ExecuteWatchResponse> executeWatch(ExecuteWatchRequest request) {     return client.execute(ExecuteWatchAction.INSTANCE, request). }
false;public;1;3;;public WatcherClient filterWithHeader(Map<String, String> headers) {     return new WatcherClient(client.filterWithHeader(headers)). }
