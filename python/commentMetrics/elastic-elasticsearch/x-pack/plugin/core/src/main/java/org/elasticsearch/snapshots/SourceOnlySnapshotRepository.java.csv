# id;timestamp;commentText;codeText;commentWords;codeWords
SourceOnlySnapshotRepository -> public static EngineFactory getEngineFactory();1536828374;Returns an {@link EngineFactory} for the source only snapshots.;public static EngineFactory getEngineFactory() {_        return config -> new ReadOnlyEngine(config, null, new TranslogStats(0, 0, 0, 0, 0), true,_            reader -> {_                try {_                    return SeqIdGeneratingFilterReader.wrap(reader, config.getPrimaryTermSupplier().getAsLong())__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            })__    };returns,an,link,engine,factory,for,the,source,only,snapshots;public,static,engine,factory,get,engine,factory,return,config,new,read,only,engine,config,null,new,translog,stats,0,0,0,0,0,true,reader,try,return,seq,id,generating,filter,reader,wrap,reader,config,get,primary,term,supplier,get,as,long,catch,ioexception,e,throw,new,unchecked,ioexception,e
SourceOnlySnapshotRepository -> public static EngineFactory getEngineFactory();1537202470;Returns an {@link EngineFactory} for the source only snapshots.;public static EngineFactory getEngineFactory() {_        return config -> new ReadOnlyEngine(config, null, new TranslogStats(0, 0, 0, 0, 0), true,_            reader -> {_                try {_                    return SeqIdGeneratingFilterReader.wrap(reader, config.getPrimaryTermSupplier().getAsLong())__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            })__    };returns,an,link,engine,factory,for,the,source,only,snapshots;public,static,engine,factory,get,engine,factory,return,config,new,read,only,engine,config,null,new,translog,stats,0,0,0,0,0,true,reader,try,return,seq,id,generating,filter,reader,wrap,reader,config,get,primary,term,supplier,get,as,long,catch,ioexception,e,throw,new,unchecked,ioexception,e
SourceOnlySnapshotRepository -> public static EngineFactory getEngineFactory();1539723533;Returns an {@link EngineFactory} for the source only snapshots.;public static EngineFactory getEngineFactory() {_        return config -> new ReadOnlyEngine(config, null, new TranslogStats(0, 0, 0, 0, 0), true,_            reader -> {_                try {_                    return SeqIdGeneratingFilterReader.wrap(reader, config.getPrimaryTermSupplier().getAsLong())__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            })__    };returns,an,link,engine,factory,for,the,source,only,snapshots;public,static,engine,factory,get,engine,factory,return,config,new,read,only,engine,config,null,new,translog,stats,0,0,0,0,0,true,reader,try,return,seq,id,generating,filter,reader,wrap,reader,config,get,primary,term,supplier,get,as,long,catch,ioexception,e,throw,new,unchecked,ioexception,e
SourceOnlySnapshotRepository -> public static EngineFactory getEngineFactory();1549395161;Returns an {@link EngineFactory} for the source only snapshots.;public static EngineFactory getEngineFactory() {_        return config -> new ReadOnlyEngine(config, null, new TranslogStats(0, 0, 0, 0, 0), true,_            reader -> {_                try {_                    return SeqIdGeneratingFilterReader.wrap(reader, config.getPrimaryTermSupplier().getAsLong())__                } catch (IOException e) {_                    throw new UncheckedIOException(e)__                }_            })__    };returns,an,link,engine,factory,for,the,source,only,snapshots;public,static,engine,factory,get,engine,factory,return,config,new,read,only,engine,config,null,new,translog,stats,0,0,0,0,0,true,reader,try,return,seq,id,generating,filter,reader,wrap,reader,config,get,primary,term,supplier,get,as,long,catch,ioexception,e,throw,new,unchecked,ioexception,e
SourceOnlySnapshotRepository -> public static Repository.Factory newRepositoryFactory();1536828374;Returns a new source only repository factory;public static Repository.Factory newRepositoryFactory() {_        return new Repository.Factory() {__            @Override_            public Repository create(RepositoryMetaData metadata) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Repository create(RepositoryMetaData metaData, Function<String, Repository.Factory> typeLookup) throws Exception {_                String delegateType = DELEGATE_TYPE.get(metaData.settings())__                if (Strings.hasLength(delegateType) == false) {_                    throw new IllegalArgumentException(DELEGATE_TYPE.getKey() + " must be set")__                }_                Repository.Factory factory = typeLookup.apply(delegateType)__                return new SourceOnlySnapshotRepository(factory.create(new RepositoryMetaData(metaData.name(),_                    delegateType, metaData.settings()), typeLookup))__            }_        }__    };returns,a,new,source,only,repository,factory;public,static,repository,factory,new,repository,factory,return,new,repository,factory,override,public,repository,create,repository,meta,data,metadata,throw,new,unsupported,operation,exception,override,public,repository,create,repository,meta,data,meta,data,function,string,repository,factory,type,lookup,throws,exception,string,delegate,type,get,meta,data,settings,if,strings,has,length,delegate,type,false,throw,new,illegal,argument,exception,get,key,must,be,set,repository,factory,factory,type,lookup,apply,delegate,type,return,new,source,only,snapshot,repository,factory,create,new,repository,meta,data,meta,data,name,delegate,type,meta,data,settings,type,lookup
SourceOnlySnapshotRepository -> public static Repository.Factory newRepositoryFactory();1537202470;Returns a new source only repository factory;public static Repository.Factory newRepositoryFactory() {_        return new Repository.Factory() {__            @Override_            public Repository create(RepositoryMetaData metadata) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Repository create(RepositoryMetaData metaData, Function<String, Repository.Factory> typeLookup) throws Exception {_                String delegateType = DELEGATE_TYPE.get(metaData.settings())__                if (Strings.hasLength(delegateType) == false) {_                    throw new IllegalArgumentException(DELEGATE_TYPE.getKey() + " must be set")__                }_                Repository.Factory factory = typeLookup.apply(delegateType)__                return new SourceOnlySnapshotRepository(factory.create(new RepositoryMetaData(metaData.name(),_                    delegateType, metaData.settings()), typeLookup))__            }_        }__    };returns,a,new,source,only,repository,factory;public,static,repository,factory,new,repository,factory,return,new,repository,factory,override,public,repository,create,repository,meta,data,metadata,throw,new,unsupported,operation,exception,override,public,repository,create,repository,meta,data,meta,data,function,string,repository,factory,type,lookup,throws,exception,string,delegate,type,get,meta,data,settings,if,strings,has,length,delegate,type,false,throw,new,illegal,argument,exception,get,key,must,be,set,repository,factory,factory,type,lookup,apply,delegate,type,return,new,source,only,snapshot,repository,factory,create,new,repository,meta,data,meta,data,name,delegate,type,meta,data,settings,type,lookup
SourceOnlySnapshotRepository -> public static Repository.Factory newRepositoryFactory();1539723533;Returns a new source only repository factory;public static Repository.Factory newRepositoryFactory() {_        return new Repository.Factory() {__            @Override_            public Repository create(RepositoryMetaData metadata) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Repository create(RepositoryMetaData metaData, Function<String, Repository.Factory> typeLookup) throws Exception {_                String delegateType = DELEGATE_TYPE.get(metaData.settings())__                if (Strings.hasLength(delegateType) == false) {_                    throw new IllegalArgumentException(DELEGATE_TYPE.getKey() + " must be set")__                }_                Repository.Factory factory = typeLookup.apply(delegateType)__                return new SourceOnlySnapshotRepository(factory.create(new RepositoryMetaData(metaData.name(),_                    delegateType, metaData.settings()), typeLookup))__            }_        }__    };returns,a,new,source,only,repository,factory;public,static,repository,factory,new,repository,factory,return,new,repository,factory,override,public,repository,create,repository,meta,data,metadata,throw,new,unsupported,operation,exception,override,public,repository,create,repository,meta,data,meta,data,function,string,repository,factory,type,lookup,throws,exception,string,delegate,type,get,meta,data,settings,if,strings,has,length,delegate,type,false,throw,new,illegal,argument,exception,get,key,must,be,set,repository,factory,factory,type,lookup,apply,delegate,type,return,new,source,only,snapshot,repository,factory,create,new,repository,meta,data,meta,data,name,delegate,type,meta,data,settings,type,lookup
SourceOnlySnapshotRepository -> public static Repository.Factory newRepositoryFactory();1549395161;Returns a new source only repository factory;public static Repository.Factory newRepositoryFactory() {_        return new Repository.Factory() {__            @Override_            public Repository create(RepositoryMetaData metadata) {_                throw new UnsupportedOperationException()__            }__            @Override_            public Repository create(RepositoryMetaData metaData, Function<String, Repository.Factory> typeLookup) throws Exception {_                String delegateType = DELEGATE_TYPE.get(metaData.settings())__                if (Strings.hasLength(delegateType) == false) {_                    throw new IllegalArgumentException(DELEGATE_TYPE.getKey() + " must be set")__                }_                Repository.Factory factory = typeLookup.apply(delegateType)__                return new SourceOnlySnapshotRepository(factory.create(new RepositoryMetaData(metaData.name(),_                    delegateType, metaData.settings()), typeLookup))__            }_        }__    };returns,a,new,source,only,repository,factory;public,static,repository,factory,new,repository,factory,return,new,repository,factory,override,public,repository,create,repository,meta,data,metadata,throw,new,unsupported,operation,exception,override,public,repository,create,repository,meta,data,meta,data,function,string,repository,factory,type,lookup,throws,exception,string,delegate,type,get,meta,data,settings,if,strings,has,length,delegate,type,false,throw,new,illegal,argument,exception,get,key,must,be,set,repository,factory,factory,type,lookup,apply,delegate,type,return,new,source,only,snapshot,repository,factory,create,new,repository,meta,data,meta,data,name,delegate,type,meta,data,settings,type,lookup
