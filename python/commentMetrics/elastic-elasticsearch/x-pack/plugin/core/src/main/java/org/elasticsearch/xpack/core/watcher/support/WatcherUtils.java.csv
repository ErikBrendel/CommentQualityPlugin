commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;4;;public static Map<String, Object> responseToData(ToXContentObject response, ToXContent.Params params) throws IOException {     return XContentHelper.convertToMap(XContentHelper.toXContent(response, XContentType.JSON, params, false), false, XContentType.JSON).v2(). }
false;public,static;1;5;;public static Map<String, Object> flattenModel(Map<String, Object> map) {     Map<String, Object> result = new HashMap<>().     flattenModel("", map, result).     return result. }
false;private,static;3;38;;private static void flattenModel(String key, Object value, Map<String, Object> result) {     if (value == null) {         result.put(key, null).         return.     }     if (value instanceof Map) {         for (Map.Entry<String, Object> entry : ((Map<String, Object>) value).entrySet()) {             if ("".equals(key)) {                 flattenModel(entry.getKey(), entry.getValue(), result).             } else {                 flattenModel(key + "." + entry.getKey(), entry.getValue(), result).             }         }         return.     }     if (value instanceof Iterable) {         int i = 0.         for (Object item : (Iterable) value) {             flattenModel(key + "." + i++, item, result).         }         return.     }     if (value.getClass().isArray()) {         for (int i = 0. i < Array.getLength(value). i++) {             flattenModel(key + "." + i, Array.get(value, i), result).         }         return.     }     if (value instanceof ZonedDateTime) {         result.put(key, formatDate((ZonedDateTime) value)).         return.     }     if (value instanceof TimeValue) {         result.put(key, String.valueOf(((TimeValue) value).getMillis())).         return.     }     result.put(key, String.valueOf(value)). }
false;public,static;1;3;;public static boolean isValidId(String id) {     return Strings.isEmpty(id) == false && NO_WS_PATTERN.matcher(id).matches(). }
