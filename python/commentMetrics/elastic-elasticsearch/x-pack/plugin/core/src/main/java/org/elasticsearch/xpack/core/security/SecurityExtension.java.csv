# id;timestamp;commentText;codeText;commentWords;codeWords
SecurityExtension -> default AuthenticationFailureHandler getAuthenticationFailureHandler();1524684173;Returns a handler for authentication failures, or null to use the default handler.__Only one installed extension may have an authentication failure handler. If more than_one extension returns a non-null handler, an error is raised.;default AuthenticationFailureHandler getAuthenticationFailureHandler() {_        return null__    };returns,a,handler,for,authentication,failures,or,null,to,use,the,default,handler,only,one,installed,extension,may,have,an,authentication,failure,handler,if,more,than,one,extension,returns,a,non,null,handler,an,error,is,raised;default,authentication,failure,handler,get,authentication,failure,handler,return,null
SecurityExtension -> default AuthenticationFailureHandler getAuthenticationFailureHandler();1539723533;Returns a handler for authentication failures, or null to use the default handler.__Only one installed extension may have an authentication failure handler. If more than_one extension returns a non-null handler, an error is raised.;default AuthenticationFailureHandler getAuthenticationFailureHandler() {_        return null__    };returns,a,handler,for,authentication,failures,or,null,to,use,the,default,handler,only,one,installed,extension,may,have,an,authentication,failure,handler,if,more,than,one,extension,returns,a,non,null,handler,an,error,is,raised;default,authentication,failure,handler,get,authentication,failure,handler,return,null
SecurityExtension -> default AuthenticationFailureHandler getAuthenticationFailureHandler();1541476610;Returns a handler for authentication failures, or null to use the default handler.__Only one installed extension may have an authentication failure handler. If more than_one extension returns a non-null handler, an error is raised.;default AuthenticationFailureHandler getAuthenticationFailureHandler() {_        return null__    };returns,a,handler,for,authentication,failures,or,null,to,use,the,default,handler,only,one,installed,extension,may,have,an,authentication,failure,handler,if,more,than,one,extension,returns,a,non,null,handler,an,error,is,raised;default,authentication,failure,handler,get,authentication,failure,handler,return,null
SecurityExtension -> default AuthenticationFailureHandler getAuthenticationFailureHandler();1549399169;Returns a handler for authentication failures, or null to use the default handler.__Only one installed extension may have an authentication failure handler. If more than_one extension returns a non-null handler, an error is raised.;default AuthenticationFailureHandler getAuthenticationFailureHandler() {_        return null__    };returns,a,handler,for,authentication,failures,or,null,to,use,the,default,handler,only,one,installed,extension,may,have,an,authentication,failure,handler,if,more,than,one,extension,returns,a,non,null,handler,an,error,is,raised;default,authentication,failure,handler,get,authentication,failure,handler,return,null
SecurityExtension -> default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>         getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService);1539723533;Returns an ordered list of role providers that are used to resolve role names_to {@link RoleDescriptor} objects.  Each provider is invoked in order to_resolve any role names not resolved by the reserved or native roles stores.__Each role provider is represented as a {@link BiConsumer} which takes a set_of roles to resolve as the first parameter to consume and an {@link ActionListener}_as the second parameter to consume.  The implementation of the role provider_should be asynchronous if the computation is lengthy or any disk and/or network_I/O is involved.  The implementation is responsible for resolving whatever roles_it can into a set of {@link RoleDescriptor} instances.  If successful, the_implementation must wrap the set of {@link RoleDescriptor} instances in a_{@link RoleRetrievalResult} using {@link RoleRetrievalResult#success(Set)} and then invoke_{@link ActionListener#onResponse(Object)}.  If a failure was encountered, the_implementation should wrap the failure in a {@link RoleRetrievalResult} using_{@link RoleRetrievalResult#failure(Exception)} and then invoke_{@link ActionListener#onResponse(Object)} unless the failure needs to terminate the request,_in which case the implementation should invoke {@link ActionListener#onFailure(Exception)}.__By default, an empty list is returned.__@param settings The configured settings for the node_@param resourceWatcherService Use to watch configuration files for changes;default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>_        getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService) {_        return Collections.emptyList()__    };returns,an,ordered,list,of,role,providers,that,are,used,to,resolve,role,names,to,link,role,descriptor,objects,each,provider,is,invoked,in,order,to,resolve,any,role,names,not,resolved,by,the,reserved,or,native,roles,stores,each,role,provider,is,represented,as,a,link,bi,consumer,which,takes,a,set,of,roles,to,resolve,as,the,first,parameter,to,consume,and,an,link,action,listener,as,the,second,parameter,to,consume,the,implementation,of,the,role,provider,should,be,asynchronous,if,the,computation,is,lengthy,or,any,disk,and,or,network,i,o,is,involved,the,implementation,is,responsible,for,resolving,whatever,roles,it,can,into,a,set,of,link,role,descriptor,instances,if,successful,the,implementation,must,wrap,the,set,of,link,role,descriptor,instances,in,a,link,role,retrieval,result,using,link,role,retrieval,result,success,set,and,then,invoke,link,action,listener,on,response,object,if,a,failure,was,encountered,the,implementation,should,wrap,the,failure,in,a,link,role,retrieval,result,using,link,role,retrieval,result,failure,exception,and,then,invoke,link,action,listener,on,response,object,unless,the,failure,needs,to,terminate,the,request,in,which,case,the,implementation,should,invoke,link,action,listener,on,failure,exception,by,default,an,empty,list,is,returned,param,settings,the,configured,settings,for,the,node,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,list,bi,consumer,set,string,action,listener,role,retrieval,result,get,roles,providers,settings,settings,resource,watcher,service,resource,watcher,service,return,collections,empty,list
SecurityExtension -> default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>         getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService);1541476610;Returns an ordered list of role providers that are used to resolve role names_to {@link RoleDescriptor} objects.  Each provider is invoked in order to_resolve any role names not resolved by the reserved or native roles stores.__Each role provider is represented as a {@link BiConsumer} which takes a set_of roles to resolve as the first parameter to consume and an {@link ActionListener}_as the second parameter to consume.  The implementation of the role provider_should be asynchronous if the computation is lengthy or any disk and/or network_I/O is involved.  The implementation is responsible for resolving whatever roles_it can into a set of {@link RoleDescriptor} instances.  If successful, the_implementation must wrap the set of {@link RoleDescriptor} instances in a_{@link RoleRetrievalResult} using {@link RoleRetrievalResult#success(Set)} and then invoke_{@link ActionListener#onResponse(Object)}.  If a failure was encountered, the_implementation should wrap the failure in a {@link RoleRetrievalResult} using_{@link RoleRetrievalResult#failure(Exception)} and then invoke_{@link ActionListener#onResponse(Object)} unless the failure needs to terminate the request,_in which case the implementation should invoke {@link ActionListener#onFailure(Exception)}.__By default, an empty list is returned.__@param settings The configured settings for the node_@param resourceWatcherService Use to watch configuration files for changes;default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>_        getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService) {_        return Collections.emptyList()__    };returns,an,ordered,list,of,role,providers,that,are,used,to,resolve,role,names,to,link,role,descriptor,objects,each,provider,is,invoked,in,order,to,resolve,any,role,names,not,resolved,by,the,reserved,or,native,roles,stores,each,role,provider,is,represented,as,a,link,bi,consumer,which,takes,a,set,of,roles,to,resolve,as,the,first,parameter,to,consume,and,an,link,action,listener,as,the,second,parameter,to,consume,the,implementation,of,the,role,provider,should,be,asynchronous,if,the,computation,is,lengthy,or,any,disk,and,or,network,i,o,is,involved,the,implementation,is,responsible,for,resolving,whatever,roles,it,can,into,a,set,of,link,role,descriptor,instances,if,successful,the,implementation,must,wrap,the,set,of,link,role,descriptor,instances,in,a,link,role,retrieval,result,using,link,role,retrieval,result,success,set,and,then,invoke,link,action,listener,on,response,object,if,a,failure,was,encountered,the,implementation,should,wrap,the,failure,in,a,link,role,retrieval,result,using,link,role,retrieval,result,failure,exception,and,then,invoke,link,action,listener,on,response,object,unless,the,failure,needs,to,terminate,the,request,in,which,case,the,implementation,should,invoke,link,action,listener,on,failure,exception,by,default,an,empty,list,is,returned,param,settings,the,configured,settings,for,the,node,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,list,bi,consumer,set,string,action,listener,role,retrieval,result,get,roles,providers,settings,settings,resource,watcher,service,resource,watcher,service,return,collections,empty,list
SecurityExtension -> default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>         getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService);1549399169;Returns an ordered list of role providers that are used to resolve role names_to {@link RoleDescriptor} objects.  Each provider is invoked in order to_resolve any role names not resolved by the reserved or native roles stores.__Each role provider is represented as a {@link BiConsumer} which takes a set_of roles to resolve as the first parameter to consume and an {@link ActionListener}_as the second parameter to consume.  The implementation of the role provider_should be asynchronous if the computation is lengthy or any disk and/or network_I/O is involved.  The implementation is responsible for resolving whatever roles_it can into a set of {@link RoleDescriptor} instances.  If successful, the_implementation must wrap the set of {@link RoleDescriptor} instances in a_{@link RoleRetrievalResult} using {@link RoleRetrievalResult#success(Set)} and then invoke_{@link ActionListener#onResponse(Object)}.  If a failure was encountered, the_implementation should wrap the failure in a {@link RoleRetrievalResult} using_{@link RoleRetrievalResult#failure(Exception)} and then invoke_{@link ActionListener#onResponse(Object)} unless the failure needs to terminate the request,_in which case the implementation should invoke {@link ActionListener#onFailure(Exception)}.__By default, an empty list is returned.__@param settings The configured settings for the node_@param resourceWatcherService Use to watch configuration files for changes;default List<BiConsumer<Set<String>, ActionListener<RoleRetrievalResult>>>_        getRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService) {_        return Collections.emptyList()__    };returns,an,ordered,list,of,role,providers,that,are,used,to,resolve,role,names,to,link,role,descriptor,objects,each,provider,is,invoked,in,order,to,resolve,any,role,names,not,resolved,by,the,reserved,or,native,roles,stores,each,role,provider,is,represented,as,a,link,bi,consumer,which,takes,a,set,of,roles,to,resolve,as,the,first,parameter,to,consume,and,an,link,action,listener,as,the,second,parameter,to,consume,the,implementation,of,the,role,provider,should,be,asynchronous,if,the,computation,is,lengthy,or,any,disk,and,or,network,i,o,is,involved,the,implementation,is,responsible,for,resolving,whatever,roles,it,can,into,a,set,of,link,role,descriptor,instances,if,successful,the,implementation,must,wrap,the,set,of,link,role,descriptor,instances,in,a,link,role,retrieval,result,using,link,role,retrieval,result,success,set,and,then,invoke,link,action,listener,on,response,object,if,a,failure,was,encountered,the,implementation,should,wrap,the,failure,in,a,link,role,retrieval,result,using,link,role,retrieval,result,failure,exception,and,then,invoke,link,action,listener,on,response,object,unless,the,failure,needs,to,terminate,the,request,in,which,case,the,implementation,should,invoke,link,action,listener,on,failure,exception,by,default,an,empty,list,is,returned,param,settings,the,configured,settings,for,the,node,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,list,bi,consumer,set,string,action,listener,role,retrieval,result,get,roles,providers,settings,settings,resource,watcher,service,resource,watcher,service,return,collections,empty,list
SecurityExtension -> default Map<String, Set<Setting<?>>> getRealmSettings();1524684173;Returns the set of {@link Setting settings} that may be configured for the each type of realm.__Each <em>setting key</em> must be unqualified and is in the same format as will be provided via {@link RealmConfig#settings()}._If a given realm-type is not present in the returned map, then it will be treated as if it supported <em>all</em> possible settings.__The life-cycle of an extension dictates that this method will be called before {@link #getRealms(ResourceWatcherService)};default Map<String, Set<Setting<?>>> getRealmSettings() { return Collections.emptyMap()_ };returns,the,set,of,link,setting,settings,that,may,be,configured,for,the,each,type,of,realm,each,em,setting,key,em,must,be,unqualified,and,is,in,the,same,format,as,will,be,provided,via,link,realm,config,settings,if,a,given,realm,type,is,not,present,in,the,returned,map,then,it,will,be,treated,as,if,it,supported,em,all,em,possible,settings,the,life,cycle,of,an,extension,dictates,that,this,method,will,be,called,before,link,get,realms,resource,watcher,service;default,map,string,set,setting,get,realm,settings,return,collections,empty,map
SecurityExtension -> default Map<String, Set<Setting<?>>> getRealmSettings();1539723533;Returns the set of {@link Setting settings} that may be configured for the each type of realm.__Each <em>setting key</em> must be unqualified and is in the same format as will be provided via {@link RealmConfig#settings()}._If a given realm-type is not present in the returned map, then it will be treated as if it supported <em>all</em> possible settings.__The life-cycle of an extension dictates that this method will be called before {@link #getRealms(ResourceWatcherService)};default Map<String, Set<Setting<?>>> getRealmSettings() { return Collections.emptyMap()_ };returns,the,set,of,link,setting,settings,that,may,be,configured,for,the,each,type,of,realm,each,em,setting,key,em,must,be,unqualified,and,is,in,the,same,format,as,will,be,provided,via,link,realm,config,settings,if,a,given,realm,type,is,not,present,in,the,returned,map,then,it,will,be,treated,as,if,it,supported,em,all,em,possible,settings,the,life,cycle,of,an,extension,dictates,that,this,method,will,be,called,before,link,get,realms,resource,watcher,service;default,map,string,set,setting,get,realm,settings,return,collections,empty,map
SecurityExtension -> static List<SecurityExtension> loadExtensions(ClassLoader loader);1524684173;Loads the XPackSecurityExtensions from the given class loader;static List<SecurityExtension> loadExtensions(ClassLoader loader) {_        SPIClassIterator<SecurityExtension> iterator = SPIClassIterator.get(SecurityExtension.class, loader)__        List<SecurityExtension> extensions = new ArrayList<>()__        while (iterator.hasNext()) {_            final Class<? extends SecurityExtension> c = iterator.next()__            try {_                extensions.add(c.getConstructor().newInstance())__            } catch (Exception e) {_                throw new ServiceConfigurationError("failed to load security extension [" + c.getName() + "]", e)__            }_        }_        return extensions__    };loads,the,xpack,security,extensions,from,the,given,class,loader;static,list,security,extension,load,extensions,class,loader,loader,spiclass,iterator,security,extension,iterator,spiclass,iterator,get,security,extension,class,loader,list,security,extension,extensions,new,array,list,while,iterator,has,next,final,class,extends,security,extension,c,iterator,next,try,extensions,add,c,get,constructor,new,instance,catch,exception,e,throw,new,service,configuration,error,failed,to,load,security,extension,c,get,name,e,return,extensions
SecurityExtension -> static List<SecurityExtension> loadExtensions(ClassLoader loader);1539723533;Loads the XPackSecurityExtensions from the given class loader;static List<SecurityExtension> loadExtensions(ClassLoader loader) {_        SPIClassIterator<SecurityExtension> iterator = SPIClassIterator.get(SecurityExtension.class, loader)__        List<SecurityExtension> extensions = new ArrayList<>()__        while (iterator.hasNext()) {_            final Class<? extends SecurityExtension> c = iterator.next()__            try {_                extensions.add(c.getConstructor().newInstance())__            } catch (Exception e) {_                throw new ServiceConfigurationError("failed to load security extension [" + c.getName() + "]", e)__            }_        }_        return extensions__    };loads,the,xpack,security,extensions,from,the,given,class,loader;static,list,security,extension,load,extensions,class,loader,loader,spiclass,iterator,security,extension,iterator,spiclass,iterator,get,security,extension,class,loader,list,security,extension,extensions,new,array,list,while,iterator,has,next,final,class,extends,security,extension,c,iterator,next,try,extensions,add,c,get,constructor,new,instance,catch,exception,e,throw,new,service,configuration,error,failed,to,load,security,extension,c,get,name,e,return,extensions
SecurityExtension -> static List<SecurityExtension> loadExtensions(ClassLoader loader);1541476610;Loads the XPackSecurityExtensions from the given class loader;static List<SecurityExtension> loadExtensions(ClassLoader loader) {_        SPIClassIterator<SecurityExtension> iterator = SPIClassIterator.get(SecurityExtension.class, loader)__        List<SecurityExtension> extensions = new ArrayList<>()__        while (iterator.hasNext()) {_            final Class<? extends SecurityExtension> c = iterator.next()__            try {_                extensions.add(c.getConstructor().newInstance())__            } catch (Exception e) {_                throw new ServiceConfigurationError("failed to load security extension [" + c.getName() + "]", e)__            }_        }_        return extensions__    };loads,the,xpack,security,extensions,from,the,given,class,loader;static,list,security,extension,load,extensions,class,loader,loader,spiclass,iterator,security,extension,iterator,spiclass,iterator,get,security,extension,class,loader,list,security,extension,extensions,new,array,list,while,iterator,has,next,final,class,extends,security,extension,c,iterator,next,try,extensions,add,c,get,constructor,new,instance,catch,exception,e,throw,new,service,configuration,error,failed,to,load,security,extension,c,get,name,e,return,extensions
SecurityExtension -> static List<SecurityExtension> loadExtensions(ClassLoader loader);1549399169;Loads the XPackSecurityExtensions from the given class loader;static List<SecurityExtension> loadExtensions(ClassLoader loader) {_        SPIClassIterator<SecurityExtension> iterator = SPIClassIterator.get(SecurityExtension.class, loader)__        List<SecurityExtension> extensions = new ArrayList<>()__        while (iterator.hasNext()) {_            final Class<? extends SecurityExtension> c = iterator.next()__            try {_                extensions.add(c.getConstructor().newInstance())__            } catch (Exception e) {_                throw new ServiceConfigurationError("failed to load security extension [" + c.getName() + "]", e)__            }_        }_        return extensions__    };loads,the,xpack,security,extensions,from,the,given,class,loader;static,list,security,extension,load,extensions,class,loader,loader,spiclass,iterator,security,extension,iterator,spiclass,iterator,get,security,extension,class,loader,list,security,extension,extensions,new,array,list,while,iterator,has,next,final,class,extends,security,extension,c,iterator,next,try,extensions,add,c,get,constructor,new,instance,catch,exception,e,throw,new,service,configuration,error,failed,to,load,security,extension,c,get,name,e,return,extensions
SecurityExtension -> default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService);1524684173;Returns authentication realm implementations added by this extension.__The key of the returned {@link Map} is the type name of the realm, and the value_is a {@link Realm.Factory} which will construct_that realm for use in authentication when that realm type is configured.__@param resourceWatcherService Use to watch configuration files for changes;default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService) {_        return Collections.emptyMap()__    };returns,authentication,realm,implementations,added,by,this,extension,the,key,of,the,returned,link,map,is,the,type,name,of,the,realm,and,the,value,is,a,link,realm,factory,which,will,construct,that,realm,for,use,in,authentication,when,that,realm,type,is,configured,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,map,string,realm,factory,get,realms,resource,watcher,service,resource,watcher,service,return,collections,empty,map
SecurityExtension -> default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService);1539723533;Returns authentication realm implementations added by this extension.__The key of the returned {@link Map} is the type name of the realm, and the value_is a {@link Realm.Factory} which will construct_that realm for use in authentication when that realm type is configured.__@param resourceWatcherService Use to watch configuration files for changes;default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService) {_        return Collections.emptyMap()__    };returns,authentication,realm,implementations,added,by,this,extension,the,key,of,the,returned,link,map,is,the,type,name,of,the,realm,and,the,value,is,a,link,realm,factory,which,will,construct,that,realm,for,use,in,authentication,when,that,realm,type,is,configured,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,map,string,realm,factory,get,realms,resource,watcher,service,resource,watcher,service,return,collections,empty,map
SecurityExtension -> default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService);1541476610;Returns authentication realm implementations added by this extension.__The key of the returned {@link Map} is the type name of the realm, and the value_is a {@link Realm.Factory} which will construct_that realm for use in authentication when that realm type is configured.__@param resourceWatcherService Use to watch configuration files for changes;default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService) {_        return Collections.emptyMap()__    };returns,authentication,realm,implementations,added,by,this,extension,the,key,of,the,returned,link,map,is,the,type,name,of,the,realm,and,the,value,is,a,link,realm,factory,which,will,construct,that,realm,for,use,in,authentication,when,that,realm,type,is,configured,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,map,string,realm,factory,get,realms,resource,watcher,service,resource,watcher,service,return,collections,empty,map
SecurityExtension -> default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService);1549399169;Returns authentication realm implementations added by this extension.__The key of the returned {@link Map} is the type name of the realm, and the value_is a {@link Realm.Factory} which will construct_that realm for use in authentication when that realm type is configured.__@param resourceWatcherService Use to watch configuration files for changes;default Map<String, Realm.Factory> getRealms(ResourceWatcherService resourceWatcherService) {_        return Collections.emptyMap()__    };returns,authentication,realm,implementations,added,by,this,extension,the,key,of,the,returned,link,map,is,the,type,name,of,the,realm,and,the,value,is,a,link,realm,factory,which,will,construct,that,realm,for,use,in,authentication,when,that,realm,type,is,configured,param,resource,watcher,service,use,to,watch,configuration,files,for,changes;default,map,string,realm,factory,get,realms,resource,watcher,service,resource,watcher,service,return,collections,empty,map
