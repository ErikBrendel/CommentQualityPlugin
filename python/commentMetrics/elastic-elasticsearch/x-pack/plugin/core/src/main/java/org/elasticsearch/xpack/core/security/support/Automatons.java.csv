# id;timestamp;commentText;codeText;commentWords;codeWords
Automatons -> public static Automaton patterns(Collection<String> patterns);1524684173;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(Collection<String> patterns) {_        if (patterns.isEmpty()) {_            return EMPTY__        }_        Automaton automaton = null__        for (String pattern : patterns) {_            final Automaton patternAutomaton = minimize(pattern(pattern), DEFAULT_MAX_DETERMINIZED_STATES)__            automaton = automaton == null ? patternAutomaton : unionAndMinimize(Arrays.asList(automaton, patternAutomaton))__        }_        _        return automaton__    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,collection,string,patterns,if,patterns,is,empty,return,empty,automaton,automaton,null,for,string,pattern,patterns,final,automaton,pattern,automaton,minimize,pattern,pattern,automaton,automaton,null,pattern,automaton,union,and,minimize,arrays,as,list,automaton,pattern,automaton,return,automaton
Automatons -> public static Automaton patterns(Collection<String> patterns);1532511554;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(Collection<String> patterns) {_        if (patterns.isEmpty()) {_            return EMPTY__        }_        List<Automaton> automata = new ArrayList<>(patterns.size())__        for (String pattern : patterns) {_            final Automaton patternAutomaton = pattern(pattern)__            automata.add(patternAutomaton)__        }_        return unionAndMinimize(automata)__    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,collection,string,patterns,if,patterns,is,empty,return,empty,list,automaton,automata,new,array,list,patterns,size,for,string,pattern,patterns,final,automaton,pattern,automaton,pattern,pattern,automata,add,pattern,automaton,return,union,and,minimize,automata
Automatons -> public static Automaton patterns(Collection<String> patterns);1539615817;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(Collection<String> patterns) {_        if (patterns.isEmpty()) {_            return EMPTY__        }_        if (cache == null) {_            return buildAutomaton(patterns)__        } else {_            try {_                return cache.computeIfAbsent(Sets.newHashSet(patterns), ignore -> buildAutomaton(patterns))__            } catch (ExecutionException e) {_                throw unwrapCacheException(e)__            }_        }_    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,collection,string,patterns,if,patterns,is,empty,return,empty,if,cache,null,return,build,automaton,patterns,else,try,return,cache,compute,if,absent,sets,new,hash,set,patterns,ignore,build,automaton,patterns,catch,execution,exception,e,throw,unwrap,cache,exception,e
Automatons -> public static Automaton patterns(Collection<String> patterns);1549336917;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(Collection<String> patterns) {_        if (patterns.isEmpty()) {_            return EMPTY__        }_        if (cache == null) {_            return buildAutomaton(patterns)__        } else {_            try {_                return cache.computeIfAbsent(Sets.newHashSet(patterns), ignore -> buildAutomaton(patterns))__            } catch (ExecutionException e) {_                throw unwrapCacheException(e)__            }_        }_    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,collection,string,patterns,if,patterns,is,empty,return,empty,if,cache,null,return,build,automaton,patterns,else,try,return,cache,compute,if,absent,sets,new,hash,set,patterns,ignore,build,automaton,patterns,catch,execution,exception,e,throw,unwrap,cache,exception,e
Automatons -> static Automaton pattern(String pattern);1524684173;Builds and returns an automaton that represents the given pattern.;static Automaton pattern(String pattern) {_        if (pattern.startsWith("/")) { _            if (pattern.length() == 1 || !pattern.endsWith("/")) {_                throw new IllegalArgumentException("invalid pattern [" + pattern + "]. patterns starting with '/' " +_                        "indicate regular expression pattern and therefore must also end with '/'." +_                        " other patterns (those that do not start with '/') will be treated as simple wildcard patterns")__            }_            String regex = pattern.substring(1, pattern.length() - 1)__            return new RegExp(regex).toAutomaton()__        } else if (pattern.equals("*")) {_            return MATCH_ALL__        } else {_            return wildcard(pattern)__        }_    };builds,and,returns,an,automaton,that,represents,the,given,pattern;static,automaton,pattern,string,pattern,if,pattern,starts,with,if,pattern,length,1,pattern,ends,with,throw,new,illegal,argument,exception,invalid,pattern,pattern,patterns,starting,with,indicate,regular,expression,pattern,and,therefore,must,also,end,with,other,patterns,those,that,do,not,start,with,will,be,treated,as,simple,wildcard,patterns,string,regex,pattern,substring,1,pattern,length,1,return,new,reg,exp,regex,to,automaton,else,if,pattern,equals,return,else,return,wildcard,pattern
Automatons -> static Automaton pattern(String pattern);1532511554;Builds and returns an automaton that represents the given pattern.;static Automaton pattern(String pattern) {_        if (pattern.startsWith("/")) { _            if (pattern.length() == 1 || !pattern.endsWith("/")) {_                throw new IllegalArgumentException("invalid pattern [" + pattern + "]. patterns starting with '/' " +_                        "indicate regular expression pattern and therefore must also end with '/'." +_                        " other patterns (those that do not start with '/') will be treated as simple wildcard patterns")__            }_            String regex = pattern.substring(1, pattern.length() - 1)__            return new RegExp(regex).toAutomaton()__        } else if (pattern.equals("*")) {_            return MATCH_ALL__        } else {_            return wildcard(pattern)__        }_    };builds,and,returns,an,automaton,that,represents,the,given,pattern;static,automaton,pattern,string,pattern,if,pattern,starts,with,if,pattern,length,1,pattern,ends,with,throw,new,illegal,argument,exception,invalid,pattern,pattern,patterns,starting,with,indicate,regular,expression,pattern,and,therefore,must,also,end,with,other,patterns,those,that,do,not,start,with,will,be,treated,as,simple,wildcard,patterns,string,regex,pattern,substring,1,pattern,length,1,return,new,reg,exp,regex,to,automaton,else,if,pattern,equals,return,else,return,wildcard,pattern
Automatons -> static Automaton pattern(String pattern);1539615817;Builds and returns an automaton that represents the given pattern.;static Automaton pattern(String pattern) {_        if (cache == null) {_            return buildAutomaton(pattern)__        } else {_            try {_                return cache.computeIfAbsent(pattern, ignore -> buildAutomaton(pattern))__            } catch (ExecutionException e) {_                throw unwrapCacheException(e)__            }_        }_    };builds,and,returns,an,automaton,that,represents,the,given,pattern;static,automaton,pattern,string,pattern,if,cache,null,return,build,automaton,pattern,else,try,return,cache,compute,if,absent,pattern,ignore,build,automaton,pattern,catch,execution,exception,e,throw,unwrap,cache,exception,e
Automatons -> static Automaton pattern(String pattern);1549336917;Builds and returns an automaton that represents the given pattern.;static Automaton pattern(String pattern) {_        if (cache == null) {_            return buildAutomaton(pattern)__        } else {_            try {_                return cache.computeIfAbsent(pattern, ignore -> buildAutomaton(pattern))__            } catch (ExecutionException e) {_                throw unwrapCacheException(e)__            }_        }_    };builds,and,returns,an,automaton,that,represents,the,given,pattern;static,automaton,pattern,string,pattern,if,cache,null,return,build,automaton,pattern,else,try,return,cache,compute,if,absent,pattern,ignore,build,automaton,pattern,catch,execution,exception,e,throw,unwrap,cache,exception,e
Automatons -> public static Automaton patterns(String... patterns);1524684173;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(String... patterns) {_        return patterns(Arrays.asList(patterns))__    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,string,patterns,return,patterns,arrays,as,list,patterns
Automatons -> public static Automaton patterns(String... patterns);1532511554;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(String... patterns) {_        return patterns(Arrays.asList(patterns))__    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,string,patterns,return,patterns,arrays,as,list,patterns
Automatons -> public static Automaton patterns(String... patterns);1539615817;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(String... patterns) {_        return patterns(Arrays.asList(patterns))__    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,string,patterns,return,patterns,arrays,as,list,patterns
Automatons -> public static Automaton patterns(String... patterns);1549336917;Builds and returns an automaton that will represent the union of all the given patterns.;public static Automaton patterns(String... patterns) {_        return patterns(Arrays.asList(patterns))__    };builds,and,returns,an,automaton,that,will,represent,the,union,of,all,the,given,patterns;public,static,automaton,patterns,string,patterns,return,patterns,arrays,as,list,patterns
Automatons -> @SuppressWarnings("fallthrough")      static Automaton wildcard(String text);1524684173;Builds and returns an automaton that represents the given pattern.;@SuppressWarnings("fallthrough") _    static Automaton wildcard(String text) {_        List<Automaton> automata = new ArrayList<>()__        for (int i = 0_ i < text.length()_) {_            final char c = text.charAt(i)__            int length = 1__            switch(c) {_                case WILDCARD_STRING:_                    automata.add(Automata.makeAnyString())__                    break__                case WILDCARD_CHAR:_                    automata.add(Automata.makeAnyChar())__                    break__                case WILDCARD_ESCAPE:_                    _                    if (i + length < text.length()) {_                        final char nextChar = text.charAt(i + length)__                        length += 1__                        automata.add(Automata.makeChar(nextChar))__                        break__                    } _                default:_                    automata.add(Automata.makeChar(c))__            }_            i += length__        }_        return concatenate(automata)__    };builds,and,returns,an,automaton,that,represents,the,given,pattern;suppress,warnings,fallthrough,static,automaton,wildcard,string,text,list,automaton,automata,new,array,list,for,int,i,0,i,text,length,final,char,c,text,char,at,i,int,length,1,switch,c,case,automata,add,automata,make,any,string,break,case,automata,add,automata,make,any,char,break,case,if,i,length,text,length,final,char,next,char,text,char,at,i,length,length,1,automata,add,automata,make,char,next,char,break,default,automata,add,automata,make,char,c,i,length,return,concatenate,automata
Automatons -> @SuppressWarnings("fallthrough")      static Automaton wildcard(String text);1532511554;Builds and returns an automaton that represents the given pattern.;@SuppressWarnings("fallthrough") _    static Automaton wildcard(String text) {_        List<Automaton> automata = new ArrayList<>()__        for (int i = 0_ i < text.length()_) {_            final char c = text.charAt(i)__            int length = 1__            switch(c) {_                case WILDCARD_STRING:_                    automata.add(Automata.makeAnyString())__                    break__                case WILDCARD_CHAR:_                    automata.add(Automata.makeAnyChar())__                    break__                case WILDCARD_ESCAPE:_                    _                    if (i + length < text.length()) {_                        final char nextChar = text.charAt(i + length)__                        length += 1__                        automata.add(Automata.makeChar(nextChar))__                        break__                    } _                default:_                    automata.add(Automata.makeChar(c))__            }_            i += length__        }_        return concatenate(automata)__    };builds,and,returns,an,automaton,that,represents,the,given,pattern;suppress,warnings,fallthrough,static,automaton,wildcard,string,text,list,automaton,automata,new,array,list,for,int,i,0,i,text,length,final,char,c,text,char,at,i,int,length,1,switch,c,case,automata,add,automata,make,any,string,break,case,automata,add,automata,make,any,char,break,case,if,i,length,text,length,final,char,next,char,text,char,at,i,length,length,1,automata,add,automata,make,char,next,char,break,default,automata,add,automata,make,char,c,i,length,return,concatenate,automata
Automatons -> @SuppressWarnings("fallthrough")      static Automaton wildcard(String text);1539615817;Builds and returns an automaton that represents the given pattern.;@SuppressWarnings("fallthrough") _    static Automaton wildcard(String text) {_        List<Automaton> automata = new ArrayList<>()__        for (int i = 0_ i < text.length()_ ) {_            final char c = text.charAt(i)__            int length = 1__            switch (c) {_                case WILDCARD_STRING:_                    automata.add(Automata.makeAnyString())__                    break__                case WILDCARD_CHAR:_                    automata.add(Automata.makeAnyChar())__                    break__                case WILDCARD_ESCAPE:_                    _                    if (i + length < text.length()) {_                        final char nextChar = text.charAt(i + length)__                        length += 1__                        automata.add(Automata.makeChar(nextChar))__                        break__                    } _                default:_                    automata.add(Automata.makeChar(c))__            }_            i += length__        }_        return concatenate(automata)__    };builds,and,returns,an,automaton,that,represents,the,given,pattern;suppress,warnings,fallthrough,static,automaton,wildcard,string,text,list,automaton,automata,new,array,list,for,int,i,0,i,text,length,final,char,c,text,char,at,i,int,length,1,switch,c,case,automata,add,automata,make,any,string,break,case,automata,add,automata,make,any,char,break,case,if,i,length,text,length,final,char,next,char,text,char,at,i,length,length,1,automata,add,automata,make,char,next,char,break,default,automata,add,automata,make,char,c,i,length,return,concatenate,automata
Automatons -> @SuppressWarnings("fallthrough")      static Automaton wildcard(String text);1549336917;Builds and returns an automaton that represents the given pattern.;@SuppressWarnings("fallthrough") _    static Automaton wildcard(String text) {_        List<Automaton> automata = new ArrayList<>()__        for (int i = 0_ i < text.length()_ ) {_            final char c = text.charAt(i)__            int length = 1__            switch (c) {_                case WILDCARD_STRING:_                    automata.add(Automata.makeAnyString())__                    break__                case WILDCARD_CHAR:_                    automata.add(Automata.makeAnyChar())__                    break__                case WILDCARD_ESCAPE:_                    _                    if (i + length < text.length()) {_                        final char nextChar = text.charAt(i + length)__                        length += 1__                        automata.add(Automata.makeChar(nextChar))__                        break__                    } _                default:_                    automata.add(Automata.makeChar(c))__            }_            i += length__        }_        return concatenate(automata)__    };builds,and,returns,an,automaton,that,represents,the,given,pattern;suppress,warnings,fallthrough,static,automaton,wildcard,string,text,list,automaton,automata,new,array,list,for,int,i,0,i,text,length,final,char,c,text,char,at,i,int,length,1,switch,c,case,automata,add,automata,make,any,string,break,case,automata,add,automata,make,any,char,break,case,if,i,length,text,length,final,char,next,char,text,char,at,i,length,length,1,automata,add,automata,make,char,next,char,break,default,automata,add,automata,make,char,c,i,length,return,concatenate,automata
