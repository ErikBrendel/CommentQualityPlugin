commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getName() {     return "get_license". }
false;public;2;16;;@Override public RestResponse buildResponse(GetLicenseResponse response, XContentBuilder builder) throws Exception {     // Default to pretty printing, but allow ?pretty=false to disable     if (!request.hasParam("pretty")) {         builder.prettyPrint().lfAtEnd().     }     boolean hasLicense = response.license() != null.     builder.startObject().     if (hasLicense) {         builder.startObject("license").         response.license().toInnerXContent(builder, params).         builder.endObject().     }     builder.endObject().     return new BytesRestResponse(hasLicense ? OK : NOT_FOUND, builder). }
true;public;2;28;/**  * There will be only one license displayed per feature, the selected license will have the latest expiry_date  * out of all other licenses for the feature.  * <p>  * The licenses are sorted by latest issue_date  */ ;/**  * There will be only one license displayed per feature, the selected license will have the latest expiry_date  * out of all other licenses for the feature.  * <p>  * The licenses are sorted by latest issue_date  */ @Override public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException {     final Map<String, String> overrideParams = new HashMap<>(2).     overrideParams.put(License.REST_VIEW_MODE, "true").     overrideParams.put(License.LICENSE_VERSION_MODE, String.valueOf(License.VERSION_CURRENT)).     final ToXContent.Params params = new ToXContent.DelegatingMapParams(overrideParams, request).     GetLicenseRequest getLicenseRequest = new GetLicenseRequest().     getLicenseRequest.local(request.paramAsBoolean("local", getLicenseRequest.local())).     return channel -> client.es().admin().cluster().execute(GetLicenseAction.INSTANCE, getLicenseRequest, new RestBuilderListener<GetLicenseResponse>(channel) {          @Override         public RestResponse buildResponse(GetLicenseResponse response, XContentBuilder builder) throws Exception {             // Default to pretty printing, but allow ?pretty=false to disable             if (!request.hasParam("pretty")) {                 builder.prettyPrint().lfAtEnd().             }             boolean hasLicense = response.license() != null.             builder.startObject().             if (hasLicense) {                 builder.startObject("license").                 response.license().toInnerXContent(builder, params).                 builder.endObject().             }             builder.endObject().             return new BytesRestResponse(hasLicense ? OK : NOT_FOUND, builder).         }     }). }
