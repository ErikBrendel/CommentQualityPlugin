# id;timestamp;commentText;codeText;commentWords;codeWords
RestGetLicenseAction -> @Override     public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException;1524684173;There will be only one license displayed per feature, the selected license will have the latest expiry_date_out of all other licenses for the feature._<p>_The licenses are sorted by latest issue_date;@Override_    public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException {_        final Map<String, String> overrideParams = new HashMap<>(2)__        overrideParams.put(License.REST_VIEW_MODE, "true")__        overrideParams.put(License.LICENSE_VERSION_MODE, String.valueOf(License.VERSION_CURRENT))__        final ToXContent.Params params = new ToXContent.DelegatingMapParams(overrideParams, request)__        GetLicenseRequest getLicenseRequest = new GetLicenseRequest()__        getLicenseRequest.local(request.paramAsBoolean("local", getLicenseRequest.local()))__        return channel -> client.es().admin().cluster().execute(GetLicenseAction.INSTANCE, getLicenseRequest,_                new RestBuilderListener<GetLicenseResponse>(channel) {_                    @Override_                    public RestResponse buildResponse(GetLicenseResponse response, XContentBuilder builder) throws Exception {_                        _                        if (!request.hasParam("pretty")) {_                            builder.prettyPrint().lfAtEnd()__                        }_                        boolean hasLicense = response.license() != null__                        builder.startObject()__                        if (hasLicense) {_                            builder.startObject("license")__                            response.license().toInnerXContent(builder, params)__                            builder.endObject()__                        }_                        builder.endObject()__                        return new BytesRestResponse(hasLicense ? OK : NOT_FOUND, builder)__                    }_                })__    };there,will,be,only,one,license,displayed,per,feature,the,selected,license,will,have,the,latest,out,of,all,other,licenses,for,the,feature,p,the,licenses,are,sorted,by,latest;override,public,rest,channel,consumer,do,prepare,request,final,rest,request,request,final,xpack,client,client,throws,ioexception,final,map,string,string,override,params,new,hash,map,2,override,params,put,license,true,override,params,put,license,string,value,of,license,final,to,xcontent,params,params,new,to,xcontent,delegating,map,params,override,params,request,get,license,request,get,license,request,new,get,license,request,get,license,request,local,request,param,as,boolean,local,get,license,request,local,return,channel,client,es,admin,cluster,execute,get,license,action,instance,get,license,request,new,rest,builder,listener,get,license,response,channel,override,public,rest,response,build,response,get,license,response,response,xcontent,builder,builder,throws,exception,if,request,has,param,pretty,builder,pretty,print,lf,at,end,boolean,has,license,response,license,null,builder,start,object,if,has,license,builder,start,object,license,response,license,to,inner,xcontent,builder,params,builder,end,object,builder,end,object,return,new,bytes,rest,response,has,license,ok,builder
RestGetLicenseAction -> @Override     public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException;1533641732;There will be only one license displayed per feature, the selected license will have the latest expiry_date_out of all other licenses for the feature._<p>_The licenses are sorted by latest issue_date;@Override_    public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException {_        final Map<String, String> overrideParams = new HashMap<>(2)__        overrideParams.put(License.REST_VIEW_MODE, "true")__        overrideParams.put(License.LICENSE_VERSION_MODE, String.valueOf(License.VERSION_CURRENT))__        final ToXContent.Params params = new ToXContent.DelegatingMapParams(overrideParams, request)__        GetLicenseRequest getLicenseRequest = new GetLicenseRequest()__        getLicenseRequest.local(request.paramAsBoolean("local", getLicenseRequest.local()))__        return channel -> client.es().admin().cluster().execute(GetLicenseAction.INSTANCE, getLicenseRequest,_                new RestBuilderListener<GetLicenseResponse>(channel) {_                    @Override_                    public RestResponse buildResponse(GetLicenseResponse response, XContentBuilder builder) throws Exception {_                        _                        if (!request.hasParam("pretty")) {_                            builder.prettyPrint().lfAtEnd()__                        }_                        boolean hasLicense = response.license() != null__                        builder.startObject()__                        if (hasLicense) {_                            builder.startObject("license")__                            response.license().toInnerXContent(builder, params)__                            builder.endObject()__                        }_                        builder.endObject()__                        return new BytesRestResponse(hasLicense ? OK : NOT_FOUND, builder)__                    }_                })__    };there,will,be,only,one,license,displayed,per,feature,the,selected,license,will,have,the,latest,out,of,all,other,licenses,for,the,feature,p,the,licenses,are,sorted,by,latest;override,public,rest,channel,consumer,do,prepare,request,final,rest,request,request,final,xpack,client,client,throws,ioexception,final,map,string,string,override,params,new,hash,map,2,override,params,put,license,true,override,params,put,license,string,value,of,license,final,to,xcontent,params,params,new,to,xcontent,delegating,map,params,override,params,request,get,license,request,get,license,request,new,get,license,request,get,license,request,local,request,param,as,boolean,local,get,license,request,local,return,channel,client,es,admin,cluster,execute,get,license,action,instance,get,license,request,new,rest,builder,listener,get,license,response,channel,override,public,rest,response,build,response,get,license,response,response,xcontent,builder,builder,throws,exception,if,request,has,param,pretty,builder,pretty,print,lf,at,end,boolean,has,license,response,license,null,builder,start,object,if,has,license,builder,start,object,license,response,license,to,inner,xcontent,builder,params,builder,end,object,builder,end,object,return,new,bytes,rest,response,has,license,ok,builder
RestGetLicenseAction -> @Override     public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException;1543411475;There will be only one license displayed per feature, the selected license will have the latest expiry_date_out of all other licenses for the feature._<p>_The licenses are sorted by latest issue_date;@Override_    public RestChannelConsumer doPrepareRequest(final RestRequest request, final XPackClient client) throws IOException {_        final Map<String, String> overrideParams = new HashMap<>(2)__        overrideParams.put(License.REST_VIEW_MODE, "true")__        overrideParams.put(License.LICENSE_VERSION_MODE, String.valueOf(License.VERSION_CURRENT))__        final ToXContent.Params params = new ToXContent.DelegatingMapParams(overrideParams, request)__        GetLicenseRequest getLicenseRequest = new GetLicenseRequest()__        getLicenseRequest.local(request.paramAsBoolean("local", getLicenseRequest.local()))__        return channel -> client.es().admin().cluster().execute(GetLicenseAction.INSTANCE, getLicenseRequest,_                new RestBuilderListener<GetLicenseResponse>(channel) {_                    @Override_                    public RestResponse buildResponse(GetLicenseResponse response, XContentBuilder builder) throws Exception {_                        _                        if (!request.hasParam("pretty")) {_                            builder.prettyPrint().lfAtEnd()__                        }_                        boolean hasLicense = response.license() != null__                        builder.startObject()__                        if (hasLicense) {_                            builder.startObject("license")__                            response.license().toInnerXContent(builder, params)__                            builder.endObject()__                        }_                        builder.endObject()__                        return new BytesRestResponse(hasLicense ? OK : NOT_FOUND, builder)__                    }_                })__    };there,will,be,only,one,license,displayed,per,feature,the,selected,license,will,have,the,latest,out,of,all,other,licenses,for,the,feature,p,the,licenses,are,sorted,by,latest;override,public,rest,channel,consumer,do,prepare,request,final,rest,request,request,final,xpack,client,client,throws,ioexception,final,map,string,string,override,params,new,hash,map,2,override,params,put,license,true,override,params,put,license,string,value,of,license,final,to,xcontent,params,params,new,to,xcontent,delegating,map,params,override,params,request,get,license,request,get,license,request,new,get,license,request,get,license,request,local,request,param,as,boolean,local,get,license,request,local,return,channel,client,es,admin,cluster,execute,get,license,action,instance,get,license,request,new,rest,builder,listener,get,license,response,channel,override,public,rest,response,build,response,get,license,response,response,xcontent,builder,builder,throws,exception,if,request,has,param,pretty,builder,pretty,print,lf,at,end,boolean,has,license,response,license,null,builder,start,object,if,has,license,builder,start,object,license,response,license,to,inner,xcontent,builder,params,builder,end,object,builder,end,object,return,new,bytes,rest,response,has,license,ok,builder
