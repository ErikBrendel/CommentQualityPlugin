commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static FilterType fromString(String value) {     return valueOf(value.toUpperCase(Locale.ROOT)). }
false;public;0;4;;@Override public String toString() {     return name().toLowerCase(Locale.ROOT). }
false;private,static;1;14;;private static ConstructingObjectParser<FilterRef, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<FilterRef, Void> parser = new ConstructingObjectParser<>(FILTER_REF_FIELD.getPreferredName(), ignoreUnknownFields, a -> new FilterRef((String) a[0], (FilterType) a[1])).     parser.declareString(ConstructingObjectParser.constructorArg(), FILTER_ID).     parser.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return FilterType.fromString(p.text()).         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, FILTER_TYPE, ObjectParser.ValueType.STRING).     return parser. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeString(filterId).     out.writeEnum(filterType). }
false;public;2;8;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(FILTER_ID.getPreferredName(), filterId).     builder.field(FILTER_TYPE.getPreferredName(), filterType).     builder.endObject().     return builder. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj instanceof FilterRef == false) {         return false.     }     FilterRef other = (FilterRef) obj.     return Objects.equals(filterId, other.filterId) && Objects.equals(filterType, other.filterType). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(filterId, filterType). }
false;public;0;3;;public String getFilterId() {     return filterId. }
false;public;0;3;;public FilterType getFilterType() {     return filterType. }
