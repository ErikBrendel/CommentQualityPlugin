# id;timestamp;commentText;codeText;commentWords;codeWords
XPackLicenseState -> public synchronized boolean isCcrAllowed();1536828374;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isCcrAllowed();1540486836;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isCcrAllowed();1540847035;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isCcrAllowed();1544118724;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isCcrAllowed();1549004353;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isCcrAllowed();1549399169;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isCcrAllowed();1550477798;Determine if cross-cluster replication should be enabled._<p>_Cross-cluster replication is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return true is the license is compatible, otherwise false;public synchronized boolean isCcrAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isCcrAllowedForOperationMode(currentStatus.mode)__    };determine,if,cross,cluster,replication,should,be,enabled,p,cross,cluster,replication,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,true,is,the,license,is,compatible,otherwise,false;public,synchronized,boolean,is,ccr,allowed,final,status,current,status,status,return,current,status,active,is,ccr,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1536828374;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1540486836;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1540847035;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1544118724;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1549004353;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1549399169;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public synchronized boolean isMonitoringClusterAlertsAllowed();1550477798;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public synchronized boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,synchronized,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isIpFilteringAllowed();1524684173;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isIpFilteringAllowed();1524686646;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isIpFilteringAllowed();1529433467;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isIpFilteringAllowed();1531301204;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isIpFilteringAllowed();1532069817;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isIpFilteringAllowed();1535723122;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isIpFilteringAllowed();1535965276;@return true if IP filtering should be enabled;public boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,ip,filtering,should,be,enabled;public,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1536828374;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1540486836;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1540847035;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1544118724;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1549004353;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1549399169;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isMachineLearningAllowed();1550477798;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isMachineLearningAllowed() {_        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1536828374;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1540486836;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1540847035;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1544118724;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1549004353;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1549399169;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpgradeAllowed();1550477798;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public synchronized boolean isUpgradeAllowed() {_        _        return status.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,upgrade,allowed,return,status,active
XPackLicenseState -> public void removeListener(Runnable runnable);1524684173;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1524686646;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1529433467;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1531301204;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1532069817;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1535723122;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1535965276;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1536828374;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1540486836;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public void removeListener(Runnable runnable);1540847035;Remove a listener;public void removeListener(Runnable runnable) {_        listeners.remove(runnable)__    };remove,a,listener;public,void,remove,listener,runnable,runnable,listeners,remove,runnable
XPackLicenseState -> public boolean isMachineLearningAllowed();1524684173;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isMachineLearningAllowed();1524686646;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isMachineLearningAllowed();1529433467;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isMachineLearningAllowed();1531301204;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isMachineLearningAllowed();1532069817;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isMachineLearningAllowed();1535723122;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isMachineLearningAllowed();1535965276;Determine if Machine Learning should be enabled._<p>_Machine Learning is only disabled when the license has expired or if the_mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isMachineLearningAllowed() {_        _        final Status currentStatus = status__        return currentStatus.active && isMachineLearningAllowedForOperationMode(currentStatus.mode)__    };determine,if,machine,learning,should,be,enabled,p,machine,learning,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,machine,learning,allowed,final,status,current,status,status,return,current,status,active,is,machine,learning,allowed,for,operation,mode,current,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1536828374;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1540486836;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1540847035;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1544118724;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1549004353;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1549399169;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized OperationMode getOperationMode();1550477798;Return the current license type.;public synchronized OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,synchronized,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized boolean isSqlAllowed();1536828374;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isSqlAllowed();1540486836;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isSqlAllowed();1540847035;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isSqlAllowed();1544118724;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isSqlAllowed();1549004353;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isSqlAllowed();1549399169;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isSqlAllowed();1550477798;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public synchronized boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,synchronized,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1524686646;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1529433467;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1531301204;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1532069817;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1535723122;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1535965276;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1536828374;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1540486836;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1540847035;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1544118724;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1549004353;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1549399169;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isIndexLifecycleAllowed();1550477798;Determine if Index Lifecycle API should be enabled._<p>_Index Lifecycle API is available in for all license types except_{@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isIndexLifecycleAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,index,lifecycle,api,should,be,enabled,p,index,lifecycle,api,is,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,index,lifecycle,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1524684173;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1524686646;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1529433467;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1531301204;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1532069817;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1535723122;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isUpdateRetentionAllowed();1535965276;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isJdbcAllowed();1524684173;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isJdbcAllowed();1524686646;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isJdbcAllowed();1529433467;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isJdbcAllowed();1531301204;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isJdbcAllowed();1532069817;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isJdbcAllowed();1535723122;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isJdbcAllowed();1535965276;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public boolean isJdbcAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isRollupAllowed();1524684173;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isRollupAllowed();1524686646;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isRollupAllowed();1529433467;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isRollupAllowed();1531301204;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isRollupAllowed();1532069817;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isRollupAllowed();1535723122;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isRollupAllowed();1535965276;Rollup is always available as long as there is a valid license__@return true if the license is active;public boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public boolean isWatcherAllowed();1524684173;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isWatcherAllowed();1524686646;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isWatcherAllowed();1529433467;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isWatcherAllowed();1531301204;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isWatcherAllowed();1532069817;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isWatcherAllowed();1535723122;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isWatcherAllowed();1535965276;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isWatcherAllowed() {_        _        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isAuthorizationRealmAllowed();1535723122;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public boolean isAuthorizationRealmAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL)_            && localStatus.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,boolean,is,authorization,realm,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isAuthorizationRealmAllowed();1535965276;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public boolean isAuthorizationRealmAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL)_            && localStatus.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,boolean,is,authorization,realm,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1536828374;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1540486836;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1540847035;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1544118724;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1549004353;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1549399169;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isDocumentAndFieldLevelSecurityAllowed();1550477798;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public synchronized boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM)__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,synchronized,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public synchronized boolean isRollupAllowed();1536828374;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isRollupAllowed();1540486836;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isRollupAllowed();1540847035;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isRollupAllowed();1544118724;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isRollupAllowed();1549004353;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isRollupAllowed();1549399169;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isRollupAllowed();1550477798;Rollup is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isRollupAllowed() {_        return status.active__    };rollup,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,rollup,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationEngineAllowed();1549399169;@return whether a custom authorization engine is allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationEngineAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,a,custom,authorization,engine,is,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,engine,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationEngineAllowed();1550477798;@return whether a custom authorization engine is allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationEngineAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,a,custom,authorization,engine,is,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,engine,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1536828374;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1540486836;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1540847035;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1544118724;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1549004353;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1549399169;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isGraphAllowed();1550477798;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isGraphAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public void removeListener(final LicenseStateListener listener);1544118724;Remove a listener;public void removeListener(final LicenseStateListener listener) {_        listeners.remove(Objects.requireNonNull(listener))__    };remove,a,listener;public,void,remove,listener,final,license,state,listener,listener,listeners,remove,objects,require,non,null,listener
XPackLicenseState -> public void removeListener(final LicenseStateListener listener);1549004353;Remove a listener;public void removeListener(final LicenseStateListener listener) {_        listeners.remove(Objects.requireNonNull(listener))__    };remove,a,listener;public,void,remove,listener,final,license,state,listener,listener,listeners,remove,objects,require,non,null,listener
XPackLicenseState -> public void removeListener(final LicenseStateListener listener);1549399169;Remove a listener;public void removeListener(final LicenseStateListener listener) {_        listeners.remove(Objects.requireNonNull(listener))__    };remove,a,listener;public,void,remove,listener,final,license,state,listener,listener,listeners,remove,objects,require,non,null,listener
XPackLicenseState -> public void removeListener(final LicenseStateListener listener);1550477798;Remove a listener;public void removeListener(final LicenseStateListener listener) {_        listeners.remove(Objects.requireNonNull(listener))__    };remove,a,listener;public,void,remove,listener,final,license,state,listener,listener,listeners,remove,objects,require,non,null,listener
XPackLicenseState -> public boolean isGraphAllowed();1524684173;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isGraphAllowed();1524686646;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isGraphAllowed();1529433467;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isGraphAllowed();1531301204;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isGraphAllowed();1532069817;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isGraphAllowed();1535723122;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public boolean isGraphAllowed();1535965276;Determine if Graph Exploration should be enabled._<p>_Exploration is only disabled when the license has expired or if the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public boolean isGraphAllowed() {_        _        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,graph,exploration,should,be,enabled,p,exploration,is,only,disabled,when,the,license,has,expired,or,if,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,graph,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public void addListener(Runnable runnable);1524684173;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1524686646;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1529433467;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1531301204;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1532069817;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1535723122;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1535965276;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1536828374;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1540486836;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public void addListener(Runnable runnable);1540847035;Add a listener to be notified on license change;public void addListener(Runnable runnable) {_        listeners.add(Objects.requireNonNull(runnable))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,runnable,runnable,listeners,add,objects,require,non,null,runnable
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1536828374;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1540486836;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1540847035;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1544118724;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1549004353;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1549399169;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isBeatsAllowed();1550477798;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isActive();1536828374;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isActive();1540486836;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isActive();1540847035;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isActive();1544118724;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isActive();1549004353;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isActive();1549399169;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isActive();1550477798;Return true if the license is currently within its time boundaries, false otherwise.;public synchronized boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,synchronized,boolean,is,active,return,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1536828374;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1540486836;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1540847035;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1544118724;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1549004353;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1549399169;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isAuthorizationRealmAllowed();1550477798;@return whether "authorization_realms" are allowed based on the license {@link OperationMode}_@see org.elasticsearch.xpack.core.security.authc.support.DelegatedAuthorizationSettings;public synchronized boolean isAuthorizationRealmAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_            && status.active__    };return,whether,are,allowed,based,on,the,license,link,operation,mode,see,org,elasticsearch,xpack,core,security,authc,support,delegated,authorization,settings;public,synchronized,boolean,is,authorization,realm,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1524684173;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1524686646;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1529433467;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1531301204;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1532069817;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1535723122;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public boolean isDocumentAndFieldLevelSecurityAllowed();1535965276;Determine if Document Level Security (DLS) and Field Level Security (FLS) should be enabled._<p>_DLS and FLS are only disabled when the mode is not:_<ul>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>_Note: This does not consider the <em>state</em> of the license so that Security does not suddenly leak information!__@return {@code true} to enable DLS and FLS. Otherwise {@code false}.;public boolean isDocumentAndFieldLevelSecurityAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.TRIAL || mode == OperationMode.PLATINUM__    };determine,if,document,level,security,dls,and,field,level,security,fls,should,be,enabled,p,dls,and,fls,are,only,disabled,when,the,mode,is,not,ul,li,link,operation,mode,platinum,li,li,link,operation,mode,trial,li,ul,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,security,does,not,suddenly,leak,information,return,code,true,to,enable,dls,and,fls,otherwise,code,false;public,boolean,is,document,and,field,level,security,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,trial,mode,operation,mode,platinum
XPackLicenseState -> public OperationMode getOperationMode();1524684173;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public OperationMode getOperationMode();1524686646;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public OperationMode getOperationMode();1529433467;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public OperationMode getOperationMode();1531301204;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public OperationMode getOperationMode();1532069817;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public OperationMode getOperationMode();1535723122;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public OperationMode getOperationMode();1535965276;Return the current license type.;public OperationMode getOperationMode() {_        return status.mode__    };return,the,current,license,type;public,operation,mode,get,operation,mode,return,status,mode
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1536828374;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1540486836;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1540847035;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1544118724;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1549004353;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1549399169;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isSecurityAvailable();1550477798;@return true if security is available to be used with the current license type;public synchronized boolean isSecurityAvailable() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.STANDARD ||_                mode == OperationMode.TRIAL__    };return,true,if,security,is,available,to,be,used,with,the,current,license,type;public,synchronized,boolean,is,security,available,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,standard,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1536828374;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1540486836;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1540847035;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1544118724;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1549004353;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1549399169;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isMonitoringAllowed();1550477798;Monitoring is always available as long as there is a valid license__@return true if the license is active;public synchronized boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,synchronized,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1524684173;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1524686646;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1529433467;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1531301204;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1532069817;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1535723122;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public boolean isStatsAndHealthAllowed();1535965276;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1536828374;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1540486836;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1540847035;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1544118724;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1549004353;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1549399169;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public synchronized boolean isCustomRoleProvidersAllowed();1550477798;@return whether custom role providers are allowed based on the license {@link OperationMode};public synchronized boolean isCustomRoleProvidersAllowed() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (status.mode == OperationMode.PLATINUM || status.mode == OperationMode.TRIAL)_                && status.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,synchronized,boolean,is,custom,role,providers,allowed,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,status,mode,operation,mode,platinum,status,mode,operation,mode,trial,status,active
XPackLicenseState -> public boolean isAuthAllowed();1524684173;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuthAllowed();1524686646;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuthAllowed();1529433467;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuthAllowed();1531301204;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuthAllowed();1532069817;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuthAllowed();1535723122;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuthAllowed();1535965276;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public boolean isAuthAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.STANDARD || mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_            || mode == OperationMode.TRIAL__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,boolean,is,auth,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1524684173;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL )_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1524686646;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL )_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1529433467;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL )_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1531301204;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL )_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1532069817;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL )_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1535723122;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL)_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isCustomRoleProvidersAllowed();1535965276;@return whether custom role providers are allowed based on the license {@link OperationMode};public boolean isCustomRoleProvidersAllowed() {_        final Status localStatus = status__        return (localStatus.mode == OperationMode.PLATINUM || localStatus.mode == OperationMode.TRIAL)_                && localStatus.active__    };return,whether,custom,role,providers,are,allowed,based,on,the,license,link,operation,mode;public,boolean,is,custom,role,providers,allowed,final,status,local,status,status,return,local,status,mode,operation,mode,platinum,local,status,mode,operation,mode,trial,local,status,active
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1524684173;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1524686646;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1529433467;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1531301204;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1532069817;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1535723122;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isMonitoringClusterAlertsAllowed();1535965276;Monitoring Cluster Alerts requires the equivalent license to use Watcher.__@return {@link #isWatcherAllowed()}_@see #isWatcherAllowed();public boolean isMonitoringClusterAlertsAllowed() {_        return isWatcherAllowed()__    };monitoring,cluster,alerts,requires,the,equivalent,license,to,use,watcher,return,link,is,watcher,allowed,see,is,watcher,allowed;public,boolean,is,monitoring,cluster,alerts,allowed,return,is,watcher,allowed
XPackLicenseState -> public boolean isSqlAllowed();1524684173;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isSqlAllowed();1524686646;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isSqlAllowed();1529433467;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isSqlAllowed();1531301204;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isSqlAllowed();1532069817;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isSqlAllowed();1535723122;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isSqlAllowed();1535965276;Determine if SQL support should be enabled._<p>_SQL is available for all license types except {@link OperationMode#MISSING};public boolean isSqlAllowed() {_        return status.active__    };determine,if,sql,support,should,be,enabled,p,sql,is,available,for,all,license,types,except,link,operation,mode,missing;public,boolean,is,sql,allowed,return,status,active
XPackLicenseState -> public boolean isActive();1524684173;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isActive();1524686646;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isActive();1529433467;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isActive();1531301204;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isActive();1532069817;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isActive();1535723122;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isActive();1535965276;Return true if the license is currently within its time boundaries, false otherwise.;public boolean isActive() {_        return status.active__    };return,true,if,the,license,is,currently,within,its,time,boundaries,false,otherwise;public,boolean,is,active,return,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1524684173;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1524686646;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1529433467;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1531301204;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1532069817;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1535723122;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public boolean isUpgradeAllowed();1535965276;Determine if Upgrade API should be enabled._<p>_Upgrade API is not available in for all license types except {@link OperationMode#MISSING}__@return {@code true} as long as the license is valid. Otherwise_{@code false}.;public boolean isUpgradeAllowed() {_        _        Status localStatus = status__        _        return localStatus.active__    };determine,if,upgrade,api,should,be,enabled,p,upgrade,api,is,not,available,in,for,all,license,types,except,link,operation,mode,missing,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,boolean,is,upgrade,allowed,status,local,status,status,return,local,status,active
XPackLicenseState -> public synchronized boolean isAuthAllowed();1536828374;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuthAllowed();1540486836;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuthAllowed();1540847035;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuthAllowed();1544118724;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuthAllowed();1549004353;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuthAllowed();1549399169;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuthAllowed();1550477798;@return true if authentication and authorization should be enabled. this does not indicate what realms are available_@see #allowedRealmType() for the enabled realms;public synchronized boolean isAuthAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.STANDARD || mode == OperationMode.GOLD_            || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,authentication,and,authorization,should,be,enabled,this,does,not,indicate,what,realms,are,available,see,allowed,realm,type,for,the,enabled,realms;public,synchronized,boolean,is,auth,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,standard,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1536828374;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1540486836;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1540847035;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1544118724;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1549004353;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1549399169;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized AllowedRealmType allowedRealmType();1550477798;@return the type of realms that are enabled based on the license {@link OperationMode};public synchronized AllowedRealmType allowedRealmType() {_        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(status.mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        if (isSecurityCurrentlyEnabled) {_            switch (status.mode) {_                case PLATINUM:_                case TRIAL:_                    return AllowedRealmType.ALL__                case GOLD:_                    return AllowedRealmType.DEFAULT__                case STANDARD:_                    return AllowedRealmType.NATIVE__                default:_                    return AllowedRealmType.NONE__            }_        } else {_            return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,synchronized,allowed,realm,type,allowed,realm,type,final,boolean,is,security,currently,enabled,is,security,enabled,status,mode,is,security,explicitly,enabled,is,security,enabled,if,is,security,currently,enabled,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none,else,return,allowed,realm,type,none
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1536828374;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license generated in 6.3.0+</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled_            && isSecurityExplicitlyEnabled == false_            && isSecurityEnabledByTrialVersion == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,generated,in,6,3,0,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false,is,security,enabled,by,trial,version,false
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1540486836;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license generated in 6.3.0+</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled_            && isSecurityExplicitlyEnabled == false_            && isSecurityEnabledByTrialVersion == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,generated,in,6,3,0,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false,is,security,enabled,by,trial,version,false
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1540847035;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license generated in 6.3.0+</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled_            && isSecurityExplicitlyEnabled == false_            && isSecurityEnabledByTrialVersion == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,generated,in,6,3,0,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false,is,security,enabled,by,trial,version,false
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1544118724;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license generated in 6.3.0+</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled_            && isSecurityExplicitlyEnabled == false_            && isSecurityEnabledByTrialVersion == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,generated,in,6,3,0,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false,is,security,enabled,by,trial,version,false
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1549004353;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled && isSecurityExplicitlyEnabled == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1549399169;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled && isSecurityExplicitlyEnabled == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false
XPackLicenseState -> public synchronized boolean isSecurityDisabledByTrialLicense();1550477798;@return true if security has been disabled by a trial license which is the case of the_default distribution post 6.3.0. The conditions necessary for this are:_<ul>_<li>A trial license</li>_<li>xpack.security.enabled not specified as a setting</li>_</ul>;public synchronized boolean isSecurityDisabledByTrialLicense() {_        return status.mode == OperationMode.TRIAL && isSecurityEnabled && isSecurityExplicitlyEnabled == false__    };return,true,if,security,has,been,disabled,by,a,trial,license,which,is,the,case,of,the,default,distribution,post,6,3,0,the,conditions,necessary,for,this,are,ul,li,a,trial,license,li,li,xpack,security,enabled,not,specified,as,a,setting,li,ul;public,synchronized,boolean,is,security,disabled,by,trial,license,return,status,mode,operation,mode,trial,is,security,enabled,is,security,explicitly,enabled,false
XPackLicenseState -> public boolean isDeprecationAllowed();1524684173;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isDeprecationAllowed();1524686646;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isDeprecationAllowed();1529433467;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isDeprecationAllowed();1531301204;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isDeprecationAllowed();1532069817;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isDeprecationAllowed();1535723122;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isDeprecationAllowed();1535965276;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1524684173;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1524686646;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1529433467;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1531301204;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1532069817;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1535723122;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public boolean isMonitoringAllowed();1535965276;Monitoring is always available as long as there is a valid license__@return true if the license is active;public boolean isMonitoringAllowed() {_        return status.active__    };monitoring,is,always,available,as,long,as,there,is,a,valid,license,return,true,if,the,license,is,active;public,boolean,is,monitoring,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1536828374;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1540486836;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1540847035;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1544118724;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1549004353;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1549399169;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isJdbcAllowed();1550477798;Determine if JDBC support should be enabled._<p>_JDBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isJdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,jdbc,support,should,be,enabled,p,jdbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,jdbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1536828374;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1540486836;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1540847035;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1544118724;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1549004353;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1549399169;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isLogstashAllowed();1550477798;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public synchronized boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1536828374;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1540486836;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1540847035;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1544118724;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1549004353;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1549399169;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public synchronized boolean isWatcherAllowed();1550477798;Determine if Watcher is available based on the current license._<p>_Watcher is available if the license is active (hasn't expired) and of one of the following types:_<ul>_<li>{@link OperationMode#STANDARD}</li>_<li>{@link OperationMode#PLATINUM}</li>_<li>{@link OperationMode#GOLD}</li>_<li>{@link OperationMode#TRIAL}</li>_</ul>__@return {@code true} as long as the license is valid. Otherwise {@code false}.;public synchronized boolean isWatcherAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };determine,if,watcher,is,available,based,on,the,current,license,p,watcher,is,available,if,the,license,is,active,hasn,t,expired,and,of,one,of,the,following,types,ul,li,link,operation,mode,standard,li,li,link,operation,mode,platinum,li,li,link,operation,mode,gold,li,li,link,operation,mode,trial,li,ul,return,code,true,as,long,as,the,license,is,valid,otherwise,code,false;public,synchronized,boolean,is,watcher,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> void update(OperationMode mode, boolean active);1524684173;Updates the current state of the license, which will change what features are available.;void update(OperationMode mode, boolean active) {_        status = new Status(mode, active)__        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available;void,update,operation,mode,mode,boolean,active,status,new,status,mode,active,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active);1524686646;Updates the current state of the license, which will change what features are available.;void update(OperationMode mode, boolean active) {_        status = new Status(mode, active)__        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available;void,update,operation,mode,mode,boolean,active,status,new,status,mode,active,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active);1529433467;Updates the current state of the license, which will change what features are available.;void update(OperationMode mode, boolean active) {_        status = new Status(mode, active)__        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available;void,update,operation,mode,mode,boolean,active,status,new,status,mode,active,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active);1531301204;Updates the current state of the license, which will change what features are available.;void update(OperationMode mode, boolean active) {_        status = new Status(mode, active)__        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available;void,update,operation,mode,mode,boolean,active,status,new,status,mode,active,listeners,for,each,runnable,run
XPackLicenseState -> public boolean isLogstashAllowed();1524684173;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isLogstashAllowed();1524686646;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isLogstashAllowed();1529433467;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status___        if (localStatus.active == false) {_            return false__        }__        switch (localStatus.mode) {_            case TRIAL:_            case GOLD:_            case PLATINUM:_            case STANDARD:_                return true__            default:_                return false__        }_    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,if,local,status,active,false,return,false,switch,local,status,mode,case,trial,case,gold,case,platinum,case,standard,return,true,default,return,false
XPackLicenseState -> public boolean isLogstashAllowed();1531301204;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public boolean isLogstashAllowed();1532069817;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public boolean isLogstashAllowed();1535723122;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public boolean isLogstashAllowed();1535965276;Logstash is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isLogstashAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)__    };logstash,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,logstash,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1536828374;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1540486836;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1540847035;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1544118724;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1549004353;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1549399169;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isDeprecationAllowed();1550477798;Deprecation APIs are always allowed as long as there is an active license_@return {@code true} as long as there is a valid license;public synchronized boolean isDeprecationAllowed() {_        return status.active__    };deprecation,apis,are,always,allowed,as,long,as,there,is,an,active,license,return,code,true,as,long,as,there,is,a,valid,license;public,synchronized,boolean,is,deprecation,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1536828374;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1540486836;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1540847035;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1544118724;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1549004353;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1549399169;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public synchronized boolean isUpdateRetentionAllowed();1550477798;Determine if the current license allows the retention of indices to be modified._<p>_Only users with a non-{@link OperationMode#BASIC} license can update the retention period._<p>_Note: This does not consider the <em>state</em> of the license so that any change is remembered for when they fix their license.__@return {@code true} if the user is allowed to modify the retention. Otherwise {@code false}.;public synchronized boolean isUpdateRetentionAllowed() {_        final OperationMode mode = status.mode__        return mode != OperationMode.BASIC && mode != OperationMode.MISSING__    };determine,if,the,current,license,allows,the,retention,of,indices,to,be,modified,p,only,users,with,a,non,link,operation,mode,basic,license,can,update,the,retention,period,p,note,this,does,not,consider,the,em,state,em,of,the,license,so,that,any,change,is,remembered,for,when,they,fix,their,license,return,code,true,if,the,user,is,allowed,to,modify,the,retention,otherwise,code,false;public,synchronized,boolean,is,update,retention,allowed,final,operation,mode,mode,status,mode,return,mode,operation,mode,basic,mode,operation,mode,missing
XPackLicenseState -> public boolean isAuditingAllowed();1524684173;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuditingAllowed();1524686646;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuditingAllowed();1529433467;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuditingAllowed();1531301204;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuditingAllowed();1532069817;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuditingAllowed();1535723122;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public boolean isAuditingAllowed();1535965276;@return true if auditing should be enabled;public boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        return mode == OperationMode.GOLD || mode == OperationMode.PLATINUM_                || mode == OperationMode.TRIAL__    };return,true,if,auditing,should,be,enabled;public,boolean,is,auditing,allowed,operation,mode,mode,status,mode,return,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1536828374;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1540486836;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1540847035;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1544118724;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1549004353;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1549399169;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isAuditingAllowed();1550477798;@return true if auditing should be enabled;public synchronized boolean isAuditingAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,auditing,should,be,enabled;public,synchronized,boolean,is,auditing,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1536828374;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1540486836;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1540847035;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1544118724;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1549004353;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1549399169;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isStatsAndHealthAllowed();1550477798;Indicates whether the stats and health API calls should be allowed. If a license is expired and past the grace_period then we deny these calls.__@return true if the license allows for the stats and health APIs to be used.;public synchronized boolean isStatsAndHealthAllowed() {_        return status.active__    };indicates,whether,the,stats,and,health,api,calls,should,be,allowed,if,a,license,is,expired,and,past,the,grace,period,then,we,deny,these,calls,return,true,if,the,license,allows,for,the,stats,and,health,apis,to,be,used;public,synchronized,boolean,is,stats,and,health,allowed,return,status,active
XPackLicenseState -> public synchronized boolean isOdbcAllowed();1540486836;Determine if ODBC support should be enabled._<p>_ODBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isOdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,odbc,support,should,be,enabled,p,odbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,odbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isOdbcAllowed();1540847035;Determine if ODBC support should be enabled._<p>_ODBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isOdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,odbc,support,should,be,enabled,p,odbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,odbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isOdbcAllowed();1544118724;Determine if ODBC support should be enabled._<p>_ODBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isOdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,odbc,support,should,be,enabled,p,odbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,odbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isOdbcAllowed();1549004353;Determine if ODBC support should be enabled._<p>_ODBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isOdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,odbc,support,should,be,enabled,p,odbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,odbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isOdbcAllowed();1549399169;Determine if ODBC support should be enabled._<p>_ODBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isOdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,odbc,support,should,be,enabled,p,odbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,odbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> public synchronized boolean isOdbcAllowed();1550477798;Determine if ODBC support should be enabled._<p>_ODBC is available only in for {@link OperationMode#PLATINUM} and {@link OperationMode#TRIAL} licences;public synchronized boolean isOdbcAllowed() {_        Status localStatus = status__        OperationMode operationMode = localStatus.mode___        boolean licensed = operationMode == OperationMode.TRIAL || operationMode == OperationMode.PLATINUM___        return licensed && localStatus.active__    };determine,if,odbc,support,should,be,enabled,p,odbc,is,available,only,in,for,link,operation,mode,platinum,and,link,operation,mode,trial,licences;public,synchronized,boolean,is,odbc,allowed,status,local,status,status,operation,mode,operation,mode,local,status,mode,boolean,licensed,operation,mode,operation,mode,trial,operation,mode,operation,mode,platinum,return,licensed,local,status,active
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1532069817;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        status = new Status(mode, active)__        if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_            && isSecurityEnabledByTrialVersion == false) {_            _            _            if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                Loggers.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                    mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                isSecurityEnabledByTrialVersion = true__            }_        }_        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,loggers,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1535723122;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        status = new Status(mode, active)__        if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_            && isSecurityEnabledByTrialVersion == false) {_            _            _            if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                Loggers.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                    mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                isSecurityEnabledByTrialVersion = true__            }_        }_        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,loggers,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1535965276;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        status = new Status(mode, active)__        if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_            && isSecurityEnabledByTrialVersion == false) {_            _            _            if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                Loggers.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                    mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                isSecurityEnabledByTrialVersion = true__            }_        }_        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,loggers,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1536828374;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__            if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_                && isSecurityEnabledByTrialVersion == false) {_                _                _                if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                    Loggers.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                        mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                    isSecurityEnabledByTrialVersion = true__                }_            }_        }_        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,loggers,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1540486836;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__            if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_                && isSecurityEnabledByTrialVersion == false) {_                _                _                if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                    Loggers.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                        mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                    isSecurityEnabledByTrialVersion = true__                }_            }_        }_        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,loggers,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1540847035;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__            if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_                && isSecurityEnabledByTrialVersion == false) {_                _                _                if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                    LogManager.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                        mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                    isSecurityEnabledByTrialVersion = true__                }_            }_        }_        listeners.forEach(Runnable::run)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,log,manager,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,runnable,run
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1544118724;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__            if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL_                && isSecurityEnabledByTrialVersion == false) {_                _                _                if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {_                    LogManager.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",_                        mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString())__                    isSecurityEnabledByTrialVersion = true__                }_            }_        }_        listeners.forEach(LicenseStateListener::licenseStateChanged)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,if,is,security,enabled,true,is,security,explicitly,enabled,false,mode,operation,mode,trial,is,security,enabled,by,trial,version,false,if,most,recent,trial,version,null,most,recent,trial,version,before,version,log,manager,get,logger,get,class,info,automatically,enabling,security,for,older,trial,license,most,recent,trial,version,null,pre,6,1,0,most,recent,trial,version,to,string,is,security,enabled,by,trial,version,true,listeners,for,each,license,state,listener,license,state,changed
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1549004353;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__        }_        listeners.forEach(LicenseStateListener::licenseStateChanged)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,listeners,for,each,license,state,listener,license,state,changed
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1549399169;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__        }_        listeners.forEach(LicenseStateListener::licenseStateChanged)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,listeners,for,each,license,state,listener,license,state,changed
XPackLicenseState -> void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion);1550477798;Updates the current state of the license, which will change what features are available.__@param mode   The mode (type) of the current license._@param active True if the current license exists and is within its allowed usage period_ false if it is expired or missing._@param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that._May be {@code null} if they have never generated a trial license on this cluster, or the most recent_trial was prior to this metadata being tracked (6.1);void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {_        synchronized (this) {_            status = new Status(mode, active)__        }_        listeners.forEach(LicenseStateListener::licenseStateChanged)__    };updates,the,current,state,of,the,license,which,will,change,what,features,are,available,param,mode,the,mode,type,of,the,current,license,param,active,true,if,the,current,license,exists,and,is,within,its,allowed,usage,period,false,if,it,is,expired,or,missing,param,most,recent,trial,version,if,this,cluster,has,at,some,point,commenced,a,trial,the,most,recent,version,on,which,they,did,that,may,be,code,null,if,they,have,never,generated,a,trial,license,on,this,cluster,or,the,most,recent,trial,was,prior,to,this,metadata,being,tracked,6,1;void,update,operation,mode,mode,boolean,active,nullable,version,most,recent,trial,version,synchronized,this,status,new,status,mode,active,listeners,for,each,license,state,listener,license,state,changed
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1536828374;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1540486836;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1540847035;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1544118724;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabledByTrialVersion, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,by,trial,version,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1549004353;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1549399169;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized boolean isIpFilteringAllowed();1550477798;@return true if IP filtering should be enabled;public synchronized boolean isIpFilteringAllowed() {_        OperationMode mode = status.mode__        final boolean isSecurityCurrentlyEnabled =_            isSecurityEnabled(mode, isSecurityExplicitlyEnabled, isSecurityEnabled)__        return isSecurityCurrentlyEnabled && (mode == OperationMode.GOLD || mode == OperationMode.PLATINUM || mode == OperationMode.TRIAL)__    };return,true,if,ip,filtering,should,be,enabled;public,synchronized,boolean,is,ip,filtering,allowed,operation,mode,mode,status,mode,final,boolean,is,security,currently,enabled,is,security,enabled,mode,is,security,explicitly,enabled,is,security,enabled,return,is,security,currently,enabled,mode,operation,mode,gold,mode,operation,mode,platinum,mode,operation,mode,trial
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1536828374;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1540486836;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1540847035;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1544118724;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1549004353;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1549399169;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public synchronized XPackLicenseState copyCurrentLicenseState();1550477798;Creates a copy of this object based on the state at the time the method was called. The_returned object will not be modified by a license update/expiration so it can be used to_make multiple method calls on the license state safely. This object should not be long_lived but instead used within a method when a consistent view of the license state_is needed for multiple interactions with the license state.;public synchronized XPackLicenseState copyCurrentLicenseState() {_        return new XPackLicenseState(this)__    };creates,a,copy,of,this,object,based,on,the,state,at,the,time,the,method,was,called,the,returned,object,will,not,be,modified,by,a,license,update,expiration,so,it,can,be,used,to,make,multiple,method,calls,on,the,license,state,safely,this,object,should,not,be,long,lived,but,instead,used,within,a,method,when,a,consistent,view,of,the,license,state,is,needed,for,multiple,interactions,with,the,license,state;public,synchronized,xpack,license,state,copy,current,license,state,return,new,xpack,license,state,this
XPackLicenseState -> public void addListener(final LicenseStateListener listener);1544118724;Add a listener to be notified on license change;public void addListener(final LicenseStateListener listener) {_        listeners.add(Objects.requireNonNull(listener))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,final,license,state,listener,listener,listeners,add,objects,require,non,null,listener
XPackLicenseState -> public void addListener(final LicenseStateListener listener);1549004353;Add a listener to be notified on license change;public void addListener(final LicenseStateListener listener) {_        listeners.add(Objects.requireNonNull(listener))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,final,license,state,listener,listener,listeners,add,objects,require,non,null,listener
XPackLicenseState -> public void addListener(final LicenseStateListener listener);1549399169;Add a listener to be notified on license change;public void addListener(final LicenseStateListener listener) {_        listeners.add(Objects.requireNonNull(listener))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,final,license,state,listener,listener,listeners,add,objects,require,non,null,listener
XPackLicenseState -> public void addListener(final LicenseStateListener listener);1550477798;Add a listener to be notified on license change;public void addListener(final LicenseStateListener listener) {_        listeners.add(Objects.requireNonNull(listener))__    };add,a,listener,to,be,notified,on,license,change;public,void,add,listener,final,license,state,listener,listener,listeners,add,objects,require,non,null,listener
XPackLicenseState -> public AllowedRealmType allowedRealmType();1524684173;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public AllowedRealmType allowedRealmType();1524686646;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public AllowedRealmType allowedRealmType();1529433467;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public AllowedRealmType allowedRealmType();1531301204;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public AllowedRealmType allowedRealmType();1532069817;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public AllowedRealmType allowedRealmType();1535723122;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public AllowedRealmType allowedRealmType();1535965276;@return the type of realms that are enabled based on the license {@link OperationMode};public AllowedRealmType allowedRealmType() {_        switch (status.mode) {_            case PLATINUM:_            case TRIAL:_                return AllowedRealmType.ALL__            case GOLD:_                return AllowedRealmType.DEFAULT__            case STANDARD:_                return AllowedRealmType.NATIVE__            default:_                return AllowedRealmType.NONE__        }_    };return,the,type,of,realms,that,are,enabled,based,on,the,license,link,operation,mode;public,allowed,realm,type,allowed,realm,type,switch,status,mode,case,platinum,case,trial,return,allowed,realm,type,all,case,gold,return,allowed,realm,type,default,case,standard,return,allowed,realm,type,native,default,return,allowed,realm,type,none
XPackLicenseState -> public boolean isBeatsAllowed();1531301204;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public boolean isBeatsAllowed();1532069817;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public boolean isBeatsAllowed();1535723122;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
XPackLicenseState -> public boolean isBeatsAllowed();1535965276;Beats is allowed as long as there is an active license of type TRIAL, STANDARD, GOLD or PLATINUM_@return {@code true} as long as there is a valid license;public boolean isBeatsAllowed() {_        Status localStatus = status__        return localStatus.active && (isBasic(localStatus.mode) == false)___    };beats,is,allowed,as,long,as,there,is,an,active,license,of,type,trial,standard,gold,or,platinum,return,code,true,as,long,as,there,is,a,valid,license;public,boolean,is,beats,allowed,status,local,status,status,return,local,status,active,is,basic,local,status,mode,false
