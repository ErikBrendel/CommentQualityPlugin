commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Defines a field using a predicate that corresponds to the type of {@code value}  *  * @see #buildPredicate(Object)  */ ;/**  * Defines a field using a predicate that corresponds to the type of {@code value}  *  * @see #buildPredicate(Object)  */ public ExpressionModel defineField(String name, Object value) {     return defineField(name, value, buildPredicate(value)). }
true;public;3;4;/**  * Defines a field using a supplied predicate.  */ ;/**  * Defines a field using a supplied predicate.  */ public ExpressionModel defineField(String name, Object value, Predicate<FieldExpression.FieldValue> predicate) {     this.fields.put(name, new Tuple<>(value, predicate)).     return this. }
true;public;2;10;/**  * Returns {@code true} if the named field, matches <em>any</em> of the provided values.  */ ;/**  * Returns {@code true} if the named field, matches <em>any</em> of the provided values.  */ public boolean test(String field, List<FieldExpression.FieldValue> values) {     final Tuple<Object, Predicate<FieldExpression.FieldValue>> tuple = this.fields.get(field).     final Predicate<FieldExpression.FieldValue> predicate.     if (tuple == null) {         predicate = NULL_PREDICATE.     } else {         predicate = tuple.v2().     }     return values.stream().anyMatch(predicate). }
true;static;1;21;/**  * Constructs a {@link Predicate} that matches correctly based on the type of the provided parameter.  */ ;/**  * Constructs a {@link Predicate} that matches correctly based on the type of the provided parameter.  */ static Predicate<FieldExpression.FieldValue> buildPredicate(Object object) {     if (object == null) {         return NULL_PREDICATE.     }     if (object instanceof Boolean) {         return field -> object.equals(field.getValue()).     }     if (object instanceof Number) {         return field -> numberEquals((Number) object, field.getValue()).     }     if (object instanceof String) {         return field -> field.getAutomaton() == null ? object.equals(field.getValue()) : field.getAutomaton().run((String) object).     }     if (object instanceof Collection) {         return ((Collection<?>) object).stream().map(element -> buildPredicate(element)).reduce((a, b) -> a.or(b)).orElse(fieldValue -> false).     }     throw new IllegalArgumentException("Unsupported value type " + object.getClass()). }
true;private,static;2;14;/**  * A comparison of {@link Number} objects that compares by floating point when either value is a {@link Float} or {@link Double}  * otherwise compares by {@link Numbers#toLongExact long}.  */ ;/**  * A comparison of {@link Number} objects that compares by floating point when either value is a {@link Float} or {@link Double}  * otherwise compares by {@link Numbers#toLongExact long}.  */ private static boolean numberEquals(Number left, Object other) {     if (left.equals(other)) {         return true.     }     if ((other instanceof Number) == false) {         return false.     }     Number right = (Number) other.     if (left instanceof Double || left instanceof Float || right instanceof Double || right instanceof Float) {         return Double.compare(left.doubleValue(), right.doubleValue()) == 0.     }     return Numbers.toLongExact(left) == Numbers.toLongExact(right). }
