commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected DirectoryReader doWrapDirectoryReader(DirectoryReader in) throws IOException {     return wrap(in, primaryTerm). }
false;static;2;7;;static DirectoryReader wrap(DirectoryReader in, long primaryTerm) throws IOException {     Map<LeafReader, LeafReaderContext> ctxMap = new IdentityHashMap<>().     for (LeafReaderContext leave : in.leaves()) {         ctxMap.put(leave.reader(), leave).     }     return new SeqIdGeneratingFilterReader(in, new SeqIdGeneratingSubReaderWrapper(ctxMap, primaryTerm)). }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return in.getReaderCacheHelper(). }
false;public;0;4;;@Override public int docID() {     return docID. }
false;public;0;9;;@Override public int nextDoc() {     if (docID + 1 < maxDoc) {         docID++.     } else {         docID = NO_MORE_DOCS.     }     return docID. }
false;public;1;9;;@Override public int advance(int target) {     if (target >= maxDoc) {         docID = NO_MORE_DOCS.     } else {         docID = target.     }     return docID. }
false;public;0;4;;@Override public long cost() {     return maxDoc. }
false;public;1;5;;@Override public boolean advanceExact(int target) {     advance(target).     return docID != NO_MORE_DOCS. }
false;public;0;4;;@Override public long longValue() {     return 1. }
false;public;0;4;;@Override public long longValue() {     return primaryTerm. }
false;public;0;4;;@Override public long longValue() {     return docBase + docID. }
false;public;1;26;;@Override public NumericDocValues getNumericDocValues(String field) throws IOException {     if (SeqNoFieldMapper.NAME.equals(field)) {         return new FakeNumericDocValues(maxDoc()) {              @Override             public long longValue() {                 return docBase + docID.             }         }.     } else if (SeqNoFieldMapper.PRIMARY_TERM_NAME.equals(field)) {         return new FakeNumericDocValues(maxDoc()) {              @Override             public long longValue() {                 return primaryTerm.             }         }.     } else if (VersionFieldMapper.NAME.equals(field)) {         return new FakeNumericDocValues(maxDoc()) {              @Override             public long longValue() {                 return 1.             }         }.     }     return super.getNumericDocValues(field). }
false;public;0;4;;@Override public CacheHelper getCoreCacheHelper() {     return reader.getCoreCacheHelper(). }
false;public;0;4;;@Override public CacheHelper getReaderCacheHelper() {     return reader.getReaderCacheHelper(). }
false;public;1;4;;@Override public Terms terms(String field) {     throw new UnsupportedOperationException("_source only indices can't be searched or filtered"). }
false;public;1;4;;@Override public PointValues getPointValues(String field) {     throw new UnsupportedOperationException("_source only indices can't be searched or filtered"). }
false;public;1;54;;@Override public LeafReader wrap(LeafReader reader) {     LeafReaderContext leafReaderContext = ctxMap.get(reader).     final int docBase = leafReaderContext.docBase.     return new FilterLeafReader(reader) {          @Override         public NumericDocValues getNumericDocValues(String field) throws IOException {             if (SeqNoFieldMapper.NAME.equals(field)) {                 return new FakeNumericDocValues(maxDoc()) {                      @Override                     public long longValue() {                         return docBase + docID.                     }                 }.             } else if (SeqNoFieldMapper.PRIMARY_TERM_NAME.equals(field)) {                 return new FakeNumericDocValues(maxDoc()) {                      @Override                     public long longValue() {                         return primaryTerm.                     }                 }.             } else if (VersionFieldMapper.NAME.equals(field)) {                 return new FakeNumericDocValues(maxDoc()) {                      @Override                     public long longValue() {                         return 1.                     }                 }.             }             return super.getNumericDocValues(field).         }          @Override         public CacheHelper getCoreCacheHelper() {             return reader.getCoreCacheHelper().         }          @Override         public CacheHelper getReaderCacheHelper() {             return reader.getReaderCacheHelper().         }          @Override         public Terms terms(String field) {             throw new UnsupportedOperationException("_source only indices can't be searched or filtered").         }          @Override         public PointValues getPointValues(String field) {             throw new UnsupportedOperationException("_source only indices can't be searched or filtered").         }     }. }
