commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeBoolean(watcherMetaData.manuallyStopped()). }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     watcherMetaData = new WatcherMetaData(in.readBoolean()). }
false;protected;1;4;;@Override protected List<Node> readNodesFrom(StreamInput in) throws IOException {     return in.readList(Node::readNodeResponse). }
false;protected;2;4;;@Override protected void writeNodesTo(StreamOutput out, List<Node> nodes) throws IOException {     out.writeStreamableList(nodes). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     watcherMetaData.toXContent(builder, params).     builder.startArray("stats").     for (Node node : getNodes()) {         node.toXContent(builder, params).     }     builder.endArray().     return builder. }
true;public;0;3;/**  * Sum all watches across all nodes to get a total count of watches in the cluster  *  * @return The sum of all watches being executed  */ ;/**  * Sum all watches across all nodes to get a total count of watches in the cluster  *  * @return The sum of all watches being executed  */ public long getWatchesCount() {     return getNodes().stream().mapToLong(WatcherStatsResponse.Node::getWatchesCount).sum(). }
false;public;0;3;;public WatcherMetaData watcherMetaData() {     return watcherMetaData. }
true;public;0;3;/**  * @return The current execution thread pool queue size  */ ;/**  * @return The current execution thread pool queue size  */ public long getThreadPoolQueueSize() {     return threadPoolQueueSize. }
false;public;1;3;;public void setThreadPoolQueueSize(long threadPoolQueueSize) {     this.threadPoolQueueSize = threadPoolQueueSize. }
true;public;0;3;/**  * @return The max number of threads in the execution thread pool  */ ;/**  * @return The max number of threads in the execution thread pool  */ public long getThreadPoolMaxSize() {     return threadPoolMaxSize. }
false;public;1;3;;public void setThreadPoolMaxSize(long threadPoolMaxSize) {     this.threadPoolMaxSize = threadPoolMaxSize. }
true;public;0;3;/**  * @return The number of watches currently registered in the system  */ ;/**  * @return The number of watches currently registered in the system  */ public long getWatchesCount() {     return watchesCount. }
false;public;1;3;;public void setWatchesCount(long watchesCount) {     this.watchesCount = watchesCount. }
true;public;0;3;/**  * @return The state of the watch service.  */ ;/**  * @return The state of the watch service.  */ public WatcherState getWatcherState() {     return watcherState. }
false;public;1;3;;public void setWatcherState(WatcherState watcherServiceState) {     this.watcherState = watcherServiceState. }
false;public;0;4;;@Nullable public List<WatchExecutionSnapshot> getSnapshots() {     return snapshots. }
false;public;1;3;;public void setSnapshots(List<WatchExecutionSnapshot> snapshots) {     this.snapshots = snapshots. }
false;public;0;4;;@Nullable public List<QueuedWatch> getQueuedWatches() {     return queuedWatches. }
false;public;1;3;;public void setQueuedWatches(List<QueuedWatch> queuedWatches) {     this.queuedWatches = queuedWatches. }
false;public;0;3;;public Counters getStats() {     return stats. }
false;public;1;3;;public void setStats(Counters stats) {     this.stats = stats. }
false;public;1;18;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     watchesCount = in.readLong().     threadPoolQueueSize = in.readLong().     threadPoolMaxSize = in.readLong().     watcherState = WatcherState.fromId(in.readByte()).     if (in.readBoolean()) {         snapshots = in.readStreamableList(WatchExecutionSnapshot::new).     }     if (in.readBoolean()) {         queuedWatches = in.readStreamableList(QueuedWatch::new).     }     if (in.readBoolean()) {         stats = Counters.read(in).     } }
false;public;1;21;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeLong(watchesCount).     out.writeLong(threadPoolQueueSize).     out.writeLong(threadPoolMaxSize).     out.writeByte(watcherState.getId()).     out.writeBoolean(snapshots != null).     if (snapshots != null) {         out.writeStreamableList(snapshots).     }     out.writeBoolean(queuedWatches != null).     if (queuedWatches != null) {         out.writeStreamableList(queuedWatches).     }     out.writeBoolean(stats != null).     if (stats != null) {         stats.writeTo(out).     } }
false;public;2;32;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field("node_id", getNode().getId()).     builder.field("watcher_state", watcherState.toString().toLowerCase(Locale.ROOT)).     builder.field("watch_count", watchesCount).     builder.startObject("execution_thread_pool").     builder.field("queue_size", threadPoolQueueSize).     builder.field("max_size", threadPoolMaxSize).     builder.endObject().     if (snapshots != null) {         builder.startArray("current_watches").         for (WatchExecutionSnapshot snapshot : snapshots) {             snapshot.toXContent(builder, params).         }         builder.endArray().     }     if (queuedWatches != null) {         builder.startArray("queued_watches").         for (QueuedWatch queuedWatch : queuedWatches) {             queuedWatch.toXContent(builder, params).         }         builder.endArray().     }     if (stats != null && stats.hasCounters()) {         builder.field("stats", stats.toNestedMap()).     }     builder.endObject().     return builder. }
false;static;1;6;;static WatcherStatsResponse.Node readNodeResponse(StreamInput in) throws IOException {     WatcherStatsResponse.Node node = new WatcherStatsResponse.Node().     node.readFrom(in).     return node. }
