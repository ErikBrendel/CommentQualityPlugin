commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public GroupConfig getGroupConfig() {     return groupConfig. }
false;public;0;3;;public List<MetricConfig> getMetricsConfig() {     return metricsConfig. }
false;public;0;3;;public TimeValue getTimeout() {     return timeout. }
false;public;0;3;;public String getIndexPattern() {     return indexPattern. }
false;public;0;3;;public String getRollupIndex() {     return rollupIndex. }
false;public;0;3;;public String getCron() {     return cron. }
false;public;0;3;;public int getPageSize() {     return pageSize. }
false;public;0;4;;@Override public String getWriteableName() {     return NAME. }
false;public;0;12;;public Set<String> getAllFields() {     final Set<String> fields = new HashSet<>().     if (groupConfig != null) {         fields.addAll(groupConfig.getAllFields()).     }     if (metricsConfig != null) {         for (MetricConfig metric : metricsConfig) {             fields.add(metric.getField()).         }     }     return Collections.unmodifiableSet(fields). }
false;public;2;7;;public void validateMappings(final Map<String, Map<String, FieldCapabilities>> fieldCapsResponse, final ActionRequestValidationException validationException) {     groupConfig.validateMappings(fieldCapsResponse, validationException).     for (MetricConfig m : metricsConfig) {         m.validateMappings(fieldCapsResponse, validationException).     } }
false;public;2;26;;@Override public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {     builder.startObject().     {         builder.field(ID, id).         builder.field(INDEX_PATTERN, indexPattern).         builder.field(ROLLUP_INDEX, rollupIndex).         builder.field(CRON, cron).         if (groupConfig != null) {             builder.field(GroupConfig.NAME, groupConfig).         }         if (metricsConfig != null) {             builder.startArray(MetricConfig.NAME).             for (MetricConfig metric : metricsConfig) {                 metric.toXContent(builder, params).             }             builder.endArray().         }         if (timeout != null) {             builder.field(TIMEOUT, timeout.getStringRep()).         }         builder.field(PAGE_SIZE, pageSize).     }     builder.endObject().     return builder. }
false;public;1;11;;@Override public void writeTo(final StreamOutput out) throws IOException {     out.writeString(id).     out.writeString(indexPattern).     out.writeString(rollupIndex).     out.writeString(cron).     out.writeOptionalWriteable(groupConfig).     out.writeList(metricsConfig).     out.writeTimeValue(timeout).     out.writeInt(pageSize). }
false;public;1;19;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     final RollupJobConfig that = (RollupJobConfig) other.     return Objects.equals(this.id, that.id) && Objects.equals(this.indexPattern, that.indexPattern) && Objects.equals(this.rollupIndex, that.rollupIndex) && Objects.equals(this.cron, that.cron) && Objects.equals(this.groupConfig, that.groupConfig) && Objects.equals(this.metricsConfig, that.metricsConfig) && Objects.equals(this.timeout, that.timeout) && Objects.equals(this.pageSize, that.pageSize). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id, indexPattern, rollupIndex, cron, groupConfig, metricsConfig, timeout, pageSize). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
true;public;0;3;/**  * Same as toString() but more explicitly named so the caller knows this is turned into JSON  */ ;/**  * Same as toString() but more explicitly named so the caller knows this is turned into JSON  */ public String toJSONString() {     return toString(). }
false;public,static;2;3;;public static RollupJobConfig fromXContent(final XContentParser parser, @Nullable final String optionalJobId) throws IOException {     return PARSER.parse(parser, optionalJobId). }
