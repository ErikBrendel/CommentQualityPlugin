commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (username == null) {         validationException = addValidationError("username is missing", validationException).     }     if (passwordHash == null) {         validationException = addValidationError("password is missing", validationException).     }     return validationException. }
false;public;0;3;;public String username() {     return username. }
false;public;1;3;;public void username(String username) {     this.username = username. }
false;public;0;3;;public char[] passwordHash() {     return passwordHash. }
false;public;1;3;;public void passwordHash(char[] passwordHash) {     this.passwordHash = passwordHash. }
true;public;0;4;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ ;/**  * Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}, the default), wait for a refresh (  * {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}).  */ @Override public RefreshPolicy getRefreshPolicy() {     return refreshPolicy. }
false;public;1;5;;@Override public ChangePasswordRequest setRefreshPolicy(RefreshPolicy refreshPolicy) {     this.refreshPolicy = refreshPolicy.     return this. }
false;public;0;4;;@Override public String[] usernames() {     return new String[] { username }. }
false;public;1;7;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     username = in.readString().     passwordHash = CharArrays.utf8BytesToChars(BytesReference.toBytes(in.readBytesReference())).     refreshPolicy = RefreshPolicy.readFrom(in). }
false;public;1;7;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(username).     out.writeBytesReference(new BytesArray(CharArrays.toUtf8Bytes(passwordHash))).     refreshPolicy.writeTo(out). }
