commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getRealmName() {     return realmName. }
false;public;0;3;;public String getUserName() {     return userName. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String getName() {     return name. }
true;public,static;1;3;/**  * Creates invalidate api key request for given realm name  * @param realmName realm name  * @return {@link InvalidateApiKeyRequest}  */ ;/**  * Creates invalidate api key request for given realm name  * @param realmName realm name  * @return {@link InvalidateApiKeyRequest}  */ public static InvalidateApiKeyRequest usingRealmName(String realmName) {     return new InvalidateApiKeyRequest(realmName, null, null, null). }
true;public,static;1;3;/**  * Creates invalidate API key request for given user name  * @param userName user name  * @return {@link InvalidateApiKeyRequest}  */ ;/**  * Creates invalidate API key request for given user name  * @param userName user name  * @return {@link InvalidateApiKeyRequest}  */ public static InvalidateApiKeyRequest usingUserName(String userName) {     return new InvalidateApiKeyRequest(null, userName, null, null). }
true;public,static;2;3;/**  * Creates invalidate API key request for given realm and user name  * @param realmName realm name  * @param userName user name  * @return {@link InvalidateApiKeyRequest}  */ ;/**  * Creates invalidate API key request for given realm and user name  * @param realmName realm name  * @param userName user name  * @return {@link InvalidateApiKeyRequest}  */ public static InvalidateApiKeyRequest usingRealmAndUserName(String realmName, String userName) {     return new InvalidateApiKeyRequest(realmName, userName, null, null). }
true;public,static;1;3;/**  * Creates invalidate API key request for given api key id  * @param id api key id  * @return {@link InvalidateApiKeyRequest}  */ ;/**  * Creates invalidate API key request for given api key id  * @param id api key id  * @return {@link InvalidateApiKeyRequest}  */ public static InvalidateApiKeyRequest usingApiKeyId(String id) {     return new InvalidateApiKeyRequest(null, null, id, null). }
true;public,static;1;3;/**  * Creates invalidate api key request for given api key name  * @param name api key name  * @return {@link InvalidateApiKeyRequest}  */ ;/**  * Creates invalidate api key request for given api key name  * @param name api key name  * @return {@link InvalidateApiKeyRequest}  */ public static InvalidateApiKeyRequest usingApiKeyName(String name) {     return new InvalidateApiKeyRequest(null, null, null, name). }
false;public;0;20;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     if (Strings.hasText(realmName) == false && Strings.hasText(userName) == false && Strings.hasText(id) == false && Strings.hasText(name) == false) {         validationException = addValidationError("One of [api key id, api key name, username, realm name] must be specified", validationException).     }     if (Strings.hasText(id) || Strings.hasText(name)) {         if (Strings.hasText(realmName) || Strings.hasText(userName)) {             validationException = addValidationError("username or realm name must not be specified when the api key id or api key name is specified", validationException).         }     }     if (Strings.hasText(id) && Strings.hasText(name)) {         validationException = addValidationError("only one of [api key id, api key name] can be specified", validationException).     }     return validationException. }
false;public;1;8;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeOptionalString(realmName).     out.writeOptionalString(userName).     out.writeOptionalString(id).     out.writeOptionalString(name). }
false;public;1;4;;@Override public void readFrom(StreamInput in) throws IOException {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
