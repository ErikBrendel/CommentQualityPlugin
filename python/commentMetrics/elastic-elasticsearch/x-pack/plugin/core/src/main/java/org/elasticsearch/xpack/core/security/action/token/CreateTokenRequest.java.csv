commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getValue() {     return value. }
false;public,static;1;10;;public static GrantType fromString(String grantType) {     if (grantType != null) {         for (GrantType type : values()) {             if (type.getValue().equals(grantType)) {                 return type.             }         }     }     return null. }
false;public;0;57;;@Override public ActionRequestValidationException validate() {     ActionRequestValidationException validationException = null.     GrantType type = GrantType.fromString(grantType).     if (type != null) {         switch(type) {             case PASSWORD:                 if (Strings.isNullOrEmpty(username)) {                     validationException = addValidationError("username is missing", validationException).                 }                 if (password == null || password.getChars() == null || password.getChars().length == 0) {                     validationException = addValidationError("password is missing", validationException).                 }                 if (refreshToken != null) {                     validationException = addValidationError("refresh_token is not supported with the password grant_type", validationException).                 }                 break.             case REFRESH_TOKEN:                 if (username != null) {                     validationException = addValidationError("username is not supported with the refresh_token grant_type", validationException).                 }                 if (password != null) {                     validationException = addValidationError("password is not supported with the refresh_token grant_type", validationException).                 }                 if (refreshToken == null) {                     validationException = addValidationError("refresh_token is missing", validationException).                 }                 break.             case CLIENT_CREDENTIALS:                 if (username != null) {                     validationException = addValidationError("username is not supported with the client_credentials grant_type", validationException).                 }                 if (password != null) {                     validationException = addValidationError("password is not supported with the client_credentials grant_type", validationException).                 }                 if (refreshToken != null) {                     validationException = addValidationError("refresh_token is not supported with the client_credentials grant_type", validationException).                 }                 break.             default:                 validationException = addValidationError("grant_type only supports the values: [" + SUPPORTED_GRANT_TYPES.stream().map(GrantType::getValue).collect(Collectors.joining(", ")) + "]", validationException).         }     } else {         validationException = addValidationError("grant_type only supports the values: [" + SUPPORTED_GRANT_TYPES.stream().map(GrantType::getValue).collect(Collectors.joining(", ")) + "]", validationException).     }     return validationException. }
false;public;1;3;;public void setGrantType(String grantType) {     this.grantType = grantType. }
false;public;1;3;;public void setUsername(@Nullable String username) {     this.username = username. }
false;public;1;3;;public void setPassword(@Nullable SecureString password) {     this.password = password. }
false;public;1;3;;public void setScope(@Nullable String scope) {     this.scope = scope. }
false;public;1;3;;public void setRefreshToken(@Nullable String refreshToken) {     this.refreshToken = refreshToken. }
false;public;0;3;;public String getGrantType() {     return grantType. }
false;public;0;4;;@Nullable public String getUsername() {     return username. }
false;public;0;4;;@Nullable public SecureString getPassword() {     return password. }
false;public;0;4;;@Nullable public String getScope() {     return scope. }
false;public;0;4;;@Nullable public String getRefreshToken() {     return refreshToken. }
false;public;1;37;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     if (out.getVersion().before(Version.V_6_5_0) && GrantType.CLIENT_CREDENTIALS.getValue().equals(grantType)) {         throw new IllegalArgumentException("a request with the client_credentials grant_type cannot be sent to version [" + out.getVersion() + "]").     }     out.writeString(grantType).     if (out.getVersion().onOrAfter(Version.V_6_2_0)) {         out.writeOptionalString(username).         if (password == null) {             out.writeOptionalBytesReference(null).         } else {             final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars()).             try {                 out.writeOptionalBytesReference(new BytesArray(passwordBytes)).             } finally {                 Arrays.fill(passwordBytes, (byte) 0).             }         }         out.writeOptionalString(refreshToken).     } else {         if ("refresh_token".equals(grantType)) {             throw new IllegalArgumentException("a refresh request cannot be sent to an older version").         } else {             out.writeString(username).             final byte[] passwordBytes = CharArrays.toUtf8Bytes(password.getChars()).             try {                 out.writeByteArray(passwordBytes).             } finally {                 Arrays.fill(passwordBytes, (byte) 0).             }         }     }     out.writeOptionalString(scope). }
false;public;1;29;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     grantType = in.readString().     if (in.getVersion().onOrAfter(Version.V_6_2_0)) {         username = in.readOptionalString().         BytesReference bytesRef = in.readOptionalBytesReference().         if (bytesRef != null) {             byte[] bytes = BytesReference.toBytes(bytesRef).             try {                 password = new SecureString(CharArrays.utf8BytesToChars(bytes)).             } finally {                 Arrays.fill(bytes, (byte) 0).             }         } else {             password = null.         }         refreshToken = in.readOptionalString().     } else {         username = in.readString().         final byte[] passwordBytes = in.readByteArray().         try {             password = new SecureString(CharArrays.utf8BytesToChars(passwordBytes)).         } finally {             Arrays.fill(passwordBytes, (byte) 0).         }     }     scope = in.readOptionalString(). }
