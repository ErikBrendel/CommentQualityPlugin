commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable"). }
false;public;0;4;;@Override public Writeable.Reader<Response> getResponseReader() {     return Response::new. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(id). }
false;public;1;10;;@Override public boolean match(Task task) {     // with `rollup_`     if (id.equals(MetaData.ALL)) {         return task.getDescription().startsWith(RollupField.NAME + "_").     }     // Otherwise find the task by ID     return task.getDescription().equals(RollupField.NAME + "_" + id). }
false;public;0;3;;public String getId() {     return id. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(RollupField.ID.getPreferredName(), id).     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(id). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(id, other.id). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeList(jobs). }
false;public;0;3;;public List<JobWrapper> getJobs() {     return jobs. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     // XContentBuilder does not support passing the params object for Iterables     builder.field(JOBS.getPreferredName()).     builder.startArray().     for (JobWrapper job : jobs) {         job.toXContent(builder, params).     }     builder.endArray().     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobs). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(jobs, other.jobs). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
false;public;1;6;;@Override public void writeTo(StreamOutput out) throws IOException {     job.writeTo(out).     stats.writeTo(out).     status.writeTo(out). }
false;public;0;3;;public RollupJobConfig getJob() {     return job. }
false;public;0;3;;public RollupIndexerJobStats getStats() {     return stats. }
false;public;0;3;;public RollupJobStatus getStatus() {     return status. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(CONFIG.getPreferredName()).     job.toXContent(builder, params).     builder.field(STATUS.getPreferredName(), status).     builder.field(STATS.getPreferredName(), stats, params).     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(job, stats, status). }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     JobWrapper other = (JobWrapper) obj.     return Objects.equals(job, other.job) && Objects.equals(stats, other.stats) && Objects.equals(status, other.status). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
