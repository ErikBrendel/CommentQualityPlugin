# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncTwoPhaseIndexer -> public synchronized IndexerState start();1535666657;Sets the internal state to {@link IndexerState#STARTED} if the previous state_was {@link IndexerState#STOPPED}. Setting the state to STARTED allows a job_to run in the background when {@link #maybeTriggerAsyncJob(long)} is called.__@return The new state for the indexer (STARTED, INDEXING or ABORTING if the_job was already aborted).;public synchronized IndexerState start() {_        state.compareAndSet(IndexerState.STOPPED, IndexerState.STARTED)__        return state.get()__    };sets,the,internal,state,to,link,indexer,state,started,if,the,previous,state,was,link,indexer,state,stopped,setting,the,state,to,started,allows,a,job,to,run,in,the,background,when,link,maybe,trigger,async,job,long,is,called,return,the,new,state,for,the,indexer,started,indexing,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,start,state,compare,and,set,indexer,state,stopped,indexer,state,started,return,state,get
AsyncTwoPhaseIndexer -> public synchronized IndexerState start();1541690928;Sets the internal state to {@link IndexerState#STARTED} if the previous state_was {@link IndexerState#STOPPED}. Setting the state to STARTED allows a job_to run in the background when {@link #maybeTriggerAsyncJob(long)} is called.__@return The new state for the indexer (STARTED, INDEXING or ABORTING if the_job was already aborted).;public synchronized IndexerState start() {_        state.compareAndSet(IndexerState.STOPPED, IndexerState.STARTED)__        return state.get()__    };sets,the,internal,state,to,link,indexer,state,started,if,the,previous,state,was,link,indexer,state,stopped,setting,the,state,to,started,allows,a,job,to,run,in,the,background,when,link,maybe,trigger,async,job,long,is,called,return,the,new,state,for,the,indexer,started,indexing,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,start,state,compare,and,set,indexer,state,stopped,indexer,state,started,return,state,get
AsyncTwoPhaseIndexer -> public synchronized IndexerState start();1543351570;Sets the internal state to {@link IndexerState#STARTED} if the previous state_was {@link IndexerState#STOPPED}. Setting the state to STARTED allows a job_to run in the background when {@link #maybeTriggerAsyncJob(long)} is called.__@return The new state for the indexer (STARTED, INDEXING or ABORTING if the_job was already aborted).;public synchronized IndexerState start() {_        state.compareAndSet(IndexerState.STOPPED, IndexerState.STARTED)__        return state.get()__    };sets,the,internal,state,to,link,indexer,state,started,if,the,previous,state,was,link,indexer,state,stopped,setting,the,state,to,started,allows,a,job,to,run,in,the,background,when,link,maybe,trigger,async,job,long,is,called,return,the,new,state,for,the,indexer,started,indexing,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,start,state,compare,and,set,indexer,state,stopped,indexer,state,started,return,state,get
AsyncTwoPhaseIndexer -> public synchronized IndexerState start();1545146193;Sets the internal state to {@link IndexerState#STARTED} if the previous state_was {@link IndexerState#STOPPED}. Setting the state to STARTED allows a job_to run in the background when {@link #maybeTriggerAsyncJob(long)} is called.__@return The new state for the indexer (STARTED, INDEXING or ABORTING if the_job was already aborted).;public synchronized IndexerState start() {_        state.compareAndSet(IndexerState.STOPPED, IndexerState.STARTED)__        return state.get()__    };sets,the,internal,state,to,link,indexer,state,started,if,the,previous,state,was,link,indexer,state,stopped,setting,the,state,to,started,allows,a,job,to,run,in,the,background,when,link,maybe,trigger,async,job,long,is,called,return,the,new,state,for,the,indexer,started,indexing,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,start,state,compare,and,set,indexer,state,stopped,indexer,state,started,return,state,get
AsyncTwoPhaseIndexer -> public synchronized IndexerState start();1547234098;Sets the internal state to {@link IndexerState#STARTED} if the previous state_was {@link IndexerState#STOPPED}. Setting the state to STARTED allows a job_to run in the background when {@link #maybeTriggerAsyncJob(long)} is called.__@return The new state for the indexer (STARTED, INDEXING or ABORTING if the_job was already aborted).;public synchronized IndexerState start() {_        state.compareAndSet(IndexerState.STOPPED, IndexerState.STARTED)__        return state.get()__    };sets,the,internal,state,to,link,indexer,state,started,if,the,previous,state,was,link,indexer,state,stopped,setting,the,state,to,started,allows,a,job,to,run,in,the,background,when,link,maybe,trigger,async,job,long,is,called,return,the,new,state,for,the,indexer,started,indexing,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,start,state,compare,and,set,indexer,state,stopped,indexer,state,started,return,state,get
AsyncTwoPhaseIndexer -> public JobStats getStats();1535666657;Get the stats of this indexer.;public JobStats getStats() {_        return stats__    };get,the,stats,of,this,indexer;public,job,stats,get,stats,return,stats
AsyncTwoPhaseIndexer -> public JobStats getStats();1541690928;Get the stats of this indexer.;public JobStats getStats() {_        return stats__    };get,the,stats,of,this,indexer;public,job,stats,get,stats,return,stats
AsyncTwoPhaseIndexer -> public JobStats getStats();1543351570;Get the stats of this indexer.;public JobStats getStats() {_        return stats__    };get,the,stats,of,this,indexer;public,job,stats,get,stats,return,stats
AsyncTwoPhaseIndexer -> public JobStats getStats();1545146193;Get the stats of this indexer.;public JobStats getStats() {_        return stats__    };get,the,stats,of,this,indexer;public,job,stats,get,stats,return,stats
AsyncTwoPhaseIndexer -> public JobStats getStats();1547234098;Get the stats of this indexer.;public JobStats getStats() {_        return stats__    };get,the,stats,of,this,indexer;public,job,stats,get,stats,return,stats
AsyncTwoPhaseIndexer -> protected abstract void onStartJob(long now)_;1535666657;Called at startup after job has been triggered using {@link #maybeTriggerAsyncJob(long)} and the_internal state is {@link IndexerState#STARTED}.__@param now The current time in milliseconds passed through from {@link #maybeTriggerAsyncJob(long)};protected abstract void onStartJob(long now)_;called,at,startup,after,job,has,been,triggered,using,link,maybe,trigger,async,job,long,and,the,internal,state,is,link,indexer,state,started,param,now,the,current,time,in,milliseconds,passed,through,from,link,maybe,trigger,async,job,long;protected,abstract,void,on,start,job,long,now
AsyncTwoPhaseIndexer -> protected abstract void onStartJob(long now)_;1541690928;Called at startup after job has been triggered using {@link #maybeTriggerAsyncJob(long)} and the_internal state is {@link IndexerState#STARTED}.__@param now The current time in milliseconds passed through from {@link #maybeTriggerAsyncJob(long)};protected abstract void onStartJob(long now)_;called,at,startup,after,job,has,been,triggered,using,link,maybe,trigger,async,job,long,and,the,internal,state,is,link,indexer,state,started,param,now,the,current,time,in,milliseconds,passed,through,from,link,maybe,trigger,async,job,long;protected,abstract,void,on,start,job,long,now
AsyncTwoPhaseIndexer -> protected abstract void onStartJob(long now)_;1543351570;Called at startup after job has been triggered using {@link #maybeTriggerAsyncJob(long)} and the_internal state is {@link IndexerState#STARTED}.__@param now The current time in milliseconds passed through from {@link #maybeTriggerAsyncJob(long)};protected abstract void onStartJob(long now)_;called,at,startup,after,job,has,been,triggered,using,link,maybe,trigger,async,job,long,and,the,internal,state,is,link,indexer,state,started,param,now,the,current,time,in,milliseconds,passed,through,from,link,maybe,trigger,async,job,long;protected,abstract,void,on,start,job,long,now
AsyncTwoPhaseIndexer -> protected abstract void onStartJob(long now)_;1545146193;Called at startup after job has been triggered using {@link #maybeTriggerAsyncJob(long)} and the_internal state is {@link IndexerState#STARTED}.__@param now The current time in milliseconds passed through from {@link #maybeTriggerAsyncJob(long)};protected abstract void onStartJob(long now)_;called,at,startup,after,job,has,been,triggered,using,link,maybe,trigger,async,job,long,and,the,internal,state,is,link,indexer,state,started,param,now,the,current,time,in,milliseconds,passed,through,from,link,maybe,trigger,async,job,long;protected,abstract,void,on,start,job,long,now
AsyncTwoPhaseIndexer -> protected abstract void onStartJob(long now)_;1547234098;Called at startup after job has been triggered using {@link #maybeTriggerAsyncJob(long)} and the_internal state is {@link IndexerState#STARTED}.__@param now The current time in milliseconds passed through from {@link #maybeTriggerAsyncJob(long)};protected abstract void onStartJob(long now)_;called,at,startup,after,job,has,been,triggered,using,link,maybe,trigger,async,job,long,and,the,internal,state,is,link,indexer,state,started,param,now,the,current,time,in,milliseconds,passed,through,from,link,maybe,trigger,async,job,long;protected,abstract,void,on,start,job,long,now
AsyncTwoPhaseIndexer -> protected abstract void onFailure(Exception exc)_;1535666657;Called when a failure occurs in an async job causing the execution to stop.__@param exc_The exception;protected abstract void onFailure(Exception exc)_;called,when,a,failure,occurs,in,an,async,job,causing,the,execution,to,stop,param,exc,the,exception;protected,abstract,void,on,failure,exception,exc
AsyncTwoPhaseIndexer -> protected abstract void onFailure(Exception exc)_;1541690928;Called when a failure occurs in an async job causing the execution to stop.__@param exc_The exception;protected abstract void onFailure(Exception exc)_;called,when,a,failure,occurs,in,an,async,job,causing,the,execution,to,stop,param,exc,the,exception;protected,abstract,void,on,failure,exception,exc
AsyncTwoPhaseIndexer -> protected abstract void onFailure(Exception exc)_;1543351570;Called when a failure occurs in an async job causing the execution to stop.__@param exc_The exception;protected abstract void onFailure(Exception exc)_;called,when,a,failure,occurs,in,an,async,job,causing,the,execution,to,stop,param,exc,the,exception;protected,abstract,void,on,failure,exception,exc
AsyncTwoPhaseIndexer -> protected abstract void onFailure(Exception exc)_;1545146193;Called when a failure occurs in an async job causing the execution to stop.__@param exc_The exception;protected abstract void onFailure(Exception exc)_;called,when,a,failure,occurs,in,an,async,job,causing,the,execution,to,stop,param,exc,the,exception;protected,abstract,void,on,failure,exception,exc
AsyncTwoPhaseIndexer -> protected abstract void onFailure(Exception exc)_;1547234098;Called when a failure occurs in an async job causing the execution to stop.__@param exc_The exception;protected abstract void onFailure(Exception exc)_;called,when,a,failure,occurs,in,an,async,job,causing,the,execution,to,stop,param,exc,the,exception;protected,abstract,void,on,failure,exception,exc
AsyncTwoPhaseIndexer -> protected abstract void onAbort()_;1535666657;Called when a background job detects that the indexer is aborted causing the_async execution to stop.;protected abstract void onAbort()_;called,when,a,background,job,detects,that,the,indexer,is,aborted,causing,the,async,execution,to,stop;protected,abstract,void,on,abort
AsyncTwoPhaseIndexer -> protected abstract void onAbort()_;1541690928;Called when a background job detects that the indexer is aborted causing the_async execution to stop.;protected abstract void onAbort()_;called,when,a,background,job,detects,that,the,indexer,is,aborted,causing,the,async,execution,to,stop;protected,abstract,void,on,abort
AsyncTwoPhaseIndexer -> protected abstract void onAbort()_;1543351570;Called when a background job detects that the indexer is aborted causing the_async execution to stop.;protected abstract void onAbort()_;called,when,a,background,job,detects,that,the,indexer,is,aborted,causing,the,async,execution,to,stop;protected,abstract,void,on,abort
AsyncTwoPhaseIndexer -> protected abstract void onAbort()_;1545146193;Called when a background job detects that the indexer is aborted causing the_async execution to stop.;protected abstract void onAbort()_;called,when,a,background,job,detects,that,the,indexer,is,aborted,causing,the,async,execution,to,stop;protected,abstract,void,on,abort
AsyncTwoPhaseIndexer -> protected abstract void onAbort()_;1547234098;Called when a background job detects that the indexer is aborted causing the_async execution to stop.;protected abstract void onAbort()_;called,when,a,background,job,detects,that,the,indexer,is,aborted,causing,the,async,execution,to,stop;protected,abstract,void,on,abort
AsyncTwoPhaseIndexer -> protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;1535666657;Called periodically during the execution of a background job. Implementation_should persists the state somewhere and continue the execution asynchronously_using <code>next</code>.__@param state_The current state of the indexer_@param position_The current position of the indexer_@param next_Runnable for the next phase;protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;called,periodically,during,the,execution,of,a,background,job,implementation,should,persists,the,state,somewhere,and,continue,the,execution,asynchronously,using,code,next,code,param,state,the,current,state,of,the,indexer,param,position,the,current,position,of,the,indexer,param,next,runnable,for,the,next,phase;protected,abstract,void,do,save,state,indexer,state,state,job,position,position,runnable,next
AsyncTwoPhaseIndexer -> protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;1541690928;Called periodically during the execution of a background job. Implementation_should persists the state somewhere and continue the execution asynchronously_using <code>next</code>.__@param state_The current state of the indexer_@param position_The current position of the indexer_@param next_Runnable for the next phase;protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;called,periodically,during,the,execution,of,a,background,job,implementation,should,persists,the,state,somewhere,and,continue,the,execution,asynchronously,using,code,next,code,param,state,the,current,state,of,the,indexer,param,position,the,current,position,of,the,indexer,param,next,runnable,for,the,next,phase;protected,abstract,void,do,save,state,indexer,state,state,job,position,position,runnable,next
AsyncTwoPhaseIndexer -> protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;1543351570;Called periodically during the execution of a background job. Implementation_should persists the state somewhere and continue the execution asynchronously_using <code>next</code>.__@param state_The current state of the indexer_@param position_The current position of the indexer_@param next_Runnable for the next phase;protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;called,periodically,during,the,execution,of,a,background,job,implementation,should,persists,the,state,somewhere,and,continue,the,execution,asynchronously,using,code,next,code,param,state,the,current,state,of,the,indexer,param,position,the,current,position,of,the,indexer,param,next,runnable,for,the,next,phase;protected,abstract,void,do,save,state,indexer,state,state,job,position,position,runnable,next
AsyncTwoPhaseIndexer -> protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;1545146193;Called periodically during the execution of a background job. Implementation_should persists the state somewhere and continue the execution asynchronously_using <code>next</code>.__@param state_The current state of the indexer_@param position_The current position of the indexer_@param next_Runnable for the next phase;protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;called,periodically,during,the,execution,of,a,background,job,implementation,should,persists,the,state,somewhere,and,continue,the,execution,asynchronously,using,code,next,code,param,state,the,current,state,of,the,indexer,param,position,the,current,position,of,the,indexer,param,next,runnable,for,the,next,phase;protected,abstract,void,do,save,state,indexer,state,state,job,position,position,runnable,next
AsyncTwoPhaseIndexer -> protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;1547234098;Called periodically during the execution of a background job. Implementation_should persists the state somewhere and continue the execution asynchronously_using <code>next</code>.__@param state_The current state of the indexer_@param position_The current position of the indexer_@param next_Runnable for the next phase;protected abstract void doSaveState(IndexerState state, JobPosition position, Runnable next)_;called,periodically,during,the,execution,of,a,background,job,implementation,should,persists,the,state,somewhere,and,continue,the,execution,asynchronously,using,code,next,code,param,state,the,current,state,of,the,indexer,param,position,the,current,position,of,the,indexer,param,next,runnable,for,the,next,phase;protected,abstract,void,do,save,state,indexer,state,state,job,position,position,runnable,next
AsyncTwoPhaseIndexer -> protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;1535666657;Executes the {@link SearchRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The search request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;executes,the,link,search,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,search,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,search,search,request,request,action,listener,search,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;1541690928;Executes the {@link SearchRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The search request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;executes,the,link,search,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,search,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,search,search,request,request,action,listener,search,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;1543351570;Executes the {@link SearchRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The search request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;executes,the,link,search,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,search,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,search,search,request,request,action,listener,search,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;1545146193;Executes the {@link SearchRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The search request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;executes,the,link,search,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,search,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,search,search,request,request,action,listener,search,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;1547234098;Executes the {@link SearchRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The search request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextSearch(SearchRequest request, ActionListener<SearchResponse> nextPhase)_;executes,the,link,search,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,search,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,search,search,request,request,action,listener,search,response,next,phase
AsyncTwoPhaseIndexer -> public JobPosition getPosition();1535666657;Get the current position of the indexer.;public JobPosition getPosition() {_        return position.get()__    };get,the,current,position,of,the,indexer;public,job,position,get,position,return,position,get
AsyncTwoPhaseIndexer -> public JobPosition getPosition();1541690928;Get the current position of the indexer.;public JobPosition getPosition() {_        return position.get()__    };get,the,current,position,of,the,indexer;public,job,position,get,position,return,position,get
AsyncTwoPhaseIndexer -> public JobPosition getPosition();1543351570;Get the current position of the indexer.;public JobPosition getPosition() {_        return position.get()__    };get,the,current,position,of,the,indexer;public,job,position,get,position,return,position,get
AsyncTwoPhaseIndexer -> public JobPosition getPosition();1545146193;Get the current position of the indexer.;public JobPosition getPosition() {_        return position.get()__    };get,the,current,position,of,the,indexer;public,job,position,get,position,return,position,get
AsyncTwoPhaseIndexer -> public JobPosition getPosition();1547234098;Get the current position of the indexer.;public JobPosition getPosition() {_        return position.get()__    };get,the,current,position,of,the,indexer;public,job,position,get,position,return,position,get
AsyncTwoPhaseIndexer -> public synchronized boolean abort();1535666657;Sets the internal state to {@link IndexerState#ABORTING}. It returns false if_an async job is running in the background and in such case {@link #onAbort}_will be called as soon as the background job detects that the indexer is_aborted. If there is no job running when this function is called, it returns_true and {@link #onAbort()} will never be called.__@return true if the indexer is aborted, false if a background job is running_and abort is delayed.;public synchronized boolean abort() {_        IndexerState prevState = state.getAndUpdate((prev) -> IndexerState.ABORTING)__        return prevState == IndexerState.STOPPED || prevState == IndexerState.STARTED__    };sets,the,internal,state,to,link,indexer,state,aborting,it,returns,false,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,abort,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,aborted,if,there,is,no,job,running,when,this,function,is,called,it,returns,true,and,link,on,abort,will,never,be,called,return,true,if,the,indexer,is,aborted,false,if,a,background,job,is,running,and,abort,is,delayed;public,synchronized,boolean,abort,indexer,state,prev,state,state,get,and,update,prev,indexer,state,aborting,return,prev,state,indexer,state,stopped,prev,state,indexer,state,started
AsyncTwoPhaseIndexer -> public synchronized boolean abort();1541690928;Sets the internal state to {@link IndexerState#ABORTING}. It returns false if_an async job is running in the background and in such case {@link #onAbort}_will be called as soon as the background job detects that the indexer is_aborted. If there is no job running when this function is called, it returns_true and {@link #onAbort()} will never be called.__@return true if the indexer is aborted, false if a background job is running_and abort is delayed.;public synchronized boolean abort() {_        IndexerState prevState = state.getAndUpdate((prev) -> IndexerState.ABORTING)__        return prevState == IndexerState.STOPPED || prevState == IndexerState.STARTED__    };sets,the,internal,state,to,link,indexer,state,aborting,it,returns,false,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,abort,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,aborted,if,there,is,no,job,running,when,this,function,is,called,it,returns,true,and,link,on,abort,will,never,be,called,return,true,if,the,indexer,is,aborted,false,if,a,background,job,is,running,and,abort,is,delayed;public,synchronized,boolean,abort,indexer,state,prev,state,state,get,and,update,prev,indexer,state,aborting,return,prev,state,indexer,state,stopped,prev,state,indexer,state,started
AsyncTwoPhaseIndexer -> public synchronized boolean abort();1543351570;Sets the internal state to {@link IndexerState#ABORTING}. It returns false if_an async job is running in the background and in such case {@link #onAbort}_will be called as soon as the background job detects that the indexer is_aborted. If there is no job running when this function is called, it returns_true and {@link #onAbort()} will never be called.__@return true if the indexer is aborted, false if a background job is running_and abort is delayed.;public synchronized boolean abort() {_        IndexerState prevState = state.getAndUpdate((prev) -> IndexerState.ABORTING)__        return prevState == IndexerState.STOPPED || prevState == IndexerState.STARTED__    };sets,the,internal,state,to,link,indexer,state,aborting,it,returns,false,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,abort,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,aborted,if,there,is,no,job,running,when,this,function,is,called,it,returns,true,and,link,on,abort,will,never,be,called,return,true,if,the,indexer,is,aborted,false,if,a,background,job,is,running,and,abort,is,delayed;public,synchronized,boolean,abort,indexer,state,prev,state,state,get,and,update,prev,indexer,state,aborting,return,prev,state,indexer,state,stopped,prev,state,indexer,state,started
AsyncTwoPhaseIndexer -> public synchronized boolean abort();1545146193;Sets the internal state to {@link IndexerState#ABORTING}. It returns false if_an async job is running in the background and in such case {@link #onAbort}_will be called as soon as the background job detects that the indexer is_aborted. If there is no job running when this function is called, it returns_true and {@link #onAbort()} will never be called.__@return true if the indexer is aborted, false if a background job is running_and abort is delayed.;public synchronized boolean abort() {_        IndexerState prevState = state.getAndUpdate((prev) -> IndexerState.ABORTING)__        return prevState == IndexerState.STOPPED || prevState == IndexerState.STARTED__    };sets,the,internal,state,to,link,indexer,state,aborting,it,returns,false,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,abort,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,aborted,if,there,is,no,job,running,when,this,function,is,called,it,returns,true,and,link,on,abort,will,never,be,called,return,true,if,the,indexer,is,aborted,false,if,a,background,job,is,running,and,abort,is,delayed;public,synchronized,boolean,abort,indexer,state,prev,state,state,get,and,update,prev,indexer,state,aborting,return,prev,state,indexer,state,stopped,prev,state,indexer,state,started
AsyncTwoPhaseIndexer -> public synchronized boolean abort();1547234098;Sets the internal state to {@link IndexerState#ABORTING}. It returns false if_an async job is running in the background and in such case {@link #onAbort}_will be called as soon as the background job detects that the indexer is_aborted. If there is no job running when this function is called, it returns_true and {@link #onAbort()} will never be called.__@return true if the indexer is aborted, false if a background job is running_and abort is delayed.;public synchronized boolean abort() {_        IndexerState prevState = state.getAndUpdate((prev) -> IndexerState.ABORTING)__        return prevState == IndexerState.STOPPED || prevState == IndexerState.STARTED__    };sets,the,internal,state,to,link,indexer,state,aborting,it,returns,false,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,abort,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,aborted,if,there,is,no,job,running,when,this,function,is,called,it,returns,true,and,link,on,abort,will,never,be,called,return,true,if,the,indexer,is,aborted,false,if,a,background,job,is,running,and,abort,is,delayed;public,synchronized,boolean,abort,indexer,state,prev,state,state,get,and,update,prev,indexer,state,aborting,return,prev,state,indexer,state,stopped,prev,state,indexer,state,started
AsyncTwoPhaseIndexer -> protected abstract String getJobId()_;1535666657;Called to get the Id of the job, used for logging.__@return a string with the id of the job;protected abstract String getJobId()_;called,to,get,the,id,of,the,job,used,for,logging,return,a,string,with,the,id,of,the,job;protected,abstract,string,get,job,id
AsyncTwoPhaseIndexer -> protected abstract String getJobId()_;1541690928;Called to get the Id of the job, used for logging.__@return a string with the id of the job;protected abstract String getJobId()_;called,to,get,the,id,of,the,job,used,for,logging,return,a,string,with,the,id,of,the,job;protected,abstract,string,get,job,id
AsyncTwoPhaseIndexer -> protected abstract String getJobId()_;1543351570;Called to get the Id of the job, used for logging.__@return a string with the id of the job;protected abstract String getJobId()_;called,to,get,the,id,of,the,job,used,for,logging,return,a,string,with,the,id,of,the,job;protected,abstract,string,get,job,id
AsyncTwoPhaseIndexer -> protected abstract String getJobId()_;1545146193;Called to get the Id of the job, used for logging.__@return a string with the id of the job;protected abstract String getJobId()_;called,to,get,the,id,of,the,job,used,for,logging,return,a,string,with,the,id,of,the,job;protected,abstract,string,get,job,id
AsyncTwoPhaseIndexer -> protected abstract String getJobId()_;1547234098;Called to get the Id of the job, used for logging.__@return a string with the id of the job;protected abstract String getJobId()_;called,to,get,the,id,of,the,job,used,for,logging,return,a,string,with,the,id,of,the,job;protected,abstract,string,get,job,id
AsyncTwoPhaseIndexer -> private boolean checkState(IndexerState currentState);1535666657;Checks the {@link IndexerState} and returns false if the execution should be_stopped.;private boolean checkState(IndexerState currentState) {_        switch (currentState) {_        case INDEXING:_            _            return true___        case STOPPING:_            logger.info("Indexer job encountered [" + IndexerState.STOPPING + "] state, halting indexer.")__            doSaveState(finishAndSetState(), getPosition(), () -> {_            })__            return false___        case STOPPED:_            return false___        case ABORTING:_            logger.info("Requested shutdown of indexer for job [" + getJobId() + "]")__            onAbort()__            return false___        default:_            _            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Indexer job encountered an illegal state [" + currentState + "]")__        }_    };checks,the,link,indexer,state,and,returns,false,if,the,execution,should,be,stopped;private,boolean,check,state,indexer,state,current,state,switch,current,state,case,indexing,return,true,case,stopping,logger,info,indexer,job,encountered,indexer,state,stopping,state,halting,indexer,do,save,state,finish,and,set,state,get,position,return,false,case,stopped,return,false,case,aborting,logger,info,requested,shutdown,of,indexer,for,job,get,job,id,on,abort,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,indexer,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> private boolean checkState(IndexerState currentState);1541690928;Checks the {@link IndexerState} and returns false if the execution should be_stopped.;private boolean checkState(IndexerState currentState) {_        switch (currentState) {_        case INDEXING:_            _            return true___        case STOPPING:_            logger.info("Indexer job encountered [" + IndexerState.STOPPING + "] state, halting indexer.")__            doSaveState(finishAndSetState(), getPosition(), () -> {_            })__            return false___        case STOPPED:_            return false___        case ABORTING:_            logger.info("Requested shutdown of indexer for job [" + getJobId() + "]")__            onAbort()__            return false___        default:_            _            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Indexer job encountered an illegal state [" + currentState + "]")__        }_    };checks,the,link,indexer,state,and,returns,false,if,the,execution,should,be,stopped;private,boolean,check,state,indexer,state,current,state,switch,current,state,case,indexing,return,true,case,stopping,logger,info,indexer,job,encountered,indexer,state,stopping,state,halting,indexer,do,save,state,finish,and,set,state,get,position,return,false,case,stopped,return,false,case,aborting,logger,info,requested,shutdown,of,indexer,for,job,get,job,id,on,abort,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,indexer,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> private boolean checkState(IndexerState currentState);1543351570;Checks the {@link IndexerState} and returns false if the execution should be_stopped.;private boolean checkState(IndexerState currentState) {_        switch (currentState) {_        case INDEXING:_            _            return true___        case STOPPING:_            logger.info("Indexer job encountered [" + IndexerState.STOPPING + "] state, halting indexer.")__            doSaveState(finishAndSetState(), getPosition(), () -> {_            })__            return false___        case STOPPED:_            return false___        case ABORTING:_            logger.info("Requested shutdown of indexer for job [" + getJobId() + "]")__            onAbort()__            return false___        default:_            _            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Indexer job encountered an illegal state [" + currentState + "]")__        }_    };checks,the,link,indexer,state,and,returns,false,if,the,execution,should,be,stopped;private,boolean,check,state,indexer,state,current,state,switch,current,state,case,indexing,return,true,case,stopping,logger,info,indexer,job,encountered,indexer,state,stopping,state,halting,indexer,do,save,state,finish,and,set,state,get,position,return,false,case,stopped,return,false,case,aborting,logger,info,requested,shutdown,of,indexer,for,job,get,job,id,on,abort,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,indexer,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> private boolean checkState(IndexerState currentState);1545146193;Checks the {@link IndexerState} and returns false if the execution should be_stopped.;private boolean checkState(IndexerState currentState) {_        switch (currentState) {_        case INDEXING:_            _            return true___        case STOPPING:_            logger.info("Indexer job encountered [" + IndexerState.STOPPING + "] state, halting indexer.")__            doSaveState(finishAndSetState(), getPosition(), () -> {_            })__            return false___        case STOPPED:_            return false___        case ABORTING:_            logger.info("Requested shutdown of indexer for job [" + getJobId() + "]")__            onAbort()__            return false___        default:_            _            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Indexer job encountered an illegal state [" + currentState + "]")__        }_    };checks,the,link,indexer,state,and,returns,false,if,the,execution,should,be,stopped;private,boolean,check,state,indexer,state,current,state,switch,current,state,case,indexing,return,true,case,stopping,logger,info,indexer,job,encountered,indexer,state,stopping,state,halting,indexer,do,save,state,finish,and,set,state,get,position,return,false,case,stopped,return,false,case,aborting,logger,info,requested,shutdown,of,indexer,for,job,get,job,id,on,abort,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,indexer,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> private boolean checkState(IndexerState currentState);1547234098;Checks the {@link IndexerState} and returns false if the execution should be_stopped.;private boolean checkState(IndexerState currentState) {_        switch (currentState) {_        case INDEXING:_            _            return true___        case STOPPING:_            logger.info("Indexer job encountered [" + IndexerState.STOPPING + "] state, halting indexer.")__            doSaveState(finishAndSetState(), getPosition(), () -> {})__            return false___        case STOPPED:_            return false___        case ABORTING:_            logger.info("Requested shutdown of indexer for job [" + getJobId() + "]")__            onAbort()__            return false___        default:_            _            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Indexer job encountered an illegal state [" + currentState + "]")__        }_    };checks,the,link,indexer,state,and,returns,false,if,the,execution,should,be,stopped;private,boolean,check,state,indexer,state,current,state,switch,current,state,case,indexing,return,true,case,stopping,logger,info,indexer,job,encountered,indexer,state,stopping,state,halting,indexer,do,save,state,finish,and,set,state,get,position,return,false,case,stopped,return,false,case,aborting,logger,info,requested,shutdown,of,indexer,for,job,get,job,id,on,abort,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,indexer,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> public synchronized IndexerState stop();1535666657;Sets the internal state to {@link IndexerState#STOPPING} if an async job is_running in the background and in such case {@link #onFinish()} will be called_as soon as the background job detects that the indexer is stopped. If there_is no job running when this function is called, the state is directly set to_{@link IndexerState#STOPPED} and {@link #onFinish()} will never be called.__@return The new state for the indexer (STOPPED, STOPPING or ABORTING if the_job was already aborted).;public synchronized IndexerState stop() {_        IndexerState currentState = state.updateAndGet(previousState -> {_            if (previousState == IndexerState.INDEXING) {_                return IndexerState.STOPPING__            } else if (previousState == IndexerState.STARTED) {_                return IndexerState.STOPPED__            } else {_                return previousState__            }_        })__        return currentState__    };sets,the,internal,state,to,link,indexer,state,stopping,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,finish,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,stopped,if,there,is,no,job,running,when,this,function,is,called,the,state,is,directly,set,to,link,indexer,state,stopped,and,link,on,finish,will,never,be,called,return,the,new,state,for,the,indexer,stopped,stopping,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,stop,indexer,state,current,state,state,update,and,get,previous,state,if,previous,state,indexer,state,indexing,return,indexer,state,stopping,else,if,previous,state,indexer,state,started,return,indexer,state,stopped,else,return,previous,state,return,current,state
AsyncTwoPhaseIndexer -> public synchronized IndexerState stop();1541690928;Sets the internal state to {@link IndexerState#STOPPING} if an async job is_running in the background and in such case {@link #onFinish()} will be called_as soon as the background job detects that the indexer is stopped. If there_is no job running when this function is called, the state is directly set to_{@link IndexerState#STOPPED} and {@link #onFinish()} will never be called.__@return The new state for the indexer (STOPPED, STOPPING or ABORTING if the_job was already aborted).;public synchronized IndexerState stop() {_        IndexerState currentState = state.updateAndGet(previousState -> {_            if (previousState == IndexerState.INDEXING) {_                return IndexerState.STOPPING__            } else if (previousState == IndexerState.STARTED) {_                return IndexerState.STOPPED__            } else {_                return previousState__            }_        })__        return currentState__    };sets,the,internal,state,to,link,indexer,state,stopping,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,finish,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,stopped,if,there,is,no,job,running,when,this,function,is,called,the,state,is,directly,set,to,link,indexer,state,stopped,and,link,on,finish,will,never,be,called,return,the,new,state,for,the,indexer,stopped,stopping,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,stop,indexer,state,current,state,state,update,and,get,previous,state,if,previous,state,indexer,state,indexing,return,indexer,state,stopping,else,if,previous,state,indexer,state,started,return,indexer,state,stopped,else,return,previous,state,return,current,state
AsyncTwoPhaseIndexer -> public synchronized IndexerState stop();1543351570;Sets the internal state to {@link IndexerState#STOPPING} if an async job is_running in the background and in such case {@link #onFinish()} will be called_as soon as the background job detects that the indexer is stopped. If there_is no job running when this function is called, the state is directly set to_{@link IndexerState#STOPPED} and {@link #onFinish()} will never be called.__@return The new state for the indexer (STOPPED, STOPPING or ABORTING if the_job was already aborted).;public synchronized IndexerState stop() {_        IndexerState currentState = state.updateAndGet(previousState -> {_            if (previousState == IndexerState.INDEXING) {_                return IndexerState.STOPPING__            } else if (previousState == IndexerState.STARTED) {_                return IndexerState.STOPPED__            } else {_                return previousState__            }_        })__        return currentState__    };sets,the,internal,state,to,link,indexer,state,stopping,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,finish,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,stopped,if,there,is,no,job,running,when,this,function,is,called,the,state,is,directly,set,to,link,indexer,state,stopped,and,link,on,finish,will,never,be,called,return,the,new,state,for,the,indexer,stopped,stopping,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,stop,indexer,state,current,state,state,update,and,get,previous,state,if,previous,state,indexer,state,indexing,return,indexer,state,stopping,else,if,previous,state,indexer,state,started,return,indexer,state,stopped,else,return,previous,state,return,current,state
AsyncTwoPhaseIndexer -> public synchronized IndexerState stop();1545146193;Sets the internal state to {@link IndexerState#STOPPING} if an async job is_running in the background and in such case {@link #onFinish()} will be called_as soon as the background job detects that the indexer is stopped. If there_is no job running when this function is called, the state is directly set to_{@link IndexerState#STOPPED} and {@link #onFinish()} will never be called.__@return The new state for the indexer (STOPPED, STOPPING or ABORTING if the_job was already aborted).;public synchronized IndexerState stop() {_        IndexerState currentState = state.updateAndGet(previousState -> {_            if (previousState == IndexerState.INDEXING) {_                return IndexerState.STOPPING__            } else if (previousState == IndexerState.STARTED) {_                return IndexerState.STOPPED__            } else {_                return previousState__            }_        })__        return currentState__    };sets,the,internal,state,to,link,indexer,state,stopping,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,finish,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,stopped,if,there,is,no,job,running,when,this,function,is,called,the,state,is,directly,set,to,link,indexer,state,stopped,and,link,on,finish,will,never,be,called,return,the,new,state,for,the,indexer,stopped,stopping,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,stop,indexer,state,current,state,state,update,and,get,previous,state,if,previous,state,indexer,state,indexing,return,indexer,state,stopping,else,if,previous,state,indexer,state,started,return,indexer,state,stopped,else,return,previous,state,return,current,state
AsyncTwoPhaseIndexer -> public synchronized IndexerState stop();1547234098;Sets the internal state to {@link IndexerState#STOPPING} if an async job is_running in the background and in such case {@link #onFinish()} will be called_as soon as the background job detects that the indexer is stopped. If there_is no job running when this function is called, the state is directly set to_{@link IndexerState#STOPPED} and {@link #onFinish()} will never be called.__@return The new state for the indexer (STOPPED, STOPPING or ABORTING if the_job was already aborted).;public synchronized IndexerState stop() {_        IndexerState currentState = state.updateAndGet(previousState -> {_            if (previousState == IndexerState.INDEXING) {_                return IndexerState.STOPPING__            } else if (previousState == IndexerState.STARTED) {_                return IndexerState.STOPPED__            } else {_                return previousState__            }_        })__        return currentState__    };sets,the,internal,state,to,link,indexer,state,stopping,if,an,async,job,is,running,in,the,background,and,in,such,case,link,on,finish,will,be,called,as,soon,as,the,background,job,detects,that,the,indexer,is,stopped,if,there,is,no,job,running,when,this,function,is,called,the,state,is,directly,set,to,link,indexer,state,stopped,and,link,on,finish,will,never,be,called,return,the,new,state,for,the,indexer,stopped,stopping,or,aborting,if,the,job,was,already,aborted;public,synchronized,indexer,state,stop,indexer,state,current,state,state,update,and,get,previous,state,if,previous,state,indexer,state,indexing,return,indexer,state,stopping,else,if,previous,state,indexer,state,started,return,indexer,state,stopped,else,return,previous,state,return,current,state
AsyncTwoPhaseIndexer -> protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;1535666657;Called to process a response from the 1 search request in order to turn it into a {@link IterationResult}.__@param searchResponse response from the search phase._@return Iteration object to be passed to indexing phase.;protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;called,to,process,a,response,from,the,1,search,request,in,order,to,turn,it,into,a,link,iteration,result,param,search,response,response,from,the,search,phase,return,iteration,object,to,be,passed,to,indexing,phase;protected,abstract,iteration,result,job,position,do,process,search,response,search,response
AsyncTwoPhaseIndexer -> protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;1541690928;Called to process a response from the 1 search request in order to turn it into a {@link IterationResult}.__@param searchResponse response from the search phase._@return Iteration object to be passed to indexing phase.;protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;called,to,process,a,response,from,the,1,search,request,in,order,to,turn,it,into,a,link,iteration,result,param,search,response,response,from,the,search,phase,return,iteration,object,to,be,passed,to,indexing,phase;protected,abstract,iteration,result,job,position,do,process,search,response,search,response
AsyncTwoPhaseIndexer -> protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;1543351570;Called to process a response from the 1 search request in order to turn it into a {@link IterationResult}.__@param searchResponse response from the search phase._@return Iteration object to be passed to indexing phase.;protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;called,to,process,a,response,from,the,1,search,request,in,order,to,turn,it,into,a,link,iteration,result,param,search,response,response,from,the,search,phase,return,iteration,object,to,be,passed,to,indexing,phase;protected,abstract,iteration,result,job,position,do,process,search,response,search,response
AsyncTwoPhaseIndexer -> protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;1545146193;Called to process a response from the 1 search request in order to turn it into a {@link IterationResult}.__@param searchResponse response from the search phase._@return Iteration object to be passed to indexing phase.;protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;called,to,process,a,response,from,the,1,search,request,in,order,to,turn,it,into,a,link,iteration,result,param,search,response,response,from,the,search,phase,return,iteration,object,to,be,passed,to,indexing,phase;protected,abstract,iteration,result,job,position,do,process,search,response,search,response
AsyncTwoPhaseIndexer -> protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;1547234098;Called to process a response from the 1 search request in order to turn it into a {@link IterationResult}.__@param searchResponse response from the search phase._@return Iteration object to be passed to indexing phase.;protected abstract IterationResult<JobPosition> doProcess(SearchResponse searchResponse)_;called,to,process,a,response,from,the,1,search,request,in,order,to,turn,it,into,a,link,iteration,result,param,search,response,response,from,the,search,phase,return,iteration,object,to,be,passed,to,indexing,phase;protected,abstract,iteration,result,job,position,do,process,search,response,search,response
AsyncTwoPhaseIndexer -> public IndexerState getState();1535666657;Get the current state of the indexer.;public IndexerState getState() {_        return state.get()__    };get,the,current,state,of,the,indexer;public,indexer,state,get,state,return,state,get
AsyncTwoPhaseIndexer -> public IndexerState getState();1541690928;Get the current state of the indexer.;public IndexerState getState() {_        return state.get()__    };get,the,current,state,of,the,indexer;public,indexer,state,get,state,return,state,get
AsyncTwoPhaseIndexer -> public IndexerState getState();1543351570;Get the current state of the indexer.;public IndexerState getState() {_        return state.get()__    };get,the,current,state,of,the,indexer;public,indexer,state,get,state,return,state,get
AsyncTwoPhaseIndexer -> public IndexerState getState();1545146193;Get the current state of the indexer.;public IndexerState getState() {_        return state.get()__    };get,the,current,state,of,the,indexer;public,indexer,state,get,state,return,state,get
AsyncTwoPhaseIndexer -> public IndexerState getState();1547234098;Get the current state of the indexer.;public IndexerState getState() {_        return state.get()__    };get,the,current,state,of,the,indexer;public,indexer,state,get,state,return,state,get
AsyncTwoPhaseIndexer -> public synchronized boolean maybeTriggerAsyncJob(long now);1535666657;Triggers a background job that builds the index asynchronously iff_there is no other job that runs and the indexer is started_({@link IndexerState#STARTED}.__@param now_The current time in milliseconds (used to limit the job to_complete buckets)_@return true if a job has been triggered, false otherwise;public synchronized boolean maybeTriggerAsyncJob(long now) {_        final IndexerState currentState = state.get()__        switch (currentState) {_        case INDEXING:_        case STOPPING:_        case ABORTING:_            logger.warn("Schedule was triggered for job [" + getJobId() + "], but prior indexer is still running.")__            return false___        case STOPPED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "] but job is stopped.  Ignoring trigger.")__            return false___        case STARTED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "], state: [" + currentState + "]")__            stats.incrementNumInvocations(1)__            onStartJob(now)___            if (state.compareAndSet(IndexerState.STARTED, IndexerState.INDEXING)) {_                _                executor.execute(() -> doNextSearch(buildSearchRequest(),_                        ActionListener.wrap(this::onSearchResponse, exc -> finishWithFailure(exc))))__                logger.debug("Beginning to index [" + getJobId() + "], state: [" + currentState + "]")__                return true__            } else {_                logger.debug("Could not move from STARTED to INDEXING state because current state is [" + state.get() + "]")__                return false__            }__        default:_            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Job encountered an illegal state [" + currentState + "]")__        }_    };triggers,a,background,job,that,builds,the,index,asynchronously,iff,there,is,no,other,job,that,runs,and,the,indexer,is,started,link,indexer,state,started,param,now,the,current,time,in,milliseconds,used,to,limit,the,job,to,complete,buckets,return,true,if,a,job,has,been,triggered,false,otherwise;public,synchronized,boolean,maybe,trigger,async,job,long,now,final,indexer,state,current,state,state,get,switch,current,state,case,indexing,case,stopping,case,aborting,logger,warn,schedule,was,triggered,for,job,get,job,id,but,prior,indexer,is,still,running,return,false,case,stopped,logger,debug,schedule,was,triggered,for,job,get,job,id,but,job,is,stopped,ignoring,trigger,return,false,case,started,logger,debug,schedule,was,triggered,for,job,get,job,id,state,current,state,stats,increment,num,invocations,1,on,start,job,now,if,state,compare,and,set,indexer,state,started,indexer,state,indexing,executor,execute,do,next,search,build,search,request,action,listener,wrap,this,on,search,response,exc,finish,with,failure,exc,logger,debug,beginning,to,index,get,job,id,state,current,state,return,true,else,logger,debug,could,not,move,from,started,to,indexing,state,because,current,state,is,state,get,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> public synchronized boolean maybeTriggerAsyncJob(long now);1541690928;Triggers a background job that builds the index asynchronously iff_there is no other job that runs and the indexer is started_({@link IndexerState#STARTED}.__@param now_The current time in milliseconds (used to limit the job to_complete buckets)_@return true if a job has been triggered, false otherwise;public synchronized boolean maybeTriggerAsyncJob(long now) {_        final IndexerState currentState = state.get()__        switch (currentState) {_        case INDEXING:_        case STOPPING:_        case ABORTING:_            logger.warn("Schedule was triggered for job [" + getJobId() + "], but prior indexer is still running.")__            return false___        case STOPPED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "] but job is stopped.  Ignoring trigger.")__            return false___        case STARTED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "], state: [" + currentState + "]")__            stats.incrementNumInvocations(1)__            onStartJob(now)___            if (state.compareAndSet(IndexerState.STARTED, IndexerState.INDEXING)) {_                _                executor.execute(() -> {_                    try {_                        doNextSearch(buildSearchRequest(), ActionListener.wrap(this::onSearchResponse, exc -> finishWithFailure(exc)))__                    } catch (Exception e) {_                        finishWithFailure(e)__                    }_                })__                logger.debug("Beginning to index [" + getJobId() + "], state: [" + currentState + "]")__                return true__            } else {_                logger.debug("Could not move from STARTED to INDEXING state because current state is [" + state.get() + "]")__                return false__            }__        default:_            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Job encountered an illegal state [" + currentState + "]")__        }_    };triggers,a,background,job,that,builds,the,index,asynchronously,iff,there,is,no,other,job,that,runs,and,the,indexer,is,started,link,indexer,state,started,param,now,the,current,time,in,milliseconds,used,to,limit,the,job,to,complete,buckets,return,true,if,a,job,has,been,triggered,false,otherwise;public,synchronized,boolean,maybe,trigger,async,job,long,now,final,indexer,state,current,state,state,get,switch,current,state,case,indexing,case,stopping,case,aborting,logger,warn,schedule,was,triggered,for,job,get,job,id,but,prior,indexer,is,still,running,return,false,case,stopped,logger,debug,schedule,was,triggered,for,job,get,job,id,but,job,is,stopped,ignoring,trigger,return,false,case,started,logger,debug,schedule,was,triggered,for,job,get,job,id,state,current,state,stats,increment,num,invocations,1,on,start,job,now,if,state,compare,and,set,indexer,state,started,indexer,state,indexing,executor,execute,try,do,next,search,build,search,request,action,listener,wrap,this,on,search,response,exc,finish,with,failure,exc,catch,exception,e,finish,with,failure,e,logger,debug,beginning,to,index,get,job,id,state,current,state,return,true,else,logger,debug,could,not,move,from,started,to,indexing,state,because,current,state,is,state,get,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> public synchronized boolean maybeTriggerAsyncJob(long now);1543351570;Triggers a background job that builds the index asynchronously iff_there is no other job that runs and the indexer is started_({@link IndexerState#STARTED}.__@param now_The current time in milliseconds (used to limit the job to_complete buckets)_@return true if a job has been triggered, false otherwise;public synchronized boolean maybeTriggerAsyncJob(long now) {_        final IndexerState currentState = state.get()__        switch (currentState) {_        case INDEXING:_        case STOPPING:_        case ABORTING:_            logger.warn("Schedule was triggered for job [" + getJobId() + "], but prior indexer is still running.")__            return false___        case STOPPED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "] but job is stopped.  Ignoring trigger.")__            return false___        case STARTED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "], state: [" + currentState + "]")__            stats.incrementNumInvocations(1)__            onStartJob(now)___            if (state.compareAndSet(IndexerState.STARTED, IndexerState.INDEXING)) {_                _                executor.execute(() -> {_                    try {_                        stats.markStartSearch()__                        doNextSearch(buildSearchRequest(), ActionListener.wrap(this::onSearchResponse, this::finishWithSearchFailure))__                    } catch (Exception e) {_                        finishWithSearchFailure(e)__                    }_                })__                logger.debug("Beginning to index [" + getJobId() + "], state: [" + currentState + "]")__                return true__            } else {_                logger.debug("Could not move from STARTED to INDEXING state because current state is [" + state.get() + "]")__                return false__            }__        default:_            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Job encountered an illegal state [" + currentState + "]")__        }_    };triggers,a,background,job,that,builds,the,index,asynchronously,iff,there,is,no,other,job,that,runs,and,the,indexer,is,started,link,indexer,state,started,param,now,the,current,time,in,milliseconds,used,to,limit,the,job,to,complete,buckets,return,true,if,a,job,has,been,triggered,false,otherwise;public,synchronized,boolean,maybe,trigger,async,job,long,now,final,indexer,state,current,state,state,get,switch,current,state,case,indexing,case,stopping,case,aborting,logger,warn,schedule,was,triggered,for,job,get,job,id,but,prior,indexer,is,still,running,return,false,case,stopped,logger,debug,schedule,was,triggered,for,job,get,job,id,but,job,is,stopped,ignoring,trigger,return,false,case,started,logger,debug,schedule,was,triggered,for,job,get,job,id,state,current,state,stats,increment,num,invocations,1,on,start,job,now,if,state,compare,and,set,indexer,state,started,indexer,state,indexing,executor,execute,try,stats,mark,start,search,do,next,search,build,search,request,action,listener,wrap,this,on,search,response,this,finish,with,search,failure,catch,exception,e,finish,with,search,failure,e,logger,debug,beginning,to,index,get,job,id,state,current,state,return,true,else,logger,debug,could,not,move,from,started,to,indexing,state,because,current,state,is,state,get,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> public synchronized boolean maybeTriggerAsyncJob(long now);1545146193;Triggers a background job that builds the index asynchronously iff_there is no other job that runs and the indexer is started_({@link IndexerState#STARTED}.__@param now_The current time in milliseconds (used to limit the job to_complete buckets)_@return true if a job has been triggered, false otherwise;public synchronized boolean maybeTriggerAsyncJob(long now) {_        final IndexerState currentState = state.get()__        switch (currentState) {_        case INDEXING:_        case STOPPING:_        case ABORTING:_            logger.warn("Schedule was triggered for job [" + getJobId() + "], but prior indexer is still running.")__            return false___        case STOPPED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "] but job is stopped.  Ignoring trigger.")__            return false___        case STARTED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "], state: [" + currentState + "]")__            stats.incrementNumInvocations(1)__            onStartJob(now)___            if (state.compareAndSet(IndexerState.STARTED, IndexerState.INDEXING)) {_                _                executor.execute(() -> {_                    try {_                        stats.markStartSearch()__                        doNextSearch(buildSearchRequest(), ActionListener.wrap(this::onSearchResponse, this::finishWithSearchFailure))__                    } catch (Exception e) {_                        finishWithSearchFailure(e)__                    }_                })__                logger.debug("Beginning to index [" + getJobId() + "], state: [" + currentState + "]")__                return true__            } else {_                logger.debug("Could not move from STARTED to INDEXING state because current state is [" + state.get() + "]")__                return false__            }__        default:_            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Job encountered an illegal state [" + currentState + "]")__        }_    };triggers,a,background,job,that,builds,the,index,asynchronously,iff,there,is,no,other,job,that,runs,and,the,indexer,is,started,link,indexer,state,started,param,now,the,current,time,in,milliseconds,used,to,limit,the,job,to,complete,buckets,return,true,if,a,job,has,been,triggered,false,otherwise;public,synchronized,boolean,maybe,trigger,async,job,long,now,final,indexer,state,current,state,state,get,switch,current,state,case,indexing,case,stopping,case,aborting,logger,warn,schedule,was,triggered,for,job,get,job,id,but,prior,indexer,is,still,running,return,false,case,stopped,logger,debug,schedule,was,triggered,for,job,get,job,id,but,job,is,stopped,ignoring,trigger,return,false,case,started,logger,debug,schedule,was,triggered,for,job,get,job,id,state,current,state,stats,increment,num,invocations,1,on,start,job,now,if,state,compare,and,set,indexer,state,started,indexer,state,indexing,executor,execute,try,stats,mark,start,search,do,next,search,build,search,request,action,listener,wrap,this,on,search,response,this,finish,with,search,failure,catch,exception,e,finish,with,search,failure,e,logger,debug,beginning,to,index,get,job,id,state,current,state,return,true,else,logger,debug,could,not,move,from,started,to,indexing,state,because,current,state,is,state,get,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> public synchronized boolean maybeTriggerAsyncJob(long now);1547234098;Triggers a background job that builds the index asynchronously iff_there is no other job that runs and the indexer is started_({@link IndexerState#STARTED}.__@param now_The current time in milliseconds (used to limit the job to_complete buckets)_@return true if a job has been triggered, false otherwise;public synchronized boolean maybeTriggerAsyncJob(long now) {_        final IndexerState currentState = state.get()__        switch (currentState) {_        case INDEXING:_        case STOPPING:_        case ABORTING:_            logger.warn("Schedule was triggered for job [" + getJobId() + "], but prior indexer is still running " +_                "(with state [" + currentState + "]")__            return false___        case STOPPED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "] but job is stopped.  Ignoring trigger.")__            return false___        case STARTED:_            logger.debug("Schedule was triggered for job [" + getJobId() + "], state: [" + currentState + "]")__            stats.incrementNumInvocations(1)__            onStartJob(now)___            if (state.compareAndSet(IndexerState.STARTED, IndexerState.INDEXING)) {_                _                executor.execute(() -> {_                    try {_                        stats.markStartSearch()__                        doNextSearch(buildSearchRequest(), ActionListener.wrap(this::onSearchResponse, this::finishWithSearchFailure))__                    } catch (Exception e) {_                        finishWithSearchFailure(e)__                    }_                })__                logger.debug("Beginning to index [" + getJobId() + "], state: [" + currentState + "]")__                return true__            } else {_                logger.debug("Could not move from STARTED to INDEXING state because current state is [" + state.get() + "]")__                return false__            }__        default:_            logger.warn("Encountered unexpected state [" + currentState + "] while indexing")__            throw new IllegalStateException("Job encountered an illegal state [" + currentState + "]")__        }_    };triggers,a,background,job,that,builds,the,index,asynchronously,iff,there,is,no,other,job,that,runs,and,the,indexer,is,started,link,indexer,state,started,param,now,the,current,time,in,milliseconds,used,to,limit,the,job,to,complete,buckets,return,true,if,a,job,has,been,triggered,false,otherwise;public,synchronized,boolean,maybe,trigger,async,job,long,now,final,indexer,state,current,state,state,get,switch,current,state,case,indexing,case,stopping,case,aborting,logger,warn,schedule,was,triggered,for,job,get,job,id,but,prior,indexer,is,still,running,with,state,current,state,return,false,case,stopped,logger,debug,schedule,was,triggered,for,job,get,job,id,but,job,is,stopped,ignoring,trigger,return,false,case,started,logger,debug,schedule,was,triggered,for,job,get,job,id,state,current,state,stats,increment,num,invocations,1,on,start,job,now,if,state,compare,and,set,indexer,state,started,indexer,state,indexing,executor,execute,try,stats,mark,start,search,do,next,search,build,search,request,action,listener,wrap,this,on,search,response,this,finish,with,search,failure,catch,exception,e,finish,with,search,failure,e,logger,debug,beginning,to,index,get,job,id,state,current,state,return,true,else,logger,debug,could,not,move,from,started,to,indexing,state,because,current,state,is,state,get,return,false,default,logger,warn,encountered,unexpected,state,current,state,while,indexing,throw,new,illegal,state,exception,job,encountered,an,illegal,state,current,state
AsyncTwoPhaseIndexer -> protected abstract void onFinish()_;1535666657;Called when a background job finishes.;protected abstract void onFinish()_;called,when,a,background,job,finishes;protected,abstract,void,on,finish
AsyncTwoPhaseIndexer -> protected abstract void onFinish()_;1541690928;Called when a background job finishes.;protected abstract void onFinish()_;called,when,a,background,job,finishes;protected,abstract,void,on,finish
AsyncTwoPhaseIndexer -> protected abstract void onFinish()_;1543351570;Called when a background job finishes.;protected abstract void onFinish()_;called,when,a,background,job,finishes;protected,abstract,void,on,finish
AsyncTwoPhaseIndexer -> protected abstract void onFinish()_;1545146193;Called when a background job finishes.;protected abstract void onFinish()_;called,when,a,background,job,finishes;protected,abstract,void,on,finish
AsyncTwoPhaseIndexer -> protected abstract void onFinish()_;1547234098;Called when a background job finishes.;protected abstract void onFinish()_;called,when,a,background,job,finishes;protected,abstract,void,on,finish
AsyncTwoPhaseIndexer -> protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;1535666657;Executes the {@link BulkRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The bulk request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;executes,the,link,bulk,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,bulk,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,bulk,bulk,request,request,action,listener,bulk,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;1541690928;Executes the {@link BulkRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The bulk request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;executes,the,link,bulk,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,bulk,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,bulk,bulk,request,request,action,listener,bulk,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;1543351570;Executes the {@link BulkRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The bulk request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;executes,the,link,bulk,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,bulk,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,bulk,bulk,request,request,action,listener,bulk,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;1545146193;Executes the {@link BulkRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The bulk request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;executes,the,link,bulk,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,bulk,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,bulk,bulk,request,request,action,listener,bulk,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;1547234098;Executes the {@link BulkRequest} and calls <code>nextPhase</code> with the_response or the exception if an error occurs.__@param request_The bulk request to execute_@param nextPhase_Listener for the next phase;protected abstract void doNextBulk(BulkRequest request, ActionListener<BulkResponse> nextPhase)_;executes,the,link,bulk,request,and,calls,code,next,phase,code,with,the,response,or,the,exception,if,an,error,occurs,param,request,the,bulk,request,to,execute,param,next,phase,listener,for,the,next,phase;protected,abstract,void,do,next,bulk,bulk,request,request,action,listener,bulk,response,next,phase
AsyncTwoPhaseIndexer -> protected abstract SearchRequest buildSearchRequest()_;1535666657;Called to build the next search request.__@return SearchRequest to be passed to the search phase.;protected abstract SearchRequest buildSearchRequest()_;called,to,build,the,next,search,request,return,search,request,to,be,passed,to,the,search,phase;protected,abstract,search,request,build,search,request
AsyncTwoPhaseIndexer -> protected abstract SearchRequest buildSearchRequest()_;1541690928;Called to build the next search request.__@return SearchRequest to be passed to the search phase.;protected abstract SearchRequest buildSearchRequest()_;called,to,build,the,next,search,request,return,search,request,to,be,passed,to,the,search,phase;protected,abstract,search,request,build,search,request
AsyncTwoPhaseIndexer -> protected abstract SearchRequest buildSearchRequest()_;1543351570;Called to build the next search request.__@return SearchRequest to be passed to the search phase.;protected abstract SearchRequest buildSearchRequest()_;called,to,build,the,next,search,request,return,search,request,to,be,passed,to,the,search,phase;protected,abstract,search,request,build,search,request
AsyncTwoPhaseIndexer -> protected abstract SearchRequest buildSearchRequest()_;1545146193;Called to build the next search request.__@return SearchRequest to be passed to the search phase.;protected abstract SearchRequest buildSearchRequest()_;called,to,build,the,next,search,request,return,search,request,to,be,passed,to,the,search,phase;protected,abstract,search,request,build,search,request
AsyncTwoPhaseIndexer -> protected abstract SearchRequest buildSearchRequest()_;1547234098;Called to build the next search request.__@return SearchRequest to be passed to the search phase.;protected abstract SearchRequest buildSearchRequest()_;called,to,build,the,next,search,request,return,search,request,to,be,passed,to,the,search,phase;protected,abstract,search,request,build,search,request
