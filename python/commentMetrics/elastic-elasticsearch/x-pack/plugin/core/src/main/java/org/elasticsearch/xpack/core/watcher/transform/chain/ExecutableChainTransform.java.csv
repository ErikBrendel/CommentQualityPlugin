commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<ExecutableTransform> executableTransforms() {     return transforms. }
false;public;2;10;;@Override public ChainTransform.Result execute(WatchExecutionContext ctx, Payload payload) {     List<Transform.Result> results = new ArrayList<>().     try {         return doExecute(ctx, payload, results).     } catch (Exception e) {         logger.error((Supplier<?>) () -> new ParameterizedMessage("failed to execute [{}] transform for [{}]", TYPE, ctx.id()), e).         return new ChainTransform.Result(e, results).     } }
false;;3;12;;ChainTransform.Result doExecute(WatchExecutionContext ctx, Payload payload, List<Transform.Result> results) throws IOException {     for (ExecutableTransform transform : transforms) {         Transform.Result result = transform.execute(ctx, payload).         results.add(result).         if (result.status() == Transform.Result.Status.FAILURE) {             return new ChainTransform.Result(format("failed to execute [{}] transform for [{}]. failed to execute sub-transform [{}]", ChainTransform.TYPE, ctx.id(), transform.type()), results).         }         payload = result.payload().     }     return new ChainTransform.Result(payload, results). }
