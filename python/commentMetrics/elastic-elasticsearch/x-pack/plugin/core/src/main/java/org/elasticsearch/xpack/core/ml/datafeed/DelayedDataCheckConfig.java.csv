commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;14;;private static ConstructingObjectParser<DelayedDataCheckConfig, Void> createParser(boolean ignoreUnknownFields) {     ConstructingObjectParser<DelayedDataCheckConfig, Void> parser = new ConstructingObjectParser<>("delayed_data_check_config", ignoreUnknownFields, a -> new DelayedDataCheckConfig((Boolean) a[0], (TimeValue) a[1])).     parser.declareBoolean(ConstructingObjectParser.constructorArg(), ENABLED).     parser.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {         if (p.currentToken() == XContentParser.Token.VALUE_STRING) {             return TimeValue.parseTimeValue(p.text(), CHECK_WINDOW.getPreferredName()).         }         throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]").     }, CHECK_WINDOW, ObjectParser.ValueType.STRING).     return parser. }
false;public,static;0;3;;public static DelayedDataCheckConfig defaultDelayedDataCheckConfig() {     return new DelayedDataCheckConfig(true, null). }
false;public,static;1;3;;public static DelayedDataCheckConfig enabledDelayedDataCheckConfig(TimeValue timeValue) {     return new DelayedDataCheckConfig(true, timeValue). }
false;public,static;0;3;;public static DelayedDataCheckConfig disabledDelayedDataCheckConfig() {     return new DelayedDataCheckConfig(false, null). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeBoolean(enabled).     out.writeOptionalTimeValue(checkWindow). }
false;public;0;3;;public boolean isEnabled() {     return enabled. }
false;public;0;4;;@Nullable public TimeValue getCheckWindow() {     return checkWindow. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params params) throws IOException {     builder.startObject().     builder.field(ENABLED.getPreferredName(), enabled).     if (checkWindow != null) {         builder.field(CHECK_WINDOW.getPreferredName(), checkWindow.getStringRep()).     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(enabled, checkWindow). }
false;public;1;12;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     DelayedDataCheckConfig other = (DelayedDataCheckConfig) obj.     return Objects.equals(this.enabled, other.enabled) && Objects.equals(this.checkWindow, other.checkWindow). }
