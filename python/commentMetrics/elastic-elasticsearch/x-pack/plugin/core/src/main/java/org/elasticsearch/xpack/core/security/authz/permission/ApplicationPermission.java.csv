# id;timestamp;commentText;codeText;commentWords;codeWords
ApplicationPermission -> public Set<String> getResourcePatterns(ApplicationPrivilege privilege);1539951844;Returns a set of resource patterns that are permitted for the provided privilege._The returned set may include patterns that overlap (e.g. "object/*" and "object/1") and may_also include patterns that are defined again a more permissive privilege._e.g. If a permission grants_<ul>_<li>"my-app", "read", [ "user/*" ]</li>_<li>"my-app", "all", [ "user/kimchy", "config/*" ]</li>_</ul>_Then <code>getResourcePatterns( myAppRead )</code> would return <code>"user/*", "user/kimchy", "config/*"</code>.;public Set<String> getResourcePatterns(ApplicationPrivilege privilege) {_        return permissions.stream()_            .filter(e -> e.matchesPrivilege(privilege))_            .map(e -> e.resourceNames)_            .flatMap(Set::stream)_            .collect(Collectors.toSet())__    };returns,a,set,of,resource,patterns,that,are,permitted,for,the,provided,privilege,the,returned,set,may,include,patterns,that,overlap,e,g,object,and,object,1,and,may,also,include,patterns,that,are,defined,again,a,more,permissive,privilege,e,g,if,a,permission,grants,ul,li,my,app,read,user,li,li,my,app,all,user,kimchy,config,li,ul,then,code,get,resource,patterns,my,app,read,code,would,return,code,user,user,kimchy,config,code;public,set,string,get,resource,patterns,application,privilege,privilege,return,permissions,stream,filter,e,e,matches,privilege,privilege,map,e,e,resource,names,flat,map,set,stream,collect,collectors,to,set
ApplicationPermission -> public Set<String> getResourcePatterns(ApplicationPrivilege privilege);1549336917;Returns a set of resource patterns that are permitted for the provided privilege._The returned set may include patterns that overlap (e.g. "object/*" and "object/1") and may_also include patterns that are defined again a more permissive privilege._e.g. If a permission grants_<ul>_<li>"my-app", "read", [ "user/*" ]</li>_<li>"my-app", "all", [ "user/kimchy", "config/*" ]</li>_</ul>_Then <code>getResourcePatterns( myAppRead )</code> would return <code>"user/*", "user/kimchy", "config/*"</code>.;public Set<String> getResourcePatterns(ApplicationPrivilege privilege) {_        return permissions.stream()_            .filter(e -> e.matchesPrivilege(privilege))_            .map(e -> e.resourceNames)_            .flatMap(Set::stream)_            .collect(Collectors.toSet())__    };returns,a,set,of,resource,patterns,that,are,permitted,for,the,provided,privilege,the,returned,set,may,include,patterns,that,overlap,e,g,object,and,object,1,and,may,also,include,patterns,that,are,defined,again,a,more,permissive,privilege,e,g,if,a,permission,grants,ul,li,my,app,read,user,li,li,my,app,all,user,kimchy,config,li,ul,then,code,get,resource,patterns,my,app,read,code,would,return,code,user,user,kimchy,config,code;public,set,string,get,resource,patterns,application,privilege,privilege,return,permissions,stream,filter,e,e,matches,privilege,privilege,map,e,e,resource,names,flat,map,set,stream,collect,collectors,to,set
ApplicationPermission -> ApplicationPermission(List<Tuple<ApplicationPrivilege, Set<String>>> privilegesAndResources);1532456624;@param privilegesAndResources A list of (privilege, resources). Each element in the {@link List} is a {@link Tuple} containing_a single {@link ApplicationPrivilege} and the {@link Set} of resources to which that privilege is_applied. The resources are treated as a wildcard {@link Automatons#pattern}.;ApplicationPermission(List<Tuple<ApplicationPrivilege, Set<String>>> privilegesAndResources) {_        this.logger = Loggers.getLogger(getClass())__        Map<ApplicationPrivilege, PermissionEntry> permissionsByPrivilege = new HashMap<>()__        privilegesAndResources.forEach(tup -> permissionsByPrivilege.compute(tup.v1(), (k, existing) -> {_            final Automaton patterns = Automatons.patterns(tup.v2())__            if (existing == null) {_                return new PermissionEntry(k, patterns)__            } else {_                return new PermissionEntry(k, Automatons.unionAndMinimize(Arrays.asList(existing.resources, patterns)))__            }_        }))__        this.permissions = Collections.unmodifiableList(new ArrayList<>(permissionsByPrivilege.values()))__    };param,privileges,and,resources,a,list,of,privilege,resources,each,element,in,the,link,list,is,a,link,tuple,containing,a,single,link,application,privilege,and,the,link,set,of,resources,to,which,that,privilege,is,applied,the,resources,are,treated,as,a,wildcard,link,automatons,pattern;application,permission,list,tuple,application,privilege,set,string,privileges,and,resources,this,logger,loggers,get,logger,get,class,map,application,privilege,permission,entry,permissions,by,privilege,new,hash,map,privileges,and,resources,for,each,tup,permissions,by,privilege,compute,tup,v1,k,existing,final,automaton,patterns,automatons,patterns,tup,v2,if,existing,null,return,new,permission,entry,k,patterns,else,return,new,permission,entry,k,automatons,union,and,minimize,arrays,as,list,existing,resources,patterns,this,permissions,collections,unmodifiable,list,new,array,list,permissions,by,privilege,values
ApplicationPermission -> ApplicationPermission(List<Tuple<ApplicationPrivilege, Set<String>>> privilegesAndResources);1539951844;@param privilegesAndResources A list of (privilege, resources). Each element in the {@link List} is a {@link Tuple} containing_a single {@link ApplicationPrivilege} and the {@link Set} of resources to which that privilege is_applied. The resources are treated as a wildcard {@link Automatons#pattern}.;ApplicationPermission(List<Tuple<ApplicationPrivilege, Set<String>>> privilegesAndResources) {_        this.logger = LogManager.getLogger(getClass())__        Map<ApplicationPrivilege, PermissionEntry> permissionsByPrivilege = new HashMap<>()__        privilegesAndResources.forEach(tup -> permissionsByPrivilege.compute(tup.v1(), (appPriv, existing) -> {_            final Set<String> resourceNames = tup.v2()__            final Automaton patterns = Automatons.patterns(resourceNames)__            if (existing == null) {_                return new PermissionEntry(appPriv, resourceNames, patterns)__            } else {_                return new PermissionEntry(appPriv, Sets.union(existing.resourceNames, resourceNames),_                    Automatons.unionAndMinimize(Arrays.asList(existing.resourceAutomaton, patterns)))__            }_        }))__        this.permissions = Collections.unmodifiableList(new ArrayList<>(permissionsByPrivilege.values()))__    };param,privileges,and,resources,a,list,of,privilege,resources,each,element,in,the,link,list,is,a,link,tuple,containing,a,single,link,application,privilege,and,the,link,set,of,resources,to,which,that,privilege,is,applied,the,resources,are,treated,as,a,wildcard,link,automatons,pattern;application,permission,list,tuple,application,privilege,set,string,privileges,and,resources,this,logger,log,manager,get,logger,get,class,map,application,privilege,permission,entry,permissions,by,privilege,new,hash,map,privileges,and,resources,for,each,tup,permissions,by,privilege,compute,tup,v1,app,priv,existing,final,set,string,resource,names,tup,v2,final,automaton,patterns,automatons,patterns,resource,names,if,existing,null,return,new,permission,entry,app,priv,resource,names,patterns,else,return,new,permission,entry,app,priv,sets,union,existing,resource,names,resource,names,automatons,union,and,minimize,arrays,as,list,existing,resource,automaton,patterns,this,permissions,collections,unmodifiable,list,new,array,list,permissions,by,privilege,values
ApplicationPermission -> ApplicationPermission(List<Tuple<ApplicationPrivilege, Set<String>>> privilegesAndResources);1549336917;@param privilegesAndResources A list of (privilege, resources). Each element in the {@link List} is a {@link Tuple} containing_a single {@link ApplicationPrivilege} and the {@link Set} of resources to which that privilege is_applied. The resources are treated as a wildcard {@link Automatons#pattern}.;ApplicationPermission(List<Tuple<ApplicationPrivilege, Set<String>>> privilegesAndResources) {_        this.logger = LogManager.getLogger(getClass())__        Map<ApplicationPrivilege, PermissionEntry> permissionsByPrivilege = new HashMap<>()__        privilegesAndResources.forEach(tup -> permissionsByPrivilege.compute(tup.v1(), (appPriv, existing) -> {_            final Set<String> resourceNames = tup.v2()__            final Automaton patterns = Automatons.patterns(resourceNames)__            if (existing == null) {_                return new PermissionEntry(appPriv, resourceNames, patterns)__            } else {_                return new PermissionEntry(appPriv, Sets.union(existing.resourceNames, resourceNames),_                    Automatons.unionAndMinimize(Arrays.asList(existing.resourceAutomaton, patterns)))__            }_        }))__        this.permissions = Collections.unmodifiableList(new ArrayList<>(permissionsByPrivilege.values()))__    };param,privileges,and,resources,a,list,of,privilege,resources,each,element,in,the,link,list,is,a,link,tuple,containing,a,single,link,application,privilege,and,the,link,set,of,resources,to,which,that,privilege,is,applied,the,resources,are,treated,as,a,wildcard,link,automatons,pattern;application,permission,list,tuple,application,privilege,set,string,privileges,and,resources,this,logger,log,manager,get,logger,get,class,map,application,privilege,permission,entry,permissions,by,privilege,new,hash,map,privileges,and,resources,for,each,tup,permissions,by,privilege,compute,tup,v1,app,priv,existing,final,set,string,resource,names,tup,v2,final,automaton,patterns,automatons,patterns,resource,names,if,existing,null,return,new,permission,entry,app,priv,resource,names,patterns,else,return,new,permission,entry,app,priv,sets,union,existing,resource,names,resource,names,automatons,union,and,minimize,arrays,as,list,existing,resource,automaton,patterns,this,permissions,collections,unmodifiable,list,new,array,list,permissions,by,privilege,values
ApplicationPermission -> public boolean grants(ApplicationPrivilege other, String resource);1532456624;Determines whether this permission grants the specified privilege on the given resource._<p>_An {@link ApplicationPermission} consists of a sequence of permission entries, where each entry contains a single_{@link ApplicationPrivilege} and one or more resource patterns._</p>_<p>_This method returns {@code true} if, one or more of those entries meet the following criteria_</p>_<ul>_<li>The entry's application, when interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern} matches the_application given in the argument (interpreted as a raw string)_</li>_<li>The {@link ApplicationPrivilege#getAutomaton automaton that defines the entry's actions} entirely covers the_automaton given in the argument (that is, the argument is a subset of the entry's automaton)_</li>_<li>The entry's resources, when interpreted as an {@link Automaton} {@link Automatons#patterns(String...)} set of patterns} entirely_covers the resource given in the argument (also interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern}._</li>_</ul>;public boolean grants(ApplicationPrivilege other, String resource) {_        Automaton resourceAutomaton = Automatons.patterns(resource)__        final boolean matched = permissions.stream().anyMatch(e -> e.grants(other, resourceAutomaton))__        logger.trace("Permission [{}] {} grant [{} , {}]", this, matched ? "does" : "does not", other, resource)__        return matched__    };determines,whether,this,permission,grants,the,specified,privilege,on,the,given,resource,p,an,link,application,permission,consists,of,a,sequence,of,permission,entries,where,each,entry,contains,a,single,link,application,privilege,and,one,or,more,resource,patterns,p,p,this,method,returns,code,true,if,one,or,more,of,those,entries,meet,the,following,criteria,p,ul,li,the,entry,s,application,when,interpreted,as,an,link,automaton,link,automatons,pattern,string,pattern,matches,the,application,given,in,the,argument,interpreted,as,a,raw,string,li,li,the,link,application,privilege,get,automaton,automaton,that,defines,the,entry,s,actions,entirely,covers,the,automaton,given,in,the,argument,that,is,the,argument,is,a,subset,of,the,entry,s,automaton,li,li,the,entry,s,resources,when,interpreted,as,an,link,automaton,link,automatons,patterns,string,set,of,patterns,entirely,covers,the,resource,given,in,the,argument,also,interpreted,as,an,link,automaton,link,automatons,pattern,string,pattern,li,ul;public,boolean,grants,application,privilege,other,string,resource,automaton,resource,automaton,automatons,patterns,resource,final,boolean,matched,permissions,stream,any,match,e,e,grants,other,resource,automaton,logger,trace,permission,grant,this,matched,does,does,not,other,resource,return,matched
ApplicationPermission -> public boolean grants(ApplicationPrivilege other, String resource);1539951844;Determines whether this permission grants the specified privilege on the given resource._<p>_An {@link ApplicationPermission} consists of a sequence of permission entries, where each entry contains a single_{@link ApplicationPrivilege} and one or more resource patterns._</p>_<p>_This method returns {@code true} if, one or more of those entries meet the following criteria_</p>_<ul>_<li>The entry's application, when interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern} matches the_application given in the argument (interpreted as a raw string)_</li>_<li>The {@link ApplicationPrivilege#getAutomaton automaton that defines the entry's actions} entirely covers the_automaton given in the argument (that is, the argument is a subset of the entry's automaton)_</li>_<li>The entry's resources, when interpreted as an {@link Automaton} {@link Automatons#patterns(String...)} set of patterns} entirely_covers the resource given in the argument (also interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern}._</li>_</ul>;public boolean grants(ApplicationPrivilege other, String resource) {_        Automaton resourceAutomaton = Automatons.patterns(resource)__        final boolean matched = permissions.stream().anyMatch(e -> e.grants(other, resourceAutomaton))__        logger.trace("Permission [{}] {} grant [{} , {}]", this, matched ? "does" : "does not", other, resource)__        return matched__    };determines,whether,this,permission,grants,the,specified,privilege,on,the,given,resource,p,an,link,application,permission,consists,of,a,sequence,of,permission,entries,where,each,entry,contains,a,single,link,application,privilege,and,one,or,more,resource,patterns,p,p,this,method,returns,code,true,if,one,or,more,of,those,entries,meet,the,following,criteria,p,ul,li,the,entry,s,application,when,interpreted,as,an,link,automaton,link,automatons,pattern,string,pattern,matches,the,application,given,in,the,argument,interpreted,as,a,raw,string,li,li,the,link,application,privilege,get,automaton,automaton,that,defines,the,entry,s,actions,entirely,covers,the,automaton,given,in,the,argument,that,is,the,argument,is,a,subset,of,the,entry,s,automaton,li,li,the,entry,s,resources,when,interpreted,as,an,link,automaton,link,automatons,patterns,string,set,of,patterns,entirely,covers,the,resource,given,in,the,argument,also,interpreted,as,an,link,automaton,link,automatons,pattern,string,pattern,li,ul;public,boolean,grants,application,privilege,other,string,resource,automaton,resource,automaton,automatons,patterns,resource,final,boolean,matched,permissions,stream,any,match,e,e,grants,other,resource,automaton,logger,trace,permission,grant,this,matched,does,does,not,other,resource,return,matched
ApplicationPermission -> public boolean grants(ApplicationPrivilege other, String resource);1549336917;Determines whether this permission grants the specified privilege on the given resource._<p>_An {@link ApplicationPermission} consists of a sequence of permission entries, where each entry contains a single_{@link ApplicationPrivilege} and one or more resource patterns._</p>_<p>_This method returns {@code true} if, one or more of those entries meet the following criteria_</p>_<ul>_<li>The entry's application, when interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern} matches the_application given in the argument (interpreted as a raw string)_</li>_<li>The {@link ApplicationPrivilege#getAutomaton automaton that defines the entry's actions} entirely covers the_automaton given in the argument (that is, the argument is a subset of the entry's automaton)_</li>_<li>The entry's resources, when interpreted as an {@link Automaton} {@link Automatons#patterns(String...)} set of patterns} entirely_covers the resource given in the argument (also interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern}._</li>_</ul>;public boolean grants(ApplicationPrivilege other, String resource) {_        Automaton resourceAutomaton = Automatons.patterns(resource)__        final boolean matched = permissions.stream().anyMatch(e -> e.grants(other, resourceAutomaton))__        logger.trace("Permission [{}] {} grant [{} , {}]", this, matched ? "does" : "does not", other, resource)__        return matched__    };determines,whether,this,permission,grants,the,specified,privilege,on,the,given,resource,p,an,link,application,permission,consists,of,a,sequence,of,permission,entries,where,each,entry,contains,a,single,link,application,privilege,and,one,or,more,resource,patterns,p,p,this,method,returns,code,true,if,one,or,more,of,those,entries,meet,the,following,criteria,p,ul,li,the,entry,s,application,when,interpreted,as,an,link,automaton,link,automatons,pattern,string,pattern,matches,the,application,given,in,the,argument,interpreted,as,a,raw,string,li,li,the,link,application,privilege,get,automaton,automaton,that,defines,the,entry,s,actions,entirely,covers,the,automaton,given,in,the,argument,that,is,the,argument,is,a,subset,of,the,entry,s,automaton,li,li,the,entry,s,resources,when,interpreted,as,an,link,automaton,link,automatons,patterns,string,set,of,patterns,entirely,covers,the,resource,given,in,the,argument,also,interpreted,as,an,link,automaton,link,automatons,pattern,string,pattern,li,ul;public,boolean,grants,application,privilege,other,string,resource,automaton,resource,automaton,automatons,patterns,resource,final,boolean,matched,permissions,stream,any,match,e,e,grants,other,resource,automaton,logger,trace,permission,grant,this,matched,does,does,not,other,resource,return,matched
