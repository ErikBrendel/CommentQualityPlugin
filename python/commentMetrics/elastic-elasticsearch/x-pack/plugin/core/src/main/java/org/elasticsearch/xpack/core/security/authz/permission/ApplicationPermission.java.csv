commented;modifiers;parameterAmount;loc;comment;code
true;public;2;6;/**  * Determines whether this permission grants the specified privilege on the given resource.  * <p>  * An {@link ApplicationPermission} consists of a sequence of permission entries, where each entry contains a single  * {@link ApplicationPrivilege} and one or more resource patterns.  * </p>  * <p>  * This method returns {@code true} if, one or more of those entries meet the following criteria  * </p>  * <ul>  * <li>The entry's application, when interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern} matches the  * application given in the argument (interpreted as a raw string)  * </li>  * <li>The {@link ApplicationPrivilege#getAutomaton automaton that defines the entry's actions} entirely covers the  * automaton given in the argument (that is, the argument is a subset of the entry's automaton)  * </li>  * <li>The entry's resources, when interpreted as an {@link Automaton} {@link Automatons#patterns(String...)} set of patterns} entirely  * covers the resource given in the argument (also interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern}.  * </li>  * </ul>  */ ;/**  * Determines whether this permission grants the specified privilege on the given resource.  * <p>  * An {@link ApplicationPermission} consists of a sequence of permission entries, where each entry contains a single  * {@link ApplicationPrivilege} and one or more resource patterns.  * </p>  * <p>  * This method returns {@code true} if, one or more of those entries meet the following criteria  * </p>  * <ul>  * <li>The entry's application, when interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern} matches the  * application given in the argument (interpreted as a raw string)  * </li>  * <li>The {@link ApplicationPrivilege#getAutomaton automaton that defines the entry's actions} entirely covers the  * automaton given in the argument (that is, the argument is a subset of the entry's automaton)  * </li>  * <li>The entry's resources, when interpreted as an {@link Automaton} {@link Automatons#patterns(String...)} set of patterns} entirely  * covers the resource given in the argument (also interpreted as an {@link Automaton} {@link Automatons#pattern(String) pattern}.  * </li>  * </ul>  */ public boolean grants(ApplicationPrivilege other, String resource) {     Automaton resourceAutomaton = Automatons.patterns(resource).     final boolean matched = permissions.stream().anyMatch(e -> e.grants(other, resourceAutomaton)).     logger.trace("Permission [{}] {} grant [{} , {}]", this, matched ? "does" : "does not", other, resource).     return matched. }
true;public;4;21;/**  * For a given application, checks for the privileges for resources and returns an instance of {@link ResourcePrivilegesMap} holding a  * map of resource to {@link ResourcePrivileges} where the resource is application resource and the map of application privilege to  * whether it is allowed or not.  *  * @param applicationName checks privileges for the provided application name  * @param checkForResources check permission grants for the set of resources  * @param checkForPrivilegeNames check permission grants for the set of privilege names  * @param storedPrivileges stored {@link ApplicationPrivilegeDescriptor} for an application against which the access checks are  *        performed  * @return an instance of {@link ResourcePrivilegesMap}  */ ;/**  * For a given application, checks for the privileges for resources and returns an instance of {@link ResourcePrivilegesMap} holding a  * map of resource to {@link ResourcePrivileges} where the resource is application resource and the map of application privilege to  * whether it is allowed or not.  *  * @param applicationName checks privileges for the provided application name  * @param checkForResources check permission grants for the set of resources  * @param checkForPrivilegeNames check permission grants for the set of privilege names  * @param storedPrivileges stored {@link ApplicationPrivilegeDescriptor} for an application against which the access checks are  *        performed  * @return an instance of {@link ResourcePrivilegesMap}  */ public ResourcePrivilegesMap checkResourcePrivileges(final String applicationName, Set<String> checkForResources, Set<String> checkForPrivilegeNames, Collection<ApplicationPrivilegeDescriptor> storedPrivileges) {     final ResourcePrivilegesMap.Builder resourcePrivilegesMapBuilder = ResourcePrivilegesMap.builder().     for (String checkResource : checkForResources) {         for (String checkPrivilegeName : checkForPrivilegeNames) {             final Set<String> nameSet = Collections.singleton(checkPrivilegeName).             final ApplicationPrivilege checkPrivilege = ApplicationPrivilege.get(applicationName, nameSet, storedPrivileges).             assert checkPrivilege.getApplication().equals(applicationName) : "Privilege " + checkPrivilege + " should have application " + applicationName.             assert checkPrivilege.name().equals(nameSet) : "Privilege " + checkPrivilege + " should have name " + nameSet.             if (grants(checkPrivilege, checkResource)) {                 resourcePrivilegesMapBuilder.addResourcePrivilege(checkResource, checkPrivilegeName, Boolean.TRUE).             } else {                 resourcePrivilegesMapBuilder.addResourcePrivilege(checkResource, checkPrivilegeName, Boolean.FALSE).             }         }     }     return resourcePrivilegesMapBuilder.build(). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "{privileges=" + permissions + "}". }
false;public;0;5;;public Set<String> getApplicationNames() {     return permissions.stream().map(e -> e.privilege.getApplication()).collect(Collectors.toSet()). }
false;public;1;6;;public Set<ApplicationPrivilege> getPrivileges(String application) {     return permissions.stream().filter(e -> application.equals(e.privilege.getApplication())).map(e -> e.privilege).collect(Collectors.toSet()). }
true;public;1;7;/**  * Returns a set of resource patterns that are permitted for the provided privilege.  * The returned set may include patterns that overlap (e.g. "object/*" and "object/1") and may  * also include patterns that are defined again a more permissive privilege.  * e.g. If a permission grants  * <ul>  *     <li>"my-app", "read", [ "user/*" ]</li>  *     <li>"my-app", "all", [ "user/kimchy", "config/*" ]</li>  * </ul>  * Then <code>getResourcePatterns( myAppRead )</code> would return <code>"user/*", "user/kimchy", "config/*"</code>.  */ ;/**  * Returns a set of resource patterns that are permitted for the provided privilege.  * The returned set may include patterns that overlap (e.g. "object/*" and "object/1") and may  * also include patterns that are defined again a more permissive privilege.  * e.g. If a permission grants  * <ul>  *     <li>"my-app", "read", [ "user/*" ]</li>  *     <li>"my-app", "all", [ "user/kimchy", "config/*" ]</li>  * </ul>  * Then <code>getResourcePatterns( myAppRead )</code> would return <code>"user/*", "user/kimchy", "config/*"</code>.  */ public Set<String> getResourcePatterns(ApplicationPrivilege privilege) {     return permissions.stream().filter(e -> e.matchesPrivilege(privilege)).map(e -> e.resourceNames).flatMap(Set::stream).collect(Collectors.toSet()). }
false;private;2;3;;private boolean grants(ApplicationPrivilege other, Automaton resource) {     return matchesPrivilege(other) && Operations.subsetOf(resource, this.resourceAutomaton). }
false;private;1;14;;private boolean matchesPrivilege(ApplicationPrivilege other) {     if (this.privilege.equals(other)) {         return true.     }     if (this.application.test(other.getApplication()) == false) {         return false.     }     if (Operations.isTotal(privilege.getAutomaton())) {         return true.     }     return Operations.isEmpty(privilege.getAutomaton()) == false && Operations.isEmpty(other.getAutomaton()) == false && Operations.subsetOf(other.getAutomaton(), privilege.getAutomaton()). }
false;public;0;4;;@Override public String toString() {     return privilege.toString() + ":" + resourceNames. }
