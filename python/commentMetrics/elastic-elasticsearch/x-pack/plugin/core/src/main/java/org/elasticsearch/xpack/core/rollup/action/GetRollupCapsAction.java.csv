commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;0;3;;public String getIndexPattern() {     return indexPattern. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     this.indexPattern = in.readString(). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeString(indexPattern). }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.field(RollupField.ID.getPreferredName(), indexPattern).     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(indexPattern). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(indexPattern, other.indexPattern). }
false;public;0;3;;public Map<String, RollableIndexCaps> getJobs() {     return jobs. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     out.writeMap(jobs, StreamOutput::writeString, (out1, value) -> value.writeTo(out1)). }
false;public;2;11;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     {         for (Map.Entry<String, RollableIndexCaps> entry : jobs.entrySet()) {             entry.getValue().toXContent(builder, params).         }     }     builder.endObject().     return builder. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(jobs). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     Response other = (Response) obj.     return Objects.equals(jobs, other.jobs). }
false;public,final;0;4;;@Override public final String toString() {     return Strings.toString(this). }
