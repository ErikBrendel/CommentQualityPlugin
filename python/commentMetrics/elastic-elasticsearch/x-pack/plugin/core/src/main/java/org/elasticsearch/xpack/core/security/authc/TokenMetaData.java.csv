commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<KeyAndTimestamp> getKeys() {     return keys. }
false;public;0;3;;public byte[] getCurrentKeyHash() {     return currentKeyHash. }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     out.writeByteArray(currentKeyHash).     out.writeList(keys). }
false;public,static;1;3;;public static NamedDiff<ClusterState.Custom> readDiffFrom(StreamInput in) throws IOException {     return readDiffFrom(ClusterState.Custom.class, TYPE, in). }
false;public;0;4;;@Override public String getWriteableName() {     return TYPE. }
false;public;2;5;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     // never render this to the user     return builder. }
false;public;1;8;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TokenMetaData that = (TokenMetaData) o.     return keys.equals(that.keys) && Arrays.equals(currentKeyHash, that.currentKeyHash). }
false;public;0;6;;@Override public int hashCode() {     int result = keys.hashCode().     result = 31 * result + Arrays.hashCode(currentKeyHash).     return result. }
false;public;0;4;;@Override public String toString() {     return "TokenMetaData{ everything is secret }". }
false;public;0;4;;@Override public Version getMinimalSupportedVersion() {     return Version.V_6_0_0_beta2. }
false;public;0;5;;@Override public boolean isPrivate() {     // never sent this to a client     return true. }
