commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Response newResponse() {     return new Response(). }
false;public;0;3;;public LifecyclePolicy getPolicy() {     return policy. }
false;public;0;4;;@Override public ActionRequestValidationException validate() {     return null. }
false;public,static;2;3;;public static Request parseRequest(String name, XContentParser parser) {     return PARSER.apply(parser, name). }
false;public;2;7;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(POLICY_FIELD.getPreferredName(), policy).     builder.endObject().     return builder. }
false;public;1;5;;@Override public void readFrom(StreamInput in) throws IOException {     super.readFrom(in).     policy = new LifecyclePolicy(in). }
false;public;1;5;;@Override public void writeTo(StreamOutput out) throws IOException {     super.writeTo(out).     policy.writeTo(out). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(policy). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj.getClass() != getClass()) {         return false.     }     Request other = (Request) obj.     return Objects.equals(policy, other.policy). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this, true, true). }
