commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public void evaluateCondition(IndexMetaData indexMetaData, Listener listener) {     Map<String, String> customIndexMetadata = indexMetaData.getCustomData(CCR_METADATA_KEY).     if (customIndexMetadata == null) {         listener.onResponse(true, null).         return.     }     FollowStatsAction.StatsRequest request = new FollowStatsAction.StatsRequest().     request.setIndices(new String[] { indexMetaData.getIndex().getName() }).     getClient().execute(FollowStatsAction.INSTANCE, request, ActionListener.wrap(r -> handleResponse(r, listener), listener::onFailure)). }
false;;2;20;;void handleResponse(FollowStatsAction.StatsResponses responses, Listener listener) {     List<ShardFollowNodeTaskStatus> unSyncedShardFollowStatuses = responses.getStatsResponses().stream().map(FollowStatsAction.StatsResponse::status).filter(shardFollowStatus -> shardFollowStatus.leaderGlobalCheckpoint() != shardFollowStatus.followerGlobalCheckpoint()).collect(Collectors.toList()).     // Follow stats api needs to return stats for follower index and all shard follow tasks should be synced:     boolean conditionMet = responses.getStatsResponses().size() > 0 && unSyncedShardFollowStatuses.isEmpty().     if (conditionMet) {         listener.onResponse(true, null).     } else {         List<Info.ShardFollowTaskInfo> shardFollowTaskInfos = unSyncedShardFollowStatuses.stream().map(status -> new Info.ShardFollowTaskInfo(status.followerIndex(), status.getShardId(), status.leaderGlobalCheckpoint(), status.followerGlobalCheckpoint())).collect(Collectors.toList()).         listener.onResponse(false, new Info(shardFollowTaskInfos)).     } }
false;;0;3;;List<ShardFollowTaskInfo> getShardFollowTaskInfos() {     return shardFollowTaskInfos. }
false;public;2;14;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(SHARD_FOLLOW_TASKS.getPreferredName(), shardFollowTaskInfos).     String message.     if (shardFollowTaskInfos.size() > 0) {         message = "Waiting for [" + shardFollowTaskInfos.size() + "] shard follow tasks to be in sync".     } else {         message = "Waiting for following to be unpaused and all shard follow tasks to be up to date".     }     builder.field(MESSAGE.getPreferredName(), message).     builder.endObject().     return builder. }
false;public;1;7;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     Info info = (Info) o.     return Objects.equals(shardFollowTaskInfos, info.shardFollowTaskInfos). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(shardFollowTaskInfos). }
false;public;0;4;;@Override public String toString() {     return Strings.toString(this). }
false;;0;3;;String getFollowerIndex() {     return followerIndex. }
false;;0;3;;int getShardId() {     return shardId. }
false;;0;3;;long getLeaderGlobalCheckpoint() {     return leaderGlobalCheckpoint. }
false;;0;3;;long getFollowerGlobalCheckpoint() {     return followerGlobalCheckpoint. }
false;public;2;10;;@Override public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {     builder.startObject().     builder.field(FOLLOWER_INDEX_FIELD.getPreferredName(), followerIndex).     builder.field(SHARD_ID_FIELD.getPreferredName(), shardId).     builder.field(LEADER_GLOBAL_CHECKPOINT_FIELD.getPreferredName(), leaderGlobalCheckpoint).     builder.field(FOLLOWER_GLOBAL_CHECKPOINT_FIELD.getPreferredName(), followerGlobalCheckpoint).     builder.endObject().     return builder. }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     ShardFollowTaskInfo that = (ShardFollowTaskInfo) o.     return shardId == that.shardId && leaderGlobalCheckpoint == that.leaderGlobalCheckpoint && followerGlobalCheckpoint == that.followerGlobalCheckpoint && Objects.equals(followerIndex, that.followerIndex). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(followerIndex, shardId, leaderGlobalCheckpoint, followerGlobalCheckpoint). }
